
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025460  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004304  08025630  08025630  00035630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003cfc  08029934  08029934  00039934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802d630  0802d630  0003d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001fc  08060b28  08060b28  00070b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08060d24  08060d24  000800fc  2**0
                  CONTENTS
  7 .ARM          00000008  08060d24  08060d24  00070d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08060d2c  08060d2c  000800fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08060d2c  08060d2c  00070d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08060d40  08060d40  00070d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  08060d48  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca38  200000fc  08060e44  000800fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cb34  08060e44  0008cb34  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000800fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005ad7f  00000000  00000000  0008012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ef4c  00000000  00000000  000daeab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004128  00000000  00000000  000e9df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b08  00000000  00000000  000edf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f1a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000416df  00000000  00000000  0012c931  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012efd1  00000000  00000000  0016e010  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029cfe1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000117cc  00000000  00000000  0029d0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025618 	.word	0x08025618

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08025618 	.word	0x08025618

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	20000170 	.word	0x20000170

08000b40 <SecondTask>:
static float batt_v = 0;

extern xQueueHandle messageQ;

void SecondTask(void const* argument)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08f      	sub	sp, #60	; 0x3c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	static const int demo_mode = 1;
	for(;;)
	{
		if(demo_mode)
 8000b48:	4b95      	ldr	r3, [pc, #596]	; (8000da0 <SecondTask+0x260>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 80e1 	beq.w	8000d14 <SecondTask+0x1d4>
		{

			rpm = (rpm >= 10000) ? 0: rpm + 250;
 8000b52:	4b94      	ldr	r3, [pc, #592]	; (8000da4 <SecondTask+0x264>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	dc03      	bgt.n	8000b66 <SecondTask+0x26>
 8000b5e:	4b91      	ldr	r3, [pc, #580]	; (8000da4 <SecondTask+0x264>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	33fa      	adds	r3, #250	; 0xfa
 8000b64:	e000      	b.n	8000b68 <SecondTask+0x28>
 8000b66:	2300      	movs	r3, #0
 8000b68:	4a8e      	ldr	r2, [pc, #568]	; (8000da4 <SecondTask+0x264>)
 8000b6a:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b6c:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <SecondTask+0x268>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2bf9      	cmp	r3, #249	; 0xf9
 8000b72:	dc03      	bgt.n	8000b7c <SecondTask+0x3c>
 8000b74:	4b8c      	ldr	r3, [pc, #560]	; (8000da8 <SecondTask+0x268>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3303      	adds	r3, #3
 8000b7a:	e001      	b.n	8000b80 <SecondTask+0x40>
 8000b7c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000b80:	4a89      	ldr	r2, [pc, #548]	; (8000da8 <SecondTask+0x268>)
 8000b82:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000b84:	4b89      	ldr	r3, [pc, #548]	; (8000dac <SecondTask+0x26c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b8c:	da03      	bge.n	8000b96 <SecondTask+0x56>
 8000b8e:	4b87      	ldr	r3, [pc, #540]	; (8000dac <SecondTask+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3306      	adds	r3, #6
 8000b94:	e000      	b.n	8000b98 <SecondTask+0x58>
 8000b96:	2301      	movs	r3, #1
 8000b98:	4a84      	ldr	r2, [pc, #528]	; (8000dac <SecondTask+0x26c>)
 8000b9a:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000b9c:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <SecondTask+0x270>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fce9 	bl	8000578 <__aeabi_f2d>
 8000ba6:	a374      	add	r3, pc, #464	; (adr r3, 8000d78 <SecondTask+0x238>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	f7ff fdb0 	bl	8000710 <__aeabi_dcmpge>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SecondTask+0x7a>
 8000bb6:	4b7f      	ldr	r3, [pc, #508]	; (8000db4 <SecondTask+0x274>)
 8000bb8:	e010      	b.n	8000bdc <SecondTask+0x9c>
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <SecondTask+0x270>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fcda 	bl	8000578 <__aeabi_f2d>
 8000bc4:	a36e      	add	r3, pc, #440	; (adr r3, 8000d80 <SecondTask+0x240>)
 8000bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bca:	f7ff fb77 	bl	80002bc <__adddf3>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff fdaf 	bl	8000738 <__aeabi_d2f>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a74      	ldr	r2, [pc, #464]	; (8000db0 <SecondTask+0x270>)
 8000bde:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000be0:	4b75      	ldr	r3, [pc, #468]	; (8000db8 <SecondTask+0x278>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fcc7 	bl	8000578 <__aeabi_f2d>
 8000bea:	a363      	add	r3, pc, #396	; (adr r3, 8000d78 <SecondTask+0x238>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fd8e 	bl	8000710 <__aeabi_dcmpge>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SecondTask+0xbe>
 8000bfa:	4b70      	ldr	r3, [pc, #448]	; (8000dbc <SecondTask+0x27c>)
 8000bfc:	e010      	b.n	8000c20 <SecondTask+0xe0>
 8000bfe:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <SecondTask+0x278>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fcb8 	bl	8000578 <__aeabi_f2d>
 8000c08:	a35f      	add	r3, pc, #380	; (adr r3, 8000d88 <SecondTask+0x248>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f7ff fb55 	bl	80002bc <__adddf3>
 8000c12:	4603      	mov	r3, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	4618      	mov	r0, r3
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f7ff fd8d 	bl	8000738 <__aeabi_d2f>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <SecondTask+0x278>)
 8000c22:	6013      	str	r3, [r2, #0]
			vehicle_spd = (vehicle_spd >= 400) ? 0: vehicle_spd + 6;
 8000c24:	4b66      	ldr	r3, [pc, #408]	; (8000dc0 <SecondTask+0x280>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c2c:	da03      	bge.n	8000c36 <SecondTask+0xf6>
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <SecondTask+0x280>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3306      	adds	r3, #6
 8000c34:	e000      	b.n	8000c38 <SecondTask+0xf8>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a61      	ldr	r2, [pc, #388]	; (8000dc0 <SecondTask+0x280>)
 8000c3a:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c3c:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <SecondTask+0x284>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b9f      	cmp	r3, #159	; 0x9f
 8000c42:	dc03      	bgt.n	8000c4c <SecondTask+0x10c>
 8000c44:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <SecondTask+0x284>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	e000      	b.n	8000c4e <SecondTask+0x10e>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <SecondTask+0x284>)
 8000c50:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <SecondTask+0x288>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	db01      	blt.n	8000c6a <SecondTask+0x12a>
 8000c66:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <SecondTask+0x28c>)
 8000c68:	e010      	b.n	8000c8c <SecondTask+0x14c>
 8000c6a:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <SecondTask+0x288>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc82 	bl	8000578 <__aeabi_f2d>
 8000c74:	a346      	add	r3, pc, #280	; (adr r3, 8000d90 <SecondTask+0x250>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fb1f 	bl	80002bc <__adddf3>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	4618      	mov	r0, r3
 8000c84:	4621      	mov	r1, r4
 8000c86:	f7ff fd57 	bl	8000738 <__aeabi_d2f>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <SecondTask+0x288>)
 8000c8e:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <SecondTask+0x290>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b63      	cmp	r3, #99	; 0x63
 8000c96:	dc03      	bgt.n	8000ca0 <SecondTask+0x160>
 8000c98:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <SecondTask+0x290>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	e000      	b.n	8000ca2 <SecondTask+0x162>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <SecondTask+0x290>)
 8000ca4:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <SecondTask+0x294>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cae:	da03      	bge.n	8000cb8 <SecondTask+0x178>
 8000cb0:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <SecondTask+0x294>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	e001      	b.n	8000cbc <SecondTask+0x17c>
 8000cb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <SecondTask+0x294>)
 8000cbe:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000cc0:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <SecondTask+0x298>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	dc03      	bgt.n	8000cd0 <SecondTask+0x190>
 8000cc8:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <SecondTask+0x298>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	e000      	b.n	8000cd2 <SecondTask+0x192>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <SecondTask+0x298>)
 8000cd4:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000cd6:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <SecondTask+0x29c>)
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce8:	db01      	blt.n	8000cee <SecondTask+0x1ae>
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <SecondTask+0x2a0>)
 8000cec:	e010      	b.n	8000d10 <SecondTask+0x1d0>
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <SecondTask+0x29c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc40 	bl	8000578 <__aeabi_f2d>
 8000cf8:	a327      	add	r3, pc, #156	; (adr r3, 8000d98 <SecondTask+0x258>)
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	f7ff fadd 	bl	80002bc <__adddf3>
 8000d02:	4603      	mov	r3, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	4618      	mov	r0, r3
 8000d08:	4621      	mov	r1, r4
 8000d0a:	f7ff fd15 	bl	8000738 <__aeabi_d2f>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <SecondTask+0x29c>)
 8000d12:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, vehicle_spd, oil_tmp, oil_press, iat, egt, tps, batt_v};
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <SecondTask+0x264>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SecondTask+0x268>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <SecondTask+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <SecondTask+0x270>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SecondTask+0x278>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <SecondTask+0x280>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <SecondTask+0x284>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <SecondTask+0x288>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SecondTask+0x290>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <SecondTask+0x294>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <SecondTask+0x298>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <SecondTask+0x29c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
	    xQueueSend(messageQ, &dispVals,0);
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <SecondTask+0x2a4>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f107 0108 	add.w	r1, r7, #8
 8000d64:	2300      	movs	r3, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	f00b fd88 	bl	800c87c <xQueueGenericSend>
		osDelay(150);
 8000d6c:	2096      	movs	r0, #150	; 0x96
 8000d6e:	f00b fa97 	bl	800c2a0 <osDelay>
	{
 8000d72:	e6e9      	b.n	8000b48 <SecondTask+0x8>
 8000d74:	f3af 8000 	nop.w
 8000d78:	66666666 	.word	0x66666666
 8000d7c:	3ff66666 	.word	0x3ff66666
 8000d80:	9999999a 	.word	0x9999999a
 8000d84:	3fa99999 	.word	0x3fa99999
 8000d88:	eb851eb8 	.word	0xeb851eb8
 8000d8c:	3faeb851 	.word	0x3faeb851
 8000d90:	9999999a 	.word	0x9999999a
 8000d94:	3fb99999 	.word	0x3fb99999
 8000d98:	33333333 	.word	0x33333333
 8000d9c:	3fe33333 	.word	0x3fe33333
 8000da0:	08025d78 	.word	0x08025d78
 8000da4:	20000004 	.word	0x20000004
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000010 	.word	0x20000010
 8000db4:	3f19999a 	.word	0x3f19999a
 8000db8:	20000014 	.word	0x20000014
 8000dbc:	3f266666 	.word	0x3f266666
 8000dc0:	20000380 	.word	0x20000380
 8000dc4:	20000384 	.word	0x20000384
 8000dc8:	20000388 	.word	0x20000388
 8000dcc:	3dcccccd 	.word	0x3dcccccd
 8000dd0:	2000038c 	.word	0x2000038c
 8000dd4:	20000390 	.word	0x20000390
 8000dd8:	20000394 	.word	0x20000394
 8000ddc:	20000398 	.word	0x20000398
 8000de0:	41200000 	.word	0x41200000
 8000de4:	20008690 	.word	0x20008690

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f002 fcf2 	bl	80037d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f85f 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f001 f9c5 	bl	8002184 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000dfa:	f000 f917 	bl	800102c <MX_ADC3_Init>
  MX_CRC_Init();
 8000dfe:	f000 fafd 	bl	80013fc <MX_CRC_Init>
  MX_DCMI_Init();
 8000e02:	f000 fb1d 	bl	8001440 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e06:	f000 fb4f 	bl	80014a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e0a:	f001 f90f 	bl	800202c <MX_FMC_Init>
  MX_LTDC_Init();
 8000e0e:	f000 fb7d 	bl	800150c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000e12:	f000 fbfd 	bl	8001610 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000e16:	f000 fc27 	bl	8001668 <MX_RTC_Init>
  MX_SAI2_Init();
 8000e1a:	f000 fccd 	bl	80017b8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000e1e:	f000 fd73 	bl	8001908 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000e22:	f000 fd91 	bl	8001948 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000e26:	f000 fdbf 	bl	80019a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e2a:	f000 fdfb 	bl	8001a24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e2e:	f000 fea5 	bl	8001b7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e32:	f000 ff19 	bl	8001c68 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e36:	f000 ff8d 	bl	8001d54 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e3a:	f001 f801 	bl	8001e40 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000e3e:	f001 f851 	bl	8001ee4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000e42:	f001 f893 	bl	8001f6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000e46:	f001 f8c1 	bl	8001fcc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000e4a:	f00a fee5 	bl	800bc18 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000e4e:	f000 f93f 	bl	80010d0 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000e52:	f00d ff57 	bl	800ed04 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <main+0xbc>)
 8000e58:	f107 041c 	add.w	r4, r7, #28
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00b f9c9 	bl	800c208 <osThreadCreate>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <main+0xc0>)
 8000e7a:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <main+0xc4>)
 8000e7e:	463c      	mov	r4, r7
 8000e80:	461d      	mov	r5, r3
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00b f9b8 	bl	800c208 <osThreadCreate>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <main+0xc8>)
 8000e9c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e9e:	f00b f990 	bl	800c1c2 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0xba>
 8000ea4:	0802563c 	.word	0x0802563c
 8000ea8:	2000bfb4 	.word	0x2000bfb4
 8000eac:	08025660 	.word	0x08025660
 8000eb0:	2000bfb0 	.word	0x2000bfb0

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b4      	sub	sp, #208	; 0xd0
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f023 fc2b 	bl	802471e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2284      	movs	r2, #132	; 0x84
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f023 fc1c 	bl	802471e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ee6:	f005 f94b 	bl	8006180 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b4d      	ldr	r3, [pc, #308]	; (8001020 <SystemClock_Config+0x16c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <SystemClock_Config+0x16c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <SystemClock_Config+0x16c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f02:	4b48      	ldr	r3, [pc, #288]	; (8001024 <SystemClock_Config+0x170>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a47      	ldr	r2, [pc, #284]	; (8001024 <SystemClock_Config+0x170>)
 8000f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b45      	ldr	r3, [pc, #276]	; (8001024 <SystemClock_Config+0x170>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f3c:	2319      	movs	r3, #25
 8000f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f50:	2309      	movs	r3, #9
 8000f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fa32 	bl	80063c4 <HAL_RCC_OscConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f66:	f001 fb41 	bl	80025ec <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f6a:	f005 f919 	bl	80061a0 <HAL_PWREx_EnableOverDrive>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f74:	f001 fb3a 	bl	80025ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	230f      	movs	r3, #15
 8000f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f9e:	2106      	movs	r1, #6
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fcb3 	bl	800690c <HAL_RCC_ClockConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fac:	f001 fb1e 	bl	80025ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <SystemClock_Config+0x174>)
 8000fb2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fc8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fe83 	bl	8006d14 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001014:	f001 faea 	bl	80025ec <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	37d0      	adds	r7, #208	; 0xd0
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	01b00868 	.word	0x01b00868

0800102c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC3_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC3_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC3_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ADC3_Init+0x98>)
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC3_Init+0xa0>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC3_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC3_Init+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC3_Init+0x98>)
 800108e:	f002 fbf1 	bl	8003874 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001098:	f001 faa8 	bl	80025ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800109c:	2304      	movs	r3, #4
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC3_Init+0x98>)
 80010ae:	f002 fc25 	bl	80038fc <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010b8:	f001 fa98 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000c2fc 	.word	0x2000c2fc
 80010c8:	40012200 	.word	0x40012200
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <MX_CAN1_Init+0xcc>)
 80010da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010de:	2214      	movs	r2, #20
 80010e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_CAN1_Init+0xc8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <MX_CAN1_Init+0xc8>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_CAN1_Init+0xc8>)
 800110a:	2200      	movs	r2, #0
 800110c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_CAN1_Init+0xc8>)
 8001110:	2200      	movs	r2, #0
 8001112:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_CAN1_Init+0xc8>)
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_CAN1_Init+0xc8>)
 800111c:	2200      	movs	r2, #0
 800111e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_CAN1_Init+0xc8>)
 8001122:	f002 fe2f 	bl	8003d84 <HAL_CAN_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800112c:	f001 fa5e 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001138:	2301      	movs	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001154:	230e      	movs	r3, #14
 8001156:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_CAN1_Init+0xc8>)
 800115e:	f002 ff0d 	bl	8003f7c <HAL_CAN_ConfigFilter>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001168:	f001 fa40 	bl	80025ec <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <MX_CAN1_Init+0xc8>)
 800116e:	f002 ffe5 	bl	800413c <HAL_CAN_Start>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001178:	f001 fa38 	bl	80025ec <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800117c:	2102      	movs	r1, #2
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_CAN1_Init+0xc8>)
 8001180:	f003 f932 	bl	80043e8 <HAL_CAN_ActivateNotification>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800118a:	f001 fa2f 	bl	80025ec <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000c57c 	.word	0x2000c57c
 800119c:	40006400 	.word	0x40006400

080011a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80011a8:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011aa:	4a83      	ldr	r2, [pc, #524]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011ac:	2100      	movs	r1, #0
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f003 f808 	bl	80041c4 <HAL_CAN_GetRxMessage>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80011ba:	f001 fa17 	bl	80025ec <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80011be:	4b7e      	ldr	r3, [pc, #504]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011c6:	d145      	bne.n	8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80011c8:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d141      	bne.n	8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80011d0:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d13d      	bne.n	8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 80011ec:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 80011fc:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001204:	79db      	ldrb	r3, [r3, #7]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8001210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001212:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001214:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 8001216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800122a:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 800122c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001230:	4a64      	ldr	r2, [pc, #400]	; (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001232:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8001234:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001240:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124c:	ee17 2a90 	vmov	r2, s15
 8001250:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001252:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f240 6202 	movw	r2, #1538	; 0x602
 800125c:	4293      	cmp	r3, r2
 800125e:	d139      	bne.n	80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d135      	bne.n	80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d131      	bne.n	80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001278:	789b      	ldrb	r3, [r3, #2]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	843b      	strh	r3, [r7, #32]
	 uint8_t oil_tmp_in = RxData[3];
 8001284:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	77fb      	strb	r3, [r7, #31]
	 uint8_t oil_press_in = RxData[4];
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	77bb      	strb	r3, [r7, #30]
	 uint8_t fuel_press_in = RxData[5];
 8001290:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001292:	795b      	ldrb	r3, [r3, #5]
 8001294:	777b      	strb	r3, [r7, #29]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	837b      	strh	r3, [r7, #26]

	 vehicle_spd = ((int)vehicle_spd_in)*1;
 80012aa:	8c3b      	ldrh	r3, [r7, #32]
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80012ae:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80012b4:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 80012b6:	7fbb      	ldrb	r3, [r7, #30]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 80012c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 80012ce:	8b7b      	ldrh	r3, [r7, #26]
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012d2:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f240 6203 	movw	r2, #1539	; 0x603
 80012dc:	4293      	cmp	r3, r2
 80012de:	d123      	bne.n	8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11f      	bne.n	8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d11b      	bne.n	8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
  {
	 uint8_t lambda_in = RxData[2];
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	767b      	strb	r3, [r7, #25]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012fe:	795b      	ldrb	r3, [r3, #5]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	82fb      	strh	r3, [r7, #22]
	 lambda = ((float)lambda_in)*0.0078125f;
 800130a:	7e7b      	ldrb	r3, [r7, #25]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80013e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>
 8001318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001326:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f240 6204 	movw	r2, #1540	; 0x604
 8001330:	4293      	cmp	r3, r2
 8001332:	d11f      	bne.n	8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11b      	bne.n	8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d117      	bne.n	8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001346:	789b      	ldrb	r3, [r3, #2]
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800134c:	78db      	ldrb	r3, [r3, #3]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	82bb      	strh	r3, [r7, #20]
	 float battery_voltage = ((float)batt_in)*0.027f;
 8001358:	8abb      	ldrh	r3, [r7, #20]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001362:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800137c:	d116      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d112      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d10e      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001390:	79db      	ldrb	r3, [r3, #7]
 8001392:	81fb      	strh	r3, [r7, #14]
  	 lambda_targ = lambda_targ_in / 100.0f;
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80013f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 80013a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000c534 	.word	0x2000c534
 80013b8:	2000c618 	.word	0x2000c618
 80013bc:	20000004 	.word	0x20000004
 80013c0:	20000008 	.word	0x20000008
 80013c4:	2000038c 	.word	0x2000038c
 80013c8:	20000394 	.word	0x20000394
 80013cc:	20000380 	.word	0x20000380
 80013d0:	20000384 	.word	0x20000384
 80013d4:	3d800000 	.word	0x3d800000
 80013d8:	20000388 	.word	0x20000388
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	3c000000 	.word	0x3c000000
 80013e4:	20000010 	.word	0x20000010
 80013e8:	20000390 	.word	0x20000390
 80013ec:	3cdd2f1b 	.word	0x3cdd2f1b
 80013f0:	20000398 	.word	0x20000398
 80013f4:	42c80000 	.word	0x42c80000
 80013f8:	20000014 	.word	0x20000014

080013fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_CRC_Init+0x3c>)
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <MX_CRC_Init+0x40>)
 8001404:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_CRC_Init+0x3c>)
 8001408:	2200      	movs	r2, #0
 800140a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_CRC_Init+0x3c>)
 800140e:	2200      	movs	r2, #0
 8001410:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_CRC_Init+0x3c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_CRC_Init+0x3c>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_CRC_Init+0x3c>)
 8001420:	2201      	movs	r2, #1
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_CRC_Init+0x3c>)
 8001426:	f003 fb41 	bl	8004aac <HAL_CRC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001430:	f001 f8dc 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000c12c 	.word	0x2000c12c
 800143c:	40023000 	.word	0x40023000

08001440 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <MX_DCMI_Init+0x64>)
 8001448:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_DCMI_Init+0x60>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_DCMI_Init+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_DCMI_Init+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_DCMI_Init+0x60>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_DCMI_Init+0x60>)
 800148e:	f003 fbf7 	bl	8004c80 <HAL_DCMI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001498:	f001 f8a8 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000c344 	.word	0x2000c344
 80014a4:	50050000 	.word	0x50050000

080014a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_DMA2D_Init+0x60>)
 80014b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014de:	f003 fce3 	bl	8004ea8 <HAL_DMA2D_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014e8:	f001 f880 	bl	80025ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014ec:	2101      	movs	r1, #1
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014f0:	f003 ffa4 	bl	800543c <HAL_DMA2D_ConfigLayer>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014fa:	f001 f877 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000c4f4 	.word	0x2000c4f4
 8001508:	4002b000 	.word	0x4002b000

0800150c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2234      	movs	r2, #52	; 0x34
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f023 f900 	bl	802471e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <MX_LTDC_Init+0x100>)
 8001522:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <MX_LTDC_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_LTDC_Init+0xfc>)
 800153e:	2228      	movs	r2, #40	; 0x28
 8001540:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001544:	2209      	movs	r2, #9
 8001546:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_LTDC_Init+0xfc>)
 800154a:	2235      	movs	r2, #53	; 0x35
 800154c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001550:	220b      	movs	r2, #11
 8001552:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001556:	f240 2215 	movw	r2, #533	; 0x215
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <MX_LTDC_Init+0xfc>)
 800155e:	f240 121b 	movw	r2, #283	; 0x11b
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001566:	f240 2235 	movw	r2, #565	; 0x235
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_LTDC_Init+0xfc>)
 800156e:	f240 121d 	movw	r2, #285	; 0x11d
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_LTDC_Init+0xfc>)
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_LTDC_Init+0xfc>)
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <MX_LTDC_Init+0xfc>)
 800158e:	f004 fa5f 	bl	8005a50 <HAL_LTDC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001598:	f001 f828 	bl	80025ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80015a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015a4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80015aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015ae:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015b4:	23ff      	movs	r3, #255	; 0xff
 80015b6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015c2:	2305      	movs	r3, #5
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80015cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80015d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_LTDC_Init+0xfc>)
 80015f2:	f004 fbb5 	bl	8005d60 <HAL_LTDC_ConfigLayer>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80015fc:	f000 fff6 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000c254 	.word	0x2000c254
 800160c:	40016800 	.word	0x40016800

08001610 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <MX_QUADSPI_Init+0x54>)
 8001618:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_QUADSPI_Init+0x50>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001622:	2201      	movs	r2, #1
 8001624:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_QUADSPI_Init+0x50>)
 800162e:	2201      	movs	r2, #1
 8001630:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_QUADSPI_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_QUADSPI_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_QUADSPI_Init+0x50>)
 800164c:	f004 fdf8 	bl	8006240 <HAL_QSPI_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 ffc9 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000c634 	.word	0x2000c634
 8001664:	a0001000 	.word	0xa0001000

08001668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b092      	sub	sp, #72	; 0x48
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	222c      	movs	r2, #44	; 0x2c
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f023 f847 	bl	802471e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <MX_RTC_Init+0x148>)
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <MX_RTC_Init+0x14c>)
 8001694:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <MX_RTC_Init+0x148>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <MX_RTC_Init+0x148>)
 800169e:	227f      	movs	r2, #127	; 0x7f
 80016a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <MX_RTC_Init+0x148>)
 80016a4:	22ff      	movs	r2, #255	; 0xff
 80016a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016a8:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <MX_RTC_Init+0x148>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016ae:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <MX_RTC_Init+0x148>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <MX_RTC_Init+0x148>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ba:	483d      	ldr	r0, [pc, #244]	; (80017b0 <MX_RTC_Init+0x148>)
 80016bc:	f006 f84c 	bl	8007758 <HAL_RTC_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80016c6:	f000 ff91 	bl	80025ec <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016dc:	2300      	movs	r3, #0
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	4830      	ldr	r0, [pc, #192]	; (80017b0 <MX_RTC_Init+0x148>)
 80016ee:	f006 f8af 	bl	8007850 <HAL_RTC_SetTime>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016f8:	f000 ff78 	bl	80025ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001702:	2301      	movs	r3, #1
 8001704:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001708:	2301      	movs	r3, #1
 800170a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_RTC_Init+0x148>)
 800171e:	f006 f955 	bl	80079cc <HAL_RTC_SetDate>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001728:	f000 ff60 	bl	80025ec <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800172c:	2300      	movs	r3, #0
 800172e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001730:	2300      	movs	r3, #0
 8001732:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001734:	2300      	movs	r3, #0
 8001736:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2201      	movs	r2, #1
 8001760:	4619      	mov	r1, r3
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <MX_RTC_Init+0x148>)
 8001764:	f006 f9da 	bl	8007b1c <HAL_RTC_SetAlarm>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800176e:	f000 ff3d 	bl	80025ec <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <MX_RTC_Init+0x148>)
 8001786:	f006 f9c9 	bl	8007b1c <HAL_RTC_SetAlarm>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001790:	f000 ff2c 	bl	80025ec <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001794:	2202      	movs	r2, #2
 8001796:	2100      	movs	r1, #0
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_RTC_Init+0x148>)
 800179a:	f006 fb49 	bl	8007e30 <HAL_RTCEx_SetTimeStamp>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80017a4:	f000 ff22 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	3748      	adds	r7, #72	; 0x48
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000c414 	.word	0x2000c414
 80017b4:	40002800 	.word	0x40002800

080017b8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017be:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <MX_SAI2_Init+0x140>)
 80017c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <MX_SAI2_Init+0x13c>)
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <MX_SAI2_Init+0x144>)
 80017fc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_SAI2_Init+0x13c>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001812:	2200      	movs	r2, #0
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001818:	2208      	movs	r2, #8
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <MX_SAI2_Init+0x13c>)
 800181e:	2201      	movs	r2, #1
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001824:	2200      	movs	r2, #0
 8001826:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <MX_SAI2_Init+0x13c>)
 800182a:	2200      	movs	r2, #0
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001830:	2200      	movs	r2, #0
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001836:	2200      	movs	r2, #0
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <MX_SAI2_Init+0x13c>)
 800183c:	2200      	movs	r2, #0
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001842:	2201      	movs	r2, #1
 8001844:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_SAI2_Init+0x13c>)
 8001848:	2200      	movs	r2, #0
 800184a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800184c:	4829      	ldr	r0, [pc, #164]	; (80018f4 <MX_SAI2_Init+0x13c>)
 800184e:	f006 fb45 	bl	8007edc <HAL_SAI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001858:	f000 fec8 	bl	80025ec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <MX_SAI2_Init+0x148>)
 800185e:	4a29      	ldr	r2, [pc, #164]	; (8001904 <MX_SAI2_Init+0x14c>)
 8001860:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <MX_SAI2_Init+0x148>)
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <MX_SAI2_Init+0x148>)
 800186a:	2203      	movs	r2, #3
 800186c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <MX_SAI2_Init+0x148>)
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <MX_SAI2_Init+0x148>)
 8001876:	2200      	movs	r2, #0
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_SAI2_Init+0x148>)
 800187c:	2200      	movs	r2, #0
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_SAI2_Init+0x148>)
 8001882:	2201      	movs	r2, #1
 8001884:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_SAI2_Init+0x148>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_SAI2_Init+0x148>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_SAI2_Init+0x148>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_SAI2_Init+0x148>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_SAI2_Init+0x148>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_SAI2_Init+0x148>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_SAI2_Init+0x148>)
 80018ac:	2208      	movs	r2, #8
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_SAI2_Init+0x148>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_SAI2_Init+0x148>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_SAI2_Init+0x148>)
 80018be:	2200      	movs	r2, #0
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_SAI2_Init+0x148>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_SAI2_Init+0x148>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_SAI2_Init+0x148>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_SAI2_Init+0x148>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_SAI2_Init+0x148>)
 80018dc:	2200      	movs	r2, #0
 80018de:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_SAI2_Init+0x148>)
 80018e2:	f006 fafb 	bl	8007edc <HAL_SAI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80018ec:	f000 fe7e 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000c0a8 	.word	0x2000c0a8
 80018f8:	40015c04 	.word	0x40015c04
 80018fc:	0002ee00 	.word	0x0002ee00
 8001900:	2000bf2c 	.word	0x2000bf2c
 8001904:	40015c24 	.word	0x40015c24

08001908 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 800190e:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <MX_SDMMC1_SD_Init+0x3c>)
 8001910:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <MX_SDMMC1_SD_Init+0x38>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	2000c150 	.word	0x2000c150
 8001944:	40012c00 	.word	0x40012c00

08001948 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 800194e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001952:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_SPDIFRX_Init+0x5c>)
 8001992:	f007 fd37 	bl	8009404 <HAL_SPDIFRX_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800199c:	f000 fe26 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000c05c 	.word	0x2000c05c

080019a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <MX_SPI2_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019f6:	2207      	movs	r2, #7
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_SPI2_Init+0x74>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_SPI2_Init+0x74>)
 8001a08:	f007 fd58 	bl	80094bc <HAL_SPI_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f000 fdeb 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000bfb8 	.word	0x2000bfb8
 8001a20:	40003800 	.word	0x40003800

08001a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09a      	sub	sp, #104	; 0x68
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	222c      	movs	r2, #44	; 0x2c
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f022 fe5d 	bl	802471e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a66:	4a44      	ldr	r2, [pc, #272]	; (8001b78 <MX_TIM1_Init+0x154>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8e:	4839      	ldr	r0, [pc, #228]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001a90:	f007 fda6 	bl	80095e0 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a9a:	f000 fda7 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4832      	ldr	r0, [pc, #200]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001aac:	f008 f850 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ab6:	f000 fd99 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aba:	482e      	ldr	r0, [pc, #184]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001abc:	f007 fde6 	bl	800968c <HAL_TIM_PWM_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ac6:	f000 fd91 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4825      	ldr	r0, [pc, #148]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001ade:	f008 fcb1 	bl	800a444 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ae8:	f000 fd80 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aec:	2360      	movs	r3, #96	; 0x60
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001b12:	f007 ff05 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001b1c:	f000 fd66 	bl	80025ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001b56:	f008 fd03 	bl	800a560 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b60:	f000 fd44 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM1_Init+0x150>)
 8001b66:	f001 fa3b 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3768      	adds	r7, #104	; 0x68
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000c434 	.word	0x2000c434
 8001b78:	40010000 	.word	0x40010000

08001b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bd6:	f007 fd03 	bl	80095e0 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001be0:	f000 fd04 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481c      	ldr	r0, [pc, #112]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001bf2:	f007 ffad 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bfc:	f000 fcf6 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c00:	4818      	ldr	r0, [pc, #96]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001c02:	f007 fd43 	bl	800968c <HAL_TIM_PWM_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c0c:	f000 fcee 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001c20:	f008 fc10 	bl	800a444 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c2a:	f000 fcdf 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2360      	movs	r3, #96	; 0x60
 8001c30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	4619      	mov	r1, r3
 8001c44:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001c46:	f007 fe6b 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c50:	f000 fccc 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MX_TIM2_Init+0xe8>)
 8001c56:	f001 f9c3 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000c53c 	.word	0x2000c53c

08001c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001c9c:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <MX_TIM3_Init+0xe8>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cc0:	f007 fc8e 	bl	80095e0 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cca:	f000 fc8f 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481c      	ldr	r0, [pc, #112]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cdc:	f007 ff38 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ce6:	f000 fc81 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cea:	4818      	ldr	r0, [pc, #96]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001cec:	f007 fcce 	bl	800968c <HAL_TIM_PWM_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cf6:	f000 fc79 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4810      	ldr	r0, [pc, #64]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001d0a:	f008 fb9b 	bl	800a444 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d14:	f000 fc6a 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d18:	2360      	movs	r3, #96	; 0x60
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001d30:	f007 fdf6 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d3a:	f000 fc57 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d3e:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM3_Init+0xe4>)
 8001d40:	f001 f94e 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8001d44:	bf00      	nop
 8001d46:	3738      	adds	r7, #56	; 0x38
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000c214 	.word	0x2000c214
 8001d50:	40000400 	.word	0x40000400

08001d54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001d88:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <MX_TIM5_Init+0xe8>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001daa:	4823      	ldr	r0, [pc, #140]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001dac:	f007 fc18 	bl	80095e0 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001db6:	f000 fc19 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001dc8:	f007 fec2 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001dd2:	f000 fc0b 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dd6:	4818      	ldr	r0, [pc, #96]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001dd8:	f007 fc58 	bl	800968c <HAL_TIM_PWM_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001de2:	f000 fc03 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001df6:	f008 fb25 	bl	800a444 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e00:	f000 fbf4 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e04:	2360      	movs	r3, #96	; 0x60
 8001e06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	220c      	movs	r2, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001e1c:	f007 fd80 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e26:	f000 fbe1 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_TIM5_Init+0xe4>)
 8001e2c:	f001 f8d8 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000c1d4 	.word	0x2000c1d4
 8001e3c:	40000c00 	.word	0x40000c00

08001e40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <MX_TIM8_Init+0xa0>)
 8001e62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e88:	4814      	ldr	r0, [pc, #80]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001e8a:	f007 fba9 	bl	80095e0 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001e94:	f000 fbaa 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001ea6:	f007 fe53 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001eb0:	f000 fb9c 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_TIM8_Init+0x9c>)
 8001ec6:	f008 fabd 	bl	800a444 <HAL_TIMEx_MasterConfigSynchronization>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001ed0:	f000 fb8c 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000c01c 	.word	0x2000c01c
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	615a      	str	r2, [r3, #20]
 8001efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001efe:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <MX_TIM12_Init+0x84>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f20:	4810      	ldr	r0, [pc, #64]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f22:	f007 fbb3 	bl	800968c <HAL_TIM_PWM_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f000 fb5e 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f48:	f007 fcea 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f52:	f000 fb4b 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MX_TIM12_Init+0x80>)
 8001f58:	f001 f842 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000c5a4 	.word	0x2000c5a4
 8001f68:	40001800 	.word	0x40001800

08001f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_USART1_UART_Init+0x5c>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART1_UART_Init+0x58>)
 8001fb0:	f008 fb72 	bl	800a698 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fba:	f000 fb17 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000c394 	.word	0x2000c394
 8001fc8:	40011000 	.word	0x40011000

08001fcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001fd2:	4a15      	ldr	r2, [pc, #84]	; (8002028 <MX_USART6_UART_Init+0x5c>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_USART6_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USART6_UART_Init+0x58>)
 8002010:	f008 fb42 	bl	800a698 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800201a:	f000 fae7 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000c474 	.word	0x2000c474
 8002028:	40011400 	.word	0x40011400

0800202c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <MX_FMC_Init+0x14c>)
 8002046:	4a4d      	ldr	r2, [pc, #308]	; (800217c <MX_FMC_Init+0x150>)
 8002048:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <MX_FMC_Init+0x14c>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <MX_FMC_Init+0x14c>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <MX_FMC_Init+0x14c>)
 8002058:	2204      	movs	r2, #4
 800205a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <MX_FMC_Init+0x14c>)
 800205e:	2210      	movs	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002062:	4b45      	ldr	r3, [pc, #276]	; (8002178 <MX_FMC_Init+0x14c>)
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <MX_FMC_Init+0x14c>)
 800206a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800206e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <MX_FMC_Init+0x14c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002076:	4b40      	ldr	r3, [pc, #256]	; (8002178 <MX_FMC_Init+0x14c>)
 8002078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <MX_FMC_Init+0x14c>)
 8002080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <MX_FMC_Init+0x14c>)
 8002088:	2200      	movs	r2, #0
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800208c:	2302      	movs	r3, #2
 800208e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002090:	2307      	movs	r3, #7
 8002092:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002094:	2304      	movs	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002098:	2307      	movs	r3, #7
 800209a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800209c:	2303      	movs	r3, #3
 800209e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4832      	ldr	r0, [pc, #200]	; (8002178 <MX_FMC_Init+0x14c>)
 80020ae:	f007 f929 	bl	8009304 <HAL_SDRAM_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80020b8:	f000 fa98 	bl	80025ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_FMC_Init+0x154>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <MX_FMC_Init+0x154>)
 80020c8:	2210      	movs	r2, #16
 80020ca:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <MX_FMC_Init+0x154>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <MX_FMC_Init+0x154>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80020d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020dc:	4928      	ldr	r1, [pc, #160]	; (8002180 <MX_FMC_Init+0x154>)
 80020de:	4826      	ldr	r0, [pc, #152]	; (8002178 <MX_FMC_Init+0x14c>)
 80020e0:	f007 f944 	bl	800936c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f001 fba3 	bl	8003830 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <MX_FMC_Init+0x154>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <MX_FMC_Init+0x154>)
 80020f2:	2210      	movs	r2, #16
 80020f4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_FMC_Init+0x154>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_FMC_Init+0x154>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002106:	491e      	ldr	r1, [pc, #120]	; (8002180 <MX_FMC_Init+0x154>)
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <MX_FMC_Init+0x14c>)
 800210a:	f007 f92f 	bl	800936c <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_FMC_Init+0x154>)
 8002110:	2203      	movs	r2, #3
 8002112:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_FMC_Init+0x154>)
 8002116:	2210      	movs	r2, #16
 8002118:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_FMC_Init+0x154>)
 800211c:	2208      	movs	r2, #8
 800211e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_FMC_Init+0x154>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	4915      	ldr	r1, [pc, #84]	; (8002180 <MX_FMC_Init+0x154>)
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <MX_FMC_Init+0x14c>)
 800212e:	f007 f91d 	bl	800936c <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8002132:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002136:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_FMC_Init+0x154>)
 800213a:	2204      	movs	r2, #4
 800213c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_FMC_Init+0x154>)
 8002140:	2210      	movs	r2, #16
 8002142:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_FMC_Init+0x154>)
 8002146:	2201      	movs	r2, #1
 8002148:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <MX_FMC_Init+0x154>)
 800214e:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002154:	490a      	ldr	r1, [pc, #40]	; (8002180 <MX_FMC_Init+0x154>)
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <MX_FMC_Init+0x14c>)
 8002158:	f007 f908 	bl	800936c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800215c:	f240 712b 	movw	r1, #1835	; 0x72b
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_FMC_Init+0x14c>)
 8002162:	f007 f92e 	bl	80093c2 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002166:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800216a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800216e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000c5e4 	.word	0x2000c5e4
 800217c:	a0000140 	.word	0xa0000140
 8002180:	20000370 	.word	0x20000370

08002184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	; 0x40
 8002188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219a:	4baf      	ldr	r3, [pc, #700]	; (8002458 <MX_GPIO_Init+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4aae      	ldr	r2, [pc, #696]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4bac      	ldr	r3, [pc, #688]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b2:	4ba9      	ldr	r3, [pc, #676]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4aa8      	ldr	r2, [pc, #672]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4ba6      	ldr	r3, [pc, #664]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4ba3      	ldr	r3, [pc, #652]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4aa2      	ldr	r2, [pc, #648]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a9c      	ldr	r2, [pc, #624]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b9a      	ldr	r3, [pc, #616]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b97      	ldr	r3, [pc, #604]	; (8002458 <MX_GPIO_Init+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a96      	ldr	r2, [pc, #600]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b94      	ldr	r3, [pc, #592]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b91      	ldr	r3, [pc, #580]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a90      	ldr	r2, [pc, #576]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800222a:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <MX_GPIO_Init+0x2d4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a8a      	ldr	r2, [pc, #552]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002242:	4b85      	ldr	r3, [pc, #532]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a84      	ldr	r2, [pc, #528]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b82      	ldr	r3, [pc, #520]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800225a:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <MX_GPIO_Init+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a7e      	ldr	r2, [pc, #504]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002272:	4b79      	ldr	r3, [pc, #484]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a78      	ldr	r2, [pc, #480]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228a:	4b73      	ldr	r3, [pc, #460]	; (8002458 <MX_GPIO_Init+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a72      	ldr	r2, [pc, #456]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b70      	ldr	r3, [pc, #448]	; (8002458 <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022a2:	2201      	movs	r2, #1
 80022a4:	2120      	movs	r1, #32
 80022a6:	486d      	ldr	r0, [pc, #436]	; (800245c <MX_GPIO_Init+0x2d8>)
 80022a8:	f003 fbb8 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	210c      	movs	r1, #12
 80022b0:	486b      	ldr	r0, [pc, #428]	; (8002460 <MX_GPIO_Init+0x2dc>)
 80022b2:	f003 fbb3 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2108      	movs	r1, #8
 80022ba:	486a      	ldr	r0, [pc, #424]	; (8002464 <MX_GPIO_Init+0x2e0>)
 80022bc:	f003 fbae 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c6:	4866      	ldr	r0, [pc, #408]	; (8002460 <MX_GPIO_Init+0x2dc>)
 80022c8:	f003 fba8 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d2:	4865      	ldr	r0, [pc, #404]	; (8002468 <MX_GPIO_Init+0x2e4>)
 80022d4:	f003 fba2 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	21c8      	movs	r1, #200	; 0xc8
 80022dc:	4863      	ldr	r0, [pc, #396]	; (800246c <MX_GPIO_Init+0x2e8>)
 80022de:	f003 fb9d 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80022e2:	2308      	movs	r3, #8
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e6:	2300      	movs	r3, #0
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f2:	4619      	mov	r1, r3
 80022f4:	485e      	ldr	r0, [pc, #376]	; (8002470 <MX_GPIO_Init+0x2ec>)
 80022f6:	f003 f9cf 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80022fa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800230c:	230b      	movs	r3, #11
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002314:	4619      	mov	r1, r3
 8002316:	4855      	ldr	r0, [pc, #340]	; (800246c <MX_GPIO_Init+0x2e8>)
 8002318:	f003 f9be 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800231c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800232e:	230a      	movs	r3, #10
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	484e      	ldr	r0, [pc, #312]	; (8002474 <MX_GPIO_Init+0x2f0>)
 800233a:	f003 f9ad 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800233e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	4849      	ldr	r0, [pc, #292]	; (8002478 <MX_GPIO_Init+0x2f4>)
 8002354:	f003 f9a0 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <MX_GPIO_Init+0x2f8>)
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	483c      	ldr	r0, [pc, #240]	; (800245c <MX_GPIO_Init+0x2d8>)
 800236c:	f003 f994 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002370:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002382:	230a      	movs	r3, #10
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238a:	4619      	mov	r1, r3
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <MX_GPIO_Init+0x2fc>)
 800238e:	f003 f983 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002392:	2320      	movs	r3, #32
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	482c      	ldr	r0, [pc, #176]	; (800245c <MX_GPIO_Init+0x2d8>)
 80023aa:	f003 f975 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80023ae:	f241 030c 	movw	r3, #4108	; 0x100c
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4826      	ldr	r0, [pc, #152]	; (8002460 <MX_GPIO_Init+0x2dc>)
 80023c8:	f003 f966 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023de:	4619      	mov	r1, r3
 80023e0:	4828      	ldr	r0, [pc, #160]	; (8002484 <MX_GPIO_Init+0x300>)
 80023e2:	f003 f959 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80023e6:	2308      	movs	r3, #8
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4819      	ldr	r0, [pc, #100]	; (8002464 <MX_GPIO_Init+0x2e0>)
 80023fe:	f003 f94b 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002402:	2310      	movs	r3, #16
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	2300      	movs	r3, #0
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002412:	4619      	mov	r1, r3
 8002414:	4811      	ldr	r0, [pc, #68]	; (800245c <MX_GPIO_Init+0x2d8>)
 8002416:	f003 f93f 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800241a:	f248 0304 	movw	r3, #32772	; 0x8004
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242c:	4619      	mov	r1, r3
 800242e:	480e      	ldr	r0, [pc, #56]	; (8002468 <MX_GPIO_Init+0x2e4>)
 8002430:	f003 f932 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_GPIO_Init+0x2e4>)
 800244e:	f003 f923 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002456:	e017      	b.n	8002488 <MX_GPIO_Init+0x304>
 8002458:	40023800 	.word	0x40023800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40022000 	.word	0x40022000
 8002464:	40022800 	.word	0x40022800
 8002468:	40021c00 	.word	0x40021c00
 800246c:	40021800 	.word	0x40021800
 8002470:	40021000 	.word	0x40021000
 8002474:	40020400 	.word	0x40020400
 8002478:	40022400 	.word	0x40022400
 800247c:	10120000 	.word	0x10120000
 8002480:	40020000 	.word	0x40020000
 8002484:	40020800 	.word	0x40020800
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800248a:	4b44      	ldr	r3, [pc, #272]	; (800259c <MX_GPIO_Init+0x418>)
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4841      	ldr	r0, [pc, #260]	; (80025a0 <MX_GPIO_Init+0x41c>)
 800249a:	f003 f8fd 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800249e:	2310      	movs	r3, #16
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024ae:	230a      	movs	r3, #10
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b6:	4619      	mov	r1, r3
 80024b8:	483a      	ldr	r0, [pc, #232]	; (80025a4 <MX_GPIO_Init+0x420>)
 80024ba:	f003 f8ed 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024be:	23c8      	movs	r3, #200	; 0xc8
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	4834      	ldr	r0, [pc, #208]	; (80025a8 <MX_GPIO_Init+0x424>)
 80024d6:	f003 f8df 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024da:	2305      	movs	r3, #5
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024ea:	230a      	movs	r3, #10
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	482d      	ldr	r0, [pc, #180]	; (80025ac <MX_GPIO_Init+0x428>)
 80024f6:	f003 f8cf 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024fa:	2332      	movs	r3, #50	; 0x32
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800250a:	230b      	movs	r3, #11
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	4825      	ldr	r0, [pc, #148]	; (80025ac <MX_GPIO_Init+0x428>)
 8002516:	f003 f8bf 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800251a:	2304      	movs	r3, #4
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	481e      	ldr	r0, [pc, #120]	; (80025a8 <MX_GPIO_Init+0x424>)
 800252e:	f003 f8b3 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002532:	2386      	movs	r3, #134	; 0x86
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002542:	230b      	movs	r3, #11
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4818      	ldr	r0, [pc, #96]	; (80025b0 <MX_GPIO_Init+0x42c>)
 800254e:	f003 f8a3 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002552:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	2312      	movs	r3, #18
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255c:	2301      	movs	r3, #1
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002564:	2304      	movs	r3, #4
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256c:	4619      	mov	r1, r3
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_GPIO_Init+0x420>)
 8002570:	f003 f892 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002574:	2328      	movs	r3, #40	; 0x28
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002584:	230a      	movs	r3, #10
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258c:	4619      	mov	r1, r3
 800258e:	4808      	ldr	r0, [pc, #32]	; (80025b0 <MX_GPIO_Init+0x42c>)
 8002590:	f003 f882 	bl	8005698 <HAL_GPIO_Init>

}
 8002594:	bf00      	nop
 8002596:	3740      	adds	r7, #64	; 0x40
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	10120000 	.word	0x10120000
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021c00 	.word	0x40021c00
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020000 	.word	0x40020000

080025b4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80025bc:	f00c fba8 	bl	800ed10 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f009 fe6d 	bl	800c2a0 <osDelay>
 80025c6:	e7fb      	b.n	80025c0 <StartDefaultTask+0xc>

080025c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025da:	f001 f909 	bl	80037f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40001000 	.word	0x40001000

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_MspInit+0x4c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	f06f 0001 	mvn.w	r0, #1
 800263a:	f002 f9ff 	bl	8004a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_ADC_MspInit+0xa4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d13c      	bne.n	80026e8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 8002674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 800268c:	f043 0320 	orr.w	r3, r3, #32
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80026b6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026ba:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026bc:	2303      	movs	r3, #3
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	480b      	ldr	r0, [pc, #44]	; (80026f8 <HAL_ADC_MspInit+0xac>)
 80026cc:	f002 ffe4 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80026d0:	2301      	movs	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d4:	2303      	movs	r3, #3
 80026d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <HAL_ADC_MspInit+0xb0>)
 80026e4:	f002 ffd8 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40012200 	.word	0x40012200
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40021400 	.word	0x40021400
 80026fc:	40020000 	.word	0x40020000

08002700 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_CAN_MspInit+0x8c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d130      	bne.n	8002784 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_CAN_MspInit+0x90>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_CAN_MspInit+0x90>)
 8002728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_CAN_MspInit+0x90>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_CAN_MspInit+0x90>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_CAN_MspInit+0x90>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_CAN_MspInit+0x90>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002764:	2309      	movs	r3, #9
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4809      	ldr	r0, [pc, #36]	; (8002794 <HAL_CAN_MspInit+0x94>)
 8002770:	f002 ff92 	bl	8005698 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2105      	movs	r1, #5
 8002778:	2014      	movs	r0, #20
 800277a:	f002 f95f 	bl	8004a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800277e:	2014      	movs	r0, #20
 8002780:	f002 f978 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40006400 	.word	0x40006400
 8002790:	40023800 	.word	0x40023800
 8002794:	40020400 	.word	0x40020400

08002798 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_CRC_MspInit+0x38>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10b      	bne.n	80027c2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_CRC_MspInit+0x3c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_CRC_MspInit+0x3c>)
 80027b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_CRC_MspInit+0x3c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023000 	.word	0x40023000
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_DCMI_MspInit+0x160>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 809a 	bne.w	8002930 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80027fc:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_DCMI_MspInit+0x164>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6353      	str	r3, [r2, #52]	; 0x34
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002814:	4b49      	ldr	r3, [pc, #292]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4a48      	ldr	r2, [pc, #288]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	6313      	str	r3, [r2, #48]	; 0x30
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	4a42      	ldr	r2, [pc, #264]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002832:	f043 0308 	orr.w	r3, r3, #8
 8002836:	6313      	str	r3, [r2, #48]	; 0x30
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a3c      	ldr	r2, [pc, #240]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800284a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800285c:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_DCMI_MspInit+0x164>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_DCMI_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800288c:	2360      	movs	r3, #96	; 0x60
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800289c:	230d      	movs	r3, #13
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	4619      	mov	r1, r3
 80028a6:	4826      	ldr	r0, [pc, #152]	; (8002940 <HAL_DCMI_MspInit+0x168>)
 80028a8:	f002 fef6 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028ac:	2308      	movs	r3, #8
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028bc:	230d      	movs	r3, #13
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	481f      	ldr	r0, [pc, #124]	; (8002944 <HAL_DCMI_MspInit+0x16c>)
 80028c8:	f002 fee6 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028de:	230d      	movs	r3, #13
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e6:	4619      	mov	r1, r3
 80028e8:	4817      	ldr	r0, [pc, #92]	; (8002948 <HAL_DCMI_MspInit+0x170>)
 80028ea:	f002 fed5 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80028ee:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002900:	230d      	movs	r3, #13
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	4810      	ldr	r0, [pc, #64]	; (800294c <HAL_DCMI_MspInit+0x174>)
 800290c:	f002 fec4 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002910:	2350      	movs	r3, #80	; 0x50
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002920:	230d      	movs	r3, #13
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	4809      	ldr	r0, [pc, #36]	; (8002950 <HAL_DCMI_MspInit+0x178>)
 800292c:	f002 feb4 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	3738      	adds	r7, #56	; 0x38
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	50050000 	.word	0x50050000
 800293c:	40023800 	.word	0x40023800
 8002940:	40021000 	.word	0x40021000
 8002944:	40020c00 	.word	0x40020c00
 8002948:	40021800 	.word	0x40021800
 800294c:	40021c00 	.word	0x40021c00
 8002950:	40020000 	.word	0x40020000

08002954 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_DMA2D_MspInit+0x44>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_DMA2D_MspInit+0x48>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_DMA2D_MspInit+0x48>)
 800296c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_DMA2D_MspInit+0x48>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2105      	movs	r1, #5
 8002982:	205a      	movs	r0, #90	; 0x5a
 8002984:	f002 f85a 	bl	8004a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002988:	205a      	movs	r0, #90	; 0x5a
 800298a:	f002 f873 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	4002b000 	.word	0x4002b000
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_DMA2D_MspDeInit+0x2c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_DMA2D_MspDeInit+0x30>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_DMA2D_MspDeInit+0x30>)
 80029b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80029be:	205a      	movs	r0, #90	; 0x5a
 80029c0:	f002 f866 	bl	8004a90 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	4002b000 	.word	0x4002b000
 80029d0:	40023800 	.word	0x40023800

080029d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_LTDC_MspInit+0x174>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 80a3 	bne.w	8002b3e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029f8:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a02:	6453      	str	r3, [r2, #68]	; 0x44
 8002a04:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a10:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a4d      	ldr	r2, [pc, #308]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a16:	f043 0310 	orr.w	r3, r3, #16
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a28:	4b48      	ldr	r3, [pc, #288]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	4a47      	ldr	r2, [pc, #284]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	6313      	str	r3, [r2, #48]	; 0x30
 8002a34:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a40:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a41      	ldr	r2, [pc, #260]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a58:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7c:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <HAL_LTDC_MspInit+0x178>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002a88:	2310      	movs	r3, #16
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a98:	230e      	movs	r3, #14
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	482b      	ldr	r0, [pc, #172]	; (8002b50 <HAL_LTDC_MspInit+0x17c>)
 8002aa4:	f002 fdf8 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002aa8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aba:	230e      	movs	r3, #14
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4823      	ldr	r0, [pc, #140]	; (8002b54 <HAL_LTDC_MspInit+0x180>)
 8002ac6:	f002 fde7 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002aca:	23f7      	movs	r3, #247	; 0xf7
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ada:	230e      	movs	r3, #14
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	481c      	ldr	r0, [pc, #112]	; (8002b58 <HAL_LTDC_MspInit+0x184>)
 8002ae6:	f002 fdd7 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002afc:	2309      	movs	r3, #9
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	4619      	mov	r1, r3
 8002b06:	4815      	ldr	r0, [pc, #84]	; (8002b5c <HAL_LTDC_MspInit+0x188>)
 8002b08:	f002 fdc6 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b0c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b1e:	230e      	movs	r3, #14
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <HAL_LTDC_MspInit+0x18c>)
 8002b2a:	f002 fdb5 	bl	8005698 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2105      	movs	r1, #5
 8002b32:	2058      	movs	r0, #88	; 0x58
 8002b34:	f001 ff82 	bl	8004a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b38:	2058      	movs	r0, #88	; 0x58
 8002b3a:	f001 ff9b 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b3e:	bf00      	nop
 8002b40:	3738      	adds	r7, #56	; 0x38
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40016800 	.word	0x40016800
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40022400 	.word	0x40022400
 8002b58:	40022800 	.word	0x40022800
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40022000 	.word	0x40022000

08002b64 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_QSPI_MspInit+0x10c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d170      	bne.n	8002c68 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6393      	str	r3, [r2, #56]	; 0x38
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_QSPI_MspInit+0x110>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002be6:	2304      	movs	r3, #4
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bf6:	2309      	movs	r3, #9
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481d      	ldr	r0, [pc, #116]	; (8002c78 <HAL_QSPI_MspInit+0x114>)
 8002c02:	f002 fd49 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c16:	230a      	movs	r3, #10
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4816      	ldr	r0, [pc, #88]	; (8002c7c <HAL_QSPI_MspInit+0x118>)
 8002c22:	f002 fd39 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c26:	2304      	movs	r3, #4
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c36:	2309      	movs	r3, #9
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	480e      	ldr	r0, [pc, #56]	; (8002c7c <HAL_QSPI_MspInit+0x118>)
 8002c42:	f002 fd29 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c58:	2309      	movs	r3, #9
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	4619      	mov	r1, r3
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <HAL_QSPI_MspInit+0x11c>)
 8002c64:	f002 fd18 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3730      	adds	r7, #48	; 0x30
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	a0001000 	.word	0xa0001000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40020400 	.word	0x40020400
 8002c80:	40020c00 	.word	0x40020c00

08002c84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <HAL_RTC_MspInit+0x2c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d105      	bne.n	8002ca2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_RTC_MspInit+0x30>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_RTC_MspInit+0x30>)
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40002800 	.word	0x40002800
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_SD_MspInit+0xb4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d144      	bne.n	8002d64 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002cda:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002d22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d34:	230c      	movs	r3, #12
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480d      	ldr	r0, [pc, #52]	; (8002d74 <HAL_SD_MspInit+0xbc>)
 8002d40:	f002 fcaa 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d44:	2304      	movs	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d54:	230c      	movs	r3, #12
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4806      	ldr	r0, [pc, #24]	; (8002d78 <HAL_SD_MspInit+0xc0>)
 8002d60:	f002 fc9a 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00

08002d7c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002d9c:	d127      	bne.n	8002dee <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002dde:	2308      	movs	r3, #8
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <HAL_SPDIFRX_MspInit+0x80>)
 8002dea:	f002 fc55 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020c00 	.word	0x40020c00

08002e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	; 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <HAL_SPI_MspInit+0xb4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d144      	bne.n	8002eac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_SPI_MspInit+0xb8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	480d      	ldr	r0, [pc, #52]	; (8002ebc <HAL_SPI_MspInit+0xbc>)
 8002e86:	f002 fc07 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002e8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e9c:	2305      	movs	r3, #5
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4806      	ldr	r0, [pc, #24]	; (8002ec0 <HAL_SPI_MspInit+0xc0>)
 8002ea8:	f002 fbf6 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40003800 	.word	0x40003800
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40020400 	.word	0x40020400

08002ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <HAL_TIM_Base_MspInit+0xc8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002eee:	e046      	b.n	8002f7e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
}
 8002f12:	e034      	b.n	8002f7e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_TIM_Base_MspInit+0xd0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
}
 8002f36:	e022      	b.n	8002f7e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10c      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
}
 8002f5a:	e010      	b.n	8002f7e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_TIM_Base_MspInit+0xd8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10b      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_TIM_Base_MspInit+0xcc>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	bf00      	nop
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_TIM_PWM_MspInit+0x38>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10b      	bne.n	8002fca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40001800 	.word	0x40001800
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a56      	ldr	r2, [pc, #344]	; (8003158 <HAL_TIM_MspPostInit+0x178>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d11d      	bne.n	800303e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a55      	ldr	r2, [pc, #340]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800301a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800302c:	2301      	movs	r3, #1
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	484a      	ldr	r0, [pc, #296]	; (8003160 <HAL_TIM_MspPostInit+0x180>)
 8003038:	f002 fb2e 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800303c:	e087      	b.n	800314e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d11d      	bne.n	8003084 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	4b44      	ldr	r3, [pc, #272]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003072:	2301      	movs	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4838      	ldr	r0, [pc, #224]	; (8003160 <HAL_TIM_MspPostInit+0x180>)
 800307e:	f002 fb0b 	bl	8005698 <HAL_GPIO_Init>
}
 8003082:	e064      	b.n	800314e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a36      	ldr	r2, [pc, #216]	; (8003164 <HAL_TIM_MspPostInit+0x184>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11c      	bne.n	80030c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a32      	ldr	r2, [pc, #200]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030a6:	2310      	movs	r3, #16
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b6:	2302      	movs	r3, #2
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 031c 	add.w	r3, r7, #28
 80030be:	4619      	mov	r1, r3
 80030c0:	4829      	ldr	r0, [pc, #164]	; (8003168 <HAL_TIM_MspPostInit+0x188>)
 80030c2:	f002 fae9 	bl	8005698 <HAL_GPIO_Init>
}
 80030c6:	e042      	b.n	800314e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_TIM_MspPostInit+0x18c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d11c      	bne.n	800310c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a21      	ldr	r2, [pc, #132]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030fa:	2302      	movs	r3, #2
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	481a      	ldr	r0, [pc, #104]	; (8003170 <HAL_TIM_MspPostInit+0x190>)
 8003106:	f002 fac7 	bl	8005698 <HAL_GPIO_Init>
}
 800310a:	e020      	b.n	800314e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_TIM_MspPostInit+0x194>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d11b      	bne.n	800314e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_TIM_MspPostInit+0x17c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800313e:	2309      	movs	r3, #9
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	480b      	ldr	r0, [pc, #44]	; (8003178 <HAL_TIM_MspPostInit+0x198>)
 800314a:	f002 faa5 	bl	8005698 <HAL_GPIO_Init>
}
 800314e:	bf00      	nop
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000
 800315c:	40023800 	.word	0x40023800
 8003160:	40020000 	.word	0x40020000
 8003164:	40000400 	.word	0x40000400
 8003168:	40020400 	.word	0x40020400
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40022000 	.word	0x40022000
 8003174:	40001800 	.word	0x40001800
 8003178:	40021c00 	.word	0x40021c00

0800317c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3c      	ldr	r2, [pc, #240]	; (800328c <HAL_UART_MspInit+0x110>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d145      	bne.n	800322a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800319e:	4b3c      	ldr	r3, [pc, #240]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031a4:	f043 0310 	orr.w	r3, r3, #16
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a35      	ldr	r2, [pc, #212]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_UART_MspInit+0x114>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f6:	2307      	movs	r3, #7
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4824      	ldr	r0, [pc, #144]	; (8003294 <HAL_UART_MspInit+0x118>)
 8003202:	f002 fa49 	bl	8005698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003218:	2307      	movs	r3, #7
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	481d      	ldr	r0, [pc, #116]	; (8003298 <HAL_UART_MspInit+0x11c>)
 8003224:	f002 fa38 	bl	8005698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003228:	e02c      	b.n	8003284 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_UART_MspInit+0x120>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d127      	bne.n	8003284 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_UART_MspInit+0x114>)
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_UART_MspInit+0x114>)
 800323a:	f043 0320 	orr.w	r3, r3, #32
 800323e:	6453      	str	r3, [r2, #68]	; 0x44
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_UART_MspInit+0x114>)
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_UART_MspInit+0x114>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_UART_MspInit+0x114>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_UART_MspInit+0x114>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003264:	23c0      	movs	r3, #192	; 0xc0
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003274:	2308      	movs	r3, #8
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	4619      	mov	r1, r3
 800327e:	4808      	ldr	r0, [pc, #32]	; (80032a0 <HAL_UART_MspInit+0x124>)
 8003280:	f002 fa0a 	bl	8005698 <HAL_GPIO_Init>
}
 8003284:	bf00      	nop
 8003286:	3730      	adds	r7, #48	; 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40011000 	.word	0x40011000
 8003290:	40023800 	.word	0x40023800
 8003294:	40020400 	.word	0x40020400
 8003298:	40020000 	.word	0x40020000
 800329c:	40011400 	.word	0x40011400
 80032a0:	40020800 	.word	0x40020800

080032a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032b8:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_FMC_MspInit+0x100>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d16d      	bne.n	800339c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_FMC_MspInit+0x100>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_FMC_MspInit+0x104>)
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	4a37      	ldr	r2, [pc, #220]	; (80033a8 <HAL_FMC_MspInit+0x104>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6393      	str	r3, [r2, #56]	; 0x38
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_FMC_MspInit+0x104>)
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80032de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032e2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ec:	2303      	movs	r3, #3
 80032ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032f0:	230c      	movs	r3, #12
 80032f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	482c      	ldr	r0, [pc, #176]	; (80033ac <HAL_FMC_MspInit+0x108>)
 80032fa:	f002 f9cd 	bl	8005698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80032fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8003302:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003310:	230c      	movs	r3, #12
 8003312:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	4619      	mov	r1, r3
 8003318:	4825      	ldr	r0, [pc, #148]	; (80033b0 <HAL_FMC_MspInit+0x10c>)
 800331a:	f002 f9bd 	bl	8005698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800331e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003322:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332c:	2303      	movs	r3, #3
 800332e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003330:	230c      	movs	r3, #12
 8003332:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	481e      	ldr	r0, [pc, #120]	; (80033b4 <HAL_FMC_MspInit+0x110>)
 800333a:	f002 f9ad 	bl	8005698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800333e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003342:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003350:	230c      	movs	r3, #12
 8003352:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4817      	ldr	r0, [pc, #92]	; (80033b8 <HAL_FMC_MspInit+0x114>)
 800335a:	f002 f99d 	bl	8005698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800335e:	2328      	movs	r3, #40	; 0x28
 8003360:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800336e:	230c      	movs	r3, #12
 8003370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4811      	ldr	r0, [pc, #68]	; (80033bc <HAL_FMC_MspInit+0x118>)
 8003378:	f002 f98e 	bl	8005698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800337c:	2308      	movs	r3, #8
 800337e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800338c:	230c      	movs	r3, #12
 800338e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <HAL_FMC_MspInit+0x11c>)
 8003396:	f002 f97f 	bl	8005698 <HAL_GPIO_Init>
 800339a:	e000      	b.n	800339e <HAL_FMC_MspInit+0xfa>
    return;
 800339c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000039c 	.word	0x2000039c
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40021800 	.word	0x40021800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021400 	.word	0x40021400
 80033bc:	40021c00 	.word	0x40021c00
 80033c0:	40020800 	.word	0x40020800

080033c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033cc:	f7ff ff6a 	bl	80032a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_SAI_MspInit+0xbc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d124      	bne.n	8003434 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_SAI_MspInit+0xc4>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <HAL_SAI_MspInit+0xc4>)
 80033f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_SAI_MspInit+0xc4>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a21      	ldr	r2, [pc, #132]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 8003412:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003414:	23f0      	movs	r3, #240	; 0xf0
 8003416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003424:	230a      	movs	r3, #10
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	481c      	ldr	r0, [pc, #112]	; (80034a0 <HAL_SAI_MspInit+0xc8>)
 8003430:	f002 f932 	bl	8005698 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_SAI_MspInit+0xcc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d125      	bne.n	800348a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_SAI_MspInit+0xc4>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <HAL_SAI_MspInit+0xc4>)
 800344c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_SAI_MspInit+0xc4>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <HAL_SAI_MspInit+0xc0>)
 8003466:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800347a:	230a      	movs	r3, #10
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	4808      	ldr	r0, [pc, #32]	; (80034a8 <HAL_SAI_MspInit+0xd0>)
 8003486:	f002 f907 	bl	8005698 <HAL_GPIO_Init>

    }
}
 800348a:	bf00      	nop
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40015c04 	.word	0x40015c04
 8003498:	200003a0 	.word	0x200003a0
 800349c:	40023800 	.word	0x40023800
 80034a0:	40022000 	.word	0x40022000
 80034a4:	40015c24 	.word	0x40015c24
 80034a8:	40021800 	.word	0x40021800

080034ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034bc:	2200      	movs	r2, #0
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	2036      	movs	r0, #54	; 0x36
 80034c2:	f001 fabb 	bl	8004a3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80034c6:	2036      	movs	r0, #54	; 0x36
 80034c8:	f001 fad4 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <HAL_InitTick+0xa0>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_InitTick+0xa0>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	6413      	str	r3, [r2, #64]	; 0x40
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_InitTick+0xa0>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034e4:	f107 0210 	add.w	r2, r7, #16
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fbde 	bl	8006cb0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034f4:	f003 fbb4 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 80034f8:	4603      	mov	r3, r0
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <HAL_InitTick+0xa4>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	3b01      	subs	r3, #1
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_InitTick+0xa8>)
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_InitTick+0xac>)
 8003510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_InitTick+0xa8>)
 8003514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003518:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800351a:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <HAL_InitTick+0xa8>)
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_InitTick+0xa8>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_InitTick+0xa8>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <HAL_InitTick+0xa8>)
 800352e:	f006 f857 	bl	80095e0 <HAL_TIM_Base_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003538:	4806      	ldr	r0, [pc, #24]	; (8003554 <HAL_InitTick+0xa8>)
 800353a:	f006 f87d 	bl	8009638 <HAL_TIM_Base_Start_IT>
 800353e:	4603      	mov	r3, r0
 8003540:	e000      	b.n	8003544 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	3730      	adds	r7, #48	; 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	431bde83 	.word	0x431bde83
 8003554:	2000c680 	.word	0x2000c680
 8003558:	40001000 	.word	0x40001000

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800356e:	e7fe      	b.n	800356e <HardFault_Handler+0x4>

08003570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003574:	e7fe      	b.n	8003574 <MemManage_Handler+0x4>

08003576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357a:	e7fe      	b.n	800357a <BusFault_Handler+0x4>

0800357c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <UsageFault_Handler+0x4>

08003582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <CAN1_RX0_IRQHandler+0x10>)
 8003596:	f000 ff4d 	bl	8004434 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	2000c57c 	.word	0x2000c57c

080035a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <TIM6_DAC_IRQHandler+0x10>)
 80035aa:	f006 f89a 	bl	80096e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000c680 	.word	0x2000c680

080035b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <LTDC_IRQHandler+0x10>)
 80035be:	f002 fb17 	bl	8005bf0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000c254 	.word	0x2000c254

080035cc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <DMA2D_IRQHandler+0x10>)
 80035d2:	f001 fe22 	bl	800521a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000c4f4 	.word	0x2000c4f4

080035e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
	return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_kill>:

int _kill(int pid, int sig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035fa:	f021 f839 	bl	8024670 <__errno>
 80035fe:	4602      	mov	r2, r0
 8003600:	2316      	movs	r3, #22
 8003602:	6013      	str	r3, [r2, #0]
	return -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_exit>:

void _exit (int status)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ffe7 	bl	80035f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003622:	e7fe      	b.n	8003622 <_exit+0x12>

08003624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e00a      	b.n	800364c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003636:	f3af 8000 	nop.w
 800363a:	4601      	mov	r1, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	60ba      	str	r2, [r7, #8]
 8003642:	b2ca      	uxtb	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	dbf0      	blt.n	8003636 <_read+0x12>
	}

return len;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e009      	b.n	8003684 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	60ba      	str	r2, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	dbf1      	blt.n	8003670 <_write+0x12>
	}
	return len;
 800368c:	687b      	ldr	r3, [r7, #4]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <_close>:

int _close(int file)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
	return -1;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036be:	605a      	str	r2, [r3, #4]
	return 0;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_isatty>:

int _isatty(int file)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
	return 1;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
	return 0;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <_sbrk+0x50>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <_sbrk+0x16>
		heap_end = &end;
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <_sbrk+0x50>)
 8003712:	4a10      	ldr	r2, [pc, #64]	; (8003754 <_sbrk+0x54>)
 8003714:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <_sbrk+0x50>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <_sbrk+0x50>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	466a      	mov	r2, sp
 8003726:	4293      	cmp	r3, r2
 8003728:	d907      	bls.n	800373a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800372a:	f020 ffa1 	bl	8024670 <__errno>
 800372e:	4602      	mov	r2, r0
 8003730:	230c      	movs	r3, #12
 8003732:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e006      	b.n	8003748 <_sbrk+0x48>
	}

	heap_end += incr;
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <_sbrk+0x50>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	4a03      	ldr	r2, [pc, #12]	; (8003750 <_sbrk+0x50>)
 8003744:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200003a4 	.word	0x200003a4
 8003754:	2000cb38 	.word	0x2000cb38

08003758 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <SystemInit+0x28>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <SystemInit+0x28>)
 8003764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <SystemInit+0x28>)
 800376e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003772:	609a      	str	r2, [r3, #8]
#endif
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800378a:	e003      	b.n	8003794 <LoopCopyDataInit>

0800378c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800378e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003792:	3104      	adds	r1, #4

08003794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003794:	480b      	ldr	r0, [pc, #44]	; (80037c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800379a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800379c:	d3f6      	bcc.n	800378c <CopyDataInit>
  ldr  r2, =_sbss
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037a0:	e002      	b.n	80037a8 <LoopFillZerobss>

080037a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037a4:	f842 3b04 	str.w	r3, [r2], #4

080037a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037ac:	d3f9      	bcc.n	80037a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ae:	f7ff ffd3 	bl	8003758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f020 ff75 	bl	80246a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b6:	f7fd fb17 	bl	8000de8 <main>
  bx  lr    
 80037ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037bc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037c0:	08060d48 	.word	0x08060d48
  ldr  r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037c8:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 80037cc:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 80037d0:	2000cb34 	.word	0x2000cb34

080037d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC_IRQHandler>

080037d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037da:	2003      	movs	r0, #3
 80037dc:	f001 f923 	bl	8004a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7ff fe63 	bl	80034ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037e6:	f7fe ff09 	bl	80025fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000020 	.word	0x20000020
 8003814:	2000c6c0 	.word	0x2000c6c0

08003818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	2000c6c0 	.word	0x2000c6c0

08003830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff ffee 	bl	8003818 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d005      	beq.n	8003856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_Delay+0x40>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003856:	bf00      	nop
 8003858:	f7ff ffde 	bl	8003818 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d8f7      	bhi.n	8003858 <HAL_Delay+0x28>
  {
  }
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000020 	.word	0x20000020

08003874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e031      	b.n	80038ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe feda 	bl	800264c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_ADC_Init+0x84>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f964 	bl	8003b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
 80038de:	e001      	b.n	80038e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	ffffeefd 	.word	0xffffeefd

080038fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1c>
 8003914:	2302      	movs	r3, #2
 8003916:	e12a      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x272>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b09      	cmp	r3, #9
 8003926:	d93a      	bls.n	800399e <HAL_ADC_ConfigChannel+0xa2>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003930:	d035      	beq.n	800399e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68d9      	ldr	r1, [r3, #12]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	3b1e      	subs	r3, #30
 8003948:	2207      	movs	r2, #7
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	400a      	ands	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_ADC_ConfigChannel+0x280>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10a      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68d9      	ldr	r1, [r3, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	061a      	lsls	r2, r3, #24
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003976:	e035      	b.n	80039e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	4618      	mov	r0, r3
 800398a:	4603      	mov	r3, r0
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4403      	add	r3, r0
 8003990:	3b1e      	subs	r3, #30
 8003992:	409a      	lsls	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800399c:	e022      	b.n	80039e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6919      	ldr	r1, [r3, #16]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	2207      	movs	r2, #7
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43da      	mvns	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	400a      	ands	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6919      	ldr	r1, [r3, #16]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	4603      	mov	r3, r0
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4403      	add	r3, r0
 80039da:	409a      	lsls	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d824      	bhi.n	8003a36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	3b05      	subs	r3, #5
 80039fe:	221f      	movs	r2, #31
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43da      	mvns	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	3b05      	subs	r3, #5
 8003a28:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34
 8003a34:	e04c      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d824      	bhi.n	8003a88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3b23      	subs	r3, #35	; 0x23
 8003a50:	221f      	movs	r2, #31
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	3b23      	subs	r3, #35	; 0x23
 8003a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
 8003a86:	e023      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	3b41      	subs	r3, #65	; 0x41
 8003a9a:	221f      	movs	r2, #31
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b41      	subs	r3, #65	; 0x41
 8003ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <HAL_ADC_ConfigChannel+0x284>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10a      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1f4>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003aea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003aee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_ADC_ConfigChannel+0x284>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d109      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x212>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d105      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_ADC_ConfigChannel+0x284>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d125      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x268>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_ADC_ConfigChannel+0x280>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x22e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b11      	cmp	r3, #17
 8003b28:	d11c      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <HAL_ADC_ConfigChannel+0x288>)
 8003b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <HAL_ADC_ConfigChannel+0x280>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d111      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_ADC_ConfigChannel+0x28c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_ADC_ConfigChannel+0x290>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9a      	lsrs	r2, r3, #18
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b56:	e002      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f9      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	10000012 	.word	0x10000012
 8003b80:	40012000 	.word	0x40012000
 8003b84:	40012300 	.word	0x40012300
 8003b88:	20000018 	.word	0x20000018
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b98:	4b78      	ldr	r3, [pc, #480]	; (8003d7c <ADC_Init+0x1ec>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a77      	ldr	r2, [pc, #476]	; (8003d7c <ADC_Init+0x1ec>)
 8003b9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ba2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ba4:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <ADC_Init+0x1ec>)
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4973      	ldr	r1, [pc, #460]	; (8003d7c <ADC_Init+0x1ec>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <ADC_Init+0x1f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e00f      	b.n	8003c8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0202 	bic.w	r2, r2, #2
 8003c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	005a      	lsls	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	035a      	lsls	r2, r3, #13
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	e007      	b.n	8003d00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	051a      	lsls	r2, r3, #20
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d42:	025a      	lsls	r2, r3, #9
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	029a      	lsls	r2, r3, #10
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40012300 	.word	0x40012300
 8003d80:	0f000001 	.word	0x0f000001

08003d84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0ed      	b.n	8003f72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe fcac 	bl	8002700 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0202 	bic.w	r2, r2, #2
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db8:	f7ff fd2e 	bl	8003818 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dbe:	e012      	b.n	8003de6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dc0:	f7ff fd2a 	bl	8003818 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b0a      	cmp	r3, #10
 8003dcc:	d90b      	bls.n	8003de6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0c5      	b.n	8003f72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e04:	f7ff fd08 	bl	8003818 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e0a:	e012      	b.n	8003e32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e0c:	f7ff fd04 	bl	8003818 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b0a      	cmp	r3, #10
 8003e18:	d90b      	bls.n	8003e32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2205      	movs	r2, #5
 8003e2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e09f      	b.n	8003f72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0e5      	beq.n	8003e0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7e1b      	ldrb	r3, [r3, #24]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e007      	b.n	8003e6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7e5b      	ldrb	r3, [r3, #25]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e007      	b.n	8003e94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7e9b      	ldrb	r3, [r3, #26]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0220 	bic.w	r2, r2, #32
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7edb      	ldrb	r3, [r3, #27]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0210 	bic.w	r2, r2, #16
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0210 	orr.w	r2, r2, #16
 8003ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7f1b      	ldrb	r3, [r3, #28]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d108      	bne.n	8003f02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0208 	orr.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e007      	b.n	8003f12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0208 	bic.w	r2, r2, #8
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7f5b      	ldrb	r3, [r3, #29]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0204 	orr.w	r2, r2, #4
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0204 	bic.w	r2, r2, #4
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	ea42 0103 	orr.w	r1, r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d003      	beq.n	8003fa2 <HAL_CAN_ConfigFilter+0x26>
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f040 80be 	bne.w	800411e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fa2:	4b65      	ldr	r3, [pc, #404]	; (8004138 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d123      	bne.n	800404c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004026:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3248      	adds	r2, #72	; 0x48
 800402c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004040:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	3348      	adds	r3, #72	; 0x48
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	440b      	add	r3, r1
 800404a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d122      	bne.n	800409a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	431a      	orrs	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004074:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3248      	adds	r2, #72	; 0x48
 800407a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	3348      	adds	r3, #72	; 0x48
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040b4:	e007      	b.n	80040c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	431a      	orrs	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040e0:	e007      	b.n	80040f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	431a      	orrs	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e006      	b.n	800412c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40006400 	.word	0x40006400

0800413c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d12e      	bne.n	80041ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004168:	f7ff fb56 	bl	8003818 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800416e:	e012      	b.n	8004196 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004170:	f7ff fb52 	bl	8003818 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d90b      	bls.n	8004196 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2205      	movs	r2, #5
 800418e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e012      	b.n	80041bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e006      	b.n	80041bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d003      	beq.n	80041e8 <HAL_CAN_GetRxMessage+0x24>
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	f040 80f3 	bne.w	80043ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10e      	bne.n	800420c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0e7      	b.n	80043dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0d8      	b.n	80043dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	331b      	adds	r3, #27
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	4413      	add	r3, r2
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0204 	and.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10c      	bne.n	8004262 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	331b      	adds	r3, #27
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0d5b      	lsrs	r3, r3, #21
 8004258:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e00b      	b.n	800427a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	331b      	adds	r3, #27
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4413      	add	r3, r2
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	331b      	adds	r3, #27
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4413      	add	r3, r2
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0202 	and.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	331b      	adds	r3, #27
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	331b      	adds	r3, #27
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	331b      	adds	r3, #27
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	0a1a      	lsrs	r2, r3, #8
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4413      	add	r3, r2
 8004312:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0c1a      	lsrs	r2, r3, #16
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	3302      	adds	r3, #2
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	4413      	add	r3, r2
 800432c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	0e1a      	lsrs	r2, r3, #24
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	3303      	adds	r3, #3
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	4413      	add	r3, r2
 8004346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3304      	adds	r3, #4
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0a1a      	lsrs	r2, r3, #8
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3305      	adds	r3, #5
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0c1a      	lsrs	r2, r3, #16
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	3306      	adds	r3, #6
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	4413      	add	r3, r2
 8004392:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e1a      	lsrs	r2, r3, #24
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	3307      	adds	r3, #7
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	e007      	b.n	80043ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0220 	orr.w	r2, r2, #32
 80043c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e006      	b.n	80043dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <HAL_CAN_ActivateNotification+0x1e>
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d109      	bne.n	800441a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6959      	ldr	r1, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e006      	b.n	8004428 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d07c      	beq.n	8004574 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f97d 	bl	8004796 <HAL_CAN_TxMailbox0CompleteCallback>
 800449c:	e016      	b.n	80044cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e00c      	b.n	80044cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e002      	b.n	80044cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f983 	bl	80047d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f95d 	bl	80047aa <HAL_CAN_TxMailbox1CompleteCallback>
 80044f0:	e016      	b.n	8004520 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	e00c      	b.n	8004520 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	e002      	b.n	8004520 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f963 	bl	80047e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d024      	beq.n	8004574 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004532:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f93d 	bl	80047be <HAL_CAN_TxMailbox2CompleteCallback>
 8004544:	e016      	b.n	8004574 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	e00c      	b.n	8004574 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e002      	b.n	8004574 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f943 	bl	80047fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800458e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2208      	movs	r2, #8
 80045b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f92a 	bl	800480e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fde4 	bl	80011a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2210      	movs	r2, #16
 80045fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2208      	movs	r2, #8
 8004616:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f90c 	bl	8004836 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8f3 	bl	8004822 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2210      	movs	r2, #16
 8004656:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8f6 	bl	800484a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2208      	movs	r2, #8
 8004678:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8ef 	bl	800485e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d06c      	beq.n	800476e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f043 0302 	orr.w	r3, r3, #2
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	f043 0304 	orr.w	r3, r3, #4
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03d      	beq.n	800476e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d038      	beq.n	800476e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004702:	2b30      	cmp	r3, #48	; 0x30
 8004704:	d017      	beq.n	8004736 <HAL_CAN_IRQHandler+0x302>
 8004706:	2b30      	cmp	r3, #48	; 0x30
 8004708:	d804      	bhi.n	8004714 <HAL_CAN_IRQHandler+0x2e0>
 800470a:	2b10      	cmp	r3, #16
 800470c:	d009      	beq.n	8004722 <HAL_CAN_IRQHandler+0x2ee>
 800470e:	2b20      	cmp	r3, #32
 8004710:	d00c      	beq.n	800472c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004712:	e024      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004714:	2b50      	cmp	r3, #80	; 0x50
 8004716:	d018      	beq.n	800474a <HAL_CAN_IRQHandler+0x316>
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d01b      	beq.n	8004754 <HAL_CAN_IRQHandler+0x320>
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d00f      	beq.n	8004740 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004720:	e01d      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800472a:	e018      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f043 0310 	orr.w	r3, r3, #16
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004734:	e013      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	f043 0320 	orr.w	r3, r3, #32
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800473e:	e00e      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004748:	e009      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004752:	e004      	b.n	800475e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800475c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800476c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2204      	movs	r2, #4
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f872 	bl	8004872 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800478e:	bf00      	nop
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <__NVIC_SetPriorityGrouping+0x40>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048a4:	4013      	ands	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <__NVIC_SetPriorityGrouping+0x44>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048b6:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <__NVIC_SetPriorityGrouping+0x40>)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	60d3      	str	r3, [r2, #12]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000ed00 	.word	0xe000ed00
 80048cc:	05fa0000 	.word	0x05fa0000

080048d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <__NVIC_GetPriorityGrouping+0x18>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 0307 	and.w	r3, r3, #7
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db0b      	blt.n	8004916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	4907      	ldr	r1, [pc, #28]	; (8004924 <__NVIC_EnableIRQ+0x38>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2001      	movs	r0, #1
 800490e:	fa00 f202 	lsl.w	r2, r0, r2
 8004912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	e000e100 	.word	0xe000e100

08004928 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db10      	blt.n	800495c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	4909      	ldr	r1, [pc, #36]	; (8004968 <__NVIC_DisableIRQ+0x40>)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2001      	movs	r0, #1
 800494a:	fa00 f202 	lsl.w	r2, r0, r2
 800494e:	3320      	adds	r3, #32
 8004950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004958:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000e100 	.word	0xe000e100

0800496c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	2b00      	cmp	r3, #0
 800497e:	db0a      	blt.n	8004996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	490c      	ldr	r1, [pc, #48]	; (80049b8 <__NVIC_SetPriority+0x4c>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	440b      	add	r3, r1
 8004990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004994:	e00a      	b.n	80049ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4908      	ldr	r1, [pc, #32]	; (80049bc <__NVIC_SetPriority+0x50>)
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3b04      	subs	r3, #4
 80049a4:	0112      	lsls	r2, r2, #4
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	440b      	add	r3, r1
 80049aa:	761a      	strb	r2, [r3, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000e100 	.word	0xe000e100
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f1c3 0307 	rsb	r3, r3, #7
 80049da:	2b04      	cmp	r3, #4
 80049dc:	bf28      	it	cs
 80049de:	2304      	movcs	r3, #4
 80049e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d902      	bls.n	80049f0 <NVIC_EncodePriority+0x30>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3b03      	subs	r3, #3
 80049ee:	e000      	b.n	80049f2 <NVIC_EncodePriority+0x32>
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	f04f 32ff 	mov.w	r2, #4294967295
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	4313      	orrs	r3, r2
         );
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ff2a 	bl	8004888 <__NVIC_SetPriorityGrouping>
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a4e:	f7ff ff3f 	bl	80048d0 <__NVIC_GetPriorityGrouping>
 8004a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7ff ffb1 	bl	80049c0 <NVIC_EncodePriority>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff80 	bl	800496c <__NVIC_SetPriority>
}
 8004a6c:	bf00      	nop
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff32 	bl	80048ec <__NVIC_EnableIRQ>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ff42 	bl	8004928 <__NVIC_DisableIRQ>
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e054      	b.n	8004b68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7f5b      	ldrb	r3, [r3, #29]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd fe62 	bl	8002798 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_CRC_Init+0xc4>)
 8004ae8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0218 	bic.w	r2, r2, #24
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	e00c      	b.n	8004b16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f834 	bl	8004b74 <HAL_CRCEx_Polynomial_Set>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e028      	b.n	8004b68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	795b      	ldrb	r3, [r3, #5]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	e004      	b.n	8004b34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6912      	ldr	r2, [r2, #16]
 8004b32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	04c11db7 	.word	0x04c11db7

08004b74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b84:	231f      	movs	r3, #31
 8004b86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b88:	bf00      	nop
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	613a      	str	r2, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	d846      	bhi.n	8004c3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c3d 	.word	0x08004c3d
 8004bc0:	08004c3d 	.word	0x08004c3d
 8004bc4:	08004c3d 	.word	0x08004c3d
 8004bc8:	08004c3d 	.word	0x08004c3d
 8004bcc:	08004c3d 	.word	0x08004c3d
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004c31 	.word	0x08004c31
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c3d 	.word	0x08004c3d
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c3d 	.word	0x08004c3d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	08004c19 	.word	0x08004c19
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d913      	bls.n	8004c46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c22:	e010      	b.n	8004c46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d90f      	bls.n	8004c4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c2e:	e00c      	b.n	8004c4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d90b      	bls.n	8004c4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c3a:	e008      	b.n	8004c4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	e006      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 0118 	bic.w	r1, r3, #24
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e069      	b.n	8004d66 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fd9a 	bl	80027d8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_DCMI_Init+0xf0>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cde:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cf6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d02:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d0e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d112      	bne.n	8004d46 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7f1b      	ldrb	r3, [r3, #28]
 8004d24:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7f5b      	ldrb	r3, [r3, #29]
 8004d2a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d2c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f9b      	ldrb	r3, [r3, #30]
 8004d32:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7fdb      	ldrb	r3, [r3, #31]
 8004d3c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d42:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d44:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 021e 	orr.w	r2, r2, #30
 8004d54:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	ffe0f007 	.word	0xffe0f007

08004d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Start_IT+0x26>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e048      	b.n	8004e2c <HAL_DMA_Start_IT+0xb8>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d137      	bne.n	8004e1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f842 	bl	8004e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	223f      	movs	r2, #63	; 0x3f
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0216 	orr.w	r2, r2, #22
 8004de2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e005      	b.n	8004e2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
 8004e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d108      	bne.n	8004e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e8a:	e007      	b.n	8004e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e039      	b.n	8004f2e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fd40 	bl	8002954 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	f023 0107 	bic.w	r1, r3, #7
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_DMA2D_Init+0x90>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68d1      	ldr	r1, [r2, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	ffffc000 	.word	0xffffc000

08004f3c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e05f      	b.n	800500e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004f4e:	4b32      	ldr	r3, [pc, #200]	; (8005018 <HAL_DMA2D_DeInit+0xdc>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02e      	beq.n	8004fb8 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8c1 	bl	80050f0 <HAL_DMA2D_Abort>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d021      	beq.n	8004fb8 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04a      	b.n	800500e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d108      	bne.n	8004f98 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8f7 	bl	800517c <HAL_DMA2D_CLUTLoading_Abort>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d011      	beq.n	8004fb8 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e03a      	b.n	800500e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d108      	bne.n	8004fb8 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8e7 	bl	800517c <HAL_DMA2D_CLUTLoading_Abort>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e02a      	b.n	800500e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	223f      	movs	r2, #63	; 0x3f
 8004fc6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd fcd5 	bl	80029a0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800

0800501c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_DMA2D_Start_IT+0x1c>
 8005034:	2302      	movs	r3, #2
 8005036:	e020      	b.n	800507a <HAL_DMA2D_Start_IT+0x5e>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fa84 	bl	8005560 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005066:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af02      	add	r7, sp, #8
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800509a:	2302      	movs	r3, #2
 800509c:	e024      	b.n	80050e8 <HAL_DMA2D_BlendingStart_IT+0x66>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fa4d 	bl	8005560 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80050d4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0205 	bic.w	r2, r3, #5
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0204 	orr.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800510c:	f7fe fb84 	bl	8003818 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005112:	e017      	b.n	8005144 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005114:	f7fe fb80 	bl	8003818 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005122:	d90f      	bls.n	8005144 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2203      	movs	r2, #3
 8005134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e017      	b.n	8005174 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e0      	bne.n	8005114 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005160:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0204 	orr.w	r2, r2, #4
 800519c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d103      	bne.n	80051ac <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	331c      	adds	r3, #28
 80051aa:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80051ac:	f7fe fb34 	bl	8003818 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80051b2:	e017      	b.n	80051e4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051b4:	f7fe fb30 	bl	8003818 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c2:	d90f      	bls.n	80051e4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2203      	movs	r2, #3
 80051d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e016      	b.n	8005212 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e1      	bne.n	80051b4 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80051fe:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d026      	beq.n	800528a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d021      	beq.n	800528a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005254:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d026      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ac:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2220      	movs	r2, #32
 80052b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	f043 0202 	orr.w	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2204      	movs	r2, #4
 80052c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d026      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005304:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	f043 0204 	orr.w	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2204      	movs	r2, #4
 8005364:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f853 	bl	8005412 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d024      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01f      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800538e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2202      	movs	r2, #2
 8005396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01a      	beq.n	800540a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f80e 	bl	8005426 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_DMA2D_ConfigLayer+0x20>
 8005458:	2302      	movs	r3, #2
 800545a:	e079      	b.n	8005550 <HAL_DMA2D_ConfigLayer+0x114>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	3318      	adds	r3, #24
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005486:	4b35      	ldr	r3, [pc, #212]	; (800555c <HAL_DMA2D_ConfigLayer+0x120>)
 8005488:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b0a      	cmp	r3, #10
 8005490:	d003      	beq.n	800549a <HAL_DMA2D_ConfigLayer+0x5e>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b09      	cmp	r3, #9
 8005498:	d107      	bne.n	80054aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e005      	b.n	80054b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d120      	bne.n	80054fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	ea02 0103 	and.w	r1, r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b0a      	cmp	r3, #10
 80054e4:	d003      	beq.n	80054ee <HAL_DMA2D_ConfigLayer+0xb2>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b09      	cmp	r3, #9
 80054ec:	d127      	bne.n	800553e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
 80054fc:	e01f      	b.n	800553e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	ea02 0103 	and.w	r1, r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	430a      	orrs	r2, r1
 8005514:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b0a      	cmp	r3, #10
 8005526:	d003      	beq.n	8005530 <HAL_DMA2D_ConfigLayer+0xf4>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b09      	cmp	r3, #9
 800552e:	d106      	bne.n	800553e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800553c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	ff03000f 	.word	0xff03000f

08005560 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005560:	b480      	push	{r7}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	041a      	lsls	r2, r3, #16
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	431a      	orrs	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005598:	d174      	bne.n	8005684 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055a8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055b0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d108      	bne.n	80055d2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	e053      	b.n	800567a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d106      	bne.n	80055e8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4313      	orrs	r3, r2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	e048      	b.n	800567a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d111      	bne.n	8005614 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	0cdb      	lsrs	r3, r3, #19
 80055f4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	0a9b      	lsrs	r3, r3, #10
 80055fa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	08db      	lsrs	r3, r3, #3
 8005600:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	02db      	lsls	r3, r3, #11
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e032      	b.n	800567a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d117      	bne.n	800564c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	0fdb      	lsrs	r3, r3, #31
 8005620:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	0cdb      	lsrs	r3, r3, #19
 8005626:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	431a      	orrs	r2, r3
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	03db      	lsls	r3, r3, #15
 8005642:	4313      	orrs	r3, r2
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	e016      	b.n	800567a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	0f1b      	lsrs	r3, r3, #28
 8005650:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	0b1b      	lsrs	r3, r3, #12
 800565c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	431a      	orrs	r2, r3
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	4313      	orrs	r3, r2
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005682:	e003      	b.n	800568c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	60da      	str	r2, [r3, #12]
}
 800568c:	bf00      	nop
 800568e:	372c      	adds	r7, #44	; 0x2c
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e175      	b.n	80059a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056b8:	2201      	movs	r2, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f040 8164 	bne.w	800599e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d00b      	beq.n	80056f6 <HAL_GPIO_Init+0x5e>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056ea:	2b11      	cmp	r3, #17
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b12      	cmp	r3, #18
 80056f4:	d130      	bne.n	8005758 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800572c:	2201      	movs	r2, #1
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 0201 	and.w	r2, r3, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0x100>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b12      	cmp	r3, #18
 8005796:	d123      	bne.n	80057e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	08da      	lsrs	r2, r3, #3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3208      	adds	r2, #8
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	08da      	lsrs	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3208      	adds	r2, #8
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	2203      	movs	r2, #3
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 0203 	and.w	r2, r3, #3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80be 	beq.w	800599e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_GPIO_Init+0x320>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	4a64      	ldr	r2, [pc, #400]	; (80059b8 <HAL_GPIO_Init+0x320>)
 8005828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582c:	6453      	str	r3, [r2, #68]	; 0x44
 800582e:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_GPIO_Init+0x320>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800583a:	4a60      	ldr	r2, [pc, #384]	; (80059bc <HAL_GPIO_Init+0x324>)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	220f      	movs	r2, #15
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a57      	ldr	r2, [pc, #348]	; (80059c0 <HAL_GPIO_Init+0x328>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d037      	beq.n	80058d6 <HAL_GPIO_Init+0x23e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a56      	ldr	r2, [pc, #344]	; (80059c4 <HAL_GPIO_Init+0x32c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d031      	beq.n	80058d2 <HAL_GPIO_Init+0x23a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a55      	ldr	r2, [pc, #340]	; (80059c8 <HAL_GPIO_Init+0x330>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d02b      	beq.n	80058ce <HAL_GPIO_Init+0x236>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a54      	ldr	r2, [pc, #336]	; (80059cc <HAL_GPIO_Init+0x334>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d025      	beq.n	80058ca <HAL_GPIO_Init+0x232>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a53      	ldr	r2, [pc, #332]	; (80059d0 <HAL_GPIO_Init+0x338>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01f      	beq.n	80058c6 <HAL_GPIO_Init+0x22e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_GPIO_Init+0x33c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d019      	beq.n	80058c2 <HAL_GPIO_Init+0x22a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a51      	ldr	r2, [pc, #324]	; (80059d8 <HAL_GPIO_Init+0x340>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_GPIO_Init+0x226>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a50      	ldr	r2, [pc, #320]	; (80059dc <HAL_GPIO_Init+0x344>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00d      	beq.n	80058ba <HAL_GPIO_Init+0x222>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a4f      	ldr	r2, [pc, #316]	; (80059e0 <HAL_GPIO_Init+0x348>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <HAL_GPIO_Init+0x21e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a4e      	ldr	r2, [pc, #312]	; (80059e4 <HAL_GPIO_Init+0x34c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_GPIO_Init+0x21a>
 80058ae:	2309      	movs	r3, #9
 80058b0:	e012      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058b2:	230a      	movs	r3, #10
 80058b4:	e010      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058b6:	2308      	movs	r3, #8
 80058b8:	e00e      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058ba:	2307      	movs	r3, #7
 80058bc:	e00c      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058be:	2306      	movs	r3, #6
 80058c0:	e00a      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058c2:	2305      	movs	r3, #5
 80058c4:	e008      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058c6:	2304      	movs	r3, #4
 80058c8:	e006      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058ca:	2303      	movs	r3, #3
 80058cc:	e004      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e002      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_GPIO_Init+0x240>
 80058d6:	2300      	movs	r3, #0
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	f002 0203 	and.w	r2, r2, #3
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	4093      	lsls	r3, r2
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80058e8:	4934      	ldr	r1, [pc, #208]	; (80059bc <HAL_GPIO_Init+0x324>)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	3302      	adds	r3, #2
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058f6:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <HAL_GPIO_Init+0x350>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	43db      	mvns	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800591a:	4a33      	ldr	r2, [pc, #204]	; (80059e8 <HAL_GPIO_Init+0x350>)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005920:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_GPIO_Init+0x350>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	43db      	mvns	r3, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005944:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <HAL_GPIO_Init+0x350>)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_GPIO_Init+0x350>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <HAL_GPIO_Init+0x350>)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <HAL_GPIO_Init+0x350>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <HAL_GPIO_Init+0x350>)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	f67f ae86 	bls.w	80056b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059ac:	bf00      	nop
 80059ae:	3724      	adds	r7, #36	; 0x24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40013800 	.word	0x40013800
 80059c0:	40020000 	.word	0x40020000
 80059c4:	40020400 	.word	0x40020400
 80059c8:	40020800 	.word	0x40020800
 80059cc:	40020c00 	.word	0x40020c00
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40021400 	.word	0x40021400
 80059d8:	40021800 	.word	0x40021800
 80059dc:	40021c00 	.word	0x40021c00
 80059e0:	40022000 	.word	0x40022000
 80059e4:	40022400 	.word	0x40022400
 80059e8:	40013c00 	.word	0x40013c00

080059ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	887b      	ldrh	r3, [r7, #2]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e001      	b.n	8005a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a2c:	787b      	ldrb	r3, [r7, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a38:	e003      	b.n	8005a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a3a:	887b      	ldrh	r3, [r7, #2]
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	619a      	str	r2, [r3, #24]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0bf      	b.n	8005be2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fc ffac 	bl	80029d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6999      	ldr	r1, [r3, #24]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005aa8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <HAL_LTDC_Init+0x19c>)
 8005ac4:	400b      	ands	r3, r1
 8005ac6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68d9      	ldr	r1, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b3e      	ldr	r3, [pc, #248]	; (8005bec <HAL_LTDC_Init+0x19c>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68d9      	ldr	r1, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6919      	ldr	r1, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b33      	ldr	r3, [pc, #204]	; (8005bec <HAL_LTDC_Init+0x19c>)
 8005b20:	400b      	ands	r3, r1
 8005b22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6919      	ldr	r1, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6959      	ldr	r1, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b27      	ldr	r3, [pc, #156]	; (8005bec <HAL_LTDC_Init+0x19c>)
 8005b4e:	400b      	ands	r3, r1
 8005b50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6959      	ldr	r1, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0206 	orr.w	r2, r2, #6
 8005bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	f000f800 	.word	0xf000f800

08005bf0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d023      	beq.n	8005c5a <HAL_LTDC_IRQHandler+0x6a>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2204      	movs	r2, #4
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c3a:	f043 0201 	orr.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2204      	movs	r2, #4
 8005c48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f86f 	bl	8005d38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d023      	beq.n	8005cac <HAL_LTDC_IRQHandler+0xbc>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01e      	beq.n	8005cac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0202 	bic.w	r2, r2, #2
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2202      	movs	r2, #2
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c8c:	f043 0202 	orr.w	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f846 	bl	8005d38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01b      	beq.n	8005cee <HAL_LTDC_IRQHandler+0xfe>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d016      	beq.n	8005cee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f00e fe29 	bl	8014940 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_LTDC_IRQHandler+0x140>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2208      	movs	r2, #8
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f80e 	bl	8005d4c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d60:	b5b0      	push	{r4, r5, r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_LTDC_ConfigLayer+0x1a>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e02c      	b.n	8005dd4 <HAL_LTDC_ConfigLayer+0x74>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2134      	movs	r1, #52	; 0x34
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	461d      	mov	r5, r3
 8005da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f849 	bl	8005e4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bdb0      	pop	{r4, r5, r7, pc}

08005ddc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_LTDC_ProgramLineEvent+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e023      	b.n	8005e3c <HAL_LTDC_ProgramLineEvent+0x60>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e14:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40016800 	.word	0x40016800

08005e4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b089      	sub	sp, #36	; 0x24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e68:	4413      	add	r3, r2
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	01db      	lsls	r3, r3, #7
 8005e78:	4413      	add	r3, r2
 8005e7a:	3384      	adds	r3, #132	; 0x84
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	4611      	mov	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	01d2      	lsls	r2, r2, #7
 8005e88:	440a      	add	r2, r1
 8005e8a:	3284      	adds	r2, #132	; 0x84
 8005e8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	0c1b      	lsrs	r3, r3, #16
 8005e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea2:	4413      	add	r3, r2
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	01db      	lsls	r3, r3, #7
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3384      	adds	r3, #132	; 0x84
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eca:	4413      	add	r3, r2
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	4413      	add	r3, r2
 8005edc:	3384      	adds	r3, #132	; 0x84
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	01d2      	lsls	r2, r2, #7
 8005eea:	440a      	add	r2, r1
 8005eec:	3284      	adds	r2, #132	; 0x84
 8005eee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ef2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f02:	4413      	add	r3, r2
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	3384      	adds	r3, #132	; 0x84
 8005f14:	4619      	mov	r1, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	4413      	add	r3, r2
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	4611      	mov	r1, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	01d2      	lsls	r2, r2, #7
 8005f36:	440a      	add	r2, r1
 8005f38:	3284      	adds	r2, #132	; 0x84
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	01db      	lsls	r3, r3, #7
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3384      	adds	r3, #132	; 0x84
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	01db      	lsls	r3, r3, #7
 8005f7c:	4413      	add	r3, r2
 8005f7e:	3384      	adds	r3, #132	; 0x84
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	01db      	lsls	r3, r3, #7
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3384      	adds	r3, #132	; 0x84
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3384      	adds	r3, #132	; 0x84
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	01db      	lsls	r3, r3, #7
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3384      	adds	r3, #132	; 0x84
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	01d2      	lsls	r2, r2, #7
 8005fd6:	440a      	add	r2, r1
 8005fd8:	3284      	adds	r2, #132	; 0x84
 8005fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fde:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	01db      	lsls	r3, r3, #7
 8005fea:	4413      	add	r3, r2
 8005fec:	3384      	adds	r3, #132	; 0x84
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	4413      	add	r3, r2
 8006002:	3384      	adds	r3, #132	; 0x84
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	440b      	add	r3, r1
 8006012:	3384      	adds	r3, #132	; 0x84
 8006014:	4619      	mov	r1, r3
 8006016:	4b58      	ldr	r3, [pc, #352]	; (8006178 <LTDC_SetConfig+0x32c>)
 8006018:	4013      	ands	r3, r2
 800601a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	6809      	ldr	r1, [r1, #0]
 8006028:	4608      	mov	r0, r1
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	01c9      	lsls	r1, r1, #7
 800602e:	4401      	add	r1, r0
 8006030:	3184      	adds	r1, #132	; 0x84
 8006032:	4313      	orrs	r3, r2
 8006034:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	01db      	lsls	r3, r3, #7
 8006040:	4413      	add	r3, r2
 8006042:	3384      	adds	r3, #132	; 0x84
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	4413      	add	r3, r2
 8006052:	3384      	adds	r3, #132	; 0x84
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4413      	add	r3, r2
 8006066:	3384      	adds	r3, #132	; 0x84
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006078:	2304      	movs	r3, #4
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e01b      	b.n	80060b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006086:	2303      	movs	r3, #3
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	e014      	b.n	80060b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d00b      	beq.n	80060ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006098:	2b02      	cmp	r3, #2
 800609a:	d007      	beq.n	80060ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	d102      	bne.n	80060b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060ac:	2302      	movs	r3, #2
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e001      	b.n	80060b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	01db      	lsls	r3, r3, #7
 80060c0:	4413      	add	r3, r2
 80060c2:	3384      	adds	r3, #132	; 0x84
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	4611      	mov	r1, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	01d2      	lsls	r2, r2, #7
 80060d0:	440a      	add	r2, r1
 80060d2:	3284      	adds	r2, #132	; 0x84
 80060d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	041a      	lsls	r2, r3, #16
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6859      	ldr	r1, [r3, #4]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1acb      	subs	r3, r1, r3
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	3303      	adds	r3, #3
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	6809      	ldr	r1, [r1, #0]
 80060fc:	4608      	mov	r0, r1
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	01c9      	lsls	r1, r1, #7
 8006102:	4401      	add	r1, r0
 8006104:	3184      	adds	r1, #132	; 0x84
 8006106:	4313      	orrs	r3, r2
 8006108:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	01db      	lsls	r3, r3, #7
 8006124:	440b      	add	r3, r1
 8006126:	3384      	adds	r3, #132	; 0x84
 8006128:	4619      	mov	r1, r3
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <LTDC_SetConfig+0x330>)
 800612c:	4013      	ands	r3, r2
 800612e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	01db      	lsls	r3, r3, #7
 800613a:	4413      	add	r3, r2
 800613c:	3384      	adds	r3, #132	; 0x84
 800613e:	461a      	mov	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	4413      	add	r3, r2
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	4611      	mov	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	01d2      	lsls	r2, r2, #7
 8006160:	440a      	add	r2, r1
 8006162:	3284      	adds	r2, #132	; 0x84
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	bf00      	nop
 800616c:	3724      	adds	r7, #36	; 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	fffff8f8 	.word	0xfffff8f8
 800617c:	fffff800 	.word	0xfffff800

08006180 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40007000 	.word	0x40007000

080061a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b4:	6413      	str	r3, [r2, #64]	; 0x40
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1d      	ldr	r2, [pc, #116]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061ce:	f7fd fb23 	bl	8003818 <HAL_GetTick>
 80061d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061d4:	e009      	b.n	80061ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061d6:	f7fd fb1f 	bl	8003818 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e4:	d901      	bls.n	80061ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e022      	b.n	8006230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d1ee      	bne.n	80061d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061f8:	4b10      	ldr	r3, [pc, #64]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0f      	ldr	r2, [pc, #60]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006204:	f7fd fb08 	bl	8003818 <HAL_GetTick>
 8006208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800620a:	e009      	b.n	8006220 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800620c:	f7fd fb04 	bl	8003818 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621a:	d901      	bls.n	8006220 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e007      	b.n	8006230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622c:	d1ee      	bne.n	800620c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40023800 	.word	0x40023800
 800623c:	40007000 	.word	0x40007000

08006240 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af02      	add	r7, sp, #8
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006248:	f7fd fae6 	bl	8003818 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e067      	b.n	8006328 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fc fc79 	bl	8002b64 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006272:	f241 3188 	movw	r1, #5000	; 0x1388
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f85e 	bl	8006338 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	3b01      	subs	r3, #1
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	2120      	movs	r1, #32
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f856 	bl	8006354 <QSPI_WaitFlagStateUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d135      	bne.n	800631e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <HAL_QSPI_Init+0xf0>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	0611      	lsls	r1, r2, #24
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68d2      	ldr	r2, [r2, #12]
 80062c6:	4311      	orrs	r1, r2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	69d2      	ldr	r2, [r2, #28]
 80062cc:	4311      	orrs	r1, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6a12      	ldr	r2, [r2, #32]
 80062d2:	4311      	orrs	r1, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	430b      	orrs	r3, r1
 80062da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_QSPI_Init+0xf4>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6912      	ldr	r2, [r2, #16]
 80062ea:	0411      	lsls	r1, r2, #16
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6952      	ldr	r2, [r2, #20]
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6992      	ldr	r2, [r2, #24]
 80062f6:	4311      	orrs	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006326:	7afb      	ldrb	r3, [r7, #11]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	00ffff2f 	.word	0x00ffff2f
 8006334:	ffe0f8fe 	.word	0xffe0f8fe

08006338 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006364:	e01a      	b.n	800639c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d016      	beq.n	800639c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7fd fa53 	bl	8003818 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2204      	movs	r2, #4
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	f043 0201 	orr.w	r2, r3, #1
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e00e      	b.n	80063ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d1d6      	bne.n	8006366 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80063cc:	2300      	movs	r3, #0
 80063ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e291      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8087 	beq.w	80064f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e8:	4b96      	ldr	r3, [pc, #600]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 030c 	and.w	r3, r3, #12
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d00c      	beq.n	800640e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d112      	bne.n	8006426 <HAL_RCC_OscConfig+0x62>
 8006400:	4b90      	ldr	r3, [pc, #576]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640c:	d10b      	bne.n	8006426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640e:	4b8d      	ldr	r3, [pc, #564]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d06c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x130>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d168      	bne.n	80064f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e26b      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d106      	bne.n	800643e <HAL_RCC_OscConfig+0x7a>
 8006430:	4b84      	ldr	r3, [pc, #528]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a83      	ldr	r2, [pc, #524]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e02e      	b.n	800649c <HAL_RCC_OscConfig+0xd8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <HAL_RCC_OscConfig+0x9c>
 8006446:	4b7f      	ldr	r3, [pc, #508]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7e      	ldr	r2, [pc, #504]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800644c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	4b7c      	ldr	r3, [pc, #496]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a7b      	ldr	r2, [pc, #492]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e01d      	b.n	800649c <HAL_RCC_OscConfig+0xd8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006468:	d10c      	bne.n	8006484 <HAL_RCC_OscConfig+0xc0>
 800646a:	4b76      	ldr	r3, [pc, #472]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a75      	ldr	r2, [pc, #468]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	4b73      	ldr	r3, [pc, #460]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a72      	ldr	r2, [pc, #456]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e00b      	b.n	800649c <HAL_RCC_OscConfig+0xd8>
 8006484:	4b6f      	ldr	r3, [pc, #444]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6e      	ldr	r2, [pc, #440]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800648a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a6b      	ldr	r2, [pc, #428]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fd f9b8 	bl	8003818 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ac:	f7fd f9b4 	bl	8003818 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b64      	cmp	r3, #100	; 0x64
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e21f      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	4b61      	ldr	r3, [pc, #388]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0xe8>
 80064ca:	e014      	b.n	80064f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fd f9a4 	bl	8003818 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fd f9a0 	bl	8003818 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e20b      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	4b57      	ldr	r3, [pc, #348]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x110>
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d069      	beq.n	80065d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 030c 	and.w	r3, r3, #12
 8006516:	2b08      	cmp	r3, #8
 8006518:	d11c      	bne.n	8006554 <HAL_RCC_OscConfig+0x190>
 800651a:	4b4a      	ldr	r3, [pc, #296]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d116      	bne.n	8006554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006526:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_RCC_OscConfig+0x17a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d001      	beq.n	800653e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e1df      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653e:	4b41      	ldr	r3, [pc, #260]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	493d      	ldr	r1, [pc, #244]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006552:	e040      	b.n	80065d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d023      	beq.n	80065a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a38      	ldr	r2, [pc, #224]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fd f956 	bl	8003818 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006570:	f7fd f952 	bl	8003818 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e1bd      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b30      	ldr	r3, [pc, #192]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658e:	4b2d      	ldr	r3, [pc, #180]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4929      	ldr	r1, [pc, #164]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]
 80065a2:	e018      	b.n	80065d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065a4:	4b27      	ldr	r3, [pc, #156]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a26      	ldr	r2, [pc, #152]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fd f932 	bl	8003818 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065b8:	f7fd f92e 	bl	8003818 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e199      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ca:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d038      	beq.n	8006654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d019      	beq.n	800661e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ea:	4b16      	ldr	r3, [pc, #88]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fd f90f 	bl	8003818 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fd f90b 	bl	8003818 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e176      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f0      	beq.n	80065fe <HAL_RCC_OscConfig+0x23a>
 800661c:	e01a      	b.n	8006654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006622:	4a08      	ldr	r2, [pc, #32]	; (8006644 <HAL_RCC_OscConfig+0x280>)
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fd f8f5 	bl	8003818 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006632:	f7fd f8f1 	bl	8003818 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d903      	bls.n	8006648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e15c      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
 8006644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006648:	4b91      	ldr	r3, [pc, #580]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800664a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ee      	bne.n	8006632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a4 	beq.w	80067aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006662:	4b8b      	ldr	r3, [pc, #556]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	4b88      	ldr	r3, [pc, #544]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	4a87      	ldr	r2, [pc, #540]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6413      	str	r3, [r2, #64]	; 0x40
 800667a:	4b85      	ldr	r3, [pc, #532]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800668a:	4b82      	ldr	r3, [pc, #520]	; (8006894 <HAL_RCC_OscConfig+0x4d0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d118      	bne.n	80066c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006696:	4b7f      	ldr	r3, [pc, #508]	; (8006894 <HAL_RCC_OscConfig+0x4d0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a7e      	ldr	r2, [pc, #504]	; (8006894 <HAL_RCC_OscConfig+0x4d0>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a2:	f7fd f8b9 	bl	8003818 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066aa:	f7fd f8b5 	bl	8003818 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b64      	cmp	r3, #100	; 0x64
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e120      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066bc:	4b75      	ldr	r3, [pc, #468]	; (8006894 <HAL_RCC_OscConfig+0x4d0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f0      	beq.n	80066aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d106      	bne.n	80066de <HAL_RCC_OscConfig+0x31a>
 80066d0:	4b6f      	ldr	r3, [pc, #444]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a6e      	ldr	r2, [pc, #440]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	e02d      	b.n	800673a <HAL_RCC_OscConfig+0x376>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x33c>
 80066e6:	4b6a      	ldr	r3, [pc, #424]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a69      	ldr	r2, [pc, #420]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	4b67      	ldr	r3, [pc, #412]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	4a66      	ldr	r2, [pc, #408]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6713      	str	r3, [r2, #112]	; 0x70
 80066fe:	e01c      	b.n	800673a <HAL_RCC_OscConfig+0x376>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d10c      	bne.n	8006722 <HAL_RCC_OscConfig+0x35e>
 8006708:	4b61      	ldr	r3, [pc, #388]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a60      	ldr	r2, [pc, #384]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800670e:	f043 0304 	orr.w	r3, r3, #4
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
 8006714:	4b5e      	ldr	r3, [pc, #376]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	4a5d      	ldr	r2, [pc, #372]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	; 0x70
 8006720:	e00b      	b.n	800673a <HAL_RCC_OscConfig+0x376>
 8006722:	4b5b      	ldr	r3, [pc, #364]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a5a      	ldr	r2, [pc, #360]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	4b58      	ldr	r3, [pc, #352]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a57      	ldr	r2, [pc, #348]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006734:	f023 0304 	bic.w	r3, r3, #4
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d015      	beq.n	800676e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006742:	f7fd f869 	bl	8003818 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006748:	e00a      	b.n	8006760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674a:	f7fd f865 	bl	8003818 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e0ce      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006760:	4b4b      	ldr	r3, [pc, #300]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0ee      	beq.n	800674a <HAL_RCC_OscConfig+0x386>
 800676c:	e014      	b.n	8006798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fd f853 	bl	8003818 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006774:	e00a      	b.n	800678c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fd f84f 	bl	8003818 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0b8      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678c:	4b40      	ldr	r3, [pc, #256]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1ee      	bne.n	8006776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800679e:	4b3c      	ldr	r3, [pc, #240]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	4a3b      	ldr	r2, [pc, #236]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80a4 	beq.w	80068fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 030c 	and.w	r3, r3, #12
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d06b      	beq.n	8006898 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d149      	bne.n	800685c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c8:	4b31      	ldr	r3, [pc, #196]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a30      	ldr	r2, [pc, #192]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fd f820 	bl	8003818 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067dc:	f7fd f81c 	bl	8003818 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e087      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ee:	4b28      	ldr	r3, [pc, #160]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69da      	ldr	r2, [r3, #28]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	019b      	lsls	r3, r3, #6
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	3b01      	subs	r3, #1
 8006814:	041b      	lsls	r3, r3, #16
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	061b      	lsls	r3, r3, #24
 800681e:	4313      	orrs	r3, r2
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006826:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800682e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fc fff0 	bl	8003818 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683c:	f7fc ffec 	bl	8003818 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e057      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x478>
 800685a:	e04f      	b.n	80068fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0b      	ldr	r2, [pc, #44]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fc ffd6 	bl	8003818 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006870:	f7fc ffd2 	bl	8003818 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e03d      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006882:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_RCC_OscConfig+0x4cc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x4ac>
 800688e:	e035      	b.n	80068fc <HAL_RCC_OscConfig+0x538>
 8006890:	40023800 	.word	0x40023800
 8006894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006898:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <HAL_RCC_OscConfig+0x544>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d028      	beq.n	80068f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d121      	bne.n	80068f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d11a      	bne.n	80068f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d111      	bne.n	80068f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	3b01      	subs	r3, #1
 80068e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d107      	bne.n	80068f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0d0      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d910      	bls.n	8006954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 020f 	bic.w	r2, r3, #15
 800693a:	4965      	ldr	r1, [pc, #404]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b63      	ldr	r3, [pc, #396]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0b8      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800696c:	4b59      	ldr	r3, [pc, #356]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4a58      	ldr	r2, [pc, #352]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006984:	4b53      	ldr	r3, [pc, #332]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4a52      	ldr	r2, [pc, #328]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800698a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800698e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006990:	4b50      	ldr	r3, [pc, #320]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	494d      	ldr	r1, [pc, #308]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d040      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d115      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e07f      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e073      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3d      	ldr	r3, [pc, #244]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e06b      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4936      	ldr	r1, [pc, #216]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a00:	f7fc ff0a 	bl	8003818 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fc ff06 	bl	8003818 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e053      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d210      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 020f 	bic.w	r2, r3, #15
 8006a46:	4922      	ldr	r1, [pc, #136]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d001      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e032      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a6c:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4916      	ldr	r1, [pc, #88]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	490e      	ldr	r1, [pc, #56]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a9e:	f000 f821 	bl	8006ae4 <HAL_RCC_GetSysClockFreq>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8006ab0:	5cd3      	ldrb	r3, [r2, r3]
 8006ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ab6:	4a09      	ldr	r2, [pc, #36]	; (8006adc <HAL_RCC_ClockConfig+0x1d0>)
 8006ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <HAL_RCC_ClockConfig+0x1d4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc fcf4 	bl	80034ac <HAL_InitTick>

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023c00 	.word	0x40023c00
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	08025d7c 	.word	0x08025d7c
 8006adc:	20000018 	.word	0x20000018
 8006ae0:	2000001c 	.word	0x2000001c

08006ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d007      	beq.n	8006b16 <HAL_RCC_GetSysClockFreq+0x32>
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d008      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x38>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 808d 	bne.w	8006c2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b4b      	ldr	r3, [pc, #300]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b12:	60bb      	str	r3, [r7, #8]
      break;
 8006b14:	e08c      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b16:	4b4b      	ldr	r3, [pc, #300]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b18:	60bb      	str	r3, [r7, #8]
      break;
 8006b1a:	e089      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b1c:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b26:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d023      	beq.n	8006b7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b42      	ldr	r3, [pc, #264]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	f04f 0400 	mov.w	r4, #0
 8006b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	ea03 0501 	and.w	r5, r3, r1
 8006b48:	ea04 0602 	and.w	r6, r4, r2
 8006b4c:	4a3d      	ldr	r2, [pc, #244]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b4e:	fb02 f106 	mul.w	r1, r2, r6
 8006b52:	2200      	movs	r2, #0
 8006b54:	fb02 f205 	mul.w	r2, r2, r5
 8006b58:	440a      	add	r2, r1
 8006b5a:	493a      	ldr	r1, [pc, #232]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b5c:	fba5 0101 	umull	r0, r1, r5, r1
 8006b60:	1853      	adds	r3, r2, r1
 8006b62:	4619      	mov	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f04f 0400 	mov.w	r4, #0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	f7f9 fe33 	bl	80007d8 <__aeabi_uldivmod>
 8006b72:	4603      	mov	r3, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e049      	b.n	8006c0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7a:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	f04f 0400 	mov.w	r4, #0
 8006b84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	ea03 0501 	and.w	r5, r3, r1
 8006b90:	ea04 0602 	and.w	r6, r4, r2
 8006b94:	4629      	mov	r1, r5
 8006b96:	4632      	mov	r2, r6
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	f04f 0400 	mov.w	r4, #0
 8006ba0:	0154      	lsls	r4, r2, #5
 8006ba2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ba6:	014b      	lsls	r3, r1, #5
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4622      	mov	r2, r4
 8006bac:	1b49      	subs	r1, r1, r5
 8006bae:	eb62 0206 	sbc.w	r2, r2, r6
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	0194      	lsls	r4, r2, #6
 8006bbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bc0:	018b      	lsls	r3, r1, #6
 8006bc2:	1a5b      	subs	r3, r3, r1
 8006bc4:	eb64 0402 	sbc.w	r4, r4, r2
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	00e2      	lsls	r2, r4, #3
 8006bd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bd6:	00d9      	lsls	r1, r3, #3
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4614      	mov	r4, r2
 8006bdc:	195b      	adds	r3, r3, r5
 8006bde:	eb44 0406 	adc.w	r4, r4, r6
 8006be2:	f04f 0100 	mov.w	r1, #0
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	02a2      	lsls	r2, r4, #10
 8006bec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006bf0:	0299      	lsls	r1, r3, #10
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f04f 0400 	mov.w	r4, #0
 8006c00:	461a      	mov	r2, r3
 8006c02:	4623      	mov	r3, r4
 8006c04:	f7f9 fde8 	bl	80007d8 <__aeabi_uldivmod>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	3301      	adds	r3, #1
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	60bb      	str	r3, [r7, #8]
      break;
 8006c28:	e002      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c2c:	60bb      	str	r3, [r7, #8]
      break;
 8006c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c30:	68bb      	ldr	r3, [r7, #8]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	00f42400 	.word	0x00f42400
 8006c44:	017d7840 	.word	0x017d7840

08006c48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000018 	.word	0x20000018

08006c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c64:	f7ff fff0 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c68:	4601      	mov	r1, r0
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0a9b      	lsrs	r3, r3, #10
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4a03      	ldr	r2, [pc, #12]	; (8006c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c76:	5cd3      	ldrb	r3, [r2, r3]
 8006c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40023800 	.word	0x40023800
 8006c84:	08025d8c 	.word	0x08025d8c

08006c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c8c:	f7ff ffdc 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c90:	4601      	mov	r1, r0
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0b5b      	lsrs	r3, r3, #13
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4a03      	ldr	r2, [pc, #12]	; (8006cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	08025d8c 	.word	0x08025d8c

08006cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	220f      	movs	r2, #15
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0203 	and.w	r2, r3, #3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	08db      	lsrs	r3, r3, #3
 8006cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_RCC_GetClockConfig+0x60>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40023c00 	.word	0x40023c00

08006d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d012      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d3c:	4b69      	ldr	r3, [pc, #420]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a68      	ldr	r2, [pc, #416]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d46:	6093      	str	r3, [r2, #8]
 8006d48:	4b66      	ldr	r3, [pc, #408]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	4964      	ldr	r1, [pc, #400]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d6e:	4b5d      	ldr	r3, [pc, #372]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	4959      	ldr	r1, [pc, #356]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006daa:	4b4e      	ldr	r3, [pc, #312]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	494a      	ldr	r1, [pc, #296]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc8:	d101      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 808b 	beq.w	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006df8:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	4a39      	ldr	r2, [pc, #228]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e02:	6413      	str	r3, [r2, #64]	; 0x40
 8006e04:	4b37      	ldr	r3, [pc, #220]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e10:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a34      	ldr	r2, [pc, #208]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1c:	f7fc fcfc 	bl	8003818 <HAL_GetTick>
 8006e20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e24:	f7fc fcf8 	bl	8003818 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b64      	cmp	r3, #100	; 0x64
 8006e30:	d901      	bls.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e355      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f0      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e42:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d035      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d02e      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e60:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e76:	4b1b      	ldr	r3, [pc, #108]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e82:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d114      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fc fcc0 	bl	8003818 <HAL_GetTick>
 8006e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fc fcbc 	bl	8003818 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e317      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eca:	d111      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006eda:	400b      	ands	r3, r1
 8006edc:	4901      	ldr	r1, [pc, #4]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	608b      	str	r3, [r1, #8]
 8006ee2:	e00b      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40007000 	.word	0x40007000
 8006eec:	0ffffcff 	.word	0x0ffffcff
 8006ef0:	4bb0      	ldr	r3, [pc, #704]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4aaf      	ldr	r2, [pc, #700]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006efa:	6093      	str	r3, [r2, #8]
 8006efc:	4bad      	ldr	r3, [pc, #692]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f08:	49aa      	ldr	r1, [pc, #680]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d010      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f1a:	4ba6      	ldr	r3, [pc, #664]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f20:	4aa4      	ldr	r2, [pc, #656]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f2a:	4ba2      	ldr	r3, [pc, #648]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	499f      	ldr	r1, [pc, #636]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f48:	4b9a      	ldr	r3, [pc, #616]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f56:	4997      	ldr	r1, [pc, #604]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f6a:	4b92      	ldr	r3, [pc, #584]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f78:	498e      	ldr	r1, [pc, #568]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f8c:	4b89      	ldr	r3, [pc, #548]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9a:	4986      	ldr	r1, [pc, #536]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fae:	4b81      	ldr	r3, [pc, #516]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	497d      	ldr	r1, [pc, #500]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd0:	4b78      	ldr	r3, [pc, #480]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd6:	f023 0203 	bic.w	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	4975      	ldr	r1, [pc, #468]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ff2:	4b70      	ldr	r3, [pc, #448]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff8:	f023 020c 	bic.w	r2, r3, #12
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007000:	496c      	ldr	r1, [pc, #432]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007014:	4b67      	ldr	r3, [pc, #412]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007022:	4964      	ldr	r1, [pc, #400]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007036:	4b5f      	ldr	r3, [pc, #380]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	495b      	ldr	r1, [pc, #364]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007058:	4b56      	ldr	r3, [pc, #344]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	4953      	ldr	r1, [pc, #332]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800707a:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	494a      	ldr	r1, [pc, #296]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800709c:	4b45      	ldr	r3, [pc, #276]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	4942      	ldr	r1, [pc, #264]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070be:	4b3d      	ldr	r3, [pc, #244]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070cc:	4939      	ldr	r1, [pc, #228]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e0:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ee:	4931      	ldr	r1, [pc, #196]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007102:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007108:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007110:	4928      	ldr	r1, [pc, #160]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007120:	d101      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007132:	2301      	movs	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007142:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007150:	4918      	ldr	r1, [pc, #96]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007174:	490f      	ldr	r1, [pc, #60]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d005      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800718a:	f040 80d8 	bne.w	800733e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007194:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719a:	f7fc fb3d 	bl	8003818 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071a0:	e00a      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071a2:	f7fc fb39 	bl	8003818 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	; 0x64
 80071ae:	d903      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e196      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80071b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071b8:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1ee      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d021      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11d      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071d8:	4b64      	ldr	r3, [pc, #400]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071de:	0c1b      	lsrs	r3, r3, #16
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071e6:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ec:	0e1b      	lsrs	r3, r3, #24
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	019a      	lsls	r2, r3, #6
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	431a      	orrs	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	061b      	lsls	r3, r3, #24
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	071b      	lsls	r3, r3, #28
 800720c:	4957      	ldr	r1, [pc, #348]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02e      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723e:	d129      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007240:	4b4a      	ldr	r3, [pc, #296]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007254:	0f1b      	lsrs	r3, r3, #28
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	019a      	lsls	r2, r3, #6
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	061b      	lsls	r3, r3, #24
 800726e:	431a      	orrs	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	071b      	lsls	r3, r3, #28
 8007274:	493d      	ldr	r1, [pc, #244]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800727c:	4b3b      	ldr	r3, [pc, #236]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800727e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007282:	f023 021f 	bic.w	r2, r3, #31
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	3b01      	subs	r3, #1
 800728c:	4937      	ldr	r1, [pc, #220]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01d      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072a0:	4b32      	ldr	r3, [pc, #200]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a6:	0e1b      	lsrs	r3, r3, #24
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072ae:	4b2f      	ldr	r3, [pc, #188]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b4:	0f1b      	lsrs	r3, r3, #28
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	019a      	lsls	r2, r3, #6
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	431a      	orrs	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	431a      	orrs	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	071b      	lsls	r3, r3, #28
 80072d4:	4925      	ldr	r1, [pc, #148]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d011      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	019a      	lsls	r2, r3, #6
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	071b      	lsls	r3, r3, #28
 8007304:	4919      	ldr	r1, [pc, #100]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800730c:	4b17      	ldr	r3, [pc, #92]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a16      	ldr	r2, [pc, #88]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007318:	f7fc fa7e 	bl	8003818 <HAL_GetTick>
 800731c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007320:	f7fc fa7a 	bl	8003818 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b64      	cmp	r3, #100	; 0x64
 800732c:	d901      	bls.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0d7      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 80cd 	bne.w	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a08      	ldr	r2, [pc, #32]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800734c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007352:	f7fc fa61 	bl	8003818 <HAL_GetTick>
 8007356:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007358:	e00a      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800735a:	f7fc fa5d 	bl	8003818 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b64      	cmp	r3, #100	; 0x64
 8007366:	d903      	bls.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e0ba      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800736c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007370:	4b5e      	ldr	r3, [pc, #376]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800737c:	d0ed      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800739a:	2b00      	cmp	r3, #0
 800739c:	d02e      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12a      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073a6:	4b51      	ldr	r3, [pc, #324]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073b4:	4b4d      	ldr	r3, [pc, #308]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ba:	0f1b      	lsrs	r3, r3, #28
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	019a      	lsls	r2, r3, #6
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	061b      	lsls	r3, r3, #24
 80073d4:	431a      	orrs	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	071b      	lsls	r3, r3, #28
 80073da:	4944      	ldr	r1, [pc, #272]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80073e2:	4b42      	ldr	r3, [pc, #264]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	493d      	ldr	r1, [pc, #244]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d022      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007410:	d11d      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007412:	4b36      	ldr	r3, [pc, #216]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007420:	4b32      	ldr	r3, [pc, #200]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	0f1b      	lsrs	r3, r3, #28
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	019a      	lsls	r2, r3, #6
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	431a      	orrs	r2, r3
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	061b      	lsls	r3, r3, #24
 8007440:	431a      	orrs	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	071b      	lsls	r3, r3, #28
 8007446:	4929      	ldr	r1, [pc, #164]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d028      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800745a:	4b24      	ldr	r3, [pc, #144]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800745c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007460:	0e1b      	lsrs	r3, r3, #24
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	019a      	lsls	r2, r3, #6
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	431a      	orrs	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	071b      	lsls	r3, r3, #28
 800748e:	4917      	ldr	r1, [pc, #92]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	4911      	ldr	r1, [pc, #68]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b8:	f7fc f9ae 	bl	8003818 <HAL_GetTick>
 80074bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074c0:	f7fc f9aa 	bl	8003818 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b64      	cmp	r3, #100	; 0x64
 80074cc:	d901      	bls.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e007      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074de:	d1ef      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800750e:	f040 8086 	bne.w	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007512:	4b8d      	ldr	r3, [pc, #564]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007518:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007520:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007528:	d03e      	beq.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800752a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800752e:	d073      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d000      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007534:	e074      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007536:	4b84      	ldr	r3, [pc, #528]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007542:	4b81      	ldr	r3, [pc, #516]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800754a:	4a80      	ldr	r2, [pc, #512]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	e007      	b.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007554:	4b7c      	ldr	r3, [pc, #496]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800755c:	4a7c      	ldr	r2, [pc, #496]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007564:	4b78      	ldr	r3, [pc, #480]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	0e1b      	lsrs	r3, r3, #24
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007572:	4b75      	ldr	r3, [pc, #468]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007578:	099b      	lsrs	r3, r3, #6
 800757a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	fb02 f203 	mul.w	r2, r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800758c:	4b6e      	ldr	r3, [pc, #440]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800758e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
        break;
 80075a6:	e03b      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075a8:	4b67      	ldr	r3, [pc, #412]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d108      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075b4:	4b64      	ldr	r3, [pc, #400]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075bc:	4a63      	ldr	r2, [pc, #396]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	e007      	b.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075c6:	4b60      	ldr	r3, [pc, #384]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ce:	4a60      	ldr	r2, [pc, #384]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80075d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80075d6:	4b5c      	ldr	r3, [pc, #368]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075dc:	0e1b      	lsrs	r3, r3, #24
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80075e4:	4b58      	ldr	r3, [pc, #352]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	099b      	lsrs	r3, r3, #6
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	fb02 f203 	mul.w	r2, r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80075fe:	4b52      	ldr	r3, [pc, #328]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]
        break;
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007618:	4b4e      	ldr	r3, [pc, #312]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800761a:	617b      	str	r3, [r7, #20]
        break;
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800761e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007626:	f040 8086 	bne.w	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800762a:	4b47      	ldr	r3, [pc, #284]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800762c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007630:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007638:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007640:	d03e      	beq.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007646:	d073      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d000      	beq.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800764c:	e074      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800764e:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d108      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800765a:	4b3b      	ldr	r3, [pc, #236]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007662:	4a3a      	ldr	r2, [pc, #232]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007664:	fbb2 f3f3 	udiv	r3, r2, r3
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	e007      	b.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800766c:	4b36      	ldr	r3, [pc, #216]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007674:	4a36      	ldr	r2, [pc, #216]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800767e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007682:	0e1b      	lsrs	r3, r3, #24
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	099b      	lsrs	r3, r3, #6
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	fb02 f203 	mul.w	r2, r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80076a4:	4b28      	ldr	r3, [pc, #160]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	3301      	adds	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]
        break;
 80076be:	e03b      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d4:	4a1d      	ldr	r2, [pc, #116]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	e007      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076de:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e6:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80076ee:	4b16      	ldr	r3, [pc, #88]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f4:	0e1b      	lsrs	r3, r3, #24
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007702:	099b      	lsrs	r3, r3, #6
 8007704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	fb02 f203 	mul.w	r2, r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]
        break;
 800772e:	e003      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007732:	617b      	str	r3, [r7, #20]
        break;
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007736:	bf00      	nop

  return frequency;
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	00f42400 	.word	0x00f42400
 8007750:	017d7840 	.word	0x017d7840
 8007754:	00bb8000 	.word	0x00bb8000

08007758 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e06b      	b.n	8007842 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7f5b      	ldrb	r3, [r3, #29]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fb fa82 	bl	8002c84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	22ca      	movs	r2, #202	; 0xca
 800778c:	625a      	str	r2, [r3, #36]	; 0x24
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2253      	movs	r2, #83	; 0x53
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb00 	bl	8007d9c <RTC_EnterInitMode>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ff      	movs	r2, #255	; 0xff
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e046      	b.n	8007842 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6899      	ldr	r1, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b23      	ldr	r3, [pc, #140]	; (800784c <HAL_RTC_Init+0xf4>)
 80077c0:	400b      	ands	r3, r1
 80077c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6899      	ldr	r1, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68d2      	ldr	r2, [r2, #12]
 80077ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6919      	ldr	r1, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	041a      	lsls	r2, r3, #16
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0208 	bic.w	r2, r2, #8
 800781e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	22ff      	movs	r2, #255	; 0xff
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	ff8fffbf 	.word	0xff8fffbf

08007850 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	7f1b      	ldrb	r3, [r3, #28]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_RTC_SetTime+0x1c>
 8007868:	2302      	movs	r3, #2
 800786a:	e0a8      	b.n	80079be <HAL_RTC_SetTime+0x16e>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2202      	movs	r2, #2
 8007876:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d126      	bne.n	80078cc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 faac 	bl	8007df4 <RTC_ByteToBcd2>
 800789c:	4603      	mov	r3, r0
 800789e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 faa5 	bl	8007df4 <RTC_ByteToBcd2>
 80078aa:	4603      	mov	r3, r0
 80078ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	789b      	ldrb	r3, [r3, #2]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fa9d 	bl	8007df4 <RTC_ByteToBcd2>
 80078ba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e018      	b.n	80078fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078ec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80078f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	7b1b      	ldrb	r3, [r3, #12]
 80078f8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	22ca      	movs	r2, #202	; 0xca
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2253      	movs	r2, #83	; 0x53
 800790c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fa44 	bl	8007d9c <RTC_EnterInitMode>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	22ff      	movs	r2, #255	; 0xff
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2204      	movs	r2, #4
 8007926:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e045      	b.n	80079be <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	6979      	ldr	r1, [r7, #20]
 8007938:	4b23      	ldr	r3, [pc, #140]	; (80079c8 <HAL_RTC_SetTime+0x178>)
 800793a:	400b      	ands	r3, r1
 800793c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800794c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6899      	ldr	r1, [r3, #8]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007974:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d111      	bne.n	80079a8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f9e1 	bl	8007d4c <HAL_RTC_WaitForSynchro>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2204      	movs	r2, #4
 800799c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e00a      	b.n	80079be <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	22ff      	movs	r2, #255	; 0xff
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80079bc:	2300      	movs	r3, #0
  }
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}
 80079c6:	bf00      	nop
 80079c8:	007f7f7f 	.word	0x007f7f7f

080079cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	7f1b      	ldrb	r3, [r3, #28]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_RTC_SetDate+0x1c>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e092      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2202      	movs	r2, #2
 80079f2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <HAL_RTC_SetDate+0x4c>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	f003 0310 	and.w	r3, r3, #16
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d008      	beq.n	8007a18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	330a      	adds	r3, #10
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11c      	bne.n	8007a58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f9e6 	bl	8007df4 <RTC_ByteToBcd2>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 f9df 	bl	8007df4 <RTC_ByteToBcd2>
 8007a36:	4603      	mov	r3, r0
 8007a38:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a3a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	789b      	ldrb	r3, [r3, #2]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f9d7 	bl	8007df4 <RTC_ByteToBcd2>
 8007a46:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a48:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e00e      	b.n	8007a76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	78db      	ldrb	r3, [r3, #3]
 8007a5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a64:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007a6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	22ca      	movs	r2, #202	; 0xca
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2253      	movs	r2, #83	; 0x53
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f988 	bl	8007d9c <RTC_EnterInitMode>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	22ff      	movs	r2, #255	; 0xff
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e031      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	6979      	ldr	r1, [r7, #20]
 8007ab0:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <HAL_RTC_SetDate+0x14c>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d111      	bne.n	8007af8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f939 	bl	8007d4c <HAL_RTC_WaitForSynchro>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2204      	movs	r2, #4
 8007aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e00a      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd90      	pop	{r4, r7, pc}
 8007b16:	bf00      	nop
 8007b18:	00ffff3f 	.word	0x00ffff3f

08007b1c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	7f1b      	ldrb	r3, [r3, #28]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_RTC_SetAlarm+0x24>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e101      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d137      	bne.n	8007bc2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f942 	bl	8007df4 <RTC_ByteToBcd2>
 8007b70:	4603      	mov	r3, r0
 8007b72:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f93b 	bl	8007df4 <RTC_ByteToBcd2>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b82:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	789b      	ldrb	r3, [r3, #2]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 f933 	bl	8007df4 <RTC_ByteToBcd2>
 8007b8e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7b1b      	ldrb	r3, [r3, #12]
 8007b98:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b9a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f925 	bl	8007df4 <RTC_ByteToBcd2>
 8007baa:	4603      	mov	r3, r0
 8007bac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e023      	b.n	8007c0a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007be2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007be8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	7b1b      	ldrb	r3, [r3, #12]
 8007bee:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007bf0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bf8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	22ca      	movs	r2, #202	; 0xca
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2253      	movs	r2, #83	; 0x53
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2e:	d13f      	bne.n	8007cb0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c3e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c50:	f7fb fde2 	bl	8003818 <HAL_GetTick>
 8007c54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c56:	e013      	b.n	8007c80 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c58:	f7fb fdde 	bl	8003818 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c66:	d90b      	bls.n	8007c80 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2203      	movs	r2, #3
 8007c74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e061      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0e4      	beq.n	8007c58 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	e03e      	b.n	8007d2e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cbe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fb fda2 	bl	8003818 <HAL_GetTick>
 8007cd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007cd6:	e013      	b.n	8007d00 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cd8:	f7fb fd9e 	bl	8003818 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce6:	d90b      	bls.n	8007d00 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	22ff      	movs	r2, #255	; 0xff
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e021      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0e4      	beq.n	8007cd8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	22ff      	movs	r2, #255	; 0xff
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3724      	adds	r7, #36	; 0x24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd90      	pop	{r4, r7, pc}

08007d4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d68:	f7fb fd56 	bl	8003818 <HAL_GetTick>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d6e:	e009      	b.n	8007d84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d70:	f7fb fd52 	bl	8003818 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7e:	d901      	bls.n	8007d84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e007      	b.n	8007d94 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0ee      	beq.n	8007d70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d119      	bne.n	8007dea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dc0:	f7fb fd2a 	bl	8003818 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dc6:	e009      	b.n	8007ddc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dc8:	f7fb fd26 	bl	8003818 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd6:	d901      	bls.n	8007ddc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e007      	b.n	8007dec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ee      	beq.n	8007dc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e02:	e005      	b.n	8007e10 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	3b0a      	subs	r3, #10
 8007e0e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	d8f6      	bhi.n	8007e04 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	7f1b      	ldrb	r3, [r3, #28]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_RTCEx_SetTimeStamp+0x1c>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e03e      	b.n	8007eca <HAL_RTCEx_SetTimeStamp+0x9a>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2202      	movs	r2, #2
 8007e56:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	22ca      	movs	r2, #202	; 0xca
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2253      	movs	r2, #83	; 0x53
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0206 	bic.w	r2, r2, #6
 8007e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	22ff      	movs	r2, #255	; 0xff
 8007eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	fffff7f7 	.word	0xfffff7f7

08007edc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e149      	b.n	800818e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7fb fa62 	bl	80033d8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f94f 	bl	80081c0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d007      	beq.n	8007f3a <HAL_SAI_Init+0x5e>
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d302      	bcc.n	8007f34 <HAL_SAI_Init+0x58>
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d006      	beq.n	8007f40 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007f32:	e008      	b.n	8007f46 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61fb      	str	r3, [r7, #28]
      break;
 8007f38:	e005      	b.n	8007f46 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	61fb      	str	r3, [r7, #28]
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f40:	2320      	movs	r3, #32
 8007f42:	61fb      	str	r3, [r7, #28]
      break;
 8007f44:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d81d      	bhi.n	8007f8a <HAL_SAI_Init+0xae>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <HAL_SAI_Init+0x78>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f6b 	.word	0x08007f6b
 8007f5c:	08007f73 	.word	0x08007f73
 8007f60:	08007f7b 	.word	0x08007f7b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
      }
      break;
 8007f68:	e010      	b.n	8007f8c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f6e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007f70:	e00c      	b.n	8007f8c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f76:	617b      	str	r3, [r7, #20]
      }
      break;
 8007f78:	e008      	b.n	8007f8c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f7e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007f88:	e000      	b.n	8007f8c <HAL_SAI_Init+0xb0>
  default:
    break;
 8007f8a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a81      	ldr	r2, [pc, #516]	; (8008198 <HAL_SAI_Init+0x2bc>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_SAI_Init+0xc4>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a80      	ldr	r2, [pc, #512]	; (800819c <HAL_SAI_Init+0x2c0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d103      	bne.n	8007fa8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007fa0:	4a7f      	ldr	r2, [pc, #508]	; (80081a0 <HAL_SAI_Init+0x2c4>)
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e002      	b.n	8007fae <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007fa8:	4a7e      	ldr	r2, [pc, #504]	; (80081a4 <HAL_SAI_Init+0x2c8>)
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d043      	beq.n	800803e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a76      	ldr	r2, [pc, #472]	; (8008198 <HAL_SAI_Init+0x2bc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_SAI_Init+0xf2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a74      	ldr	r2, [pc, #464]	; (800819c <HAL_SAI_Init+0x2c0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d104      	bne.n	8007fd8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007fce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007fd2:	f7ff fa8d 	bl	80074f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fd6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a72      	ldr	r2, [pc, #456]	; (80081a8 <HAL_SAI_Init+0x2cc>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_SAI_Init+0x110>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a71      	ldr	r2, [pc, #452]	; (80081ac <HAL_SAI_Init+0x2d0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d104      	bne.n	8007ff6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007fec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007ff0:	f7ff fa7e 	bl	80074f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ff4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	025b      	lsls	r3, r3, #9
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a67      	ldr	r2, [pc, #412]	; (80081b0 <HAL_SAI_Init+0x2d4>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	08da      	lsrs	r2, r3, #3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	4b64      	ldr	r3, [pc, #400]	; (80081b0 <HAL_SAI_Init+0x2d4>)
 8008020:	fba3 2301 	umull	r2, r3, r3, r1
 8008024:	08da      	lsrs	r2, r3, #3
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	1aca      	subs	r2, r1, r3
 8008030:	2a08      	cmp	r2, #8
 8008032:	d904      	bls.n	800803e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_SAI_Init+0x172>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d109      	bne.n	8008062 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_SAI_Init+0x17e>
 8008056:	2300      	movs	r3, #0
 8008058:	e001      	b.n	800805e <HAL_SAI_Init+0x182>
 800805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e008      	b.n	8008074 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d102      	bne.n	8008070 <HAL_SAI_Init+0x194>
 800806a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800806e:	e000      	b.n	8008072 <HAL_SAI_Init+0x196>
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6819      	ldr	r1, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b4d      	ldr	r3, [pc, #308]	; (80081b4 <HAL_SAI_Init+0x2d8>)
 8008080:	400b      	ands	r3, r1
 8008082:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008098:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	431a      	orrs	r2, r3
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80080ac:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080b8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	051b      	lsls	r3, r3, #20
 80080c0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6859      	ldr	r1, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <HAL_SAI_Init+0x2dc>)
 80080d6:	400b      	ands	r3, r1
 80080d8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6859      	ldr	r1, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6899      	ldr	r1, [r3, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b2e      	ldr	r3, [pc, #184]	; (80081bc <HAL_SAI_Init+0x2e0>)
 8008104:	400b      	ands	r3, r1
 8008106:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6899      	ldr	r1, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008118:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800811e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008124:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812a:	3b01      	subs	r3, #1
 800812c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800812e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68d9      	ldr	r1, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008146:	400b      	ands	r3, r1
 8008148:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68d9      	ldr	r1, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008158:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008166:	3b01      	subs	r3, #1
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40015804 	.word	0x40015804
 800819c:	40015824 	.word	0x40015824
 80081a0:	40015800 	.word	0x40015800
 80081a4:	40015c00 	.word	0x40015c00
 80081a8:	40015c04 	.word	0x40015c04
 80081ac:	40015c24 	.word	0x40015c24
 80081b0:	cccccccd 	.word	0xcccccccd
 80081b4:	ff05c010 	.word	0xff05c010
 80081b8:	ffff1ff0 	.word	0xffff1ff0
 80081bc:	fff88000 	.word	0xfff88000

080081c0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081c0:	b490      	push	{r4, r7}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80081c8:	4b16      	ldr	r3, [pc, #88]	; (8008224 <SAI_Disable+0x64>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a16      	ldr	r2, [pc, #88]	; (8008228 <SAI_Disable+0x68>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	0b1b      	lsrs	r3, r3, #12
 80081d4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081e8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80081ea:	4623      	mov	r3, r4
 80081ec:	1e5c      	subs	r4, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	73fb      	strb	r3, [r7, #15]
      break;
 8008206:	e006      	b.n	8008216 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e9      	bne.n	80081ea <SAI_Disable+0x2a>

  return status;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bc90      	pop	{r4, r7}
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000018 	.word	0x20000018
 8008228:	95cbec1b 	.word	0x95cbec1b

0800822c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e022      	b.n	8008284 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d105      	bne.n	8008256 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fa fd31 	bl	8002cb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2203      	movs	r2, #3
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f814 	bl	800828c <HAL_SD_InitCard>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e00a      	b.n	8008284 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800828c:	b5b0      	push	{r4, r5, r7, lr}
 800828e:	b08e      	sub	sp, #56	; 0x38
 8008290:	af04      	add	r7, sp, #16
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008294:	2300      	movs	r3, #0
 8008296:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80082a8:	2376      	movs	r3, #118	; 0x76
 80082aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681d      	ldr	r5, [r3, #0]
 80082b0:	466c      	mov	r4, sp
 80082b2:	f107 0314 	add.w	r3, r7, #20
 80082b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082c4:	4628      	mov	r0, r5
 80082c6:	f002 ff51 	bl	800b16c <SDMMC_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e03b      	b.n	8008354 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082ea:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 ff74 	bl	800b1de <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008304:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fde6 	bl	8008ed8 <SD_PowerON>
 800830c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e013      	b.n	8008354 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fd05 	bl	8008d3c <SD_InitCard>
 8008332:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3728      	adds	r7, #40	; 0x28
 8008358:	46bd      	mov	sp, r7
 800835a:	bdb0      	pop	{r4, r5, r7, pc}

0800835c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08c      	sub	sp, #48	; 0x30
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d107      	bne.n	8008384 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e0cc      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	f040 80c5 	bne.w	800851c <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	441a      	add	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d907      	bls.n	80083b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0b3      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2203      	movs	r2, #3
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80083d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	4a53      	ldr	r2, [pc, #332]	; (8008528 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80083dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	4a52      	ldr	r2, [pc, #328]	; (800852c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80083e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	2200      	movs	r2, #0
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3380      	adds	r3, #128	; 0x80
 80083f8:	4619      	mov	r1, r3
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	025b      	lsls	r3, r3, #9
 8008400:	089b      	lsrs	r3, r3, #2
 8008402:	f7fc fcb7 	bl	8004d74 <HAL_DMA_Start_IT>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800841a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a43      	ldr	r2, [pc, #268]	; (8008530 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e070      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0208 	orr.w	r2, r2, #8
 800844a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008450:	2b01      	cmp	r3, #1
 8008452:	d002      	beq.n	800845a <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	025b      	lsls	r3, r3, #9
 8008458:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008462:	4618      	mov	r0, r3
 8008464:	f002 ff4e 	bl	800b304 <SDMMC_CmdBlockLength>
 8008468:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00f      	beq.n	8008490 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2e      	ldr	r2, [pc, #184]	; (8008530 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	431a      	orrs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e046      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	025b      	lsls	r3, r3, #9
 800849a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800849c:	2390      	movs	r3, #144	; 0x90
 800849e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084a0:	2302      	movs	r3, #2
 80084a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f107 0210 	add.w	r2, r7, #16
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 fef8 	bl	800b2ac <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d90a      	bls.n	80084d8 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2282      	movs	r2, #130	; 0x82
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ce:	4618      	mov	r0, r3
 80084d0:	f002 ff5c 	bl	800b38c <SDMMC_CmdReadMultiBlock>
 80084d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084d6:	e009      	b.n	80084ec <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2281      	movs	r2, #129	; 0x81
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e4:	4618      	mov	r0, r3
 80084e6:	f002 ff2f 	bl	800b348 <SDMMC_CmdReadSingleBlock>
 80084ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	431a      	orrs	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e002      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	e000      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800851c:	2302      	movs	r3, #2
  }
}
 800851e:	4618      	mov	r0, r3
 8008520:	3730      	adds	r7, #48	; 0x30
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	08008c27 	.word	0x08008c27
 800852c:	08008c99 	.word	0x08008c99
 8008530:	004005ff 	.word	0x004005ff

08008534 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	; 0x30
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e0cf      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 80c8 	bne.w	80086fa <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857a:	429a      	cmp	r2, r3
 800857c:	d907      	bls.n	800858e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0b6      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2203      	movs	r2, #3
 8008592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 021a 	orr.w	r2, r2, #26
 80085ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	4a54      	ldr	r2, [pc, #336]	; (8008704 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80085b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ba:	4a53      	ldr	r2, [pc, #332]	; (8008708 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80085bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c2:	2200      	movs	r2, #0
 80085c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d002      	beq.n	80085d4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	025b      	lsls	r3, r3, #9
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 fe91 	bl	800b304 <SDMMC_CmdBlockLength>
 80085e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00f      	beq.n	800860a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a47      	ldr	r2, [pc, #284]	; (800870c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	431a      	orrs	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e078      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d90a      	bls.n	8008626 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	22a0      	movs	r2, #160	; 0xa0
 8008614:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800861c:	4618      	mov	r0, r3
 800861e:	f002 fef9 	bl	800b414 <SDMMC_CmdWriteMultiBlock>
 8008622:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008624:	e009      	b.n	800863a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2290      	movs	r2, #144	; 0x90
 800862a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008632:	4618      	mov	r0, r3
 8008634:	f002 fecc 	bl	800b3d0 <SDMMC_CmdWriteSingleBlock>
 8008638:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d012      	beq.n	8008666 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a31      	ldr	r2, [pc, #196]	; (800870c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	431a      	orrs	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e04a      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f042 0208 	orr.w	r2, r2, #8
 8008674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3380      	adds	r3, #128	; 0x80
 8008682:	461a      	mov	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	025b      	lsls	r3, r3, #9
 8008688:	089b      	lsrs	r3, r3, #2
 800868a:	f7fc fb73 	bl	8004d74 <HAL_DMA_Start_IT>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01a      	beq.n	80086ca <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 021a 	bic.w	r2, r2, #26
 80086a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e018      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295
 80086ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	025b      	lsls	r3, r3, #9
 80086d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086d6:	2390      	movs	r3, #144	; 0x90
 80086d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80086da:	2300      	movs	r3, #0
 80086dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086de:	2300      	movs	r3, #0
 80086e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f107 0210 	add.w	r2, r7, #16
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 fddb 	bl	800b2ac <SDMMC_ConfigData>

      return HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e000      	b.n	80086fc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80086fa:	2302      	movs	r3, #2
  }
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3730      	adds	r7, #48	; 0x30
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	08008bfd 	.word	0x08008bfd
 8008708:	08008c99 	.word	0x08008c99
 800870c:	004005ff 	.word	0x004005ff

08008710 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008732:	0f9b      	lsrs	r3, r3, #30
 8008734:	b2da      	uxtb	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800873e:	0e9b      	lsrs	r3, r3, #26
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	b2da      	uxtb	r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	0e1b      	lsrs	r3, r3, #24
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	b2da      	uxtb	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	b2da      	uxtb	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008784:	0d1b      	lsrs	r3, r3, #20
 8008786:	b29a      	uxth	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 030f 	and.w	r3, r3, #15
 8008798:	b2da      	uxtb	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a2:	0bdb      	lsrs	r3, r3, #15
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b4:	0b9b      	lsrs	r3, r3, #14
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c6:	0b5b      	lsrs	r3, r3, #13
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d8:	0b1b      	lsrs	r3, r3, #12
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2200      	movs	r2, #0
 80087ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d163      	bne.n	80088bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087fe:	4013      	ands	r3, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008804:	0f92      	lsrs	r2, r2, #30
 8008806:	431a      	orrs	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008810:	0edb      	lsrs	r3, r3, #27
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	b2da      	uxtb	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	b2da      	uxtb	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008834:	0d5b      	lsrs	r3, r3, #21
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	b2da      	uxtb	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008846:	0c9b      	lsrs	r3, r3, #18
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	b2da      	uxtb	r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008858:	0bdb      	lsrs	r3, r3, #15
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	b2da      	uxtb	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	7e1b      	ldrb	r3, [r3, #24]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	3302      	adds	r3, #2
 800887c:	2201      	movs	r2, #1
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008886:	fb02 f203 	mul.w	r2, r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	7a1b      	ldrb	r3, [r3, #8]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	2201      	movs	r2, #1
 800889a:	409a      	lsls	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80088a8:	0a52      	lsrs	r2, r2, #9
 80088aa:	fb02 f203 	mul.w	r2, r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b8:	661a      	str	r2, [r3, #96]	; 0x60
 80088ba:	e031      	b.n	8008920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d11d      	bne.n	8008900 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d2:	0c1b      	lsrs	r3, r3, #16
 80088d4:	431a      	orrs	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	3301      	adds	r3, #1
 80088e0:	029a      	lsls	r2, r3, #10
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
 80088fe:	e00f      	b.n	8008920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a58      	ldr	r2, [pc, #352]	; (8008a68 <HAL_SD_GetCardCSD+0x344>)
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e09d      	b.n	8008a5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008924:	0b9b      	lsrs	r3, r3, #14
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008936:	09db      	lsrs	r3, r3, #7
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894e:	b2da      	uxtb	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	0fdb      	lsrs	r3, r3, #31
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	0f5b      	lsrs	r3, r3, #29
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	b2da      	uxtb	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	0e9b      	lsrs	r3, r3, #26
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	b2da      	uxtb	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	0d9b      	lsrs	r3, r3, #22
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	b2da      	uxtb	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	0d5b      	lsrs	r3, r3, #21
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	0c1b      	lsrs	r3, r3, #16
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	0bdb      	lsrs	r3, r3, #15
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089de:	0b9b      	lsrs	r3, r3, #14
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	0b5b      	lsrs	r3, r3, #13
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a06:	0b1b      	lsrs	r3, r3, #12
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	0a9b      	lsrs	r3, r3, #10
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	004005ff 	.word	0x004005ff

08008a6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ac4:	b5b0      	push	{r4, r5, r7, lr}
 8008ac6:	b08e      	sub	sp, #56	; 0x38
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d02e      	beq.n	8008b3c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae4:	d106      	bne.n	8008af4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
 8008af2:	e029      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008afa:	d10a      	bne.n	8008b12 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 faa1 	bl	8009044 <SD_WideBus_Enable>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8008b10:	e01a      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10a      	bne.n	8008b2e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fade 	bl	80090da <SD_WideBus_Disable>
 8008b1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b2c:	e00c      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
 8008b3a:	e005      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d009      	beq.n	8008b64 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e024      	b.n	8008bae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681d      	ldr	r5, [r3, #0]
 8008b8a:	466c      	mov	r4, sp
 8008b8c:	f107 0318 	add.w	r3, r7, #24
 8008b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b98:	f107 030c 	add.w	r3, r7, #12
 8008b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f002 fae4 	bl	800b16c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	004005ff 	.word	0x004005ff

08008bbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa10 	bl	8008ff4 <SD_SendStatus>
 8008bd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	0a5b      	lsrs	r3, r3, #9
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008bf2:	693b      	ldr	r3, [r7, #16]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b82      	cmp	r3, #130	; 0x82
 8008c3a:	d111      	bne.n	8008c60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 fc09 	bl	800b458 <SDMMC_CmdStopTransfer>
 8008c46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff fd58 	bl	8008710 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0208 	bic.w	r2, r2, #8
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f003 f84f 	bl	800bd2c <HAL_SD_RxCpltCallback>
#endif
}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fc f8c4 	bl	8004e34 <HAL_DMA_GetError>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d03e      	beq.n	8008d30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d002      	beq.n	8008cce <SD_DMAError+0x36>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d12d      	bne.n	8008d2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <SD_DMAError+0xa0>)
 8008cd4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008ce4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008cf2:	6978      	ldr	r0, [r7, #20]
 8008cf4:	f7ff ff62 	bl	8008bbc <HAL_SD_GetCardState>
 8008cf8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b06      	cmp	r3, #6
 8008cfe:	d002      	beq.n	8008d06 <SD_DMAError+0x6e>
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b05      	cmp	r3, #5
 8008d04:	d10a      	bne.n	8008d1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 fba4 	bl	800b458 <SDMMC_CmdStopTransfer>
 8008d10:	4602      	mov	r2, r0
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	431a      	orrs	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f7ff fcf0 	bl	8008710 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008d30:	bf00      	nop
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	004005ff 	.word	0x004005ff

08008d3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b094      	sub	sp, #80	; 0x50
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d44:	2301      	movs	r3, #1
 8008d46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f002 fa55 	bl	800b1fc <SDMMC_GetPowerState>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d5c:	e0b7      	b.n	8008ece <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d02f      	beq.n	8008dc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fc7f 	bl	800b66e <SDMMC_CmdSendCID>
 8008d70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <SD_InitCard+0x40>
    {
      return errorstate;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	e0a8      	b.n	8008ece <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f002 fa7f 	bl	800b286 <SDMMC_GetResponse>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2104      	movs	r1, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f002 fa76 	bl	800b286 <SDMMC_GetResponse>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2108      	movs	r1, #8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fa6d 	bl	800b286 <SDMMC_GetResponse>
 8008dac:	4602      	mov	r2, r0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	210c      	movs	r1, #12
 8008db8:	4618      	mov	r0, r3
 8008dba:	f002 fa64 	bl	800b286 <SDMMC_GetResponse>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d00d      	beq.n	8008dea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f107 020e 	add.w	r2, r7, #14
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f002 fc85 	bl	800b6e8 <SDMMC_CmdSetRelAdd>
 8008dde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <SD_InitCard+0xae>
    {
      return errorstate;
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	e071      	b.n	8008ece <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d036      	beq.n	8008e60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f002 fc4f 	bl	800b6aa <SDMMC_CmdSendCSD>
 8008e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	e05a      	b.n	8008ece <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 fa31 	bl	800b286 <SDMMC_GetResponse>
 8008e24:	4602      	mov	r2, r0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2104      	movs	r1, #4
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 fa28 	bl	800b286 <SDMMC_GetResponse>
 8008e36:	4602      	mov	r2, r0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2108      	movs	r1, #8
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 fa1f 	bl	800b286 <SDMMC_GetResponse>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	210c      	movs	r1, #12
 8008e54:	4618      	mov	r0, r3
 8008e56:	f002 fa16 	bl	800b286 <SDMMC_GetResponse>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2104      	movs	r1, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f002 fa0d 	bl	800b286 <SDMMC_GetResponse>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	0d1a      	lsrs	r2, r3, #20
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fc52 	bl	8008724 <HAL_SD_GetCardCSD>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e8a:	e020      	b.n	8008ece <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6819      	ldr	r1, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	041b      	lsls	r3, r3, #16
 8008e96:	f04f 0400 	mov.w	r4, #0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	f002 fafc 	bl	800b49c <SDMMC_CmdSelDesel>
 8008ea4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <SD_InitCard+0x174>
  {
    return errorstate;
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	e00e      	b.n	8008ece <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681d      	ldr	r5, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	466c      	mov	r4, sp
 8008eb8:	f103 0210 	add.w	r2, r3, #16
 8008ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f002 f950 	bl	800b16c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3740      	adds	r7, #64	; 0x40
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ed8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f002 faf6 	bl	800b4e2 <SDMMC_CmdGoIdleState>
 8008ef6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	e072      	b.n	8008fe8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f002 fb09 	bl	800b51e <SDMMC_CmdOperCond>
 8008f0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00d      	beq.n	8008f30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f002 fadf 	bl	800b4e2 <SDMMC_CmdGoIdleState>
 8008f24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e05b      	b.n	8008fe8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d137      	bne.n	8008fae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f002 fb09 	bl	800b55c <SDMMC_CmdAppCommand>
 8008f4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d02d      	beq.n	8008fae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f56:	e047      	b.n	8008fe8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f002 fafc 	bl	800b55c <SDMMC_CmdAppCommand>
 8008f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <SD_PowerON+0x98>
    {
      return errorstate;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	e03b      	b.n	8008fe8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	491e      	ldr	r1, [pc, #120]	; (8008ff0 <SD_PowerON+0x118>)
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fb12 	bl	800b5a0 <SDMMC_CmdAppOperCommand>
 8008f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f88:	e02e      	b.n	8008fe8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 f978 	bl	800b286 <SDMMC_GetResponse>
 8008f96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	0fdb      	lsrs	r3, r3, #31
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <SD_PowerON+0xcc>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <SD_PowerON+0xce>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	613b      	str	r3, [r7, #16]

    count++;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d802      	bhi.n	8008fbe <SD_PowerON+0xe6>
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0cc      	beq.n	8008f58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d902      	bls.n	8008fce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fcc:	e00c      	b.n	8008fe8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	645a      	str	r2, [r3, #68]	; 0x44
 8008fde:	e002      	b.n	8008fe6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	c1100000 	.word	0xc1100000

08008ff4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009004:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009008:	e018      	b.n	800903c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f002 fb87 	bl	800b72a <SDMMC_CmdSendStatus>
 800901c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	e009      	b.n	800903c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f002 f929 	bl	800b286 <SDMMC_GetResponse>
 8009034:	4602      	mov	r2, r0
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f002 f913 	bl	800b286 <SDMMC_GetResponse>
 8009060:	4603      	mov	r3, r0
 8009062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906a:	d102      	bne.n	8009072 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800906c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009070:	e02f      	b.n	80090d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f879 	bl	8009170 <SD_FindSCR>
 800907e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	e023      	b.n	80090d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01c      	beq.n	80090ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f002 fa5b 	bl	800b55c <SDMMC_CmdAppCommand>
 80090a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	e00f      	b.n	80090d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2102      	movs	r1, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f002 fa95 	bl	800b5e8 <SDMMC_CmdBusWidth>
 80090be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	e003      	b.n	80090d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e001      	b.n	80090d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b086      	sub	sp, #24
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	2300      	movs	r3, #0
 80090e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 f8c8 	bl	800b286 <SDMMC_GetResponse>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009100:	d102      	bne.n	8009108 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009106:	e02f      	b.n	8009168 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f82e 	bl	8009170 <SD_FindSCR>
 8009114:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	e023      	b.n	8009168 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01c      	beq.n	8009164 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f002 fa10 	bl	800b55c <SDMMC_CmdAppCommand>
 800913c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	e00f      	b.n	8009168 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f002 fa4a 	bl	800b5e8 <SDMMC_CmdBusWidth>
 8009154:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	e003      	b.n	8009168 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009160:	2300      	movs	r3, #0
 8009162:	e001      	b.n	8009168 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009164:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b08f      	sub	sp, #60	; 0x3c
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800917a:	f7fa fb4d 	bl	8003818 <HAL_GetTick>
 800917e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009184:	2300      	movs	r3, #0
 8009186:	60bb      	str	r3, [r7, #8]
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2108      	movs	r1, #8
 8009196:	4618      	mov	r0, r3
 8009198:	f002 f8b4 	bl	800b304 <SDMMC_CmdBlockLength>
 800919c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	e0a9      	b.n	80092fc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f002 f9d1 	bl	800b55c <SDMMC_CmdAppCommand>
 80091ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	e09a      	b.n	80092fc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091cc:	2308      	movs	r3, #8
 80091ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091d0:	2330      	movs	r3, #48	; 0x30
 80091d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091d4:	2302      	movs	r3, #2
 80091d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091d8:	2300      	movs	r3, #0
 80091da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091dc:	2301      	movs	r3, #1
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f107 0210 	add.w	r2, r7, #16
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f002 f85e 	bl	800b2ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 fa19 	bl	800b62c <SDMMC_CmdSendSCR>
 80091fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d022      	beq.n	8009248 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	e07a      	b.n	80092fc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00e      	beq.n	8009232 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6819      	ldr	r1, [r3, #0]
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	f107 0208 	add.w	r2, r7, #8
 8009220:	18d4      	adds	r4, r2, r3
 8009222:	4608      	mov	r0, r1
 8009224:	f001 ffce 	bl	800b1c4 <SDMMC_ReadFIFO>
 8009228:	4603      	mov	r3, r0
 800922a:	6023      	str	r3, [r4, #0]
      index++;
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	3301      	adds	r3, #1
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009232:	f7fa faf1 	bl	8003818 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d102      	bne.n	8009248 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009246:	e059      	b.n	80092fc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800924e:	f240 432a 	movw	r3, #1066	; 0x42a
 8009252:	4013      	ands	r3, r2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0d6      	beq.n	8009206 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925e:	f003 0308 	and.w	r3, r3, #8
 8009262:	2b00      	cmp	r3, #0
 8009264:	d005      	beq.n	8009272 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2208      	movs	r2, #8
 800926c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800926e:	2308      	movs	r3, #8
 8009270:	e044      	b.n	80092fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2202      	movs	r2, #2
 8009286:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009288:	2302      	movs	r3, #2
 800928a:	e037      	b.n	80092fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2220      	movs	r2, #32
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092a2:	2320      	movs	r3, #32
 80092a4:	e02a      	b.n	80092fc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	061a      	lsls	r2, r3, #24
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	0e1b      	lsrs	r3, r3, #24
 80092cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	601a      	str	r2, [r3, #0]
    scr++;
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	3304      	adds	r3, #4
 80092d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	061a      	lsls	r2, r3, #24
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	0e1b      	lsrs	r3, r3, #24
 80092f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	373c      	adds	r7, #60	; 0x3c
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e025      	b.n	8009364 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7fa f849 	bl	80033c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3304      	adds	r3, #4
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f001 fdeb 	bl	800af20 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	f001 fe55 	bl	800b004 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d101      	bne.n	8009388 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009384:	2302      	movs	r3, #2
 8009386:	e018      	b.n	80093ba <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	4618      	mov	r0, r3
 800939a:	f001 feb3 	bl	800b104 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d104      	bne.n	80093b0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2205      	movs	r2, #5
 80093aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80093ae:	e003      	b.n	80093b8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d101      	bne.n	80093dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80093d8:	2302      	movs	r3, #2
 80093da:	e00e      	b.n	80093fa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 feab 	bl	800b146 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e04c      	b.n	80094b0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f9 fca6 	bl	8002d7c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0203 	bic.w	r2, r2, #3
 8009446:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <HAL_SPDIFRX_Init+0xb4>)
 8009454:	4013      	ands	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009460:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009466:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800946c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009472:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009478:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800947e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009484:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800948a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009490:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	fff88407 	.word	0xfff88407

080094bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e084      	b.n	80095d8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7f9 fc89 	bl	8002e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009504:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800950e:	d902      	bls.n	8009516 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800951a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009524:	d007      	beq.n	8009536 <HAL_SPI_Init+0x7a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800952e:	d002      	beq.n	8009536 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10b      	bne.n	8009556 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009546:	d903      	bls.n	8009550 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
 800954e:	e002      	b.n	8009556 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	ea42 0103 	orr.w	r1, r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	0c1b      	lsrs	r3, r3, #16
 8009596:	f003 0204 	and.w	r2, r3, #4
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	431a      	orrs	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	ea42 0103 	orr.w	r1, r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69da      	ldr	r2, [r3, #28]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e01d      	b.n	800962e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7f9 fc5c 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3304      	adds	r3, #4
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f000 fb78 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <HAL_TIM_Base_Start_IT+0x50>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b06      	cmp	r3, #6
 8009660:	d00b      	beq.n	800967a <HAL_TIM_Base_Start_IT+0x42>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d007      	beq.n	800967a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	00010007 	.word	0x00010007

0800968c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e01d      	b.n	80096da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7f9 fc74 	bl	8002fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f000 fb22 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d122      	bne.n	800973e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b02      	cmp	r3, #2
 8009704:	d11b      	bne.n	800973e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f06f 0202 	mvn.w	r2, #2
 800970e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fad7 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 800972a:	e005      	b.n	8009738 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fac9 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fada 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b04      	cmp	r3, #4
 800974a:	d122      	bne.n	8009792 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b04      	cmp	r3, #4
 8009758:	d11b      	bne.n	8009792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f06f 0204 	mvn.w	r2, #4
 8009762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009774:	2b00      	cmp	r3, #0
 8009776:	d003      	beq.n	8009780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 faad 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 800977e:	e005      	b.n	800978c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fa9f 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fab0 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	f003 0308 	and.w	r3, r3, #8
 800979c:	2b08      	cmp	r3, #8
 800979e:	d122      	bne.n	80097e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d11b      	bne.n	80097e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f06f 0208 	mvn.w	r2, #8
 80097b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2204      	movs	r2, #4
 80097bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fa83 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 80097d2:	e005      	b.n	80097e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fa75 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa86 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	d122      	bne.n	800983a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f003 0310 	and.w	r3, r3, #16
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d11b      	bne.n	800983a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f06f 0210 	mvn.w	r2, #16
 800980a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2208      	movs	r2, #8
 8009810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fa59 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 8009826:	e005      	b.n	8009834 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fa4b 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa5c 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b01      	cmp	r3, #1
 8009846:	d10e      	bne.n	8009866 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b01      	cmp	r3, #1
 8009854:	d107      	bne.n	8009866 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f06f 0201 	mvn.w	r2, #1
 800985e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7f8 feb1 	bl	80025c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009870:	2b80      	cmp	r3, #128	; 0x80
 8009872:	d10e      	bne.n	8009892 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987e:	2b80      	cmp	r3, #128	; 0x80
 8009880:	d107      	bne.n	8009892 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800988a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 feef 	bl	800a670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a0:	d10e      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ac:	2b80      	cmp	r3, #128	; 0x80
 80098ae:	d107      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fee2 	bl	800a684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b40      	cmp	r3, #64	; 0x40
 80098cc:	d10e      	bne.n	80098ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d107      	bne.n	80098ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa0a 	bl	8009d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	d10e      	bne.n	8009918 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b20      	cmp	r3, #32
 8009906:	d107      	bne.n	8009918 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0220 	mvn.w	r2, #32
 8009910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fea2 	bl	800a65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009936:	2302      	movs	r3, #2
 8009938:	e105      	b.n	8009b46 <HAL_TIM_PWM_ConfigChannel+0x226>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b14      	cmp	r3, #20
 800994e:	f200 80f0 	bhi.w	8009b32 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	080099ad 	.word	0x080099ad
 800995c:	08009b33 	.word	0x08009b33
 8009960:	08009b33 	.word	0x08009b33
 8009964:	08009b33 	.word	0x08009b33
 8009968:	080099ed 	.word	0x080099ed
 800996c:	08009b33 	.word	0x08009b33
 8009970:	08009b33 	.word	0x08009b33
 8009974:	08009b33 	.word	0x08009b33
 8009978:	08009a2f 	.word	0x08009a2f
 800997c:	08009b33 	.word	0x08009b33
 8009980:	08009b33 	.word	0x08009b33
 8009984:	08009b33 	.word	0x08009b33
 8009988:	08009a6f 	.word	0x08009a6f
 800998c:	08009b33 	.word	0x08009b33
 8009990:	08009b33 	.word	0x08009b33
 8009994:	08009b33 	.word	0x08009b33
 8009998:	08009ab1 	.word	0x08009ab1
 800999c:	08009b33 	.word	0x08009b33
 80099a0:	08009b33 	.word	0x08009b33
 80099a4:	08009b33 	.word	0x08009b33
 80099a8:	08009af1 	.word	0x08009af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fa4e 	bl	8009e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	699a      	ldr	r2, [r3, #24]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0208 	orr.w	r2, r2, #8
 80099c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0204 	bic.w	r2, r2, #4
 80099d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6999      	ldr	r1, [r3, #24]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	691a      	ldr	r2, [r3, #16]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	619a      	str	r2, [r3, #24]
      break;
 80099ea:	e0a3      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 faa0 	bl	8009f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6999      	ldr	r1, [r3, #24]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	021a      	lsls	r2, r3, #8
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	619a      	str	r2, [r3, #24]
      break;
 8009a2c:	e082      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 faf7 	bl	800a028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69da      	ldr	r2, [r3, #28]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f042 0208 	orr.w	r2, r2, #8
 8009a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69da      	ldr	r2, [r3, #28]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0204 	bic.w	r2, r2, #4
 8009a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69d9      	ldr	r1, [r3, #28]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	61da      	str	r2, [r3, #28]
      break;
 8009a6c:	e062      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fb4d 	bl	800a114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69da      	ldr	r2, [r3, #28]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69d9      	ldr	r1, [r3, #28]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	021a      	lsls	r2, r3, #8
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	61da      	str	r2, [r3, #28]
      break;
 8009aae:	e041      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fb84 	bl	800a1c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0208 	orr.w	r2, r2, #8
 8009aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 0204 	bic.w	r2, r2, #4
 8009ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009aee:	e021      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fbb6 	bl	800a268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	021a      	lsls	r2, r3, #8
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b30:	e000      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b32:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop

08009b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_ConfigClockSource+0x18>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e0a6      	b.n	8009cb6 <HAL_TIM_ConfigClockSource+0x166>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4b4f      	ldr	r3, [pc, #316]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x170>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b40      	cmp	r3, #64	; 0x40
 8009b9e:	d067      	beq.n	8009c70 <HAL_TIM_ConfigClockSource+0x120>
 8009ba0:	2b40      	cmp	r3, #64	; 0x40
 8009ba2:	d80b      	bhi.n	8009bbc <HAL_TIM_ConfigClockSource+0x6c>
 8009ba4:	2b10      	cmp	r3, #16
 8009ba6:	d073      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0x140>
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d802      	bhi.n	8009bb2 <HAL_TIM_ConfigClockSource+0x62>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d06f      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009bb0:	e078      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d06c      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0x140>
 8009bb6:	2b30      	cmp	r3, #48	; 0x30
 8009bb8:	d06a      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009bba:	e073      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bbc:	2b70      	cmp	r3, #112	; 0x70
 8009bbe:	d00d      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x8c>
 8009bc0:	2b70      	cmp	r3, #112	; 0x70
 8009bc2:	d804      	bhi.n	8009bce <HAL_TIM_ConfigClockSource+0x7e>
 8009bc4:	2b50      	cmp	r3, #80	; 0x50
 8009bc6:	d033      	beq.n	8009c30 <HAL_TIM_ConfigClockSource+0xe0>
 8009bc8:	2b60      	cmp	r3, #96	; 0x60
 8009bca:	d041      	beq.n	8009c50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009bcc:	e06a      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd2:	d066      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0x152>
 8009bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd8:	d017      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009bda:	e063      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	6899      	ldr	r1, [r3, #8]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f000 fc0a 	bl	800a404 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bfe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	609a      	str	r2, [r3, #8]
      break;
 8009c08:	e04c      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6899      	ldr	r1, [r3, #8]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f000 fbf3 	bl	800a404 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c2c:	609a      	str	r2, [r3, #8]
      break;
 8009c2e:	e039      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	6859      	ldr	r1, [r3, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f000 fb67 	bl	800a310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2150      	movs	r1, #80	; 0x50
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fbc0 	bl	800a3ce <TIM_ITRx_SetConfig>
      break;
 8009c4e:	e029      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	6859      	ldr	r1, [r3, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f000 fb86 	bl	800a36e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2160      	movs	r1, #96	; 0x60
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fbb0 	bl	800a3ce <TIM_ITRx_SetConfig>
      break;
 8009c6e:	e019      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	6859      	ldr	r1, [r3, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f000 fb47 	bl	800a310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2140      	movs	r1, #64	; 0x40
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fba0 	bl	800a3ce <TIM_ITRx_SetConfig>
      break;
 8009c8e:	e009      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f000 fb97 	bl	800a3ce <TIM_ITRx_SetConfig>
      break;
 8009ca0:	e000      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	fffeff88 	.word	0xfffeff88

08009cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a40      	ldr	r2, [pc, #256]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d32:	d00f      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a3d      	ldr	r2, [pc, #244]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3c      	ldr	r2, [pc, #240]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3b      	ldr	r2, [pc, #236]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a3a      	ldr	r2, [pc, #232]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2f      	ldr	r2, [pc, #188]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d02b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d74:	d027      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2c      	ldr	r2, [pc, #176]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d023      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2b      	ldr	r2, [pc, #172]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d01f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a29      	ldr	r2, [pc, #164]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d017      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a28      	ldr	r2, [pc, #160]	; (8009e3c <TIM_Base_SetConfig+0x128>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a27      	ldr	r2, [pc, #156]	; (8009e40 <TIM_Base_SetConfig+0x12c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <TIM_Base_SetConfig+0x130>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a25      	ldr	r2, [pc, #148]	; (8009e48 <TIM_Base_SetConfig+0x134>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a24      	ldr	r2, [pc, #144]	; (8009e4c <TIM_Base_SetConfig+0x138>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a23      	ldr	r2, [pc, #140]	; (8009e50 <TIM_Base_SetConfig+0x13c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d108      	bne.n	8009dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d003      	beq.n	8009e0c <TIM_Base_SetConfig+0xf8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a0c      	ldr	r2, [pc, #48]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d103      	bne.n	8009e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	615a      	str	r2, [r3, #20]
}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40000400 	.word	0x40000400
 8009e30:	40000800 	.word	0x40000800
 8009e34:	40000c00 	.word	0x40000c00
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	40001800 	.word	0x40001800
 8009e4c:	40001c00 	.word	0x40001c00
 8009e50:	40002000 	.word	0x40002000

08009e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4b2b      	ldr	r3, [pc, #172]	; (8009f2c <TIM_OC1_SetConfig+0xd8>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 0302 	bic.w	r3, r3, #2
 8009e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a21      	ldr	r2, [pc, #132]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x64>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a20      	ldr	r2, [pc, #128]	; (8009f34 <TIM_OC1_SetConfig+0xe0>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10c      	bne.n	8009ed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0308 	bic.w	r3, r3, #8
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 0304 	bic.w	r3, r3, #4
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC1_SetConfig+0x8e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <TIM_OC1_SetConfig+0xe0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d111      	bne.n	8009f06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	621a      	str	r2, [r3, #32]
}
 8009f20:	bf00      	nop
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	fffeff8f 	.word	0xfffeff8f
 8009f30:	40010000 	.word	0x40010000
 8009f34:	40010400 	.word	0x40010400

08009f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f023 0210 	bic.w	r2, r3, #16
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4b2e      	ldr	r3, [pc, #184]	; (800a01c <TIM_OC2_SetConfig+0xe4>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 0320 	bic.w	r3, r3, #32
 8009f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a23      	ldr	r2, [pc, #140]	; (800a020 <TIM_OC2_SetConfig+0xe8>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_OC2_SetConfig+0x68>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a22      	ldr	r2, [pc, #136]	; (800a024 <TIM_OC2_SetConfig+0xec>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10d      	bne.n	8009fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a18      	ldr	r2, [pc, #96]	; (800a020 <TIM_OC2_SetConfig+0xe8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d003      	beq.n	8009fcc <TIM_OC2_SetConfig+0x94>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a17      	ldr	r2, [pc, #92]	; (800a024 <TIM_OC2_SetConfig+0xec>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d113      	bne.n	8009ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	621a      	str	r2, [r3, #32]
}
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	feff8fff 	.word	0xfeff8fff
 800a020:	40010000 	.word	0x40010000
 800a024:	40010400 	.word	0x40010400

0800a028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <TIM_OC3_SetConfig+0xe0>)
 800a054:	4013      	ands	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0303 	bic.w	r3, r3, #3
 800a05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a22      	ldr	r2, [pc, #136]	; (800a10c <TIM_OC3_SetConfig+0xe4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_OC3_SetConfig+0x66>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a21      	ldr	r2, [pc, #132]	; (800a110 <TIM_OC3_SetConfig+0xe8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d10d      	bne.n	800a0aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a17      	ldr	r2, [pc, #92]	; (800a10c <TIM_OC3_SetConfig+0xe4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d003      	beq.n	800a0ba <TIM_OC3_SetConfig+0x92>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a16      	ldr	r2, [pc, #88]	; (800a110 <TIM_OC3_SetConfig+0xe8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d113      	bne.n	800a0e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	011b      	lsls	r3, r3, #4
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	011b      	lsls	r3, r3, #4
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	621a      	str	r2, [r3, #32]
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	fffeff8f 	.word	0xfffeff8f
 800a10c:	40010000 	.word	0x40010000
 800a110:	40010400 	.word	0x40010400

0800a114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <TIM_OC4_SetConfig+0xa4>)
 800a140:	4013      	ands	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a15e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	031b      	lsls	r3, r3, #12
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	4313      	orrs	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a13      	ldr	r2, [pc, #76]	; (800a1bc <TIM_OC4_SetConfig+0xa8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d003      	beq.n	800a17c <TIM_OC4_SetConfig+0x68>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <TIM_OC4_SetConfig+0xac>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d109      	bne.n	800a190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	019b      	lsls	r3, r3, #6
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	621a      	str	r2, [r3, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	371c      	adds	r7, #28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	feff8fff 	.word	0xfeff8fff
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40010400 	.word	0x40010400

0800a1c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <TIM_OC5_SetConfig+0x98>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	041b      	lsls	r3, r3, #16
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a12      	ldr	r2, [pc, #72]	; (800a260 <TIM_OC5_SetConfig+0x9c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <TIM_OC5_SetConfig+0x5e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a11      	ldr	r2, [pc, #68]	; (800a264 <TIM_OC5_SetConfig+0xa0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d109      	bne.n	800a236 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	621a      	str	r2, [r3, #32]
}
 800a250:	bf00      	nop
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	fffeff8f 	.word	0xfffeff8f
 800a260:	40010000 	.word	0x40010000
 800a264:	40010400 	.word	0x40010400

0800a268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4b1c      	ldr	r3, [pc, #112]	; (800a304 <TIM_OC6_SetConfig+0x9c>)
 800a294:	4013      	ands	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	051b      	lsls	r3, r3, #20
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a13      	ldr	r2, [pc, #76]	; (800a308 <TIM_OC6_SetConfig+0xa0>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d003      	beq.n	800a2c8 <TIM_OC6_SetConfig+0x60>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a12      	ldr	r2, [pc, #72]	; (800a30c <TIM_OC6_SetConfig+0xa4>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d109      	bne.n	800a2dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	029b      	lsls	r3, r3, #10
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	621a      	str	r2, [r3, #32]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	feff8fff 	.word	0xfeff8fff
 800a308:	40010000 	.word	0x40010000
 800a30c:	40010400 	.word	0x40010400

0800a310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0201 	bic.w	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a33a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 030a 	bic.w	r3, r3, #10
 800a34c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a36e:	b480      	push	{r7}
 800a370:	b087      	sub	sp, #28
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0210 	bic.w	r2, r3, #16
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	031b      	lsls	r3, r3, #12
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	621a      	str	r2, [r3, #32]
}
 800a3c2:	bf00      	nop
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	f043 0307 	orr.w	r3, r3, #7
 800a3f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	609a      	str	r2, [r3, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a41e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	021a      	lsls	r2, r3, #8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	431a      	orrs	r2, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	609a      	str	r2, [r3, #8]
}
 800a438:	bf00      	nop
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a454:	2b01      	cmp	r3, #1
 800a456:	d101      	bne.n	800a45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a458:	2302      	movs	r3, #2
 800a45a:	e06d      	b.n	800a538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2202      	movs	r2, #2
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a30      	ldr	r2, [pc, #192]	; (800a544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d004      	beq.n	800a490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a2f      	ldr	r2, [pc, #188]	; (800a548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d108      	bne.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a20      	ldr	r2, [pc, #128]	; (800a544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d022      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ce:	d01d      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a1d      	ldr	r2, [pc, #116]	; (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d018      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a1c      	ldr	r2, [pc, #112]	; (800a550 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d013      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1a      	ldr	r2, [pc, #104]	; (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d00e      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a15      	ldr	r2, [pc, #84]	; (800a548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d009      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a16      	ldr	r2, [pc, #88]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d004      	beq.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a15      	ldr	r2, [pc, #84]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d10c      	bne.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	40010000 	.word	0x40010000
 800a548:	40010400 	.word	0x40010400
 800a54c:	40000400 	.word	0x40000400
 800a550:	40000800 	.word	0x40000800
 800a554:	40000c00 	.word	0x40000c00
 800a558:	40014000 	.word	0x40014000
 800a55c:	40001800 	.word	0x40001800

0800a560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a578:	2302      	movs	r3, #2
 800a57a:	e065      	b.n	800a648 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	041b      	lsls	r3, r3, #16
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a16      	ldr	r2, [pc, #88]	; (800a654 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d004      	beq.n	800a60a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a14      	ldr	r2, [pc, #80]	; (800a658 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d115      	bne.n	800a636 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	051b      	lsls	r3, r3, #20
 800a616:	4313      	orrs	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	4313      	orrs	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	40010000 	.word	0x40010000
 800a658:	40010400 	.word	0x40010400

0800a65c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e040      	b.n	800a72c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7f8 fd5e 	bl	800317c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2224      	movs	r2, #36	; 0x24
 800a6c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f82c 	bl	800a734 <UART_SetConfig>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e022      	b.n	800a72c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 faca 	bl	800ac88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb51 	bl	800adcc <UART_CheckIdleState>
 800a72a:	4603      	mov	r3, r0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	431a      	orrs	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	4313      	orrs	r3, r2
 800a75a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4bb1      	ldr	r3, [pc, #708]	; (800aa28 <UART_SetConfig+0x2f4>)
 800a764:	4013      	ands	r3, r2
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	6939      	ldr	r1, [r7, #16]
 800a76c:	430b      	orrs	r3, r1
 800a76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a9f      	ldr	r2, [pc, #636]	; (800aa2c <UART_SetConfig+0x2f8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d121      	bne.n	800a7f8 <UART_SetConfig+0xc4>
 800a7b4:	4b9e      	ldr	r3, [pc, #632]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d816      	bhi.n	800a7f0 <UART_SetConfig+0xbc>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <UART_SetConfig+0x94>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7d9 	.word	0x0800a7d9
 800a7cc:	0800a7e5 	.word	0x0800a7e5
 800a7d0:	0800a7df 	.word	0x0800a7df
 800a7d4:	0800a7eb 	.word	0x0800a7eb
 800a7d8:	2301      	movs	r3, #1
 800a7da:	77fb      	strb	r3, [r7, #31]
 800a7dc:	e151      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	77fb      	strb	r3, [r7, #31]
 800a7e2:	e14e      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	77fb      	strb	r3, [r7, #31]
 800a7e8:	e14b      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	77fb      	strb	r3, [r7, #31]
 800a7ee:	e148      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a7f0:	2310      	movs	r3, #16
 800a7f2:	77fb      	strb	r3, [r7, #31]
 800a7f4:	bf00      	nop
 800a7f6:	e144      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a8d      	ldr	r2, [pc, #564]	; (800aa34 <UART_SetConfig+0x300>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d134      	bne.n	800a86c <UART_SetConfig+0x138>
 800a802:	4b8b      	ldr	r3, [pc, #556]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a808:	f003 030c 	and.w	r3, r3, #12
 800a80c:	2b0c      	cmp	r3, #12
 800a80e:	d829      	bhi.n	800a864 <UART_SetConfig+0x130>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0xe4>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a84d 	.word	0x0800a84d
 800a81c:	0800a865 	.word	0x0800a865
 800a820:	0800a865 	.word	0x0800a865
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a859 	.word	0x0800a859
 800a82c:	0800a865 	.word	0x0800a865
 800a830:	0800a865 	.word	0x0800a865
 800a834:	0800a865 	.word	0x0800a865
 800a838:	0800a853 	.word	0x0800a853
 800a83c:	0800a865 	.word	0x0800a865
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a85f 	.word	0x0800a85f
 800a84c:	2300      	movs	r3, #0
 800a84e:	77fb      	strb	r3, [r7, #31]
 800a850:	e117      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a852:	2302      	movs	r3, #2
 800a854:	77fb      	strb	r3, [r7, #31]
 800a856:	e114      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a858:	2304      	movs	r3, #4
 800a85a:	77fb      	strb	r3, [r7, #31]
 800a85c:	e111      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a85e:	2308      	movs	r3, #8
 800a860:	77fb      	strb	r3, [r7, #31]
 800a862:	e10e      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a864:	2310      	movs	r3, #16
 800a866:	77fb      	strb	r3, [r7, #31]
 800a868:	bf00      	nop
 800a86a:	e10a      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a71      	ldr	r2, [pc, #452]	; (800aa38 <UART_SetConfig+0x304>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d120      	bne.n	800a8b8 <UART_SetConfig+0x184>
 800a876:	4b6e      	ldr	r3, [pc, #440]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a87c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a880:	2b10      	cmp	r3, #16
 800a882:	d00f      	beq.n	800a8a4 <UART_SetConfig+0x170>
 800a884:	2b10      	cmp	r3, #16
 800a886:	d802      	bhi.n	800a88e <UART_SetConfig+0x15a>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d005      	beq.n	800a898 <UART_SetConfig+0x164>
 800a88c:	e010      	b.n	800a8b0 <UART_SetConfig+0x17c>
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d005      	beq.n	800a89e <UART_SetConfig+0x16a>
 800a892:	2b30      	cmp	r3, #48	; 0x30
 800a894:	d009      	beq.n	800a8aa <UART_SetConfig+0x176>
 800a896:	e00b      	b.n	800a8b0 <UART_SetConfig+0x17c>
 800a898:	2300      	movs	r3, #0
 800a89a:	77fb      	strb	r3, [r7, #31]
 800a89c:	e0f1      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	77fb      	strb	r3, [r7, #31]
 800a8a2:	e0ee      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	77fb      	strb	r3, [r7, #31]
 800a8a8:	e0eb      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e0e8      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	77fb      	strb	r3, [r7, #31]
 800a8b4:	bf00      	nop
 800a8b6:	e0e4      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a5f      	ldr	r2, [pc, #380]	; (800aa3c <UART_SetConfig+0x308>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d120      	bne.n	800a904 <UART_SetConfig+0x1d0>
 800a8c2:	4b5b      	ldr	r3, [pc, #364]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8cc:	2b40      	cmp	r3, #64	; 0x40
 800a8ce:	d00f      	beq.n	800a8f0 <UART_SetConfig+0x1bc>
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	d802      	bhi.n	800a8da <UART_SetConfig+0x1a6>
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d005      	beq.n	800a8e4 <UART_SetConfig+0x1b0>
 800a8d8:	e010      	b.n	800a8fc <UART_SetConfig+0x1c8>
 800a8da:	2b80      	cmp	r3, #128	; 0x80
 800a8dc:	d005      	beq.n	800a8ea <UART_SetConfig+0x1b6>
 800a8de:	2bc0      	cmp	r3, #192	; 0xc0
 800a8e0:	d009      	beq.n	800a8f6 <UART_SetConfig+0x1c2>
 800a8e2:	e00b      	b.n	800a8fc <UART_SetConfig+0x1c8>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e0cb      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e0c8      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e0c5      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e0c2      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	bf00      	nop
 800a902:	e0be      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a4d      	ldr	r2, [pc, #308]	; (800aa40 <UART_SetConfig+0x30c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d124      	bne.n	800a958 <UART_SetConfig+0x224>
 800a90e:	4b48      	ldr	r3, [pc, #288]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91c:	d012      	beq.n	800a944 <UART_SetConfig+0x210>
 800a91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a922:	d802      	bhi.n	800a92a <UART_SetConfig+0x1f6>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d007      	beq.n	800a938 <UART_SetConfig+0x204>
 800a928:	e012      	b.n	800a950 <UART_SetConfig+0x21c>
 800a92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92e:	d006      	beq.n	800a93e <UART_SetConfig+0x20a>
 800a930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a934:	d009      	beq.n	800a94a <UART_SetConfig+0x216>
 800a936:	e00b      	b.n	800a950 <UART_SetConfig+0x21c>
 800a938:	2300      	movs	r3, #0
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e0a1      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a93e:	2302      	movs	r3, #2
 800a940:	77fb      	strb	r3, [r7, #31]
 800a942:	e09e      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a944:	2304      	movs	r3, #4
 800a946:	77fb      	strb	r3, [r7, #31]
 800a948:	e09b      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a94a:	2308      	movs	r3, #8
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	e098      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a950:	2310      	movs	r3, #16
 800a952:	77fb      	strb	r3, [r7, #31]
 800a954:	bf00      	nop
 800a956:	e094      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a39      	ldr	r2, [pc, #228]	; (800aa44 <UART_SetConfig+0x310>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d124      	bne.n	800a9ac <UART_SetConfig+0x278>
 800a962:	4b33      	ldr	r3, [pc, #204]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a96c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a970:	d012      	beq.n	800a998 <UART_SetConfig+0x264>
 800a972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a976:	d802      	bhi.n	800a97e <UART_SetConfig+0x24a>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <UART_SetConfig+0x258>
 800a97c:	e012      	b.n	800a9a4 <UART_SetConfig+0x270>
 800a97e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a982:	d006      	beq.n	800a992 <UART_SetConfig+0x25e>
 800a984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a988:	d009      	beq.n	800a99e <UART_SetConfig+0x26a>
 800a98a:	e00b      	b.n	800a9a4 <UART_SetConfig+0x270>
 800a98c:	2301      	movs	r3, #1
 800a98e:	77fb      	strb	r3, [r7, #31]
 800a990:	e077      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a992:	2302      	movs	r3, #2
 800a994:	77fb      	strb	r3, [r7, #31]
 800a996:	e074      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a998:	2304      	movs	r3, #4
 800a99a:	77fb      	strb	r3, [r7, #31]
 800a99c:	e071      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a99e:	2308      	movs	r3, #8
 800a9a0:	77fb      	strb	r3, [r7, #31]
 800a9a2:	e06e      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	77fb      	strb	r3, [r7, #31]
 800a9a8:	bf00      	nop
 800a9aa:	e06a      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a25      	ldr	r2, [pc, #148]	; (800aa48 <UART_SetConfig+0x314>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d124      	bne.n	800aa00 <UART_SetConfig+0x2cc>
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <UART_SetConfig+0x2fc>)
 800a9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c4:	d012      	beq.n	800a9ec <UART_SetConfig+0x2b8>
 800a9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ca:	d802      	bhi.n	800a9d2 <UART_SetConfig+0x29e>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <UART_SetConfig+0x2ac>
 800a9d0:	e012      	b.n	800a9f8 <UART_SetConfig+0x2c4>
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d6:	d006      	beq.n	800a9e6 <UART_SetConfig+0x2b2>
 800a9d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9dc:	d009      	beq.n	800a9f2 <UART_SetConfig+0x2be>
 800a9de:	e00b      	b.n	800a9f8 <UART_SetConfig+0x2c4>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	77fb      	strb	r3, [r7, #31]
 800a9e4:	e04d      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	77fb      	strb	r3, [r7, #31]
 800a9ea:	e04a      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e047      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e044      	b.n	800aa82 <UART_SetConfig+0x34e>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	bf00      	nop
 800a9fe:	e040      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a11      	ldr	r2, [pc, #68]	; (800aa4c <UART_SetConfig+0x318>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d139      	bne.n	800aa7e <UART_SetConfig+0x34a>
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <UART_SetConfig+0x2fc>)
 800aa0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa18:	d027      	beq.n	800aa6a <UART_SetConfig+0x336>
 800aa1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa1e:	d817      	bhi.n	800aa50 <UART_SetConfig+0x31c>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01c      	beq.n	800aa5e <UART_SetConfig+0x32a>
 800aa24:	e027      	b.n	800aa76 <UART_SetConfig+0x342>
 800aa26:	bf00      	nop
 800aa28:	efff69f3 	.word	0xefff69f3
 800aa2c:	40011000 	.word	0x40011000
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40004400 	.word	0x40004400
 800aa38:	40004800 	.word	0x40004800
 800aa3c:	40004c00 	.word	0x40004c00
 800aa40:	40005000 	.word	0x40005000
 800aa44:	40011400 	.word	0x40011400
 800aa48:	40007800 	.word	0x40007800
 800aa4c:	40007c00 	.word	0x40007c00
 800aa50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa54:	d006      	beq.n	800aa64 <UART_SetConfig+0x330>
 800aa56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa5a:	d009      	beq.n	800aa70 <UART_SetConfig+0x33c>
 800aa5c:	e00b      	b.n	800aa76 <UART_SetConfig+0x342>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	77fb      	strb	r3, [r7, #31]
 800aa62:	e00e      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa64:	2302      	movs	r3, #2
 800aa66:	77fb      	strb	r3, [r7, #31]
 800aa68:	e00b      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	77fb      	strb	r3, [r7, #31]
 800aa6e:	e008      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa70:	2308      	movs	r3, #8
 800aa72:	77fb      	strb	r3, [r7, #31]
 800aa74:	e005      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa76:	2310      	movs	r3, #16
 800aa78:	77fb      	strb	r3, [r7, #31]
 800aa7a:	bf00      	nop
 800aa7c:	e001      	b.n	800aa82 <UART_SetConfig+0x34e>
 800aa7e:	2310      	movs	r3, #16
 800aa80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8a:	d17f      	bne.n	800ab8c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aa8c:	7ffb      	ldrb	r3, [r7, #31]
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d85c      	bhi.n	800ab4c <UART_SetConfig+0x418>
 800aa92:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <UART_SetConfig+0x364>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aafd 	.word	0x0800aafd
 800aaa4:	0800ab4d 	.word	0x0800ab4d
 800aaa8:	0800ab15 	.word	0x0800ab15
 800aaac:	0800ab4d 	.word	0x0800ab4d
 800aab0:	0800ab4d 	.word	0x0800ab4d
 800aab4:	0800ab4d 	.word	0x0800ab4d
 800aab8:	0800ab35 	.word	0x0800ab35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aabc:	f7fc f8d0 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 800aac0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	005a      	lsls	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	085b      	lsrs	r3, r3, #1
 800aacc:	441a      	add	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	61bb      	str	r3, [r7, #24]
        break;
 800aada:	e03a      	b.n	800ab52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aadc:	f7fc f8d4 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 800aae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	005a      	lsls	r2, r3, #1
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	441a      	add	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	61bb      	str	r3, [r7, #24]
        break;
 800aafa:	e02a      	b.n	800ab52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	085a      	lsrs	r2, r3, #1
 800ab02:	4b5f      	ldr	r3, [pc, #380]	; (800ac80 <UART_SetConfig+0x54c>)
 800ab04:	4413      	add	r3, r2
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6852      	ldr	r2, [r2, #4]
 800ab0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	61bb      	str	r3, [r7, #24]
        break;
 800ab12:	e01e      	b.n	800ab52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab14:	f7fb ffe6 	bl	8006ae4 <HAL_RCC_GetSysClockFreq>
 800ab18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	61bb      	str	r3, [r7, #24]
        break;
 800ab32:	e00e      	b.n	800ab52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	61bb      	str	r3, [r7, #24]
        break;
 800ab4a:	e002      	b.n	800ab52 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]
        break;
 800ab50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b0f      	cmp	r3, #15
 800ab56:	d916      	bls.n	800ab86 <UART_SetConfig+0x452>
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5e:	d212      	bcs.n	800ab86 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f023 030f 	bic.w	r3, r3, #15
 800ab68:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	085b      	lsrs	r3, r3, #1
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f003 0307 	and.w	r3, r3, #7
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	897b      	ldrh	r3, [r7, #10]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	897a      	ldrh	r2, [r7, #10]
 800ab82:	60da      	str	r2, [r3, #12]
 800ab84:	e070      	b.n	800ac68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
 800ab8a:	e06d      	b.n	800ac68 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ab8c:	7ffb      	ldrb	r3, [r7, #31]
 800ab8e:	2b08      	cmp	r3, #8
 800ab90:	d859      	bhi.n	800ac46 <UART_SetConfig+0x512>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <UART_SetConfig+0x464>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abbd 	.word	0x0800abbd
 800ab9c:	0800abdb 	.word	0x0800abdb
 800aba0:	0800abf9 	.word	0x0800abf9
 800aba4:	0800ac47 	.word	0x0800ac47
 800aba8:	0800ac11 	.word	0x0800ac11
 800abac:	0800ac47 	.word	0x0800ac47
 800abb0:	0800ac47 	.word	0x0800ac47
 800abb4:	0800ac47 	.word	0x0800ac47
 800abb8:	0800ac2f 	.word	0x0800ac2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abbc:	f7fc f850 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 800abc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	085a      	lsrs	r2, r3, #1
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	441a      	add	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	61bb      	str	r3, [r7, #24]
        break;
 800abd8:	e038      	b.n	800ac4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abda:	f7fc f855 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 800abde:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	085a      	lsrs	r2, r3, #1
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	441a      	add	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	61bb      	str	r3, [r7, #24]
        break;
 800abf6:	e029      	b.n	800ac4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	085a      	lsrs	r2, r3, #1
 800abfe:	4b21      	ldr	r3, [pc, #132]	; (800ac84 <UART_SetConfig+0x550>)
 800ac00:	4413      	add	r3, r2
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6852      	ldr	r2, [r2, #4]
 800ac06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	61bb      	str	r3, [r7, #24]
        break;
 800ac0e:	e01d      	b.n	800ac4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac10:	f7fb ff68 	bl	8006ae4 <HAL_RCC_GetSysClockFreq>
 800ac14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	085a      	lsrs	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	441a      	add	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	61bb      	str	r3, [r7, #24]
        break;
 800ac2c:	e00e      	b.n	800ac4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	085b      	lsrs	r3, r3, #1
 800ac34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	61bb      	str	r3, [r7, #24]
        break;
 800ac44:	e002      	b.n	800ac4c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	75fb      	strb	r3, [r7, #23]
        break;
 800ac4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b0f      	cmp	r3, #15
 800ac50:	d908      	bls.n	800ac64 <UART_SetConfig+0x530>
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac58:	d204      	bcs.n	800ac64 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	e001      	b.n	800ac68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	01e84800 	.word	0x01e84800
 800ac84:	00f42400 	.word	0x00f42400

0800ac88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00a      	beq.n	800acb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	f003 0302 	and.w	r3, r3, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00a      	beq.n	800acf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	f003 0308 	and.w	r3, r3, #8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01a      	beq.n	800ad9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad86:	d10a      	bne.n	800ad9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	605a      	str	r2, [r3, #4]
  }
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af02      	add	r7, sp, #8
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800adda:	f7f8 fd1d 	bl	8003818 <HAL_GetTick>
 800adde:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b08      	cmp	r3, #8
 800adec:	d10e      	bne.n	800ae0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f814 	bl	800ae2a <UART_WaitOnFlagUntilTimeout>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e00a      	b.n	800ae22 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2220      	movs	r2, #32
 800ae16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	603b      	str	r3, [r7, #0]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae3a:	e05d      	b.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae42:	d059      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae44:	f7f8 fce8 	bl	8003818 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d302      	bcc.n	800ae5a <UART_WaitOnFlagUntilTimeout+0x30>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d11b      	bne.n	800ae92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0201 	bic.w	r2, r2, #1
 800ae78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2220      	movs	r2, #32
 800ae84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e042      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d02b      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	69db      	ldr	r3, [r3, #28]
 800aea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeae:	d123      	bne.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeb8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aec8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0201 	bic.w	r2, r2, #1
 800aed8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2220      	movs	r2, #32
 800aede:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2220      	movs	r2, #32
 800aee4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e00f      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69da      	ldr	r2, [r3, #28]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4013      	ands	r3, r2
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	429a      	cmp	r2, r3
 800af06:	bf0c      	ite	eq
 800af08:	2301      	moveq	r3, #1
 800af0a:	2300      	movne	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	429a      	cmp	r2, r3
 800af14:	d092      	beq.n	800ae3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d027      	beq.n	800af8a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4b2f      	ldr	r3, [pc, #188]	; (800b000 <FMC_SDRAM_Init+0xe0>)
 800af44:	4013      	ands	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af50:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800af56:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800af5c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800af62:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800af68:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800af6e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800af74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800af7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	e032      	b.n	800aff0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af96:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afa0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afa6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <FMC_SDRAM_Init+0xe0>)
 800afb8:	4013      	ands	r3, r2
 800afba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afc4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800afca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800afd0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800afd6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800afdc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	ffff8000 	.word	0xffff8000

0800b004 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d02e      	beq.n	800b07c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b02a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	3b01      	subs	r3, #1
 800b038:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b03a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	3b01      	subs	r3, #1
 800b042:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b044:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b04e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	3b01      	subs	r3, #1
 800b056:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b058:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	3b01      	subs	r3, #1
 800b060:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b062:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	3b01      	subs	r3, #1
 800b06a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b06c:	4313      	orrs	r3, r2
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	609a      	str	r2, [r3, #8]
 800b07a:	e039      	b.n	800b0f0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4b1e      	ldr	r3, [pc, #120]	; (800b100 <FMC_SDRAM_Timing_Init+0xfc>)
 800b086:	4013      	ands	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	3b01      	subs	r3, #1
 800b090:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	3b01      	subs	r3, #1
 800b098:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b09a:	4313      	orrs	r3, r2
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0ae:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b0c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b0d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	ff0f0fff 	.word	0xff0f0fff

0800b104 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b11c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	3b01      	subs	r3, #1
 800b124:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b126:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	695a      	ldr	r2, [r3, #20]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b16c:	b084      	sub	sp, #16
 800b16e:	b480      	push	{r7}
 800b170:	b085      	sub	sp, #20
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	f107 001c 	add.w	r0, r7, #28
 800b17a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b182:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b184:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b186:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b18a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b18e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b192:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b196:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <SDMMC_Init+0x54>)
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	b004      	add	sp, #16
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	ffff8100 	.word	0xffff8100

0800b1c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b1ec:	2002      	movs	r0, #2
 800b1ee:	f7f8 fb1f 	bl	8003830 <HAL_Delay>
  
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0303 	and.w	r3, r3, #3
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b236:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b23c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b242:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	4b06      	ldr	r3, [pc, #24]	; (800b268 <SDMMC_SendCommand+0x50>)
 800b250:	4013      	ands	r3, r2
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	fffff000 	.word	0xfffff000

0800b26c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	b2db      	uxtb	r3, r3
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3314      	adds	r3, #20
 800b294:	461a      	mov	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	4413      	add	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
}  
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b2d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b2de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0

}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b312:	2310      	movs	r3, #16
 800b314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b316:	2340      	movs	r3, #64	; 0x40
 800b318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b324:	f107 0308 	add.w	r3, r7, #8
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ff74 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b330:	f241 3288 	movw	r2, #5000	; 0x1388
 800b334:	2110      	movs	r1, #16
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa42 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b33e:	69fb      	ldr	r3, [r7, #28]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b356:	2311      	movs	r3, #17
 800b358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b368:	f107 0308 	add.w	r3, r7, #8
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff ff52 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b374:	f241 3288 	movw	r2, #5000	; 0x1388
 800b378:	2111      	movs	r1, #17
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa20 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b382:	69fb      	ldr	r3, [r7, #28]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b39a:	2312      	movs	r3, #18
 800b39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ac:	f107 0308 	add.w	r3, r7, #8
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff ff30 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3bc:	2112      	movs	r1, #18
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f9fe 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b3de:	2318      	movs	r3, #24
 800b3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f0:	f107 0308 	add.w	r3, r7, #8
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ff0e 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b400:	2118      	movs	r1, #24
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f9dc 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40a:	69fb      	ldr	r3, [r7, #28]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b422:	2319      	movs	r3, #25
 800b424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff feec 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b440:	f241 3288 	movw	r2, #5000	; 0x1388
 800b444:	2119      	movs	r1, #25
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f9ba 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b44c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b44e:	69fb      	ldr	r3, [r7, #28]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3720      	adds	r7, #32
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b464:	230c      	movs	r3, #12
 800b466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff fecb 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b482:	4a05      	ldr	r2, [pc, #20]	; (800b498 <SDMMC_CmdStopTransfer+0x40>)
 800b484:	210c      	movs	r1, #12
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f99a 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b48e:	69fb      	ldr	r3, [r7, #28]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	05f5e100 	.word	0x05f5e100

0800b49c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4ac:	2307      	movs	r3, #7
 800b4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4b0:	2340      	movs	r3, #64	; 0x40
 800b4b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4bc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4be:	f107 0310 	add.w	r3, r7, #16
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7ff fea7 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ce:	2107      	movs	r1, #7
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 f975 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b4d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b088      	sub	sp, #32
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fe86 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f92f 	bl	800b770 <SDMMC_GetCmdError>
 800b512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b514:	69fb      	ldr	r3, [r7, #28]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3720      	adds	r7, #32
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b088      	sub	sp, #32
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b526:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b52c:	2308      	movs	r3, #8
 800b52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b53c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b53e:	f107 0308 	add.w	r3, r7, #8
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff fe67 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fb18 	bl	800bb80 <SDMMC_GetCmdResp7>
 800b550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b552:	69fb      	ldr	r3, [r7, #28]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b56a:	2337      	movs	r3, #55	; 0x37
 800b56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b57c:	f107 0308 	add.w	r3, r7, #8
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff fe48 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b588:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58c:	2137      	movs	r1, #55	; 0x37
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f916 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b596:	69fb      	ldr	r3, [r7, #28]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <SDMMC_CmdAppOperCommand+0x44>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5b2:	2329      	movs	r3, #41	; 0x29
 800b5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fe24 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa27 	bl	800ba24 <SDMMC_GetCmdResp3>
 800b5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	80100000 	.word	0x80100000

0800b5e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b5f6:	2306      	movs	r3, #6
 800b5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5fa:	2340      	movs	r3, #64	; 0x40
 800b5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fe:	2300      	movs	r3, #0
 800b600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff fe02 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b614:	f241 3288 	movw	r2, #5000	; 0x1388
 800b618:	2106      	movs	r1, #6
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f8d0 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b622:	69fb      	ldr	r3, [r7, #28]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3720      	adds	r7, #32
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b638:	2333      	movs	r3, #51	; 0x33
 800b63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b63c:	2340      	movs	r3, #64	; 0x40
 800b63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b648:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b64a:	f107 0308 	add.w	r3, r7, #8
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff fde1 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b656:	f241 3288 	movw	r2, #5000	; 0x1388
 800b65a:	2133      	movs	r1, #51	; 0x33
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f8af 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b664:	69fb      	ldr	r3, [r7, #28]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3720      	adds	r7, #32
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b088      	sub	sp, #32
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b67a:	2302      	movs	r3, #2
 800b67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b67e:	23c0      	movs	r3, #192	; 0xc0
 800b680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b68a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68c:	f107 0308 	add.w	r3, r7, #8
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff fdc0 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f97d 	bl	800b998 <SDMMC_GetCmdResp2>
 800b69e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3720      	adds	r7, #32
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b088      	sub	sp, #32
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6b8:	2309      	movs	r3, #9
 800b6ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6bc:	23c0      	movs	r3, #192	; 0xc0
 800b6be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ca:	f107 0308 	add.w	r3, r7, #8
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fda1 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f95e 	bl	800b998 <SDMMC_GetCmdResp2>
 800b6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6de:	69fb      	ldr	r3, [r7, #28]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6fa:	2340      	movs	r3, #64	; 0x40
 800b6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b708:	f107 0308 	add.w	r3, r7, #8
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff fd82 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	2103      	movs	r1, #3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f9bd 	bl	800ba98 <SDMMC_GetCmdResp6>
 800b71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b720:	69fb      	ldr	r3, [r7, #28]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3720      	adds	r7, #32
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b088      	sub	sp, #32
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b738:	230d      	movs	r3, #13
 800b73a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b73c:	2340      	movs	r3, #64	; 0x40
 800b73e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74a:	f107 0308 	add.w	r3, r7, #8
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff fd61 	bl	800b218 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b756:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75a:	210d      	movs	r1, #13
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f82f 	bl	800b7c0 <SDMMC_GetCmdResp1>
 800b762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b764:	69fb      	ldr	r3, [r7, #28]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3720      	adds	r7, #32
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b770:	b490      	push	{r4, r7}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b778:	4b0f      	ldr	r3, [pc, #60]	; (800b7b8 <SDMMC_GetCmdError+0x48>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a0f      	ldr	r2, [pc, #60]	; (800b7bc <SDMMC_GetCmdError+0x4c>)
 800b77e:	fba2 2303 	umull	r2, r3, r2, r3
 800b782:	0a5b      	lsrs	r3, r3, #9
 800b784:	f241 3288 	movw	r2, #5000	; 0x1388
 800b788:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b78c:	4623      	mov	r3, r4
 800b78e:	1e5c      	subs	r4, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b798:	e009      	b.n	800b7ae <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0f2      	beq.n	800b78c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	22c5      	movs	r2, #197	; 0xc5
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bc90      	pop	{r4, r7}
 800b7b6:	4770      	bx	lr
 800b7b8:	20000018 	.word	0x20000018
 800b7bc:	10624dd3 	.word	0x10624dd3

0800b7c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7ce:	4b6f      	ldr	r3, [pc, #444]	; (800b98c <SDMMC_GetCmdResp1+0x1cc>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a6f      	ldr	r2, [pc, #444]	; (800b990 <SDMMC_GetCmdResp1+0x1d0>)
 800b7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d8:	0a5b      	lsrs	r3, r3, #9
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	1e5c      	subs	r4, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7ec:	e0c9      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <SDMMC_GetCmdResp1+0x20>
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1eb      	bne.n	800b7e0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2204      	movs	r2, #4
 800b818:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b81a:	2304      	movs	r3, #4
 800b81c:	e0b1      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b830:	2301      	movs	r3, #1
 800b832:	e0a6      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	22c5      	movs	r2, #197	; 0xc5
 800b838:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff fd16 	bl	800b26c <SDMMC_GetCommandResponse>
 800b840:	4603      	mov	r3, r0
 800b842:	461a      	mov	r2, r3
 800b844:	7afb      	ldrb	r3, [r7, #11]
 800b846:	4293      	cmp	r3, r2
 800b848:	d001      	beq.n	800b84e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e099      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b84e:	2100      	movs	r1, #0
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f7ff fd18 	bl	800b286 <SDMMC_GetResponse>
 800b856:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4b4e      	ldr	r3, [pc, #312]	; (800b994 <SDMMC_GetCmdResp1+0x1d4>)
 800b85c:	4013      	ands	r3, r2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	e08d      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	da02      	bge.n	800b872 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b86c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b870:	e087      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	e080      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b88a:	2380      	movs	r3, #128	; 0x80
 800b88c:	e079      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b89c:	e071      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8ac:	e069      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8bc:	e061      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8cc:	e059      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8dc:	e051      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8ec:	e049      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8fc:	e041      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b90c:	e039      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b91c:	e031      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b928:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b92c:	e029      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b938:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b93c:	e021      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b94c:	e019      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b95c:	e011      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b96c:	e009      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f003 0308 	and.w	r3, r3, #8
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b978:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b97c:	e001      	b.n	800b982 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b97e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b982:	4618      	mov	r0, r3
 800b984:	371c      	adds	r7, #28
 800b986:	46bd      	mov	sp, r7
 800b988:	bd90      	pop	{r4, r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000018 	.word	0x20000018
 800b990:	10624dd3 	.word	0x10624dd3
 800b994:	fdffe008 	.word	0xfdffe008

0800b998 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b998:	b490      	push	{r4, r7}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <SDMMC_GetCmdResp2+0x84>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a1e      	ldr	r2, [pc, #120]	; (800ba20 <SDMMC_GetCmdResp2+0x88>)
 800b9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9aa:	0a5b      	lsrs	r3, r3, #9
 800b9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	1e5c      	subs	r4, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9c0:	e026      	b.n	800ba10 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0f0      	beq.n	800b9b4 <SDMMC_GetCmdResp2+0x1c>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1eb      	bne.n	800b9b4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d004      	beq.n	800b9f2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9ee:	2304      	movs	r3, #4
 800b9f0:	e00e      	b.n	800ba10 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d004      	beq.n	800ba08 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e003      	b.n	800ba10 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	22c5      	movs	r2, #197	; 0xc5
 800ba0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bc90      	pop	{r4, r7}
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	20000018 	.word	0x20000018
 800ba20:	10624dd3 	.word	0x10624dd3

0800ba24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba24:	b490      	push	{r4, r7}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba2c:	4b18      	ldr	r3, [pc, #96]	; (800ba90 <SDMMC_GetCmdResp3+0x6c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <SDMMC_GetCmdResp3+0x70>)
 800ba32:	fba2 2303 	umull	r2, r3, r2, r3
 800ba36:	0a5b      	lsrs	r3, r3, #9
 800ba38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba40:	4623      	mov	r3, r4
 800ba42:	1e5c      	subs	r4, r3, #1
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d102      	bne.n	800ba4e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba4c:	e01b      	b.n	800ba86 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0f0      	beq.n	800ba40 <SDMMC_GetCmdResp3+0x1c>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1eb      	bne.n	800ba40 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2204      	movs	r2, #4
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba7a:	2304      	movs	r3, #4
 800ba7c:	e003      	b.n	800ba86 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	22c5      	movs	r2, #197	; 0xc5
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc90      	pop	{r4, r7}
 800ba8e:	4770      	bx	lr
 800ba90:	20000018 	.word	0x20000018
 800ba94:	10624dd3 	.word	0x10624dd3

0800ba98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	460b      	mov	r3, r1
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800baa6:	4b34      	ldr	r3, [pc, #208]	; (800bb78 <SDMMC_GetCmdResp6+0xe0>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a34      	ldr	r2, [pc, #208]	; (800bb7c <SDMMC_GetCmdResp6+0xe4>)
 800baac:	fba2 2303 	umull	r2, r3, r2, r3
 800bab0:	0a5b      	lsrs	r3, r3, #9
 800bab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800baba:	4623      	mov	r3, r4
 800babc:	1e5c      	subs	r4, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bac6:	e052      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bacc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0f0      	beq.n	800baba <SDMMC_GetCmdResp6+0x22>
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1eb      	bne.n	800baba <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	f003 0304 	and.w	r3, r3, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	d004      	beq.n	800baf8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2204      	movs	r2, #4
 800baf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baf4:	2304      	movs	r3, #4
 800baf6:	e03a      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2201      	movs	r2, #1
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e02f      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff fbac 	bl	800b26c <SDMMC_GetCommandResponse>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d001      	beq.n	800bb22 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e025      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	22c5      	movs	r2, #197	; 0xc5
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb28:	2100      	movs	r1, #0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fbab 	bl	800b286 <SDMMC_GetResponse>
 800bb30:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	0c1b      	lsrs	r3, r3, #16
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e011      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb58:	e009      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb68:	e001      	b.n	800bb6e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000018 	.word	0x20000018
 800bb7c:	10624dd3 	.word	0x10624dd3

0800bb80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bb80:	b490      	push	{r4, r7}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb88:	4b21      	ldr	r3, [pc, #132]	; (800bc10 <SDMMC_GetCmdResp7+0x90>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a21      	ldr	r2, [pc, #132]	; (800bc14 <SDMMC_GetCmdResp7+0x94>)
 800bb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb92:	0a5b      	lsrs	r3, r3, #9
 800bb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	1e5c      	subs	r4, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bba8:	e02c      	b.n	800bc04 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f0      	beq.n	800bb9c <SDMMC_GetCmdResp7+0x1c>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1eb      	bne.n	800bb9c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc8:	f003 0304 	and.w	r3, r3, #4
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbd6:	2304      	movs	r3, #4
 800bbd8:	e014      	b.n	800bc04 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d004      	beq.n	800bbf0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e009      	b.n	800bc04 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2240      	movs	r2, #64	; 0x40
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc02:	2300      	movs	r3, #0
  
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bc90      	pop	{r4, r7}
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	20000018 	.word	0x20000018
 800bc14:	10624dd3 	.word	0x10624dd3

0800bc18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc1c:	4904      	ldr	r1, [pc, #16]	; (800bc30 <MX_FATFS_Init+0x18>)
 800bc1e:	4805      	ldr	r0, [pc, #20]	; (800bc34 <MX_FATFS_Init+0x1c>)
 800bc20:	f000 fa96 	bl	800c150 <FATFS_LinkDriver>
 800bc24:	4603      	mov	r3, r0
 800bc26:	461a      	mov	r2, r3
 800bc28:	4b03      	ldr	r3, [pc, #12]	; (800bc38 <MX_FATFS_Init+0x20>)
 800bc2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bc2c:	bf00      	nop
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000c6c8 	.word	0x2000c6c8
 800bc34:	08025d94 	.word	0x08025d94
 800bc38:	2000c6c4 	.word	0x2000c6c4

0800bc3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc46:	f000 f87b 	bl	800bd40 <BSP_SD_IsDetected>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d001      	beq.n	800bc54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc50:	2302      	movs	r3, #2
 800bc52:	e012      	b.n	800bc7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc54:	480b      	ldr	r0, [pc, #44]	; (800bc84 <BSP_SD_Init+0x48>)
 800bc56:	f7fc fae9 	bl	800822c <HAL_SD_Init>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc68:	4806      	ldr	r0, [pc, #24]	; (800bc84 <BSP_SD_Init+0x48>)
 800bc6a:	f7fc ff2b 	bl	8008ac4 <HAL_SD_ConfigWideBusOperation>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc78:	79fb      	ldrb	r3, [r7, #7]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	2000c150 	.word	0x2000c150

0800bc88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	68f9      	ldr	r1, [r7, #12]
 800bc9e:	4806      	ldr	r0, [pc, #24]	; (800bcb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bca0:	f7fc fb5c 	bl	800835c <HAL_SD_ReadBlocks_DMA>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	2000c150 	.word	0x2000c150

0800bcbc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	68f9      	ldr	r1, [r7, #12]
 800bcd2:	4806      	ldr	r0, [pc, #24]	; (800bcec <BSP_SD_WriteBlocks_DMA+0x30>)
 800bcd4:	f7fc fc2e 	bl	8008534 <HAL_SD_WriteBlocks_DMA>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	2000c150 	.word	0x2000c150

0800bcf0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bcf4:	4805      	ldr	r0, [pc, #20]	; (800bd0c <BSP_SD_GetCardState+0x1c>)
 800bcf6:	f7fc ff61 	bl	8008bbc <HAL_SD_GetCardState>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	bf14      	ite	ne
 800bd00:	2301      	movne	r3, #1
 800bd02:	2300      	moveq	r3, #0
 800bd04:	b2db      	uxtb	r3, r3
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2000c150 	.word	0x2000c150

0800bd10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	4803      	ldr	r0, [pc, #12]	; (800bd28 <BSP_SD_GetCardInfo+0x18>)
 800bd1c:	f7fc fea6 	bl	8008a6c <HAL_SD_GetCardInfo>
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	2000c150 	.word	0x2000c150

0800bd2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd34:	f000 f9b2 	bl	800c09c <BSP_SD_ReadCpltCallback>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd46:	2301      	movs	r3, #1
 800bd48:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bd4a:	f000 f80b 	bl	800bd64 <BSP_PlatformIsDetected>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd54:	2300      	movs	r3, #0
 800bd56:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	b2db      	uxtb	r3, r3
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bd6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd72:	4806      	ldr	r0, [pc, #24]	; (800bd8c <BSP_PlatformIsDetected+0x28>)
 800bd74:	f7f9 fe3a 	bl	80059ec <HAL_GPIO_ReadPin>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bd82:	79fb      	ldrb	r3, [r7, #7]
}  
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	40020800 	.word	0x40020800

0800bd90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bd98:	f000 fa26 	bl	800c1e8 <osKernelSysTick>
 800bd9c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bd9e:	e006      	b.n	800bdae <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bda0:	f7ff ffa6 	bl	800bcf0 <BSP_SD_GetCardState>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e009      	b.n	800bdc2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bdae:	f000 fa1b 	bl	800c1e8 <osKernelSysTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d8f0      	bhi.n	800bda0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bdbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <SD_CheckStatus+0x38>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bddc:	f7ff ff88 	bl	800bcf0 <BSP_SD_GetCardState>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d107      	bne.n	800bdf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bde6:	4b07      	ldr	r3, [pc, #28]	; (800be04 <SD_CheckStatus+0x38>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f023 0301 	bic.w	r3, r3, #1
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	4b04      	ldr	r3, [pc, #16]	; (800be04 <SD_CheckStatus+0x38>)
 800bdf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bdf6:	4b03      	ldr	r3, [pc, #12]	; (800be04 <SD_CheckStatus+0x38>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b2db      	uxtb	r3, r3
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	20000021 	.word	0x20000021

0800be08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800be12:	4b20      	ldr	r3, [pc, #128]	; (800be94 <SD_initialize+0x8c>)
 800be14:	2201      	movs	r2, #1
 800be16:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800be18:	f000 f9da 	bl	800c1d0 <osKernelRunning>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d030      	beq.n	800be84 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be22:	f7ff ff0b 	bl	800bc3c <BSP_SD_Init>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d107      	bne.n	800be3c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff ffcc 	bl	800bdcc <SD_CheckStatus>
 800be34:	4603      	mov	r3, r0
 800be36:	461a      	mov	r2, r3
 800be38:	4b16      	ldr	r3, [pc, #88]	; (800be94 <SD_initialize+0x8c>)
 800be3a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be3c:	4b15      	ldr	r3, [pc, #84]	; (800be94 <SD_initialize+0x8c>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b01      	cmp	r3, #1
 800be44:	d01e      	beq.n	800be84 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800be46:	4b14      	ldr	r3, [pc, #80]	; (800be98 <SD_initialize+0x90>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10e      	bne.n	800be6c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800be4e:	4b13      	ldr	r3, [pc, #76]	; (800be9c <SD_initialize+0x94>)
 800be50:	f107 0408 	add.w	r4, r7, #8
 800be54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800be5a:	f107 0308 	add.w	r3, r7, #8
 800be5e:	2100      	movs	r1, #0
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fa31 	bl	800c2c8 <osMessageCreate>
 800be66:	4602      	mov	r2, r0
 800be68:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <SD_initialize+0x90>)
 800be6a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <SD_initialize+0x90>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d107      	bne.n	800be84 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800be74:	4b07      	ldr	r3, [pc, #28]	; (800be94 <SD_initialize+0x8c>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <SD_initialize+0x8c>)
 800be82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <SD_initialize+0x8c>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b2db      	uxtb	r3, r3
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	371c      	adds	r7, #28
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd90      	pop	{r4, r7, pc}
 800be92:	bf00      	nop
 800be94:	20000021 	.word	0x20000021
 800be98:	200003a8 	.word	0x200003a8
 800be9c:	0802567c 	.word	0x0802567c

0800bea0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff ff8d 	bl	800bdcc <SD_CheckStatus>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08a      	sub	sp, #40	; 0x28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60b9      	str	r1, [r7, #8]
 800bec4:	607a      	str	r2, [r7, #4]
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bed2:	f247 5030 	movw	r0, #30000	; 0x7530
 800bed6:	f7ff ff5b 	bl	800bd90 <SD_CheckStatusWithTimeout>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da02      	bge.n	800bee6 <SD_read+0x2a>
  {
    return res;
 800bee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bee4:	e032      	b.n	800bf4c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	6879      	ldr	r1, [r7, #4]
 800beea:	68b8      	ldr	r0, [r7, #8]
 800beec:	f7ff fecc 	bl	800bc88 <BSP_SD_ReadBlocks_DMA>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800befa:	2b00      	cmp	r3, #0
 800befc:	d124      	bne.n	800bf48 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800befe:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <SD_read+0x98>)
 800bf00:	6819      	ldr	r1, [r3, #0]
 800bf02:	f107 0314 	add.w	r3, r7, #20
 800bf06:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fa46 	bl	800c39c <osMessageGet>

    if (event.status == osEventMessage)
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b10      	cmp	r3, #16
 800bf14:	d118      	bne.n	800bf48 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d115      	bne.n	800bf48 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bf1c:	f000 f964 	bl	800c1e8 <osKernelSysTick>
 800bf20:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf22:	e008      	b.n	800bf36 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf24:	f7ff fee4 	bl	800bcf0 <BSP_SD_GetCardState>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <SD_read+0x7a>
              {
                res = RES_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf34:	e008      	b.n	800bf48 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf36:	f000 f957 	bl	800c1e8 <osKernelSysTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d9ed      	bls.n	800bf24 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bf48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3728      	adds	r7, #40	; 0x28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200003a8 	.word	0x200003a8

0800bf58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf6e:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf72:	f7ff ff0d 	bl	800bd90 <SD_CheckStatusWithTimeout>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	da02      	bge.n	800bf82 <SD_write+0x2a>
  {
    return res;
 800bf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf80:	e02e      	b.n	800bfe0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	68b8      	ldr	r0, [r7, #8]
 800bf88:	f7ff fe98 	bl	800bcbc <BSP_SD_WriteBlocks_DMA>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d124      	bne.n	800bfdc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <SD_write+0x90>)
 800bf94:	6819      	ldr	r1, [r3, #0]
 800bf96:	f107 0314 	add.w	r3, r7, #20
 800bf9a:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f9fc 	bl	800c39c <osMessageGet>

    if (event.status == osEventMessage)
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b10      	cmp	r3, #16
 800bfa8:	d118      	bne.n	800bfdc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d115      	bne.n	800bfdc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bfb0:	f000 f91a 	bl	800c1e8 <osKernelSysTick>
 800bfb4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bfb6:	e008      	b.n	800bfca <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfb8:	f7ff fe9a 	bl	800bcf0 <BSP_SD_GetCardState>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d103      	bne.n	800bfca <SD_write+0x72>
          {
            res = RES_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bfc8:	e008      	b.n	800bfdc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bfca:	f000 f90d 	bl	800c1e8 <osKernelSysTick>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d9ed      	bls.n	800bfb8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3728      	adds	r7, #40	; 0x28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	200003a8 	.word	0x200003a8

0800bfec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08c      	sub	sp, #48	; 0x30
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	603a      	str	r2, [r7, #0]
 800bff6:	71fb      	strb	r3, [r7, #7]
 800bff8:	460b      	mov	r3, r1
 800bffa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c002:	4b25      	ldr	r3, [pc, #148]	; (800c098 <SD_ioctl+0xac>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <SD_ioctl+0x28>
 800c010:	2303      	movs	r3, #3
 800c012:	e03c      	b.n	800c08e <SD_ioctl+0xa2>

  switch (cmd)
 800c014:	79bb      	ldrb	r3, [r7, #6]
 800c016:	2b03      	cmp	r3, #3
 800c018:	d834      	bhi.n	800c084 <SD_ioctl+0x98>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <SD_ioctl+0x34>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c031 	.word	0x0800c031
 800c024:	0800c039 	.word	0x0800c039
 800c028:	0800c051 	.word	0x0800c051
 800c02c:	0800c06b 	.word	0x0800c06b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c036:	e028      	b.n	800c08a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fe67 	bl	800bd10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c04e:	e01c      	b.n	800c08a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c050:	f107 030c 	add.w	r3, r7, #12
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fe5b 	bl	800bd10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c068:	e00f      	b.n	800c08a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fe4e 	bl	800bd10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	0a5a      	lsrs	r2, r3, #9
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c082:	e002      	b.n	800c08a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c084:	2304      	movs	r3, #4
 800c086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c08a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3730      	adds	r7, #48	; 0x30
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20000021 	.word	0x20000021

0800c09c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <BSP_SD_ReadCpltCallback+0x18>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f937 	bl	800c31c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c0ae:	bf00      	nop
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	200003a8 	.word	0x200003a8

0800c0b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0d0:	7a5b      	ldrb	r3, [r3, #9]
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d131      	bne.n	800c13c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c0d8:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0da:	7a5b      	ldrb	r3, [r3, #9]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c0e6:	4b19      	ldr	r3, [pc, #100]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0e8:	7a5b      	ldrb	r3, [r3, #9]
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	4a17      	ldr	r2, [pc, #92]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c0f6:	4b15      	ldr	r3, [pc, #84]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0f8:	7a5b      	ldrb	r3, [r3, #9]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c100:	4413      	add	r3, r2
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c108:	7a5b      	ldrb	r3, [r3, #9]
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	b2d1      	uxtb	r1, r2
 800c110:	4a0e      	ldr	r2, [pc, #56]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c112:	7251      	strb	r1, [r2, #9]
 800c114:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c116:	7dbb      	ldrb	r3, [r7, #22]
 800c118:	3330      	adds	r3, #48	; 0x30
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	3301      	adds	r3, #1
 800c124:	223a      	movs	r2, #58	; 0x3a
 800c126:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3302      	adds	r3, #2
 800c12c:	222f      	movs	r2, #47	; 0x2f
 800c12e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3303      	adds	r3, #3
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	200003ac 	.word	0x200003ac

0800c150 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c15a:	2200      	movs	r2, #0
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff ffaa 	bl	800c0b8 <FATFS_LinkDriverEx>
 800c164:	4603      	mov	r3, r0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c16e:	b480      	push	{r7}
 800c170:	b085      	sub	sp, #20
 800c172:	af00      	add	r7, sp, #0
 800c174:	4603      	mov	r3, r0
 800c176:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c178:	2300      	movs	r3, #0
 800c17a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c17c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c180:	2b84      	cmp	r3, #132	; 0x84
 800c182:	d005      	beq.n	800c190 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c184:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	3303      	adds	r3, #3
 800c18e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c190:	68fb      	ldr	r3, [r7, #12]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a4:	f3ef 8305 	mrs	r3, IPSR
 800c1a8:	607b      	str	r3, [r7, #4]
  return(result);
 800c1aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bf14      	ite	ne
 800c1b0:	2301      	movne	r3, #1
 800c1b2:	2300      	moveq	r3, #0
 800c1b4:	b2db      	uxtb	r3, r3
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c1c6:	f001 faff 	bl	800d7c8 <vTaskStartScheduler>
  
  return osOK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c1d4:	f001 ff4a 	bl	800e06c <xTaskGetSchedulerState>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d101      	bne.n	800c1e2 <osKernelRunning+0x12>
    return 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e000      	b.n	800c1e4 <osKernelRunning+0x14>
  else
    return 1;
 800c1e2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c1ec:	f7ff ffd7 	bl	800c19e <inHandlerMode>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c1f6:	f001 fc05 	bl	800da04 <xTaskGetTickCountFromISR>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	e002      	b.n	800c204 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c1fe:	f001 fbf1 	bl	800d9e4 <xTaskGetTickCount>
 800c202:	4603      	mov	r3, r0
  }
}
 800c204:	4618      	mov	r0, r3
 800c206:	bd80      	pop	{r7, pc}

0800c208 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c20a:	b089      	sub	sp, #36	; 0x24
 800c20c:	af04      	add	r7, sp, #16
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d020      	beq.n	800c25c <osThreadCreate+0x54>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01c      	beq.n	800c25c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685c      	ldr	r4, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681d      	ldr	r5, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	691e      	ldr	r6, [r3, #16]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff ff9a 	bl	800c16e <makeFreeRtosPriority>
 800c23a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c244:	9202      	str	r2, [sp, #8]
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	9100      	str	r1, [sp, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	4632      	mov	r2, r6
 800c24e:	4629      	mov	r1, r5
 800c250:	4620      	mov	r0, r4
 800c252:	f001 f8e0 	bl	800d416 <xTaskCreateStatic>
 800c256:	4603      	mov	r3, r0
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	e01c      	b.n	800c296 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685c      	ldr	r4, [r3, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c268:	b29e      	uxth	r6, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff ff7c 	bl	800c16e <makeFreeRtosPriority>
 800c276:	4602      	mov	r2, r0
 800c278:	f107 030c 	add.w	r3, r7, #12
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	9200      	str	r2, [sp, #0]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	4632      	mov	r2, r6
 800c284:	4629      	mov	r1, r5
 800c286:	4620      	mov	r0, r4
 800c288:	f001 f925 	bl	800d4d6 <xTaskCreate>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d001      	beq.n	800c296 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	e000      	b.n	800c298 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c296:	68fb      	ldr	r3, [r7, #12]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <osDelay+0x16>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	e000      	b.n	800c2b8 <osDelay+0x18>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f001 fa4f 	bl	800d75c <vTaskDelay>
  
  return osOK;
 800c2be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c2c8:	b590      	push	{r4, r7, lr}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d012      	beq.n	800c300 <osMessageCreate+0x38>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00e      	beq.n	800c300 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6818      	ldr	r0, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6859      	ldr	r1, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68dc      	ldr	r4, [r3, #12]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	f000 f9e2 	bl	800c6c0 <xQueueGenericCreateStatic>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	e008      	b.n	800c312 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	4619      	mov	r1, r3
 800c30c:	f000 fa55 	bl	800c7ba <xQueueGenericCreate>
 800c310:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	bd90      	pop	{r4, r7, pc}
	...

0800c31c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <osMessagePut+0x1e>
    ticks = 1;
 800c336:	2301      	movs	r3, #1
 800c338:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c33a:	f7ff ff30 	bl	800c19e <inHandlerMode>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d018      	beq.n	800c376 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c344:	f107 0210 	add.w	r2, r7, #16
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	2300      	movs	r3, #0
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fb96 	bl	800ca80 <xQueueGenericSendFromISR>
 800c354:	4603      	mov	r3, r0
 800c356:	2b01      	cmp	r3, #1
 800c358:	d001      	beq.n	800c35e <osMessagePut+0x42>
      return osErrorOS;
 800c35a:	23ff      	movs	r3, #255	; 0xff
 800c35c:	e018      	b.n	800c390 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d014      	beq.n	800c38e <osMessagePut+0x72>
 800c364:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <osMessagePut+0x7c>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	e00b      	b.n	800c38e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c376:	f107 0108 	add.w	r1, r7, #8
 800c37a:	2300      	movs	r3, #0
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 fa7c 	bl	800c87c <xQueueGenericSend>
 800c384:	4603      	mov	r3, r0
 800c386:	2b01      	cmp	r3, #1
 800c388:	d001      	beq.n	800c38e <osMessagePut+0x72>
      return osErrorOS;
 800c38a:	23ff      	movs	r3, #255	; 0xff
 800c38c:	e000      	b.n	800c390 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b08b      	sub	sp, #44	; 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c3b6:	2380      	movs	r3, #128	; 0x80
 800c3b8:	617b      	str	r3, [r7, #20]
    return event;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	461c      	mov	r4, r3
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3ca:	e054      	b.n	800c476 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d103      	bne.n	800c3e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e2:	e009      	b.n	800c3f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d006      	beq.n	800c3f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <osMessageGet+0x5c>
      ticks = 1;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c3f8:	f7ff fed1 	bl	800c19e <inHandlerMode>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01c      	beq.n	800c43c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c402:	f107 0220 	add.w	r2, r7, #32
 800c406:	f107 0314 	add.w	r3, r7, #20
 800c40a:	3304      	adds	r3, #4
 800c40c:	4619      	mov	r1, r3
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f000 fe56 	bl	800d0c0 <xQueueReceiveFromISR>
 800c414:	4603      	mov	r3, r0
 800c416:	2b01      	cmp	r3, #1
 800c418:	d102      	bne.n	800c420 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c41a:	2310      	movs	r3, #16
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e001      	b.n	800c424 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01d      	beq.n	800c466 <osMessageGet+0xca>
 800c42a:	4b15      	ldr	r3, [pc, #84]	; (800c480 <osMessageGet+0xe4>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	e014      	b.n	800c466 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	3304      	adds	r3, #4
 800c442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c444:	4619      	mov	r1, r3
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	f000 fc48 	bl	800ccdc <xQueueReceive>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d102      	bne.n	800c458 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c452:	2310      	movs	r3, #16
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e006      	b.n	800c466 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <osMessageGet+0xc6>
 800c45e:	2300      	movs	r3, #0
 800c460:	e000      	b.n	800c464 <osMessageGet+0xc8>
 800c462:	2340      	movs	r3, #64	; 0x40
 800c464:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	461c      	mov	r4, r3
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	372c      	adds	r7, #44	; 0x2c
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd90      	pop	{r4, r7, pc}
 800c47e:	bf00      	nop
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f103 0208 	add.w	r2, r3, #8
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f04f 32ff 	mov.w	r2, #4294967295
 800c49c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f103 0208 	add.w	r2, r3, #8
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f103 0208 	add.w	r2, r3, #8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4d2:	bf00      	nop
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	689a      	ldr	r2, [r3, #8]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
}
 800c51a:	bf00      	nop
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53c:	d103      	bne.n	800c546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e00c      	b.n	800c560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3308      	adds	r3, #8
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	e002      	b.n	800c554 <vListInsert+0x2e>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d2f6      	bcs.n	800c54e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	601a      	str	r2, [r3, #0]
}
 800c58c:	bf00      	nop
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	6892      	ldr	r2, [r2, #8]
 800c5ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	6852      	ldr	r2, [r2, #4]
 800c5b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d103      	bne.n	800c5cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	1e5a      	subs	r2, r3, #1
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10b      	bne.n	800c618 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	b672      	cpsid	i
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	b662      	cpsie	i
 800c614:	60bb      	str	r3, [r7, #8]
 800c616:	e7fe      	b.n	800c616 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c618:	f002 f86e 	bl	800e6f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c624:	68f9      	ldr	r1, [r7, #12]
 800c626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c628:	fb01 f303 	mul.w	r3, r1, r3
 800c62c:	441a      	add	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c648:	3b01      	subs	r3, #1
 800c64a:	68f9      	ldr	r1, [r7, #12]
 800c64c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c64e:	fb01 f303 	mul.w	r3, r1, r3
 800c652:	441a      	add	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	22ff      	movs	r2, #255	; 0xff
 800c65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	22ff      	movs	r2, #255	; 0xff
 800c664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d114      	bne.n	800c698 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01a      	beq.n	800c6ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	3310      	adds	r3, #16
 800c67a:	4618      	mov	r0, r3
 800c67c:	f001 fb36 	bl	800dcec <xTaskRemoveFromEventList>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d012      	beq.n	800c6ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c686:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <xQueueGenericReset+0xd0>)
 800c688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	e009      	b.n	800c6ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3310      	adds	r3, #16
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fef1 	bl	800c484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3324      	adds	r3, #36	; 0x24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff feec 	bl	800c484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6ac:	f002 f856 	bl	800e75c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6b0:	2301      	movs	r3, #1
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08e      	sub	sp, #56	; 0x38
 800c6c4:	af02      	add	r7, sp, #8
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10b      	bne.n	800c6ec <xQueueGenericCreateStatic+0x2c>
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	b672      	cpsid	i
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	b662      	cpsie	i
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ea:	e7fe      	b.n	800c6ea <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10b      	bne.n	800c70a <xQueueGenericCreateStatic+0x4a>
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	b672      	cpsid	i
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	b662      	cpsie	i
 800c706:	627b      	str	r3, [r7, #36]	; 0x24
 800c708:	e7fe      	b.n	800c708 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <xQueueGenericCreateStatic+0x56>
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <xQueueGenericCreateStatic+0x5a>
 800c716:	2301      	movs	r3, #1
 800c718:	e000      	b.n	800c71c <xQueueGenericCreateStatic+0x5c>
 800c71a:	2300      	movs	r3, #0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10b      	bne.n	800c738 <xQueueGenericCreateStatic+0x78>
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	623b      	str	r3, [r7, #32]
 800c736:	e7fe      	b.n	800c736 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <xQueueGenericCreateStatic+0x84>
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <xQueueGenericCreateStatic+0x88>
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <xQueueGenericCreateStatic+0x8a>
 800c748:	2300      	movs	r3, #0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <xQueueGenericCreateStatic+0xa6>
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	b672      	cpsid	i
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	b662      	cpsie	i
 800c762:	61fb      	str	r3, [r7, #28]
 800c764:	e7fe      	b.n	800c764 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c766:	2348      	movs	r3, #72	; 0x48
 800c768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2b48      	cmp	r3, #72	; 0x48
 800c76e:	d00b      	beq.n	800c788 <xQueueGenericCreateStatic+0xc8>
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	b672      	cpsid	i
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	b662      	cpsie	i
 800c784:	61bb      	str	r3, [r7, #24]
 800c786:	e7fe      	b.n	800c786 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c788:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00d      	beq.n	800c7b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c79c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 f846 	bl	800c83c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3730      	adds	r7, #48	; 0x30
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b08a      	sub	sp, #40	; 0x28
 800c7be:	af02      	add	r7, sp, #8
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10b      	bne.n	800c7e6 <xQueueGenericCreate+0x2c>
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	b672      	cpsid	i
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	b662      	cpsie	i
 800c7e2:	613b      	str	r3, [r7, #16]
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	e004      	b.n	800c7fc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
 800c7fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	3348      	adds	r3, #72	; 0x48
 800c800:	4618      	mov	r0, r3
 800c802:	f002 f89b 	bl	800e93c <pvPortMalloc>
 800c806:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d011      	beq.n	800c832 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	3348      	adds	r3, #72	; 0x48
 800c816:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	4613      	mov	r3, r2
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f805 	bl	800c83c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c832:	69bb      	ldr	r3, [r7, #24]
	}
 800c834:	4618      	mov	r0, r3
 800c836:	3720      	adds	r7, #32
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d103      	bne.n	800c858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	e002      	b.n	800c85e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c86a:	2101      	movs	r1, #1
 800c86c:	69b8      	ldr	r0, [r7, #24]
 800c86e:	f7ff febd 	bl	800c5ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08e      	sub	sp, #56	; 0x38
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c88a:	2300      	movs	r3, #0
 800c88c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10b      	bne.n	800c8b0 <xQueueGenericSend+0x34>
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	b672      	cpsid	i
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	b662      	cpsie	i
 800c8ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ae:	e7fe      	b.n	800c8ae <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d103      	bne.n	800c8be <xQueueGenericSend+0x42>
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <xQueueGenericSend+0x46>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e000      	b.n	800c8c4 <xQueueGenericSend+0x48>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10b      	bne.n	800c8e0 <xQueueGenericSend+0x64>
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	b672      	cpsid	i
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	b662      	cpsie	i
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8de:	e7fe      	b.n	800c8de <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d103      	bne.n	800c8ee <xQueueGenericSend+0x72>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d101      	bne.n	800c8f2 <xQueueGenericSend+0x76>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <xQueueGenericSend+0x78>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10b      	bne.n	800c910 <xQueueGenericSend+0x94>
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	b672      	cpsid	i
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	b662      	cpsie	i
 800c90c:	623b      	str	r3, [r7, #32]
 800c90e:	e7fe      	b.n	800c90e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c910:	f001 fbac 	bl	800e06c <xTaskGetSchedulerState>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <xQueueGenericSend+0xa4>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <xQueueGenericSend+0xa8>
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <xQueueGenericSend+0xaa>
 800c924:	2300      	movs	r3, #0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10b      	bne.n	800c942 <xQueueGenericSend+0xc6>
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	b672      	cpsid	i
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	b662      	cpsie	i
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	e7fe      	b.n	800c940 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c942:	f001 fed9 	bl	800e6f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94e:	429a      	cmp	r2, r3
 800c950:	d302      	bcc.n	800c958 <xQueueGenericSend+0xdc>
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b02      	cmp	r3, #2
 800c956:	d129      	bne.n	800c9ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	68b9      	ldr	r1, [r7, #8]
 800c95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c95e:	f000 fc4a 	bl	800d1f6 <prvCopyDataToQueue>
 800c962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d010      	beq.n	800c98e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	4618      	mov	r0, r3
 800c972:	f001 f9bb 	bl	800dcec <xTaskRemoveFromEventList>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c97c:	4b3f      	ldr	r3, [pc, #252]	; (800ca7c <xQueueGenericSend+0x200>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	e00a      	b.n	800c9a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d007      	beq.n	800c9a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c994:	4b39      	ldr	r3, [pc, #228]	; (800ca7c <xQueueGenericSend+0x200>)
 800c996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9a4:	f001 feda 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e063      	b.n	800ca74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d103      	bne.n	800c9ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9b2:	f001 fed3 	bl	800e75c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e05c      	b.n	800ca74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 f9f5 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9ce:	f001 fec5 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9d2:	f000 ff5b 	bl	800d88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9d6:	f001 fe8f 	bl	800e6f8 <vPortEnterCritical>
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9e0:	b25b      	sxtb	r3, r3
 800c9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e6:	d103      	bne.n	800c9f0 <xQueueGenericSend+0x174>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9f6:	b25b      	sxtb	r3, r3
 800c9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fc:	d103      	bne.n	800ca06 <xQueueGenericSend+0x18a>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca06:	f001 fea9 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca0a:	1d3a      	adds	r2, r7, #4
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 f9e4 	bl	800dde0 <xTaskCheckForTimeOut>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d124      	bne.n	800ca68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca20:	f000 fce1 	bl	800d3e6 <prvIsQueueFull>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d018      	beq.n	800ca5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 f934 	bl	800dca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca3a:	f000 fc6c 	bl	800d316 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca3e:	f000 ff33 	bl	800d8a8 <xTaskResumeAll>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f47f af7c 	bne.w	800c942 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca4a:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <xQueueGenericSend+0x200>)
 800ca4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	e772      	b.n	800c942 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca5e:	f000 fc5a 	bl	800d316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca62:	f000 ff21 	bl	800d8a8 <xTaskResumeAll>
 800ca66:	e76c      	b.n	800c942 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca6a:	f000 fc54 	bl	800d316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca6e:	f000 ff1b 	bl	800d8a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3738      	adds	r7, #56	; 0x38
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08e      	sub	sp, #56	; 0x38
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10b      	bne.n	800cab0 <xQueueGenericSendFromISR+0x30>
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	b672      	cpsid	i
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	b662      	cpsie	i
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
 800caae:	e7fe      	b.n	800caae <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <xQueueGenericSendFromISR+0x3e>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <xQueueGenericSendFromISR+0x42>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <xQueueGenericSendFromISR+0x44>
 800cac2:	2300      	movs	r3, #0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <xQueueGenericSendFromISR+0x60>
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	b672      	cpsid	i
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	b662      	cpsie	i
 800cadc:	623b      	str	r3, [r7, #32]
 800cade:	e7fe      	b.n	800cade <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d103      	bne.n	800caee <xQueueGenericSendFromISR+0x6e>
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <xQueueGenericSendFromISR+0x72>
 800caee:	2301      	movs	r3, #1
 800caf0:	e000      	b.n	800caf4 <xQueueGenericSendFromISR+0x74>
 800caf2:	2300      	movs	r3, #0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10b      	bne.n	800cb10 <xQueueGenericSendFromISR+0x90>
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	b672      	cpsid	i
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	b662      	cpsie	i
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	e7fe      	b.n	800cb0e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb10:	f001 fed2 	bl	800e8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb14:	f3ef 8211 	mrs	r2, BASEPRI
 800cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1c:	b672      	cpsid	i
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	b662      	cpsie	i
 800cb2c:	61ba      	str	r2, [r7, #24]
 800cb2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d302      	bcc.n	800cb46 <xQueueGenericSendFromISR+0xc6>
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d12c      	bne.n	800cba0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb56:	f000 fb4e 	bl	800d1f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb62:	d112      	bne.n	800cb8a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d016      	beq.n	800cb9a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	3324      	adds	r3, #36	; 0x24
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f8bb 	bl	800dcec <xTaskRemoveFromEventList>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00e      	beq.n	800cb9a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00b      	beq.n	800cb9a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	e007      	b.n	800cb9a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb8e:	3301      	adds	r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	b25a      	sxtb	r2, r3
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb9e:	e001      	b.n	800cba4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	637b      	str	r3, [r7, #52]	; 0x34
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3738      	adds	r7, #56	; 0x38
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08e      	sub	sp, #56	; 0x38
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10b      	bne.n	800cbe4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	b672      	cpsid	i
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	b662      	cpsie	i
 800cbe0:	623b      	str	r3, [r7, #32]
 800cbe2:	e7fe      	b.n	800cbe2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <xQueueGiveFromISR+0x4c>
 800cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf0:	b672      	cpsid	i
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	b662      	cpsie	i
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	e7fe      	b.n	800cc02 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d103      	bne.n	800cc14 <xQueueGiveFromISR+0x5c>
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <xQueueGiveFromISR+0x60>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e000      	b.n	800cc1a <xQueueGiveFromISR+0x62>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10b      	bne.n	800cc36 <xQueueGiveFromISR+0x7e>
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	b672      	cpsid	i
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	b662      	cpsie	i
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	e7fe      	b.n	800cc34 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc36:	f001 fe3f 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800cc3a:	f3ef 8211 	mrs	r2, BASEPRI
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	b672      	cpsid	i
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	b662      	cpsie	i
 800cc52:	617a      	str	r2, [r7, #20]
 800cc54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d22b      	bcs.n	800ccc2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc84:	d112      	bne.n	800ccac <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d016      	beq.n	800ccbc <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	3324      	adds	r3, #36	; 0x24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 f82a 	bl	800dcec <xTaskRemoveFromEventList>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00e      	beq.n	800ccbc <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2201      	movs	r2, #1
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e007      	b.n	800ccbc <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	b25a      	sxtb	r2, r3
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc0:	e001      	b.n	800ccc6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3738      	adds	r7, #56	; 0x38
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
	...

0800ccdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08c      	sub	sp, #48	; 0x30
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10b      	bne.n	800cd0e <xQueueReceive+0x32>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfa:	b672      	cpsid	i
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	b662      	cpsie	i
 800cd0a:	623b      	str	r3, [r7, #32]
 800cd0c:	e7fe      	b.n	800cd0c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d103      	bne.n	800cd1c <xQueueReceive+0x40>
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <xQueueReceive+0x44>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e000      	b.n	800cd22 <xQueueReceive+0x46>
 800cd20:	2300      	movs	r3, #0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10b      	bne.n	800cd3e <xQueueReceive+0x62>
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	b672      	cpsid	i
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	b662      	cpsie	i
 800cd3a:	61fb      	str	r3, [r7, #28]
 800cd3c:	e7fe      	b.n	800cd3c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd3e:	f001 f995 	bl	800e06c <xTaskGetSchedulerState>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <xQueueReceive+0x72>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <xQueueReceive+0x76>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e000      	b.n	800cd54 <xQueueReceive+0x78>
 800cd52:	2300      	movs	r3, #0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10b      	bne.n	800cd70 <xQueueReceive+0x94>
 800cd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5c:	b672      	cpsid	i
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	b662      	cpsie	i
 800cd6c:	61bb      	str	r3, [r7, #24]
 800cd6e:	e7fe      	b.n	800cd6e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd70:	f001 fcc2 	bl	800e6f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d01f      	beq.n	800cdc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd80:	68b9      	ldr	r1, [r7, #8]
 800cd82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd84:	f000 faa1 	bl	800d2ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	1e5a      	subs	r2, r3, #1
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00f      	beq.n	800cdb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	3310      	adds	r3, #16
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 ffa5 	bl	800dcec <xTaskRemoveFromEventList>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d007      	beq.n	800cdb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cda8:	4b3c      	ldr	r3, [pc, #240]	; (800ce9c <xQueueReceive+0x1c0>)
 800cdaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdb8:	f001 fcd0 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e069      	b.n	800ce94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d103      	bne.n	800cdce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdc6:	f001 fcc9 	bl	800e75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e062      	b.n	800ce94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdd4:	f107 0310 	add.w	r3, r7, #16
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 ffeb 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdde:	2301      	movs	r3, #1
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cde2:	f001 fcbb 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cde6:	f000 fd51 	bl	800d88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdea:	f001 fc85 	bl	800e6f8 <vPortEnterCritical>
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdf4:	b25b      	sxtb	r3, r3
 800cdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfa:	d103      	bne.n	800ce04 <xQueueReceive+0x128>
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce0a:	b25b      	sxtb	r3, r3
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce10:	d103      	bne.n	800ce1a <xQueueReceive+0x13e>
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce1a:	f001 fc9f 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce1e:	1d3a      	adds	r2, r7, #4
 800ce20:	f107 0310 	add.w	r3, r7, #16
 800ce24:	4611      	mov	r1, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 ffda 	bl	800dde0 <xTaskCheckForTimeOut>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d123      	bne.n	800ce7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce34:	f000 fac1 	bl	800d3ba <prvIsQueueEmpty>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d017      	beq.n	800ce6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	3324      	adds	r3, #36	; 0x24
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	4611      	mov	r1, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 ff2a 	bl	800dca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce4e:	f000 fa62 	bl	800d316 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce52:	f000 fd29 	bl	800d8a8 <xTaskResumeAll>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d189      	bne.n	800cd70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <xQueueReceive+0x1c0>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	e780      	b.n	800cd70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce70:	f000 fa51 	bl	800d316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce74:	f000 fd18 	bl	800d8a8 <xTaskResumeAll>
 800ce78:	e77a      	b.n	800cd70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce7c:	f000 fa4b 	bl	800d316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce80:	f000 fd12 	bl	800d8a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce86:	f000 fa98 	bl	800d3ba <prvIsQueueEmpty>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f43f af6f 	beq.w	800cd70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3730      	adds	r7, #48	; 0x30
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	e000ed04 	.word	0xe000ed04

0800cea0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08e      	sub	sp, #56	; 0x38
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xQueueSemaphoreTake+0x34>
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	b672      	cpsid	i
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	b662      	cpsie	i
 800ced0:	623b      	str	r3, [r7, #32]
 800ced2:	e7fe      	b.n	800ced2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <xQueueSemaphoreTake+0x54>
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	b672      	cpsid	i
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	b662      	cpsie	i
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	e7fe      	b.n	800cef2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cef4:	f001 f8ba 	bl	800e06c <xTaskGetSchedulerState>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <xQueueSemaphoreTake+0x64>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <xQueueSemaphoreTake+0x68>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e000      	b.n	800cf0a <xQueueSemaphoreTake+0x6a>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10b      	bne.n	800cf26 <xQueueSemaphoreTake+0x86>
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	b672      	cpsid	i
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	b662      	cpsie	i
 800cf22:	61bb      	str	r3, [r7, #24]
 800cf24:	e7fe      	b.n	800cf24 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf26:	f001 fbe7 	bl	800e6f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d024      	beq.n	800cf80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	1e5a      	subs	r2, r3, #1
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d104      	bne.n	800cf50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf46:	f001 fa53 	bl	800e3f0 <pvTaskIncrementMutexHeldCount>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00f      	beq.n	800cf78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	3310      	adds	r3, #16
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 fec5 	bl	800dcec <xTaskRemoveFromEventList>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d007      	beq.n	800cf78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf68:	4b54      	ldr	r3, [pc, #336]	; (800d0bc <xQueueSemaphoreTake+0x21c>)
 800cf6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf78:	f001 fbf0 	bl	800e75c <vPortExitCritical>
				return pdPASS;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e098      	b.n	800d0b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d112      	bne.n	800cfac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <xQueueSemaphoreTake+0x104>
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	b672      	cpsid	i
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	b662      	cpsie	i
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	e7fe      	b.n	800cfa2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cfa4:	f001 fbda 	bl	800e75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e082      	b.n	800d0b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fefc 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfc0:	f001 fbcc 	bl	800e75c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfc4:	f000 fc62 	bl	800d88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfc8:	f001 fb96 	bl	800e6f8 <vPortEnterCritical>
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfd2:	b25b      	sxtb	r3, r3
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd8:	d103      	bne.n	800cfe2 <xQueueSemaphoreTake+0x142>
 800cfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfe8:	b25b      	sxtb	r3, r3
 800cfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfee:	d103      	bne.n	800cff8 <xQueueSemaphoreTake+0x158>
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cff8:	f001 fbb0 	bl	800e75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cffc:	463a      	mov	r2, r7
 800cffe:	f107 030c 	add.w	r3, r7, #12
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f000 feeb 	bl	800dde0 <xTaskCheckForTimeOut>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d132      	bne.n	800d076 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d012:	f000 f9d2 	bl	800d3ba <prvIsQueueEmpty>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d026      	beq.n	800d06a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d109      	bne.n	800d038 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d024:	f001 fb68 	bl	800e6f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 f83b 	bl	800e0a8 <xTaskPriorityInherit>
 800d032:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d034:	f001 fb92 	bl	800e75c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	3324      	adds	r3, #36	; 0x24
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f000 fe2d 	bl	800dca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d048:	f000 f965 	bl	800d316 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d04c:	f000 fc2c 	bl	800d8a8 <xTaskResumeAll>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	f47f af67 	bne.w	800cf26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d058:	4b18      	ldr	r3, [pc, #96]	; (800d0bc <xQueueSemaphoreTake+0x21c>)
 800d05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	e75d      	b.n	800cf26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06c:	f000 f953 	bl	800d316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d070:	f000 fc1a 	bl	800d8a8 <xTaskResumeAll>
 800d074:	e757      	b.n	800cf26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d078:	f000 f94d 	bl	800d316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d07c:	f000 fc14 	bl	800d8a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d082:	f000 f99a 	bl	800d3ba <prvIsQueueEmpty>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f43f af4c 	beq.w	800cf26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00d      	beq.n	800d0b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d094:	f001 fb30 	bl	800e6f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d09a:	f000 f894 	bl	800d1c6 <prvGetDisinheritPriorityAfterTimeout>
 800d09e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f001 f906 	bl	800e2b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d0ac:	f001 fb56 	bl	800e75c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3738      	adds	r7, #56	; 0x38
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	e000ed04 	.word	0xe000ed04

0800d0c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08e      	sub	sp, #56	; 0x38
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10b      	bne.n	800d0ee <xQueueReceiveFromISR+0x2e>
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	b672      	cpsid	i
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	b662      	cpsie	i
 800d0ea:	623b      	str	r3, [r7, #32]
 800d0ec:	e7fe      	b.n	800d0ec <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <xQueueReceiveFromISR+0x3c>
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <xQueueReceiveFromISR+0x40>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e000      	b.n	800d102 <xQueueReceiveFromISR+0x42>
 800d100:	2300      	movs	r3, #0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10b      	bne.n	800d11e <xQueueReceiveFromISR+0x5e>
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	b672      	cpsid	i
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	b662      	cpsie	i
 800d11a:	61fb      	str	r3, [r7, #28]
 800d11c:	e7fe      	b.n	800d11c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d11e:	f001 fbcb 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d122:	f3ef 8211 	mrs	r2, BASEPRI
 800d126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12a:	b672      	cpsid	i
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	b662      	cpsie	i
 800d13a:	61ba      	str	r2, [r7, #24]
 800d13c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d13e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d02f      	beq.n	800d1ae <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d158:	68b9      	ldr	r1, [r7, #8]
 800d15a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d15c:	f000 f8b5 	bl	800d2ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d162:	1e5a      	subs	r2, r3, #1
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d170:	d112      	bne.n	800d198 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d016      	beq.n	800d1a8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	3310      	adds	r3, #16
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fdb4 	bl	800dcec <xTaskRemoveFromEventList>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00e      	beq.n	800d1a8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	e007      	b.n	800d1a8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d19c:	3301      	adds	r3, #1
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	b25a      	sxtb	r2, r3
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ac:	e001      	b.n	800d1b2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3738      	adds	r7, #56	; 0x38
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d006      	beq.n	800d1e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f1c3 0307 	rsb	r3, r3, #7
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	e001      	b.n	800d1e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
	}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3714      	adds	r7, #20
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b086      	sub	sp, #24
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10d      	bne.n	800d230 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d14d      	bne.n	800d2b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	4618      	mov	r0, r3
 800d222:	f000 ffc1 	bl	800e1a8 <xTaskPriorityDisinherit>
 800d226:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	609a      	str	r2, [r3, #8]
 800d22e:	e043      	b.n	800d2b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d119      	bne.n	800d26a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6858      	ldr	r0, [r3, #4]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	461a      	mov	r2, r3
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	f017 fa61 	bl	8024708 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	685a      	ldr	r2, [r3, #4]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24e:	441a      	add	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d32b      	bcc.n	800d2b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	605a      	str	r2, [r3, #4]
 800d268:	e026      	b.n	800d2b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68d8      	ldr	r0, [r3, #12]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	461a      	mov	r2, r3
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	f017 fa47 	bl	8024708 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d282:	425b      	negs	r3, r3
 800d284:	441a      	add	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	68da      	ldr	r2, [r3, #12]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	d207      	bcs.n	800d2a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29e:	425b      	negs	r3, r3
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d105      	bne.n	800d2b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d002      	beq.n	800d2b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2c0:	697b      	ldr	r3, [r7, #20]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d018      	beq.n	800d30e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e4:	441a      	add	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d303      	bcc.n	800d2fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68d9      	ldr	r1, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	461a      	mov	r2, r3
 800d308:	6838      	ldr	r0, [r7, #0]
 800d30a:	f017 f9fd 	bl	8024708 <memcpy>
	}
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d31e:	f001 f9eb 	bl	800e6f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d328:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d32a:	e011      	b.n	800d350 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	d012      	beq.n	800d35a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fcd7 	bl	800dcec <xTaskRemoveFromEventList>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d344:	f000 fdb0 	bl	800dea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	dce9      	bgt.n	800d32c <prvUnlockQueue+0x16>
 800d358:	e000      	b.n	800d35c <prvUnlockQueue+0x46>
					break;
 800d35a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	22ff      	movs	r2, #255	; 0xff
 800d360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d364:	f001 f9fa 	bl	800e75c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d368:	f001 f9c6 	bl	800e6f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d372:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d374:	e011      	b.n	800d39a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d012      	beq.n	800d3a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3310      	adds	r3, #16
 800d382:	4618      	mov	r0, r3
 800d384:	f000 fcb2 	bl	800dcec <xTaskRemoveFromEventList>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d38e:	f000 fd8b 	bl	800dea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d392:	7bbb      	ldrb	r3, [r7, #14]
 800d394:	3b01      	subs	r3, #1
 800d396:	b2db      	uxtb	r3, r3
 800d398:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d39a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	dce9      	bgt.n	800d376 <prvUnlockQueue+0x60>
 800d3a2:	e000      	b.n	800d3a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	22ff      	movs	r2, #255	; 0xff
 800d3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3ae:	f001 f9d5 	bl	800e75c <vPortExitCritical>
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3c2:	f001 f999 	bl	800e6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	e001      	b.n	800d3d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3d8:	f001 f9c0 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ee:	f001 f983 	bl	800e6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d102      	bne.n	800d404 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3fe:	2301      	movs	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	e001      	b.n	800d408 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d404:	2300      	movs	r3, #0
 800d406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d408:	f001 f9a8 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800d40c:	68fb      	ldr	r3, [r7, #12]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d416:	b580      	push	{r7, lr}
 800d418:	b08e      	sub	sp, #56	; 0x38
 800d41a:	af04      	add	r7, sp, #16
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	60b9      	str	r1, [r7, #8]
 800d420:	607a      	str	r2, [r7, #4]
 800d422:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10b      	bne.n	800d442 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	b672      	cpsid	i
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	b662      	cpsie	i
 800d43e:	623b      	str	r3, [r7, #32]
 800d440:	e7fe      	b.n	800d440 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10b      	bne.n	800d460 <xTaskCreateStatic+0x4a>
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	b672      	cpsid	i
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	b662      	cpsie	i
 800d45c:	61fb      	str	r3, [r7, #28]
 800d45e:	e7fe      	b.n	800d45e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d460:	2358      	movs	r3, #88	; 0x58
 800d462:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2b58      	cmp	r3, #88	; 0x58
 800d468:	d00b      	beq.n	800d482 <xTaskCreateStatic+0x6c>
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	b672      	cpsid	i
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	b662      	cpsie	i
 800d47e:	61bb      	str	r3, [r7, #24]
 800d480:	e7fe      	b.n	800d480 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d482:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	2b00      	cmp	r3, #0
 800d488:	d01e      	beq.n	800d4c8 <xTaskCreateStatic+0xb2>
 800d48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01b      	beq.n	800d4c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d498:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	2202      	movs	r2, #2
 800d49e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	9303      	str	r3, [sp, #12]
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	9302      	str	r3, [sp, #8]
 800d4aa:	f107 0314 	add.w	r3, r7, #20
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	68b9      	ldr	r1, [r7, #8]
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 f850 	bl	800d560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4c2:	f000 f8e1 	bl	800d688 <prvAddNewTaskToReadyList>
 800d4c6:	e001      	b.n	800d4cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4cc:	697b      	ldr	r3, [r7, #20]
	}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3728      	adds	r7, #40	; 0x28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b08c      	sub	sp, #48	; 0x30
 800d4da:	af04      	add	r7, sp, #16
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	603b      	str	r3, [r7, #0]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f001 fa26 	bl	800e93c <pvPortMalloc>
 800d4f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00e      	beq.n	800d516 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d4f8:	2058      	movs	r0, #88	; 0x58
 800d4fa:	f001 fa1f 	bl	800e93c <pvPortMalloc>
 800d4fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	631a      	str	r2, [r3, #48]	; 0x30
 800d50c:	e005      	b.n	800d51a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d50e:	6978      	ldr	r0, [r7, #20]
 800d510:	f001 fae0 	bl	800ead4 <vPortFree>
 800d514:	e001      	b.n	800d51a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d516:	2300      	movs	r3, #0
 800d518:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d017      	beq.n	800d550 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d528:	88fa      	ldrh	r2, [r7, #6]
 800d52a:	2300      	movs	r3, #0
 800d52c:	9303      	str	r3, [sp, #12]
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	9302      	str	r3, [sp, #8]
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 f80e 	bl	800d560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d544:	69f8      	ldr	r0, [r7, #28]
 800d546:	f000 f89f 	bl	800d688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d54a:	2301      	movs	r3, #1
 800d54c:	61bb      	str	r3, [r7, #24]
 800d54e:	e002      	b.n	800d556 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d556:	69bb      	ldr	r3, [r7, #24]
	}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	461a      	mov	r2, r3
 800d578:	21a5      	movs	r1, #165	; 0xa5
 800d57a:	f017 f8d0 	bl	802471e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d588:	440b      	add	r3, r1
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f023 0307 	bic.w	r3, r3, #7
 800d596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	f003 0307 	and.w	r3, r3, #7
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00b      	beq.n	800d5ba <prvInitialiseNewTask+0x5a>
 800d5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a6:	b672      	cpsid	i
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	b662      	cpsie	i
 800d5b6:	617b      	str	r3, [r7, #20]
 800d5b8:	e7fe      	b.n	800d5b8 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01f      	beq.n	800d600 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	e012      	b.n	800d5ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	7819      	ldrb	r1, [r3, #0]
 800d5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	3334      	adds	r3, #52	; 0x34
 800d5d6:	460a      	mov	r2, r1
 800d5d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	4413      	add	r3, r2
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d006      	beq.n	800d5f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	61fb      	str	r3, [r7, #28]
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	2b0f      	cmp	r3, #15
 800d5f0:	d9e9      	bls.n	800d5c6 <prvInitialiseNewTask+0x66>
 800d5f2:	e000      	b.n	800d5f6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d5f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d5fe:	e003      	b.n	800d608 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d602:	2200      	movs	r2, #0
 800d604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	2b06      	cmp	r3, #6
 800d60c:	d901      	bls.n	800d612 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d60e:	2306      	movs	r3, #6
 800d610:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d616:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d61c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	2200      	movs	r2, #0
 800d622:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	3304      	adds	r3, #4
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe ff4b 	bl	800c4c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	3318      	adds	r3, #24
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe ff46 	bl	800c4c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d63c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	f1c3 0207 	rsb	r2, r3, #7
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d64c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	2200      	movs	r2, #0
 800d652:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d656:	2200      	movs	r2, #0
 800d658:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	69b8      	ldr	r0, [r7, #24]
 800d668:	f000 ff3c 	bl	800e4e4 <pxPortInitialiseStack>
 800d66c:	4602      	mov	r2, r0
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d67c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d67e:	bf00      	nop
 800d680:	3720      	adds	r7, #32
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d690:	f001 f832 	bl	800e6f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d694:	4b2a      	ldr	r3, [pc, #168]	; (800d740 <prvAddNewTaskToReadyList+0xb8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	4a29      	ldr	r2, [pc, #164]	; (800d740 <prvAddNewTaskToReadyList+0xb8>)
 800d69c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d69e:	4b29      	ldr	r3, [pc, #164]	; (800d744 <prvAddNewTaskToReadyList+0xbc>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d109      	bne.n	800d6ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6a6:	4a27      	ldr	r2, [pc, #156]	; (800d744 <prvAddNewTaskToReadyList+0xbc>)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6ac:	4b24      	ldr	r3, [pc, #144]	; (800d740 <prvAddNewTaskToReadyList+0xb8>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d110      	bne.n	800d6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6b4:	f000 fc1e 	bl	800def4 <prvInitialiseTaskLists>
 800d6b8:	e00d      	b.n	800d6d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6ba:	4b23      	ldr	r3, [pc, #140]	; (800d748 <prvAddNewTaskToReadyList+0xc0>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d109      	bne.n	800d6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6c2:	4b20      	ldr	r3, [pc, #128]	; (800d744 <prvAddNewTaskToReadyList+0xbc>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d802      	bhi.n	800d6d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6d0:	4a1c      	ldr	r2, [pc, #112]	; (800d744 <prvAddNewTaskToReadyList+0xbc>)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6d6:	4b1d      	ldr	r3, [pc, #116]	; (800d74c <prvAddNewTaskToReadyList+0xc4>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	4a1b      	ldr	r2, [pc, #108]	; (800d74c <prvAddNewTaskToReadyList+0xc4>)
 800d6de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	409a      	lsls	r2, r3
 800d6e8:	4b19      	ldr	r3, [pc, #100]	; (800d750 <prvAddNewTaskToReadyList+0xc8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	4a18      	ldr	r2, [pc, #96]	; (800d750 <prvAddNewTaskToReadyList+0xc8>)
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4413      	add	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4a15      	ldr	r2, [pc, #84]	; (800d754 <prvAddNewTaskToReadyList+0xcc>)
 800d700:	441a      	add	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3304      	adds	r3, #4
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fe fee8 	bl	800c4de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d70e:	f001 f825 	bl	800e75c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d712:	4b0d      	ldr	r3, [pc, #52]	; (800d748 <prvAddNewTaskToReadyList+0xc0>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00e      	beq.n	800d738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d71a:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <prvAddNewTaskToReadyList+0xbc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d207      	bcs.n	800d738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d728:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <prvAddNewTaskToReadyList+0xd0>)
 800d72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	200004b8 	.word	0x200004b8
 800d744:	200003b8 	.word	0x200003b8
 800d748:	200004c4 	.word	0x200004c4
 800d74c:	200004d4 	.word	0x200004d4
 800d750:	200004c0 	.word	0x200004c0
 800d754:	200003bc 	.word	0x200003bc
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d764:	2300      	movs	r3, #0
 800d766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d018      	beq.n	800d7a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d76e:	4b14      	ldr	r3, [pc, #80]	; (800d7c0 <vTaskDelay+0x64>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00b      	beq.n	800d78e <vTaskDelay+0x32>
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	b672      	cpsid	i
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	b662      	cpsie	i
 800d78a:	60bb      	str	r3, [r7, #8]
 800d78c:	e7fe      	b.n	800d78c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d78e:	f000 f87d 	bl	800d88c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d792:	2100      	movs	r1, #0
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fe3f 	bl	800e418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d79a:	f000 f885 	bl	800d8a8 <xTaskResumeAll>
 800d79e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d107      	bne.n	800d7b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7a6:	4b07      	ldr	r3, [pc, #28]	; (800d7c4 <vTaskDelay+0x68>)
 800d7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7b6:	bf00      	nop
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	200004e0 	.word	0x200004e0
 800d7c4:	e000ed04 	.word	0xe000ed04

0800d7c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7d6:	463a      	mov	r2, r7
 800d7d8:	1d39      	adds	r1, r7, #4
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7f3 f994 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	9202      	str	r2, [sp, #8]
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	460a      	mov	r2, r1
 800d7f6:	491f      	ldr	r1, [pc, #124]	; (800d874 <vTaskStartScheduler+0xac>)
 800d7f8:	481f      	ldr	r0, [pc, #124]	; (800d878 <vTaskStartScheduler+0xb0>)
 800d7fa:	f7ff fe0c 	bl	800d416 <xTaskCreateStatic>
 800d7fe:	4602      	mov	r2, r0
 800d800:	4b1e      	ldr	r3, [pc, #120]	; (800d87c <vTaskStartScheduler+0xb4>)
 800d802:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d804:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <vTaskStartScheduler+0xb4>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d80c:	2301      	movs	r3, #1
 800d80e:	617b      	str	r3, [r7, #20]
 800d810:	e001      	b.n	800d816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d117      	bne.n	800d84c <vTaskStartScheduler+0x84>
 800d81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d820:	b672      	cpsid	i
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	b662      	cpsie	i
 800d830:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d832:	4b13      	ldr	r3, [pc, #76]	; (800d880 <vTaskStartScheduler+0xb8>)
 800d834:	f04f 32ff 	mov.w	r2, #4294967295
 800d838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d83a:	4b12      	ldr	r3, [pc, #72]	; (800d884 <vTaskStartScheduler+0xbc>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d840:	4b11      	ldr	r3, [pc, #68]	; (800d888 <vTaskStartScheduler+0xc0>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d846:	f000 fedb 	bl	800e600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d84a:	e00f      	b.n	800d86c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d10b      	bne.n	800d86c <vTaskStartScheduler+0xa4>
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	b672      	cpsid	i
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	b662      	cpsie	i
 800d868:	60fb      	str	r3, [r7, #12]
 800d86a:	e7fe      	b.n	800d86a <vTaskStartScheduler+0xa2>
}
 800d86c:	bf00      	nop
 800d86e:	3718      	adds	r7, #24
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	0802568c 	.word	0x0802568c
 800d878:	0800dec1 	.word	0x0800dec1
 800d87c:	200004dc 	.word	0x200004dc
 800d880:	200004d8 	.word	0x200004d8
 800d884:	200004c4 	.word	0x200004c4
 800d888:	200004bc 	.word	0x200004bc

0800d88c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d890:	4b04      	ldr	r3, [pc, #16]	; (800d8a4 <vTaskSuspendAll+0x18>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3301      	adds	r3, #1
 800d896:	4a03      	ldr	r2, [pc, #12]	; (800d8a4 <vTaskSuspendAll+0x18>)
 800d898:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d89a:	bf00      	nop
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	200004e0 	.word	0x200004e0

0800d8a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8b6:	4b42      	ldr	r3, [pc, #264]	; (800d9c0 <xTaskResumeAll+0x118>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d10b      	bne.n	800d8d6 <xTaskResumeAll+0x2e>
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	b672      	cpsid	i
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	b662      	cpsie	i
 800d8d2:	603b      	str	r3, [r7, #0]
 800d8d4:	e7fe      	b.n	800d8d4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8d6:	f000 ff0f 	bl	800e6f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8da:	4b39      	ldr	r3, [pc, #228]	; (800d9c0 <xTaskResumeAll+0x118>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	4a37      	ldr	r2, [pc, #220]	; (800d9c0 <xTaskResumeAll+0x118>)
 800d8e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8e4:	4b36      	ldr	r3, [pc, #216]	; (800d9c0 <xTaskResumeAll+0x118>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d161      	bne.n	800d9b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8ec:	4b35      	ldr	r3, [pc, #212]	; (800d9c4 <xTaskResumeAll+0x11c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d05d      	beq.n	800d9b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8f4:	e02e      	b.n	800d954 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f6:	4b34      	ldr	r3, [pc, #208]	; (800d9c8 <xTaskResumeAll+0x120>)
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3318      	adds	r3, #24
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe fe48 	bl	800c598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	3304      	adds	r3, #4
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7fe fe43 	bl	800c598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	2201      	movs	r2, #1
 800d918:	409a      	lsls	r2, r3
 800d91a:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <xTaskResumeAll+0x124>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4313      	orrs	r3, r2
 800d920:	4a2a      	ldr	r2, [pc, #168]	; (800d9cc <xTaskResumeAll+0x124>)
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	4a27      	ldr	r2, [pc, #156]	; (800d9d0 <xTaskResumeAll+0x128>)
 800d932:	441a      	add	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	f7fe fdcf 	bl	800c4de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d944:	4b23      	ldr	r3, [pc, #140]	; (800d9d4 <xTaskResumeAll+0x12c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d302      	bcc.n	800d954 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d94e:	4b22      	ldr	r3, [pc, #136]	; (800d9d8 <xTaskResumeAll+0x130>)
 800d950:	2201      	movs	r2, #1
 800d952:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d954:	4b1c      	ldr	r3, [pc, #112]	; (800d9c8 <xTaskResumeAll+0x120>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1cc      	bne.n	800d8f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d962:	f000 fb63 	bl	800e02c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d966:	4b1d      	ldr	r3, [pc, #116]	; (800d9dc <xTaskResumeAll+0x134>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d010      	beq.n	800d994 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d972:	f000 f859 	bl	800da28 <xTaskIncrementTick>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d97c:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <xTaskResumeAll+0x130>)
 800d97e:	2201      	movs	r2, #1
 800d980:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	3b01      	subs	r3, #1
 800d986:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1f1      	bne.n	800d972 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d98e:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <xTaskResumeAll+0x134>)
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d994:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <xTaskResumeAll+0x130>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d009      	beq.n	800d9b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9a0:	4b0f      	ldr	r3, [pc, #60]	; (800d9e0 <xTaskResumeAll+0x138>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9b0:	f000 fed4 	bl	800e75c <vPortExitCritical>

	return xAlreadyYielded;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	200004e0 	.word	0x200004e0
 800d9c4:	200004b8 	.word	0x200004b8
 800d9c8:	20000478 	.word	0x20000478
 800d9cc:	200004c0 	.word	0x200004c0
 800d9d0:	200003bc 	.word	0x200003bc
 800d9d4:	200003b8 	.word	0x200003b8
 800d9d8:	200004cc 	.word	0x200004cc
 800d9dc:	200004c8 	.word	0x200004c8
 800d9e0:	e000ed04 	.word	0xe000ed04

0800d9e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <xTaskGetTickCount+0x1c>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9f0:	687b      	ldr	r3, [r7, #4]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	200004bc 	.word	0x200004bc

0800da04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da0a:	f000 ff55 	bl	800e8b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800da0e:	2300      	movs	r3, #0
 800da10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800da12:	4b04      	ldr	r3, [pc, #16]	; (800da24 <xTaskGetTickCountFromISR+0x20>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da18:	683b      	ldr	r3, [r7, #0]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	200004bc 	.word	0x200004bc

0800da28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da32:	4b4f      	ldr	r3, [pc, #316]	; (800db70 <xTaskIncrementTick+0x148>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	f040 8089 	bne.w	800db4e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da3c:	4b4d      	ldr	r3, [pc, #308]	; (800db74 <xTaskIncrementTick+0x14c>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3301      	adds	r3, #1
 800da42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da44:	4a4b      	ldr	r2, [pc, #300]	; (800db74 <xTaskIncrementTick+0x14c>)
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d121      	bne.n	800da94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da50:	4b49      	ldr	r3, [pc, #292]	; (800db78 <xTaskIncrementTick+0x150>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <xTaskIncrementTick+0x4a>
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	e7fe      	b.n	800da70 <xTaskIncrementTick+0x48>
 800da72:	4b41      	ldr	r3, [pc, #260]	; (800db78 <xTaskIncrementTick+0x150>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	4b40      	ldr	r3, [pc, #256]	; (800db7c <xTaskIncrementTick+0x154>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a3e      	ldr	r2, [pc, #248]	; (800db78 <xTaskIncrementTick+0x150>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	4a3e      	ldr	r2, [pc, #248]	; (800db7c <xTaskIncrementTick+0x154>)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	4b3e      	ldr	r3, [pc, #248]	; (800db80 <xTaskIncrementTick+0x158>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	4a3c      	ldr	r2, [pc, #240]	; (800db80 <xTaskIncrementTick+0x158>)
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	f000 facc 	bl	800e02c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da94:	4b3b      	ldr	r3, [pc, #236]	; (800db84 <xTaskIncrementTick+0x15c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d348      	bcc.n	800db30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da9e:	4b36      	ldr	r3, [pc, #216]	; (800db78 <xTaskIncrementTick+0x150>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa8:	4b36      	ldr	r3, [pc, #216]	; (800db84 <xTaskIncrementTick+0x15c>)
 800daaa:	f04f 32ff 	mov.w	r2, #4294967295
 800daae:	601a      	str	r2, [r3, #0]
					break;
 800dab0:	e03e      	b.n	800db30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab2:	4b31      	ldr	r3, [pc, #196]	; (800db78 <xTaskIncrementTick+0x150>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d203      	bcs.n	800dad2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800daca:	4a2e      	ldr	r2, [pc, #184]	; (800db84 <xTaskIncrementTick+0x15c>)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dad0:	e02e      	b.n	800db30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fe fd5e 	bl	800c598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d004      	beq.n	800daee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	3318      	adds	r3, #24
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fd55 	bl	800c598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf2:	2201      	movs	r2, #1
 800daf4:	409a      	lsls	r2, r3
 800daf6:	4b24      	ldr	r3, [pc, #144]	; (800db88 <xTaskIncrementTick+0x160>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	4a22      	ldr	r2, [pc, #136]	; (800db88 <xTaskIncrementTick+0x160>)
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4a1f      	ldr	r2, [pc, #124]	; (800db8c <xTaskIncrementTick+0x164>)
 800db0e:	441a      	add	r2, r3
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	3304      	adds	r3, #4
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7fe fce1 	bl	800c4de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db20:	4b1b      	ldr	r3, [pc, #108]	; (800db90 <xTaskIncrementTick+0x168>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db26:	429a      	cmp	r2, r3
 800db28:	d3b9      	bcc.n	800da9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800db2a:	2301      	movs	r3, #1
 800db2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db2e:	e7b6      	b.n	800da9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db30:	4b17      	ldr	r3, [pc, #92]	; (800db90 <xTaskIncrementTick+0x168>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db36:	4915      	ldr	r1, [pc, #84]	; (800db8c <xTaskIncrementTick+0x164>)
 800db38:	4613      	mov	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	440b      	add	r3, r1
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d907      	bls.n	800db58 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800db48:	2301      	movs	r3, #1
 800db4a:	617b      	str	r3, [r7, #20]
 800db4c:	e004      	b.n	800db58 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db4e:	4b11      	ldr	r3, [pc, #68]	; (800db94 <xTaskIncrementTick+0x16c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	4a0f      	ldr	r2, [pc, #60]	; (800db94 <xTaskIncrementTick+0x16c>)
 800db56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db58:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <xTaskIncrementTick+0x170>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800db60:	2301      	movs	r3, #1
 800db62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db64:	697b      	ldr	r3, [r7, #20]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	200004e0 	.word	0x200004e0
 800db74:	200004bc 	.word	0x200004bc
 800db78:	20000470 	.word	0x20000470
 800db7c:	20000474 	.word	0x20000474
 800db80:	200004d0 	.word	0x200004d0
 800db84:	200004d8 	.word	0x200004d8
 800db88:	200004c0 	.word	0x200004c0
 800db8c:	200003bc 	.word	0x200003bc
 800db90:	200003b8 	.word	0x200003b8
 800db94:	200004c8 	.word	0x200004c8
 800db98:	200004cc 	.word	0x200004cc

0800db9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dba2:	4b3a      	ldr	r3, [pc, #232]	; (800dc8c <vTaskSwitchContext+0xf0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dbaa:	4b39      	ldr	r3, [pc, #228]	; (800dc90 <vTaskSwitchContext+0xf4>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dbb0:	e067      	b.n	800dc82 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800dbb2:	4b37      	ldr	r3, [pc, #220]	; (800dc90 <vTaskSwitchContext+0xf4>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dbb8:	4b36      	ldr	r3, [pc, #216]	; (800dc94 <vTaskSwitchContext+0xf8>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbbe:	61fb      	str	r3, [r7, #28]
 800dbc0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dbc4:	61bb      	str	r3, [r7, #24]
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	69ba      	ldr	r2, [r7, #24]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d111      	bne.n	800dbf4 <vTaskSwitchContext+0x58>
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	69ba      	ldr	r2, [r7, #24]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d10b      	bne.n	800dbf4 <vTaskSwitchContext+0x58>
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69ba      	ldr	r2, [r7, #24]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d105      	bne.n	800dbf4 <vTaskSwitchContext+0x58>
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	330c      	adds	r3, #12
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69ba      	ldr	r2, [r7, #24]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d008      	beq.n	800dc06 <vTaskSwitchContext+0x6a>
 800dbf4:	4b27      	ldr	r3, [pc, #156]	; (800dc94 <vTaskSwitchContext+0xf8>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	4b26      	ldr	r3, [pc, #152]	; (800dc94 <vTaskSwitchContext+0xf8>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3334      	adds	r3, #52	; 0x34
 800dbfe:	4619      	mov	r1, r3
 800dc00:	4610      	mov	r0, r2
 800dc02:	f7f2 ff70 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc06:	4b24      	ldr	r3, [pc, #144]	; (800dc98 <vTaskSwitchContext+0xfc>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	fab3 f383 	clz	r3, r3
 800dc12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dc14:	7afb      	ldrb	r3, [r7, #11]
 800dc16:	f1c3 031f 	rsb	r3, r3, #31
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	491f      	ldr	r1, [pc, #124]	; (800dc9c <vTaskSwitchContext+0x100>)
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	440b      	add	r3, r1
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10b      	bne.n	800dc48 <vTaskSwitchContext+0xac>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc34:	b672      	cpsid	i
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	b662      	cpsie	i
 800dc44:	607b      	str	r3, [r7, #4]
 800dc46:	e7fe      	b.n	800dc46 <vTaskSwitchContext+0xaa>
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4413      	add	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4a12      	ldr	r2, [pc, #72]	; (800dc9c <vTaskSwitchContext+0x100>)
 800dc54:	4413      	add	r3, r2
 800dc56:	613b      	str	r3, [r7, #16]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	605a      	str	r2, [r3, #4]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3308      	adds	r3, #8
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d104      	bne.n	800dc78 <vTaskSwitchContext+0xdc>
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	605a      	str	r2, [r3, #4]
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	4a05      	ldr	r2, [pc, #20]	; (800dc94 <vTaskSwitchContext+0xf8>)
 800dc80:	6013      	str	r3, [r2, #0]
}
 800dc82:	bf00      	nop
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	200004e0 	.word	0x200004e0
 800dc90:	200004cc 	.word	0x200004cc
 800dc94:	200003b8 	.word	0x200003b8
 800dc98:	200004c0 	.word	0x200004c0
 800dc9c:	200003bc 	.word	0x200003bc

0800dca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10b      	bne.n	800dcc8 <vTaskPlaceOnEventList+0x28>
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	b672      	cpsid	i
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	b662      	cpsie	i
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	e7fe      	b.n	800dcc6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcc8:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <vTaskPlaceOnEventList+0x48>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3318      	adds	r3, #24
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7fe fc28 	bl	800c526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	6838      	ldr	r0, [r7, #0]
 800dcda:	f000 fb9d 	bl	800e418 <prvAddCurrentTaskToDelayedList>
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	200003b8 	.word	0x200003b8

0800dcec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10b      	bne.n	800dd1a <xTaskRemoveFromEventList+0x2e>
 800dd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd06:	b672      	cpsid	i
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	b662      	cpsie	i
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e7fe      	b.n	800dd18 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fc3a 	bl	800c598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd24:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <xTaskRemoveFromEventList+0xb0>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d11c      	bne.n	800dd66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe fc31 	bl	800c598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	409a      	lsls	r2, r3
 800dd3e:	4b18      	ldr	r3, [pc, #96]	; (800dda0 <xTaskRemoveFromEventList+0xb4>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	4a16      	ldr	r2, [pc, #88]	; (800dda0 <xTaskRemoveFromEventList+0xb4>)
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4a13      	ldr	r2, [pc, #76]	; (800dda4 <xTaskRemoveFromEventList+0xb8>)
 800dd56:	441a      	add	r2, r3
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f7fe fbbd 	bl	800c4de <vListInsertEnd>
 800dd64:	e005      	b.n	800dd72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	3318      	adds	r3, #24
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	480e      	ldr	r0, [pc, #56]	; (800dda8 <xTaskRemoveFromEventList+0xbc>)
 800dd6e:	f7fe fbb6 	bl	800c4de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd76:	4b0d      	ldr	r3, [pc, #52]	; (800ddac <xTaskRemoveFromEventList+0xc0>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d905      	bls.n	800dd8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <xTaskRemoveFromEventList+0xc4>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	e001      	b.n	800dd90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd90:	697b      	ldr	r3, [r7, #20]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	200004e0 	.word	0x200004e0
 800dda0:	200004c0 	.word	0x200004c0
 800dda4:	200003bc 	.word	0x200003bc
 800dda8:	20000478 	.word	0x20000478
 800ddac:	200003b8 	.word	0x200003b8
 800ddb0:	200004cc 	.word	0x200004cc

0800ddb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <vTaskInternalSetTimeOutState+0x24>)
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <vTaskInternalSetTimeOutState+0x28>)
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	605a      	str	r2, [r3, #4]
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	200004d0 	.word	0x200004d0
 800dddc:	200004bc 	.word	0x200004bc

0800dde0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10b      	bne.n	800de08 <xTaskCheckForTimeOut+0x28>
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	b672      	cpsid	i
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	b662      	cpsie	i
 800de04:	613b      	str	r3, [r7, #16]
 800de06:	e7fe      	b.n	800de06 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10b      	bne.n	800de26 <xTaskCheckForTimeOut+0x46>
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	b672      	cpsid	i
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	b662      	cpsie	i
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e7fe      	b.n	800de24 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800de26:	f000 fc67 	bl	800e6f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de2a:	4b1d      	ldr	r3, [pc, #116]	; (800dea0 <xTaskCheckForTimeOut+0xc0>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	69ba      	ldr	r2, [r7, #24]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de42:	d102      	bne.n	800de4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de44:	2300      	movs	r3, #0
 800de46:	61fb      	str	r3, [r7, #28]
 800de48:	e023      	b.n	800de92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	4b15      	ldr	r3, [pc, #84]	; (800dea4 <xTaskCheckForTimeOut+0xc4>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	429a      	cmp	r2, r3
 800de54:	d007      	beq.n	800de66 <xTaskCheckForTimeOut+0x86>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	69ba      	ldr	r2, [r7, #24]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d302      	bcc.n	800de66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de60:	2301      	movs	r3, #1
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	e015      	b.n	800de92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d20b      	bcs.n	800de88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	1ad2      	subs	r2, r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7ff ff99 	bl	800ddb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de82:	2300      	movs	r3, #0
 800de84:	61fb      	str	r3, [r7, #28]
 800de86:	e004      	b.n	800de92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de8e:	2301      	movs	r3, #1
 800de90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de92:	f000 fc63 	bl	800e75c <vPortExitCritical>

	return xReturn;
 800de96:	69fb      	ldr	r3, [r7, #28]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3720      	adds	r7, #32
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	200004bc 	.word	0x200004bc
 800dea4:	200004d0 	.word	0x200004d0

0800dea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800deac:	4b03      	ldr	r3, [pc, #12]	; (800debc <vTaskMissedYield+0x14>)
 800deae:	2201      	movs	r2, #1
 800deb0:	601a      	str	r2, [r3, #0]
}
 800deb2:	bf00      	nop
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	200004cc 	.word	0x200004cc

0800dec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dec8:	f000 f854 	bl	800df74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <prvIdleTask+0x2c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d907      	bls.n	800dee4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ded4:	4b06      	ldr	r3, [pc, #24]	; (800def0 <prvIdleTask+0x30>)
 800ded6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dee4:	f7f2 fdf8 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dee8:	e7ee      	b.n	800dec8 <prvIdleTask+0x8>
 800deea:	bf00      	nop
 800deec:	200003bc 	.word	0x200003bc
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
 800defe:	e00c      	b.n	800df1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	4613      	mov	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4a12      	ldr	r2, [pc, #72]	; (800df54 <prvInitialiseTaskLists+0x60>)
 800df0c:	4413      	add	r3, r2
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe fab8 	bl	800c484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3301      	adds	r3, #1
 800df18:	607b      	str	r3, [r7, #4]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b06      	cmp	r3, #6
 800df1e:	d9ef      	bls.n	800df00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df20:	480d      	ldr	r0, [pc, #52]	; (800df58 <prvInitialiseTaskLists+0x64>)
 800df22:	f7fe faaf 	bl	800c484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df26:	480d      	ldr	r0, [pc, #52]	; (800df5c <prvInitialiseTaskLists+0x68>)
 800df28:	f7fe faac 	bl	800c484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df2c:	480c      	ldr	r0, [pc, #48]	; (800df60 <prvInitialiseTaskLists+0x6c>)
 800df2e:	f7fe faa9 	bl	800c484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df32:	480c      	ldr	r0, [pc, #48]	; (800df64 <prvInitialiseTaskLists+0x70>)
 800df34:	f7fe faa6 	bl	800c484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df38:	480b      	ldr	r0, [pc, #44]	; (800df68 <prvInitialiseTaskLists+0x74>)
 800df3a:	f7fe faa3 	bl	800c484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df3e:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <prvInitialiseTaskLists+0x78>)
 800df40:	4a05      	ldr	r2, [pc, #20]	; (800df58 <prvInitialiseTaskLists+0x64>)
 800df42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df44:	4b0a      	ldr	r3, [pc, #40]	; (800df70 <prvInitialiseTaskLists+0x7c>)
 800df46:	4a05      	ldr	r2, [pc, #20]	; (800df5c <prvInitialiseTaskLists+0x68>)
 800df48:	601a      	str	r2, [r3, #0]
}
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	200003bc 	.word	0x200003bc
 800df58:	20000448 	.word	0x20000448
 800df5c:	2000045c 	.word	0x2000045c
 800df60:	20000478 	.word	0x20000478
 800df64:	2000048c 	.word	0x2000048c
 800df68:	200004a4 	.word	0x200004a4
 800df6c:	20000470 	.word	0x20000470
 800df70:	20000474 	.word	0x20000474

0800df74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df7a:	e019      	b.n	800dfb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df7c:	f000 fbbc 	bl	800e6f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df80:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <prvCheckTasksWaitingTermination+0x4c>)
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3304      	adds	r3, #4
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fb03 	bl	800c598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df92:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <prvCheckTasksWaitingTermination+0x50>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	3b01      	subs	r3, #1
 800df98:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <prvCheckTasksWaitingTermination+0x50>)
 800df9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <prvCheckTasksWaitingTermination+0x54>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	4a09      	ldr	r2, [pc, #36]	; (800dfc8 <prvCheckTasksWaitingTermination+0x54>)
 800dfa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfa6:	f000 fbd9 	bl	800e75c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f80e 	bl	800dfcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfb0:	4b05      	ldr	r3, [pc, #20]	; (800dfc8 <prvCheckTasksWaitingTermination+0x54>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e1      	bne.n	800df7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	2000048c 	.word	0x2000048c
 800dfc4:	200004b8 	.word	0x200004b8
 800dfc8:	200004a0 	.word	0x200004a0

0800dfcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d108      	bne.n	800dff0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 fd76 	bl	800ead4 <vPortFree>
				vPortFree( pxTCB );
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fd73 	bl	800ead4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfee:	e019      	b.n	800e024 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d103      	bne.n	800e002 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fd6a 	bl	800ead4 <vPortFree>
	}
 800e000:	e010      	b.n	800e024 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d00b      	beq.n	800e024 <prvDeleteTCB+0x58>
 800e00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e010:	b672      	cpsid	i
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	b662      	cpsie	i
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	e7fe      	b.n	800e022 <prvDeleteTCB+0x56>
	}
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e032:	4b0c      	ldr	r3, [pc, #48]	; (800e064 <prvResetNextTaskUnblockTime+0x38>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d104      	bne.n	800e046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <prvResetNextTaskUnblockTime+0x3c>)
 800e03e:	f04f 32ff 	mov.w	r2, #4294967295
 800e042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e044:	e008      	b.n	800e058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e046:	4b07      	ldr	r3, [pc, #28]	; (800e064 <prvResetNextTaskUnblockTime+0x38>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	4a04      	ldr	r2, [pc, #16]	; (800e068 <prvResetNextTaskUnblockTime+0x3c>)
 800e056:	6013      	str	r3, [r2, #0]
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	20000470 	.word	0x20000470
 800e068:	200004d8 	.word	0x200004d8

0800e06c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e072:	4b0b      	ldr	r3, [pc, #44]	; (800e0a0 <xTaskGetSchedulerState+0x34>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d102      	bne.n	800e080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e07a:	2301      	movs	r3, #1
 800e07c:	607b      	str	r3, [r7, #4]
 800e07e:	e008      	b.n	800e092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e080:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <xTaskGetSchedulerState+0x38>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d102      	bne.n	800e08e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e088:	2302      	movs	r3, #2
 800e08a:	607b      	str	r3, [r7, #4]
 800e08c:	e001      	b.n	800e092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e08e:	2300      	movs	r3, #0
 800e090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e092:	687b      	ldr	r3, [r7, #4]
	}
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	200004c4 	.word	0x200004c4
 800e0a4:	200004e0 	.word	0x200004e0

0800e0a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d069      	beq.n	800e192 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c2:	4b36      	ldr	r3, [pc, #216]	; (800e19c <xTaskPriorityInherit+0xf4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d259      	bcs.n	800e180 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	db06      	blt.n	800e0e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d4:	4b31      	ldr	r3, [pc, #196]	; (800e19c <xTaskPriorityInherit+0xf4>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0da:	f1c3 0207 	rsb	r2, r3, #7
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	6959      	ldr	r1, [r3, #20]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4a2b      	ldr	r2, [pc, #172]	; (800e1a0 <xTaskPriorityInherit+0xf8>)
 800e0f4:	4413      	add	r3, r2
 800e0f6:	4299      	cmp	r1, r3
 800e0f8:	d13a      	bne.n	800e170 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe fa4a 	bl	800c598 <uxListRemove>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d115      	bne.n	800e136 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	4924      	ldr	r1, [pc, #144]	; (800e1a0 <xTaskPriorityInherit+0xf8>)
 800e110:	4613      	mov	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	440b      	add	r3, r1
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <xTaskPriorityInherit+0x8e>
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e124:	2201      	movs	r2, #1
 800e126:	fa02 f303 	lsl.w	r3, r2, r3
 800e12a:	43da      	mvns	r2, r3
 800e12c:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <xTaskPriorityInherit+0xfc>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4013      	ands	r3, r2
 800e132:	4a1c      	ldr	r2, [pc, #112]	; (800e1a4 <xTaskPriorityInherit+0xfc>)
 800e134:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e136:	4b19      	ldr	r3, [pc, #100]	; (800e19c <xTaskPriorityInherit+0xf4>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	2201      	movs	r2, #1
 800e146:	409a      	lsls	r2, r3
 800e148:	4b16      	ldr	r3, [pc, #88]	; (800e1a4 <xTaskPriorityInherit+0xfc>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	4a15      	ldr	r2, [pc, #84]	; (800e1a4 <xTaskPriorityInherit+0xfc>)
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e156:	4613      	mov	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4a10      	ldr	r2, [pc, #64]	; (800e1a0 <xTaskPriorityInherit+0xf8>)
 800e160:	441a      	add	r2, r3
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	3304      	adds	r3, #4
 800e166:	4619      	mov	r1, r3
 800e168:	4610      	mov	r0, r2
 800e16a:	f7fe f9b8 	bl	800c4de <vListInsertEnd>
 800e16e:	e004      	b.n	800e17a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <xTaskPriorityInherit+0xf4>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e17a:	2301      	movs	r3, #1
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	e008      	b.n	800e192 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e184:	4b05      	ldr	r3, [pc, #20]	; (800e19c <xTaskPriorityInherit+0xf4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d201      	bcs.n	800e192 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e18e:	2301      	movs	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e192:	68fb      	ldr	r3, [r7, #12]
	}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	200003b8 	.word	0x200003b8
 800e1a0:	200003bc 	.word	0x200003bc
 800e1a4:	200004c0 	.word	0x200004c0

0800e1a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d070      	beq.n	800e2a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1be:	4b3b      	ldr	r3, [pc, #236]	; (800e2ac <xTaskPriorityDisinherit+0x104>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d00b      	beq.n	800e1e0 <xTaskPriorityDisinherit+0x38>
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	b672      	cpsid	i
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	b662      	cpsie	i
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e7fe      	b.n	800e1de <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10b      	bne.n	800e200 <xTaskPriorityDisinherit+0x58>
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	b672      	cpsid	i
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	b662      	cpsie	i
 800e1fc:	60bb      	str	r3, [r7, #8]
 800e1fe:	e7fe      	b.n	800e1fe <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e204:	1e5a      	subs	r2, r3, #1
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e212:	429a      	cmp	r2, r3
 800e214:	d044      	beq.n	800e2a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d140      	bne.n	800e2a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	3304      	adds	r3, #4
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe f9b8 	bl	800c598 <uxListRemove>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d115      	bne.n	800e25a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	491f      	ldr	r1, [pc, #124]	; (800e2b0 <xTaskPriorityDisinherit+0x108>)
 800e234:	4613      	mov	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10a      	bne.n	800e25a <xTaskPriorityDisinherit+0xb2>
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	2201      	movs	r2, #1
 800e24a:	fa02 f303 	lsl.w	r3, r2, r3
 800e24e:	43da      	mvns	r2, r3
 800e250:	4b18      	ldr	r3, [pc, #96]	; (800e2b4 <xTaskPriorityDisinherit+0x10c>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4013      	ands	r3, r2
 800e256:	4a17      	ldr	r2, [pc, #92]	; (800e2b4 <xTaskPriorityDisinherit+0x10c>)
 800e258:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e266:	f1c3 0207 	rsb	r2, r3, #7
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e272:	2201      	movs	r2, #1
 800e274:	409a      	lsls	r2, r3
 800e276:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <xTaskPriorityDisinherit+0x10c>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4313      	orrs	r3, r2
 800e27c:	4a0d      	ldr	r2, [pc, #52]	; (800e2b4 <xTaskPriorityDisinherit+0x10c>)
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4a08      	ldr	r2, [pc, #32]	; (800e2b0 <xTaskPriorityDisinherit+0x108>)
 800e28e:	441a      	add	r2, r3
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	3304      	adds	r3, #4
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7fe f921 	bl	800c4de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e29c:	2301      	movs	r3, #1
 800e29e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2a0:	697b      	ldr	r3, [r7, #20]
	}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	200003b8 	.word	0x200003b8
 800e2b0:	200003bc 	.word	0x200003bc
 800e2b4:	200004c0 	.word	0x200004c0

0800e2b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b088      	sub	sp, #32
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 8085 	beq.w	800e3dc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10b      	bne.n	800e2f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	b672      	cpsid	i
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	b662      	cpsie	i
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	e7fe      	b.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d902      	bls.n	800e302 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	61fb      	str	r3, [r7, #28]
 800e300:	e002      	b.n	800e308 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e306:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	69fa      	ldr	r2, [r7, #28]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d064      	beq.n	800e3dc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d15f      	bne.n	800e3dc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e31c:	4b31      	ldr	r3, [pc, #196]	; (800e3e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	69ba      	ldr	r2, [r7, #24]
 800e322:	429a      	cmp	r2, r3
 800e324:	d10b      	bne.n	800e33e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32a:	b672      	cpsid	i
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	b662      	cpsie	i
 800e33a:	60bb      	str	r3, [r7, #8]
 800e33c:	e7fe      	b.n	800e33c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e342:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	69fa      	ldr	r2, [r7, #28]
 800e348:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	db04      	blt.n	800e35c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	f1c3 0207 	rsb	r2, r3, #7
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	6959      	ldr	r1, [r3, #20]
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	4613      	mov	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4a1f      	ldr	r2, [pc, #124]	; (800e3e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e36c:	4413      	add	r3, r2
 800e36e:	4299      	cmp	r1, r3
 800e370:	d134      	bne.n	800e3dc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	3304      	adds	r3, #4
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe f90e 	bl	800c598 <uxListRemove>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d115      	bne.n	800e3ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e386:	4918      	ldr	r1, [pc, #96]	; (800e3e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e388:	4613      	mov	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4413      	add	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	440b      	add	r3, r1
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39c:	2201      	movs	r2, #1
 800e39e:	fa02 f303 	lsl.w	r3, r2, r3
 800e3a2:	43da      	mvns	r2, r3
 800e3a4:	4b11      	ldr	r3, [pc, #68]	; (800e3ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	4a10      	ldr	r2, [pc, #64]	; (800e3ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	409a      	lsls	r2, r3
 800e3b6:	4b0d      	ldr	r3, [pc, #52]	; (800e3ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	4a0b      	ldr	r2, [pc, #44]	; (800e3ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4a06      	ldr	r2, [pc, #24]	; (800e3e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3ce:	441a      	add	r2, r3
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fe f881 	bl	800c4de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3dc:	bf00      	nop
 800e3de:	3720      	adds	r7, #32
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	200003b8 	.word	0x200003b8
 800e3e8:	200003bc 	.word	0x200003bc
 800e3ec:	200004c0 	.word	0x200004c0

0800e3f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e3f0:	b480      	push	{r7}
 800e3f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e3f4:	4b07      	ldr	r3, [pc, #28]	; (800e414 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d004      	beq.n	800e406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e3fc:	4b05      	ldr	r3, [pc, #20]	; (800e414 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e402:	3201      	adds	r2, #1
 800e404:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e406:	4b03      	ldr	r3, [pc, #12]	; (800e414 <pvTaskIncrementMutexHeldCount+0x24>)
 800e408:	681b      	ldr	r3, [r3, #0]
	}
 800e40a:	4618      	mov	r0, r3
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	200003b8 	.word	0x200003b8

0800e418 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e422:	4b29      	ldr	r3, [pc, #164]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e428:	4b28      	ldr	r3, [pc, #160]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3304      	adds	r3, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe f8b2 	bl	800c598 <uxListRemove>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10b      	bne.n	800e452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e43a:	4b24      	ldr	r3, [pc, #144]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e440:	2201      	movs	r2, #1
 800e442:	fa02 f303 	lsl.w	r3, r2, r3
 800e446:	43da      	mvns	r2, r3
 800e448:	4b21      	ldr	r3, [pc, #132]	; (800e4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4013      	ands	r3, r2
 800e44e:	4a20      	ldr	r2, [pc, #128]	; (800e4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e458:	d10a      	bne.n	800e470 <prvAddCurrentTaskToDelayedList+0x58>
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e460:	4b1a      	ldr	r3, [pc, #104]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	4619      	mov	r1, r3
 800e468:	481a      	ldr	r0, [pc, #104]	; (800e4d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e46a:	f7fe f838 	bl	800c4de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e46e:	e026      	b.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e478:	4b14      	ldr	r3, [pc, #80]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	429a      	cmp	r2, r3
 800e486:	d209      	bcs.n	800e49c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e488:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3304      	adds	r3, #4
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7fe f846 	bl	800c526 <vListInsert>
}
 800e49a:	e010      	b.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e49c:	4b0f      	ldr	r3, [pc, #60]	; (800e4dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	4b0a      	ldr	r3, [pc, #40]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	f7fe f83c 	bl	800c526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d202      	bcs.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	6013      	str	r3, [r2, #0]
}
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	200004bc 	.word	0x200004bc
 800e4cc:	200003b8 	.word	0x200003b8
 800e4d0:	200004c0 	.word	0x200004c0
 800e4d4:	200004a4 	.word	0x200004a4
 800e4d8:	20000474 	.word	0x20000474
 800e4dc:	20000470 	.word	0x20000470
 800e4e0:	200004d8 	.word	0x200004d8

0800e4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3b04      	subs	r3, #4
 800e4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3b04      	subs	r3, #4
 800e502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f023 0201 	bic.w	r2, r3, #1
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3b04      	subs	r3, #4
 800e512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e514:	4a0c      	ldr	r2, [pc, #48]	; (800e548 <pxPortInitialiseStack+0x64>)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3b14      	subs	r3, #20
 800e51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f06f 0202 	mvn.w	r2, #2
 800e532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3b20      	subs	r3, #32
 800e538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e53a:	68fb      	ldr	r3, [r7, #12]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3714      	adds	r7, #20
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	0800e54d 	.word	0x0800e54d

0800e54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <prvTaskExitError+0x58>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d00b      	beq.n	800e578 <prvTaskExitError+0x2c>
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	b672      	cpsid	i
 800e566:	f383 8811 	msr	BASEPRI, r3
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	b662      	cpsie	i
 800e574:	60fb      	str	r3, [r7, #12]
 800e576:	e7fe      	b.n	800e576 <prvTaskExitError+0x2a>
 800e578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57c:	b672      	cpsid	i
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	b662      	cpsie	i
 800e58c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e58e:	bf00      	nop
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d0fc      	beq.n	800e590 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e596:	bf00      	nop
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	20000024 	.word	0x20000024
	...

0800e5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <pxCurrentTCBConst2>)
 800e5b2:	6819      	ldr	r1, [r3, #0]
 800e5b4:	6808      	ldr	r0, [r1, #0]
 800e5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ba:	f380 8809 	msr	PSP, r0
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f04f 0000 	mov.w	r0, #0
 800e5c6:	f380 8811 	msr	BASEPRI, r0
 800e5ca:	4770      	bx	lr
 800e5cc:	f3af 8000 	nop.w

0800e5d0 <pxCurrentTCBConst2>:
 800e5d0:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop

0800e5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5d8:	4808      	ldr	r0, [pc, #32]	; (800e5fc <prvPortStartFirstTask+0x24>)
 800e5da:	6800      	ldr	r0, [r0, #0]
 800e5dc:	6800      	ldr	r0, [r0, #0]
 800e5de:	f380 8808 	msr	MSP, r0
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8814 	msr	CONTROL, r0
 800e5ea:	b662      	cpsie	i
 800e5ec:	b661      	cpsie	f
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	df00      	svc	0
 800e5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5fa:	bf00      	nop
 800e5fc:	e000ed08 	.word	0xe000ed08

0800e600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e606:	4b36      	ldr	r3, [pc, #216]	; (800e6e0 <xPortStartScheduler+0xe0>)
 800e608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	22ff      	movs	r2, #255	; 0xff
 800e616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	b2db      	uxtb	r3, r3
 800e624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	4b2e      	ldr	r3, [pc, #184]	; (800e6e4 <xPortStartScheduler+0xe4>)
 800e62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e62e:	4b2e      	ldr	r3, [pc, #184]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e630:	2207      	movs	r2, #7
 800e632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e634:	e009      	b.n	800e64a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e636:	4b2c      	ldr	r3, [pc, #176]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	4a2a      	ldr	r2, [pc, #168]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	005b      	lsls	r3, r3, #1
 800e646:	b2db      	uxtb	r3, r3
 800e648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e64a:	78fb      	ldrb	r3, [r7, #3]
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e652:	2b80      	cmp	r3, #128	; 0x80
 800e654:	d0ef      	beq.n	800e636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e656:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f1c3 0307 	rsb	r3, r3, #7
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d00b      	beq.n	800e67a <xPortStartScheduler+0x7a>
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	b672      	cpsid	i
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	b662      	cpsie	i
 800e676:	60bb      	str	r3, [r7, #8]
 800e678:	e7fe      	b.n	800e678 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e67a:	4b1b      	ldr	r3, [pc, #108]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	021b      	lsls	r3, r3, #8
 800e680:	4a19      	ldr	r2, [pc, #100]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e682:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e684:	4b18      	ldr	r3, [pc, #96]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e68c:	4a16      	ldr	r2, [pc, #88]	; (800e6e8 <xPortStartScheduler+0xe8>)
 800e68e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	b2da      	uxtb	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e698:	4b14      	ldr	r3, [pc, #80]	; (800e6ec <xPortStartScheduler+0xec>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a13      	ldr	r2, [pc, #76]	; (800e6ec <xPortStartScheduler+0xec>)
 800e69e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6a4:	4b11      	ldr	r3, [pc, #68]	; (800e6ec <xPortStartScheduler+0xec>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a10      	ldr	r2, [pc, #64]	; (800e6ec <xPortStartScheduler+0xec>)
 800e6aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6b0:	f000 f8d4 	bl	800e85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6b4:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <xPortStartScheduler+0xf0>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6ba:	f000 f8f3 	bl	800e8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6be:	4b0d      	ldr	r3, [pc, #52]	; (800e6f4 <xPortStartScheduler+0xf4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a0c      	ldr	r2, [pc, #48]	; (800e6f4 <xPortStartScheduler+0xf4>)
 800e6c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6ca:	f7ff ff85 	bl	800e5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6ce:	f7ff fa65 	bl	800db9c <vTaskSwitchContext>
	prvTaskExitError();
 800e6d2:	f7ff ff3b 	bl	800e54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	e000e400 	.word	0xe000e400
 800e6e4:	200004e4 	.word	0x200004e4
 800e6e8:	200004e8 	.word	0x200004e8
 800e6ec:	e000ed20 	.word	0xe000ed20
 800e6f0:	20000024 	.word	0x20000024
 800e6f4:	e000ef34 	.word	0xe000ef34

0800e6f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	b672      	cpsid	i
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	b662      	cpsie	i
 800e712:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e714:	4b0f      	ldr	r3, [pc, #60]	; (800e754 <vPortEnterCritical+0x5c>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3301      	adds	r3, #1
 800e71a:	4a0e      	ldr	r2, [pc, #56]	; (800e754 <vPortEnterCritical+0x5c>)
 800e71c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e71e:	4b0d      	ldr	r3, [pc, #52]	; (800e754 <vPortEnterCritical+0x5c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b01      	cmp	r3, #1
 800e724:	d110      	bne.n	800e748 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <vPortEnterCritical+0x60>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00b      	beq.n	800e748 <vPortEnterCritical+0x50>
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	b672      	cpsid	i
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	b662      	cpsie	i
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	e7fe      	b.n	800e746 <vPortEnterCritical+0x4e>
	}
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20000024 	.word	0x20000024
 800e758:	e000ed04 	.word	0xe000ed04

0800e75c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e762:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <vPortExitCritical+0x50>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10b      	bne.n	800e782 <vPortExitCritical+0x26>
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	b672      	cpsid	i
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	b662      	cpsie	i
 800e77e:	607b      	str	r3, [r7, #4]
 800e780:	e7fe      	b.n	800e780 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <vPortExitCritical+0x50>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3b01      	subs	r3, #1
 800e788:	4a08      	ldr	r2, [pc, #32]	; (800e7ac <vPortExitCritical+0x50>)
 800e78a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e78c:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <vPortExitCritical+0x50>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <vPortExitCritical+0x42>
 800e794:	2300      	movs	r3, #0
 800e796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e79e:	bf00      	nop
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	20000024 	.word	0x20000024

0800e7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7b0:	f3ef 8009 	mrs	r0, PSP
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	4b15      	ldr	r3, [pc, #84]	; (800e810 <pxCurrentTCBConst>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	f01e 0f10 	tst.w	lr, #16
 800e7c0:	bf08      	it	eq
 800e7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	6010      	str	r0, [r2, #0]
 800e7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7d4:	b672      	cpsid	i
 800e7d6:	f380 8811 	msr	BASEPRI, r0
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	b662      	cpsie	i
 800e7e4:	f7ff f9da 	bl	800db9c <vTaskSwitchContext>
 800e7e8:	f04f 0000 	mov.w	r0, #0
 800e7ec:	f380 8811 	msr	BASEPRI, r0
 800e7f0:	bc09      	pop	{r0, r3}
 800e7f2:	6819      	ldr	r1, [r3, #0]
 800e7f4:	6808      	ldr	r0, [r1, #0]
 800e7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	f01e 0f10 	tst.w	lr, #16
 800e7fe:	bf08      	it	eq
 800e800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e804:	f380 8809 	msr	PSP, r0
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop

0800e810 <pxCurrentTCBConst>:
 800e810:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop

0800e818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	b672      	cpsid	i
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	b662      	cpsie	i
 800e832:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e834:	f7ff f8f8 	bl	800da28 <xTaskIncrementTick>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d003      	beq.n	800e846 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e83e:	4b06      	ldr	r3, [pc, #24]	; (800e858 <SysTick_Handler+0x40>)
 800e840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	2300      	movs	r3, #0
 800e848:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e860:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e866:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <vPortSetupTimerInterrupt+0x38>)
 800e868:	2200      	movs	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e86c:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <vPortSetupTimerInterrupt+0x3c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <vPortSetupTimerInterrupt+0x40>)
 800e872:	fba2 2303 	umull	r2, r3, r2, r3
 800e876:	099b      	lsrs	r3, r3, #6
 800e878:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <vPortSetupTimerInterrupt+0x44>)
 800e87a:	3b01      	subs	r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e880:	2207      	movs	r2, #7
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	e000e010 	.word	0xe000e010
 800e894:	e000e018 	.word	0xe000e018
 800e898:	20000018 	.word	0x20000018
 800e89c:	10624dd3 	.word	0x10624dd3
 800e8a0:	e000e014 	.word	0xe000e014

0800e8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8b4 <vPortEnableVFP+0x10>
 800e8a8:	6801      	ldr	r1, [r0, #0]
 800e8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ae:	6001      	str	r1, [r0, #0]
 800e8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8b2:	bf00      	nop
 800e8b4:	e000ed88 	.word	0xe000ed88

0800e8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b0f      	cmp	r3, #15
 800e8c8:	d915      	bls.n	800e8f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ca:	4a18      	ldr	r2, [pc, #96]	; (800e92c <vPortValidateInterruptPriority+0x74>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8d4:	4b16      	ldr	r3, [pc, #88]	; (800e930 <vPortValidateInterruptPriority+0x78>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	7afa      	ldrb	r2, [r7, #11]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d20b      	bcs.n	800e8f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	b672      	cpsid	i
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	b662      	cpsie	i
 800e8f2:	607b      	str	r3, [r7, #4]
 800e8f4:	e7fe      	b.n	800e8f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	; (800e934 <vPortValidateInterruptPriority+0x7c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8fe:	4b0e      	ldr	r3, [pc, #56]	; (800e938 <vPortValidateInterruptPriority+0x80>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d90b      	bls.n	800e91e <vPortValidateInterruptPriority+0x66>
 800e906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90a:	b672      	cpsid	i
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	b662      	cpsie	i
 800e91a:	603b      	str	r3, [r7, #0]
 800e91c:	e7fe      	b.n	800e91c <vPortValidateInterruptPriority+0x64>
	}
 800e91e:	bf00      	nop
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	e000e3f0 	.word	0xe000e3f0
 800e930:	200004e4 	.word	0x200004e4
 800e934:	e000ed0c 	.word	0xe000ed0c
 800e938:	200004e8 	.word	0x200004e8

0800e93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08a      	sub	sp, #40	; 0x28
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e944:	2300      	movs	r3, #0
 800e946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e948:	f7fe ffa0 	bl	800d88c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e94c:	4b5c      	ldr	r3, [pc, #368]	; (800eac0 <pvPortMalloc+0x184>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d101      	bne.n	800e958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e954:	f000 f91a 	bl	800eb8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e958:	4b5a      	ldr	r3, [pc, #360]	; (800eac4 <pvPortMalloc+0x188>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4013      	ands	r3, r2
 800e960:	2b00      	cmp	r3, #0
 800e962:	f040 8090 	bne.w	800ea86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d01e      	beq.n	800e9aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e96c:	2208      	movs	r2, #8
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4413      	add	r3, r2
 800e972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d015      	beq.n	800e9aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f023 0307 	bic.w	r3, r3, #7
 800e984:	3308      	adds	r3, #8
 800e986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00b      	beq.n	800e9aa <pvPortMalloc+0x6e>
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	b672      	cpsid	i
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	b662      	cpsie	i
 800e9a6:	617b      	str	r3, [r7, #20]
 800e9a8:	e7fe      	b.n	800e9a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d06a      	beq.n	800ea86 <pvPortMalloc+0x14a>
 800e9b0:	4b45      	ldr	r3, [pc, #276]	; (800eac8 <pvPortMalloc+0x18c>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d865      	bhi.n	800ea86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9ba:	4b44      	ldr	r3, [pc, #272]	; (800eacc <pvPortMalloc+0x190>)
 800e9bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9be:	4b43      	ldr	r3, [pc, #268]	; (800eacc <pvPortMalloc+0x190>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9c4:	e004      	b.n	800e9d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d903      	bls.n	800e9e2 <pvPortMalloc+0xa6>
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1f1      	bne.n	800e9c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9e2:	4b37      	ldr	r3, [pc, #220]	; (800eac0 <pvPortMalloc+0x184>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d04c      	beq.n	800ea86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2208      	movs	r2, #8
 800e9f2:	4413      	add	r3, r2
 800e9f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	1ad2      	subs	r2, r2, r3
 800ea06:	2308      	movs	r3, #8
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d920      	bls.n	800ea50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4413      	add	r3, r2
 800ea14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	f003 0307 	and.w	r3, r3, #7
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00b      	beq.n	800ea38 <pvPortMalloc+0xfc>
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	b672      	cpsid	i
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	b662      	cpsie	i
 800ea34:	613b      	str	r3, [r7, #16]
 800ea36:	e7fe      	b.n	800ea36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	1ad2      	subs	r2, r2, r3
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea4a:	69b8      	ldr	r0, [r7, #24]
 800ea4c:	f000 f900 	bl	800ec50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea50:	4b1d      	ldr	r3, [pc, #116]	; (800eac8 <pvPortMalloc+0x18c>)
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	4a1b      	ldr	r2, [pc, #108]	; (800eac8 <pvPortMalloc+0x18c>)
 800ea5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea5e:	4b1a      	ldr	r3, [pc, #104]	; (800eac8 <pvPortMalloc+0x18c>)
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	4b1b      	ldr	r3, [pc, #108]	; (800ead0 <pvPortMalloc+0x194>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d203      	bcs.n	800ea72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea6a:	4b17      	ldr	r3, [pc, #92]	; (800eac8 <pvPortMalloc+0x18c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <pvPortMalloc+0x194>)
 800ea70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	4b13      	ldr	r3, [pc, #76]	; (800eac4 <pvPortMalloc+0x188>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea86:	f7fe ff0f 	bl	800d8a8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ea90:	f7f2 f834 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00b      	beq.n	800eab6 <pvPortMalloc+0x17a>
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	b672      	cpsid	i
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	b662      	cpsie	i
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e7fe      	b.n	800eab4 <pvPortMalloc+0x178>
	return pvReturn;
 800eab6:	69fb      	ldr	r3, [r7, #28]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3728      	adds	r7, #40	; 0x28
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	200084f4 	.word	0x200084f4
 800eac4:	20008500 	.word	0x20008500
 800eac8:	200084f8 	.word	0x200084f8
 800eacc:	200084ec 	.word	0x200084ec
 800ead0:	200084fc 	.word	0x200084fc

0800ead4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b086      	sub	sp, #24
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d04a      	beq.n	800eb7c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eae6:	2308      	movs	r3, #8
 800eae8:	425b      	negs	r3, r3
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	4413      	add	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	4b22      	ldr	r3, [pc, #136]	; (800eb84 <vPortFree+0xb0>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4013      	ands	r3, r2
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10b      	bne.n	800eb1a <vPortFree+0x46>
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	b672      	cpsid	i
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	b662      	cpsie	i
 800eb16:	60fb      	str	r3, [r7, #12]
 800eb18:	e7fe      	b.n	800eb18 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00b      	beq.n	800eb3a <vPortFree+0x66>
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	b672      	cpsid	i
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	b662      	cpsie	i
 800eb36:	60bb      	str	r3, [r7, #8]
 800eb38:	e7fe      	b.n	800eb38 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	685a      	ldr	r2, [r3, #4]
 800eb3e:	4b11      	ldr	r3, [pc, #68]	; (800eb84 <vPortFree+0xb0>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4013      	ands	r3, r2
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d019      	beq.n	800eb7c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d115      	bne.n	800eb7c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	685a      	ldr	r2, [r3, #4]
 800eb54:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <vPortFree+0xb0>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	43db      	mvns	r3, r3
 800eb5a:	401a      	ands	r2, r3
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb60:	f7fe fe94 	bl	800d88c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <vPortFree+0xb4>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	4a06      	ldr	r2, [pc, #24]	; (800eb88 <vPortFree+0xb4>)
 800eb70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb72:	6938      	ldr	r0, [r7, #16]
 800eb74:	f000 f86c 	bl	800ec50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb78:	f7fe fe96 	bl	800d8a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb7c:	bf00      	nop
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20008500 	.word	0x20008500
 800eb88:	200084f8 	.word	0x200084f8

0800eb8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <prvHeapInit+0xac>)
 800eb9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00c      	beq.n	800ebc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3307      	adds	r3, #7
 800ebaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f023 0307 	bic.w	r3, r3, #7
 800ebb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	4a1f      	ldr	r2, [pc, #124]	; (800ec38 <prvHeapInit+0xac>)
 800ebbc:	4413      	add	r3, r2
 800ebbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebc4:	4a1d      	ldr	r2, [pc, #116]	; (800ec3c <prvHeapInit+0xb0>)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebca:	4b1c      	ldr	r3, [pc, #112]	; (800ec3c <prvHeapInit+0xb0>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebd8:	2208      	movs	r2, #8
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	1a9b      	subs	r3, r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f023 0307 	bic.w	r3, r3, #7
 800ebe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4a15      	ldr	r2, [pc, #84]	; (800ec40 <prvHeapInit+0xb4>)
 800ebec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebee:	4b14      	ldr	r3, [pc, #80]	; (800ec40 <prvHeapInit+0xb4>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebf6:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <prvHeapInit+0xb4>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	1ad2      	subs	r2, r2, r3
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <prvHeapInit+0xb4>)
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	4a0a      	ldr	r2, [pc, #40]	; (800ec44 <prvHeapInit+0xb8>)
 800ec1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4a09      	ldr	r2, [pc, #36]	; (800ec48 <prvHeapInit+0xbc>)
 800ec22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec24:	4b09      	ldr	r3, [pc, #36]	; (800ec4c <prvHeapInit+0xc0>)
 800ec26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec2a:	601a      	str	r2, [r3, #0]
}
 800ec2c:	bf00      	nop
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	200004ec 	.word	0x200004ec
 800ec3c:	200084ec 	.word	0x200084ec
 800ec40:	200084f4 	.word	0x200084f4
 800ec44:	200084fc 	.word	0x200084fc
 800ec48:	200084f8 	.word	0x200084f8
 800ec4c:	20008500 	.word	0x20008500

0800ec50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec58:	4b28      	ldr	r3, [pc, #160]	; (800ecfc <prvInsertBlockIntoFreeList+0xac>)
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e002      	b.n	800ec64 <prvInsertBlockIntoFreeList+0x14>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d8f7      	bhi.n	800ec5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	4413      	add	r3, r2
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d108      	bne.n	800ec92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	441a      	add	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	441a      	add	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d118      	bne.n	800ecd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <prvInsertBlockIntoFreeList+0xb0>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d00d      	beq.n	800ecce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	441a      	add	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	e008      	b.n	800ece0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecce:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <prvInsertBlockIntoFreeList+0xb0>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	e003      	b.n	800ece0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d002      	beq.n	800ecee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecee:	bf00      	nop
 800ecf0:	3714      	adds	r7, #20
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	200084ec 	.word	0x200084ec
 800ed00:	200084f4 	.word	0x200084f4

0800ed04 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ed08:	f005 fa2e 	bl	8014168 <touchgfx_init>
}
 800ed0c:	bf00      	nop
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ed14:	f005 fa52 	bl	80141bc <touchgfx_taskEntry>
}
 800ed18:	bf00      	nop
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
    {
 800ed24:	4a04      	ldr	r2, [pc, #16]	; (800ed38 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	601a      	str	r2, [r3, #0]
    }
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	08025dc4 	.word	0x08025dc4

0800ed3c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
    }
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ffe9 	bl	800ed1c <_ZN8touchgfx12FontProviderD1Ev>
 800ed4a:	2104      	movs	r1, #4
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f015 fc32 	bl	80245b6 <_ZdlPvj>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ed68:	887b      	ldrh	r3, [r7, #2]
 800ed6a:	2b07      	cmp	r3, #7
 800ed6c:	d83a      	bhi.n	800ede4 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800ed6e:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800ed70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed74:	0800ed95 	.word	0x0800ed95
 800ed78:	0800ed9f 	.word	0x0800ed9f
 800ed7c:	0800eda9 	.word	0x0800eda9
 800ed80:	0800edb3 	.word	0x0800edb3
 800ed84:	0800edbd 	.word	0x0800edbd
 800ed88:	0800edc7 	.word	0x0800edc7
 800ed8c:	0800edd1 	.word	0x0800edd1
 800ed90:	0800eddb 	.word	0x0800eddb
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ed94:	f003 fb9c 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	e023      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ed9e:	f003 fb97 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800eda2:	4603      	mov	r3, r0
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	e01e      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800eda8:	f003 fb92 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edac:	4603      	mov	r3, r0
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	e019      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800edb2:	f003 fb8d 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edb6:	4603      	mov	r3, r0
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	e014      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800edbc:	f003 fb88 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edc0:	4603      	mov	r3, r0
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	e00f      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800edc6:	f003 fb83 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edca:	4603      	mov	r3, r0
 800edcc:	691b      	ldr	r3, [r3, #16]
 800edce:	e00a      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800edd0:	f003 fb7e 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edd4:	4603      	mov	r3, r0
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	e005      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800edda:	f003 fb79 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 800edde:	4603      	mov	r3, r0
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	e000      	b.n	800ede6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ede4:	2300      	movs	r3, #0
    }
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop

0800edf0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	4a05      	ldr	r2, [pc, #20]	; (800ee10 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	601a      	str	r2, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7ff ff8b 	bl	800ed1c <_ZN8touchgfx12FontProviderD1Ev>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	08025db0 	.word	0x08025db0

0800ee14 <_ZN23ApplicationFontProviderD0Ev>:
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7ff ffe7 	bl	800edf0 <_ZN23ApplicationFontProviderD1Ev>
 800ee22:	2104      	movs	r1, #4
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f015 fbc6 	bl	80245b6 <_ZdlPvj>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	4a04      	ldr	r2, [pc, #16]	; (800ee50 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4618      	mov	r0, r3
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	08028044 	.word	0x08028044

0800ee54 <_ZN8touchgfx4FontD0Ev>:
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7ff ffe9 	bl	800ee34 <_ZN8touchgfx4FontD1Ev>
 800ee62:	2110      	movs	r1, #16
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f015 fba6 	bl	80245b6 <_ZdlPvj>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ee74:	b590      	push	{r4, r7, lr}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3308      	adds	r3, #8
 800ee8e:	681c      	ldr	r4, [r3, #0]
 800ee90:	f107 030f 	add.w	r3, r7, #15
 800ee94:	f107 0210 	add.w	r2, r7, #16
 800ee98:	8879      	ldrh	r1, [r7, #2]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	47a0      	blx	r4
 800ee9e:	6178      	str	r0, [r7, #20]
        return glyph;
 800eea0:	697b      	ldr	r3, [r7, #20]
    }
 800eea2:	4618      	mov	r0, r3
 800eea4:	371c      	adds	r7, #28
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd90      	pop	{r4, r7, pc}

0800eeaa <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	895b      	ldrh	r3, [r3, #10]
    }
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	899b      	ldrh	r3, [r3, #12]
    }
 800eece:	4618      	mov	r0, r3
 800eed0:	370c      	adds	r7, #12
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800eeda:	b480      	push	{r7}
 800eedc:	b083      	sub	sp, #12
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	889b      	ldrh	r3, [r3, #4]
    }
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	889a      	ldrh	r2, [r3, #4]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	799b      	ldrb	r3, [r3, #6]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	4413      	add	r3, r2
 800ef06:	b29b      	uxth	r3, r3
    }
 800ef08:	4618      	mov	r0, r3
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	79db      	ldrb	r3, [r3, #7]
 800ef20:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ef24:	b2db      	uxtb	r3, r3
    }
 800ef26:	4618      	mov	r0, r3
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800ef32:	b480      	push	{r7}
 800ef34:	b083      	sub	sp, #12
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	79db      	ldrb	r3, [r3, #7]
 800ef3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ef42:	b2db      	uxtb	r3, r3
    }
 800ef44:	4618      	mov	r0, r3
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	4a05      	ldr	r2, [pc, #20]	; (800ef70 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff ff67 	bl	800ee34 <_ZN8touchgfx4FontD1Ev>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	080280fc 	.word	0x080280fc

0800ef74 <_ZN8touchgfx9ConstFontD0Ev>:
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff ffe7 	bl	800ef50 <_ZN8touchgfx9ConstFontD1Ev>
 800ef82:	2118      	movs	r1, #24
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f015 fb16 	bl	80245b6 <_ZdlPvj>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	4a05      	ldr	r2, [pc, #20]	; (800efb4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff ffd3 	bl	800ef50 <_ZN8touchgfx9ConstFontD1Ev>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	08025e08 	.word	0x08025e08

0800efb8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff ffe7 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800efc6:	2124      	movs	r1, #36	; 0x24
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f015 faf4 	bl	80245b6 <_ZdlPvj>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f82d 	bl	800f040 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800efe6:	4b08      	ldr	r3, [pc, #32]	; (800f008 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	4b08      	ldr	r3, [pc, #32]	; (800f00c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800efec:	6819      	ldr	r1, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	440b      	add	r3, r1
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	4413      	add	r3, r2
 800effc:	681b      	ldr	r3, [r3, #0]
    }
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	2000bd08 	.word	0x2000bd08
 800f00c:	2000bd00 	.word	0x2000bd00

0800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f811 	bl	800f040 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f01e:	4b07      	ldr	r3, [pc, #28]	; (800f03c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	4413      	add	r3, r2
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f030:	b2db      	uxtb	r3, r3
    }
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	2000bd00 	.word	0x2000bd00

0800f040 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d105      	bne.n	800f05c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f050:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f052:	4a0c      	ldr	r2, [pc, #48]	; (800f084 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f054:	21de      	movs	r1, #222	; 0xde
 800f056:	480c      	ldr	r0, [pc, #48]	; (800f088 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f058:	f015 fad8 	bl	802460c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	881a      	ldrh	r2, [r3, #0]
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	429a      	cmp	r2, r3
 800f066:	d305      	bcc.n	800f074 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f068:	4b09      	ldr	r3, [pc, #36]	; (800f090 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f06a:	4a06      	ldr	r2, [pc, #24]	; (800f084 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f06c:	21df      	movs	r1, #223	; 0xdf
 800f06e:	4806      	ldr	r0, [pc, #24]	; (800f088 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f070:	f015 facc 	bl	802460c <__assert_func>
    }
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	2000bd00 	.word	0x2000bd00
 800f080:	08025694 	.word	0x08025694
 800f084:	08025dd0 	.word	0x08025dd0
 800f088:	080256d8 	.word	0x080256d8
 800f08c:	2000bd04 	.word	0x2000bd04
 800f090:	0802571c 	.word	0x0802571c

0800f094 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7b5b      	ldrb	r3, [r3, #13]
 800f0a0:	021b      	lsls	r3, r3, #8
 800f0a2:	b21b      	sxth	r3, r3
 800f0a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0a8:	b21a      	sxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	7adb      	ldrb	r3, [r3, #11]
 800f0ae:	b21b      	sxth	r3, r3
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	b21b      	sxth	r3, r3
 800f0b4:	b29b      	uxth	r3, r3
    }
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f0c2:	b480      	push	{r7}
 800f0c4:	b083      	sub	sp, #12
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
    }
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	370c      	adds	r7, #12
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08c      	sub	sp, #48	; 0x30
 800f0e0:	af08      	add	r7, sp, #32
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	80fb      	strh	r3, [r7, #6]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	88b9      	ldrh	r1, [r7, #4]
 800f0f6:	88fa      	ldrh	r2, [r7, #6]
 800f0f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f0fa:	9306      	str	r3, [sp, #24]
 800f0fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f0fe:	9305      	str	r3, [sp, #20]
 800f100:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f104:	9304      	str	r3, [sp, #16]
 800f106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f10a:	9303      	str	r3, [sp, #12]
 800f10c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	7f3b      	ldrb	r3, [r7, #28]
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	7e3b      	ldrb	r3, [r7, #24]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	460b      	mov	r3, r1
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	f009 ff69 	bl	8018ff4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f122:	4a08      	ldr	r2, [pc, #32]	; (800f144 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	601a      	str	r2, [r3, #0]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f12c:	619a      	str	r2, [r3, #24]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f132:	61da      	str	r2, [r3, #28]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f138:	621a      	str	r2, [r3, #32]
{
}
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	08025e08 	.word	0x08025e08

0800f148 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	889b      	ldrh	r3, [r3, #4]
 800f15c:	0adb      	lsrs	r3, r3, #11
 800f15e:	b29b      	uxth	r3, r3
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	4413      	add	r3, r2
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4413      	add	r3, r2
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b086      	sub	sp, #24
 800f17e:	af00      	add	r7, sp, #0
 800f180:	60f8      	str	r0, [r7, #12]
 800f182:	460b      	mov	r3, r1
 800f184:	607a      	str	r2, [r7, #4]
 800f186:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d003      	beq.n	800f196 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7b1b      	ldrb	r3, [r3, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f196:	2300      	movs	r3, #0
 800f198:	e023      	b.n	800f1e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff ff7a 	bl	800f094 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1a4:	8abb      	ldrh	r3, [r7, #20]
 800f1a6:	82fb      	strh	r3, [r7, #22]
 800f1a8:	8afa      	ldrh	r2, [r7, #22]
 800f1aa:	8abb      	ldrh	r3, [r7, #20]
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	7b09      	ldrb	r1, [r1, #12]
 800f1b0:	440b      	add	r3, r1
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	da14      	bge.n	800f1e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	69da      	ldr	r2, [r3, #28]
 800f1ba:	8afb      	ldrh	r3, [r7, #22]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	4413      	add	r3, r2
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	897a      	ldrh	r2, [r7, #10]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d107      	bne.n	800f1d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	69da      	ldr	r2, [r3, #28]
 800f1cc:	8afb      	ldrh	r3, [r7, #22]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f1d6:	e004      	b.n	800f1e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1d8:	8afb      	ldrh	r3, [r7, #22]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	82fb      	strh	r3, [r7, #22]
 800f1de:	e7e3      	b.n	800f1a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3718      	adds	r7, #24
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	4801      	ldr	r0, [pc, #4]	; (800f1f8 <__tcf_0+0xc>)
 800f1f2:	f7ff fecf 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	20008504 	.word	0x20008504

0800f1fc <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08a      	sub	sp, #40	; 0x28
 800f200:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f202:	4b15      	ldr	r3, [pc, #84]	; (800f258 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 0301 	and.w	r3, r3, #1
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d11f      	bne.n	800f24e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f20e:	2300      	movs	r3, #0
 800f210:	9309      	str	r3, [sp, #36]	; 0x24
 800f212:	2300      	movs	r3, #0
 800f214:	9308      	str	r3, [sp, #32]
 800f216:	233f      	movs	r3, #63	; 0x3f
 800f218:	9307      	str	r3, [sp, #28]
 800f21a:	4b10      	ldr	r3, [pc, #64]	; (800f25c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f21c:	9306      	str	r3, [sp, #24]
 800f21e:	4b10      	ldr	r3, [pc, #64]	; (800f260 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f220:	9305      	str	r3, [sp, #20]
 800f222:	2301      	movs	r3, #1
 800f224:	9304      	str	r3, [sp, #16]
 800f226:	2300      	movs	r3, #0
 800f228:	9303      	str	r3, [sp, #12]
 800f22a:	2301      	movs	r3, #1
 800f22c:	9302      	str	r3, [sp, #8]
 800f22e:	2304      	movs	r3, #4
 800f230:	9301      	str	r3, [sp, #4]
 800f232:	2300      	movs	r3, #0
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	230a      	movs	r3, #10
 800f238:	2204      	movs	r2, #4
 800f23a:	490a      	ldr	r1, [pc, #40]	; (800f264 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f23c:	480a      	ldr	r0, [pc, #40]	; (800f268 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f23e:	f7ff ff4d 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f242:	4b05      	ldr	r3, [pc, #20]	; (800f258 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f244:	2201      	movs	r2, #1
 800f246:	601a      	str	r2, [r3, #0]
 800f248:	4808      	ldr	r0, [pc, #32]	; (800f26c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f24a:	f015 f9fd 	bl	8024648 <atexit>
    return Asap_Bold_10_4bpp;
 800f24e:	4b06      	ldr	r3, [pc, #24]	; (800f268 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f250:	4618      	mov	r0, r3
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	20008528 	.word	0x20008528
 800f25c:	0802d0dc 	.word	0x0802d0dc
 800f260:	08025e54 	.word	0x08025e54
 800f264:	0802d0f8 	.word	0x0802d0f8
 800f268:	20008504 	.word	0x20008504
 800f26c:	0800f1ed 	.word	0x0800f1ed

0800f270 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
 800f274:	4801      	ldr	r0, [pc, #4]	; (800f27c <__tcf_0+0xc>)
 800f276:	f7ff fe8d 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	2000852c 	.word	0x2000852c

0800f280 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08a      	sub	sp, #40	; 0x28
 800f284:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f286:	4b15      	ldr	r3, [pc, #84]	; (800f2dc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f003 0301 	and.w	r3, r3, #1
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d11f      	bne.n	800f2d2 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f292:	2300      	movs	r3, #0
 800f294:	9309      	str	r3, [sp, #36]	; 0x24
 800f296:	2300      	movs	r3, #0
 800f298:	9308      	str	r3, [sp, #32]
 800f29a:	233f      	movs	r3, #63	; 0x3f
 800f29c:	9307      	str	r3, [sp, #28]
 800f29e:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f2a0:	9306      	str	r3, [sp, #24]
 800f2a2:	4b10      	ldr	r3, [pc, #64]	; (800f2e4 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f2a4:	9305      	str	r3, [sp, #20]
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	9304      	str	r3, [sp, #16]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	9303      	str	r3, [sp, #12]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	9302      	str	r3, [sp, #8]
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	230c      	movs	r3, #12
 800f2bc:	221c      	movs	r2, #28
 800f2be:	490a      	ldr	r1, [pc, #40]	; (800f2e8 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f2c0:	480a      	ldr	r0, [pc, #40]	; (800f2ec <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f2c2:	f7ff ff0b 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f2c6:	4b05      	ldr	r3, [pc, #20]	; (800f2dc <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	4808      	ldr	r0, [pc, #32]	; (800f2f0 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f2ce:	f015 f9bb 	bl	8024648 <atexit>
    return Asap_Bold_12_4bpp;
 800f2d2:	4b06      	ldr	r3, [pc, #24]	; (800f2ec <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20008550 	.word	0x20008550
 800f2e0:	0802d0e0 	.word	0x0802d0e0
 800f2e4:	08025e58 	.word	0x08025e58
 800f2e8:	0802d130 	.word	0x0802d130
 800f2ec:	2000852c 	.word	0x2000852c
 800f2f0:	0800f271 	.word	0x0800f271

0800f2f4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	4801      	ldr	r0, [pc, #4]	; (800f300 <__tcf_0+0xc>)
 800f2fa:	f7ff fe4b 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	20008554 	.word	0x20008554

0800f304 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b08a      	sub	sp, #40	; 0x28
 800f308:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f30a:	4b15      	ldr	r3, [pc, #84]	; (800f360 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d11f      	bne.n	800f356 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f316:	2300      	movs	r3, #0
 800f318:	9309      	str	r3, [sp, #36]	; 0x24
 800f31a:	2300      	movs	r3, #0
 800f31c:	9308      	str	r3, [sp, #32]
 800f31e:	2300      	movs	r3, #0
 800f320:	9307      	str	r3, [sp, #28]
 800f322:	4b10      	ldr	r3, [pc, #64]	; (800f364 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f324:	9306      	str	r3, [sp, #24]
 800f326:	4b10      	ldr	r3, [pc, #64]	; (800f368 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f328:	9305      	str	r3, [sp, #20]
 800f32a:	2300      	movs	r3, #0
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	2300      	movs	r3, #0
 800f330:	9303      	str	r3, [sp, #12]
 800f332:	2301      	movs	r3, #1
 800f334:	9302      	str	r3, [sp, #8]
 800f336:	2304      	movs	r3, #4
 800f338:	9301      	str	r3, [sp, #4]
 800f33a:	2300      	movs	r3, #0
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	2312      	movs	r3, #18
 800f340:	220d      	movs	r2, #13
 800f342:	490a      	ldr	r1, [pc, #40]	; (800f36c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f344:	480a      	ldr	r0, [pc, #40]	; (800f370 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f346:	f7ff fec9 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f34a:	4b05      	ldr	r3, [pc, #20]	; (800f360 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f34c:	2201      	movs	r2, #1
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	4808      	ldr	r0, [pc, #32]	; (800f374 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f352:	f015 f979 	bl	8024648 <atexit>
    return Asap_Bold_18_4bpp;
 800f356:	4b06      	ldr	r3, [pc, #24]	; (800f370 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f358:	4618      	mov	r0, r3
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20008578 	.word	0x20008578
 800f364:	0802d0e4 	.word	0x0802d0e4
 800f368:	08025e5c 	.word	0x08025e5c
 800f36c:	0802d2b8 	.word	0x0802d2b8
 800f370:	20008554 	.word	0x20008554
 800f374:	0800f2f5 	.word	0x0800f2f5

0800f378 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f378:	b580      	push	{r7, lr}
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	4801      	ldr	r0, [pc, #4]	; (800f384 <__tcf_0+0xc>)
 800f37e:	f7ff fe09 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f382:	bd80      	pop	{r7, pc}
 800f384:	2000857c 	.word	0x2000857c

0800f388 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08a      	sub	sp, #40	; 0x28
 800f38c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f38e:	4b15      	ldr	r3, [pc, #84]	; (800f3e4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f003 0301 	and.w	r3, r3, #1
 800f396:	2b00      	cmp	r3, #0
 800f398:	d11f      	bne.n	800f3da <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f39a:	2300      	movs	r3, #0
 800f39c:	9309      	str	r3, [sp, #36]	; 0x24
 800f39e:	2300      	movs	r3, #0
 800f3a0:	9308      	str	r3, [sp, #32]
 800f3a2:	233f      	movs	r3, #63	; 0x3f
 800f3a4:	9307      	str	r3, [sp, #28]
 800f3a6:	4b10      	ldr	r3, [pc, #64]	; (800f3e8 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f3a8:	9306      	str	r3, [sp, #24]
 800f3aa:	4b10      	ldr	r3, [pc, #64]	; (800f3ec <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f3ac:	9305      	str	r3, [sp, #20]
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	9304      	str	r3, [sp, #16]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	9303      	str	r3, [sp, #12]
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	9302      	str	r3, [sp, #8]
 800f3ba:	2304      	movs	r3, #4
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	2315      	movs	r3, #21
 800f3c4:	220d      	movs	r2, #13
 800f3c6:	490a      	ldr	r1, [pc, #40]	; (800f3f0 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f3c8:	480a      	ldr	r0, [pc, #40]	; (800f3f4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f3ca:	f7ff fe87 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f3ce:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	4808      	ldr	r0, [pc, #32]	; (800f3f8 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f3d6:	f015 f937 	bl	8024648 <atexit>
    return Asap_Bold_21_4bpp;
 800f3da:	4b06      	ldr	r3, [pc, #24]	; (800f3f4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	200085a0 	.word	0x200085a0
 800f3e8:	0802d0e8 	.word	0x0802d0e8
 800f3ec:	08025e60 	.word	0x08025e60
 800f3f0:	0802d370 	.word	0x0802d370
 800f3f4:	2000857c 	.word	0x2000857c
 800f3f8:	0800f379 	.word	0x0800f379

0800f3fc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__tcf_0+0xc>)
 800f402:	f7ff fdc7 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f406:	bd80      	pop	{r7, pc}
 800f408:	200085a4 	.word	0x200085a4

0800f40c <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b08a      	sub	sp, #40	; 0x28
 800f410:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f412:	4b15      	ldr	r3, [pc, #84]	; (800f468 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 0301 	and.w	r3, r3, #1
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d11f      	bne.n	800f45e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f41e:	2300      	movs	r3, #0
 800f420:	9309      	str	r3, [sp, #36]	; 0x24
 800f422:	2300      	movs	r3, #0
 800f424:	9308      	str	r3, [sp, #32]
 800f426:	233f      	movs	r3, #63	; 0x3f
 800f428:	9307      	str	r3, [sp, #28]
 800f42a:	4b10      	ldr	r3, [pc, #64]	; (800f46c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f42c:	9306      	str	r3, [sp, #24]
 800f42e:	4b10      	ldr	r3, [pc, #64]	; (800f470 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f430:	9305      	str	r3, [sp, #20]
 800f432:	2301      	movs	r3, #1
 800f434:	9304      	str	r3, [sp, #16]
 800f436:	2300      	movs	r3, #0
 800f438:	9303      	str	r3, [sp, #12]
 800f43a:	2301      	movs	r3, #1
 800f43c:	9302      	str	r3, [sp, #8]
 800f43e:	2304      	movs	r3, #4
 800f440:	9301      	str	r3, [sp, #4]
 800f442:	2300      	movs	r3, #0
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	231e      	movs	r3, #30
 800f448:	220d      	movs	r2, #13
 800f44a:	490a      	ldr	r1, [pc, #40]	; (800f474 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f44c:	480a      	ldr	r0, [pc, #40]	; (800f478 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f44e:	f7ff fe45 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f454:	2201      	movs	r2, #1
 800f456:	601a      	str	r2, [r3, #0]
 800f458:	4808      	ldr	r0, [pc, #32]	; (800f47c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f45a:	f015 f8f5 	bl	8024648 <atexit>
    return Asap_Bold_30_4bpp;
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f460:	4618      	mov	r0, r3
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	200085c8 	.word	0x200085c8
 800f46c:	0802d0ec 	.word	0x0802d0ec
 800f470:	08025e64 	.word	0x08025e64
 800f474:	0802d428 	.word	0x0802d428
 800f478:	200085a4 	.word	0x200085a4
 800f47c:	0800f3fd 	.word	0x0800f3fd

0800f480 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f480:	b580      	push	{r7, lr}
 800f482:	af00      	add	r7, sp, #0
 800f484:	4801      	ldr	r0, [pc, #4]	; (800f48c <__tcf_0+0xc>)
 800f486:	f7ff fd85 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	200085cc 	.word	0x200085cc

0800f490 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	; 0x28
 800f494:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f496:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d11f      	bne.n	800f4e2 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	9308      	str	r3, [sp, #32]
 800f4aa:	233f      	movs	r3, #63	; 0x3f
 800f4ac:	9307      	str	r3, [sp, #28]
 800f4ae:	4b10      	ldr	r3, [pc, #64]	; (800f4f0 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f4b0:	9306      	str	r3, [sp, #24]
 800f4b2:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f4b4:	9305      	str	r3, [sp, #20]
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	9304      	str	r3, [sp, #16]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9303      	str	r3, [sp, #12]
 800f4be:	2301      	movs	r3, #1
 800f4c0:	9302      	str	r3, [sp, #8]
 800f4c2:	2304      	movs	r3, #4
 800f4c4:	9301      	str	r3, [sp, #4]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	2328      	movs	r3, #40	; 0x28
 800f4cc:	220c      	movs	r2, #12
 800f4ce:	490a      	ldr	r1, [pc, #40]	; (800f4f8 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f4d0:	480a      	ldr	r0, [pc, #40]	; (800f4fc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f4d2:	f7ff fe03 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4d6:	4b05      	ldr	r3, [pc, #20]	; (800f4ec <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f4d8:	2201      	movs	r2, #1
 800f4da:	601a      	str	r2, [r3, #0]
 800f4dc:	4808      	ldr	r0, [pc, #32]	; (800f500 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f4de:	f015 f8b3 	bl	8024648 <atexit>
    return Asap_Bold_40_4bpp;
 800f4e2:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	200085f0 	.word	0x200085f0
 800f4f0:	0802d0f0 	.word	0x0802d0f0
 800f4f4:	08025e68 	.word	0x08025e68
 800f4f8:	0802d4e0 	.word	0x0802d4e0
 800f4fc:	200085cc 	.word	0x200085cc
 800f500:	0800f481 	.word	0x0800f481

0800f504 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f504:	b580      	push	{r7, lr}
 800f506:	af00      	add	r7, sp, #0
 800f508:	4801      	ldr	r0, [pc, #4]	; (800f510 <__tcf_0+0xc>)
 800f50a:	f7ff fd43 	bl	800ef94 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	200085f4 	.word	0x200085f4

0800f514 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f51a:	4b15      	ldr	r3, [pc, #84]	; (800f570 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d11f      	bne.n	800f566 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f526:	2300      	movs	r3, #0
 800f528:	9309      	str	r3, [sp, #36]	; 0x24
 800f52a:	2300      	movs	r3, #0
 800f52c:	9308      	str	r3, [sp, #32]
 800f52e:	233f      	movs	r3, #63	; 0x3f
 800f530:	9307      	str	r3, [sp, #28]
 800f532:	4b10      	ldr	r3, [pc, #64]	; (800f574 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f534:	9306      	str	r3, [sp, #24]
 800f536:	4b10      	ldr	r3, [pc, #64]	; (800f578 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f538:	9305      	str	r3, [sp, #20]
 800f53a:	2300      	movs	r3, #0
 800f53c:	9304      	str	r3, [sp, #16]
 800f53e:	2300      	movs	r3, #0
 800f540:	9303      	str	r3, [sp, #12]
 800f542:	2301      	movs	r3, #1
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	2304      	movs	r3, #4
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	233c      	movs	r3, #60	; 0x3c
 800f550:	220c      	movs	r2, #12
 800f552:	490a      	ldr	r1, [pc, #40]	; (800f57c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f554:	480a      	ldr	r0, [pc, #40]	; (800f580 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f556:	f7ff fdc1 	bl	800f0dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f55a:	4b05      	ldr	r3, [pc, #20]	; (800f570 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	601a      	str	r2, [r3, #0]
 800f560:	4808      	ldr	r0, [pc, #32]	; (800f584 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f562:	f015 f871 	bl	8024648 <atexit>
    return Asap_Bold_60_4bpp;
 800f566:	4b06      	ldr	r3, [pc, #24]	; (800f580 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f568:	4618      	mov	r0, r3
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	20008618 	.word	0x20008618
 800f574:	0802d0f4 	.word	0x0802d0f4
 800f578:	08025e6c 	.word	0x08025e6c
 800f57c:	0802d588 	.word	0x0802d588
 800f580:	200085f4 	.word	0x200085f4
 800f584:	0800f505 	.word	0x0800f505

0800f588 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	4618      	mov	r0, r3
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
    {
    }
 800f5aa:	bf00      	nop
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	6039      	str	r1, [r7, #0]
    {
    }
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
    {
    }
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e0:	4770      	bx	lr

0800f5e2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f5e2:	b480      	push	{r7}
 800f5e4:	b083      	sub	sp, #12
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f5ee:	bf00      	nop
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f5fa:	b480      	push	{r7}
 800f5fc:	b083      	sub	sp, #12
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
    {
    }
 800f602:	bf00      	nop
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
    {
    }
 800f616:	bf00      	nop
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
	...

0800f624 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
    {
 800f62c:	4a04      	ldr	r2, [pc, #16]	; (800f640 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	601a      	str	r2, [r3, #0]
    }
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr
 800f640:	08025f60 	.word	0x08025f60

0800f644 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    }
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7ff ffe9 	bl	800f624 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f652:	2104      	movs	r1, #4
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f014 ffae 	bl	80245b6 <_ZdlPvj>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f66c:	4a07      	ldr	r2, [pc, #28]	; (800f68c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	605a      	str	r2, [r3, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	08025f40 	.word	0x08025f40

0800f690 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
    {
 800f698:	4a04      	ldr	r2, [pc, #16]	; (800f6ac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	601a      	str	r2, [r3, #0]
    }
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	08025f40 	.word	0x08025f40

0800f6b0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
    }
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff ffe9 	bl	800f690 <_ZN8touchgfx10TransitionD1Ev>
 800f6be:	210c      	movs	r1, #12
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f014 ff78 	bl	80245b6 <_ZdlPvj>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	605a      	str	r2, [r3, #4]
    }
 800f71c:	bf00      	nop
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
    {
 800f748:	4a04      	ldr	r2, [pc, #16]	; (800f75c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]
    }
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	08025f28 	.word	0x08025f28

0800f760 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    }
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7ff ffe9 	bl	800f740 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f76e:	2104      	movs	r1, #4
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f014 ff20 	bl	80245b6 <_ZdlPvj>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4618      	mov	r0, r3
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f780:	b480      	push	{r7}
 800f782:	af00      	add	r7, sp, #0
    {
        return instance;
 800f784:	4b03      	ldr	r3, [pc, #12]	; (800f794 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f786:	681b      	ldr	r3, [r3, #0]
    }
 800f788:	4618      	mov	r0, r3
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	2000bc70 	.word	0x2000bc70

0800f798 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f798:	b480      	push	{r7}
 800f79a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f79c:	4b0b      	ldr	r3, [pc, #44]	; (800f7cc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d008      	beq.n	800f7ba <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7a8:	4b08      	ldr	r3, [pc, #32]	; (800f7cc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d003      	beq.n	800f7ba <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7b8:	e002      	b.n	800f7c0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f7ba:	4b04      	ldr	r3, [pc, #16]	; (800f7cc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	2000bc70 	.word	0x2000bc70

0800f7d0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	4a05      	ldr	r2, [pc, #20]	; (800f7f0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff ff1f 	bl	800f624 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	08027f5c 	.word	0x08027f5c

0800f7f4 <_ZN8touchgfx11ApplicationD0Ev>:
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ffe7 	bl	800f7d0 <_ZN8touchgfx11ApplicationD1Ev>
 800f802:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f014 fed5 	bl	80245b6 <_ZdlPvj>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	f008 ff20 	bl	8018668 <_ZN8touchgfx11ApplicationC1Ev>
 800f828:	4a09      	ldr	r2, [pc, #36]	; (800f850 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a04      	ldr	r2, [pc, #16]	; (800f854 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f842:	6013      	str	r3, [r2, #0]
    }
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4618      	mov	r0, r3
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	08025eec 	.word	0x08025eec
 800f854:	2000bcfc 	.word	0x2000bcfc

0800f858 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	4a05      	ldr	r2, [pc, #20]	; (800f878 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7ff ffb1 	bl	800f7d0 <_ZN8touchgfx11ApplicationD1Ev>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4618      	mov	r0, r3
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	08025eec 	.word	0x08025eec

0800f87c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff ffe7 	bl	800f858 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f88a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f014 fe91 	bl	80245b6 <_ZdlPvj>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f804 	bl	800f8b4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f8ac:	bf00      	nop
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00f      	beq.n	800f8e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	330c      	adds	r3, #12
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4610      	mov	r0, r2
 800f8da:	4798      	blx	r3
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e000      	b.n	800f8e8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00e      	beq.n	800f90a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4610      	mov	r0, r2
 800f900:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f90a:	bf00      	nop
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f912:	b580      	push	{r7, lr}
 800f914:	b084      	sub	sp, #16
 800f916:	af00      	add	r7, sp, #0
 800f918:	60f8      	str	r0, [r7, #12]
 800f91a:	60b9      	str	r1, [r7, #8]
 800f91c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f91e:	f008 fe81 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 800f922:	4603      	mov	r3, r0
 800f924:	4618      	mov	r0, r3
 800f926:	f008 fe83 	bl	8018630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d008      	beq.n	800f944 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	330c      	adds	r3, #12
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4610      	mov	r0, r2
 800f942:	4798      	blx	r3
    }
    if (*currentTrans)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d007      	beq.n	800f95c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4610      	mov	r0, r2
 800f95a:	4798      	blx	r3
    }
    if (*currentScreen)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d008      	beq.n	800f976 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	3314      	adds	r3, #20
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4610      	mov	r0, r2
 800f974:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d008      	beq.n	800f990 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3304      	adds	r3, #4
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4610      	mov	r0, r2
 800f98e:	4798      	blx	r3
    }
    if (*currentScreen)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d007      	beq.n	800f9a8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4610      	mov	r0, r2
 800f9c0:	4798      	blx	r3
    }
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b084      	sub	sp, #16
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	60f8      	str	r0, [r7, #12]
 800f9d2:	60b9      	str	r1, [r7, #8]
 800f9d4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	330c      	adds	r3, #12
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	4798      	blx	r3
    newPresenter->activate();
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68b8      	ldr	r0, [r7, #8]
 800f9ea:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f009 ff28 	bl	8019844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3310      	adds	r3, #16
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	4798      	blx	r3

    Application::getInstance()->draw();
 800fa00:	f008 fe10 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 800fa04:	4602      	mov	r2, r0
 800fa06:	6813      	ldr	r3, [r2, #0]
 800fa08:	3328      	adds	r3, #40	; 0x28
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	4798      	blx	r3
}
 800fa10:	bf00      	nop
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	601a      	str	r2, [r3, #0]
    }
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	4a08      	ldr	r2, [pc, #32]	; (800fa60 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 fa5f 	bl	800ff0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff ff01 	bl	800f858 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	08025e98 	.word	0x08025e98

0800fa64 <_ZN23FrontendApplicationBaseD0Ev>:
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7ff ffe1 	bl	800fa34 <_ZN23FrontendApplicationBaseD1Ev>
 800fa72:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f014 fd9d 	bl	80245b6 <_ZdlPvj>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7ff fde6 	bl	800f664 <_ZN8touchgfx10TransitionC1Ev>
 800fa98:	4a03      	ldr	r2, [pc, #12]	; (800faa8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	08025e78 	.word	0x08025e78

0800faac <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	4a05      	ldr	r2, [pc, #20]	; (800facc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7ff fde7 	bl	800f690 <_ZN8touchgfx10TransitionD1Ev>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	08025e78 	.word	0x08025e78

0800fad0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff ffe7 	bl	800faac <_ZN8touchgfx12NoTransitionD1Ev>
 800fade:	210c      	movs	r1, #12
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f014 fd68 	bl	80245b6 <_ZdlPvj>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2201      	movs	r2, #1
 800fafc:	721a      	strb	r2, [r3, #8]
    }
 800fafe:	bf00      	nop
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fb0a:	b480      	push	{r7}
 800fb0c:	b083      	sub	sp, #12
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	605a      	str	r2, [r3, #4]
    }
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff fe6e 	bl	800f818 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fb3c:	4a13      	ldr	r2, [pc, #76]	; (800fb8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 f89f 	bl	800fc8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fb5e:	f7ff fe0f 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 800fb62:	4602      	mov	r2, r0
 800fb64:	6813      	ldr	r3, [r2, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fb70:	2000      	movs	r0, #0
 800fb72:	f002 fc35 	bl	80123e0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fb76:	f7ff fe0f 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f00e fa28 	bl	801dfd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	08025e98 	.word	0x08025e98

0800fb90 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff ffe9 	bl	800fb90 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	685a      	ldr	r2, [r3, #4]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	605a      	str	r2, [r3, #4]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	3208      	adds	r2, #8
 800fbce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbd2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fbe0:	b590      	push	{r4, r7, lr}
 800fbe2:	b089      	sub	sp, #36	; 0x24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fbee:	4b10      	ldr	r3, [pc, #64]	; (800fc30 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fbf0:	61bb      	str	r3, [r7, #24]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	61fb      	str	r3, [r7, #28]
 800fbf6:	f107 0008 	add.w	r0, r7, #8
 800fbfa:	f107 0318 	add.w	r3, r7, #24
 800fbfe:	cb0c      	ldmia	r3, {r2, r3}
 800fc00:	6879      	ldr	r1, [r7, #4]
 800fc02:	f000 f85f 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc06:	f107 0308 	add.w	r3, r7, #8
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f7ff ffcb 	bl	800fba8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc12:	f107 0308 	add.w	r3, r7, #8
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 f978 	bl	800ff0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fc28:	bf00      	nop
 800fc2a:	3724      	adds	r7, #36	; 0x24
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd90      	pop	{r4, r7, pc}
 800fc30:	0800fc35 	.word	0x0800fc35

0800fc34 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fc48:	461a      	mov	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	4b04      	ldr	r3, [pc, #16]	; (800fc64 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fc54:	4804      	ldr	r0, [pc, #16]	; (800fc68 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fc56:	f000 f855 	bl	800fd04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fc5a:	bf00      	nop
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	2000bcf0 	.word	0x2000bcf0
 800fc68:	2000bcec 	.word	0x2000bcec

0800fc6c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fc6c:	b480      	push	{r7}
 800fc6e:	b083      	sub	sp, #12
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	4a04      	ldr	r2, [pc, #16]	; (800fc88 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	08025f28 	.word	0x08025f28

0800fc8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7ff ffe8 	bl	800fc6c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fc9c:	4a08      	ldr	r2, [pc, #32]	; (800fcc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	601a      	str	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	605a      	str	r2, [r3, #4]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	609a      	str	r2, [r3, #8]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	60da      	str	r2, [r3, #12]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	08025ed4 	.word	0x08025ed4

0800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	4639      	mov	r1, r7
 800fcd0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7ff ffc8 	bl	800fc6c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fcdc:	4a08      	ldr	r2, [pc, #32]	; (800fd00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	3308      	adds	r3, #8
 800fcec:	463a      	mov	r2, r7
 800fcee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcf2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	08025ed4 	.word	0x08025ed4

0800fd04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fd04:	b590      	push	{r4, r7, lr}
 800fd06:	b089      	sub	sp, #36	; 0x24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	689a      	ldr	r2, [r3, #8]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	3320      	adds	r3, #32
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4610      	mov	r0, r2
 800fd22:	4798      	blx	r3
 800fd24:	4602      	mov	r2, r0
 800fd26:	f242 732b 	movw	r3, #10027	; 0x272b
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d805      	bhi.n	800fd3a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fd2e:	4b4e      	ldr	r3, [pc, #312]	; (800fe68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800fd30:	4a4e      	ldr	r2, [pc, #312]	; (800fe6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd32:	21c2      	movs	r1, #194	; 0xc2
 800fd34:	484e      	ldr	r0, [pc, #312]	; (800fe70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd36:	f014 fc69 	bl	802460c <__assert_func>
 800fd3a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3320      	adds	r3, #32
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	4798      	blx	r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b0f      	cmp	r3, #15
 800fd52:	d805      	bhi.n	800fd60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fd54:	4b47      	ldr	r3, [pc, #284]	; (800fe74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fd56:	4a45      	ldr	r2, [pc, #276]	; (800fe6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd58:	21c3      	movs	r1, #195	; 0xc3
 800fd5a:	4845      	ldr	r0, [pc, #276]	; (800fe70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd5c:	f014 fc56 	bl	802460c <__assert_func>
 800fd60:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68da      	ldr	r2, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3320      	adds	r3, #32
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4610      	mov	r0, r2
 800fd72:	4798      	blx	r3
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b0b      	cmp	r3, #11
 800fd78:	d805      	bhi.n	800fd86 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800fd7a:	4b3f      	ldr	r3, [pc, #252]	; (800fe78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800fd7c:	4a3b      	ldr	r2, [pc, #236]	; (800fe6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd7e:	21c4      	movs	r1, #196	; 0xc4
 800fd80:	483b      	ldr	r0, [pc, #236]	; (800fe70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd82:	f014 fc43 	bl	802460c <__assert_func>
 800fd86:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	68b9      	ldr	r1, [r7, #8]
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f7ff fdc0 	bl	800f912 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	2100      	movs	r1, #0
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 f86f 	bl	800fe7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	4619      	mov	r1, r3
 800fda2:	200c      	movs	r0, #12
 800fda4:	f7ff fbf0 	bl	800f588 <_ZnwjPv>
 800fda8:	4604      	mov	r4, r0
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	d004      	beq.n	800fdb8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f7ff fe6a 	bl	800fa88 <_ZN8touchgfx12NoTransitionC1Ev>
 800fdb4:	4623      	mov	r3, r4
 800fdb6:	e000      	b.n	800fdba <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800fdb8:	4623      	mov	r3, r4
 800fdba:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f86d 	bl	800fea2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f242 702c 	movw	r0, #10028	; 0x272c
 800fdd0:	f7ff fbda 	bl	800f588 <_ZnwjPv>
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	2c00      	cmp	r4, #0
 800fdd8:	d004      	beq.n	800fde4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800fdda:	4620      	mov	r0, r4
 800fddc:	f002 fd6c 	bl	80128b8 <_ZN8MainViewC1Ev>
 800fde0:	4623      	mov	r3, r4
 800fde2:	e000      	b.n	800fde6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800fde4:	4623      	mov	r3, r4
 800fde6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	2100      	movs	r1, #0
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 f86a 	bl	800fec8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	2010      	movs	r0, #16
 800fdfa:	f7ff fbc5 	bl	800f588 <_ZnwjPv>
 800fdfe:	4604      	mov	r4, r0
 800fe00:	2c00      	cmp	r4, #0
 800fe02:	d005      	beq.n	800fe10 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800fe04:	69b9      	ldr	r1, [r7, #24]
 800fe06:	4620      	mov	r0, r4
 800fe08:	f002 fcae 	bl	8012768 <_ZN13MainPresenterC1ER8MainView>
 800fe0c:	4623      	mov	r3, r4
 800fe0e:	e000      	b.n	800fe12 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800fe10:	4623      	mov	r3, r4
 800fe12:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	69fa      	ldr	r2, [r7, #28]
 800fe18:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	69ba      	ldr	r2, [r7, #24]
 800fe24:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d002      	beq.n	800fe32 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	e000      	b.n	800fe34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800fe32:	2300      	movs	r3, #0
 800fe34:	4619      	mov	r1, r3
 800fe36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe38:	f7ff fdee 	bl	800fa18 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff fe61 	bl	800fb0a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	6979      	ldr	r1, [r7, #20]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 f84e 	bl	800feee <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	6979      	ldr	r1, [r7, #20]
 800fe56:	69b8      	ldr	r0, [r7, #24]
 800fe58:	f7ff fdb7 	bl	800f9ca <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800fe5c:	697b      	ldr	r3, [r7, #20]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3724      	adds	r7, #36	; 0x24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd90      	pop	{r4, r7, pc}
 800fe66:	bf00      	nop
 800fe68:	08025770 	.word	0x08025770
 800fe6c:	08025f80 	.word	0x08025f80
 800fe70:	08025800 	.word	0x08025800
 800fe74:	08025844 	.word	0x08025844
 800fe78:	080258e8 	.word	0x080258e8

0800fe7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	460b      	mov	r3, r1
 800fe86:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3324      	adds	r3, #36	; 0x24
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	887a      	ldrh	r2, [r7, #2]
 800fe92:	4611      	mov	r1, r2
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	4798      	blx	r3
 800fe98:	4603      	mov	r3, r0
    }
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
 800feaa:	460b      	mov	r3, r1
 800feac:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3324      	adds	r3, #36	; 0x24
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	887a      	ldrh	r2, [r7, #2]
 800feb8:	4611      	mov	r1, r2
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	4798      	blx	r3
 800febe:	4603      	mov	r3, r0
    }
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	3324      	adds	r3, #36	; 0x24
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	887a      	ldrh	r2, [r7, #2]
 800fede:	4611      	mov	r1, r2
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	4798      	blx	r3
 800fee4:	4603      	mov	r3, r0
    }
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800feee:	b480      	push	{r7}
 800fef0:	b083      	sub	sp, #12
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fefe:	bf00      	nop
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
	...

0800ff0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	4a05      	ldr	r2, [pc, #20]	; (800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff fc0f 	bl	800f740 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	08025ed4 	.word	0x08025ed4

0800ff30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff ffe7 	bl	800ff0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ff3e:	2110      	movs	r1, #16
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f014 fb38 	bl	80245b6 <_ZdlPvj>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	68d2      	ldr	r2, [r2, #12]
 800ff60:	1052      	asrs	r2, r2, #1
 800ff62:	1899      	adds	r1, r3, r2
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d102      	bne.n	800ff76 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	e00a      	b.n	800ff8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	68d2      	ldr	r2, [r2, #12]
 800ff7e:	1052      	asrs	r2, r2, #1
 800ff80:	4413      	add	r3, r2
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	6892      	ldr	r2, [r2, #8]
 800ff88:	4413      	add	r3, r2
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	4798      	blx	r3
    }
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d010      	beq.n	800ffca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d107      	bne.n	800ffc0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d101      	bne.n	800ffc0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	e000      	b.n	800ffc2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d001      	beq.n	800ffca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e000      	b.n	800ffcc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ffca:	2300      	movs	r3, #0
    }
 800ffcc:	4618      	mov	r0, r3
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
    }
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4618      	mov	r0, r3
 800ffec:	370c      	adds	r7, #12
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800fff6:	b480      	push	{r7}
 800fff8:	b083      	sub	sp, #12
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2200      	movs	r2, #0
 8010002:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	80da      	strh	r2, [r3, #6]
    }
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4618      	mov	r0, r3
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	4608      	mov	r0, r1
 801002e:	4611      	mov	r1, r2
 8010030:	461a      	mov	r2, r3
 8010032:	4603      	mov	r3, r0
 8010034:	817b      	strh	r3, [r7, #10]
 8010036:	460b      	mov	r3, r1
 8010038:	813b      	strh	r3, [r7, #8]
 801003a:	4613      	mov	r3, r2
 801003c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	897a      	ldrh	r2, [r7, #10]
 8010042:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	893a      	ldrh	r2, [r7, #8]
 8010048:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	88fa      	ldrh	r2, [r7, #6]
 801004e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	8b3a      	ldrh	r2, [r7, #24]
 8010054:	80da      	strh	r2, [r3, #6]
    }
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	4618      	mov	r0, r3
 801005a:	3714      	adds	r7, #20
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	460b      	mov	r3, r1
 801006e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	887a      	ldrh	r2, [r7, #2]
 8010074:	801a      	strh	r2, [r3, #0]
    {
    }
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af02      	add	r7, sp, #8
 801008a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 801008c:	4a13      	ldr	r2, [pc, #76]	; (80100dc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	1d18      	adds	r0, r3, #4
 8010096:	2300      	movs	r3, #0
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	2300      	movs	r3, #0
 801009c:	2200      	movs	r2, #0
 801009e:	2100      	movs	r1, #0
 80100a0:	f7ff ffc0 	bl	8010024 <_ZN8touchgfx4RectC1Essss>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	330c      	adds	r3, #12
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff ffa4 	bl	800fff6 <_ZN8touchgfx4RectC1Ev>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2200      	movs	r2, #0
 80100b2:	615a      	str	r2, [r3, #20]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	619a      	str	r2, [r3, #24]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	61da      	str	r2, [r3, #28]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2201      	movs	r2, #1
 80100cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4618      	mov	r0, r3
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	08028094 	.word	0x08028094

080100e0 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	4a04      	ldr	r2, [pc, #16]	; (80100fc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	601a      	str	r2, [r3, #0]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	08028094 	.word	0x08028094

08010100 <_ZN8touchgfx8DrawableD0Ev>:
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff ffe9 	bl	80100e0 <_ZN8touchgfx8DrawableD1Ev>
 801010e:	2128      	movs	r1, #40	; 0x28
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f014 fa50 	bl	80245b6 <_ZdlPvj>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	4608      	mov	r0, r1
 801012a:	4611      	mov	r1, r2
 801012c:	461a      	mov	r2, r3
 801012e:	4603      	mov	r3, r0
 8010130:	817b      	strh	r3, [r7, #10]
 8010132:	460b      	mov	r3, r1
 8010134:	813b      	strh	r3, [r7, #8]
 8010136:	4613      	mov	r3, r2
 8010138:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	3334      	adds	r3, #52	; 0x34
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010146:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801014a:	68f8      	ldr	r0, [r7, #12]
 801014c:	4798      	blx	r3
        setWidth(width);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3338      	adds	r3, #56	; 0x38
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801015a:	4611      	mov	r1, r2
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	4798      	blx	r3
        setHeight(height);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	333c      	adds	r3, #60	; 0x3c
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801016c:	4611      	mov	r1, r2
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	4798      	blx	r3
    }
 8010172:	bf00      	nop
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801017a:	b480      	push	{r7}
 801017c:	b083      	sub	sp, #12
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	460b      	mov	r3, r1
 8010184:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	887a      	ldrh	r2, [r7, #2]
 801018a:	809a      	strh	r2, [r3, #4]
    }
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	887a      	ldrh	r2, [r7, #2]
 80101a8:	80da      	strh	r2, [r3, #6]
    }
 80101aa:	bf00      	nop
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b082      	sub	sp, #8
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
 80101be:	460b      	mov	r3, r1
 80101c0:	807b      	strh	r3, [r7, #2]
 80101c2:	4613      	mov	r3, r2
 80101c4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	332c      	adds	r3, #44	; 0x2c
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80101d2:	4611      	mov	r1, r2
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	4798      	blx	r3
        setY(y);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	3330      	adds	r3, #48	; 0x30
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80101e4:	4611      	mov	r1, r2
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	4798      	blx	r3
    }
 80101ea:	bf00      	nop
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	460b      	mov	r3, r1
 80101fc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	887a      	ldrh	r2, [r7, #2]
 8010202:	811a      	strh	r2, [r3, #8]
    }
 8010204:	bf00      	nop
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	460b      	mov	r3, r1
 801021a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	887a      	ldrh	r2, [r7, #2]
 8010220:	815a      	strh	r2, [r3, #10]
    }
 8010222:	bf00      	nop
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr

0801022e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801022e:	b480      	push	{r7}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	bf00      	nop
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	6039      	str	r1, [r7, #0]
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
 8010262:	bf00      	nop
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr

0801026e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801026e:	b480      	push	{r7}
 8010270:	b083      	sub	sp, #12
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
 8010276:	6039      	str	r1, [r7, #0]
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	bf00      	nop
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	78fa      	ldrb	r2, [r7, #3]
 80102a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80102d2:	b480      	push	{r7}
 80102d4:	b083      	sub	sp, #12
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	460b      	mov	r3, r1
 80102f6:	807b      	strh	r3, [r7, #2]
 80102f8:	4613      	mov	r3, r2
 80102fa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3354      	adds	r3, #84	; 0x54
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	8879      	ldrh	r1, [r7, #2]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801030c:	b292      	uxth	r2, r2
 801030e:	1a8a      	subs	r2, r1, r2
 8010310:	b292      	uxth	r2, r2
 8010312:	b210      	sxth	r0, r2
 8010314:	8839      	ldrh	r1, [r7, #0]
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801031c:	b292      	uxth	r2, r2
 801031e:	1a8a      	subs	r2, r1, r2
 8010320:	b292      	uxth	r2, r2
 8010322:	b212      	sxth	r2, r2
 8010324:	4601      	mov	r1, r0
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	4798      	blx	r3
    }
 801032a:	bf00      	nop
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010332:	b480      	push	{r7}
 8010334:	b083      	sub	sp, #12
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010340:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010348:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010350:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010352:	bf00      	nop
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801035e:	b580      	push	{r7, lr}
 8010360:	b084      	sub	sp, #16
 8010362:	af00      	add	r7, sp, #0
 8010364:	60f8      	str	r0, [r7, #12]
 8010366:	60b9      	str	r1, [r7, #8]
 8010368:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7ff ffe1 	bl	8010332 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	601a      	str	r2, [r3, #0]
    }
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	4a05      	ldr	r2, [pc, #20]	; (80103a8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff fea1 	bl	80100e0 <_ZN8touchgfx8DrawableD1Ev>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	08026e60 	.word	0x08026e60

080103ac <_ZN8touchgfx9ContainerD0Ev>:
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff ffe7 	bl	8010388 <_ZN8touchgfx9ContainerD1Ev>
 80103ba:	212c      	movs	r1, #44	; 0x2c
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f014 f8fa 	bl	80245b6 <_ZdlPvj>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	4a06      	ldr	r2, [pc, #24]	; (80103f0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	3304      	adds	r3, #4
 80103de:	4618      	mov	r0, r3
 80103e0:	f7ff ffd2 	bl	8010388 <_ZN8touchgfx9ContainerD1Ev>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4618      	mov	r0, r3
 80103e8:	3708      	adds	r7, #8
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	0802818c 	.word	0x0802818c

080103f4 <_ZN8touchgfx6ScreenD0Ev>:
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff ffe5 	bl	80103cc <_ZN8touchgfx6ScreenD1Ev>
 8010402:	213c      	movs	r1, #60	; 0x3c
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f014 f8d6 	bl	80245b6 <_ZdlPvj>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	bf00      	nop
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	bf00      	nop
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
    {
    }
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3304      	adds	r3, #4
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	4618      	mov	r0, r3
 801048e:	f004 ff2d 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
	...

0801049c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff fdec 	bl	8010084 <_ZN8touchgfx8DrawableC1Ev>
 80104ac:	4a03      	ldr	r2, [pc, #12]	; (80104bc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4618      	mov	r0, r3
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	0802616c 	.word	0x0802616c

080104c0 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	4a05      	ldr	r2, [pc, #20]	; (80104e0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff fe05 	bl	80100e0 <_ZN8touchgfx8DrawableD1Ev>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4618      	mov	r0, r3
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	0802616c 	.word	0x0802616c

080104e4 <_ZN8touchgfx6WidgetD0Ev>:
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff ffe7 	bl	80104c0 <_ZN8touchgfx6WidgetD1Ev>
 80104f2:	2128      	movs	r1, #40	; 0x28
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f014 f85e 	bl	80245b6 <_ZdlPvj>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	460b      	mov	r3, r1
 8010510:	817b      	strh	r3, [r7, #10]
 8010512:	4613      	mov	r3, r2
 8010514:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fecd 	bl	80102b8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d008      	beq.n	8010536 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	4618      	mov	r0, r3
 8010528:	f7ff fed3 	bl	80102d2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010532:	2301      	movs	r3, #1
 8010534:	e000      	b.n	8010538 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010536:	2300      	movs	r3, #0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	601a      	str	r2, [r3, #0]
        }
    }
 8010542:	bf00      	nop
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff ffa0 	bl	801049c <_ZN8touchgfx6WidgetC1Ev>
 801055c:	4a0a      	ldr	r2, [pc, #40]	; (8010588 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	22ff      	movs	r2, #255	; 0xff
 8010566:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	3328      	adds	r3, #40	; 0x28
 801056e:	2100      	movs	r1, #0
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff fd31 	bl	800ffd8 <_ZN8touchgfx9colortypeC1Em>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	08027b98 	.word	0x08027b98

0801058c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	4a05      	ldr	r2, [pc, #20]	; (80105ac <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff ff8f 	bl	80104c0 <_ZN8touchgfx6WidgetD1Ev>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	08027b98 	.word	0x08027b98

080105b0 <_ZN8touchgfx3BoxD0Ev>:
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7ff ffe7 	bl	801058c <_ZN8touchgfx3BoxD1Ev>
 80105be:	2130      	movs	r1, #48	; 0x30
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f013 fff8 	bl	80245b6 <_ZdlPvj>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	460b      	mov	r3, r1
 80105f6:	807b      	strh	r3, [r7, #2]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	887a      	ldrh	r2, [r7, #2]
 80105fc:	801a      	strh	r2, [r3, #0]
    }
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
        assertValid();
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7fe fd13 	bl	800f040 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 801061a:	4b06      	ldr	r3, [pc, #24]	; (8010634 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	4619      	mov	r1, r3
 8010624:	4610      	mov	r0, r2
 8010626:	f001 ff31 	bl	801248c <_ZNK8touchgfx5Texts7getTextEt>
 801062a:	4603      	mov	r3, r0
    }
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	2000bd0c 	.word	0x2000bd0c

08010638 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4618      	mov	r0, r3
 8010644:	f7ff ff2a 	bl	801049c <_ZN8touchgfx6WidgetC1Ev>
 8010648:	4a13      	ldr	r2, [pc, #76]	; (8010698 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	3326      	adds	r3, #38	; 0x26
 8010652:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010656:	4618      	mov	r0, r3
 8010658:	f7ff ffc8 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	3328      	adds	r3, #40	; 0x28
 8010660:	2100      	movs	r1, #0
 8010662:	4618      	mov	r0, r3
 8010664:	f7ff fcb8 	bl	800ffd8 <_ZN8touchgfx9colortypeC1Em>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	22ff      	movs	r2, #255	; 0xff
 8010672:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	08027b1c 	.word	0x08027b1c

0801069c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af02      	add	r7, sp, #8
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80106a6:	2300      	movs	r3, #0
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	2300      	movs	r3, #0
 80106ac:	2200      	movs	r2, #0
 80106ae:	2100      	movs	r1, #0
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7ff fcb7 	bl	8010024 <_ZN8touchgfx4RectC1Essss>
    }
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80106be:	b480      	push	{r7}
 80106c0:	b083      	sub	sp, #12
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80106ce:	bf00      	nop
 80106d0:	370c      	adds	r7, #12
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr

080106da <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80106da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106dc:	b085      	sub	sp, #20
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	460b      	mov	r3, r1
 80106e4:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80106e6:	687e      	ldr	r6, [r7, #4]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	3330      	adds	r3, #48	; 0x30
 80106ee:	681c      	ldr	r4, [r3, #0]
 80106f0:	887d      	ldrh	r5, [r7, #2]
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f845 	bl	8010782 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80106f8:	4603      	mov	r3, r0
 80106fa:	81bb      	strh	r3, [r7, #12]
 80106fc:	f107 030c 	add.w	r3, r7, #12
 8010700:	4618      	mov	r0, r3
 8010702:	f7fe fc69 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010706:	4602      	mov	r2, r0
 8010708:	6813      	ldr	r3, [r2, #0]
 801070a:	332c      	adds	r3, #44	; 0x2c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4610      	mov	r0, r2
 8010710:	4798      	blx	r3
 8010712:	4603      	mov	r3, r0
 8010714:	1aeb      	subs	r3, r5, r3
 8010716:	b29b      	uxth	r3, r3
 8010718:	b21b      	sxth	r3, r3
 801071a:	4619      	mov	r1, r3
 801071c:	4630      	mov	r0, r6
 801071e:	47a0      	blx	r4
    }
 8010720:	bf00      	nop
 8010722:	3714      	adds	r7, #20
 8010724:	46bd      	mov	sp, r7
 8010726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010728 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	460b      	mov	r3, r1
 8010732:	807b      	strh	r3, [r7, #2]
 8010734:	4613      	mov	r3, r2
 8010736:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	332c      	adds	r3, #44	; 0x2c
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010746:	4610      	mov	r0, r2
 8010748:	4798      	blx	r3
        setBaselineY(baselineY);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3360      	adds	r3, #96	; 0x60
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010756:	4611      	mov	r1, r2
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	4798      	blx	r3
    }
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	887a      	ldrh	r2, [r7, #2]
 8010774:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010776:	bf00      	nop
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010782:	b480      	push	{r7}
 8010784:	b083      	sub	sp, #12
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801078e:	4618      	mov	r0, r3
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
	...

0801079c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	4a05      	ldr	r2, [pc, #20]	; (80107bc <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fe87 	bl	80104c0 <_ZN8touchgfx6WidgetD1Ev>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	08027b1c 	.word	0x08027b1c

080107c0 <_ZN8touchgfx8TextAreaD0Ev>:
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7ff ffe7 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 80107ce:	2134      	movs	r1, #52	; 0x34
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f013 fef0 	bl	80245b6 <_ZdlPvj>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4618      	mov	r0, r3
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
        : TextArea()
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7ff ff24 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 80107f0:	4a03      	ldr	r2, [pc, #12]	; (8010800 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	601a      	str	r2, [r3, #0]
    {
    }
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	080260f0 	.word	0x080260f0

08010804 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	4a05      	ldr	r2, [pc, #20]	; (8010824 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff ffc1 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	080260f0 	.word	0x080260f0

08010828 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ffe7 	bl	8010804 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010836:	2134      	movs	r1, #52	; 0x34
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f013 febc 	bl	80245b6 <_ZdlPvj>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	4618      	mov	r0, r3
 8010854:	f7ff ffc4 	bl	80107e0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010858:	4a05      	ldr	r2, [pc, #20]	; (8010870 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	08027c84 	.word	0x08027c84

08010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	683a      	ldr	r2, [r7, #0]
 8010882:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010884:	bf00      	nop
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fdfd 	bl	801049c <_ZN8touchgfx6WidgetC1Ev>
 80108a2:	4a0b      	ldr	r2, [pc, #44]	; (80108d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	601a      	str	r2, [r3, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3326      	adds	r3, #38	; 0x26
 80108ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff fbd7 	bl	8010064 <_ZN8touchgfx6BitmapC1Et>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	22ff      	movs	r2, #255	; 0xff
 80108ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f006 fe01 	bl	80174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4618      	mov	r0, r3
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	08027d00 	.word	0x08027d00

080108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80108f2:	b480      	push	{r7}
 80108f4:	b083      	sub	sp, #12
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
        {
            return v;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
        }
 80108fe:	4618      	mov	r0, r3
 8010900:	370c      	adds	r7, #12
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 801090a:	b590      	push	{r4, r7, lr}
 801090c:	b083      	sub	sp, #12
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3340      	adds	r3, #64	; 0x40
 8010918:	4618      	mov	r0, r3
 801091a:	f7ff ffea 	bl	80108f2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801091e:	4604      	mov	r4, r0
 8010920:	463b      	mov	r3, r7
 8010922:	4618      	mov	r0, r3
 8010924:	f7ff ffe5 	bl	80108f2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010928:	4603      	mov	r3, r0
 801092a:	429c      	cmp	r4, r3
 801092c:	bf0c      	ite	eq
 801092e:	2301      	moveq	r3, #1
 8010930:	2300      	movne	r3, #0
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	d106      	bne.n	8010946 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f006 f83c 	bl	80169bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010944:	e000      	b.n	8010948 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010946:	bf00      	nop
    }
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	bd90      	pop	{r4, r7, pc}
	...

08010950 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	4a05      	ldr	r2, [pc, #20]	; (8010970 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	f005 fe3f 	bl	80165e4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	08027670 	.word	0x08027670

08010974 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7ff ffe7 	bl	8010950 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010982:	2114      	movs	r1, #20
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f013 fe16 	bl	80245b6 <_ZdlPvj>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	4a05      	ldr	r2, [pc, #20]	; (80109b4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7ff fd8b 	bl	80104c0 <_ZN8touchgfx6WidgetD1Ev>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	08027d00 	.word	0x08027d00

080109b8 <_ZN8touchgfx5ImageD0Ev>:
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff ffe7 	bl	8010994 <_ZN8touchgfx5ImageD1Ev>
 80109c6:	212c      	movs	r1, #44	; 0x2c
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f013 fdf4 	bl	80245b6 <_ZdlPvj>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	4a05      	ldr	r2, [pc, #20]	; (80109f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	601a      	str	r2, [r3, #0]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7ff fcef 	bl	80103cc <_ZN8touchgfx6ScreenD1Ev>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	080260bc 	.word	0x080260bc

080109fc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ffe7 	bl	80109d8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010a0a:	2140      	movs	r1, #64	; 0x40
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f013 fdd2 	bl	80245b6 <_ZdlPvj>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	4a81      	ldr	r2, [pc, #516]	; (8010c2c <_ZN12MainViewBaseD1Ev+0x210>)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8010a30:	4618      	mov	r0, r3
 8010a32:	f001 fc41 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f001 fc3b 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f001 fc35 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fea1 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8010a60:	4618      	mov	r0, r3
 8010a62:	f001 fc29 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f004 f941 	bl	8014cf4 <_ZN8touchgfx13ImageProgressD1Ev>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f001 fc1d 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8010a84:	4618      	mov	r0, r3
 8010a86:	f001 fc5b 	bl	8012340 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 fc33 	bl	80122fc <_ZN8touchgfx4LineD1Ev>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f001 fc4f 	bl	8012340 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f001 fc27 	bl	80122fc <_ZN8touchgfx4LineD1Ev>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f004 f81d 	bl	8014af4 <_ZN8touchgfx11BoxProgressD1Ev>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff fe6b 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010acc:	4618      	mov	r0, r3
 8010ace:	f001 fbf3 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 fbed 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fe59 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff fe53 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8010afc:	4618      	mov	r0, r3
 8010afe:	f001 fbdb 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f001 fbd5 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff fe41 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fe3b 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f001 fc07 	bl	8012340 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f001 fbdf 	bl	80122fc <_ZN8touchgfx4LineD1Ev>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fe29 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ff fe23 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7ff fe1d 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fe17 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7ff fe11 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7ff fe0b 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7ff fe05 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fdff 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fdf9 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff fdf3 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff fee9 	bl	8010994 <_ZN8touchgfx5ImageD1Ev>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f001 fb75 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f001 fb6f 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff fddb 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fdd5 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	33d8      	adds	r3, #216	; 0xd8
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff fdd0 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	33a4      	adds	r3, #164	; 0xa4
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fdcb 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3370      	adds	r3, #112	; 0x70
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff fdc6 	bl	801079c <_ZN8touchgfx8TextAreaD1Ev>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	3340      	adds	r3, #64	; 0x40
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7ff fcb9 	bl	801058c <_ZN8touchgfx3BoxD1Ev>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff fedb 	bl	80109d8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	08026088 	.word	0x08026088

08010c30 <_ZN12MainViewBaseD0Ev>:
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff feef 	bl	8010a1c <_ZN12MainViewBaseD1Ev>
 8010c3e:	f242 712c 	movw	r1, #10028	; 0x272c
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f013 fcb7 	bl	80245b6 <_ZdlPvj>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
	...

08010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	71fb      	strb	r3, [r7, #7]
 8010c5e:	460b      	mov	r3, r1
 8010c60:	71bb      	strb	r3, [r7, #6]
 8010c62:	4613      	mov	r3, r2
 8010c64:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010c66:	f7fe fd8b 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d105      	bne.n	8010c7c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010c70:	4b0a      	ldr	r3, [pc, #40]	; (8010c9c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010c72:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010c74:	2138      	movs	r1, #56	; 0x38
 8010c76:	480b      	ldr	r0, [pc, #44]	; (8010ca4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010c78:	f013 fcc8 	bl	802460c <__assert_func>
 8010c7c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010c7e:	f7fe fd8b 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8010c82:	6803      	ldr	r3, [r0, #0]
 8010c84:	332c      	adds	r3, #44	; 0x2c
 8010c86:	681c      	ldr	r4, [r3, #0]
 8010c88:	797b      	ldrb	r3, [r7, #5]
 8010c8a:	79ba      	ldrb	r2, [r7, #6]
 8010c8c:	79f9      	ldrb	r1, [r7, #7]
 8010c8e:	47a0      	blx	r4
 8010c90:	4603      	mov	r3, r0
    }
 8010c92:	4618      	mov	r0, r3
 8010c94:	370c      	adds	r7, #12
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd90      	pop	{r4, r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	08025a68 	.word	0x08025a68
 8010ca0:	080261cc 	.word	0x080261cc
 8010ca4:	08025aac 	.word	0x08025aac

08010ca8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b0b5      	sub	sp, #212	; 0xd4
 8010cac:	af02      	add	r7, sp, #8
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f001 fa86 	bl	80121c4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010cb8:	4adc      	ldr	r2, [pc, #880]	; (801102c <_ZN12MainViewBaseC1Ev+0x384>)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	3340      	adds	r3, #64	; 0x40
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7ff fc42 	bl	801054c <_ZN8touchgfx3BoxC1Ev>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	3370      	adds	r3, #112	; 0x70
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7ff fcb3 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	33a4      	adds	r3, #164	; 0xa4
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7ff fcae 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	33d8      	adds	r3, #216	; 0xd8
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ff fca9 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ff fca3 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ff fc9d 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff fd9f 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff fd99 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8010d1c:	f107 0308 	add.w	r3, r7, #8
 8010d20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff f99d 	bl	8010064 <_ZN8touchgfx6BitmapC1Et>
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7ff fdad 	bl	8010890 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fc7b 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff fc75 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff fc6f 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7ff fc69 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7ff fc63 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff fc5d 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7ff fc57 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff fc51 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fc4b 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fc45 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010db4:	4618      	mov	r0, r3
 8010db6:	f005 fde1 	bl	801697c <_ZN8touchgfx4LineC1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8010dc0:	f107 030c 	add.w	r3, r7, #12
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7ff f906 	bl	800ffd8 <_ZN8touchgfx9colortypeC1Em>
 8010dcc:	22ff      	movs	r2, #255	; 0xff
 8010dce:	68f9      	ldr	r1, [r7, #12]
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f005 fbc5 	bl	8016560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7ff fc2b 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ff fc25 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff fd27 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff fd21 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff fc13 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fc0d 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff fd0f 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7ff fd09 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fbfb 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f003 fe67 	bl	8014b1c <_ZN8touchgfx11BoxProgressC1Ev>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8010e54:	4618      	mov	r0, r3
 8010e56:	f005 fd91 	bl	801697c <_ZN8touchgfx4LineC1Ev>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8010e60:	f107 0310 	add.w	r3, r7, #16
 8010e64:	2100      	movs	r1, #0
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff f8b6 	bl	800ffd8 <_ZN8touchgfx9colortypeC1Em>
 8010e6c:	22ff      	movs	r2, #255	; 0xff
 8010e6e:	6939      	ldr	r1, [r7, #16]
 8010e70:	4620      	mov	r0, r4
 8010e72:	f005 fb75 	bl	8016560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f005 fd7d 	bl	801697c <_ZN8touchgfx4LineC1Ev>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8010e88:	f107 0314 	add.w	r3, r7, #20
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff f8a2 	bl	800ffd8 <_ZN8touchgfx9colortypeC1Em>
 8010e94:	22ff      	movs	r2, #255	; 0xff
 8010e96:	6979      	ldr	r1, [r7, #20]
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f005 fb61 	bl	8016560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff fccf 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f003 ff49 	bl	8014d48 <_ZN8touchgfx13ImageProgressC1Ev>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fcc3 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7ff fbb5 	bl	8010638 <_ZN8touchgfx8TextAreaC1Ev>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fcb7 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fcb1 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff fcab 	bl	8010848 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 8010ef8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010efc:	4618      	mov	r0, r3
 8010efe:	f006 fb51 	bl	80175a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010f08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010f0c:	9300      	str	r3, [sp, #0]
 8010f0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010f12:	2200      	movs	r2, #0
 8010f14:	2100      	movs	r1, #0
 8010f16:	f7ff f903 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010f20:	2200      	movs	r2, #0
 8010f22:	2100      	movs	r1, #0
 8010f24:	2000      	movs	r0, #0
 8010f26:	f7ff fe95 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f7ff fb4e 	bl	80105d0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3370      	adds	r3, #112	; 0x70
 8010f38:	228a      	movs	r2, #138	; 0x8a
 8010f3a:	21e4      	movs	r1, #228	; 0xe4
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7ff f93a 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f48:	2200      	movs	r2, #0
 8010f4a:	21dc      	movs	r1, #220	; 0xdc
 8010f4c:	20ff      	movs	r0, #255	; 0xff
 8010f4e:	f7ff fe81 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f52:	4603      	mov	r3, r0
 8010f54:	4619      	mov	r1, r3
 8010f56:	4620      	mov	r0, r4
 8010f58:	f7ff fbb1 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3370      	adds	r3, #112	; 0x70
 8010f60:	2100      	movs	r1, #0
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fbfe 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f6e:	f107 0318 	add.w	r3, r7, #24
 8010f72:	210e      	movs	r1, #14
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fb39 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8010f7a:	8b39      	ldrh	r1, [r7, #24]
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f006 f803 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 126);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	33a4      	adds	r3, #164	; 0xa4
 8010f86:	227e      	movs	r2, #126	; 0x7e
 8010f88:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff f912 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010f98:	2200      	movs	r2, #0
 8010f9a:	21dc      	movs	r1, #220	; 0xdc
 8010f9c:	20ff      	movs	r0, #255	; 0xff
 8010f9e:	f7ff fe59 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f7ff fb89 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	33a4      	adds	r3, #164	; 0xa4
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7ff fbd6 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010fbe:	f107 031c 	add.w	r3, r7, #28
 8010fc2:	211d      	movs	r1, #29
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fb11 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8010fca:	8bb9      	ldrh	r1, [r7, #28]
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f005 ffdb 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	33d8      	adds	r3, #216	; 0xd8
 8010fd6:	227e      	movs	r2, #126	; 0x7e
 8010fd8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff f8ea 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010fe8:	2200      	movs	r2, #0
 8010fea:	21dc      	movs	r1, #220	; 0xdc
 8010fec:	20ff      	movs	r0, #255	; 0xff
 8010fee:	f7ff fe31 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f7ff fb61 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	33d8      	adds	r3, #216	; 0xd8
 8011000:	2100      	movs	r1, #0
 8011002:	4618      	mov	r0, r3
 8011004:	f7ff fbae 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801100e:	f107 0320 	add.w	r3, r7, #32
 8011012:	211c      	movs	r1, #28
 8011014:	4618      	mov	r0, r3
 8011016:	f7ff fae9 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801101a:	8c39      	ldrh	r1, [r7, #32]
 801101c:	4620      	mov	r0, r4
 801101e:	f005 ffb3 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011028:	e002      	b.n	8011030 <_ZN12MainViewBaseC1Ev+0x388>
 801102a:	bf00      	nop
 801102c:	08026088 	.word	0x08026088
 8011030:	227e      	movs	r2, #126	; 0x7e
 8011032:	2126      	movs	r1, #38	; 0x26
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff f8be 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011040:	2200      	movs	r2, #0
 8011042:	21dc      	movs	r1, #220	; 0xdc
 8011044:	20ff      	movs	r0, #255	; 0xff
 8011046:	f7ff fe05 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801104a:	4603      	mov	r3, r0
 801104c:	4619      	mov	r1, r3
 801104e:	4620      	mov	r0, r4
 8011050:	f7ff fb35 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801105a:	2100      	movs	r1, #0
 801105c:	4618      	mov	r0, r3
 801105e:	f7ff fb81 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801106c:	2116      	movs	r1, #22
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fabc 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011074:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8011076:	4620      	mov	r0, r4
 8011078:	f005 ff86 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011082:	227e      	movs	r2, #126	; 0x7e
 8011084:	2177      	movs	r1, #119	; 0x77
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff f895 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011092:	2200      	movs	r2, #0
 8011094:	21dc      	movs	r1, #220	; 0xdc
 8011096:	20ff      	movs	r0, #255	; 0xff
 8011098:	f7ff fddc 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801109c:	4603      	mov	r3, r0
 801109e:	4619      	mov	r1, r3
 80110a0:	4620      	mov	r0, r4
 80110a2:	f7ff fb0c 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110ac:	2100      	movs	r1, #0
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff fb58 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110be:	2115      	movs	r1, #21
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff fa93 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80110c6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80110c8:	4620      	mov	r0, r4
 80110ca:	f005 ff5d 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(24, 91, 60, 35);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 80110d4:	2323      	movs	r3, #35	; 0x23
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	233c      	movs	r3, #60	; 0x3c
 80110da:	225b      	movs	r2, #91	; 0x5b
 80110dc:	2118      	movs	r1, #24
 80110de:	f7ff f81f 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80110e8:	22ff      	movs	r2, #255	; 0xff
 80110ea:	21ff      	movs	r1, #255	; 0xff
 80110ec:	20ff      	movs	r0, #255	; 0xff
 80110ee:	f7ff fdb1 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110f2:	4603      	mov	r3, r0
 80110f4:	4619      	mov	r1, r3
 80110f6:	4620      	mov	r0, r4
 80110f8:	f7ff fae1 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011102:	2100      	movs	r1, #0
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff fb2d 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f603 249c 	addw	r4, r3, #2716	; 0xa9c
 8011110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011114:	2103      	movs	r1, #3
 8011116:	4618      	mov	r0, r3
 8011118:	f7ff fa68 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fa73 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011126:	4603      	mov	r3, r0
 8011128:	4ae4      	ldr	r2, [pc, #912]	; (80114bc <_ZN12MainViewBaseC1Ev+0x814>)
 801112a:	2105      	movs	r1, #5
 801112c:	4620      	mov	r0, r4
 801112e:	f009 fad5 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 801113e:	4619      	mov	r1, r3
 8011140:	4610      	mov	r0, r2
 8011142:	f7ff fb97 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801114c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011150:	2102      	movs	r1, #2
 8011152:	4618      	mov	r0, r3
 8011154:	f7ff fa4a 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011158:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801115a:	4620      	mov	r0, r4
 801115c:	f005 ff14 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(104, 91, 60, 35);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8011166:	2323      	movs	r3, #35	; 0x23
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	233c      	movs	r3, #60	; 0x3c
 801116c:	225b      	movs	r2, #91	; 0x5b
 801116e:	2168      	movs	r1, #104	; 0x68
 8011170:	f7fe ffd6 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 801117a:	22ff      	movs	r2, #255	; 0xff
 801117c:	21ff      	movs	r1, #255	; 0xff
 801117e:	20ff      	movs	r0, #255	; 0xff
 8011180:	f7ff fd68 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011184:	4603      	mov	r3, r0
 8011186:	4619      	mov	r1, r3
 8011188:	4620      	mov	r0, r4
 801118a:	f7ff fa98 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011194:	2100      	movs	r1, #0
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff fae4 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f603 24a6 	addw	r4, r3, #2726	; 0xaa6
 80111a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111a6:	2101      	movs	r1, #1
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff fa1f 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80111ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff fa2a 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 80111b8:	4603      	mov	r3, r0
 80111ba:	4ac0      	ldr	r2, [pc, #768]	; (80114bc <_ZN12MainViewBaseC1Ev+0x814>)
 80111bc:	2105      	movs	r1, #5
 80111be:	4620      	mov	r0, r4
 80111c0:	f009 fa8c 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f603 23a6 	addw	r3, r3, #2726	; 0xaa6
 80111d0:	4619      	mov	r1, r3
 80111d2:	4610      	mov	r0, r2
 80111d4:	f7ff fb4e 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 80111de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111e2:	2100      	movs	r1, #0
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff fa01 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80111ea:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80111ec:	4620      	mov	r0, r4
 80111ee:	f005 fecb 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80111f8:	223f      	movs	r2, #63	; 0x3f
 80111fa:	21b3      	movs	r1, #179	; 0xb3
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7fe ffda 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011208:	2100      	movs	r1, #0
 801120a:	4618      	mov	r0, r3
 801120c:	f7ff f844 	bl	8010298 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setXY(46, 61);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011216:	223d      	movs	r2, #61	; 0x3d
 8011218:	212e      	movs	r1, #46	; 0x2e
 801121a:	4618      	mov	r0, r3
 801121c:	f7fe ffcb 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8011226:	22ff      	movs	r2, #255	; 0xff
 8011228:	21ff      	movs	r1, #255	; 0xff
 801122a:	20ff      	movs	r0, #255	; 0xff
 801122c:	f7ff fd12 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011230:	4603      	mov	r3, r0
 8011232:	4619      	mov	r1, r3
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fa42 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011240:	2100      	movs	r1, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fa8e 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f503 7404 	add.w	r4, r3, #528	; 0x210
 801124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011252:	2104      	movs	r1, #4
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff f9c9 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801125a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 801125c:	4620      	mov	r0, r4
 801125e:	f005 fe93 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setXY(94, 61);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8011268:	223d      	movs	r2, #61	; 0x3d
 801126a:	215e      	movs	r1, #94	; 0x5e
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe ffa2 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f503 7411 	add.w	r4, r3, #580	; 0x244
 8011278:	22ff      	movs	r2, #255	; 0xff
 801127a:	21ff      	movs	r1, #255	; 0xff
 801127c:	20ff      	movs	r0, #255	; 0xff
 801127e:	f7ff fce9 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011282:	4603      	mov	r3, r0
 8011284:	4619      	mov	r1, r3
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff fa19 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8011292:	2100      	movs	r1, #0
 8011294:	4618      	mov	r0, r3
 8011296:	f7ff fa65 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f503 7411 	add.w	r4, r3, #580	; 0x244
 80112a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112a4:	2105      	movs	r1, #5
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7ff f9a0 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80112ac:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80112b0:	4620      	mov	r0, r4
 80112b2:	f005 fe69 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setXY(143, 61);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80112bc:	223d      	movs	r2, #61	; 0x3d
 80112be:	218f      	movs	r1, #143	; 0x8f
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fe ff78 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f503 741e 	add.w	r4, r3, #632	; 0x278
 80112cc:	22ff      	movs	r2, #255	; 0xff
 80112ce:	21ff      	movs	r1, #255	; 0xff
 80112d0:	20ff      	movs	r0, #255	; 0xff
 80112d2:	f7ff fcbf 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112d6:	4603      	mov	r3, r0
 80112d8:	4619      	mov	r1, r3
 80112da:	4620      	mov	r0, r4
 80112dc:	f7ff f9ef 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80112e6:	2100      	movs	r1, #0
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7ff fa3b 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f503 741e 	add.w	r4, r3, #632	; 0x278
 80112f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80112f8:	2106      	movs	r1, #6
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff f976 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011300:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8011304:	4620      	mov	r0, r4
 8011306:	f005 fe3f 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setXY(189, 61);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8011310:	223d      	movs	r2, #61	; 0x3d
 8011312:	21bd      	movs	r1, #189	; 0xbd
 8011314:	4618      	mov	r0, r3
 8011316:	f7fe ff4e 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
 8011320:	22ff      	movs	r2, #255	; 0xff
 8011322:	21ff      	movs	r1, #255	; 0xff
 8011324:	20ff      	movs	r0, #255	; 0xff
 8011326:	f7ff fc95 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801132a:	4603      	mov	r3, r0
 801132c:	4619      	mov	r1, r3
 801132e:	4620      	mov	r0, r4
 8011330:	f7ff f9c5 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801133a:	2100      	movs	r1, #0
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fa11 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
 8011348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801134c:	2107      	movs	r1, #7
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff f94c 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011354:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011358:	4620      	mov	r0, r4
 801135a:	f005 fe15 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setXY(236, 61);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8011364:	223d      	movs	r2, #61	; 0x3d
 8011366:	21ec      	movs	r1, #236	; 0xec
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe ff24 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 8011374:	22ff      	movs	r2, #255	; 0xff
 8011376:	21ff      	movs	r1, #255	; 0xff
 8011378:	20ff      	movs	r0, #255	; 0xff
 801137a:	f7ff fc6b 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801137e:	4603      	mov	r3, r0
 8011380:	4619      	mov	r1, r3
 8011382:	4620      	mov	r0, r4
 8011384:	f7ff f99b 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 801138e:	2100      	movs	r1, #0
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff f9e7 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 801139c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113a0:	2108      	movs	r1, #8
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff f922 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80113a8:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80113ac:	4620      	mov	r0, r4
 80113ae:	f005 fdeb 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setXY(285, 61);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80113b8:	223d      	movs	r2, #61	; 0x3d
 80113ba:	f240 111d 	movw	r1, #285	; 0x11d
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fe fef9 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f503 7445 	add.w	r4, r3, #788	; 0x314
 80113ca:	22ff      	movs	r2, #255	; 0xff
 80113cc:	21ff      	movs	r1, #255	; 0xff
 80113ce:	20ff      	movs	r0, #255	; 0xff
 80113d0:	f7ff fc40 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113d4:	4603      	mov	r3, r0
 80113d6:	4619      	mov	r1, r3
 80113d8:	4620      	mov	r0, r4
 80113da:	f7ff f970 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80113e4:	2100      	movs	r1, #0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff f9bc 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f503 7445 	add.w	r4, r3, #788	; 0x314
 80113f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80113f6:	2109      	movs	r1, #9
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff f8f7 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80113fe:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011402:	4620      	mov	r0, r4
 8011404:	f005 fdc0 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setXY(332, 61);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801140e:	223d      	movs	r2, #61	; 0x3d
 8011410:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8011414:	4618      	mov	r0, r3
 8011416:	f7fe fece 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8011420:	22ff      	movs	r2, #255	; 0xff
 8011422:	21ff      	movs	r1, #255	; 0xff
 8011424:	20ff      	movs	r0, #255	; 0xff
 8011426:	f7ff fc15 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801142a:	4603      	mov	r3, r0
 801142c:	4619      	mov	r1, r3
 801142e:	4620      	mov	r0, r4
 8011430:	f7ff f945 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801143a:	2100      	movs	r1, #0
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff f991 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8011448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801144c:	210a      	movs	r1, #10
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff f8cc 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011454:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8011458:	4620      	mov	r0, r4
 801145a:	f005 fd95 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setXY(380, 61);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011464:	223d      	movs	r2, #61	; 0x3d
 8011466:	f44f 71be 	mov.w	r1, #380	; 0x17c
 801146a:	4618      	mov	r0, r3
 801146c:	f7fe fea3 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011476:	22ff      	movs	r2, #255	; 0xff
 8011478:	21ff      	movs	r1, #255	; 0xff
 801147a:	20ff      	movs	r0, #255	; 0xff
 801147c:	f7ff fbea 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011480:	4603      	mov	r3, r0
 8011482:	4619      	mov	r1, r3
 8011484:	4620      	mov	r0, r4
 8011486:	f7ff f91a 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011490:	2100      	movs	r1, #0
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff f966 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 801149e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114a2:	210b      	movs	r1, #11
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff f8a1 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80114aa:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80114ae:	4620      	mov	r0, r4
 80114b0:	f005 fd6a 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm9.setXY(427, 61);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80114ba:	e001      	b.n	80114c0 <_ZN12MainViewBaseC1Ev+0x818>
 80114bc:	08025aec 	.word	0x08025aec
 80114c0:	223d      	movs	r2, #61	; 0x3d
 80114c2:	f240 11ab 	movw	r1, #427	; 0x1ab
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fe fe75 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm9.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
 80114d2:	22ff      	movs	r2, #255	; 0xff
 80114d4:	21ff      	movs	r1, #255	; 0xff
 80114d6:	20ff      	movs	r0, #255	; 0xff
 80114d8:	f7ff fbbc 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114dc:	4603      	mov	r3, r0
 80114de:	4619      	mov	r1, r3
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7ff f8ec 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm9.setLinespacing(0);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80114ec:	2100      	movs	r1, #0
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff f938 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm9.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
 80114fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114fe:	210c      	movs	r1, #12
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff f873 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011506:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 801150a:	4620      	mov	r0, r4
 801150c:	f005 fd3c 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm10.setXY(465, 61);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8011516:	223d      	movs	r2, #61	; 0x3d
 8011518:	f240 11d1 	movw	r1, #465	; 0x1d1
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe fe4a 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    rpm10.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f503 7479 	add.w	r4, r3, #996	; 0x3e4
 8011528:	22ff      	movs	r2, #255	; 0xff
 801152a:	21ff      	movs	r1, #255	; 0xff
 801152c:	20ff      	movs	r0, #255	; 0xff
 801152e:	f7ff fb91 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011532:	4603      	mov	r3, r0
 8011534:	4619      	mov	r1, r3
 8011536:	4620      	mov	r0, r4
 8011538:	f7ff f8c1 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm10.setLinespacing(0);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8011542:	2100      	movs	r1, #0
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff f90d 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm10.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f503 7479 	add.w	r4, r3, #996	; 0x3e4
 8011550:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011554:	210d      	movs	r1, #13
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff f848 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801155c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011560:	4620      	mov	r0, r4
 8011562:	f005 fd11 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 801156c:	2305      	movs	r3, #5
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011574:	223a      	movs	r2, #58	; 0x3a
 8011576:	f06f 0101 	mvn.w	r1, #1
 801157a:	f7fe fdd1 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8011584:	22ff      	movs	r2, #255	; 0xff
 8011586:	21ff      	movs	r1, #255	; 0xff
 8011588:	20ff      	movs	r0, #255	; 0xff
 801158a:	f7ff fb63 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801158e:	4603      	mov	r3, r0
 8011590:	22ff      	movs	r2, #255	; 0xff
 8011592:	4619      	mov	r1, r3
 8011594:	4620      	mov	r0, r4
 8011596:	f004 ffc8 	bl	801652a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80115a6:	4619      	mov	r1, r3
 80115a8:	4610      	mov	r0, r2
 80115aa:	f005 f827 	bl	80165fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80115b4:	2203      	movs	r2, #3
 80115b6:	2100      	movs	r1, #0
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 fe19 	bl	80121f0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80115c4:	2203      	movs	r2, #3
 80115c6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80115ca:	4618      	mov	r0, r3
 80115cc:	f000 fe36 	bl	801223c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80115d6:	2102      	movs	r1, #2
 80115d8:	4618      	mov	r0, r3
 80115da:	f000 fe55 	bl	8012288 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80115e4:	2101      	movs	r1, #1
 80115e6:	4618      	mov	r0, r3
 80115e8:	f005 fb22 	bl	8016c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80115f2:	22bc      	movs	r2, #188	; 0xbc
 80115f4:	212e      	movs	r1, #46	; 0x2e
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fe fddd 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f203 44a4 	addw	r4, r3, #1188	; 0x4a4
 8011602:	2200      	movs	r2, #0
 8011604:	21dc      	movs	r1, #220	; 0xdc
 8011606:	20ff      	movs	r0, #255	; 0xff
 8011608:	f7ff fb24 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801160c:	4603      	mov	r3, r0
 801160e:	4619      	mov	r1, r3
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff f854 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 801161c:	2100      	movs	r1, #0
 801161e:	4618      	mov	r0, r3
 8011620:	f7ff f8a0 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f203 44a4 	addw	r4, r3, #1188	; 0x4a4
 801162a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801162e:	2113      	movs	r1, #19
 8011630:	4618      	mov	r0, r3
 8011632:	f7fe ffdb 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011636:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 801163a:	4620      	mov	r0, r4
 801163c:	f005 fca4 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8011646:	22bc      	movs	r2, #188	; 0xbc
 8011648:	217c      	movs	r1, #124	; 0x7c
 801164a:	4618      	mov	r0, r3
 801164c:	f7fe fdb3 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f503 649b 	add.w	r4, r3, #1240	; 0x4d8
 8011656:	2200      	movs	r2, #0
 8011658:	21dc      	movs	r1, #220	; 0xdc
 801165a:	20ff      	movs	r0, #255	; 0xff
 801165c:	f7ff fafa 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011660:	4603      	mov	r3, r0
 8011662:	4619      	mov	r1, r3
 8011664:	4620      	mov	r0, r4
 8011666:	f7ff f82a 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8011670:	2100      	movs	r1, #0
 8011672:	4618      	mov	r0, r3
 8011674:	f7ff f876 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 649b 	add.w	r4, r3, #1240	; 0x4d8
 801167e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011682:	2114      	movs	r1, #20
 8011684:	4618      	mov	r0, r3
 8011686:	f7fe ffb1 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801168a:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 801168e:	4620      	mov	r0, r4
 8011690:	f005 fc7a 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(26, 153, 60, 35);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f203 500c 	addw	r0, r3, #1292	; 0x50c
 801169a:	2323      	movs	r3, #35	; 0x23
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	233c      	movs	r3, #60	; 0x3c
 80116a0:	2299      	movs	r2, #153	; 0x99
 80116a2:	211a      	movs	r1, #26
 80116a4:	f7fe fd3c 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f203 540c 	addw	r4, r3, #1292	; 0x50c
 80116ae:	22ff      	movs	r2, #255	; 0xff
 80116b0:	21ff      	movs	r1, #255	; 0xff
 80116b2:	20ff      	movs	r0, #255	; 0xff
 80116b4:	f7ff face 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116b8:	4603      	mov	r3, r0
 80116ba:	4619      	mov	r1, r3
 80116bc:	4620      	mov	r0, r4
 80116be:	f7fe fffe 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80116c8:	2100      	movs	r1, #0
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ff f84a 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f503 642b 	add.w	r4, r3, #2736	; 0xab0
 80116d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80116da:	2110      	movs	r1, #16
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fe ff85 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80116e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe ff90 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 80116ec:	4603      	mov	r3, r0
 80116ee:	4ae3      	ldr	r2, [pc, #908]	; (8011a7c <_ZN12MainViewBaseC1Ev+0xdd4>)
 80116f0:	2105      	movs	r1, #5
 80116f2:	4620      	mov	r0, r4
 80116f4:	f008 fff2 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f203 520c 	addw	r2, r3, #1292	; 0x50c
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8011704:	4619      	mov	r1, r3
 8011706:	4610      	mov	r0, r2
 8011708:	f7ff f8b4 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f203 540c 	addw	r4, r3, #1292	; 0x50c
 8011712:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011716:	210f      	movs	r1, #15
 8011718:	4618      	mov	r0, r3
 801171a:	f7fe ff67 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801171e:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8011722:	4620      	mov	r0, r4
 8011724:	f005 fc30 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(104, 153, 60, 35);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f203 5044 	addw	r0, r3, #1348	; 0x544
 801172e:	2323      	movs	r3, #35	; 0x23
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	233c      	movs	r3, #60	; 0x3c
 8011734:	2299      	movs	r2, #153	; 0x99
 8011736:	2168      	movs	r1, #104	; 0x68
 8011738:	f7fe fcf2 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f203 5444 	addw	r4, r3, #1348	; 0x544
 8011742:	22ff      	movs	r2, #255	; 0xff
 8011744:	21ff      	movs	r1, #255	; 0xff
 8011746:	20ff      	movs	r0, #255	; 0xff
 8011748:	f7ff fa84 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801174c:	4603      	mov	r3, r0
 801174e:	4619      	mov	r1, r3
 8011750:	4620      	mov	r0, r4
 8011752:	f7fe ffb4 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f203 5344 	addw	r3, r3, #1348	; 0x544
 801175c:	2100      	movs	r1, #0
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff f800 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f603 24ba 	addw	r4, r3, #2746	; 0xaba
 801176a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801176e:	2112      	movs	r1, #18
 8011770:	4618      	mov	r0, r3
 8011772:	f7fe ff3b 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011776:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801177a:	4618      	mov	r0, r3
 801177c:	f7fe ff46 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011780:	4603      	mov	r3, r0
 8011782:	4abe      	ldr	r2, [pc, #760]	; (8011a7c <_ZN12MainViewBaseC1Ev+0xdd4>)
 8011784:	2105      	movs	r1, #5
 8011786:	4620      	mov	r0, r4
 8011788:	f008 ffa8 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f203 5244 	addw	r2, r3, #1348	; 0x544
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f603 23ba 	addw	r3, r3, #2746	; 0xaba
 8011798:	4619      	mov	r1, r3
 801179a:	4610      	mov	r0, r2
 801179c:	f7ff f86a 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f203 5444 	addw	r4, r3, #1348	; 0x544
 80117a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117aa:	2111      	movs	r1, #17
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fe ff1d 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80117b2:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80117b6:	4620      	mov	r0, r4
 80117b8:	f005 fbe6 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80117c2:	22bc      	movs	r2, #188	; 0xbc
 80117c4:	f240 1157 	movw	r1, #343	; 0x157
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fe fcf4 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 80117d4:	2200      	movs	r2, #0
 80117d6:	21dc      	movs	r1, #220	; 0xdc
 80117d8:	20ff      	movs	r0, #255	; 0xff
 80117da:	f7ff fa3b 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117de:	4603      	mov	r3, r0
 80117e0:	4619      	mov	r1, r3
 80117e2:	4620      	mov	r0, r4
 80117e4:	f7fe ff6b 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80117ee:	2100      	movs	r1, #0
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fe ffb7 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 80117fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011800:	2117      	movs	r1, #23
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe fef2 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011808:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 801180c:	4620      	mov	r0, r4
 801180e:	f005 fbbb 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8011818:	22bc      	movs	r2, #188	; 0xbc
 801181a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801181e:	4618      	mov	r0, r3
 8011820:	f7fe fcc9 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 801182a:	2200      	movs	r2, #0
 801182c:	21dc      	movs	r1, #220	; 0xdc
 801182e:	20ff      	movs	r0, #255	; 0xff
 8011830:	f7ff fa10 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011834:	4603      	mov	r3, r0
 8011836:	4619      	mov	r1, r3
 8011838:	4620      	mov	r0, r4
 801183a:	f7fe ff40 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8011844:	2100      	movs	r1, #0
 8011846:	4618      	mov	r0, r3
 8011848:	f7fe ff8c 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 8011852:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011856:	2118      	movs	r1, #24
 8011858:	4618      	mov	r0, r3
 801185a:	f7fe fec7 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801185e:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011862:	4620      	mov	r0, r4
 8011864:	f005 fb90 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(328, 153, 60, 35);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f203 50e4 	addw	r0, r3, #1508	; 0x5e4
 801186e:	2323      	movs	r3, #35	; 0x23
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	233c      	movs	r3, #60	; 0x3c
 8011874:	2299      	movs	r2, #153	; 0x99
 8011876:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801187a:	f7fe fc51 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f203 54e4 	addw	r4, r3, #1508	; 0x5e4
 8011884:	22ff      	movs	r2, #255	; 0xff
 8011886:	21ff      	movs	r1, #255	; 0xff
 8011888:	20ff      	movs	r0, #255	; 0xff
 801188a:	f7ff f9e3 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801188e:	4603      	mov	r3, r0
 8011890:	4619      	mov	r1, r3
 8011892:	4620      	mov	r0, r4
 8011894:	f7fe ff13 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 801189e:	2100      	movs	r1, #0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fe ff5f 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 80118ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118b0:	211a      	movs	r1, #26
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fe fe9a 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80118b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fe fea5 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 80118c2:	4603      	mov	r3, r0
 80118c4:	4a6d      	ldr	r2, [pc, #436]	; (8011a7c <_ZN12MainViewBaseC1Ev+0xdd4>)
 80118c6:	2105      	movs	r1, #5
 80118c8:	4620      	mov	r0, r4
 80118ca:	f008 ff07 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f203 52e4 	addw	r2, r3, #1508	; 0x5e4
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 80118da:	4619      	mov	r1, r3
 80118dc:	4610      	mov	r0, r2
 80118de:	f7fe ffc9 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f203 54e4 	addw	r4, r3, #1508	; 0x5e4
 80118e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80118ec:	2119      	movs	r1, #25
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe fe7c 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80118f4:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80118f8:	4620      	mov	r0, r4
 80118fa:	f005 fb45 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(411, 153, 60, 35);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8011904:	2323      	movs	r3, #35	; 0x23
 8011906:	9300      	str	r3, [sp, #0]
 8011908:	233c      	movs	r3, #60	; 0x3c
 801190a:	2299      	movs	r2, #153	; 0x99
 801190c:	f240 119b 	movw	r1, #411	; 0x19b
 8011910:	f7fe fc06 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 801191a:	22ff      	movs	r2, #255	; 0xff
 801191c:	21ff      	movs	r1, #255	; 0xff
 801191e:	20ff      	movs	r0, #255	; 0xff
 8011920:	f7ff f998 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011924:	4603      	mov	r3, r0
 8011926:	4619      	mov	r1, r3
 8011928:	4620      	mov	r0, r4
 801192a:	f7fe fec8 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8011934:	2100      	movs	r1, #0
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe ff14 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 8011942:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011946:	2128      	movs	r1, #40	; 0x28
 8011948:	4618      	mov	r0, r3
 801194a:	f7fe fe4f 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801194e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011952:	4618      	mov	r0, r3
 8011954:	f7fe fe5a 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011958:	4603      	mov	r3, r0
 801195a:	4a48      	ldr	r2, [pc, #288]	; (8011a7c <_ZN12MainViewBaseC1Ev+0xdd4>)
 801195c:	2105      	movs	r1, #5
 801195e:	4620      	mov	r0, r4
 8011960:	f008 febc 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 8011970:	4619      	mov	r1, r3
 8011972:	4610      	mov	r0, r2
 8011974:	f7fe ff7e 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 801197e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011982:	211b      	movs	r1, #27
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe fe31 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 801198a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801198e:	4620      	mov	r0, r4
 8011990:	f005 fafa 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f203 6354 	addw	r3, r3, #1620	; 0x654
 801199a:	22f0      	movs	r2, #240	; 0xf0
 801199c:	f240 1197 	movw	r1, #407	; 0x197
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fe fc08 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f203 6454 	addw	r4, r3, #1620	; 0x654
 80119ac:	2200      	movs	r2, #0
 80119ae:	21dc      	movs	r1, #220	; 0xdc
 80119b0:	20ff      	movs	r0, #255	; 0xff
 80119b2:	f7ff f94f 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119b6:	4603      	mov	r3, r0
 80119b8:	4619      	mov	r1, r3
 80119ba:	4620      	mov	r0, r4
 80119bc:	f7fe fe7f 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80119c6:	2100      	movs	r1, #0
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fe fecb 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f203 6454 	addw	r4, r3, #1620	; 0x654
 80119d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80119d8:	211e      	movs	r1, #30
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fe fe06 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 80119e0:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80119e4:	4620      	mov	r0, r4
 80119e6:	f005 facf 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80119f0:	22e2      	movs	r2, #226	; 0xe2
 80119f2:	f240 116d 	movw	r1, #365	; 0x16d
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fbdd 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f503 60d1 	add.w	r0, r3, #1672	; 0x688
 8011a02:	230a      	movs	r3, #10
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	2364      	movs	r3, #100	; 0x64
 8011a08:	2202      	movs	r2, #2
 8011a0a:	2102      	movs	r1, #2
 8011a0c:	f003 f8bc 	bl	8014b88 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f503 60d1 	add.w	r0, r3, #1672	; 0x688
 8011a16:	2300      	movs	r3, #0
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	2264      	movs	r2, #100	; 0x64
 8011a1e:	2100      	movs	r1, #0
 8011a20:	f003 fb30 	bl	8015084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f003 f90b 	bl	8014c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 64d1 	add.w	r4, r3, #1672	; 0x688
 8011a38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fe fb10 	bl	8010064 <_ZN8touchgfx6BitmapC1Et>
 8011a44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011a48:	4619      	mov	r1, r3
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	f003 fb0f 	bl	801506e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f503 64d1 	add.w	r4, r3, #1672	; 0x688
 8011a56:	2200      	movs	r2, #0
 8011a58:	21dc      	movs	r1, #220	; 0xdc
 8011a5a:	20ff      	movs	r0, #255	; 0xff
 8011a5c:	f7ff f8fa 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a60:	4603      	mov	r3, r0
 8011a62:	4619      	mov	r1, r3
 8011a64:	4620      	mov	r0, r4
 8011a66:	f003 f839 	bl	8014adc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8011a70:	213c      	movs	r1, #60	; 0x3c
 8011a72:	4618      	mov	r0, r3
 8011a74:	f003 f8a0 	bl	8014bb8 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	e001      	b.n	8011a80 <_ZN12MainViewBaseC1Ev+0xdd8>
 8011a7c:	08025aec 	.word	0x08025aec
 8011a80:	f503 60e9 	add.w	r0, r3, #1864	; 0x748
 8011a84:	230a      	movs	r3, #10
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	23b4      	movs	r3, #180	; 0xb4
 8011a8a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011a8e:	210e      	movs	r1, #14
 8011a90:	f7fe fb46 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8011a9a:	22ff      	movs	r2, #255	; 0xff
 8011a9c:	21ff      	movs	r1, #255	; 0xff
 8011a9e:	20ff      	movs	r0, #255	; 0xff
 8011aa0:	f7ff f8d8 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	22ff      	movs	r2, #255	; 0xff
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f004 fd3d 	bl	801652a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f503 62e9 	add.w	r2, r3, #1864	; 0x748
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8011abc:	4619      	mov	r1, r3
 8011abe:	4610      	mov	r0, r2
 8011ac0:	f004 fd9c 	bl	80165fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8011aca:	2205      	movs	r2, #5
 8011acc:	2100      	movs	r1, #0
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 fb8e 	bl	80121f0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8011ada:	2205      	movs	r2, #5
 8011adc:	21b4      	movs	r1, #180	; 0xb4
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f000 fbac 	bl	801223c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8011aea:	2102      	movs	r1, #2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f000 fbcb 	bl	8012288 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8011af8:	2100      	movs	r1, #0
 8011afa:	4618      	mov	r0, r3
 8011afc:	f005 f898 	bl	8016c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f203 70d4 	addw	r0, r3, #2004	; 0x7d4
 8011b06:	230a      	movs	r3, #10
 8011b08:	9300      	str	r3, [sp, #0]
 8011b0a:	23b4      	movs	r3, #180	; 0xb4
 8011b0c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011b10:	f240 111f 	movw	r1, #287	; 0x11f
 8011b14:	f7fe fb04 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8011b1e:	22ff      	movs	r2, #255	; 0xff
 8011b20:	21ff      	movs	r1, #255	; 0xff
 8011b22:	20ff      	movs	r0, #255	; 0xff
 8011b24:	f7ff f896 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	22ff      	movs	r2, #255	; 0xff
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f004 fcfb 	bl	801652a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f203 72d4 	addw	r2, r3, #2004	; 0x7d4
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8011b40:	4619      	mov	r1, r3
 8011b42:	4610      	mov	r0, r2
 8011b44:	f004 fd5a 	bl	80165fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8011b4e:	2205      	movs	r2, #5
 8011b50:	2100      	movs	r1, #0
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 fb4c 	bl	80121f0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8011b5e:	2205      	movs	r2, #5
 8011b60:	21b4      	movs	r1, #180	; 0xb4
 8011b62:	4618      	mov	r0, r3
 8011b64:	f000 fb6a 	bl	801223c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8011b6e:	2102      	movs	r1, #2
 8011b70:	4618      	mov	r0, r3
 8011b72:	f000 fb89 	bl	8012288 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f005 f856 	bl	8016c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f503 6006 	add.w	r0, r3, #2144	; 0x860
 8011b8a:	2315      	movs	r3, #21
 8011b8c:	9300      	str	r3, [sp, #0]
 8011b8e:	233c      	movs	r3, #60	; 0x3c
 8011b90:	22f7      	movs	r2, #247	; 0xf7
 8011b92:	21d2      	movs	r1, #210	; 0xd2
 8011b94:	f7fe fac4 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 8011b9e:	22ff      	movs	r2, #255	; 0xff
 8011ba0:	21ff      	movs	r1, #255	; 0xff
 8011ba2:	20ff      	movs	r0, #255	; 0xff
 8011ba4:	f7ff f856 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	4619      	mov	r1, r3
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7fe fd86 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8011bb8:	2100      	movs	r1, #0
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe fdd2 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 8011bc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011bca:	2120      	movs	r1, #32
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fe fd0d 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011bd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe fd18 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	4ae1      	ldr	r2, [pc, #900]	; (8011f64 <_ZN12MainViewBaseC1Ev+0x12bc>)
 8011be0:	2105      	movs	r1, #5
 8011be2:	4620      	mov	r0, r4
 8011be4:	f008 fd7a 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f503 6206 	add.w	r2, r3, #2144	; 0x860
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fe fe3c 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 8011c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c06:	211f      	movs	r1, #31
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fe fcef 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011c0e:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011c12:	4620      	mov	r0, r4
 8011c14:	f005 f9b8 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011c1e:	2201      	movs	r2, #1
 8011c20:	2101      	movs	r1, #1
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fe fac7 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f603 0098 	addw	r0, r3, #2200	; 0x898
 8011c2e:	2337      	movs	r3, #55	; 0x37
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011c36:	2202      	movs	r2, #2
 8011c38:	2102      	movs	r1, #2
 8011c3a:	f003 f8f5 	bl	8014e28 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 10000);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f603 0098 	addw	r0, r3, #2200	; 0x898
 8011c44:	2300      	movs	r3, #0
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	2300      	movs	r3, #0
 8011c4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8011c4e:	2100      	movs	r1, #0
 8011c50:	f003 fa18 	bl	8015084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f002 fff3 	bl	8014c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011c68:	2101      	movs	r1, #1
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f003 f837 	bl	8014cde <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(9900);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011c76:	f242 61ac 	movw	r1, #9900	; 0x26ac
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f003 f8ec 	bl	8014e58 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011c86:	2101      	movs	r1, #1
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f003 f811 	bl	8014cb0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f603 1088 	addw	r0, r3, #2440	; 0x988
 8011c94:	2316      	movs	r3, #22
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	2337      	movs	r3, #55	; 0x37
 8011c9a:	2204      	movs	r2, #4
 8011c9c:	2119      	movs	r1, #25
 8011c9e:	f7fe fa3f 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f603 1488 	addw	r4, r3, #2440	; 0x988
 8011ca8:	22ff      	movs	r2, #255	; 0xff
 8011caa:	21ff      	movs	r1, #255	; 0xff
 8011cac:	20ff      	movs	r0, #255	; 0xff
 8011cae:	f7fe ffd1 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f7fe fd01 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8011cc2:	2100      	movs	r1, #0
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fd4d 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f603 24e2 	addw	r4, r3, #2786	; 0xae2
 8011cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011cd4:	2122      	movs	r1, #34	; 0x22
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fe fc88 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fe fc93 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	4a9e      	ldr	r2, [pc, #632]	; (8011f64 <_ZN12MainViewBaseC1Ev+0x12bc>)
 8011cea:	2105      	movs	r1, #5
 8011cec:	4620      	mov	r0, r4
 8011cee:	f008 fcf5 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f603 1288 	addw	r2, r3, #2440	; 0x988
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f603 23e2 	addw	r3, r3, #2786	; 0xae2
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4610      	mov	r0, r2
 8011d02:	f7fe fdb7 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f603 1488 	addw	r4, r3, #2440	; 0x988
 8011d0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d10:	2121      	movs	r1, #33	; 0x21
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe fc6a 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011d18:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f005 f933 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8011d28:	220f      	movs	r2, #15
 8011d2a:	2152      	movs	r1, #82	; 0x52
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fe fa42 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8011d38:	22ff      	movs	r2, #255	; 0xff
 8011d3a:	21ff      	movs	r1, #255	; 0xff
 8011d3c:	20ff      	movs	r0, #255	; 0xff
 8011d3e:	f7fe ff89 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d42:	4603      	mov	r3, r0
 8011d44:	4619      	mov	r1, r3
 8011d46:	4620      	mov	r0, r4
 8011d48:	f7fe fcb9 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8011d52:	2100      	movs	r1, #0
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe fd05 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8011d60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011d64:	2123      	movs	r1, #35	; 0x23
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fe fc40 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011d6c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011d70:	4620      	mov	r0, r4
 8011d72:	f005 f909 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(328, 91, 60, 35);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f603 10f4 	addw	r0, r3, #2548	; 0x9f4
 8011d7c:	2323      	movs	r3, #35	; 0x23
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	233c      	movs	r3, #60	; 0x3c
 8011d82:	225b      	movs	r2, #91	; 0x5b
 8011d84:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011d88:	f7fe f9ca 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 8011d92:	22ff      	movs	r2, #255	; 0xff
 8011d94:	21ff      	movs	r1, #255	; 0xff
 8011d96:	20ff      	movs	r0, #255	; 0xff
 8011d98:	f7fe ff5c 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	4619      	mov	r1, r3
 8011da0:	4620      	mov	r0, r4
 8011da2:	f7fe fc8c 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8011dac:	2100      	movs	r1, #0
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fe fcd8 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 8011dba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011dbe:	2125      	movs	r1, #37	; 0x25
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fe fc13 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011dc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fe fc1e 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	4a64      	ldr	r2, [pc, #400]	; (8011f64 <_ZN12MainViewBaseC1Ev+0x12bc>)
 8011dd4:	2105      	movs	r1, #5
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f008 fc80 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f603 12f4 	addw	r2, r3, #2548	; 0x9f4
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8011de8:	4619      	mov	r1, r3
 8011dea:	4610      	mov	r0, r2
 8011dec:	f7fe fd42 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 8011df6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011dfa:	2124      	movs	r1, #36	; 0x24
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fe fbf5 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011e02:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8011e06:	4620      	mov	r0, r4
 8011e08:	f005 f8be 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(409, 91, 60, 35);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f603 202c 	addw	r0, r3, #2604	; 0xa2c
 8011e12:	2323      	movs	r3, #35	; 0x23
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	233c      	movs	r3, #60	; 0x3c
 8011e18:	225b      	movs	r2, #91	; 0x5b
 8011e1a:	f240 1199 	movw	r1, #409	; 0x199
 8011e1e:	f7fe f97f 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8011e28:	22ff      	movs	r2, #255	; 0xff
 8011e2a:	21ff      	movs	r1, #255	; 0xff
 8011e2c:	20ff      	movs	r0, #255	; 0xff
 8011e2e:	f7fe ff11 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e32:	4603      	mov	r3, r0
 8011e34:	4619      	mov	r1, r3
 8011e36:	4620      	mov	r0, r4
 8011e38:	f7fe fc41 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8011e42:	2100      	movs	r1, #0
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7fe fc8d 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f603 24f6 	addw	r4, r3, #2806	; 0xaf6
 8011e50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e54:	2127      	movs	r1, #39	; 0x27
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fe fbc8 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011e5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fe fbd3 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011e66:	4603      	mov	r3, r0
 8011e68:	4a3e      	ldr	r2, [pc, #248]	; (8011f64 <_ZN12MainViewBaseC1Ev+0x12bc>)
 8011e6a:	2105      	movs	r1, #5
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f008 fc35 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f603 23f6 	addw	r3, r3, #2806	; 0xaf6
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4610      	mov	r0, r2
 8011e82:	f7fe fcf7 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8011e8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011e90:	2126      	movs	r1, #38	; 0x26
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fe fbaa 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011e98:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f005 f873 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHValue.setPosition(185, 76, 110, 69);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f603 2064 	addw	r0, r3, #2660	; 0xa64
 8011ea8:	2345      	movs	r3, #69	; 0x45
 8011eaa:	9300      	str	r3, [sp, #0]
 8011eac:	236e      	movs	r3, #110	; 0x6e
 8011eae:	224c      	movs	r2, #76	; 0x4c
 8011eb0:	21b9      	movs	r1, #185	; 0xb9
 8011eb2:	f7fe f935 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f603 2464 	addw	r4, r3, #2660	; 0xa64
 8011ebc:	22ff      	movs	r2, #255	; 0xff
 8011ebe:	21ff      	movs	r1, #255	; 0xff
 8011ec0:	20ff      	movs	r0, #255	; 0xff
 8011ec2:	f7fe fec7 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	4619      	mov	r1, r3
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7fe fbf7 	bl	80106be <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe fc43 	bl	8010764 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8011ee4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011ee8:	212a      	movs	r1, #42	; 0x2a
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fe fb7e 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011ef0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fb89 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8011efa:	4603      	mov	r3, r0
 8011efc:	4a19      	ldr	r2, [pc, #100]	; (8011f64 <_ZN12MainViewBaseC1Ev+0x12bc>)
 8011efe:	2105      	movs	r1, #5
 8011f00:	4620      	mov	r0, r4
 8011f02:	f008 fbeb 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f603 2264 	addw	r2, r3, #2660	; 0xa64
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f12:	4619      	mov	r1, r3
 8011f14:	4610      	mov	r0, r2
 8011f16:	f7fe fcad 	bl	8010874 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID58));
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f603 2464 	addw	r4, r3, #2660	; 0xa64
 8011f20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011f24:	2129      	movs	r1, #41	; 0x29
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fe fb60 	bl	80105ec <_ZN8touchgfx9TypedTextC1Et>
 8011f2c:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8011f30:	4620      	mov	r0, r4
 8011f32:	f005 f829 	bl	8016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3340      	adds	r3, #64	; 0x40
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	4610      	mov	r0, r2
 8011f40:	f7fe fa9c 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	3370      	adds	r3, #112	; 0x70
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f7fe fa95 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	33a4      	adds	r3, #164	; 0xa4
 8011f58:	4619      	mov	r1, r3
 8011f5a:	4610      	mov	r0, r2
 8011f5c:	f7fe fa8e 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 8011f60:	e002      	b.n	8011f68 <_ZN12MainViewBaseC1Ev+0x12c0>
 8011f62:	bf00      	nop
 8011f64:	08025aec 	.word	0x08025aec
    add(CltDecsriptor);
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	33d8      	adds	r3, #216	; 0xd8
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4610      	mov	r0, r2
 8011f72:	f7fe fa83 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011f7e:	4619      	mov	r1, r3
 8011f80:	4610      	mov	r0, r2
 8011f82:	f7fe fa7b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7fe fa73 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	4610      	mov	r0, r2
 8011fa2:	f7fe fa6b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	f7fe fa63 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	f7fe fa5b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	f7fe fa53 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	f7fe fa4b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011fee:	4619      	mov	r1, r3
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	f7fe fa43 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8011ffe:	4619      	mov	r1, r3
 8012000:	4610      	mov	r0, r2
 8012002:	f7fe fa3b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 801200e:	4619      	mov	r1, r3
 8012010:	4610      	mov	r0, r2
 8012012:	f7fe fa33 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801201e:	4619      	mov	r1, r3
 8012020:	4610      	mov	r0, r2
 8012022:	f7fe fa2b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801202e:	4619      	mov	r1, r3
 8012030:	4610      	mov	r0, r2
 8012032:	f7fe fa23 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 801203e:	4619      	mov	r1, r3
 8012040:	4610      	mov	r0, r2
 8012042:	f7fe fa1b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm9);
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 801204e:	4619      	mov	r1, r3
 8012050:	4610      	mov	r0, r2
 8012052:	f7fe fa13 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm10);
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 801205e:	4619      	mov	r1, r3
 8012060:	4610      	mov	r0, r2
 8012062:	f7fe fa0b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8012066:	687a      	ldr	r2, [r7, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801206e:	4619      	mov	r1, r3
 8012070:	4610      	mov	r0, r2
 8012072:	f7fe fa03 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 801207e:	4619      	mov	r1, r3
 8012080:	4610      	mov	r0, r2
 8012082:	f7fe f9fb 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 801208e:	4619      	mov	r1, r3
 8012090:	4610      	mov	r0, r2
 8012092:	f7fe f9f3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 801209e:	4619      	mov	r1, r3
 80120a0:	4610      	mov	r0, r2
 80120a2:	f7fe f9eb 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80120ae:	4619      	mov	r1, r3
 80120b0:	4610      	mov	r0, r2
 80120b2:	f7fe f9e3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80120be:	4619      	mov	r1, r3
 80120c0:	4610      	mov	r0, r2
 80120c2:	f7fe f9db 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80120ce:	4619      	mov	r1, r3
 80120d0:	4610      	mov	r0, r2
 80120d2:	f7fe f9d3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80120de:	4619      	mov	r1, r3
 80120e0:	4610      	mov	r0, r2
 80120e2:	f7fe f9cb 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80120ee:	4619      	mov	r1, r3
 80120f0:	4610      	mov	r0, r2
 80120f2:	f7fe f9c3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80120fe:	4619      	mov	r1, r3
 8012100:	4610      	mov	r0, r2
 8012102:	f7fe f9bb 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 801210e:	4619      	mov	r1, r3
 8012110:	4610      	mov	r0, r2
 8012112:	f7fe f9b3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 801211e:	4619      	mov	r1, r3
 8012120:	4610      	mov	r0, r2
 8012122:	f7fe f9ab 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801212e:	4619      	mov	r1, r3
 8012130:	4610      	mov	r0, r2
 8012132:	f7fe f9a3 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 801213e:	4619      	mov	r1, r3
 8012140:	4610      	mov	r0, r2
 8012142:	f7fe f99b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 801214e:	4619      	mov	r1, r3
 8012150:	4610      	mov	r0, r2
 8012152:	f7fe f993 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f603 1388 	addw	r3, r3, #2440	; 0x988
 801215e:	4619      	mov	r1, r3
 8012160:	4610      	mov	r0, r2
 8012162:	f7fe f98b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 801216e:	4619      	mov	r1, r3
 8012170:	4610      	mov	r0, r2
 8012172:	f7fe f983 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 801217e:	4619      	mov	r1, r3
 8012180:	4610      	mov	r0, r2
 8012182:	f7fe f97b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 801218e:	4619      	mov	r1, r3
 8012190:	4610      	mov	r0, r2
 8012192:	f7fe f973 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 801219e:	4619      	mov	r1, r3
 80121a0:	4610      	mov	r0, r2
 80121a2:	f7fe f96b 	bl	801047c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	37cc      	adds	r7, #204	; 0xcc
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd90      	pop	{r4, r7, pc}

080121b0 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]

}
 80121b8:	bf00      	nop
 80121ba:	370c      	adds	r7, #12
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	4618      	mov	r0, r3
 80121d0:	f007 f9be 	bl	8019550 <_ZN8touchgfx6ScreenC1Ev>
 80121d4:	4a05      	ldr	r2, [pc, #20]	; (80121ec <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	601a      	str	r2, [r3, #0]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2200      	movs	r2, #0
 80121de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	080260bc 	.word	0x080260bc

080121f0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80121f0:	b590      	push	{r4, r7, lr}
 80121f2:	b089      	sub	sp, #36	; 0x24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	607a      	str	r2, [r7, #4]
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	015a      	lsls	r2, r3, #5
 8012204:	f107 0314 	add.w	r3, r7, #20
 8012208:	4611      	mov	r1, r2
 801220a:	4618      	mov	r0, r3
 801220c:	f7fe fb62 	bl	80108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	461c      	mov	r4, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	61fb      	str	r3, [r7, #28]
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	015a      	lsls	r2, r3, #5
 801221c:	f107 0310 	add.w	r3, r7, #16
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f7fe fb56 	bl	80108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012228:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801222a:	461a      	mov	r2, r3
 801222c:	4621      	mov	r1, r4
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f004 fce8 	bl	8016c04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8012234:	bf00      	nop
 8012236:	3724      	adds	r7, #36	; 0x24
 8012238:	46bd      	mov	sp, r7
 801223a:	bd90      	pop	{r4, r7, pc}

0801223c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 801223c:	b590      	push	{r4, r7, lr}
 801223e:	b089      	sub	sp, #36	; 0x24
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	61bb      	str	r3, [r7, #24]
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	f107 0314 	add.w	r3, r7, #20
 8012254:	4611      	mov	r1, r2
 8012256:	4618      	mov	r0, r3
 8012258:	f7fe fb3c 	bl	80108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	461c      	mov	r4, r3
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	61fb      	str	r3, [r7, #28]
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	015a      	lsls	r2, r3, #5
 8012268:	f107 0310 	add.w	r3, r7, #16
 801226c:	4611      	mov	r1, r2
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe fb30 	bl	80108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012274:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012276:	461a      	mov	r2, r3
 8012278:	4621      	mov	r1, r4
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f004 fccd 	bl	8016c1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012280:	bf00      	nop
 8012282:	3724      	adds	r7, #36	; 0x24
 8012284:	46bd      	mov	sp, r7
 8012286:	bd90      	pop	{r4, r7, pc}

08012288 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	60fb      	str	r3, [r7, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	015a      	lsls	r2, r3, #5
 801229a:	f107 0308 	add.w	r3, r7, #8
 801229e:	4611      	mov	r1, r2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fe fb17 	bl	80108d4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122a6:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80122a8:	4619      	mov	r1, r3
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7fe fb2d 	bl	801090a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80122b0:	bf00      	nop
 80122b2:	3710      	adds	r7, #16
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	4a05      	ldr	r2, [pc, #20]	; (80122d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fe fa9b 	bl	8010804 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4618      	mov	r0, r3
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	08027c84 	.word	0x08027c84

080122dc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff ffe7 	bl	80122b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80122ea:	2138      	movs	r1, #56	; 0x38
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f012 f962 	bl	80245b6 <_ZdlPvj>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	4a05      	ldr	r2, [pc, #20]	; (801231c <_ZN8touchgfx4LineD1Ev+0x20>)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	601a      	str	r2, [r3, #0]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	4618      	mov	r0, r3
 801230e:	f004 fa53 	bl	80167b8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	08027a30 	.word	0x08027a30

08012320 <_ZN8touchgfx4LineD0Ev>:
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7ff ffe7 	bl	80122fc <_ZN8touchgfx4LineD1Ev>
 801232e:	2174      	movs	r1, #116	; 0x74
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f012 f940 	bl	80245b6 <_ZdlPvj>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	4a05      	ldr	r2, [pc, #20]	; (8012360 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	601a      	str	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fafd 	bl	8010950 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	08027734 	.word	0x08027734

08012364 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7ff ffe7 	bl	8012340 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012372:	2118      	movs	r1, #24
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f012 f91e 	bl	80245b6 <_ZdlPvj>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012384:	b480      	push	{r7}
 8012386:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012388:	4b02      	ldr	r3, [pc, #8]	; (8012394 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801238a:	4618      	mov	r0, r3
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr
 8012394:	08026228 	.word	0x08026228

08012398 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012398:	b480      	push	{r7}
 801239a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801239c:	2303      	movs	r3, #3
}
 801239e:	4618      	mov	r0, r3
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80123a8:	b480      	push	{r7}
 80123aa:	b085      	sub	sp, #20
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	4613      	mov	r3, r2
 80123b4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80123b6:	4a07      	ldr	r2, [pc, #28]	; (80123d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6013      	str	r3, [r2, #0]
        fonts = f;
 80123bc:	4a06      	ldr	r2, [pc, #24]	; (80123d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80123c2:	4a06      	ldr	r2, [pc, #24]	; (80123dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80123c4:	88fb      	ldrh	r3, [r7, #6]
 80123c6:	8013      	strh	r3, [r2, #0]
    }
 80123c8:	bf00      	nop
 80123ca:	3714      	adds	r7, #20
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr
 80123d4:	2000bd00 	.word	0x2000bd00
 80123d8:	2000bd08 	.word	0x2000bd08
 80123dc:	2000bd04 	.word	0x2000bd04

080123e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80123e0:	b590      	push	{r4, r7, lr}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80123ea:	2300      	movs	r3, #0
 80123ec:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80123ee:	88fb      	ldrh	r3, [r7, #6]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d127      	bne.n	8012444 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80123f4:	88fb      	ldrh	r3, [r7, #6]
 80123f6:	4a1e      	ldr	r2, [pc, #120]	; (8012470 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80123f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d016      	beq.n	801242e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012400:	88fb      	ldrh	r3, [r7, #6]
 8012402:	4a1b      	ldr	r2, [pc, #108]	; (8012470 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012408:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	4413      	add	r3, r2
 8012412:	4a18      	ldr	r2, [pc, #96]	; (8012474 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012414:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	4413      	add	r3, r2
 801241e:	4a16      	ldr	r2, [pc, #88]	; (8012478 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012420:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	4413      	add	r3, r2
 801242a:	60fb      	str	r3, [r7, #12]
 801242c:	e00a      	b.n	8012444 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801242e:	4b11      	ldr	r3, [pc, #68]	; (8012474 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012430:	4a12      	ldr	r2, [pc, #72]	; (801247c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012432:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012434:	4a12      	ldr	r2, [pc, #72]	; (8012480 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012436:	4b10      	ldr	r3, [pc, #64]	; (8012478 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012438:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801243a:	88fb      	ldrh	r3, [r7, #6]
 801243c:	4a11      	ldr	r2, [pc, #68]	; (8012484 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012442:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00d      	beq.n	8012466 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801244a:	4a0f      	ldr	r2, [pc, #60]	; (8012488 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801244c:	88fb      	ldrh	r3, [r7, #6]
 801244e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012450:	f000 f83e 	bl	80124d0 <_ZN17TypedTextDatabase8getFontsEv>
 8012454:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012456:	f000 f833 	bl	80124c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	4621      	mov	r1, r4
 8012460:	68f8      	ldr	r0, [r7, #12]
 8012462:	f7ff ffa1 	bl	80123a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012466:	bf00      	nop
 8012468:	3714      	adds	r7, #20
 801246a:	46bd      	mov	sp, r7
 801246c:	bd90      	pop	{r4, r7, pc}
 801246e:	bf00      	nop
 8012470:	2000862c 	.word	0x2000862c
 8012474:	20008634 	.word	0x20008634
 8012478:	20008638 	.word	0x20008638
 801247c:	08060bd4 	.word	0x08060bd4
 8012480:	08060b28 	.word	0x08060b28
 8012484:	08060d20 	.word	0x08060d20
 8012488:	20008630 	.word	0x20008630

0801248c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	460b      	mov	r3, r1
 8012496:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012498:	4b07      	ldr	r3, [pc, #28]	; (80124b8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	4b07      	ldr	r3, [pc, #28]	; (80124bc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801249e:	6819      	ldr	r1, [r3, #0]
 80124a0:	887b      	ldrh	r3, [r7, #2]
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	440b      	add	r3, r1
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4413      	add	r3, r2
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr
 80124b8:	20008634 	.word	0x20008634
 80124bc:	20008638 	.word	0x20008638

080124c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80124c4:	232b      	movs	r3, #43	; 0x2b
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80124d0:	b480      	push	{r7}
 80124d2:	af00      	add	r7, sp, #0
    return _fonts;
 80124d4:	4b02      	ldr	r3, [pc, #8]	; (80124e0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr
 80124e0:	2000863c 	.word	0x2000863c

080124e4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d127      	bne.n	8012544 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d122      	bne.n	8012544 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80124fe:	f7fc ff01 	bl	800f304 <_Z25getFont_Asap_Bold_18_4bppv>
 8012502:	4602      	mov	r2, r0
};
 8012504:	4b11      	ldr	r3, [pc, #68]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012506:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012508:	f7fc ffc2 	bl	800f490 <_Z25getFont_Asap_Bold_40_4bppv>
 801250c:	4602      	mov	r2, r0
};
 801250e:	4b0f      	ldr	r3, [pc, #60]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012510:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8012512:	f7fc ff7b 	bl	800f40c <_Z25getFont_Asap_Bold_30_4bppv>
 8012516:	4602      	mov	r2, r0
};
 8012518:	4b0c      	ldr	r3, [pc, #48]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801251a:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 801251c:	f7fc feb0 	bl	800f280 <_Z25getFont_Asap_Bold_12_4bppv>
 8012520:	4602      	mov	r2, r0
};
 8012522:	4b0a      	ldr	r3, [pc, #40]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012524:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8012526:	f7fc fff5 	bl	800f514 <_Z25getFont_Asap_Bold_60_4bppv>
 801252a:	4602      	mov	r2, r0
};
 801252c:	4b07      	ldr	r3, [pc, #28]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801252e:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012530:	f7fc ff2a 	bl	800f388 <_Z25getFont_Asap_Bold_21_4bppv>
 8012534:	4602      	mov	r2, r0
};
 8012536:	4b05      	ldr	r3, [pc, #20]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012538:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 801253a:	f7fc fe5f 	bl	800f1fc <_Z25getFont_Asap_Bold_10_4bppv>
 801253e:	4602      	mov	r2, r0
};
 8012540:	4b02      	ldr	r3, [pc, #8]	; (801254c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012542:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8012544:	bf00      	nop
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	2000863c 	.word	0x2000863c

08012550 <_GLOBAL__sub_I__fonts>:
 8012550:	b580      	push	{r7, lr}
 8012552:	af00      	add	r7, sp, #0
 8012554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012558:	2001      	movs	r0, #1
 801255a:	f7ff ffc3 	bl	80124e4 <_Z41__static_initialization_and_destruction_0ii>
 801255e:	bd80      	pop	{r7, pc}

08012560 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	4a05      	ldr	r2, [pc, #20]	; (8012580 <_ZN19FrontendApplicationD1Ev+0x20>)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	601a      	str	r2, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4618      	mov	r0, r3
 8012572:	f7fd fa5f 	bl	800fa34 <_ZN23FrontendApplicationBaseD1Ev>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	0802626c 	.word	0x0802626c

08012584 <_ZN19FrontendApplicationD0Ev>:
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7ff ffe7 	bl	8012560 <_ZN19FrontendApplicationD1Ev>
 8012592:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f012 f80d 	bl	80245b6 <_ZdlPvj>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80125b4:	4618      	mov	r0, r3
 80125b6:	f000 fb4f 	bl	8012c58 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	4618      	mov	r0, r3
 80125be:	f005 ff4b 	bl	8018458 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80125c2:	bf00      	nop
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	4618      	mov	r0, r3
 80125e0:	f7fd faa2 	bl	800fb28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80125e4:	4a03      	ldr	r2, [pc, #12]	; (80125f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	601a      	str	r2, [r3, #0]
{
}
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	4618      	mov	r0, r3
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0802626c 	.word	0x0802626c

080125f8 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80125f8:	b480      	push	{r7}
 80125fa:	b083      	sub	sp, #12
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
    {
    }
 8012600:	bf00      	nop
 8012602:	370c      	adds	r7, #12
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
    {
    }
 8012614:	bf00      	nop
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
    {
 8012628:	4a04      	ldr	r2, [pc, #16]	; (801263c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	601a      	str	r2, [r3, #0]
    }
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	080262ec 	.word	0x080262ec

08012640 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
    }
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff ffe9 	bl	8012620 <_ZN8touchgfx9PresenterD1Ev>
 801264e:	2104      	movs	r1, #4
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f011 ffb0 	bl	80245b6 <_ZdlPvj>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4618      	mov	r0, r3
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
    {
 8012668:	4a04      	ldr	r2, [pc, #16]	; (801267c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]
    }
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	080262ec 	.word	0x080262ec

08012680 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	4a06      	ldr	r2, [pc, #24]	; (80126a4 <_ZN13ModelListenerC1Ev+0x24>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	605a      	str	r2, [r3, #4]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	080262d8 	.word	0x080262d8

080126a8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	4a04      	ldr	r2, [pc, #16]	; (80126c4 <_ZN13ModelListenerD1Ev+0x1c>)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	601a      	str	r2, [r3, #0]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4618      	mov	r0, r3
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr
 80126c4:	080262d8 	.word	0x080262d8

080126c8 <_ZN13ModelListenerD0Ev>:
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff ffe9 	bl	80126a8 <_ZN13ModelListenerD1Ev>
 80126d6:	2108      	movs	r1, #8
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f011 ff6c 	bl	80245b6 <_ZdlPvj>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
 80126f2:	bf00      	nop
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
	...

08012700 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	4a09      	ldr	r2, [pc, #36]	; (8012730 <_ZN13MainPresenterD1Ev+0x30>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	4a09      	ldr	r2, [pc, #36]	; (8012734 <_ZN13MainPresenterD1Ev+0x34>)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	605a      	str	r2, [r3, #4]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	3304      	adds	r3, #4
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff ffc5 	bl	80126a8 <_ZN13ModelListenerD1Ev>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	f7ff ff7d 	bl	8012620 <_ZN8touchgfx9PresenterD1Ev>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	080262a8 	.word	0x080262a8
 8012734:	080262c4 	.word	0x080262c4

08012738 <_ZThn4_N13MainPresenterD1Ev>:
 8012738:	f1a0 0004 	sub.w	r0, r0, #4
 801273c:	e7e0      	b.n	8012700 <_ZN13MainPresenterD1Ev>
 801273e:	bf00      	nop

08012740 <_ZN13MainPresenterD0Ev>:
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7ff ffd9 	bl	8012700 <_ZN13MainPresenterD1Ev>
 801274e:	2110      	movs	r1, #16
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f011 ff30 	bl	80245b6 <_ZdlPvj>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <_ZThn4_N13MainPresenterD0Ev>:
 8012760:	f1a0 0004 	sub.w	r0, r0, #4
 8012764:	e7ec      	b.n	8012740 <_ZN13MainPresenterD0Ev>
	...

08012768 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
    : view(v)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4618      	mov	r0, r3
 8012776:	f7ff ff73 	bl	8012660 <_ZN8touchgfx9PresenterC1Ev>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	3304      	adds	r3, #4
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff ff7e 	bl	8012680 <_ZN13ModelListenerC1Ev>
 8012784:	4a06      	ldr	r2, [pc, #24]	; (80127a0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	4a06      	ldr	r2, [pc, #24]	; (80127a4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	605a      	str	r2, [r3, #4]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	683a      	ldr	r2, [r7, #0]
 8012794:	60da      	str	r2, [r3, #12]
{
}
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	080262a8 	.word	0x080262a8
 80127a4:	080262c4 	.word	0x080262c4

080127a8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
}
 80127b0:	bf00      	nop
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
}
 80127c4:	bf00      	nop
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	68db      	ldr	r3, [r3, #12]
 80127de:	6839      	ldr	r1, [r7, #0]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 f909 	bl	80129f8 <_ZN8MainView9updateValEPh>
}
 80127e6:	bf00      	nop
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}

080127ee <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80127ee:	f1a0 0004 	sub.w	r0, r0, #4
 80127f2:	f7ff bfed 	b.w	80127d0 <_ZN13MainPresenter11setNewValueEPh>

080127f6 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80127f6:	b480      	push	{r7}
 80127f8:	b083      	sub	sp, #12
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2200      	movs	r2, #0
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4618      	mov	r0, r3
 8012808:	370c      	adds	r7, #12
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	60f8      	str	r0, [r7, #12]
 801281a:	460b      	mov	r3, r1
 801281c:	607a      	str	r2, [r7, #4]
 801281e:	ed87 0a00 	vstr	s0, [r7]
 8012822:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012824:	463b      	mov	r3, r7
 8012826:	8979      	ldrh	r1, [r7, #10]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	68f8      	ldr	r0, [r7, #12]
 801282c:	f008 f8b0 	bl	801a990 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012830:	4603      	mov	r3, r0
    }
 8012832:	4618      	mov	r0, r3
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801283a:	b480      	push	{r7}
 801283c:	b083      	sub	sp, #12
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012848:	4618      	mov	r0, r3
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr

08012854 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
        return rect.height;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
	...

08012870 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	4a05      	ldr	r2, [pc, #20]	; (8012890 <_ZN8MainViewD1Ev+0x20>)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	601a      	str	r2, [r3, #0]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4618      	mov	r0, r3
 8012882:	f7fe f8cb 	bl	8010a1c <_ZN12MainViewBaseD1Ev>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	08026304 	.word	0x08026304

08012894 <_ZN8MainViewD0Ev>:
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7ff ffe7 	bl	8012870 <_ZN8MainViewD1Ev>
 80128a2:	f242 712c 	movw	r1, #10028	; 0x272c
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f011 fe85 	bl	80245b6 <_ZdlPvj>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
	...

080128b8 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

#include "display_values.h"
#include <touchgfx/Color.hpp>

MainView::MainView()
 80128b8:	b590      	push	{r4, r7, lr}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fe f9f0 	bl	8010ca8 <_ZN12MainViewBaseC1Ev>
 80128c8:	4a15      	ldr	r2, [pc, #84]	; (8012920 <_ZN8MainViewC1Ev+0x68>)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80128ce:	4b15      	ldr	r3, [pc, #84]	; (8012924 <_ZN8MainViewC1Ev+0x6c>)
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	461c      	mov	r4, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff ffad 	bl	801283a <_ZNK8touchgfx8Drawable8getWidthEv>
 80128e0:	4603      	mov	r3, r0
 80128e2:	429c      	cmp	r4, r3
 80128e4:	dc0b      	bgt.n	80128fe <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80128e6:	4b10      	ldr	r3, [pc, #64]	; (8012928 <_ZN8MainViewC1Ev+0x70>)
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	461c      	mov	r4, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ff ffae 	bl	8012854 <_ZNK8touchgfx8Drawable9getHeightEv>
 80128f8:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80128fa:	429c      	cmp	r4, r3
 80128fc:	dd01      	ble.n	8012902 <_ZN8MainViewC1Ev+0x4a>
 80128fe:	2301      	movs	r3, #1
 8012900:	e000      	b.n	8012904 <_ZN8MainViewC1Ev+0x4c>
 8012902:	2300      	movs	r3, #0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d005      	beq.n	8012914 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	3340      	adds	r3, #64	; 0x40
 801290c:	2101      	movs	r1, #1
 801290e:	4618      	mov	r0, r3
 8012910:	f7fd fcc2 	bl	8010298 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	4618      	mov	r0, r3
 8012918:	370c      	adds	r7, #12
 801291a:	46bd      	mov	sp, r7
 801291c:	bd90      	pop	{r4, r7, pc}
 801291e:	bf00      	nop
 8012920:	08026304 	.word	0x08026304
 8012924:	2000bc64 	.word	0x2000bc64
 8012928:	2000bc66 	.word	0x2000bc66

0801292c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
}
 8012948:	bf00      	nop
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801295a:	2200      	movs	r2, #0
 801295c:	2100      	movs	r1, #0
 801295e:	2000      	movs	r0, #0
 8012960:	f7fe f978 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012964:	4603      	mov	r3, r0
 8012966:	607b      	str	r3, [r7, #4]
}
 8012968:	bf00      	nop
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
	...

08012974 <_ZL20getColorFromRevLimitv>:

static int color_index = 0;

static colortype getColorFromRevLimit()
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0

	color_index ++;
 801297a:	4b1e      	ldr	r3, [pc, #120]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3301      	adds	r3, #1
 8012980:	4a1c      	ldr	r2, [pc, #112]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 8012982:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012984:	4b1b      	ldr	r3, [pc, #108]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b02      	cmp	r3, #2
 801298a:	dd02      	ble.n	8012992 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 801298c:	4b19      	ldr	r3, [pc, #100]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 801298e:	2200      	movs	r2, #0
 8012990:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012992:	2200      	movs	r2, #0
 8012994:	2100      	movs	r1, #0
 8012996:	20ff      	movs	r0, #255	; 0xff
 8012998:	f7fe f95c 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801299c:	4603      	mov	r3, r0
 801299e:	60fb      	str	r3, [r7, #12]
	colortype green_color = touchgfx::Color::getColorFrom24BitRGB(0,255,0);
 80129a0:	2200      	movs	r2, #0
 80129a2:	21ff      	movs	r1, #255	; 0xff
 80129a4:	2000      	movs	r0, #0
 80129a6:	f7fe f955 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80129aa:	4603      	mov	r3, r0
 80129ac:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 80129ae:	22ff      	movs	r2, #255	; 0xff
 80129b0:	21ff      	movs	r1, #255	; 0xff
 80129b2:	20ff      	movs	r0, #255	; 0xff
 80129b4:	f7fe f94e 	bl	8010c54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80129b8:	4603      	mov	r3, r0
 80129ba:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 80129bc:	463b      	mov	r3, r7
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff ff19 	bl	80127f6 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 80129c4:	4b0b      	ldr	r3, [pc, #44]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d101      	bne.n	80129d0 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 80129d0:	4b08      	ldr	r3, [pc, #32]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d101      	bne.n	80129dc <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = green_color;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80129dc:	4b05      	ldr	r3, [pc, #20]	; (80129f4 <_ZL20getColorFromRevLimitv+0x80>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b02      	cmp	r3, #2
 80129e2:	d101      	bne.n	80129e8 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 80129e8:	683b      	ldr	r3, [r7, #0]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	20008658 	.word	0x20008658

080129f8 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 80129f8:	b590      	push	{r4, r7, lr}
 80129fa:	b085      	sub	sp, #20
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= 9000;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f242 3227 	movw	r2, #8999	; 0x2327
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	bfcc      	ite	gt
 8012a12:	2301      	movgt	r3, #1
 8012a14:	2300      	movle	r3, #0
 8012a16:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012a18:	7afb      	ldrb	r3, [r7, #11]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d012      	beq.n	8012a44 <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8012a1e:	4b7f      	ldr	r3, [pc, #508]	; (8012c1c <_ZN8MainView9updateValEPh+0x224>)
 8012a20:	2200      	movs	r2, #0
 8012a22:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012a2a:	f7ff ffa3 	bl	8012974 <_ZL20getColorFromRevLimitv>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	4619      	mov	r1, r3
 8012a32:	4620      	mov	r0, r4
 8012a34:	f7fd fdcc 	bl	80105d0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	3340      	adds	r3, #64	; 0x40
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f006 fa1f 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012a42:	e018      	b.n	8012a76 <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8012a44:	4b75      	ldr	r3, [pc, #468]	; (8012c1c <_ZN8MainView9updateValEPh+0x224>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	f083 0301 	eor.w	r3, r3, #1
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d011      	beq.n	8012a76 <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012a58:	f7ff ff7c 	bl	8012954 <_ZL13getBlackColorv>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4620      	mov	r0, r4
 8012a62:	f7fd fdb5 	bl	80105d0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	3340      	adds	r3, #64	; 0x40
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f006 fa08 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8012a70:	4b6a      	ldr	r3, [pc, #424]	; (8012c1c <_ZN8MainView9updateValEPh+0x224>)
 8012a72:	2201      	movs	r2, #1
 8012a74:	701a      	strb	r2, [r3, #0]
	}


	RPMProgressBar.setValue(values->rpm);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f603 0298 	addw	r2, r3, #2200	; 0x898
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4619      	mov	r1, r3
 8012a82:	4610      	mov	r0, r2
 8012a84:	f002 f9e8 	bl	8014e58 <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f006 f9f6 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f603 20e2 	addw	r0, r3, #2786	; 0xae2
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4a60      	ldr	r2, [pc, #384]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012aa0:	2105      	movs	r1, #5
 8012aa2:	f007 fe1b 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8012aac:	4618      	mov	r0, r3
 8012aae:	f006 f9e7 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f603 20f6 	addw	r0, r3, #2806	; 0xaf6
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	4a58      	ldr	r2, [pc, #352]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012abe:	2105      	movs	r1, #5
 8012ac0:	f007 fe0c 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8012aca:	4618      	mov	r0, r3
 8012acc:	f006 f9d8 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	4a51      	ldr	r2, [pc, #324]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012adc:	2105      	movs	r1, #5
 8012ade:	f007 fdfd 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f006 f9c9 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f603 209c 	addw	r0, r3, #2716	; 0xa9c
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	edd3 7a03 	vldr	s15, [r3, #12]
 8012afa:	eeb0 0a67 	vmov.f32	s0, s15
 8012afe:	4a49      	ldr	r2, [pc, #292]	; (8012c24 <_ZN8MainView9updateValEPh+0x22c>)
 8012b00:	2105      	movs	r1, #5
 8012b02:	f7ff fe86 	bl	8012812 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f006 f9b7 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f603 20a6 	addw	r0, r3, #2726	; 0xaa6
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8012b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8012b22:	4a40      	ldr	r2, [pc, #256]	; (8012c24 <_ZN8MainView9updateValEPh+0x22c>)
 8012b24:	2105      	movs	r1, #5
 8012b26:	f7ff fe74 	bl	8012812 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012b30:	4618      	mov	r0, r3
 8012b32:	f006 f9a5 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	695b      	ldr	r3, [r3, #20]
 8012b40:	4a37      	ldr	r2, [pc, #220]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012b42:	2105      	movs	r1, #5
 8012b44:	f007 fdca 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KMHValue.invalidate();
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f006 f996 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8012b60:	eeb0 0a67 	vmov.f32	s0, s15
 8012b64:	4a30      	ldr	r2, [pc, #192]	; (8012c28 <_ZN8MainView9updateValEPh+0x230>)
 8012b66:	2105      	movs	r1, #5
 8012b68:	f7ff fe53 	bl	8012812 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OILPressureValue.invalidate();
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8012b72:	4618      	mov	r0, r3
 8012b74:	f006 f984 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	699b      	ldr	r3, [r3, #24]
 8012b82:	4a27      	ldr	r2, [pc, #156]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012b84:	2105      	movs	r1, #5
 8012b86:	f007 fda9 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.invalidate();
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8012b90:	4618      	mov	r0, r3
 8012b92:	f006 f975 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f503 602b 	add.w	r0, r3, #2736	; 0xab0
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6a1b      	ldr	r3, [r3, #32]
 8012ba0:	4a1f      	ldr	r2, [pc, #124]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012ba2:	2105      	movs	r1, #5
 8012ba4:	f007 fd9a 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f006 f966 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f603 20ba 	addw	r0, r3, #2746	; 0xaba
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bbe:	4a18      	ldr	r2, [pc, #96]	; (8012c20 <_ZN8MainView9updateValEPh+0x228>)
 8012bc0:	2105      	movs	r1, #5
 8012bc2:	f007 fd8b 	bl	801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.invalidate();
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f006 f957 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f503 62d1 	add.w	r2, r3, #1672	; 0x688
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bdc:	4619      	mov	r1, r3
 8012bde:	4610      	mov	r0, r2
 8012be0:	f001 ffea 	bl	8014bb8 <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8012bea:	4618      	mov	r0, r3
 8012bec:	f006 f948 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8012c00:	4a08      	ldr	r2, [pc, #32]	; (8012c24 <_ZN8MainView9updateValEPh+0x22c>)
 8012c02:	2105      	movs	r1, #5
 8012c04:	f7ff fe05 	bl	8012812 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f006 f936 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012c14:	bf00      	nop
 8012c16:	3714      	adds	r7, #20
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd90      	pop	{r4, r7, pc}
 8012c1c:	2000865c 	.word	0x2000865c
 8012c20:	08025c50 	.word	0x08025c50
 8012c24:	08025c54 	.word	0x08025c54
 8012c28:	08025c5c 	.word	0x08025c5c

08012c2c <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	2130      	movs	r1, #48	; 0x30
 8012c3e:	2001      	movs	r0, #1
 8012c40:	f7f9 fdbb 	bl	800c7ba <xQueueGenericCreate>
 8012c44:	4602      	mov	r2, r0
 8012c46:	4b03      	ldr	r3, [pc, #12]	; (8012c54 <_ZN5ModelC1Ev+0x28>)
 8012c48:	601a      	str	r2, [r3, #0]
}
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	20008690 	.word	0x20008690

08012c58 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012c60:	4b0e      	ldr	r3, [pc, #56]	; (8012c9c <_ZN5Model4tickEv+0x44>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2200      	movs	r2, #0
 8012c66:	490e      	ldr	r1, [pc, #56]	; (8012ca0 <_ZN5Model4tickEv+0x48>)
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fa f837 	bl	800ccdc <xQueueReceive>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	bf0c      	ite	eq
 8012c74:	2301      	moveq	r3, #1
 8012c76:	2300      	movne	r3, #0
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d009      	beq.n	8012c92 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3308      	adds	r3, #8
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4904      	ldr	r1, [pc, #16]	; (8012ca0 <_ZN5Model4tickEv+0x48>)
 8012c8e:	4610      	mov	r0, r2
 8012c90:	4798      	blx	r3

		// something to update
	}
}
 8012c92:	bf00      	nop
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	20008690 	.word	0x20008690
 8012ca0:	20008660 	.word	0x20008660

08012ca4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
    {
 8012cac:	4a04      	ldr	r2, [pc, #16]	; (8012cc0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	601a      	str	r2, [r3, #0]
    }
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	08026350 	.word	0x08026350

08012cc4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
    }
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff ffe9 	bl	8012ca4 <_ZN8touchgfx15TouchControllerD1Ev>
 8012cd2:	2104      	movs	r1, #4
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f011 fc6e 	bl	80245b6 <_ZdlPvj>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012d04:	2300      	movs	r3, #0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3714      	adds	r7, #20
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
	...

08012d14 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	4a05      	ldr	r2, [pc, #20]	; (8012d34 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7ff ffbd 	bl	8012ca4 <_ZN8touchgfx15TouchControllerD1Ev>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3708      	adds	r7, #8
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	08026338 	.word	0x08026338

08012d38 <_ZN20STM32TouchControllerD0Ev>:
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7ff ffe7 	bl	8012d14 <_ZN20STM32TouchControllerD1Ev>
 8012d46:	2104      	movs	r1, #4
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f011 fc34 	bl	80245b6 <_ZdlPvj>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b083      	sub	sp, #12
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	4603      	mov	r3, r0
 8012d60:	71fb      	strb	r3, [r7, #7]

}
 8012d62:	bf00      	nop
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr

08012d6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012d6e:	b480      	push	{r7}
 8012d70:	b083      	sub	sp, #12
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	4603      	mov	r3, r0
 8012d76:	71fb      	strb	r3, [r7, #7]

}
 8012d78:	bf00      	nop
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr

08012d84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b083      	sub	sp, #12
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	71fb      	strb	r3, [r7, #7]

}
 8012d8e:	bf00      	nop
 8012d90:	370c      	adds	r7, #12
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
	...

08012d9c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
    {
 8012da4:	4a04      	ldr	r2, [pc, #16]	; (8012db8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	601a      	str	r2, [r3, #0]
    }
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr
 8012db8:	08027108 	.word	0x08027108

08012dbc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
    }
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7ff ffe9 	bl	8012d9c <_ZN8touchgfx3HALD1Ev>
 8012dca:	2178      	movs	r1, #120	; 0x78
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f011 fbf2 	bl	80245b6 <_ZdlPvj>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	460b      	mov	r3, r1
 8012de6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	78fa      	ldrb	r2, [r7, #3]
 8012dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2201      	movs	r2, #1
 8012df4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012df8:	bf00      	nop
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	685a      	ldr	r2, [r3, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4610      	mov	r0, r2
 8012e1a:	4798      	blx	r3
 8012e1c:	4603      	mov	r3, r0
    }
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3708      	adds	r7, #8
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}

08012e26 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b082      	sub	sp, #8
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f003 f91c 	bl	801606c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	3390      	adds	r3, #144	; 0x90
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	4798      	blx	r3
    }
 8012e40:	bf00      	nop
 8012e42:	3708      	adds	r7, #8
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012e52:	2300      	movs	r3, #0
    }
 8012e54:	4618      	mov	r0, r3
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr

08012e60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8012e60:	b590      	push	{r4, r7, lr}
 8012e62:	b08b      	sub	sp, #44	; 0x2c
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	460b      	mov	r3, r1
 8012e70:	80fb      	strh	r3, [r7, #6]
 8012e72:	4613      	mov	r3, r2
 8012e74:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8012e76:	f7fc fc8f 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	6813      	ldr	r3, [r2, #0]
 8012e7e:	3328      	adds	r3, #40	; 0x28
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4610      	mov	r0, r2
 8012e84:	4798      	blx	r3
 8012e86:	4603      	mov	r3, r0
 8012e88:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8012e8a:	8b7b      	ldrh	r3, [r7, #26]
 8012e8c:	4a3d      	ldr	r2, [pc, #244]	; (8012f84 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8012e8e:	8812      	ldrh	r2, [r2, #0]
 8012e90:	fb02 f303 	mul.w	r3, r2, r3
 8012e94:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8012ea2:	797b      	ldrb	r3, [r7, #5]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d005      	beq.n	8012eb4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	4413      	add	r3, r2
 8012eae:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8012eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb2:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012eb4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d005      	beq.n	8012ec8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec6:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012ec8:	88fb      	ldrh	r3, [r7, #6]
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	2b1f      	cmp	r3, #31
 8012ece:	d84d      	bhi.n	8012f6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012ed0:	a201      	add	r2, pc, #4	; (adr r2, 8012ed8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed6:	bf00      	nop
 8012ed8:	08012f59 	.word	0x08012f59
 8012edc:	08012f59 	.word	0x08012f59
 8012ee0:	08012f6d 	.word	0x08012f6d
 8012ee4:	08012f59 	.word	0x08012f59
 8012ee8:	08012f6d 	.word	0x08012f6d
 8012eec:	08012f6d 	.word	0x08012f6d
 8012ef0:	08012f6d 	.word	0x08012f6d
 8012ef4:	08012f59 	.word	0x08012f59
 8012ef8:	08012f6d 	.word	0x08012f6d
 8012efc:	08012f6d 	.word	0x08012f6d
 8012f00:	08012f6d 	.word	0x08012f6d
 8012f04:	08012f6d 	.word	0x08012f6d
 8012f08:	08012f6d 	.word	0x08012f6d
 8012f0c:	08012f6d 	.word	0x08012f6d
 8012f10:	08012f6d 	.word	0x08012f6d
 8012f14:	08012f59 	.word	0x08012f59
 8012f18:	08012f6d 	.word	0x08012f6d
 8012f1c:	08012f6d 	.word	0x08012f6d
 8012f20:	08012f6d 	.word	0x08012f6d
 8012f24:	08012f6d 	.word	0x08012f6d
 8012f28:	08012f6d 	.word	0x08012f6d
 8012f2c:	08012f6d 	.word	0x08012f6d
 8012f30:	08012f6d 	.word	0x08012f6d
 8012f34:	08012f59 	.word	0x08012f59
 8012f38:	08012f6d 	.word	0x08012f6d
 8012f3c:	08012f6d 	.word	0x08012f6d
 8012f40:	08012f6d 	.word	0x08012f6d
 8012f44:	08012f6d 	.word	0x08012f6d
 8012f48:	08012f6d 	.word	0x08012f6d
 8012f4c:	08012f6d 	.word	0x08012f6d
 8012f50:	08012f6d 	.word	0x08012f6d
 8012f54:	08012f59 	.word	0x08012f59
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	3374      	adds	r3, #116	; 0x74
 8012f5e:	681c      	ldr	r4, [r3, #0]
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	6a3a      	ldr	r2, [r7, #32]
 8012f64:	68b9      	ldr	r1, [r7, #8]
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	47a0      	blx	r4
            break;
 8012f6a:	e006      	b.n	8012f7a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8012f6c:	4b06      	ldr	r3, [pc, #24]	; (8012f88 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8012f6e:	4a07      	ldr	r2, [pc, #28]	; (8012f8c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8012f70:	f240 3125 	movw	r1, #805	; 0x325
 8012f74:	4806      	ldr	r0, [pc, #24]	; (8012f90 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8012f76:	f011 fb49 	bl	802460c <__assert_func>
            break;
        }
    }
 8012f7a:	bf00      	nop
 8012f7c:	372c      	adds	r7, #44	; 0x2c
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd90      	pop	{r4, r7, pc}
 8012f82:	bf00      	nop
 8012f84:	2000bc6c 	.word	0x2000bc6c
 8012f88:	08025c64 	.word	0x08025c64
 8012f8c:	08026464 	.word	0x08026464
 8012f90:	08025c84 	.word	0x08025c84

08012f94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	60f8      	str	r0, [r7, #12]
 8012f9c:	60b9      	str	r1, [r7, #8]
 8012f9e:	607a      	str	r2, [r7, #4]
 8012fa0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d106      	bne.n	8012fb6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012fa8:	4b11      	ldr	r3, [pc, #68]	; (8012ff0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012faa:	4a12      	ldr	r2, [pc, #72]	; (8012ff4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012fac:	f240 3137 	movw	r1, #823	; 0x337
 8012fb0:	4811      	ldr	r0, [pc, #68]	; (8012ff8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8012fb2:	f011 fb2b 	bl	802460c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	683a      	ldr	r2, [r7, #0]
 8012fc6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	bf14      	ite	ne
 8012fce:	2301      	movne	r3, #1
 8012fd0:	2300      	moveq	r3, #0
 8012fd2:	b2da      	uxtb	r2, r3
 8012fd4:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012fd6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	bf14      	ite	ne
 8012fde:	2301      	movne	r3, #1
 8012fe0:	2300      	moveq	r3, #0
 8012fe2:	b2da      	uxtb	r2, r3
 8012fe4:	4b06      	ldr	r3, [pc, #24]	; (8013000 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012fe6:	701a      	strb	r2, [r3, #0]
    }
 8012fe8:	bf00      	nop
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	08025cc8 	.word	0x08025cc8
 8012ff4:	08026414 	.word	0x08026414
 8012ff8:	08025c84 	.word	0x08025c84
 8012ffc:	2000bc6e 	.word	0x2000bc6e
 8013000:	2000bc6f 	.word	0x2000bc6f

08013004 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	460b      	mov	r3, r1
 801300e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013014:	2b00      	cmp	r3, #0
 8013016:	d004      	beq.n	8013022 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801301c:	887a      	ldrh	r2, [r7, #2]
 801301e:	4610      	mov	r0, r2
 8013020:	4798      	blx	r3
        }
    }
 8013022:	bf00      	nop
 8013024:	3708      	adds	r7, #8
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801302a:	b580      	push	{r7, lr}
 801302c:	b082      	sub	sp, #8
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	685a      	ldr	r2, [r3, #4]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	3318      	adds	r3, #24
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4610      	mov	r0, r2
 8013042:	4798      	blx	r3
 8013044:	4603      	mov	r3, r0
    }
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
	...

08013050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013064:	429a      	cmp	r2, r3
 8013066:	d017      	beq.n	8013098 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013068:	4b1a      	ldr	r3, [pc, #104]	; (80130d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d12a      	bne.n	80130c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013070:	4b19      	ldr	r3, [pc, #100]	; (80130d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013072:	881a      	ldrh	r2, [r3, #0]
 8013074:	4b19      	ldr	r3, [pc, #100]	; (80130dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013076:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013078:	4b19      	ldr	r3, [pc, #100]	; (80130e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801307a:	881a      	ldrh	r2, [r3, #0]
 801307c:	4b19      	ldr	r3, [pc, #100]	; (80130e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801307e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013080:	4b16      	ldr	r3, [pc, #88]	; (80130dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013082:	881a      	ldrh	r2, [r3, #0]
 8013084:	4b16      	ldr	r3, [pc, #88]	; (80130e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013086:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013088:	4b16      	ldr	r3, [pc, #88]	; (80130e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801308a:	881a      	ldrh	r2, [r3, #0]
 801308c:	4b12      	ldr	r3, [pc, #72]	; (80130d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801308e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013090:	4b10      	ldr	r3, [pc, #64]	; (80130d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013092:	2201      	movs	r2, #1
 8013094:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013096:	e016      	b.n	80130c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013098:	4b0e      	ldr	r3, [pc, #56]	; (80130d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d012      	beq.n	80130c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80130a0:	4b0f      	ldr	r3, [pc, #60]	; (80130e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80130a2:	881a      	ldrh	r2, [r3, #0]
 80130a4:	4b0d      	ldr	r3, [pc, #52]	; (80130dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80130a6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80130a8:	4b0b      	ldr	r3, [pc, #44]	; (80130d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80130aa:	881a      	ldrh	r2, [r3, #0]
 80130ac:	4b0d      	ldr	r3, [pc, #52]	; (80130e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80130ae:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80130b0:	4b0c      	ldr	r3, [pc, #48]	; (80130e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80130b2:	881a      	ldrh	r2, [r3, #0]
 80130b4:	4b0a      	ldr	r3, [pc, #40]	; (80130e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80130b6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80130b8:	4b08      	ldr	r3, [pc, #32]	; (80130dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80130ba:	881a      	ldrh	r2, [r3, #0]
 80130bc:	4b06      	ldr	r3, [pc, #24]	; (80130d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80130be:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80130c0:	4b04      	ldr	r3, [pc, #16]	; (80130d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80130c2:	2200      	movs	r2, #0
 80130c4:	701a      	strb	r2, [r3, #0]
    }
 80130c6:	bf00      	nop
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop
 80130d4:	2000bc68 	.word	0x2000bc68
 80130d8:	2000bc64 	.word	0x2000bc64
 80130dc:	2000bc6a 	.word	0x2000bc6a
 80130e0:	2000bc66 	.word	0x2000bc66
 80130e4:	2000bc6c 	.word	0x2000bc6c

080130e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f002 fa3c 	bl	8015570 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80130f8:	bf00      	nop
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	4a05      	ldr	r2, [pc, #20]	; (8013120 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff fe43 	bl	8012d9c <_ZN8touchgfx3HALD1Ev>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4618      	mov	r0, r3
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	0802663c 	.word	0x0802663c

08013124 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7ff ffe7 	bl	8013100 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013132:	2178      	movs	r1, #120	; 0x78
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f011 fa3e 	bl	80245b6 <_ZdlPvj>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	4618      	mov	r0, r3
 8013150:	f7ff ffca 	bl	80130e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013154:	bf00      	nop
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	4618      	mov	r0, r3
 8013168:	f001 fb0a 	bl	8014780 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801316c:	bf00      	nop
 801316e:	3708      	adds	r7, #8
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4618      	mov	r0, r3
 8013180:	f001 fb8a 	bl	8014898 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013184:	4603      	mov	r3, r0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b082      	sub	sp, #8
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
 8013196:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	4618      	mov	r0, r3
 801319e:	f001 fb89 	bl	80148b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80131a2:	bf00      	nop
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}

080131aa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80131aa:	b580      	push	{r7, lr}
 80131ac:	b082      	sub	sp, #8
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	6078      	str	r0, [r7, #4]
 80131b2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f001 fb91 	bl	80148e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b082      	sub	sp, #8
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f001 fb07 	bl	80147e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80131de:	b580      	push	{r7, lr}
 80131e0:	b082      	sub	sp, #8
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f001 fb0b 	bl	8014804 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b082      	sub	sp, #8
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	4618      	mov	r0, r3
 8013202:	f001 fb0d 	bl	8014820 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013206:	bf00      	nop
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}

0801320e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801320e:	b580      	push	{r7, lr}
 8013210:	b082      	sub	sp, #8
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4618      	mov	r0, r3
 801321a:	f001 fb0f 	bl	801483c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801321e:	bf00      	nop
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
	...

08013228 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	4a05      	ldr	r2, [pc, #20]	; (8013248 <_ZN11TouchGFXHALD1Ev+0x20>)
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff ff61 	bl	8013100 <_ZN20TouchGFXGeneratedHALD1Ev>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4618      	mov	r0, r3
 8013242:	3708      	adds	r7, #8
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	08026368 	.word	0x08026368

0801324c <_ZN11TouchGFXHALD0Ev>:
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7ff ffe7 	bl	8013228 <_ZN11TouchGFXHALD1Ev>
 801325a:	2178      	movs	r1, #120	; 0x78
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f011 f9aa 	bl	80245b6 <_ZdlPvj>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	4618      	mov	r0, r3
 8013266:	3708      	adds	r7, #8
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801326c:	b580      	push	{r7, lr}
 801326e:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013270:	2203      	movs	r2, #3
 8013272:	2100      	movs	r1, #0
 8013274:	2001      	movs	r0, #1
 8013276:	f7f9 faa0 	bl	800c7ba <xQueueGenericCreate>
 801327a:	4602      	mov	r2, r0
 801327c:	4b0b      	ldr	r3, [pc, #44]	; (80132ac <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801327e:	601a      	str	r2, [r3, #0]
 8013280:	4b0a      	ldr	r3, [pc, #40]	; (80132ac <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d006      	beq.n	8013296 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8013288:	4b08      	ldr	r3, [pc, #32]	; (80132ac <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801328a:	6818      	ldr	r0, [r3, #0]
 801328c:	2300      	movs	r3, #0
 801328e:	2200      	movs	r2, #0
 8013290:	2100      	movs	r1, #0
 8013292:	f7f9 faf3 	bl	800c87c <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8013296:	2200      	movs	r2, #0
 8013298:	2101      	movs	r1, #1
 801329a:	2001      	movs	r0, #1
 801329c:	f7f9 fa8d 	bl	800c7ba <xQueueGenericCreate>
 80132a0:	4602      	mov	r2, r0
 80132a2:	4b03      	ldr	r3, [pc, #12]	; (80132b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80132a4:	601a      	str	r2, [r3, #0]
}
 80132a6:	bf00      	nop
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	20008694 	.word	0x20008694
 80132b0:	20008698 	.word	0x20008698

080132b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80132b8:	4b04      	ldr	r3, [pc, #16]	; (80132cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f04f 31ff 	mov.w	r1, #4294967295
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7f9 fded 	bl	800cea0 <xQueueSemaphoreTake>
}
 80132c6:	bf00      	nop
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	20008694 	.word	0x20008694

080132d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80132d4:	4b04      	ldr	r3, [pc, #16]	; (80132e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80132d6:	6818      	ldr	r0, [r3, #0]
 80132d8:	2300      	movs	r3, #0
 80132da:	2200      	movs	r2, #0
 80132dc:	2100      	movs	r1, #0
 80132de:	f7f9 facd 	bl	800c87c <xQueueGenericSend>
}
 80132e2:	bf00      	nop
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	20008694 	.word	0x20008694

080132ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80132f0:	4b03      	ldr	r3, [pc, #12]	; (8013300 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2100      	movs	r1, #0
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7f9 fdd2 	bl	800cea0 <xQueueSemaphoreTake>
}
 80132fc:	bf00      	nop
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	20008694 	.word	0x20008694

08013304 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801330a:	2300      	movs	r3, #0
 801330c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801330e:	4b0b      	ldr	r3, [pc, #44]	; (801333c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	1d3a      	adds	r2, r7, #4
 8013314:	4611      	mov	r1, r2
 8013316:	4618      	mov	r0, r3
 8013318:	f7f9 fc4e 	bl	800cbb8 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d007      	beq.n	8013332 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013322:	4b07      	ldr	r3, [pc, #28]	; (8013340 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	f3bf 8f4f 	dsb	sy
 801332e:	f3bf 8f6f 	isb	sy
}
 8013332:	bf00      	nop
 8013334:	3708      	adds	r7, #8
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	20008694 	.word	0x20008694
 8013340:	e000ed04 	.word	0xe000ed04

08013344 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
    if (vsync_q)
 801334a:	4b0e      	ldr	r3, [pc, #56]	; (8013384 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d013      	beq.n	801337a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013352:	2300      	movs	r3, #0
 8013354:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8013356:	4b0b      	ldr	r3, [pc, #44]	; (8013384 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013358:	6818      	ldr	r0, [r3, #0]
 801335a:	1d3a      	adds	r2, r7, #4
 801335c:	2300      	movs	r3, #0
 801335e:	490a      	ldr	r1, [pc, #40]	; (8013388 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013360:	f7f9 fb8e 	bl	800ca80 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d007      	beq.n	801337a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801336a:	4b08      	ldr	r3, [pc, #32]	; (801338c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 801336c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013370:	601a      	str	r2, [r3, #0]
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	f3bf 8f6f 	isb	sy
    }
}
 801337a:	bf00      	nop
 801337c:	3708      	adds	r7, #8
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20008698 	.word	0x20008698
 8013388:	20000038 	.word	0x20000038
 801338c:	e000ed04 	.word	0xe000ed04

08013390 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013390:	b580      	push	{r7, lr}
 8013392:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013394:	4b08      	ldr	r3, [pc, #32]	; (80133b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2200      	movs	r2, #0
 801339a:	4908      	ldr	r1, [pc, #32]	; (80133bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801339c:	4618      	mov	r0, r3
 801339e:	f7f9 fc9d 	bl	800ccdc <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80133a2:	4b05      	ldr	r3, [pc, #20]	; (80133b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f04f 32ff 	mov.w	r2, #4294967295
 80133aa:	4904      	ldr	r1, [pc, #16]	; (80133bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f9 fc95 	bl	800ccdc <xQueueReceive>
}
 80133b2:	bf00      	nop
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	20008698 	.word	0x20008698
 80133bc:	20000038 	.word	0x20000038

080133c0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4603      	mov	r3, r0
 80133c8:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80133ca:	88fb      	ldrh	r3, [r7, #6]
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7fa f9c5 	bl	800d75c <vTaskDelay>
}
 80133d2:	bf00      	nop
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <__NVIC_EnableIRQ>:
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	db0d      	blt.n	801340a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80133ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	f003 021f 	and.w	r2, r3, #31
 80133f8:	4907      	ldr	r1, [pc, #28]	; (8013418 <__NVIC_EnableIRQ+0x3c>)
 80133fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133fe:	095b      	lsrs	r3, r3, #5
 8013400:	2001      	movs	r0, #1
 8013402:	fa00 f202 	lsl.w	r2, r0, r2
 8013406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801340a:	bf00      	nop
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	e000e100 	.word	0xe000e100

0801341c <__NVIC_DisableIRQ>:
{
 801341c:	b480      	push	{r7}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
 8013422:	4603      	mov	r3, r0
 8013424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801342a:	2b00      	cmp	r3, #0
 801342c:	db12      	blt.n	8013454 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013432:	b2db      	uxtb	r3, r3
 8013434:	f003 021f 	and.w	r2, r3, #31
 8013438:	4909      	ldr	r1, [pc, #36]	; (8013460 <__NVIC_DisableIRQ+0x44>)
 801343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801343e:	095b      	lsrs	r3, r3, #5
 8013440:	2001      	movs	r0, #1
 8013442:	fa00 f202 	lsl.w	r2, r0, r2
 8013446:	3320      	adds	r3, #32
 8013448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801344c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013450:	f3bf 8f6f 	isb	sy
}
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr
 8013460:	e000e100 	.word	0xe000e100

08013464 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
        return color;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
    }
 8013470:	4618      	mov	r0, r3
 8013472:	370c      	adds	r7, #12
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr

0801347c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	b29b      	uxth	r3, r3
    }
 801348a:	4618      	mov	r0, r3
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr
	...

08013498 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8013498:	b480      	push	{r7}
 801349a:	b083      	sub	sp, #12
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
    {
 80134a0:	4a04      	ldr	r2, [pc, #16]	; (80134b4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	601a      	str	r2, [r3, #0]
    }
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr
 80134b4:	08026510 	.word	0x08026510

080134b8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
    }
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f7ff ffe9 	bl	8013498 <_ZN8touchgfx9DMA_QueueD1Ev>
 80134c6:	2104      	movs	r1, #4
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f011 f874 	bl	80245b6 <_ZdlPvj>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	3344      	adds	r3, #68	; 0x44
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	4798      	blx	r3
    }
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80134fc:	2300      	movs	r3, #0
    }
 80134fe:	4618      	mov	r0, r3
 8013500:	370c      	adds	r7, #12
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
	...

0801350c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
    {
 8013514:	4a04      	ldr	r2, [pc, #16]	; (8013528 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	601a      	str	r2, [r3, #0]
    }
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	370c      	adds	r7, #12
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr
 8013528:	0802754c 	.word	0x0802754c

0801352c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
    }
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff ffe9 	bl	801350c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801353a:	210c      	movs	r1, #12
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f011 f83a 	bl	80245b6 <_ZdlPvj>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013556:	4a09      	ldr	r2, [pc, #36]	; (801357c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	601a      	str	r2, [r3, #0]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	683a      	ldr	r2, [r7, #0]
 8013560:	605a      	str	r2, [r3, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2200      	movs	r2, #0
 8013566:	721a      	strb	r2, [r3, #8]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	725a      	strb	r2, [r3, #9]
    {
    }
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr
 801357c:	0802754c 	.word	0x0802754c

08013580 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	685a      	ldr	r2, [r3, #4]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	3314      	adds	r3, #20
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4610      	mov	r0, r2
 8013598:	4798      	blx	r3
    }
 801359a:	bf00      	nop
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b082      	sub	sp, #8
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	3328      	adds	r3, #40	; 0x28
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4610      	mov	r0, r2
 80135b6:	4798      	blx	r3
    }
 80135b8:	bf00      	nop
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	430a      	orrs	r2, r1
 80135e0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135e8:	f023 0107 	bic.w	r1, r3, #7
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	430a      	orrs	r2, r1
 80135f4:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80135fc:	4b06      	ldr	r3, [pc, #24]	; (8013618 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80135fe:	4013      	ands	r3, r2
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	6812      	ldr	r2, [r2, #0]
 8013606:	430b      	orrs	r3, r1
 8013608:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801360a:	2300      	movs	r3, #0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3714      	adds	r7, #20
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr
 8013618:	ffffc000 	.word	0xffffc000

0801361c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013624:	f7fc f8ac 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 8013628:	4603      	mov	r3, r0
 801362a:	4618      	mov	r0, r3
 801362c:	f7ff ffa8 	bl	8013580 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013630:	bf00      	nop
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
    assert(0);
 8013640:	4b02      	ldr	r3, [pc, #8]	; (801364c <DMA2D_XferErrorCallback+0x14>)
 8013642:	4a03      	ldr	r2, [pc, #12]	; (8013650 <DMA2D_XferErrorCallback+0x18>)
 8013644:	213e      	movs	r1, #62	; 0x3e
 8013646:	4803      	ldr	r0, [pc, #12]	; (8013654 <DMA2D_XferErrorCallback+0x1c>)
 8013648:	f010 ffe0 	bl	802460c <__assert_func>
 801364c:	08025d00 	.word	0x08025d00
 8013650:	0802652c 	.word	0x0802652c
 8013654:	08025d04 	.word	0x08025d04

08013658 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	3318      	adds	r3, #24
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff f8c6 	bl	80127f6 <_ZN8touchgfx9colortypeC1Ev>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4618      	mov	r0, r3
 801366e:	3708      	adds	r7, #8
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013674:	b5b0      	push	{r4, r5, r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	330c      	adds	r3, #12
 8013682:	4619      	mov	r1, r3
 8013684:	4610      	mov	r0, r2
 8013686:	f7ff ff61 	bl	801354c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801368a:	4a0e      	ldr	r2, [pc, #56]	; (80136c4 <_ZN10STM32F7DMAC1Ev+0x50>)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f103 000c 	add.w	r0, r3, #12
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3320      	adds	r3, #32
 801369a:	2260      	movs	r2, #96	; 0x60
 801369c:	4619      	mov	r1, r3
 801369e:	f002 fe0b 	bl	80162b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3320      	adds	r3, #32
 80136a6:	245f      	movs	r4, #95	; 0x5f
 80136a8:	461d      	mov	r5, r3
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	db05      	blt.n	80136ba <_ZN10STM32F7DMAC1Ev+0x46>
 80136ae:	4628      	mov	r0, r5
 80136b0:	f7ff ffd2 	bl	8013658 <_ZN8touchgfx6BlitOpC1Ev>
 80136b4:	3520      	adds	r5, #32
 80136b6:	3c01      	subs	r4, #1
 80136b8:	e7f7      	b.n	80136aa <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bdb0      	pop	{r4, r5, r7, pc}
 80136c4:	080264c0 	.word	0x080264c0

080136c8 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	4a0b      	ldr	r2, [pc, #44]	; (8013700 <_ZN10STM32F7DMAD1Ev+0x38>)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80136d6:	480b      	ldr	r0, [pc, #44]	; (8013704 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80136d8:	f7f1 fc30 	bl	8004f3c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80136dc:	205a      	movs	r0, #90	; 0x5a
 80136de:	f7ff fe9d 	bl	801341c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	330c      	adds	r3, #12
 80136e6:	4618      	mov	r0, r3
 80136e8:	f000 faa0 	bl	8013c2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7ff ff0c 	bl	801350c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	080264c0 	.word	0x080264c0
 8013704:	2000c4f4 	.word	0x2000c4f4

08013708 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
}
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7ff ffd9 	bl	80136c8 <_ZN10STM32F7DMAD1Ev>
 8013716:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f010 ff4b 	bl	80245b6 <_ZdlPvj>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	4618      	mov	r0, r3
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
	...

0801372c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013734:	4b09      	ldr	r3, [pc, #36]	; (801375c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013736:	4a0a      	ldr	r2, [pc, #40]	; (8013760 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013738:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801373a:	4808      	ldr	r0, [pc, #32]	; (801375c <_ZN10STM32F7DMA10initializeEv+0x30>)
 801373c:	f7f1 fbb4 	bl	8004ea8 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013740:	4b06      	ldr	r3, [pc, #24]	; (801375c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013742:	4a08      	ldr	r2, [pc, #32]	; (8013764 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013744:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013746:	4b05      	ldr	r3, [pc, #20]	; (801375c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013748:	4a07      	ldr	r2, [pc, #28]	; (8013768 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801374a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801374c:	205a      	movs	r0, #90	; 0x5a
 801374e:	f7ff fe45 	bl	80133dc <__NVIC_EnableIRQ>
}
 8013752:	bf00      	nop
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	2000c4f4 	.word	0x2000c4f4
 8013760:	4002b000 	.word	0x4002b000
 8013764:	0801361d 	.word	0x0801361d
 8013768:	08013639 	.word	0x08013639

0801376c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013774:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013778:	4618      	mov	r0, r3
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013784:	b590      	push	{r4, r7, lr}
 8013786:	b08d      	sub	sp, #52	; 0x34
 8013788:	af02      	add	r7, sp, #8
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801378e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013792:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013794:	2300      	movs	r3, #0
 8013796:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801379c:	2b20      	cmp	r3, #32
 801379e:	d007      	beq.n	80137b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	2b40      	cmp	r3, #64	; 0x40
 80137a6:	d003      	beq.n	80137b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b04      	cmp	r3, #4
 80137ae:	d101      	bne.n	80137b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80137b0:	2301      	movs	r3, #1
 80137b2:	e000      	b.n	80137b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80137b4:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80137b6:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80137bc:	2b80      	cmp	r3, #128	; 0x80
 80137be:	d004      	beq.n	80137ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137c8:	d101      	bne.n	80137ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80137ca:	2301      	movs	r3, #1
 80137cc:	e000      	b.n	80137d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80137ce:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80137d0:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80137d2:	f7fb ffe1 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 80137d6:	4602      	mov	r2, r0
 80137d8:	6813      	ldr	r3, [r2, #0]
 80137da:	3320      	adds	r3, #32
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4610      	mov	r0, r2
 80137e0:	4798      	blx	r3
 80137e2:	4603      	mov	r3, r0
 80137e4:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b40      	cmp	r3, #64	; 0x40
 80137ec:	d01d      	beq.n	801382a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80137ee:	2b40      	cmp	r3, #64	; 0x40
 80137f0:	d804      	bhi.n	80137fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80137f2:	2b04      	cmp	r3, #4
 80137f4:	d00e      	beq.n	8013814 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80137f6:	2b20      	cmp	r3, #32
 80137f8:	d017      	beq.n	801382a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80137fa:	e019      	b.n	8013830 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80137fc:	2b80      	cmp	r3, #128	; 0x80
 80137fe:	d003      	beq.n	8013808 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013804:	d003      	beq.n	801380e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013806:	e013      	b.n	8013830 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013808:	230a      	movs	r3, #10
 801380a:	623b      	str	r3, [r7, #32]
        break;
 801380c:	e01a      	b.n	8013844 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801380e:	2309      	movs	r3, #9
 8013810:	623b      	str	r3, [r7, #32]
        break;
 8013812:	e017      	b.n	8013844 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013818:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801381a:	7f7b      	ldrb	r3, [r7, #29]
 801381c:	2b10      	cmp	r3, #16
 801381e:	d101      	bne.n	8013824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013820:	2302      	movs	r3, #2
 8013822:	e000      	b.n	8013826 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013824:	2301      	movs	r3, #1
 8013826:	623b      	str	r3, [r7, #32]
        break;
 8013828:	e00c      	b.n	8013844 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801382a:	2300      	movs	r3, #0
 801382c:	623b      	str	r3, [r7, #32]
        break;
 801382e:	e009      	b.n	8013844 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013830:	2300      	movs	r3, #0
 8013832:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013834:	7f7b      	ldrb	r3, [r7, #29]
 8013836:	2b10      	cmp	r3, #16
 8013838:	d101      	bne.n	801383e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801383a:	2302      	movs	r3, #2
 801383c:	e000      	b.n	8013840 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801383e:	2301      	movs	r3, #1
 8013840:	623b      	str	r3, [r7, #32]
        break;
 8013842:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013844:	4a76      	ldr	r2, [pc, #472]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801384a:	7f7b      	ldrb	r3, [r7, #29]
 801384c:	2b10      	cmp	r3, #16
 801384e:	d101      	bne.n	8013854 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013850:	2302      	movs	r3, #2
 8013852:	e000      	b.n	8013856 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013854:	2301      	movs	r3, #1
 8013856:	4a72      	ldr	r2, [pc, #456]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013858:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	8adb      	ldrh	r3, [r3, #22]
 801385e:	461a      	mov	r2, r3
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	8a1b      	ldrh	r3, [r3, #16]
 8013864:	1ad3      	subs	r3, r2, r3
 8013866:	461a      	mov	r2, r3
 8013868:	4b6d      	ldr	r3, [pc, #436]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801386a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801386c:	7f7b      	ldrb	r3, [r7, #29]
 801386e:	2b10      	cmp	r3, #16
 8013870:	d101      	bne.n	8013876 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013872:	2202      	movs	r2, #2
 8013874:	e000      	b.n	8013878 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8013876:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	8adb      	ldrh	r3, [r3, #22]
 801387c:	4619      	mov	r1, r3
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	8a1b      	ldrh	r3, [r3, #16]
 8013882:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013886:	4866      	ldr	r0, [pc, #408]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013888:	f7ff fe9a 	bl	80135c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801388c:	4a64      	ldr	r2, [pc, #400]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	8a9b      	ldrh	r3, [r3, #20]
 8013896:	461a      	mov	r2, r3
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	8a1b      	ldrh	r3, [r3, #16]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	461a      	mov	r2, r3
 80138a0:	4b5f      	ldr	r3, [pc, #380]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80138a4:	7ffb      	ldrb	r3, [r7, #31]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d103      	bne.n	80138b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80138aa:	7fbb      	ldrb	r3, [r7, #30]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f000 8082 	beq.w	80139b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	7f1b      	ldrb	r3, [r3, #28]
 80138b6:	2bff      	cmp	r3, #255	; 0xff
 80138b8:	d008      	beq.n	80138cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80138ba:	4b59      	ldr	r3, [pc, #356]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138bc:	2202      	movs	r2, #2
 80138be:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	7f1b      	ldrb	r3, [r3, #28]
 80138c4:	461a      	mov	r2, r3
 80138c6:	4b56      	ldr	r3, [pc, #344]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138c8:	635a      	str	r2, [r3, #52]	; 0x34
 80138ca:	e002      	b.n	80138d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80138cc:	4b54      	ldr	r3, [pc, #336]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80138d2:	7fbb      	ldrb	r3, [r7, #30]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d059      	beq.n	801398c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80138d8:	7f7b      	ldrb	r3, [r7, #29]
 80138da:	2b10      	cmp	r3, #16
 80138dc:	d14a      	bne.n	8013974 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	3318      	adds	r3, #24
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7ff fdca 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 80138e8:	4603      	mov	r3, r0
 80138ea:	12db      	asrs	r3, r3, #11
 80138ec:	f003 021f 	and.w	r2, r3, #31
 80138f0:	4613      	mov	r3, r2
 80138f2:	021b      	lsls	r3, r3, #8
 80138f4:	1a9b      	subs	r3, r3, r2
 80138f6:	4a4b      	ldr	r2, [pc, #300]	; (8013a24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80138f8:	fb82 1203 	smull	r1, r2, r2, r3
 80138fc:	441a      	add	r2, r3
 80138fe:	1112      	asrs	r2, r2, #4
 8013900:	17db      	asrs	r3, r3, #31
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	3318      	adds	r3, #24
 801390a:	4618      	mov	r0, r3
 801390c:	f7ff fdb6 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 8013910:	4603      	mov	r3, r0
 8013912:	115b      	asrs	r3, r3, #5
 8013914:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013918:	4613      	mov	r3, r2
 801391a:	021b      	lsls	r3, r3, #8
 801391c:	1a9b      	subs	r3, r3, r2
 801391e:	4a42      	ldr	r2, [pc, #264]	; (8013a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013920:	fb82 1203 	smull	r1, r2, r2, r3
 8013924:	441a      	add	r2, r3
 8013926:	1152      	asrs	r2, r2, #5
 8013928:	17db      	asrs	r3, r3, #31
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	3318      	adds	r3, #24
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff fda2 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 8013938:	4603      	mov	r3, r0
 801393a:	f003 021f 	and.w	r2, r3, #31
 801393e:	4613      	mov	r3, r2
 8013940:	021b      	lsls	r3, r3, #8
 8013942:	1a9b      	subs	r3, r3, r2
 8013944:	4a37      	ldr	r2, [pc, #220]	; (8013a24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013946:	fb82 1203 	smull	r1, r2, r2, r3
 801394a:	441a      	add	r2, r3
 801394c:	1112      	asrs	r2, r2, #4
 801394e:	17db      	asrs	r3, r3, #31
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	7f1b      	ldrb	r3, [r3, #28]
 8013958:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	061a      	lsls	r2, r3, #24
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	041b      	lsls	r3, r3, #16
 8013962:	431a      	orrs	r2, r3
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	021b      	lsls	r3, r3, #8
 8013968:	431a      	orrs	r2, r3
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	4313      	orrs	r3, r2
 801396e:	4a2c      	ldr	r2, [pc, #176]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013970:	6353      	str	r3, [r2, #52]	; 0x34
 8013972:	e00b      	b.n	801398c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	3318      	adds	r3, #24
 8013978:	4618      	mov	r0, r3
 801397a:	f7ff fd73 	bl	8013464 <_ZNK8touchgfx9colortype10getColor32Ev>
 801397e:	4602      	mov	r2, r0
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	7f1b      	ldrb	r3, [r3, #28]
 8013984:	061b      	lsls	r3, r3, #24
 8013986:	4313      	orrs	r3, r2
 8013988:	4a25      	ldr	r2, [pc, #148]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801398a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	8adb      	ldrh	r3, [r3, #22]
 8013990:	461a      	mov	r2, r3
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	8a1b      	ldrh	r3, [r3, #16]
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	461a      	mov	r2, r3
 801399a:	4b21      	ldr	r3, [pc, #132]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801399c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801399e:	7f7b      	ldrb	r3, [r7, #29]
 80139a0:	2b10      	cmp	r3, #16
 80139a2:	d101      	bne.n	80139a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80139a4:	2302      	movs	r3, #2
 80139a6:	e000      	b.n	80139aa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80139a8:	2301      	movs	r3, #1
 80139aa:	4a1d      	ldr	r2, [pc, #116]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139ac:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80139ae:	2100      	movs	r1, #0
 80139b0:	481b      	ldr	r0, [pc, #108]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139b2:	f7f1 fd43 	bl	800543c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80139b6:	2101      	movs	r1, #1
 80139b8:	4819      	ldr	r0, [pc, #100]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139ba:	f7f1 fd3f 	bl	800543c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80139be:	7ffb      	ldrb	r3, [r7, #31]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d102      	bne.n	80139ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80139c4:	7fbb      	ldrb	r3, [r7, #30]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d015      	beq.n	80139f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139ce:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139d4:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139da:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139e0:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80139e6:	9301      	str	r3, [sp, #4]
 80139e8:	9200      	str	r2, [sp, #0]
 80139ea:	4623      	mov	r3, r4
 80139ec:	4602      	mov	r2, r0
 80139ee:	480c      	ldr	r0, [pc, #48]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139f0:	f7f1 fb47 	bl	8005082 <HAL_DMA2D_BlendingStart_IT>
 80139f4:	e00f      	b.n	8013a16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80139fa:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013a00:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013a06:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	4603      	mov	r3, r0
 8013a10:	4803      	ldr	r0, [pc, #12]	; (8013a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013a12:	f7f1 fb03 	bl	800501c <HAL_DMA2D_Start_IT>
    }
}
 8013a16:	bf00      	nop
 8013a18:	372c      	adds	r7, #44	; 0x2c
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd90      	pop	{r4, r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	2000c4f4 	.word	0x2000c4f4
 8013a24:	84210843 	.word	0x84210843
 8013a28:	82082083 	.word	0x82082083

08013a2c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013a2c:	b590      	push	{r4, r7, lr}
 8013a2e:	b08d      	sub	sp, #52	; 0x34
 8013a30:	af02      	add	r7, sp, #8
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013a36:	f7fb feaf 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	6813      	ldr	r3, [r2, #0]
 8013a3e:	3320      	adds	r3, #32
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	4610      	mov	r0, r2
 8013a44:	4798      	blx	r3
 8013a46:	4603      	mov	r3, r0
 8013a48:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013a4a:	7ffb      	ldrb	r3, [r7, #31]
 8013a4c:	2b10      	cmp	r3, #16
 8013a4e:	d101      	bne.n	8013a54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8013a50:	2302      	movs	r3, #2
 8013a52:	e000      	b.n	8013a56 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013a54:	2301      	movs	r3, #1
 8013a56:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013a5c:	7ffb      	ldrb	r3, [r7, #31]
 8013a5e:	2b10      	cmp	r3, #16
 8013a60:	d149      	bne.n	8013af6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	3318      	adds	r3, #24
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fd08 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	12db      	asrs	r3, r3, #11
 8013a70:	f003 021f 	and.w	r2, r3, #31
 8013a74:	4613      	mov	r3, r2
 8013a76:	021b      	lsls	r3, r3, #8
 8013a78:	1a9b      	subs	r3, r3, r2
 8013a7a:	4a69      	ldr	r2, [pc, #420]	; (8013c20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8013a80:	441a      	add	r2, r3
 8013a82:	1112      	asrs	r2, r2, #4
 8013a84:	17db      	asrs	r3, r3, #31
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	3318      	adds	r3, #24
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff fcf4 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 8013a94:	4603      	mov	r3, r0
 8013a96:	115b      	asrs	r3, r3, #5
 8013a98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	021b      	lsls	r3, r3, #8
 8013aa0:	1a9b      	subs	r3, r3, r2
 8013aa2:	4a60      	ldr	r2, [pc, #384]	; (8013c24 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8013aa8:	441a      	add	r2, r3
 8013aaa:	1152      	asrs	r2, r2, #5
 8013aac:	17db      	asrs	r3, r3, #31
 8013aae:	1ad3      	subs	r3, r2, r3
 8013ab0:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	3318      	adds	r3, #24
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff fce0 	bl	801347c <_ZNK8touchgfx9colortypecvtEv>
 8013abc:	4603      	mov	r3, r0
 8013abe:	f003 021f 	and.w	r2, r3, #31
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	021b      	lsls	r3, r3, #8
 8013ac6:	1a9b      	subs	r3, r3, r2
 8013ac8:	4a55      	ldr	r2, [pc, #340]	; (8013c20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013aca:	fb82 1203 	smull	r1, r2, r2, r3
 8013ace:	441a      	add	r2, r3
 8013ad0:	1112      	asrs	r2, r2, #4
 8013ad2:	17db      	asrs	r3, r3, #31
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	7f1b      	ldrb	r3, [r3, #28]
 8013adc:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	061a      	lsls	r2, r3, #24
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	041b      	lsls	r3, r3, #16
 8013ae6:	431a      	orrs	r2, r3
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	021b      	lsls	r3, r3, #8
 8013aec:	4313      	orrs	r3, r2
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	4313      	orrs	r3, r2
 8013af2:	623b      	str	r3, [r7, #32]
 8013af4:	e00b      	b.n	8013b0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	7f1b      	ldrb	r3, [r3, #28]
 8013afa:	061b      	lsls	r3, r3, #24
 8013afc:	461c      	mov	r4, r3
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	3318      	adds	r3, #24
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff fcae 	bl	8013464 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	4323      	orrs	r3, r4
 8013b0c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2b08      	cmp	r3, #8
 8013b14:	d103      	bne.n	8013b1e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013b1c:	e003      	b.n	8013b26 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8013b1e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013b24:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013b26:	4a40      	ldr	r2, [pc, #256]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013b2c:	7ffb      	ldrb	r3, [r7, #31]
 8013b2e:	2b10      	cmp	r3, #16
 8013b30:	d101      	bne.n	8013b36 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8013b32:	2302      	movs	r3, #2
 8013b34:	e000      	b.n	8013b38 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013b36:	2301      	movs	r3, #1
 8013b38:	4a3b      	ldr	r2, [pc, #236]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b3a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	8adb      	ldrh	r3, [r3, #22]
 8013b40:	461a      	mov	r2, r3
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	8a1b      	ldrh	r3, [r3, #16]
 8013b46:	1ad3      	subs	r3, r2, r3
 8013b48:	461a      	mov	r2, r3
 8013b4a:	4b37      	ldr	r3, [pc, #220]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b4c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013b4e:	7ffb      	ldrb	r3, [r7, #31]
 8013b50:	2b10      	cmp	r3, #16
 8013b52:	d101      	bne.n	8013b58 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013b54:	2202      	movs	r2, #2
 8013b56:	e000      	b.n	8013b5a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013b58:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	8adb      	ldrh	r3, [r3, #22]
 8013b5e:	4619      	mov	r1, r3
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	8a1b      	ldrh	r3, [r3, #16]
 8013b64:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b68:	482f      	ldr	r0, [pc, #188]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b6a:	f7ff fd29 	bl	80135c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013b74:	d11e      	bne.n	8013bb4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8013b76:	4b2c      	ldr	r3, [pc, #176]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b78:	2201      	movs	r2, #1
 8013b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8013b7c:	4a2a      	ldr	r2, [pc, #168]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b7e:	6a3b      	ldr	r3, [r7, #32]
 8013b80:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8013b82:	4b29      	ldr	r3, [pc, #164]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b84:	2209      	movs	r2, #9
 8013b86:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	8adb      	ldrh	r3, [r3, #22]
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	8a1b      	ldrh	r3, [r3, #16]
 8013b92:	1ad3      	subs	r3, r2, r3
 8013b94:	461a      	mov	r2, r3
 8013b96:	4b24      	ldr	r3, [pc, #144]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013b98:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b9a:	7ffb      	ldrb	r3, [r7, #31]
 8013b9c:	2b10      	cmp	r3, #16
 8013b9e:	d101      	bne.n	8013ba4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8013ba0:	2302      	movs	r3, #2
 8013ba2:	e000      	b.n	8013ba6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	4a20      	ldr	r2, [pc, #128]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ba8:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013baa:	2100      	movs	r1, #0
 8013bac:	481e      	ldr	r0, [pc, #120]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bae:	f7f1 fc45 	bl	800543c <HAL_DMA2D_ConfigLayer>
 8013bb2:	e005      	b.n	8013bc0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013bb4:	4a1c      	ldr	r2, [pc, #112]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013bba:	4b1b      	ldr	r3, [pc, #108]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013bc0:	2101      	movs	r1, #1
 8013bc2:	4819      	ldr	r0, [pc, #100]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bc4:	f7f1 fc3a 	bl	800543c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013bce:	d115      	bne.n	8013bfc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bd4:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bda:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013be0:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013be6:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013bec:	9301      	str	r3, [sp, #4]
 8013bee:	9200      	str	r2, [sp, #0]
 8013bf0:	4623      	mov	r3, r4
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	480c      	ldr	r0, [pc, #48]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013bf6:	f7f1 fa44 	bl	8005082 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013bfa:	e00d      	b.n	8013c18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	68db      	ldr	r3, [r3, #12]
 8013c00:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013c06:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	6a39      	ldr	r1, [r7, #32]
 8013c12:	4805      	ldr	r0, [pc, #20]	; (8013c28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c14:	f7f1 fa02 	bl	800501c <HAL_DMA2D_Start_IT>
}
 8013c18:	bf00      	nop
 8013c1a:	372c      	adds	r7, #44	; 0x2c
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd90      	pop	{r4, r7, pc}
 8013c20:	84210843 	.word	0x84210843
 8013c24:	82082083 	.word	0x82082083
 8013c28:	2000c4f4 	.word	0x2000c4f4

08013c2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	4a05      	ldr	r2, [pc, #20]	; (8013c4c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	601a      	str	r2, [r3, #0]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7ff fc2b 	bl	8013498 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	4618      	mov	r0, r3
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	0802759c 	.word	0x0802759c

08013c50 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ff ffe7 	bl	8013c2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013c5e:	2114      	movs	r1, #20
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f010 fca8 	bl	80245b6 <_ZdlPvj>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
        texts = t;
 8013c78:	4a04      	ldr	r2, [pc, #16]	; (8013c8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6013      	str	r3, [r2, #0]
    }
 8013c7e:	bf00      	nop
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	2000bd0c 	.word	0x2000bd0c

08013c90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013c90:	b480      	push	{r7}
 8013c92:	b085      	sub	sp, #20
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	60f8      	str	r0, [r7, #12]
 8013c98:	60b9      	str	r1, [r7, #8]
 8013c9a:	607a      	str	r2, [r7, #4]
 8013c9c:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013c9e:	4a0b      	ldr	r2, [pc, #44]	; (8013ccc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	601a      	str	r2, [r3, #0]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	605a      	str	r2, [r3, #4]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	609a      	str	r2, [r3, #8]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	683a      	ldr	r2, [r7, #0]
 8013cb4:	60da      	str	r2, [r3, #12]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	69ba      	ldr	r2, [r7, #24]
 8013cba:	611a      	str	r2, [r3, #16]
    {
    }
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	0802662c 	.word	0x0802662c

08013cd0 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
    {
 8013cd8:	4a04      	ldr	r2, [pc, #16]	; (8013cec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	601a      	str	r2, [r3, #0]
    }
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	0802662c 	.word	0x0802662c

08013cf0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
    }
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7ff ffe9 	bl	8013cd0 <_ZN8touchgfx7MVPHeapD1Ev>
 8013cfe:	2114      	movs	r1, #20
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f010 fc58 	bl	80245b6 <_ZdlPvj>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
    {
 8013d18:	4a04      	ldr	r2, [pc, #16]	; (8013d2c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	601a      	str	r2, [r3, #0]
    }
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4618      	mov	r0, r3
 8013d22:	370c      	adds	r7, #12
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr
 8013d2c:	08027e80 	.word	0x08027e80

08013d30 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
    }
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7ff ffe9 	bl	8013d10 <_ZN8touchgfx3LCDD1Ev>
 8013d3e:	2108      	movs	r1, #8
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f010 fc38 	bl	80245b6 <_ZdlPvj>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8013d50:	b480      	push	{r7}
 8013d52:	b083      	sub	sp, #12
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	801a      	strh	r2, [r3, #0]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	805a      	strh	r2, [r3, #2]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	809a      	strh	r2, [r3, #4]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	80da      	strh	r2, [r3, #6]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2200      	movs	r2, #0
 8013d74:	811a      	strh	r2, [r3, #8]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	815a      	strh	r2, [r3, #10]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	819a      	strh	r2, [r3, #12]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2200      	movs	r2, #0
 8013d86:	739a      	strb	r2, [r3, #14]
        {
        }
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7ff ffd5 	bl	8013d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2200      	movs	r2, #0
 8013daa:	611a      	str	r2, [r3, #16]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2200      	movs	r2, #0
 8013db0:	829a      	strh	r2, [r3, #20]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4618      	mov	r0, r3
 8013db6:	3708      	adds	r7, #8
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	60f8      	str	r0, [r7, #12]
 8013dc4:	60b9      	str	r1, [r7, #8]
 8013dc6:	607a      	str	r2, [r7, #4]
 8013dc8:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013dca:	4a44      	ldr	r2, [pc, #272]	; (8013edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	601a      	str	r2, [r3, #0]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	605a      	str	r2, [r3, #4]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	687a      	ldr	r2, [r7, #4]
 8013dda:	609a      	str	r2, [r3, #8]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	683a      	ldr	r2, [r7, #0]
 8013de0:	60da      	str	r2, [r3, #12]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2200      	movs	r2, #0
 8013de6:	611a      	str	r2, [r3, #16]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2200      	movs	r2, #0
 8013dec:	615a      	str	r2, [r3, #20]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2200      	movs	r2, #0
 8013df2:	619a      	str	r2, [r3, #24]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	331c      	adds	r3, #28
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff ffcc 	bl	8013d96 <_ZN8touchgfx8GesturesC1Ev>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2200      	movs	r2, #0
 8013e02:	639a      	str	r2, [r3, #56]	; 0x38
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2200      	movs	r2, #0
 8013e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2200      	movs	r2, #0
 8013e14:	645a      	str	r2, [r3, #68]	; 0x44
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2201      	movs	r2, #1
 8013e22:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2201      	movs	r2, #1
 8013e2a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2200      	movs	r2, #0
 8013e32:	64da      	str	r2, [r3, #76]	; 0x4c
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	3350      	adds	r3, #80	; 0x50
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7fc f8dc 	bl	800fff6 <_ZN8touchgfx4RectC1Ev>
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	2201      	movs	r2, #1
 8013e42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2201      	movs	r2, #1
 8013e5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2200      	movs	r2, #0
 8013e62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2200      	movs	r2, #0
 8013e72:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	671a      	str	r2, [r3, #112]	; 0x70
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8013e94:	4a12      	ldr	r2, [pc, #72]	; (8013ee0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013e9a:	4a12      	ldr	r2, [pc, #72]	; (8013ee4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013e9c:	8b3b      	ldrh	r3, [r7, #24]
 8013e9e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013ea0:	4a11      	ldr	r2, [pc, #68]	; (8013ee8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013ea2:	8bbb      	ldrh	r3, [r7, #28]
 8013ea4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013ea6:	4b11      	ldr	r3, [pc, #68]	; (8013eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013eac:	4b0d      	ldr	r3, [pc, #52]	; (8013ee4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013eae:	881a      	ldrh	r2, [r3, #0]
 8013eb0:	4b0f      	ldr	r3, [pc, #60]	; (8013ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8013eb2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013eb4:	4b0c      	ldr	r3, [pc, #48]	; (8013ee8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013eb6:	881a      	ldrh	r2, [r3, #0]
 8013eb8:	4b0e      	ldr	r3, [pc, #56]	; (8013ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013eba:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013ebc:	8b3a      	ldrh	r2, [r7, #24]
 8013ebe:	8bbb      	ldrh	r3, [r7, #28]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d301      	bcc.n	8013ec8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	e000      	b.n	8013eca <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013ec8:	2201      	movs	r2, #1
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3710      	adds	r7, #16
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	08027108 	.word	0x08027108
 8013ee0:	2000bc70 	.word	0x2000bc70
 8013ee4:	2000bc64 	.word	0x2000bc64
 8013ee8:	2000bc66 	.word	0x2000bc66
 8013eec:	2000bc68 	.word	0x2000bc68
 8013ef0:	2000bc6a 	.word	0x2000bc6a
 8013ef4:	2000bc6c 	.word	0x2000bc6c

08013ef8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fb fe6b 	bl	800fbe0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8013f0a:	bf00      	nop
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
	...

08013f14 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b086      	sub	sp, #24
 8013f18:	af02      	add	r7, sp, #8
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
 8013f20:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	9300      	str	r3, [sp, #0]
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	68b9      	ldr	r1, [r7, #8]
 8013f2e:	f7ff feaf 	bl	8013c90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013f32:	4a04      	ldr	r2, [pc, #16]	; (8013f44 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	601a      	str	r2, [r3, #0]
    {

    }
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3710      	adds	r7, #16
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	08026618 	.word	0x08026618

08013f48 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	4801      	ldr	r0, [pc, #4]	; (8013f54 <__tcf_0+0xc>)
 8013f4e:	f000 f9dd 	bl	801430c <_ZN12FrontendHeapD1Ev>
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	2000869c 	.word	0x2000869c

08013f58 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013f5c:	4b08      	ldr	r3, [pc, #32]	; (8013f80 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f003 0301 	and.w	r3, r3, #1
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d108      	bne.n	8013f7a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8013f68:	4806      	ldr	r0, [pc, #24]	; (8013f84 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8013f6a:	f000 f831 	bl	8013fd0 <_ZN12FrontendHeapC1Ev>
 8013f6e:	4b04      	ldr	r3, [pc, #16]	; (8013f80 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013f70:	2201      	movs	r2, #1
 8013f72:	601a      	str	r2, [r3, #0]
 8013f74:	4804      	ldr	r0, [pc, #16]	; (8013f88 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8013f76:	f010 fb67 	bl	8024648 <atexit>
        return instance;
 8013f7a:	4b02      	ldr	r3, [pc, #8]	; (8013f84 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	2000af64 	.word	0x2000af64
 8013f84:	2000869c 	.word	0x2000869c
 8013f88:	08013f49 	.word	0x08013f49

08013f8c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	4a05      	ldr	r2, [pc, #20]	; (8013fac <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7ff fe97 	bl	8013cd0 <_ZN8touchgfx7MVPHeapD1Ev>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3708      	adds	r7, #8
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	08026618 	.word	0x08026618

08013fb0 <_ZN16FrontendHeapBaseD0Ev>:
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f7ff ffe7 	bl	8013f8c <_ZN16FrontendHeapBaseD1Ev>
 8013fbe:	2114      	movs	r1, #20
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f010 faf8 	bl	80245b6 <_ZdlPvj>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3708      	adds	r7, #8
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013fd0:	b5b0      	push	{r4, r5, r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af02      	add	r7, sp, #8
 8013fd6:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f103 0414 	add.w	r4, r3, #20
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f242 7260 	movw	r2, #10080	; 0x2760
 8013fec:	441a      	add	r2, r3
 8013fee:	6879      	ldr	r1, [r7, #4]
 8013ff0:	f242 7374 	movw	r3, #10100	; 0x2774
 8013ff4:	440b      	add	r3, r1
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	462a      	mov	r2, r5
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	f7ff ff89 	bl	8013f14 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014002:	4a1a      	ldr	r2, [pc, #104]	; (801406c <_ZN12FrontendHeapC1Ev+0x9c>)
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	601a      	str	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3314      	adds	r3, #20
 801400c:	4618      	mov	r0, r3
 801400e:	f000 f8df 	bl	80141d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	332c      	adds	r3, #44	; 0x2c
 8014016:	4618      	mov	r0, r3
 8014018:	f000 f90e 	bl	8014238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	f242 7360 	movw	r3, #10080	; 0x2760
 8014022:	4413      	add	r3, r2
 8014024:	4618      	mov	r0, r3
 8014026:	f000 f93d 	bl	80142a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	f242 7374 	movw	r3, #10100	; 0x2774
 8014030:	4413      	add	r3, r2
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	f642 01c4 	movw	r1, #10436	; 0x28c4
 8014038:	4411      	add	r1, r2
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7fe fac5 	bl	80125cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	f642 03c4 	movw	r3, #10436	; 0x28c4
 8014048:	4413      	add	r3, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7fe fdee 	bl	8012c2c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	f242 7374 	movw	r3, #10100	; 0x2774
 8014058:	4413      	add	r3, r2
 801405a:	4619      	mov	r1, r3
 801405c:	f7ff ff4c 	bl	8013ef8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	4618      	mov	r0, r3
 8014064:	3708      	adds	r7, #8
 8014066:	46bd      	mov	sp, r7
 8014068:	bdb0      	pop	{r4, r5, r7, pc}
 801406a:	bf00      	nop
 801406c:	08026568 	.word	0x08026568

08014070 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
    {
 8014078:	4a05      	ldr	r2, [pc, #20]	; (8014090 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff fe45 	bl	8013d10 <_ZN8touchgfx3LCDD1Ev>
    }
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	0802925c 	.word	0x0802925c

08014094 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
    }
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff ffe7 	bl	8014070 <_ZN8touchgfx8LCD24bppD1Ev>
 80140a2:	2158      	movs	r1, #88	; 0x58
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f010 fa86 	bl	80245b6 <_ZdlPvj>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b086      	sub	sp, #24
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
 80140c0:	603b      	str	r3, [r7, #0]
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	8bbb      	ldrh	r3, [r7, #28]
 80140c6:	9301      	str	r3, [sp, #4]
 80140c8:	8b3b      	ldrh	r3, [r7, #24]
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	68b9      	ldr	r1, [r7, #8]
 80140d2:	f7ff fe73 	bl	8013dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80140d6:	4a04      	ldr	r2, [pc, #16]	; (80140e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	601a      	str	r2, [r3, #0]
    }
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	4618      	mov	r0, r3
 80140e0:	3710      	adds	r7, #16
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	0802663c 	.word	0x0802663c

080140ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b086      	sub	sp, #24
 80140f0:	af02      	add	r7, sp, #8
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
 80140f8:	603b      	str	r3, [r7, #0]
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	8bbb      	ldrh	r3, [r7, #28]
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	8b3b      	ldrh	r3, [r7, #24]
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	68b9      	ldr	r1, [r7, #8]
 801410a:	f7ff ffd3 	bl	80140b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801410e:	4a04      	ldr	r2, [pc, #16]	; (8014120 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	601a      	str	r2, [r3, #0]
    }
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	4618      	mov	r0, r3
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	08026368 	.word	0x08026368

08014124 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	4a04      	ldr	r2, [pc, #16]	; (8014140 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	601a      	str	r2, [r3, #0]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	4618      	mov	r0, r3
 8014136:	370c      	adds	r7, #12
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr
 8014140:	08026350 	.word	0x08026350

08014144 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	4618      	mov	r0, r3
 8014150:	f7ff ffe8 	bl	8014124 <_ZN8touchgfx15TouchControllerC1Ev>
 8014154:	4a03      	ldr	r2, [pc, #12]	; (8014164 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4618      	mov	r0, r3
 801415e:	3708      	adds	r7, #8
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}
 8014164:	08026338 	.word	0x08026338

08014168 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014168:	b590      	push	{r4, r7, lr}
 801416a:	b085      	sub	sp, #20
 801416c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801416e:	f7fe f909 	bl	8012384 <_ZN14BitmapDatabase11getInstanceEv>
 8014172:	4604      	mov	r4, r0
 8014174:	f7fe f910 	bl	8012398 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014178:	4603      	mov	r3, r0
 801417a:	4619      	mov	r1, r3
 801417c:	2300      	movs	r3, #0
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	2300      	movs	r3, #0
 8014182:	2200      	movs	r2, #0
 8014184:	4620      	mov	r0, r4
 8014186:	f006 fcdb 	bl	801ab40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801418a:	4809      	ldr	r0, [pc, #36]	; (80141b0 <touchgfx_init+0x48>)
 801418c:	f7ff fd70 	bl	8013c70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014190:	2000      	movs	r0, #0
 8014192:	f7fe f925 	bl	80123e0 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014196:	4807      	ldr	r0, [pc, #28]	; (80141b4 <touchgfx_init+0x4c>)
 8014198:	f006 fc20 	bl	801a9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 801419c:	f7ff fedc 	bl	8013f58 <_ZN12FrontendHeap11getInstanceEv>
 80141a0:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80141a2:	4805      	ldr	r0, [pc, #20]	; (80141b8 <touchgfx_init+0x50>)
 80141a4:	f7fe ffda 	bl	801315c <_ZN11TouchGFXHAL10initializeEv>
}
 80141a8:	bf00      	nop
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd90      	pop	{r4, r7, pc}
 80141b0:	2000bbe4 	.word	0x2000bbe4
 80141b4:	2000003c 	.word	0x2000003c
 80141b8:	2000bbe8 	.word	0x2000bbe8

080141bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80141c0:	4802      	ldr	r0, [pc, #8]	; (80141cc <touchgfx_taskEntry+0x10>)
 80141c2:	f001 fa06 	bl	80155d2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80141c6:	bf00      	nop
 80141c8:	bd80      	pop	{r7, pc}
 80141ca:	bf00      	nop
 80141cc:	2000bbe8 	.word	0x2000bbe8

080141d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	f000 fc76 	bl	8014acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80141e0:	4a03      	ldr	r2, [pc, #12]	; (80141f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	601a      	str	r2, [r3, #0]
    {
    }
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	080265e4 	.word	0x080265e4

080141f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
    {
    }
 80141fc:	4a05      	ldr	r2, [pc, #20]	; (8014214 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	601a      	str	r2, [r3, #0]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	4618      	mov	r0, r3
 8014206:	f000 fc5f 	bl	8014ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	080265e4 	.word	0x080265e4

08014218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
    }
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7ff ffe7 	bl	80141f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014226:	2118      	movs	r1, #24
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f010 f9c4 	bl	80245b6 <_ZdlPvj>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4618      	mov	r0, r3
 8014232:	3708      	adds	r7, #8
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4618      	mov	r0, r3
 8014244:	f000 fc42 	bl	8014acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014248:	4a03      	ldr	r2, [pc, #12]	; (8014258 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	601a      	str	r2, [r3, #0]
    }
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	080265b0 	.word	0x080265b0

0801425c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
    }
 8014264:	4a05      	ldr	r2, [pc, #20]	; (801427c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	601a      	str	r2, [r3, #0]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fc2b 	bl	8014ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	080265b0 	.word	0x080265b0

08014280 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
    }
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f7ff ffe7 	bl	801425c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801428e:	f242 7134 	movw	r1, #10036	; 0x2734
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f010 f98f 	bl	80245b6 <_ZdlPvj>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	4618      	mov	r0, r3
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
	...

080142a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f000 fc0c 	bl	8014acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80142b4:	4a03      	ldr	r2, [pc, #12]	; (80142c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	601a      	str	r2, [r3, #0]
    }
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	4618      	mov	r0, r3
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	0802657c 	.word	0x0802657c

080142c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
    }
 80142d0:	4a05      	ldr	r2, [pc, #20]	; (80142e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	f000 fbf5 	bl	8014ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	4618      	mov	r0, r3
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	0802657c 	.word	0x0802657c

080142ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
    }
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff ffe7 	bl	80142c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80142fa:	2114      	movs	r1, #20
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f010 f95a 	bl	80245b6 <_ZdlPvj>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	4618      	mov	r0, r3
 8014306:	3708      	adds	r7, #8
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	4a11      	ldr	r2, [pc, #68]	; (801435c <_ZN12FrontendHeapD1Ev+0x50>)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	601a      	str	r2, [r3, #0]
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	f242 7374 	movw	r3, #10100	; 0x2774
 8014320:	4413      	add	r3, r2
 8014322:	4618      	mov	r0, r3
 8014324:	f7fe f91c 	bl	8012560 <_ZN19FrontendApplicationD1Ev>
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	f242 7360 	movw	r3, #10080	; 0x2760
 801432e:	4413      	add	r3, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f7ff ffc9 	bl	80142c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	332c      	adds	r3, #44	; 0x2c
 801433a:	4618      	mov	r0, r3
 801433c:	f7ff ff8e 	bl	801425c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	3314      	adds	r3, #20
 8014344:	4618      	mov	r0, r3
 8014346:	f7ff ff55 	bl	80141f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	f7ff fe1d 	bl	8013f8c <_ZN16FrontendHeapBaseD1Ev>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4618      	mov	r0, r3
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	08026568 	.word	0x08026568

08014360 <_ZN12FrontendHeapD0Ev>:
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f7ff ffcf 	bl	801430c <_ZN12FrontendHeapD1Ev>
 801436e:	f642 01c8 	movw	r1, #10440	; 0x28c8
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f010 f91f 	bl	80245b6 <_ZdlPvj>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	4618      	mov	r0, r3
 801437c:	3708      	adds	r7, #8
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
	...

08014384 <_Z41__static_initialization_and_destruction_0ii>:
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af02      	add	r7, sp, #8
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d119      	bne.n	80143c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801439a:	4293      	cmp	r3, r2
 801439c:	d114      	bne.n	80143c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801439e:	4818      	ldr	r0, [pc, #96]	; (8014400 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80143a0:	f7ff fed0 	bl	8014144 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80143a4:	4817      	ldr	r0, [pc, #92]	; (8014404 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80143a6:	f7ff f965 	bl	8013674 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80143aa:	4817      	ldr	r0, [pc, #92]	; (8014408 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80143ac:	f008 fdee 	bl	801cf8c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80143b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	4b10      	ldr	r3, [pc, #64]	; (8014400 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80143be:	4a12      	ldr	r2, [pc, #72]	; (8014408 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80143c0:	4910      	ldr	r1, [pc, #64]	; (8014404 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80143c2:	4812      	ldr	r0, [pc, #72]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80143c4:	f7ff fe92 	bl	80140ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d113      	bne.n	80143f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d10e      	bne.n	80143f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80143d8:	480c      	ldr	r0, [pc, #48]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80143da:	f7fe ff25 	bl	8013228 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80143de:	480c      	ldr	r0, [pc, #48]	; (8014410 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80143e0:	f7fa fd06 	bl	800edf0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80143e4:	4808      	ldr	r0, [pc, #32]	; (8014408 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80143e6:	f7ff fe43 	bl	8014070 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80143ea:	4806      	ldr	r0, [pc, #24]	; (8014404 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80143ec:	f7ff f96c 	bl	80136c8 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80143f0:	4803      	ldr	r0, [pc, #12]	; (8014400 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80143f2:	f7fe fc8f 	bl	8012d14 <_ZN20STM32TouchControllerD1Ev>
}
 80143f6:	bf00      	nop
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	2000af68 	.word	0x2000af68
 8014404:	2000af6c 	.word	0x2000af6c
 8014408:	2000bb8c 	.word	0x2000bb8c
 801440c:	2000bbe8 	.word	0x2000bbe8
 8014410:	2000003c 	.word	0x2000003c

08014414 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014414:	b480      	push	{r7}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801441c:	2301      	movs	r3, #1
    }
 801441e:	4618      	mov	r0, r3
 8014420:	370c      	adds	r7, #12
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr

0801442a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801442a:	b480      	push	{r7}
 801442c:	b083      	sub	sp, #12
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014432:	230c      	movs	r3, #12
    }
 8014434:	4618      	mov	r0, r3
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr

08014440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	460b      	mov	r3, r1
 801444a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801444c:	887a      	ldrh	r2, [r7, #2]
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	3308      	adds	r3, #8
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	4413      	add	r3, r2
    }
 801445c:	4618      	mov	r0, r3
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr

08014468 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	460b      	mov	r3, r1
 8014472:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014474:	887a      	ldrh	r2, [r7, #2]
 8014476:	4613      	mov	r3, r2
 8014478:	005b      	lsls	r3, r3, #1
 801447a:	4413      	add	r3, r2
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	3308      	adds	r3, #8
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	4413      	add	r3, r2
    }
 8014484:	4618      	mov	r0, r3
 8014486:	370c      	adds	r7, #12
 8014488:	46bd      	mov	sp, r7
 801448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448e:	4770      	bx	lr

08014490 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014498:	2301      	movs	r3, #1
    }
 801449a:	4618      	mov	r0, r3
 801449c:	370c      	adds	r7, #12
 801449e:	46bd      	mov	sp, r7
 80144a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a4:	4770      	bx	lr

080144a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80144a6:	b480      	push	{r7}
 80144a8:	b083      	sub	sp, #12
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80144ae:	f242 732c 	movw	r3, #10028	; 0x272c
    }
 80144b2:	4618      	mov	r0, r3
 80144b4:	370c      	adds	r7, #12
 80144b6:	46bd      	mov	sp, r7
 80144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144bc:	4770      	bx	lr

080144be <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80144be:	b480      	push	{r7}
 80144c0:	b083      	sub	sp, #12
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
 80144c6:	460b      	mov	r3, r1
 80144c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144ca:	887b      	ldrh	r3, [r7, #2]
 80144cc:	f242 722c 	movw	r2, #10028	; 0x272c
 80144d0:	fb02 f303 	mul.w	r3, r2, r3
 80144d4:	3308      	adds	r3, #8
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	4413      	add	r3, r2
    }
 80144da:	4618      	mov	r0, r3
 80144dc:	370c      	adds	r7, #12
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr

080144e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80144e6:	b480      	push	{r7}
 80144e8:	b083      	sub	sp, #12
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	6078      	str	r0, [r7, #4]
 80144ee:	460b      	mov	r3, r1
 80144f0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144f2:	887b      	ldrh	r3, [r7, #2]
 80144f4:	f242 722c 	movw	r2, #10028	; 0x272c
 80144f8:	fb02 f303 	mul.w	r3, r2, r3
 80144fc:	3308      	adds	r3, #8
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	4413      	add	r3, r2
    }
 8014502:	4618      	mov	r0, r3
 8014504:	370c      	adds	r7, #12
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr

0801450e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801450e:	b480      	push	{r7}
 8014510:	b083      	sub	sp, #12
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014516:	2301      	movs	r3, #1
    }
 8014518:	4618      	mov	r0, r3
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801452c:	2310      	movs	r3, #16
    }
 801452e:	4618      	mov	r0, r3
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr

0801453a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801453a:	b480      	push	{r7}
 801453c:	b083      	sub	sp, #12
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	460b      	mov	r3, r1
 8014544:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014546:	887b      	ldrh	r3, [r7, #2]
 8014548:	011b      	lsls	r3, r3, #4
 801454a:	3308      	adds	r3, #8
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	4413      	add	r3, r2
    }
 8014550:	4618      	mov	r0, r3
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr

0801455c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	460b      	mov	r3, r1
 8014566:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014568:	887b      	ldrh	r3, [r7, #2]
 801456a:	011b      	lsls	r3, r3, #4
 801456c:	3308      	adds	r3, #8
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	4413      	add	r3, r2
    }
 8014572:	4618      	mov	r0, r3
 8014574:	370c      	adds	r7, #12
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr

0801457e <_GLOBAL__sub_I_touchgfx_init>:
 801457e:	b580      	push	{r7, lr}
 8014580:	af00      	add	r7, sp, #0
 8014582:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014586:	2001      	movs	r0, #1
 8014588:	f7ff fefc 	bl	8014384 <_Z41__static_initialization_and_destruction_0ii>
 801458c:	bd80      	pop	{r7, pc}

0801458e <_GLOBAL__sub_D_touchgfx_init>:
 801458e:	b580      	push	{r7, lr}
 8014590:	af00      	add	r7, sp, #0
 8014592:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014596:	2000      	movs	r0, #0
 8014598:	f7ff fef4 	bl	8014384 <_Z41__static_initialization_and_destruction_0ii>
 801459c:	bd80      	pop	{r7, pc}

0801459e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	3318      	adds	r3, #24
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	4798      	blx	r3
    }
 80145b2:	bf00      	nop
 80145b4:	3708      	adds	r7, #8
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}

080145ba <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80145ba:	b480      	push	{r7}
 80145bc:	b083      	sub	sp, #12
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
 80145c2:	460b      	mov	r3, r1
 80145c4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	78fa      	ldrb	r2, [r7, #3]
 80145ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80145ce:	bf00      	nop
 80145d0:	370c      	adds	r7, #12
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr

080145da <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80145da:	b480      	push	{r7}
 80145dc:	b083      	sub	sp, #12
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80145e8:	3301      	adds	r3, #1
 80145ea:	b2da      	uxtb	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80145f2:	bf00      	nop
 80145f4:	370c      	adds	r7, #12
 80145f6:	46bd      	mov	sp, r7
 80145f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fc:	4770      	bx	lr
	...

08014600 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801460c:	78fb      	ldrb	r3, [r7, #3]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d002      	beq.n	8014618 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014612:	78fb      	ldrb	r3, [r7, #3]
 8014614:	2b02      	cmp	r3, #2
 8014616:	d105      	bne.n	8014624 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	78fa      	ldrb	r2, [r7, #3]
 801461c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014620:	2301      	movs	r3, #1
 8014622:	e027      	b.n	8014674 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014624:	78fb      	ldrb	r3, [r7, #3]
 8014626:	2b01      	cmp	r3, #1
 8014628:	d123      	bne.n	8014672 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801462e:	2b00      	cmp	r3, #0
 8014630:	d014      	beq.n	801465c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	3380      	adds	r3, #128	; 0x80
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	4798      	blx	r3
 801463e:	4603      	mov	r3, r0
 8014640:	461a      	mov	r2, r3
 8014642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014646:	429a      	cmp	r2, r3
 8014648:	d008      	beq.n	801465c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801464a:	4b0c      	ldr	r3, [pc, #48]	; (801467c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f083 0301 	eor.w	r3, r3, #1
 8014652:	b2db      	uxtb	r3, r3
 8014654:	2b00      	cmp	r3, #0
 8014656:	d001      	beq.n	801465c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014658:	2301      	movs	r3, #1
 801465a:	e000      	b.n	801465e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801465c:	2300      	movs	r3, #0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d005      	beq.n	801466e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	78fa      	ldrb	r2, [r7, #3]
 8014666:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801466a:	2301      	movs	r3, #1
 801466c:	e002      	b.n	8014674 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801466e:	2300      	movs	r3, #0
 8014670:	e000      	b.n	8014674 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014672:	2300      	movs	r3, #0
    }
 8014674:	4618      	mov	r0, r3
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	2000bc6e 	.word	0x2000bc6e

08014680 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014690:	bf00      	nop
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <__NVIC_EnableIRQ>:
{
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	4603      	mov	r3, r0
 80146a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80146a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	db0d      	blt.n	80146ca <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80146ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146b2:	b2db      	uxtb	r3, r3
 80146b4:	f003 021f 	and.w	r2, r3, #31
 80146b8:	4907      	ldr	r1, [pc, #28]	; (80146d8 <__NVIC_EnableIRQ+0x3c>)
 80146ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146be:	095b      	lsrs	r3, r3, #5
 80146c0:	2001      	movs	r0, #1
 80146c2:	fa00 f202 	lsl.w	r2, r0, r2
 80146c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80146ca:	bf00      	nop
 80146cc:	370c      	adds	r7, #12
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	e000e100 	.word	0xe000e100

080146dc <__NVIC_DisableIRQ>:
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	4603      	mov	r3, r0
 80146e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80146e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	db12      	blt.n	8014714 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80146ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	f003 021f 	and.w	r2, r3, #31
 80146f8:	4909      	ldr	r1, [pc, #36]	; (8014720 <__NVIC_DisableIRQ+0x44>)
 80146fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146fe:	095b      	lsrs	r3, r3, #5
 8014700:	2001      	movs	r0, #1
 8014702:	fa00 f202 	lsl.w	r2, r0, r2
 8014706:	3320      	adds	r3, #32
 8014708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801470c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014710:	f3bf 8f6f 	isb	sy
}
 8014714:	bf00      	nop
 8014716:	370c      	adds	r7, #12
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr
 8014720:	e000e100 	.word	0xe000e100

08014724 <__NVIC_SetPriority>:
{
 8014724:	b480      	push	{r7}
 8014726:	b083      	sub	sp, #12
 8014728:	af00      	add	r7, sp, #0
 801472a:	4603      	mov	r3, r0
 801472c:	6039      	str	r1, [r7, #0]
 801472e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014734:	2b00      	cmp	r3, #0
 8014736:	db0c      	blt.n	8014752 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	b2db      	uxtb	r3, r3
 801473c:	4a0e      	ldr	r2, [pc, #56]	; (8014778 <__NVIC_SetPriority+0x54>)
 801473e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014742:	4608      	mov	r0, r1
 8014744:	011b      	lsls	r3, r3, #4
 8014746:	b2d9      	uxtb	r1, r3
 8014748:	1813      	adds	r3, r2, r0
 801474a:	460a      	mov	r2, r1
 801474c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014750:	e00c      	b.n	801476c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	b2da      	uxtb	r2, r3
 8014756:	4909      	ldr	r1, [pc, #36]	; (801477c <__NVIC_SetPriority+0x58>)
 8014758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801475c:	b2db      	uxtb	r3, r3
 801475e:	f003 030f 	and.w	r3, r3, #15
 8014762:	3b04      	subs	r3, #4
 8014764:	0112      	lsls	r2, r2, #4
 8014766:	b2d2      	uxtb	r2, r2
 8014768:	440b      	add	r3, r1
 801476a:	761a      	strb	r2, [r3, #24]
}
 801476c:	bf00      	nop
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr
 8014778:	e000e100 	.word	0xe000e100
 801477c:	e000ed00 	.word	0xe000ed00

08014780 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014780:	b5b0      	push	{r4, r5, r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	f001 f9e6 	bl	8015b5c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014790:	687d      	ldr	r5, [r7, #4]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	334c      	adds	r3, #76	; 0x4c
 8014798:	681c      	ldr	r4, [r3, #0]
 801479a:	f003 ff43 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 801479e:	4603      	mov	r3, r0
 80147a0:	4619      	mov	r1, r3
 80147a2:	4628      	mov	r0, r5
 80147a4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	490d      	ldr	r1, [pc, #52]	; (80147e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7ff ff68 	bl	8014680 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2101      	movs	r1, #1
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7ff ff23 	bl	8014600 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	3374      	adds	r3, #116	; 0x74
 80147c2:	681c      	ldr	r4, [r3, #0]
 80147c4:	2300      	movs	r3, #0
 80147c6:	2200      	movs	r2, #0
 80147c8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80147cc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2101      	movs	r1, #1
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7ff fef1 	bl	80145ba <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80147d8:	bf00      	nop
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bdb0      	pop	{r4, r5, r7, pc}
 80147e0:	080133c1 	.word	0x080133c1

080147e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80147ec:	2109      	movs	r1, #9
 80147ee:	205a      	movs	r0, #90	; 0x5a
 80147f0:	f7ff ff98 	bl	8014724 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80147f4:	2109      	movs	r1, #9
 80147f6:	2058      	movs	r0, #88	; 0x58
 80147f8:	f7ff ff94 	bl	8014724 <__NVIC_SetPriority>
}
 80147fc:	bf00      	nop
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801480c:	205a      	movs	r0, #90	; 0x5a
 801480e:	f7ff ff45 	bl	801469c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014812:	2058      	movs	r0, #88	; 0x58
 8014814:	f7ff ff42 	bl	801469c <__NVIC_EnableIRQ>
}
 8014818:	bf00      	nop
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014828:	205a      	movs	r0, #90	; 0x5a
 801482a:	f7ff ff57 	bl	80146dc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801482e:	2058      	movs	r0, #88	; 0x58
 8014830:	f7ff ff54 	bl	80146dc <__NVIC_DisableIRQ>
}
 8014834:	bf00      	nop
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014844:	4b11      	ldr	r3, [pc, #68]	; (801488c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	b29b      	uxth	r3, r3
 801484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801484e:	b29b      	uxth	r3, r3
 8014850:	3b01      	subs	r3, #1
 8014852:	b29a      	uxth	r2, r3
 8014854:	4b0e      	ldr	r3, [pc, #56]	; (8014890 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014856:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014858:	4b0c      	ldr	r3, [pc, #48]	; (801488c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801485a:	691b      	ldr	r3, [r3, #16]
 801485c:	b29b      	uxth	r3, r3
 801485e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014862:	b29b      	uxth	r3, r3
 8014864:	3b01      	subs	r3, #1
 8014866:	b29a      	uxth	r2, r3
 8014868:	4b0a      	ldr	r3, [pc, #40]	; (8014894 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801486a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801486c:	4b08      	ldr	r3, [pc, #32]	; (8014890 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801486e:	881a      	ldrh	r2, [r3, #0]
 8014870:	4b06      	ldr	r3, [pc, #24]	; (801488c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014872:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014874:	4b05      	ldr	r3, [pc, #20]	; (801488c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014878:	4a04      	ldr	r2, [pc, #16]	; (801488c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801487a:	f043 0301 	orr.w	r3, r3, #1
 801487e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014880:	bf00      	nop
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr
 801488c:	40016800 	.word	0x40016800
 8014890:	2000bc60 	.word	0x2000bc60
 8014894:	2000bc62 	.word	0x2000bc62

08014898 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80148a0:	4b03      	ldr	r3, [pc, #12]	; (80148b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80148a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr
 80148b0:	40016884 	.word	0x40016884

080148b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80148be:	4a06      	ldr	r2, [pc, #24]	; (80148d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80148c4:	4b05      	ldr	r3, [pc, #20]	; (80148dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80148c6:	2201      	movs	r2, #1
 80148c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80148ca:	bf00      	nop
 80148cc:	370c      	adds	r7, #12
 80148ce:	46bd      	mov	sp, r7
 80148d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d4:	4770      	bx	lr
 80148d6:	bf00      	nop
 80148d8:	40016884 	.word	0x40016884
 80148dc:	40016800 	.word	0x40016800

080148e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6839      	ldr	r1, [r7, #0]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 fe44 	bl	801557c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80148f4:	bf00      	nop
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80148fc:	b480      	push	{r7}
 80148fe:	b085      	sub	sp, #20
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014904:	4b0d      	ldr	r3, [pc, #52]	; (801493c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014908:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801490a:	4b0c      	ldr	r3, [pc, #48]	; (801493c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	b29b      	uxth	r3, r3
 8014910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014914:	b29b      	uxth	r3, r3
 8014916:	3301      	adds	r3, #1
 8014918:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801491a:	89fa      	ldrh	r2, [r7, #14]
 801491c:	89bb      	ldrh	r3, [r7, #12]
 801491e:	429a      	cmp	r2, r3
 8014920:	d201      	bcs.n	8014926 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014922:	2300      	movs	r3, #0
 8014924:	e003      	b.n	801492e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014926:	89fa      	ldrh	r2, [r7, #14]
 8014928:	89bb      	ldrh	r3, [r7, #12]
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	b29b      	uxth	r3, r3
    }
}
 801492e:	4618      	mov	r0, r3
 8014930:	3714      	adds	r7, #20
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	40016800 	.word	0x40016800

08014940 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014948:	4b1a      	ldr	r3, [pc, #104]	; (80149b4 <HAL_LTDC_LineEventCallback+0x74>)
 801494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801494c:	4a1a      	ldr	r2, [pc, #104]	; (80149b8 <HAL_LTDC_LineEventCallback+0x78>)
 801494e:	8812      	ldrh	r2, [r2, #0]
 8014950:	4293      	cmp	r3, r2
 8014952:	bf0c      	ite	eq
 8014954:	2301      	moveq	r3, #1
 8014956:	2300      	movne	r3, #0
 8014958:	b2db      	uxtb	r3, r3
 801495a:	2b00      	cmp	r3, #0
 801495c:	d017      	beq.n	801498e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801495e:	4b17      	ldr	r3, [pc, #92]	; (80149bc <HAL_LTDC_LineEventCallback+0x7c>)
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	4619      	mov	r1, r3
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f7f1 fa39 	bl	8005ddc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801496a:	f7fa ff09 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 801496e:	4603      	mov	r3, r0
 8014970:	4618      	mov	r0, r3
 8014972:	f7ff fe32 	bl	80145da <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014976:	f7fe fce5 	bl	8013344 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801497a:	f7fa ff01 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 801497e:	4603      	mov	r3, r0
 8014980:	4618      	mov	r0, r3
 8014982:	f001 fb73 	bl	801606c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014986:	2000      	movs	r0, #0
 8014988:	f7fe f9e6 	bl	8012d58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801498c:	e00e      	b.n	80149ac <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801498e:	4b0a      	ldr	r3, [pc, #40]	; (80149b8 <HAL_LTDC_LineEventCallback+0x78>)
 8014990:	881b      	ldrh	r3, [r3, #0]
 8014992:	4619      	mov	r1, r3
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7f1 fa21 	bl	8005ddc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801499a:	2000      	movs	r0, #0
 801499c:	f7fe f9e7 	bl	8012d6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80149a0:	f7fa feee 	bl	800f780 <_ZN8touchgfx3HAL11getInstanceEv>
 80149a4:	4603      	mov	r3, r0
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7ff fdf9 	bl	801459e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80149ac:	bf00      	nop
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	40016800 	.word	0x40016800
 80149b8:	2000bc60 	.word	0x2000bc60
 80149bc:	2000bc62 	.word	0x2000bc62

080149c0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80149c0:	8880      	ldrh	r0, [r0, #4]
 80149c2:	4770      	bx	lr

080149c4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80149c4:	2300      	movs	r3, #0
 80149c6:	8083      	strh	r3, [r0, #4]
 80149c8:	4770      	bx	lr
	...

080149cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80149cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ce:	6803      	ldr	r3, [r0, #0]
 80149d0:	460e      	mov	r6, r1
 80149d2:	2100      	movs	r1, #0
 80149d4:	4605      	mov	r5, r0
 80149d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d8:	4798      	blx	r3
 80149da:	4604      	mov	r4, r0
 80149dc:	682b      	ldr	r3, [r5, #0]
 80149de:	4628      	mov	r0, r5
 80149e0:	1b34      	subs	r4, r6, r4
 80149e2:	6a1b      	ldr	r3, [r3, #32]
 80149e4:	b2a4      	uxth	r4, r4
 80149e6:	4798      	blx	r3
 80149e8:	88ab      	ldrh	r3, [r5, #4]
 80149ea:	fbb4 f4f0 	udiv	r4, r4, r0
 80149ee:	42a3      	cmp	r3, r4
 80149f0:	d805      	bhi.n	80149fe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80149f2:	4b0e      	ldr	r3, [pc, #56]	; (8014a2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80149f4:	211e      	movs	r1, #30
 80149f6:	4a0e      	ldr	r2, [pc, #56]	; (8014a30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80149f8:	480e      	ldr	r0, [pc, #56]	; (8014a34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80149fa:	f00f fe07 	bl	802460c <__assert_func>
 80149fe:	682b      	ldr	r3, [r5, #0]
 8014a00:	2100      	movs	r1, #0
 8014a02:	4628      	mov	r0, r5
 8014a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a06:	4798      	blx	r3
 8014a08:	682b      	ldr	r3, [r5, #0]
 8014a0a:	4607      	mov	r7, r0
 8014a0c:	4628      	mov	r0, r5
 8014a0e:	6a1b      	ldr	r3, [r3, #32]
 8014a10:	4798      	blx	r3
 8014a12:	1bf3      	subs	r3, r6, r7
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	fbb3 f2f0 	udiv	r2, r3, r0
 8014a1a:	fb02 3010 	mls	r0, r2, r0, r3
 8014a1e:	b118      	cbz	r0, 8014a28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014a20:	4b05      	ldr	r3, [pc, #20]	; (8014a38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014a22:	211f      	movs	r1, #31
 8014a24:	4a02      	ldr	r2, [pc, #8]	; (8014a30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014a26:	e7e7      	b.n	80149f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014a28:	4620      	mov	r0, r4
 8014a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a2c:	080266e8 	.word	0x080266e8
 8014a30:	08026856 	.word	0x08026856
 8014a34:	080266fd 	.word	0x080266fd
 8014a38:	0802672b 	.word	0x0802672b

08014a3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	6803      	ldr	r3, [r0, #0]
 8014a40:	460d      	mov	r5, r1
 8014a42:	4604      	mov	r4, r0
 8014a44:	6a1b      	ldr	r3, [r3, #32]
 8014a46:	4798      	blx	r3
 8014a48:	4285      	cmp	r5, r0
 8014a4a:	d905      	bls.n	8014a58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014a4c:	4b0c      	ldr	r3, [pc, #48]	; (8014a80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014a4e:	212f      	movs	r1, #47	; 0x2f
 8014a50:	4a0c      	ldr	r2, [pc, #48]	; (8014a84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014a52:	480d      	ldr	r0, [pc, #52]	; (8014a88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014a54:	f00f fdda 	bl	802460c <__assert_func>
 8014a58:	6823      	ldr	r3, [r4, #0]
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	88a5      	ldrh	r5, [r4, #4]
 8014a5e:	69db      	ldr	r3, [r3, #28]
 8014a60:	4798      	blx	r3
 8014a62:	4285      	cmp	r5, r0
 8014a64:	d303      	bcc.n	8014a6e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014a66:	4b09      	ldr	r3, [pc, #36]	; (8014a8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014a68:	2130      	movs	r1, #48	; 0x30
 8014a6a:	4a06      	ldr	r2, [pc, #24]	; (8014a84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014a6c:	e7f1      	b.n	8014a52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014a6e:	6823      	ldr	r3, [r4, #0]
 8014a70:	4620      	mov	r0, r4
 8014a72:	88a1      	ldrh	r1, [r4, #4]
 8014a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a76:	4798      	blx	r3
 8014a78:	88a3      	ldrh	r3, [r4, #4]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	80a3      	strh	r3, [r4, #4]
 8014a7e:	bd38      	pop	{r3, r4, r5, pc}
 8014a80:	080267a5 	.word	0x080267a5
 8014a84:	08026899 	.word	0x08026899
 8014a88:	080266fd 	.word	0x080266fd
 8014a8c:	080267bc 	.word	0x080267bc

08014a90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	6803      	ldr	r3, [r0, #0]
 8014a94:	4616      	mov	r6, r2
 8014a96:	4604      	mov	r4, r0
 8014a98:	460d      	mov	r5, r1
 8014a9a:	6a1b      	ldr	r3, [r3, #32]
 8014a9c:	4798      	blx	r3
 8014a9e:	4286      	cmp	r6, r0
 8014aa0:	d905      	bls.n	8014aae <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014aa2:	4b06      	ldr	r3, [pc, #24]	; (8014abc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014aa4:	2139      	movs	r1, #57	; 0x39
 8014aa6:	4a06      	ldr	r2, [pc, #24]	; (8014ac0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014aa8:	4806      	ldr	r0, [pc, #24]	; (8014ac4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014aaa:	f00f fdaf 	bl	802460c <__assert_func>
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014aba:	4718      	bx	r3
 8014abc:	080267a5 	.word	0x080267a5
 8014ac0:	0802680c 	.word	0x0802680c
 8014ac4:	080266fd 	.word	0x080266fd

08014ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014ac8:	4770      	bx	lr
	...

08014acc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014acc:	4a02      	ldr	r2, [pc, #8]	; (8014ad8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014ace:	6002      	str	r2, [r0, #0]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	8082      	strh	r2, [r0, #4]
 8014ad4:	4770      	bx	lr
 8014ad6:	bf00      	nop
 8014ad8:	080267e0 	.word	0x080267e0

08014adc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014adc:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8014ae0:	4770      	bx	lr

08014ae2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8014ae2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014ae6:	4770      	bx	lr

08014ae8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014ae8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014aec:	4770      	bx	lr

08014aee <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8014aee:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8014af2:	4770      	bx	lr

08014af4 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014af4:	4b03      	ldr	r3, [pc, #12]	; (8014b04 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014af6:	b510      	push	{r4, lr}
 8014af8:	4604      	mov	r4, r0
 8014afa:	6003      	str	r3, [r0, #0]
 8014afc:	f000 f8b6 	bl	8014c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014b00:	4620      	mov	r0, r4
 8014b02:	bd10      	pop	{r4, pc}
 8014b04:	080268e0 	.word	0x080268e0

08014b08 <_ZN8touchgfx11BoxProgressD0Ev>:
 8014b08:	b510      	push	{r4, lr}
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	f7ff fff2 	bl	8014af4 <_ZN8touchgfx11BoxProgressD1Ev>
 8014b10:	21c0      	movs	r1, #192	; 0xc0
 8014b12:	4620      	mov	r0, r4
 8014b14:	f00f fd4f 	bl	80245b6 <_ZdlPvj>
 8014b18:	4620      	mov	r0, r4
 8014b1a:	bd10      	pop	{r4, pc}

08014b1c <_ZN8touchgfx11BoxProgressC1Ev>:
 8014b1c:	b510      	push	{r4, lr}
 8014b1e:	4604      	mov	r4, r0
 8014b20:	f000 f8b8 	bl	8014c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014b24:	2201      	movs	r2, #1
 8014b26:	4b16      	ldr	r3, [pc, #88]	; (8014b80 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014b28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b2c:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8014b30:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014b34:	4a13      	ldr	r2, [pc, #76]	; (8014b84 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014b36:	6023      	str	r3, [r4, #0]
 8014b38:	2300      	movs	r3, #0
 8014b3a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014b3e:	22ff      	movs	r2, #255	; 0xff
 8014b40:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014b44:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014b48:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014b4c:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8014b50:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014b54:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014b58:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014b5c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8014b60:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8014b64:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014b68:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8014b6c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8014b70:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8014b74:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8014b78:	f000 fbb8 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	bd10      	pop	{r4, pc}
 8014b80:	080268e0 	.word	0x080268e0
 8014b84:	08027b98 	.word	0x08027b98

08014b88 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014b8c:	4617      	mov	r7, r2
 8014b8e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014b92:	2200      	movs	r2, #0
 8014b94:	4604      	mov	r4, r0
 8014b96:	460e      	mov	r6, r1
 8014b98:	4698      	mov	r8, r3
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	9500      	str	r5, [sp, #0]
 8014b9e:	3090      	adds	r0, #144	; 0x90
 8014ba0:	f7fb fabe 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014ba4:	4643      	mov	r3, r8
 8014ba6:	463a      	mov	r2, r7
 8014ba8:	4631      	mov	r1, r6
 8014baa:	4620      	mov	r0, r4
 8014bac:	9508      	str	r5, [sp, #32]
 8014bae:	b002      	add	sp, #8
 8014bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb4:	f000 b9fa 	b.w	8014fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014bb8 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bba:	4604      	mov	r4, r0
 8014bbc:	f000 fa40 	bl	8015040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014bc0:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	f004 f95b 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014bca:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d814      	bhi.n	8014bfc <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8014bd2:	e8df f003 	tbb	[pc, r3]
 8014bd6:	0202      	.short	0x0202
 8014bd8:	1010      	.short	0x1010
 8014bda:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014bde:	4620      	mov	r0, r4
 8014be0:	f000 fa88 	bl	80150f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014be4:	b200      	sxth	r0, r0
 8014be6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	d81a      	bhi.n	8014c24 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8014bee:	e8df f003 	tbb	[pc, r3]
 8014bf2:	0e07      	.short	0x0e07
 8014bf4:	231f      	.short	0x231f
 8014bf6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014bfa:	e7f0      	b.n	8014bde <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	e7f2      	b.n	8014be6 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8014c00:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	4603      	mov	r3, r0
 8014c08:	2200      	movs	r2, #0
 8014c0a:	2100      	movs	r1, #0
 8014c0c:	e007      	b.n	8014c1e <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8014c0e:	8921      	ldrh	r1, [r4, #8]
 8014c10:	2200      	movs	r2, #0
 8014c12:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014c16:	1a09      	subs	r1, r1, r0
 8014c18:	9300      	str	r3, [sp, #0]
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	b209      	sxth	r1, r1
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f7fb fa7e 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014c24:	4628      	mov	r0, r5
 8014c26:	b003      	add	sp, #12
 8014c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c2c:	f004 b928 	b.w	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014c30:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014c34:	9000      	str	r0, [sp, #0]
 8014c36:	e7e7      	b.n	8014c08 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014c38:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014c3c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014c40:	1a12      	subs	r2, r2, r0
 8014c42:	9000      	str	r0, [sp, #0]
 8014c44:	b212      	sxth	r2, r2
 8014c46:	e7e0      	b.n	8014c0a <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014c48:	b570      	push	{r4, r5, r6, lr}
 8014c4a:	6803      	ldr	r3, [r0, #0]
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8014c52:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014c56:	4798      	blx	r3
 8014c58:	4601      	mov	r1, r0
 8014c5a:	462b      	mov	r3, r5
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c62:	4718      	bx	r3

08014c64 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014c64:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014c68:	4770      	bx	lr
	...

08014c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014c6c:	4b03      	ldr	r3, [pc, #12]	; (8014c7c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014c6e:	b510      	push	{r4, lr}
 8014c70:	4604      	mov	r4, r0
 8014c72:	6003      	str	r3, [r0, #0]
 8014c74:	f000 f999 	bl	8014faa <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014c78:	4620      	mov	r0, r4
 8014c7a:	bd10      	pop	{r4, pc}
 8014c7c:	080269b8 	.word	0x080269b8

08014c80 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014c80:	b510      	push	{r4, lr}
 8014c82:	4604      	mov	r4, r0
 8014c84:	f7ff fff2 	bl	8014c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014c88:	2190      	movs	r1, #144	; 0x90
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f00f fc93 	bl	80245b6 <_ZdlPvj>
 8014c90:	4620      	mov	r0, r4
 8014c92:	bd10      	pop	{r4, pc}

08014c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8014c94:	b510      	push	{r4, lr}
 8014c96:	4604      	mov	r4, r0
 8014c98:	f000 fa4c 	bl	8015134 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014c9c:	4b03      	ldr	r3, [pc, #12]	; (8014cac <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	6023      	str	r3, [r4, #0]
 8014ca4:	f7ff ffd0 	bl	8014c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014ca8:	4620      	mov	r0, r4
 8014caa:	bd10      	pop	{r4, pc}
 8014cac:	080269b8 	.word	0x080269b8

08014cb0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8014cb0:	b570      	push	{r4, r5, r6, lr}
 8014cb2:	6803      	ldr	r3, [r0, #0]
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8014cba:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014cbe:	4798      	blx	r3
 8014cc0:	4601      	mov	r1, r0
 8014cc2:	462b      	mov	r3, r5
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cca:	4718      	bx	r3

08014ccc <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8014ccc:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8014cd0:	4770      	bx	lr

08014cd2 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8014cd2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8014cd6:	4770      	bx	lr

08014cd8 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8014cd8:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8014cdc:	4770      	bx	lr

08014cde <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8014cde:	b507      	push	{r0, r1, r2, lr}
 8014ce0:	ab02      	add	r3, sp, #8
 8014ce2:	30bc      	adds	r0, #188	; 0xbc
 8014ce4:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8014ce8:	4619      	mov	r1, r3
 8014cea:	f002 f9a9 	bl	8017040 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8014cee:	b003      	add	sp, #12
 8014cf0:	f85d fb04 	ldr.w	pc, [sp], #4

08014cf4 <_ZN8touchgfx13ImageProgressD1Ev>:
 8014cf4:	4b03      	ldr	r3, [pc, #12]	; (8014d04 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8014cf6:	b510      	push	{r4, lr}
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	6003      	str	r3, [r0, #0]
 8014cfc:	f7ff ffb6 	bl	8014c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014d00:	4620      	mov	r0, r4
 8014d02:	bd10      	pop	{r4, pc}
 8014d04:	08026ae4 	.word	0x08026ae4

08014d08 <_ZN8touchgfx13ImageProgressD0Ev>:
 8014d08:	b510      	push	{r4, lr}
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	f7ff fff2 	bl	8014cf4 <_ZN8touchgfx13ImageProgressD1Ev>
 8014d10:	21f0      	movs	r1, #240	; 0xf0
 8014d12:	4620      	mov	r0, r4
 8014d14:	f00f fc4f 	bl	80245b6 <_ZdlPvj>
 8014d18:	4620      	mov	r0, r4
 8014d1a:	bd10      	pop	{r4, pc}

08014d1c <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8014d1c:	b508      	push	{r3, lr}
 8014d1e:	4b06      	ldr	r3, [pc, #24]	; (8014d38 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	b92b      	cbnz	r3, 8014d30 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8014d24:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8014d26:	21b8      	movs	r1, #184	; 0xb8
 8014d28:	4a05      	ldr	r2, [pc, #20]	; (8014d40 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8014d2a:	4806      	ldr	r0, [pc, #24]	; (8014d44 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8014d2c:	f00f fc6e 	bl	802460c <__assert_func>
 8014d30:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8014d34:	bd08      	pop	{r3, pc}
 8014d36:	bf00      	nop
 8014d38:	2000bd38 	.word	0x2000bd38
 8014d3c:	08026a78 	.word	0x08026a78
 8014d40:	08026bbc 	.word	0x08026bbc
 8014d44:	08026ab4 	.word	0x08026ab4

08014d48 <_ZN8touchgfx13ImageProgressC1Ev>:
 8014d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	f7ff ffa1 	bl	8014c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014d52:	4b31      	ldr	r3, [pc, #196]	; (8014e18 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8014d54:	a902      	add	r1, sp, #8
 8014d56:	4626      	mov	r6, r4
 8014d58:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8014d5c:	2500      	movs	r5, #0
 8014d5e:	4a2f      	ldr	r2, [pc, #188]	; (8014e1c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8014d60:	f846 3b90 	str.w	r3, [r6], #144
 8014d64:	2701      	movs	r7, #1
 8014d66:	4b2e      	ldr	r3, [pc, #184]	; (8014e20 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8014d68:	4640      	mov	r0, r8
 8014d6a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8014d6e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8014d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d76:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8014d7a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014d7e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8014d82:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8014d86:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8014d8a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8014d8e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8014d92:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8014d96:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8014d9a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8014d9e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8014da2:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8014da6:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8014daa:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8014dae:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8014db2:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8014db6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8014dba:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8014dbe:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8014dc2:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8014dc6:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8014dca:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8014dce:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8014dd2:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8014dd6:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8014dda:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8014dde:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8014de2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8014de6:	f002 fb6f 	bl	80174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014dea:	4b0e      	ldr	r3, [pc, #56]	; (8014e24 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8014dec:	4641      	mov	r1, r8
 8014dee:	4630      	mov	r0, r6
 8014df0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8014df4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8014df8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8014dfc:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8014e00:	f000 fa74 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e08:	4631      	mov	r1, r6
 8014e0a:	f000 fa6f 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014e0e:	4620      	mov	r0, r4
 8014e10:	b002      	add	sp, #8
 8014e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e16:	bf00      	nop
 8014e18:	08026ae4 	.word	0x08026ae4
 8014e1c:	08027d00 	.word	0x08027d00
 8014e20:	08026e60 	.word	0x08026e60
 8014e24:	08027c00 	.word	0x08027c00

08014e28 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8014e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e2c:	4617      	mov	r7, r2
 8014e2e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014e32:	2200      	movs	r2, #0
 8014e34:	4604      	mov	r4, r0
 8014e36:	460e      	mov	r6, r1
 8014e38:	4698      	mov	r8, r3
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	9500      	str	r5, [sp, #0]
 8014e3e:	3090      	adds	r0, #144	; 0x90
 8014e40:	f7fb f96e 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014e44:	4643      	mov	r3, r8
 8014e46:	463a      	mov	r2, r7
 8014e48:	4631      	mov	r1, r6
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	9508      	str	r5, [sp, #32]
 8014e4e:	b002      	add	sp, #8
 8014e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e54:	f000 b8aa 	b.w	8014fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014e58 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8014e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	f000 f8f0 	bl	8015040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014e60:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8014e64:	4638      	mov	r0, r7
 8014e66:	f004 f80b 	bl	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014e6a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014e6e:	4620      	mov	r0, r4
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	bf94      	ite	ls
 8014e74:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8014e78:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8014e7c:	f000 f93a 	bl	80150f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014e80:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8014e84:	4606      	mov	r6, r0
 8014e86:	b205      	sxth	r5, r0
 8014e88:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014e8c:	2a00      	cmp	r2, #0
 8014e8e:	d056      	beq.n	8014f3e <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8014e90:	2b03      	cmp	r3, #3
 8014e92:	d82c      	bhi.n	8014eee <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014e94:	e8df f003 	tbb	[pc, r3]
 8014e98:	3d311202 	.word	0x3d311202
 8014e9c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	4611      	mov	r1, r2
 8014ea6:	462b      	mov	r3, r5
 8014ea8:	4638      	mov	r0, r7
 8014eaa:	f7fb f939 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014eae:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014eb2:	9300      	str	r3, [sp, #0]
 8014eb4:	462b      	mov	r3, r5
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	4611      	mov	r1, r2
 8014eba:	e014      	b.n	8014ee6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014ebc:	8921      	ldrh	r1, [r4, #8]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014ec4:	1a09      	subs	r1, r1, r0
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	462b      	mov	r3, r5
 8014ecc:	b209      	sxth	r1, r1
 8014ece:	f7fb f927 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014ed2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8014ed6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014eda:	4249      	negs	r1, r1
 8014edc:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8014ee0:	9200      	str	r2, [sp, #0]
 8014ee2:	b209      	sxth	r1, r1
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014eea:	f7fb f919 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014eee:	4638      	mov	r0, r7
 8014ef0:	b003      	add	sp, #12
 8014ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ef6:	f003 bfc3 	b.w	8018e80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014efa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014efe:	2200      	movs	r2, #0
 8014f00:	9500      	str	r5, [sp, #0]
 8014f02:	2100      	movs	r1, #0
 8014f04:	4638      	mov	r0, r7
 8014f06:	f7fb f90b 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f0a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f0e:	9500      	str	r5, [sp, #0]
 8014f10:	e7d1      	b.n	8014eb6 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8014f12:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014f16:	2100      	movs	r1, #0
 8014f18:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f1c:	1a12      	subs	r2, r2, r0
 8014f1e:	9500      	str	r5, [sp, #0]
 8014f20:	4638      	mov	r0, r7
 8014f22:	b212      	sxth	r2, r2
 8014f24:	f7fb f8fc 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f28:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8014f2c:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8014f30:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f34:	4252      	negs	r2, r2
 8014f36:	9100      	str	r1, [sp, #0]
 8014f38:	b212      	sxth	r2, r2
 8014f3a:	2100      	movs	r1, #0
 8014f3c:	e7d3      	b.n	8014ee6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014f3e:	2b03      	cmp	r3, #3
 8014f40:	d8d5      	bhi.n	8014eee <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014f42:	e8df f003 	tbb	[pc, r3]
 8014f46:	1102      	.short	0x1102
 8014f48:	2a1b      	.short	0x2a1b
 8014f4a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	4638      	mov	r0, r7
 8014f52:	4611      	mov	r1, r2
 8014f54:	9300      	str	r3, [sp, #0]
 8014f56:	462b      	mov	r3, r5
 8014f58:	f7fb f8e2 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f5c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f60:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014f64:	1af1      	subs	r1, r6, r3
 8014f66:	e7bb      	b.n	8014ee0 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8014f68:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f72:	1a09      	subs	r1, r1, r0
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	462b      	mov	r3, r5
 8014f78:	b209      	sxth	r1, r1
 8014f7a:	e795      	b.n	8014ea8 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f82:	4638      	mov	r0, r7
 8014f84:	9500      	str	r5, [sp, #0]
 8014f86:	4611      	mov	r1, r2
 8014f88:	f7fb f8ca 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f8c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8014f90:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f94:	1a32      	subs	r2, r6, r0
 8014f96:	9000      	str	r0, [sp, #0]
 8014f98:	e7ce      	b.n	8014f38 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8014f9a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014f9e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014fa2:	1a12      	subs	r2, r2, r0
 8014fa4:	9500      	str	r5, [sp, #0]
 8014fa6:	b212      	sxth	r2, r2
 8014fa8:	e7ab      	b.n	8014f02 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08014faa <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8014faa:	4770      	bx	lr

08014fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8014fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014fb0:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	460e      	mov	r6, r1
 8014fb8:	4698      	mov	r8, r3
 8014fba:	9700      	str	r7, [sp, #0]
 8014fbc:	3058      	adds	r0, #88	; 0x58
 8014fbe:	4615      	mov	r5, r2
 8014fc0:	f7fb f8ae 	bl	8010120 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014fc4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014fc8:	eb06 0308 	add.w	r3, r6, r8
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	eb05 0207 	add.w	r2, r5, r7
 8014fd2:	bfb8      	it	lt
 8014fd4:	8123      	strhlt	r3, [r4, #8]
 8014fd6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	bfb8      	it	lt
 8014fde:	8162      	strhlt	r2, [r4, #10]
 8014fe0:	b002      	add	sp, #8
 8014fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fe6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8014fe6:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8014fea:	4770      	bx	lr

08014fec <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8014fec:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8014ff0:	4770      	bx	lr

08014ff2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8014ff2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8014ff6:	4770      	bx	lr

08014ff8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8014ff8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8014ffc:	4770      	bx	lr

08014ffe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8014ffe:	b510      	push	{r4, lr}
 8015000:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015004:	800c      	strh	r4, [r1, #0]
 8015006:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801500a:	8011      	strh	r1, [r2, #0]
 801500c:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015010:	801a      	strh	r2, [r3, #0]
 8015012:	9b02      	ldr	r3, [sp, #8]
 8015014:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8015018:	801a      	strh	r2, [r3, #0]
 801501a:	bd10      	pop	{r4, pc}

0801501c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801501c:	b510      	push	{r4, lr}
 801501e:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015022:	800c      	strh	r4, [r1, #0]
 8015024:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8015028:	8011      	strh	r1, [r2, #0]
 801502a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801502e:	801a      	strh	r2, [r3, #0]
 8015030:	bd10      	pop	{r4, pc}

08015032 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015032:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015036:	800b      	strh	r3, [r1, #0]
 8015038:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801503c:	8013      	strh	r3, [r2, #0]
 801503e:	4770      	bx	lr

08015040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015040:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015044:	4299      	cmp	r1, r3
 8015046:	bfb8      	it	lt
 8015048:	4619      	movlt	r1, r3
 801504a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801504e:	4299      	cmp	r1, r3
 8015050:	bfa8      	it	ge
 8015052:	4619      	movge	r1, r3
 8015054:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8015058:	4770      	bx	lr

0801505a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801505a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801505e:	4770      	bx	lr

08015060 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015060:	b510      	push	{r4, lr}
 8015062:	4604      	mov	r4, r0
 8015064:	2190      	movs	r1, #144	; 0x90
 8015066:	f00f faa6 	bl	80245b6 <_ZdlPvj>
 801506a:	4620      	mov	r0, r4
 801506c:	bd10      	pop	{r4, pc}

0801506e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801506e:	b510      	push	{r4, lr}
 8015070:	4604      	mov	r4, r0
 8015072:	302c      	adds	r0, #44	; 0x2c
 8015074:	f002 fa28 	bl	80174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015078:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801507a:	8123      	strh	r3, [r4, #8]
 801507c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801507e:	8163      	strh	r3, [r4, #10]
 8015080:	bd10      	pop	{r4, pc}
	...

08015084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015084:	4291      	cmp	r1, r2
 8015086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508a:	4604      	mov	r4, r0
 801508c:	460e      	mov	r6, r1
 801508e:	4615      	mov	r5, r2
 8015090:	4698      	mov	r8, r3
 8015092:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015096:	db05      	blt.n	80150a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8015098:	4b12      	ldr	r3, [pc, #72]	; (80150e4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801509a:	214d      	movs	r1, #77	; 0x4d
 801509c:	4a12      	ldr	r2, [pc, #72]	; (80150e8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801509e:	4813      	ldr	r0, [pc, #76]	; (80150ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80150a0:	f00f fab4 	bl	802460c <__assert_func>
 80150a4:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 80150a8:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 80150ac:	6803      	ldr	r3, [r0, #0]
 80150ae:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80150b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80150b6:	4798      	blx	r3
 80150b8:	f1b8 0f00 	cmp.w	r8, #0
 80150bc:	d10c      	bne.n	80150d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80150be:	1bad      	subs	r5, r5, r6
 80150c0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80150c4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80150c8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80150cc:	42bb      	cmp	r3, r7
 80150ce:	d806      	bhi.n	80150de <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80150d0:	4b07      	ldr	r3, [pc, #28]	; (80150f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80150d2:	215a      	movs	r1, #90	; 0x5a
 80150d4:	4a04      	ldr	r2, [pc, #16]	; (80150e8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80150d6:	e7e2      	b.n	801509e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80150d8:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80150dc:	e7f2      	b.n	80150c4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80150de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e2:	bf00      	nop
 80150e4:	08026bef 	.word	0x08026bef
 80150e8:	08026d2c 	.word	0x08026d2c
 80150ec:	08026bf9 	.word	0x08026bf9
 80150f0:	08026c50 	.word	0x08026c50

080150f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80150f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150f6:	4604      	mov	r4, r0
 80150f8:	460d      	mov	r5, r1
 80150fa:	b1b9      	cbz	r1, 801512c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80150fc:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8015100:	ab01      	add	r3, sp, #4
 8015102:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8015106:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801510a:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801510e:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8015112:	1a12      	subs	r2, r2, r0
 8015114:	1b89      	subs	r1, r1, r6
 8015116:	1a38      	subs	r0, r7, r0
 8015118:	f003 fff3 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 801511c:	4629      	mov	r1, r5
 801511e:	ab01      	add	r3, sp, #4
 8015120:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015124:	4430      	add	r0, r6
 8015126:	f003 ffec 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 801512a:	b285      	uxth	r5, r0
 801512c:	4628      	mov	r0, r5
 801512e:	b003      	add	sp, #12
 8015130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015134 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015138:	4604      	mov	r4, r0
 801513a:	2600      	movs	r6, #0
 801513c:	f7fa ffa2 	bl	8010084 <_ZN8touchgfx8DrawableC1Ev>
 8015140:	4b1b      	ldr	r3, [pc, #108]	; (80151b0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015142:	4625      	mov	r5, r4
 8015144:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8015148:	af02      	add	r7, sp, #8
 801514a:	62a6      	str	r6, [r4, #40]	; 0x28
 801514c:	f845 3b2c 	str.w	r3, [r5], #44
 8015150:	4628      	mov	r0, r5
 8015152:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015156:	f7fa ff95 	bl	8010084 <_ZN8touchgfx8DrawableC1Ev>
 801515a:	4b16      	ldr	r3, [pc, #88]	; (80151b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801515c:	4639      	mov	r1, r7
 801515e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015162:	4628      	mov	r0, r5
 8015164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015166:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801516a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801516e:	f002 f9ab 	bl	80174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015172:	4638      	mov	r0, r7
 8015174:	f7fa ff86 	bl	8010084 <_ZN8touchgfx8DrawableC1Ev>
 8015178:	4b0f      	ldr	r3, [pc, #60]	; (80151b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801517a:	4632      	mov	r2, r6
 801517c:	4631      	mov	r1, r6
 801517e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015180:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015184:	4628      	mov	r0, r5
 8015186:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801518a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801518e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015192:	f7fb f810 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
 8015196:	4629      	mov	r1, r5
 8015198:	4620      	mov	r0, r4
 801519a:	f000 f8a7 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801519e:	4620      	mov	r0, r4
 80151a0:	4639      	mov	r1, r7
 80151a2:	f000 f8a3 	bl	80152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80151a6:	4620      	mov	r0, r4
 80151a8:	b002      	add	sp, #8
 80151aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ae:	bf00      	nop
 80151b0:	08026c74 	.word	0x08026c74
 80151b4:	08027d00 	.word	0x08027d00
 80151b8:	08026e60 	.word	0x08026e60

080151bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80151bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80151be:	2000      	movs	r0, #0
 80151c0:	b12b      	cbz	r3, 80151ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80151c2:	b920      	cbnz	r0, 80151ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80151c4:	1a5a      	subs	r2, r3, r1
 80151c6:	699b      	ldr	r3, [r3, #24]
 80151c8:	4250      	negs	r0, r2
 80151ca:	4150      	adcs	r0, r2
 80151cc:	e7f8      	b.n	80151c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80151ce:	4770      	bx	lr

080151d0 <_ZN8touchgfx9Container9removeAllEv>:
 80151d0:	2200      	movs	r2, #0
 80151d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80151d4:	b123      	cbz	r3, 80151e0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80151d6:	6999      	ldr	r1, [r3, #24]
 80151d8:	6281      	str	r1, [r0, #40]	; 0x28
 80151da:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80151de:	e7f8      	b.n	80151d2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80151e0:	4770      	bx	lr

080151e2 <_ZN8touchgfx9Container6unlinkEv>:
 80151e2:	2300      	movs	r3, #0
 80151e4:	6283      	str	r3, [r0, #40]	; 0x28
 80151e6:	4770      	bx	lr

080151e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80151e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ec:	461f      	mov	r7, r3
 80151ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80151f2:	460d      	mov	r5, r1
 80151f4:	4616      	mov	r6, r2
 80151f6:	b103      	cbz	r3, 80151fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80151f8:	6038      	str	r0, [r7, #0]
 80151fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80151fc:	b314      	cbz	r4, 8015244 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80151fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015202:	b1eb      	cbz	r3, 8015240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015204:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015208:	428d      	cmp	r5, r1
 801520a:	db19      	blt.n	8015240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801520c:	b289      	uxth	r1, r1
 801520e:	8923      	ldrh	r3, [r4, #8]
 8015210:	440b      	add	r3, r1
 8015212:	b21b      	sxth	r3, r3
 8015214:	429d      	cmp	r5, r3
 8015216:	da13      	bge.n	8015240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015218:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801521c:	4296      	cmp	r6, r2
 801521e:	db0f      	blt.n	8015240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015220:	b292      	uxth	r2, r2
 8015222:	8963      	ldrh	r3, [r4, #10]
 8015224:	4413      	add	r3, r2
 8015226:	b21b      	sxth	r3, r3
 8015228:	429e      	cmp	r6, r3
 801522a:	da09      	bge.n	8015240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801522c:	6823      	ldr	r3, [r4, #0]
 801522e:	1ab2      	subs	r2, r6, r2
 8015230:	1a69      	subs	r1, r5, r1
 8015232:	4620      	mov	r0, r4
 8015234:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015238:	b212      	sxth	r2, r2
 801523a:	463b      	mov	r3, r7
 801523c:	b209      	sxth	r1, r1
 801523e:	47c0      	blx	r8
 8015240:	69a4      	ldr	r4, [r4, #24]
 8015242:	e7db      	b.n	80151fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015248 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015248:	2200      	movs	r2, #0
 801524a:	8002      	strh	r2, [r0, #0]
 801524c:	8042      	strh	r2, [r0, #2]
 801524e:	8082      	strh	r2, [r0, #4]
 8015250:	80c2      	strh	r2, [r0, #6]
 8015252:	4770      	bx	lr

08015254 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015254:	b570      	push	{r4, r5, r6, lr}
 8015256:	460d      	mov	r5, r1
 8015258:	4616      	mov	r6, r2
 801525a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801525c:	b13c      	cbz	r4, 801526e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	4620      	mov	r0, r4
 8015262:	4632      	mov	r2, r6
 8015264:	4629      	mov	r1, r5
 8015266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015268:	4798      	blx	r3
 801526a:	69a4      	ldr	r4, [r4, #24]
 801526c:	e7f6      	b.n	801525c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801526e:	bd70      	pop	{r4, r5, r6, pc}

08015270 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	460d      	mov	r5, r1
 8015274:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015276:	b134      	cbz	r4, 8015286 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	4621      	mov	r1, r4
 801527c:	4628      	mov	r0, r5
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	4798      	blx	r3
 8015282:	69a4      	ldr	r4, [r4, #24]
 8015284:	e7f7      	b.n	8015276 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015286:	bd38      	pop	{r3, r4, r5, pc}

08015288 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801528a:	b19b      	cbz	r3, 80152b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801528c:	428b      	cmp	r3, r1
 801528e:	d109      	bne.n	80152a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015290:	699a      	ldr	r2, [r3, #24]
 8015292:	2100      	movs	r1, #0
 8015294:	6159      	str	r1, [r3, #20]
 8015296:	6282      	str	r2, [r0, #40]	; 0x28
 8015298:	b902      	cbnz	r2, 801529c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801529a:	4770      	bx	lr
 801529c:	6199      	str	r1, [r3, #24]
 801529e:	4770      	bx	lr
 80152a0:	4613      	mov	r3, r2
 80152a2:	b13a      	cbz	r2, 80152b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80152a4:	699a      	ldr	r2, [r3, #24]
 80152a6:	428a      	cmp	r2, r1
 80152a8:	d1fa      	bne.n	80152a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80152aa:	698a      	ldr	r2, [r1, #24]
 80152ac:	619a      	str	r2, [r3, #24]
 80152ae:	2300      	movs	r3, #0
 80152b0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80152b4:	4770      	bx	lr

080152b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80152b6:	b410      	push	{r4}
 80152b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152ba:	4604      	mov	r4, r0
 80152bc:	b92b      	cbnz	r3, 80152ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80152be:	6803      	ldr	r3, [r0, #0]
 80152c0:	4611      	mov	r1, r2
 80152c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152c8:	4718      	bx	r3
 80152ca:	b941      	cbnz	r1, 80152de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80152cc:	6193      	str	r3, [r2, #24]
 80152ce:	6282      	str	r2, [r0, #40]	; 0x28
 80152d0:	6154      	str	r4, [r2, #20]
 80152d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152d6:	4770      	bx	lr
 80152d8:	4603      	mov	r3, r0
 80152da:	2800      	cmp	r0, #0
 80152dc:	d0f9      	beq.n	80152d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80152de:	4299      	cmp	r1, r3
 80152e0:	6998      	ldr	r0, [r3, #24]
 80152e2:	d1f9      	bne.n	80152d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80152e4:	6190      	str	r0, [r2, #24]
 80152e6:	618a      	str	r2, [r1, #24]
 80152e8:	e7f2      	b.n	80152d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080152ec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80152ec:	4288      	cmp	r0, r1
 80152ee:	b508      	push	{r3, lr}
 80152f0:	d105      	bne.n	80152fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80152f2:	4b11      	ldr	r3, [pc, #68]	; (8015338 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80152f4:	2123      	movs	r1, #35	; 0x23
 80152f6:	4a11      	ldr	r2, [pc, #68]	; (801533c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80152f8:	4811      	ldr	r0, [pc, #68]	; (8015340 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80152fa:	f00f f987 	bl	802460c <__assert_func>
 80152fe:	694b      	ldr	r3, [r1, #20]
 8015300:	b11b      	cbz	r3, 801530a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015302:	4b10      	ldr	r3, [pc, #64]	; (8015344 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015304:	2124      	movs	r1, #36	; 0x24
 8015306:	4a0d      	ldr	r2, [pc, #52]	; (801533c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015308:	e7f6      	b.n	80152f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801530a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801530e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015310:	b913      	cbnz	r3, 8015318 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015312:	6281      	str	r1, [r0, #40]	; 0x28
 8015314:	bd08      	pop	{r3, pc}
 8015316:	4613      	mov	r3, r2
 8015318:	699a      	ldr	r2, [r3, #24]
 801531a:	b12a      	cbz	r2, 8015328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801531c:	428b      	cmp	r3, r1
 801531e:	d1fa      	bne.n	8015316 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015320:	4b09      	ldr	r3, [pc, #36]	; (8015348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015322:	2135      	movs	r1, #53	; 0x35
 8015324:	4a05      	ldr	r2, [pc, #20]	; (801533c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015326:	e7e7      	b.n	80152f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015328:	428b      	cmp	r3, r1
 801532a:	d103      	bne.n	8015334 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801532c:	4b06      	ldr	r3, [pc, #24]	; (8015348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801532e:	2138      	movs	r1, #56	; 0x38
 8015330:	4a02      	ldr	r2, [pc, #8]	; (801533c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015332:	e7e1      	b.n	80152f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015334:	6199      	str	r1, [r3, #24]
 8015336:	e7ed      	b.n	8015314 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015338:	08026d8d 	.word	0x08026d8d
 801533c:	08026ee4 	.word	0x08026ee4
 8015340:	08026db9 	.word	0x08026db9
 8015344:	08026dec 	.word	0x08026dec
 8015348:	08026e22 	.word	0x08026e22

0801534c <_ZN8touchgfx4RectaNERKS0_>:
 801534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015350:	888b      	ldrh	r3, [r1, #4]
 8015352:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015356:	f9b0 a000 	ldrsh.w	sl, [r0]
 801535a:	444b      	add	r3, r9
 801535c:	b29b      	uxth	r3, r3
 801535e:	fa0f f883 	sxth.w	r8, r3
 8015362:	45c2      	cmp	sl, r8
 8015364:	da30      	bge.n	80153c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015366:	8882      	ldrh	r2, [r0, #4]
 8015368:	4452      	add	r2, sl
 801536a:	b292      	uxth	r2, r2
 801536c:	fa0f fe82 	sxth.w	lr, r2
 8015370:	45f1      	cmp	r9, lr
 8015372:	da29      	bge.n	80153c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015374:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015378:	88cc      	ldrh	r4, [r1, #6]
 801537a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801537e:	442c      	add	r4, r5
 8015380:	b224      	sxth	r4, r4
 8015382:	42a6      	cmp	r6, r4
 8015384:	da20      	bge.n	80153c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015386:	88c7      	ldrh	r7, [r0, #6]
 8015388:	4437      	add	r7, r6
 801538a:	b2bf      	uxth	r7, r7
 801538c:	fa0f fc87 	sxth.w	ip, r7
 8015390:	4565      	cmp	r5, ip
 8015392:	da19      	bge.n	80153c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015394:	45ca      	cmp	sl, r9
 8015396:	4654      	mov	r4, sl
 8015398:	bfb8      	it	lt
 801539a:	464c      	movlt	r4, r9
 801539c:	42b5      	cmp	r5, r6
 801539e:	bfb8      	it	lt
 80153a0:	4635      	movlt	r5, r6
 80153a2:	45f0      	cmp	r8, lr
 80153a4:	bfc8      	it	gt
 80153a6:	4613      	movgt	r3, r2
 80153a8:	1b1b      	subs	r3, r3, r4
 80153aa:	8083      	strh	r3, [r0, #4]
 80153ac:	88ca      	ldrh	r2, [r1, #6]
 80153ae:	884b      	ldrh	r3, [r1, #2]
 80153b0:	8004      	strh	r4, [r0, #0]
 80153b2:	4413      	add	r3, r2
 80153b4:	8045      	strh	r5, [r0, #2]
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	b21a      	sxth	r2, r3
 80153ba:	4594      	cmp	ip, r2
 80153bc:	bfb8      	it	lt
 80153be:	463b      	movlt	r3, r7
 80153c0:	1b5b      	subs	r3, r3, r5
 80153c2:	80c3      	strh	r3, [r0, #6]
 80153c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153c8:	2300      	movs	r3, #0
 80153ca:	8003      	strh	r3, [r0, #0]
 80153cc:	8043      	strh	r3, [r0, #2]
 80153ce:	8083      	strh	r3, [r0, #4]
 80153d0:	80c3      	strh	r3, [r0, #6]
 80153d2:	e7f7      	b.n	80153c4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080153d4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80153d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80153d8:	b12b      	cbz	r3, 80153e6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80153da:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80153de:	fab0 f080 	clz	r0, r0
 80153e2:	0940      	lsrs	r0, r0, #5
 80153e4:	4770      	bx	lr
 80153e6:	2001      	movs	r0, #1
 80153e8:	4770      	bx	lr

080153ea <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80153ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ee:	2300      	movs	r3, #0
 80153f0:	4604      	mov	r4, r0
 80153f2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80153f4:	8003      	strh	r3, [r0, #0]
 80153f6:	8043      	strh	r3, [r0, #2]
 80153f8:	8083      	strh	r3, [r0, #4]
 80153fa:	80c3      	strh	r3, [r0, #6]
 80153fc:	2d00      	cmp	r5, #0
 80153fe:	d040      	beq.n	8015482 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015400:	1d28      	adds	r0, r5, #4
 8015402:	f7ff ffe7 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015406:	b988      	cbnz	r0, 801542c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015408:	4620      	mov	r0, r4
 801540a:	f7ff ffe3 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801540e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015412:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015416:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801541a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801541e:	b138      	cbz	r0, 8015430 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015420:	8022      	strh	r2, [r4, #0]
 8015422:	8063      	strh	r3, [r4, #2]
 8015424:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015428:	f8a4 c006 	strh.w	ip, [r4, #6]
 801542c:	69ad      	ldr	r5, [r5, #24]
 801542e:	e7e5      	b.n	80153fc <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015430:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015434:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015438:	4290      	cmp	r0, r2
 801543a:	4607      	mov	r7, r0
 801543c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015440:	460e      	mov	r6, r1
 8015442:	bfa8      	it	ge
 8015444:	4617      	movge	r7, r2
 8015446:	4299      	cmp	r1, r3
 8015448:	4472      	add	r2, lr
 801544a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801544e:	bfa8      	it	ge
 8015450:	461e      	movge	r6, r3
 8015452:	4440      	add	r0, r8
 8015454:	4471      	add	r1, lr
 8015456:	4463      	add	r3, ip
 8015458:	b200      	sxth	r0, r0
 801545a:	8027      	strh	r7, [r4, #0]
 801545c:	b212      	sxth	r2, r2
 801545e:	8066      	strh	r6, [r4, #2]
 8015460:	b209      	sxth	r1, r1
 8015462:	b21b      	sxth	r3, r3
 8015464:	4290      	cmp	r0, r2
 8015466:	bfac      	ite	ge
 8015468:	ebc7 0200 	rsbge	r2, r7, r0
 801546c:	ebc7 0202 	rsblt	r2, r7, r2
 8015470:	4299      	cmp	r1, r3
 8015472:	bfac      	ite	ge
 8015474:	ebc6 0301 	rsbge	r3, r6, r1
 8015478:	ebc6 0303 	rsblt	r3, r6, r3
 801547c:	80a2      	strh	r2, [r4, #4]
 801547e:	80e3      	strh	r3, [r4, #6]
 8015480:	e7d4      	b.n	801542c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015482:	4620      	mov	r0, r4
 8015484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015488 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801548c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015490:	b383      	cbz	r3, 80154f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015492:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015494:	b374      	cbz	r4, 80154f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015496:	f9b1 5000 	ldrsh.w	r5, [r1]
 801549a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801549e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80154a2:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80154a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80154aa:	b303      	cbz	r3, 80154ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80154ac:	4668      	mov	r0, sp
 80154ae:	1d21      	adds	r1, r4, #4
 80154b0:	f8ad 5000 	strh.w	r5, [sp]
 80154b4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80154b8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80154bc:	f8ad 8006 	strh.w	r8, [sp, #6]
 80154c0:	f7ff ff44 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 80154c4:	4668      	mov	r0, sp
 80154c6:	f7ff ff85 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154ca:	b980      	cbnz	r0, 80154ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80154cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80154d0:	4669      	mov	r1, sp
 80154d2:	88a2      	ldrh	r2, [r4, #4]
 80154d4:	4620      	mov	r0, r4
 80154d6:	1a9b      	subs	r3, r3, r2
 80154d8:	88e2      	ldrh	r2, [r4, #6]
 80154da:	f8ad 3000 	strh.w	r3, [sp]
 80154de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80154e2:	1a9b      	subs	r3, r3, r2
 80154e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80154e8:	6823      	ldr	r3, [r4, #0]
 80154ea:	689b      	ldr	r3, [r3, #8]
 80154ec:	4798      	blx	r3
 80154ee:	69a4      	ldr	r4, [r4, #24]
 80154f0:	2c00      	cmp	r4, #0
 80154f2:	d1d8      	bne.n	80154a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80154f4:	b002      	add	sp, #8
 80154f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80154fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154fc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015500:	460d      	mov	r5, r1
 8015502:	4616      	mov	r6, r2
 8015504:	b323      	cbz	r3, 8015550 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015506:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015508:	b314      	cbz	r4, 8015550 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801550a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801550e:	b1eb      	cbz	r3, 801554c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015510:	6828      	ldr	r0, [r5, #0]
 8015512:	466b      	mov	r3, sp
 8015514:	6869      	ldr	r1, [r5, #4]
 8015516:	c303      	stmia	r3!, {r0, r1}
 8015518:	4668      	mov	r0, sp
 801551a:	1d21      	adds	r1, r4, #4
 801551c:	f7ff ff16 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8015520:	4668      	mov	r0, sp
 8015522:	f7ff ff57 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015526:	b988      	cbnz	r0, 801554c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015528:	f8bd 3000 	ldrh.w	r3, [sp]
 801552c:	4669      	mov	r1, sp
 801552e:	88a2      	ldrh	r2, [r4, #4]
 8015530:	4620      	mov	r0, r4
 8015532:	1a9b      	subs	r3, r3, r2
 8015534:	88e2      	ldrh	r2, [r4, #6]
 8015536:	f8ad 3000 	strh.w	r3, [sp]
 801553a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801553e:	1a9b      	subs	r3, r3, r2
 8015540:	4632      	mov	r2, r6
 8015542:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015546:	6823      	ldr	r3, [r4, #0]
 8015548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801554a:	4798      	blx	r3
 801554c:	69a4      	ldr	r4, [r4, #24]
 801554e:	e7db      	b.n	8015508 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015550:	b002      	add	sp, #8
 8015552:	bd70      	pop	{r4, r5, r6, pc}

08015554 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015554:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015558:	4770      	bx	lr

0801555a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801555a:	6803      	ldr	r3, [r0, #0]
 801555c:	b513      	push	{r0, r1, r4, lr}
 801555e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015562:	2300      	movs	r3, #0
 8015564:	e9cd 3300 	strd	r3, r3, [sp]
 8015568:	466b      	mov	r3, sp
 801556a:	47a0      	blx	r4
 801556c:	b002      	add	sp, #8
 801556e:	bd10      	pop	{r4, pc}

08015570 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015570:	2301      	movs	r3, #1
 8015572:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015576:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801557a:	4770      	bx	lr

0801557c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801557c:	2301      	movs	r3, #1
 801557e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015582:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015586:	4770      	bx	lr

08015588 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015588:	6843      	ldr	r3, [r0, #4]
 801558a:	2201      	movs	r2, #1
 801558c:	725a      	strb	r2, [r3, #9]
 801558e:	6840      	ldr	r0, [r0, #4]
 8015590:	6803      	ldr	r3, [r0, #0]
 8015592:	691b      	ldr	r3, [r3, #16]
 8015594:	4718      	bx	r3

08015596 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015596:	6840      	ldr	r0, [r0, #4]
 8015598:	6803      	ldr	r3, [r0, #0]
 801559a:	689b      	ldr	r3, [r3, #8]
 801559c:	4718      	bx	r3
	...

080155a0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80155a0:	4b04      	ldr	r3, [pc, #16]	; (80155b4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	b123      	cbz	r3, 80155b0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80155a6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80155aa:	f080 0001 	eor.w	r0, r0, #1
 80155ae:	4770      	bx	lr
 80155b0:	2001      	movs	r0, #1
 80155b2:	4770      	bx	lr
 80155b4:	2000bc6e 	.word	0x2000bc6e

080155b8 <_ZN8touchgfx3HAL8endFrameEv>:
 80155b8:	b510      	push	{r4, lr}
 80155ba:	4604      	mov	r4, r0
 80155bc:	6840      	ldr	r0, [r0, #4]
 80155be:	6803      	ldr	r3, [r0, #0]
 80155c0:	689b      	ldr	r3, [r3, #8]
 80155c2:	4798      	blx	r3
 80155c4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80155c8:	b113      	cbz	r3, 80155d0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80155ca:	2301      	movs	r3, #1
 80155cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80155d0:	bd10      	pop	{r4, pc}

080155d2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80155d2:	b508      	push	{r3, lr}
 80155d4:	6803      	ldr	r3, [r0, #0]
 80155d6:	4604      	mov	r4, r0
 80155d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80155da:	4798      	blx	r3
 80155dc:	6823      	ldr	r3, [r4, #0]
 80155de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80155e0:	4620      	mov	r0, r4
 80155e2:	4798      	blx	r3
 80155e4:	f7fd fed4 	bl	8013390 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80155e8:	6823      	ldr	r3, [r4, #0]
 80155ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155ec:	e7f8      	b.n	80155e0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080155f0 <_ZN8touchgfx3HAL4tickEv>:
 80155f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80155f2:	6803      	ldr	r3, [r0, #0]
 80155f4:	4604      	mov	r4, r0
 80155f6:	4d5c      	ldr	r5, [pc, #368]	; (8015768 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80155f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80155fc:	4798      	blx	r3
 80155fe:	2800      	cmp	r0, #0
 8015600:	f000 8097 	beq.w	8015732 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015604:	2001      	movs	r0, #1
 8015606:	2600      	movs	r6, #0
 8015608:	f7fd fba6 	bl	8012d58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801560c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015610:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015614:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015618:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801561c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015620:	b133      	cbz	r3, 8015630 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015622:	6823      	ldr	r3, [r4, #0]
 8015624:	4620      	mov	r0, r4
 8015626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801562a:	4798      	blx	r3
 801562c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015630:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015634:	2601      	movs	r6, #1
 8015636:	6862      	ldr	r2, [r4, #4]
 8015638:	f083 0301 	eor.w	r3, r3, #1
 801563c:	702e      	strb	r6, [r5, #0]
 801563e:	7253      	strb	r3, [r2, #9]
 8015640:	f002 fff0 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 8015644:	6803      	ldr	r3, [r0, #0]
 8015646:	4631      	mov	r1, r6
 8015648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801564a:	4798      	blx	r3
 801564c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015650:	b90b      	cbnz	r3, 8015656 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015652:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015656:	f002 ffe5 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 801565a:	6803      	ldr	r3, [r0, #0]
 801565c:	695b      	ldr	r3, [r3, #20]
 801565e:	4798      	blx	r3
 8015660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015662:	6803      	ldr	r3, [r0, #0]
 8015664:	691b      	ldr	r3, [r3, #16]
 8015666:	4798      	blx	r3
 8015668:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801566c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015670:	3b01      	subs	r3, #1
 8015672:	b2db      	uxtb	r3, r3
 8015674:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015678:	b10a      	cbz	r2, 801567e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1eb      	bne.n	8015656 <_ZN8touchgfx3HAL4tickEv+0x66>
 801567e:	4a3b      	ldr	r2, [pc, #236]	; (801576c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015680:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015684:	7813      	ldrb	r3, [r2, #0]
 8015686:	3301      	adds	r3, #1
 8015688:	b25b      	sxtb	r3, r3
 801568a:	4299      	cmp	r1, r3
 801568c:	7013      	strb	r3, [r2, #0]
 801568e:	dc10      	bgt.n	80156b2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015690:	2300      	movs	r3, #0
 8015692:	68e0      	ldr	r0, [r4, #12]
 8015694:	a902      	add	r1, sp, #8
 8015696:	7013      	strb	r3, [r2, #0]
 8015698:	aa03      	add	r2, sp, #12
 801569a:	6803      	ldr	r3, [r0, #0]
 801569c:	68db      	ldr	r3, [r3, #12]
 801569e:	4798      	blx	r3
 80156a0:	6823      	ldr	r3, [r4, #0]
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d051      	beq.n	801574a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80156a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156aa:	4620      	mov	r0, r4
 80156ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80156b0:	4798      	blx	r3
 80156b2:	2300      	movs	r3, #0
 80156b4:	6960      	ldr	r0, [r4, #20]
 80156b6:	f88d 3007 	strb.w	r3, [sp, #7]
 80156ba:	b158      	cbz	r0, 80156d4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80156bc:	6803      	ldr	r3, [r0, #0]
 80156be:	f10d 0107 	add.w	r1, sp, #7
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	4798      	blx	r3
 80156c6:	b128      	cbz	r0, 80156d4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80156c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80156ce:	6803      	ldr	r3, [r0, #0]
 80156d0:	68db      	ldr	r3, [r3, #12]
 80156d2:	4798      	blx	r3
 80156d4:	f104 001c 	add.w	r0, r4, #28
 80156d8:	f00d facc 	bl	8022c74 <_ZN8touchgfx8Gestures4tickEv>
 80156dc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80156e0:	b30b      	cbz	r3, 8015726 <_ZN8touchgfx3HAL4tickEv+0x136>
 80156e2:	6920      	ldr	r0, [r4, #16]
 80156e4:	6803      	ldr	r3, [r0, #0]
 80156e6:	691b      	ldr	r3, [r3, #16]
 80156e8:	4798      	blx	r3
 80156ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156ec:	4606      	mov	r6, r0
 80156ee:	b903      	cbnz	r3, 80156f2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80156f0:	6720      	str	r0, [r4, #112]	; 0x70
 80156f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156f4:	4a1e      	ldr	r2, [pc, #120]	; (8015770 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80156f6:	1af3      	subs	r3, r6, r3
 80156f8:	4293      	cmp	r3, r2
 80156fa:	d914      	bls.n	8015726 <_ZN8touchgfx3HAL4tickEv+0x136>
 80156fc:	6920      	ldr	r0, [r4, #16]
 80156fe:	6803      	ldr	r3, [r0, #0]
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	4798      	blx	r3
 8015704:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015706:	2264      	movs	r2, #100	; 0x64
 8015708:	1af3      	subs	r3, r6, r3
 801570a:	fbb3 f3f2 	udiv	r3, r3, r2
 801570e:	fbb0 f0f3 	udiv	r0, r0, r3
 8015712:	2800      	cmp	r0, #0
 8015714:	dc1e      	bgt.n	8015754 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015716:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801571a:	6920      	ldr	r0, [r4, #16]
 801571c:	2100      	movs	r1, #0
 801571e:	6803      	ldr	r3, [r0, #0]
 8015720:	69db      	ldr	r3, [r3, #28]
 8015722:	4798      	blx	r3
 8015724:	6726      	str	r6, [r4, #112]	; 0x70
 8015726:	f002 ff7d 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 801572a:	6803      	ldr	r3, [r0, #0]
 801572c:	2100      	movs	r1, #0
 801572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015730:	4798      	blx	r3
 8015732:	6823      	ldr	r3, [r4, #0]
 8015734:	4620      	mov	r0, r4
 8015736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801573a:	4798      	blx	r3
 801573c:	2001      	movs	r0, #1
 801573e:	f7fd fb16 	bl	8012d6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015742:	2300      	movs	r3, #0
 8015744:	702b      	strb	r3, [r5, #0]
 8015746:	b004      	add	sp, #16
 8015748:	bd70      	pop	{r4, r5, r6, pc}
 801574a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801574e:	4620      	mov	r0, r4
 8015750:	4798      	blx	r3
 8015752:	e7ae      	b.n	80156b2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015754:	2863      	cmp	r0, #99	; 0x63
 8015756:	bfcb      	itete	gt
 8015758:	2300      	movgt	r3, #0
 801575a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801575e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015762:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015766:	e7d8      	b.n	801571a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015768:	2000bc74 	.word	0x2000bc74
 801576c:	2000bc75 	.word	0x2000bc75
 8015770:	05f5e100 	.word	0x05f5e100

08015774 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015774:	f7fd bdac 	b.w	80132d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015778 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015778:	6581      	str	r1, [r0, #88]	; 0x58
 801577a:	301c      	adds	r0, #28
 801577c:	f00d ba78 	b.w	8022c70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015780 <_ZN8touchgfx3HAL5touchEll>:
 8015780:	b530      	push	{r4, r5, lr}
 8015782:	b087      	sub	sp, #28
 8015784:	4604      	mov	r4, r0
 8015786:	a804      	add	r0, sp, #16
 8015788:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801578c:	f002 fd4e 	bl	801822c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015790:	9b04      	ldr	r3, [sp, #16]
 8015792:	a906      	add	r1, sp, #24
 8015794:	a803      	add	r0, sp, #12
 8015796:	f8ad 300c 	strh.w	r3, [sp, #12]
 801579a:	9b05      	ldr	r3, [sp, #20]
 801579c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80157a0:	f002 fd92 	bl	80182c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80157a4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80157a8:	f104 001c 	add.w	r0, r4, #28
 80157ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80157b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80157b4:	b189      	cbz	r1, 80157da <_ZN8touchgfx3HAL5touchEll+0x5a>
 80157b6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	4613      	mov	r3, r2
 80157be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80157c2:	462a      	mov	r2, r5
 80157c4:	f00d fa64 	bl	8022c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80157c8:	b128      	cbz	r0, 80157d6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80157ca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80157ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80157d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80157d4:	6623      	str	r3, [r4, #96]	; 0x60
 80157d6:	b007      	add	sp, #28
 80157d8:	bd30      	pop	{r4, r5, pc}
 80157da:	f00d fa9d 	bl	8022d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80157de:	2301      	movs	r3, #1
 80157e0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80157e4:	e7f1      	b.n	80157ca <_ZN8touchgfx3HAL5touchEll+0x4a>

080157e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80157e6:	b570      	push	{r4, r5, r6, lr}
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d050      	beq.n	801588e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80157ec:	ea81 0002 	eor.w	r0, r1, r2
 80157f0:	07c6      	lsls	r6, r0, #31
 80157f2:	d508      	bpl.n	8015806 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80157f4:	3a01      	subs	r2, #1
 80157f6:	18cc      	adds	r4, r1, r3
 80157f8:	42a1      	cmp	r1, r4
 80157fa:	d048      	beq.n	801588e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80157fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015800:	f801 0b01 	strb.w	r0, [r1], #1
 8015804:	e7f8      	b.n	80157f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015806:	07d5      	lsls	r5, r2, #31
 8015808:	bf42      	ittt	mi
 801580a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801580e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015812:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015816:	2b01      	cmp	r3, #1
 8015818:	d915      	bls.n	8015846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801581a:	ea82 0001 	eor.w	r0, r2, r1
 801581e:	0784      	lsls	r4, r0, #30
 8015820:	d02d      	beq.n	801587e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015822:	1e94      	subs	r4, r2, #2
 8015824:	4608      	mov	r0, r1
 8015826:	18ce      	adds	r6, r1, r3
 8015828:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801582c:	f820 5b02 	strh.w	r5, [r0], #2
 8015830:	1a35      	subs	r5, r6, r0
 8015832:	2d01      	cmp	r5, #1
 8015834:	d8f8      	bhi.n	8015828 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015836:	1e98      	subs	r0, r3, #2
 8015838:	f003 0301 	and.w	r3, r3, #1
 801583c:	f020 0001 	bic.w	r0, r0, #1
 8015840:	3002      	adds	r0, #2
 8015842:	4401      	add	r1, r0
 8015844:	4402      	add	r2, r0
 8015846:	1f14      	subs	r4, r2, #4
 8015848:	4608      	mov	r0, r1
 801584a:	18ce      	adds	r6, r1, r3
 801584c:	1a35      	subs	r5, r6, r0
 801584e:	2d03      	cmp	r5, #3
 8015850:	d810      	bhi.n	8015874 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015852:	089c      	lsrs	r4, r3, #2
 8015854:	00a0      	lsls	r0, r4, #2
 8015856:	4401      	add	r1, r0
 8015858:	3801      	subs	r0, #1
 801585a:	4402      	add	r2, r0
 801585c:	f06f 0003 	mvn.w	r0, #3
 8015860:	fb00 3404 	mla	r4, r0, r4, r3
 8015864:	440c      	add	r4, r1
 8015866:	42a1      	cmp	r1, r4
 8015868:	d011      	beq.n	801588e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801586a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801586e:	f801 3b01 	strb.w	r3, [r1], #1
 8015872:	e7f8      	b.n	8015866 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015874:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015878:	f840 5b04 	str.w	r5, [r0], #4
 801587c:	e7e6      	b.n	801584c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801587e:	0790      	lsls	r0, r2, #30
 8015880:	d0e1      	beq.n	8015846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015882:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015886:	3b02      	subs	r3, #2
 8015888:	f821 0b02 	strh.w	r0, [r1], #2
 801588c:	e7db      	b.n	8015846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801588e:	2001      	movs	r0, #1
 8015890:	bd70      	pop	{r4, r5, r6, pc}

08015892 <_ZN8touchgfx3HAL7noTouchEv>:
 8015892:	b510      	push	{r4, lr}
 8015894:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015898:	4604      	mov	r4, r0
 801589a:	b153      	cbz	r3, 80158b2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801589c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80158a0:	2101      	movs	r1, #1
 80158a2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80158a6:	301c      	adds	r0, #28
 80158a8:	f00d fa36 	bl	8022d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80158ac:	2300      	movs	r3, #0
 80158ae:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80158b2:	bd10      	pop	{r4, pc}

080158b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80158b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158b8:	4605      	mov	r5, r0
 80158ba:	6980      	ldr	r0, [r0, #24]
 80158bc:	b085      	sub	sp, #20
 80158be:	460f      	mov	r7, r1
 80158c0:	4690      	mov	r8, r2
 80158c2:	4699      	mov	r9, r3
 80158c4:	b930      	cbnz	r0, 80158d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80158c6:	4b1f      	ldr	r3, [pc, #124]	; (8015944 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80158c8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80158cc:	4a1e      	ldr	r2, [pc, #120]	; (8015948 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80158ce:	481f      	ldr	r0, [pc, #124]	; (801594c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80158d0:	f00e fe9c 	bl	802460c <__assert_func>
 80158d4:	ac04      	add	r4, sp, #16
 80158d6:	2600      	movs	r6, #0
 80158d8:	f844 6d04 	str.w	r6, [r4, #-4]!
 80158dc:	6806      	ldr	r6, [r0, #0]
 80158de:	9401      	str	r4, [sp, #4]
 80158e0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80158e4:	9400      	str	r4, [sp, #0]
 80158e6:	6834      	ldr	r4, [r6, #0]
 80158e8:	47a0      	blx	r4
 80158ea:	4c19      	ldr	r4, [pc, #100]	; (8015950 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80158ec:	4606      	mov	r6, r0
 80158ee:	f8a4 9000 	strh.w	r9, [r4]
 80158f2:	f7f9 ff51 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 80158f6:	6803      	ldr	r3, [r0, #0]
 80158f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fa:	4798      	blx	r3
 80158fc:	280c      	cmp	r0, #12
 80158fe:	d80f      	bhi.n	8015920 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015900:	e8df f000 	tbb	[pc, r0]
 8015904:	1b1b1207 	.word	0x1b1b1207
 8015908:	1b1b1b1b 	.word	0x1b1b1b1b
 801590c:	1b1b1b1b 	.word	0x1b1b1b1b
 8015910:	1b          	.byte	0x1b
 8015911:	00          	.byte	0x00
 8015912:	8823      	ldrh	r3, [r4, #0]
 8015914:	fb08 7203 	mla	r2, r8, r3, r7
 8015918:	9b03      	ldr	r3, [sp, #12]
 801591a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801591e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015920:	4630      	mov	r0, r6
 8015922:	b005      	add	sp, #20
 8015924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015928:	8822      	ldrh	r2, [r4, #0]
 801592a:	9b03      	ldr	r3, [sp, #12]
 801592c:	fb08 7202 	mla	r2, r8, r2, r7
 8015930:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015934:	1a9a      	subs	r2, r3, r2
 8015936:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015938:	e7f2      	b.n	8015920 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801593a:	4b06      	ldr	r3, [pc, #24]	; (8015954 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801593c:	f240 114d 	movw	r1, #333	; 0x14d
 8015940:	4a01      	ldr	r2, [pc, #4]	; (8015948 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015942:	e7c4      	b.n	80158ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015944:	08026f8d 	.word	0x08026f8d
 8015948:	0802729e 	.word	0x0802729e
 801594c:	08026fd2 	.word	0x08026fd2
 8015950:	2000bc6a 	.word	0x2000bc6a
 8015954:	08026ff8 	.word	0x08026ff8

08015958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801595c:	4698      	mov	r8, r3
 801595e:	6803      	ldr	r3, [r0, #0]
 8015960:	b087      	sub	sp, #28
 8015962:	460e      	mov	r6, r1
 8015964:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015966:	4617      	mov	r7, r2
 8015968:	4b0d      	ldr	r3, [pc, #52]	; (80159a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801596a:	4604      	mov	r4, r0
 801596c:	f8b3 9000 	ldrh.w	r9, [r3]
 8015970:	f7f9 ff12 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015974:	6803      	ldr	r3, [r0, #0]
 8015976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015978:	4798      	blx	r3
 801597a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801597e:	463a      	mov	r2, r7
 8015980:	4631      	mov	r1, r6
 8015982:	9302      	str	r3, [sp, #8]
 8015984:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015988:	9301      	str	r3, [sp, #4]
 801598a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801598e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	4620      	mov	r0, r4
 8015996:	4643      	mov	r3, r8
 8015998:	47a8      	blx	r5
 801599a:	b007      	add	sp, #28
 801599c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159a0:	2000bc6a 	.word	0x2000bc6a

080159a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80159a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a8:	4606      	mov	r6, r0
 80159aa:	b089      	sub	sp, #36	; 0x24
 80159ac:	4610      	mov	r0, r2
 80159ae:	460c      	mov	r4, r1
 80159b0:	4691      	mov	r9, r2
 80159b2:	4698      	mov	r8, r3
 80159b4:	f005 f818 	bl	801a9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	f000 8092 	beq.w	8015ae2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80159be:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80159c2:	ad08      	add	r5, sp, #32
 80159c4:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80159c8:	f8da 0000 	ldr.w	r0, [sl]
 80159cc:	4f4a      	ldr	r7, [pc, #296]	; (8015af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80159ce:	6802      	ldr	r2, [r0, #0]
 80159d0:	6a12      	ldr	r2, [r2, #32]
 80159d2:	4790      	blx	r2
 80159d4:	f8da 0000 	ldr.w	r0, [sl]
 80159d8:	6802      	ldr	r2, [r0, #0]
 80159da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80159dc:	4790      	blx	r2
 80159de:	f8bb 3000 	ldrh.w	r3, [fp]
 80159e2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80159e6:	4628      	mov	r0, r5
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	883b      	ldrh	r3, [r7, #0]
 80159ec:	9301      	str	r3, [sp, #4]
 80159ee:	f005 f8bb 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80159f2:	f8ab 0000 	strh.w	r0, [fp]
 80159f6:	4628      	mov	r0, r5
 80159f8:	f005 f8f0 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80159fc:	f8da b000 	ldr.w	fp, [sl]
 8015a00:	8038      	strh	r0, [r7, #0]
 8015a02:	4648      	mov	r0, r9
 8015a04:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015a08:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015a0c:	9302      	str	r3, [sp, #8]
 8015a0e:	f004 ffeb 	bl	801a9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015a12:	f8da 2000 	ldr.w	r2, [sl]
 8015a16:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015a1a:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	6822      	ldr	r2, [r4, #0]
 8015a20:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015a24:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015a26:	2200      	movs	r2, #0
 8015a28:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	4798      	blx	r3
 8015a30:	2201      	movs	r2, #1
 8015a32:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015a36:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015a3a:	1d22      	adds	r2, r4, #4
 8015a3c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015a40:	2900      	cmp	r1, #0
 8015a42:	d051      	beq.n	8015ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015a44:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015a48:	2900      	cmp	r1, #0
 8015a4a:	d04d      	beq.n	8015ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015a4c:	6810      	ldr	r0, [r2, #0]
 8015a4e:	f10d 0c18 	add.w	ip, sp, #24
 8015a52:	6851      	ldr	r1, [r2, #4]
 8015a54:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015a58:	4641      	mov	r1, r8
 8015a5a:	a806      	add	r0, sp, #24
 8015a5c:	f7ff fc76 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8015a60:	4628      	mov	r0, r5
 8015a62:	f005 fa0d 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a66:	4680      	mov	r8, r0
 8015a68:	f7f9 fe96 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015a6c:	6802      	ldr	r2, [r0, #0]
 8015a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015a70:	4790      	blx	r2
 8015a72:	4580      	cmp	r8, r0
 8015a74:	d03d      	beq.n	8015af2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015a76:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a78:	b150      	cbz	r0, 8015a90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015a7a:	4628      	mov	r0, r5
 8015a7c:	f005 fa00 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a80:	4605      	mov	r5, r0
 8015a82:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a84:	6803      	ldr	r3, [r0, #0]
 8015a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a88:	4798      	blx	r3
 8015a8a:	1a2b      	subs	r3, r5, r0
 8015a8c:	4258      	negs	r0, r3
 8015a8e:	4158      	adcs	r0, r3
 8015a90:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015a94:	2500      	movs	r5, #0
 8015a96:	6963      	ldr	r3, [r4, #20]
 8015a98:	4620      	mov	r0, r4
 8015a9a:	6822      	ldr	r2, [r4, #0]
 8015a9c:	a906      	add	r1, sp, #24
 8015a9e:	6165      	str	r5, [r4, #20]
 8015aa0:	9303      	str	r3, [sp, #12]
 8015aa2:	6892      	ldr	r2, [r2, #8]
 8015aa4:	4790      	blx	r2
 8015aa6:	9b03      	ldr	r3, [sp, #12]
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4652      	mov	r2, sl
 8015aac:	6163      	str	r3, [r4, #20]
 8015aae:	4649      	mov	r1, r9
 8015ab0:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015aba:	4c10      	ldr	r4, [pc, #64]	; (8015afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015abe:	4798      	blx	r3
 8015ac0:	6820      	ldr	r0, [r4, #0]
 8015ac2:	9b02      	ldr	r3, [sp, #8]
 8015ac4:	9a00      	ldr	r2, [sp, #0]
 8015ac6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015aca:	4b0d      	ldr	r3, [pc, #52]	; (8015b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015acc:	801a      	strh	r2, [r3, #0]
 8015ace:	4b0a      	ldr	r3, [pc, #40]	; (8015af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015ad0:	9a01      	ldr	r2, [sp, #4]
 8015ad2:	801a      	strh	r2, [r3, #0]
 8015ad4:	6803      	ldr	r3, [r0, #0]
 8015ad6:	6a1b      	ldr	r3, [r3, #32]
 8015ad8:	4798      	blx	r3
 8015ada:	6820      	ldr	r0, [r4, #0]
 8015adc:	6803      	ldr	r3, [r0, #0]
 8015ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae0:	4798      	blx	r3
 8015ae2:	b009      	add	sp, #36	; 0x24
 8015ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae8:	ab06      	add	r3, sp, #24
 8015aea:	6810      	ldr	r0, [r2, #0]
 8015aec:	6851      	ldr	r1, [r2, #4]
 8015aee:	c303      	stmia	r3!, {r0, r1}
 8015af0:	e7b6      	b.n	8015a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015af2:	2000      	movs	r0, #0
 8015af4:	e7cc      	b.n	8015a90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015af6:	bf00      	nop
 8015af8:	2000bc6c 	.word	0x2000bc6c
 8015afc:	2000bc70 	.word	0x2000bc70
 8015b00:	2000bc6a 	.word	0x2000bc6a

08015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015b04:	4b07      	ldr	r3, [pc, #28]	; (8015b24 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015b06:	b510      	push	{r4, lr}
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	b13b      	cbz	r3, 8015b1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015b0e:	6803      	ldr	r3, [r0, #0]
 8015b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b12:	4798      	blx	r3
 8015b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b16:	4283      	cmp	r3, r0
 8015b18:	d101      	bne.n	8015b1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015b1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015b1c:	bd10      	pop	{r4, pc}
 8015b1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015b20:	e7fc      	b.n	8015b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015b22:	bf00      	nop
 8015b24:	2000bc6e 	.word	0x2000bc6e

08015b28 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015b28:	4b0b      	ldr	r3, [pc, #44]	; (8015b58 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015b2a:	b510      	push	{r4, lr}
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	4604      	mov	r4, r0
 8015b30:	b95b      	cbnz	r3, 8015b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b32:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015b36:	2b02      	cmp	r3, #2
 8015b38:	d007      	beq.n	8015b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b3a:	6840      	ldr	r0, [r0, #4]
 8015b3c:	f000 fbc8 	bl	80162d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015b40:	b118      	cbz	r0, 8015b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015b42:	6862      	ldr	r2, [r4, #4]
 8015b44:	7a53      	ldrb	r3, [r2, #9]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d0fc      	beq.n	8015b44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015b4a:	f7fd fbb3 	bl	80132b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f7ff ffd8 	bl	8015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b54:	bd10      	pop	{r4, pc}
 8015b56:	bf00      	nop
 8015b58:	2000bc6e 	.word	0x2000bc6e

08015b5c <_ZN8touchgfx3HAL10initializeEv>:
 8015b5c:	b510      	push	{r4, lr}
 8015b5e:	4604      	mov	r4, r0
 8015b60:	f7fd fb84 	bl	801326c <_ZN8touchgfx10OSWrappers10initializeEv>
 8015b64:	6860      	ldr	r0, [r4, #4]
 8015b66:	6803      	ldr	r3, [r0, #0]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	4798      	blx	r3
 8015b6c:	68e0      	ldr	r0, [r4, #12]
 8015b6e:	6803      	ldr	r3, [r0, #0]
 8015b70:	689b      	ldr	r3, [r3, #8]
 8015b72:	4798      	blx	r3
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	4620      	mov	r0, r4
 8015b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b7e:	4718      	bx	r3

08015b80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015b80:	b508      	push	{r3, lr}
 8015b82:	290c      	cmp	r1, #12
 8015b84:	d817      	bhi.n	8015bb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015b86:	e8df f001 	tbb	[pc, r1]
 8015b8a:	090b      	.short	0x090b
 8015b8c:	0d0d0d07 	.word	0x0d0d0d07
 8015b90:	1414140d 	.word	0x1414140d
 8015b94:	1414      	.short	0x1414
 8015b96:	0d          	.byte	0x0d
 8015b97:	00          	.byte	0x00
 8015b98:	2020      	movs	r0, #32
 8015b9a:	bd08      	pop	{r3, pc}
 8015b9c:	2018      	movs	r0, #24
 8015b9e:	e7fc      	b.n	8015b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015ba0:	2010      	movs	r0, #16
 8015ba2:	e7fa      	b.n	8015b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015ba4:	4b05      	ldr	r3, [pc, #20]	; (8015bbc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015ba6:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015baa:	4a05      	ldr	r2, [pc, #20]	; (8015bc0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015bac:	4805      	ldr	r0, [pc, #20]	; (8015bc4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015bae:	f00e fd2d 	bl	802460c <__assert_func>
 8015bb2:	2008      	movs	r0, #8
 8015bb4:	e7f1      	b.n	8015b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bb6:	2000      	movs	r0, #0
 8015bb8:	e7ef      	b.n	8015b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015bba:	bf00      	nop
 8015bbc:	080270cb 	.word	0x080270cb
 8015bc0:	08027460 	.word	0x08027460
 8015bc4:	08026fd2 	.word	0x08026fd2

08015bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	460d      	mov	r5, r1
 8015bcc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015bd0:	4616      	mov	r6, r2
 8015bd2:	461c      	mov	r4, r3
 8015bd4:	f7ff ffd4 	bl	8015b80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015bd8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015bdc:	10c0      	asrs	r0, r0, #3
 8015bde:	fb06 5101 	mla	r1, r6, r1, r5
 8015be2:	fb00 4001 	mla	r0, r0, r1, r4
 8015be6:	bd70      	pop	{r4, r5, r6, pc}

08015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bec:	b08a      	sub	sp, #40	; 0x28
 8015bee:	f04f 0c00 	mov.w	ip, #0
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	469a      	mov	sl, r3
 8015bf6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015bfa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015bfe:	f1b8 0f02 	cmp.w	r8, #2
 8015c02:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015c06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015c0a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015c0e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015c12:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015c16:	f8cd c020 	str.w	ip, [sp, #32]
 8015c1a:	d030      	beq.n	8015c7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015c1c:	2bff      	cmp	r3, #255	; 0xff
 8015c1e:	d12c      	bne.n	8015c7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015c20:	4560      	cmp	r0, ip
 8015c22:	bf14      	ite	ne
 8015c24:	2004      	movne	r0, #4
 8015c26:	2001      	moveq	r0, #1
 8015c28:	9204      	str	r2, [sp, #16]
 8015c2a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015c2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015c36:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015c3a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c42:	4620      	mov	r0, r4
 8015c44:	f7ff ff5e 	bl	8015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c48:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	4651      	mov	r1, sl
 8015c50:	4620      	mov	r0, r4
 8015c52:	e9cd 9700 	strd	r9, r7, [sp]
 8015c56:	f7ff ffb7 	bl	8015bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015c5a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015c5e:	9005      	str	r0, [sp, #20]
 8015c60:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015c64:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015c68:	b106      	cbz	r6, 8015c6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015c6a:	b98d      	cbnz	r5, 8015c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015c6c:	4b12      	ldr	r3, [pc, #72]	; (8015cb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015c6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015c72:	4a12      	ldr	r2, [pc, #72]	; (8015cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015c74:	4812      	ldr	r0, [pc, #72]	; (8015cc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015c76:	f00e fcc9 	bl	802460c <__assert_func>
 8015c7a:	2004      	movs	r0, #4
 8015c7c:	e7d4      	b.n	8015c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c7e:	2bff      	cmp	r3, #255	; 0xff
 8015c80:	d104      	bne.n	8015c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015c82:	2800      	cmp	r0, #0
 8015c84:	bf14      	ite	ne
 8015c86:	2040      	movne	r0, #64	; 0x40
 8015c88:	2020      	moveq	r0, #32
 8015c8a:	e7cd      	b.n	8015c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c8c:	2040      	movs	r0, #64	; 0x40
 8015c8e:	e7cb      	b.n	8015c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c90:	6823      	ldr	r3, [r4, #0]
 8015c92:	4620      	mov	r0, r4
 8015c94:	9d02      	ldr	r5, [sp, #8]
 8015c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c98:	4798      	blx	r3
 8015c9a:	4228      	tst	r0, r5
 8015c9c:	d104      	bne.n	8015ca8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015c9e:	4b09      	ldr	r3, [pc, #36]	; (8015cc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015ca0:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015ca4:	4a05      	ldr	r2, [pc, #20]	; (8015cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015ca6:	e7e5      	b.n	8015c74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015ca8:	6860      	ldr	r0, [r4, #4]
 8015caa:	a902      	add	r1, sp, #8
 8015cac:	6803      	ldr	r3, [r0, #0]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	4798      	blx	r3
 8015cb2:	b00a      	add	sp, #40	; 0x28
 8015cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb8:	0802704e 	.word	0x0802704e
 8015cbc:	08027302 	.word	0x08027302
 8015cc0:	08026fd2 	.word	0x08026fd2
 8015cc4:	08027086 	.word	0x08027086

08015cc8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015cc8:	b510      	push	{r4, lr}
 8015cca:	b08a      	sub	sp, #40	; 0x28
 8015ccc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015cd0:	9408      	str	r4, [sp, #32]
 8015cd2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015cd6:	9407      	str	r4, [sp, #28]
 8015cd8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015cdc:	9406      	str	r4, [sp, #24]
 8015cde:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8015ce2:	9405      	str	r4, [sp, #20]
 8015ce4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015ce8:	9404      	str	r4, [sp, #16]
 8015cea:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8015cee:	9403      	str	r4, [sp, #12]
 8015cf0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015cf4:	9402      	str	r4, [sp, #8]
 8015cf6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015cfa:	e9cd 3400 	strd	r3, r4, [sp]
 8015cfe:	4613      	mov	r3, r2
 8015d00:	2200      	movs	r2, #0
 8015d02:	f7ff ff71 	bl	8015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d06:	b00a      	add	sp, #40	; 0x28
 8015d08:	bd10      	pop	{r4, pc}
	...

08015d0c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d0e:	b08b      	sub	sp, #44	; 0x2c
 8015d10:	4616      	mov	r6, r2
 8015d12:	460d      	mov	r5, r1
 8015d14:	461f      	mov	r7, r3
 8015d16:	4604      	mov	r4, r0
 8015d18:	f7f9 fd3e 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015d1c:	6803      	ldr	r3, [r0, #0]
 8015d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d20:	4798      	blx	r3
 8015d22:	4b0e      	ldr	r3, [pc, #56]	; (8015d5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	4629      	mov	r1, r5
 8015d28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015d2c:	881b      	ldrh	r3, [r3, #0]
 8015d2e:	4620      	mov	r0, r4
 8015d30:	9306      	str	r3, [sp, #24]
 8015d32:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015d36:	9305      	str	r3, [sp, #20]
 8015d38:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015d3c:	9304      	str	r3, [sp, #16]
 8015d3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015d42:	9303      	str	r3, [sp, #12]
 8015d44:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015d48:	9302      	str	r3, [sp, #8]
 8015d4a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015d4e:	e9cd 7300 	strd	r7, r3, [sp]
 8015d52:	4633      	mov	r3, r6
 8015d54:	f7ff ff48 	bl	8015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d58:	b00b      	add	sp, #44	; 0x2c
 8015d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d5c:	2000bc6a 	.word	0x2000bc6a

08015d60 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d64:	461f      	mov	r7, r3
 8015d66:	4b14      	ldr	r3, [pc, #80]	; (8015db8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015d68:	b08a      	sub	sp, #40	; 0x28
 8015d6a:	4616      	mov	r6, r2
 8015d6c:	f8b3 8000 	ldrh.w	r8, [r3]
 8015d70:	460d      	mov	r5, r1
 8015d72:	4604      	mov	r4, r0
 8015d74:	f7f9 fd10 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015d78:	6803      	ldr	r3, [r0, #0]
 8015d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d7c:	4798      	blx	r3
 8015d7e:	2302      	movs	r3, #2
 8015d80:	9008      	str	r0, [sp, #32]
 8015d82:	2200      	movs	r2, #0
 8015d84:	4629      	mov	r1, r5
 8015d86:	4620      	mov	r0, r4
 8015d88:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	9305      	str	r3, [sp, #20]
 8015d90:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015d94:	9304      	str	r3, [sp, #16]
 8015d96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015d9a:	9303      	str	r3, [sp, #12]
 8015d9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015da0:	9302      	str	r3, [sp, #8]
 8015da2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015da6:	e9cd 7300 	strd	r7, r3, [sp]
 8015daa:	4633      	mov	r3, r6
 8015dac:	f7ff ff1c 	bl	8015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015db0:	b00a      	add	sp, #40	; 0x28
 8015db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015db6:	bf00      	nop
 8015db8:	2000bc6a 	.word	0x2000bc6a

08015dbc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dc0:	b08b      	sub	sp, #44	; 0x2c
 8015dc2:	469b      	mov	fp, r3
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	4692      	mov	sl, r2
 8015dc8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015dcc:	2600      	movs	r6, #0
 8015dce:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015dd2:	4689      	mov	r9, r1
 8015dd4:	2fff      	cmp	r7, #255	; 0xff
 8015dd6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015dda:	9608      	str	r6, [sp, #32]
 8015ddc:	bf14      	ite	ne
 8015dde:	2308      	movne	r3, #8
 8015de0:	2302      	moveq	r3, #2
 8015de2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015de6:	f7ff fe8d 	bl	8015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015dea:	465a      	mov	r2, fp
 8015dec:	4603      	mov	r3, r0
 8015dee:	4651      	mov	r1, sl
 8015df0:	4620      	mov	r0, r4
 8015df2:	e9cd 8500 	strd	r8, r5, [sp]
 8015df6:	f7ff fee7 	bl	8015bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015dfa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015dfe:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015e02:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015e06:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015e0a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015e0e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	9d02      	ldr	r5, [sp, #8]
 8015e16:	9005      	str	r0, [sp, #20]
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015e1e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015e22:	f8cd 9020 	str.w	r9, [sp, #32]
 8015e26:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e2c:	4798      	blx	r3
 8015e2e:	4228      	tst	r0, r5
 8015e30:	d106      	bne.n	8015e40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015e32:	4b07      	ldr	r3, [pc, #28]	; (8015e50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015e34:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015e38:	4a06      	ldr	r2, [pc, #24]	; (8015e54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015e3a:	4807      	ldr	r0, [pc, #28]	; (8015e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015e3c:	f00e fbe6 	bl	802460c <__assert_func>
 8015e40:	6860      	ldr	r0, [r4, #4]
 8015e42:	a902      	add	r1, sp, #8
 8015e44:	6803      	ldr	r3, [r0, #0]
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	4798      	blx	r3
 8015e4a:	b00b      	add	sp, #44	; 0x2c
 8015e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e50:	08027086 	.word	0x08027086
 8015e54:	080273cb 	.word	0x080273cb
 8015e58:	08026fd2 	.word	0x08026fd2

08015e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e60:	461f      	mov	r7, r3
 8015e62:	4b0b      	ldr	r3, [pc, #44]	; (8015e90 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015e64:	460d      	mov	r5, r1
 8015e66:	4616      	mov	r6, r2
 8015e68:	f8b3 8000 	ldrh.w	r8, [r3]
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	f7f9 fc93 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e76:	4798      	blx	r3
 8015e78:	463b      	mov	r3, r7
 8015e7a:	4632      	mov	r2, r6
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	e9cd 8000 	strd	r8, r0, [sp]
 8015e82:	4620      	mov	r0, r4
 8015e84:	f7ff fea0 	bl	8015bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015e88:	b002      	add	sp, #8
 8015e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e8e:	bf00      	nop
 8015e90:	2000bc6a 	.word	0x2000bc6a

08015e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e98:	4698      	mov	r8, r3
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	4617      	mov	r7, r2
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015ea6:	9306      	str	r3, [sp, #24]
 8015ea8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015eac:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015eb0:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015eb4:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015eb8:	e9cd 3100 	strd	r3, r1, [sp]
 8015ebc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015ec8:	f88d 301c 	strb.w	r3, [sp, #28]
 8015ecc:	f7ff fe1a 	bl	8015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ed0:	4642      	mov	r2, r8
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	4639      	mov	r1, r7
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	f7ff ffc0 	bl	8015e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015edc:	4b16      	ldr	r3, [pc, #88]	; (8015f38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015ede:	9003      	str	r0, [sp, #12]
 8015ee0:	881b      	ldrh	r3, [r3, #0]
 8015ee2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ee6:	f7f9 fc57 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eee:	4798      	blx	r3
 8015ef0:	f88d 001e 	strb.w	r0, [sp, #30]
 8015ef4:	f88d 001d 	strb.w	r0, [sp, #29]
 8015ef8:	b106      	cbz	r6, 8015efc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015efa:	b935      	cbnz	r5, 8015f0a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015efc:	4b0f      	ldr	r3, [pc, #60]	; (8015f3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015efe:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015f02:	4a0f      	ldr	r2, [pc, #60]	; (8015f40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015f04:	480f      	ldr	r0, [pc, #60]	; (8015f44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015f06:	f00e fb81 	bl	802460c <__assert_func>
 8015f0a:	6823      	ldr	r3, [r4, #0]
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	9d00      	ldr	r5, [sp, #0]
 8015f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f12:	4798      	blx	r3
 8015f14:	4228      	tst	r0, r5
 8015f16:	d104      	bne.n	8015f22 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015f18:	4b0b      	ldr	r3, [pc, #44]	; (8015f48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015f1a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8015f1e:	4a08      	ldr	r2, [pc, #32]	; (8015f40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015f20:	e7f0      	b.n	8015f04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f24:	4669      	mov	r1, sp
 8015f26:	6860      	ldr	r0, [r4, #4]
 8015f28:	9306      	str	r3, [sp, #24]
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	685b      	ldr	r3, [r3, #4]
 8015f2e:	4798      	blx	r3
 8015f30:	b008      	add	sp, #32
 8015f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f36:	bf00      	nop
 8015f38:	2000bc6a 	.word	0x2000bc6a
 8015f3c:	0802704e 	.word	0x0802704e
 8015f40:	080271b4 	.word	0x080271b4
 8015f44:	08026fd2 	.word	0x08026fd2
 8015f48:	08027086 	.word	0x08027086

08015f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015f4c:	b570      	push	{r4, r5, r6, lr}
 8015f4e:	b08a      	sub	sp, #40	; 0x28
 8015f50:	4604      	mov	r4, r0
 8015f52:	466b      	mov	r3, sp
 8015f54:	e883 0006 	stmia.w	r3, {r1, r2}
 8015f58:	4b1f      	ldr	r3, [pc, #124]	; (8015fd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	b933      	cbnz	r3, 8015f6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015f5e:	4b1f      	ldr	r3, [pc, #124]	; (8015fdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015f60:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015f64:	4a1e      	ldr	r2, [pc, #120]	; (8015fe0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015f66:	481f      	ldr	r0, [pc, #124]	; (8015fe4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015f68:	f00e fb50 	bl	802460c <__assert_func>
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	f8bd 5000 	ldrh.w	r5, [sp]
 8015f72:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015f76:	9308      	str	r3, [sp, #32]
 8015f78:	2301      	movs	r3, #1
 8015f7a:	9302      	str	r3, [sp, #8]
 8015f7c:	6803      	ldr	r3, [r0, #0]
 8015f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f80:	4798      	blx	r3
 8015f82:	4632      	mov	r2, r6
 8015f84:	4629      	mov	r1, r5
 8015f86:	4603      	mov	r3, r0
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f7ff ff67 	bl	8015e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015f8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015f90:	9003      	str	r0, [sp, #12]
 8015f92:	9305      	str	r3, [sp, #20]
 8015f94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015fa0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015fa4:	4b10      	ldr	r3, [pc, #64]	; (8015fe8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015fa6:	881b      	ldrh	r3, [r3, #0]
 8015fa8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015fb0:	f7f9 fbf2 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb8:	4798      	blx	r3
 8015fba:	23ff      	movs	r3, #255	; 0xff
 8015fbc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015fc0:	a902      	add	r1, sp, #8
 8015fc2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015fc6:	6860      	ldr	r0, [r4, #4]
 8015fc8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015fcc:	6803      	ldr	r3, [r0, #0]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	4798      	blx	r3
 8015fd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015fd4:	b00a      	add	sp, #40	; 0x28
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}
 8015fd8:	2000bc6f 	.word	0x2000bc6f
 8015fdc:	08026f1f 	.word	0x08026f1f
 8015fe0:	08027258 	.word	0x08027258
 8015fe4:	08026fd2 	.word	0x08026fd2
 8015fe8:	2000bc6a 	.word	0x2000bc6a

08015fec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fee:	b08b      	sub	sp, #44	; 0x2c
 8015ff0:	4604      	mov	r4, r0
 8015ff2:	466d      	mov	r5, sp
 8015ff4:	e885 0006 	stmia.w	r5, {r1, r2}
 8015ff8:	461d      	mov	r5, r3
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f8bd 6000 	ldrh.w	r6, [sp]
 8016000:	9308      	str	r3, [sp, #32]
 8016002:	2301      	movs	r3, #1
 8016004:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016008:	9302      	str	r3, [sp, #8]
 801600a:	6803      	ldr	r3, [r0, #0]
 801600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801600e:	4798      	blx	r3
 8016010:	463a      	mov	r2, r7
 8016012:	4631      	mov	r1, r6
 8016014:	4603      	mov	r3, r0
 8016016:	4620      	mov	r0, r4
 8016018:	f7ff ff20 	bl	8015e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801601c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016020:	9003      	str	r0, [sp, #12]
 8016022:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016026:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801602a:	9505      	str	r5, [sp, #20]
 801602c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016030:	4b0d      	ldr	r3, [pc, #52]	; (8016068 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016032:	881b      	ldrh	r3, [r3, #0]
 8016034:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801603a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801603e:	f7f9 fbab 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8016042:	6803      	ldr	r3, [r0, #0]
 8016044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016046:	4798      	blx	r3
 8016048:	23ff      	movs	r3, #255	; 0xff
 801604a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801604e:	a902      	add	r1, sp, #8
 8016050:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016054:	6860      	ldr	r0, [r4, #4]
 8016056:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801605a:	6803      	ldr	r3, [r0, #0]
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	4798      	blx	r3
 8016060:	4628      	mov	r0, r5
 8016062:	b00b      	add	sp, #44	; 0x2c
 8016064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016066:	bf00      	nop
 8016068:	2000bc6a 	.word	0x2000bc6a

0801606c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016072:	4604      	mov	r4, r0
 8016074:	b19b      	cbz	r3, 801609e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016076:	2002      	movs	r0, #2
 8016078:	f7fc fe84 	bl	8012d84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801607c:	2300      	movs	r3, #0
 801607e:	4620      	mov	r0, r4
 8016080:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016084:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016088:	6823      	ldr	r3, [r4, #0]
 801608a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801608e:	f7ff fd39 	bl	8015b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016092:	4601      	mov	r1, r0
 8016094:	4620      	mov	r0, r4
 8016096:	462b      	mov	r3, r5
 8016098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801609c:	4718      	bx	r3
 801609e:	bd70      	pop	{r4, r5, r6, pc}

080160a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80160a0:	4770      	bx	lr

080160a2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80160a2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80160a6:	1a13      	subs	r3, r2, r0
 80160a8:	4258      	negs	r0, r3
 80160aa:	4158      	adcs	r0, r3
 80160ac:	4770      	bx	lr

080160ae <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80160ae:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80160b2:	1a9b      	subs	r3, r3, r2
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	bfdc      	itt	le
 80160b8:	6882      	ldrle	r2, [r0, #8]
 80160ba:	189b      	addle	r3, r3, r2
 80160bc:	2b01      	cmp	r3, #1
 80160be:	bfcc      	ite	gt
 80160c0:	2000      	movgt	r0, #0
 80160c2:	2001      	movle	r0, #1
 80160c4:	4770      	bx	lr

080160c6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80160c6:	6902      	ldr	r2, [r0, #16]
 80160c8:	6840      	ldr	r0, [r0, #4]
 80160ca:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80160ce:	4770      	bx	lr

080160d0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80160d0:	6803      	ldr	r3, [r0, #0]
 80160d2:	691b      	ldr	r3, [r3, #16]
 80160d4:	4718      	bx	r3

080160d6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80160d6:	4770      	bx	lr

080160d8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80160d8:	4770      	bx	lr
	...

080160dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80160dc:	2301      	movs	r3, #1
 80160de:	b570      	push	{r4, r5, r6, lr}
 80160e0:	7203      	strb	r3, [r0, #8]
 80160e2:	4604      	mov	r4, r0
 80160e4:	6840      	ldr	r0, [r0, #4]
 80160e6:	6803      	ldr	r3, [r0, #0]
 80160e8:	699b      	ldr	r3, [r3, #24]
 80160ea:	4798      	blx	r3
 80160ec:	6803      	ldr	r3, [r0, #0]
 80160ee:	4605      	mov	r5, r0
 80160f0:	2b08      	cmp	r3, #8
 80160f2:	d01e      	beq.n	8016132 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80160f4:	d80b      	bhi.n	801610e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160f6:	2b02      	cmp	r3, #2
 80160f8:	d027      	beq.n	801614a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80160fa:	2b04      	cmp	r3, #4
 80160fc:	d011      	beq.n	8016122 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d028      	beq.n	8016154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016102:	4b17      	ldr	r3, [pc, #92]	; (8016160 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016104:	218b      	movs	r1, #139	; 0x8b
 8016106:	4a17      	ldr	r2, [pc, #92]	; (8016164 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016108:	4817      	ldr	r0, [pc, #92]	; (8016168 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801610a:	f00e fa7f 	bl	802460c <__assert_func>
 801610e:	2b40      	cmp	r3, #64	; 0x40
 8016110:	d020      	beq.n	8016154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016112:	d801      	bhi.n	8016118 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016114:	2b20      	cmp	r3, #32
 8016116:	e7f3      	b.n	8016100 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016118:	2b80      	cmp	r3, #128	; 0x80
 801611a:	d01b      	beq.n	8016154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801611c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016120:	e7ee      	b.n	8016100 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	7f01      	ldrb	r1, [r0, #28]
 8016126:	4620      	mov	r0, r4
 8016128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801612a:	4798      	blx	r3
 801612c:	6823      	ldr	r3, [r4, #0]
 801612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016130:	e006      	b.n	8016140 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	7f01      	ldrb	r1, [r0, #28]
 8016136:	4620      	mov	r0, r4
 8016138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801613a:	4798      	blx	r3
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016140:	4629      	mov	r1, r5
 8016142:	4620      	mov	r0, r4
 8016144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016148:	4718      	bx	r3
 801614a:	6823      	ldr	r3, [r4, #0]
 801614c:	4620      	mov	r0, r4
 801614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016150:	4798      	blx	r3
 8016152:	e7f3      	b.n	801613c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016154:	6823      	ldr	r3, [r4, #0]
 8016156:	4620      	mov	r0, r4
 8016158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801615a:	4798      	blx	r3
 801615c:	e7e6      	b.n	801612c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801615e:	bf00      	nop
 8016160:	080274a9 	.word	0x080274a9
 8016164:	080275b8 	.word	0x080275b8
 8016168:	080274ce 	.word	0x080274ce

0801616c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	460e      	mov	r6, r1
 8016172:	6860      	ldr	r0, [r4, #4]
 8016174:	6803      	ldr	r3, [r0, #0]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	4798      	blx	r3
 801617a:	2800      	cmp	r0, #0
 801617c:	d1f9      	bne.n	8016172 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801617e:	4d0b      	ldr	r5, [pc, #44]	; (80161ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016180:	6828      	ldr	r0, [r5, #0]
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016186:	4798      	blx	r3
 8016188:	f7fd f8b0 	bl	80132ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801618c:	6860      	ldr	r0, [r4, #4]
 801618e:	4631      	mov	r1, r6
 8016190:	6803      	ldr	r3, [r0, #0]
 8016192:	689b      	ldr	r3, [r3, #8]
 8016194:	4798      	blx	r3
 8016196:	6823      	ldr	r3, [r4, #0]
 8016198:	4620      	mov	r0, r4
 801619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801619c:	4798      	blx	r3
 801619e:	6828      	ldr	r0, [r5, #0]
 80161a0:	6803      	ldr	r3, [r0, #0]
 80161a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161a8:	4718      	bx	r3
 80161aa:	bf00      	nop
 80161ac:	2000bc70 	.word	0x2000bc70

080161b0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80161b0:	b508      	push	{r3, lr}
 80161b2:	f7fd f87f 	bl	80132b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80161b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80161ba:	f7fd b889 	b.w	80132d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080161be <_ZN8touchgfx13DMA_Interface5startEv>:
 80161be:	b510      	push	{r4, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	6840      	ldr	r0, [r0, #4]
 80161c4:	6803      	ldr	r3, [r0, #0]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	4798      	blx	r3
 80161ca:	b948      	cbnz	r0, 80161e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161cc:	7a63      	ldrb	r3, [r4, #9]
 80161ce:	b13b      	cbz	r3, 80161e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161d0:	7a23      	ldrb	r3, [r4, #8]
 80161d2:	b92b      	cbnz	r3, 80161e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	4620      	mov	r0, r4
 80161d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161de:	4718      	bx	r3
 80161e0:	bd10      	pop	{r4, pc}
	...

080161e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80161e4:	b510      	push	{r4, lr}
 80161e6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80161ea:	1b12      	subs	r2, r2, r4
 80161ec:	2a00      	cmp	r2, #0
 80161ee:	bfdc      	itt	le
 80161f0:	6883      	ldrle	r3, [r0, #8]
 80161f2:	18d2      	addle	r2, r2, r3
 80161f4:	2a01      	cmp	r2, #1
 80161f6:	dd18      	ble.n	801622a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80161f8:	6843      	ldr	r3, [r0, #4]
 80161fa:	f101 021c 	add.w	r2, r1, #28
 80161fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016202:	f851 4b04 	ldr.w	r4, [r1], #4
 8016206:	4291      	cmp	r1, r2
 8016208:	f843 4b04 	str.w	r4, [r3], #4
 801620c:	d1f9      	bne.n	8016202 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801620e:	880a      	ldrh	r2, [r1, #0]
 8016210:	801a      	strh	r2, [r3, #0]
 8016212:	788a      	ldrb	r2, [r1, #2]
 8016214:	709a      	strb	r2, [r3, #2]
 8016216:	68c3      	ldr	r3, [r0, #12]
 8016218:	6882      	ldr	r2, [r0, #8]
 801621a:	f3bf 8f5b 	dmb	ish
 801621e:	3301      	adds	r3, #1
 8016220:	429a      	cmp	r2, r3
 8016222:	bfd8      	it	le
 8016224:	1a9b      	suble	r3, r3, r2
 8016226:	60c3      	str	r3, [r0, #12]
 8016228:	bd10      	pop	{r4, pc}
 801622a:	4b03      	ldr	r3, [pc, #12]	; (8016238 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801622c:	2139      	movs	r1, #57	; 0x39
 801622e:	4a03      	ldr	r2, [pc, #12]	; (801623c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016230:	4803      	ldr	r0, [pc, #12]	; (8016240 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016232:	f00e f9eb 	bl	802460c <__assert_func>
 8016236:	bf00      	nop
 8016238:	080274f4 	.word	0x080274f4
 801623c:	080275e8 	.word	0x080275e8
 8016240:	080274ce 	.word	0x080274ce

08016244 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016244:	b510      	push	{r4, lr}
 8016246:	6803      	ldr	r3, [r0, #0]
 8016248:	4604      	mov	r4, r0
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	4798      	blx	r3
 801624e:	b128      	cbz	r0, 801625c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016250:	4b07      	ldr	r3, [pc, #28]	; (8016270 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016252:	213f      	movs	r1, #63	; 0x3f
 8016254:	4a07      	ldr	r2, [pc, #28]	; (8016274 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016256:	4808      	ldr	r0, [pc, #32]	; (8016278 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016258:	f00e f9d8 	bl	802460c <__assert_func>
 801625c:	6923      	ldr	r3, [r4, #16]
 801625e:	68a2      	ldr	r2, [r4, #8]
 8016260:	f3bf 8f5b 	dmb	ish
 8016264:	3301      	adds	r3, #1
 8016266:	429a      	cmp	r2, r3
 8016268:	bfd8      	it	le
 801626a:	1a9b      	suble	r3, r3, r2
 801626c:	6123      	str	r3, [r4, #16]
 801626e:	bd10      	pop	{r4, pc}
 8016270:	08027517 	.word	0x08027517
 8016274:	08027636 	.word	0x08027636
 8016278:	080274ce 	.word	0x080274ce

0801627c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801627c:	b570      	push	{r4, r5, r6, lr}
 801627e:	4604      	mov	r4, r0
 8016280:	6840      	ldr	r0, [r0, #4]
 8016282:	6803      	ldr	r3, [r0, #0]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4798      	blx	r3
 8016288:	4605      	mov	r5, r0
 801628a:	b930      	cbnz	r0, 801629a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801628c:	7a23      	ldrb	r3, [r4, #8]
 801628e:	b123      	cbz	r3, 801629a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016290:	6860      	ldr	r0, [r4, #4]
 8016292:	6803      	ldr	r3, [r0, #0]
 8016294:	695b      	ldr	r3, [r3, #20]
 8016296:	4798      	blx	r3
 8016298:	7225      	strb	r5, [r4, #8]
 801629a:	6860      	ldr	r0, [r4, #4]
 801629c:	6803      	ldr	r3, [r0, #0]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	4798      	blx	r3
 80162a2:	b928      	cbnz	r0, 80162b0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80162a4:	6823      	ldr	r3, [r4, #0]
 80162a6:	4620      	mov	r0, r4
 80162a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162ae:	4718      	bx	r3
 80162b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162b4:	f7fd b826 	b.w	8013304 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080162b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80162b8:	b510      	push	{r4, lr}
 80162ba:	6082      	str	r2, [r0, #8]
 80162bc:	2200      	movs	r2, #0
 80162be:	4c03      	ldr	r4, [pc, #12]	; (80162cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80162c0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80162c4:	e9c0 4100 	strd	r4, r1, [r0]
 80162c8:	bd10      	pop	{r4, pc}
 80162ca:	bf00      	nop
 80162cc:	0802759c 	.word	0x0802759c

080162d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80162d0:	6840      	ldr	r0, [r0, #4]
 80162d2:	6803      	ldr	r3, [r0, #0]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	4718      	bx	r3

080162d8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80162d8:	2001      	movs	r0, #1
 80162da:	4770      	bx	lr

080162dc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80162dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162e0:	460d      	mov	r5, r1
 80162e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80162e6:	b085      	sub	sp, #20
 80162e8:	4690      	mov	r8, r2
 80162ea:	4411      	add	r1, r2
 80162ec:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80162f0:	4699      	mov	r9, r3
 80162f2:	6803      	ldr	r3, [r0, #0]
 80162f4:	60c1      	str	r1, [r0, #12]
 80162f6:	4604      	mov	r4, r0
 80162f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80162fa:	440a      	add	r2, r1
 80162fc:	6102      	str	r2, [r0, #16]
 80162fe:	68db      	ldr	r3, [r3, #12]
 8016300:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016304:	4798      	blx	r3
 8016306:	2800      	cmp	r0, #0
 8016308:	d039      	beq.n	801637e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801630a:	44c8      	add	r8, r9
 801630c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016310:	4445      	add	r5, r8
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	f10d 020f 	add.w	r2, sp, #15
 8016318:	a903      	add	r1, sp, #12
 801631a:	4620      	mov	r0, r4
 801631c:	9200      	str	r2, [sp, #0]
 801631e:	f10d 020d 	add.w	r2, sp, #13
 8016322:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016326:	f10d 030e 	add.w	r3, sp, #14
 801632a:	47c0      	blx	r8
 801632c:	b1f8      	cbz	r0, 801636e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801632e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016332:	7a20      	ldrb	r0, [r4, #8]
 8016334:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016338:	4358      	muls	r0, r3
 801633a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801633e:	1c43      	adds	r3, r0, #1
 8016340:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016344:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016348:	121b      	asrs	r3, r3, #8
 801634a:	fb10 f003 	smulbb	r0, r0, r3
 801634e:	b283      	uxth	r3, r0
 8016350:	1c58      	adds	r0, r3, #1
 8016352:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016356:	6823      	ldr	r3, [r4, #0]
 8016358:	1200      	asrs	r0, r0, #8
 801635a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801635e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016362:	28ff      	cmp	r0, #255	; 0xff
 8016364:	d10e      	bne.n	8016384 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016366:	9100      	str	r1, [sp, #0]
 8016368:	4629      	mov	r1, r5
 801636a:	4620      	mov	r0, r4
 801636c:	47c0      	blx	r8
 801636e:	68e3      	ldr	r3, [r4, #12]
 8016370:	3e01      	subs	r6, #1
 8016372:	f105 0503 	add.w	r5, r5, #3
 8016376:	f103 0301 	add.w	r3, r3, #1
 801637a:	60e3      	str	r3, [r4, #12]
 801637c:	d1c9      	bne.n	8016312 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801637e:	b005      	add	sp, #20
 8016380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016384:	fa1f fc80 	uxth.w	ip, r0
 8016388:	43c0      	mvns	r0, r0
 801638a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801638e:	fb12 f20c 	smulbb	r2, r2, ip
 8016392:	b2c0      	uxtb	r0, r0
 8016394:	fb13 f30c 	smulbb	r3, r3, ip
 8016398:	fb0e 2200 	mla	r2, lr, r0, r2
 801639c:	f895 e001 	ldrb.w	lr, [r5, #1]
 80163a0:	fb11 f10c 	smulbb	r1, r1, ip
 80163a4:	fb0e 3300 	mla	r3, lr, r0, r3
 80163a8:	f895 e000 	ldrb.w	lr, [r5]
 80163ac:	b292      	uxth	r2, r2
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	fb0e 1000 	mla	r0, lr, r0, r1
 80163b4:	1c59      	adds	r1, r3, #1
 80163b6:	b280      	uxth	r0, r0
 80163b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80163bc:	1c51      	adds	r1, r2, #1
 80163be:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80163c2:	1c41      	adds	r1, r0, #1
 80163c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80163c8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80163cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80163d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80163d4:	9000      	str	r0, [sp, #0]
 80163d6:	e7c7      	b.n	8016368 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080163d8 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80163d8:	f89d 0000 	ldrb.w	r0, [sp]
 80163dc:	704b      	strb	r3, [r1, #1]
 80163de:	7008      	strb	r0, [r1, #0]
 80163e0:	708a      	strb	r2, [r1, #2]
 80163e2:	4770      	bx	lr

080163e4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80163e4:	4413      	add	r3, r2
 80163e6:	7dc2      	ldrb	r2, [r0, #23]
 80163e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163ec:	4419      	add	r1, r3
 80163ee:	7a03      	ldrb	r3, [r0, #8]
 80163f0:	435a      	muls	r2, r3
 80163f2:	1c53      	adds	r3, r2, #1
 80163f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80163f8:	121b      	asrs	r3, r3, #8
 80163fa:	2bff      	cmp	r3, #255	; 0xff
 80163fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163fe:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016402:	d13e      	bne.n	8016482 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016404:	4427      	add	r7, r4
 8016406:	f814 3b01 	ldrb.w	r3, [r4], #1
 801640a:	3103      	adds	r1, #3
 801640c:	7d86      	ldrb	r6, [r0, #22]
 801640e:	2bff      	cmp	r3, #255	; 0xff
 8016410:	d10a      	bne.n	8016428 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016412:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016416:	7d43      	ldrb	r3, [r0, #21]
 8016418:	f801 3c02 	strb.w	r3, [r1, #-2]
 801641c:	7d03      	ldrb	r3, [r0, #20]
 801641e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016422:	42a7      	cmp	r7, r4
 8016424:	d1ef      	bne.n	8016406 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016428:	b29a      	uxth	r2, r3
 801642a:	43db      	mvns	r3, r3
 801642c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016430:	fb16 f602 	smulbb	r6, r6, r2
 8016434:	b2db      	uxtb	r3, r3
 8016436:	fb05 6503 	mla	r5, r5, r3, r6
 801643a:	b2ad      	uxth	r5, r5
 801643c:	1c6e      	adds	r6, r5, #1
 801643e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016442:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016446:	fb16 f603 	smulbb	r6, r6, r3
 801644a:	122d      	asrs	r5, r5, #8
 801644c:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016450:	7d45      	ldrb	r5, [r0, #21]
 8016452:	fb05 6502 	mla	r5, r5, r2, r6
 8016456:	b2ad      	uxth	r5, r5
 8016458:	1c6e      	adds	r6, r5, #1
 801645a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801645e:	122d      	asrs	r5, r5, #8
 8016460:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016464:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016468:	7d06      	ldrb	r6, [r0, #20]
 801646a:	fb15 f303 	smulbb	r3, r5, r3
 801646e:	fb06 3202 	mla	r2, r6, r2, r3
 8016472:	b292      	uxth	r2, r2
 8016474:	1c53      	adds	r3, r2, #1
 8016476:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801647a:	1212      	asrs	r2, r2, #8
 801647c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016480:	e7cf      	b.n	8016422 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016482:	b2de      	uxtb	r6, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d0ce      	beq.n	8016426 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016488:	3103      	adds	r1, #3
 801648a:	4427      	add	r7, r4
 801648c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016490:	3103      	adds	r1, #3
 8016492:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016496:	fb02 f306 	mul.w	r3, r2, r6
 801649a:	42bc      	cmp	r4, r7
 801649c:	f103 0201 	add.w	r2, r3, #1
 80164a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80164a4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80164a8:	b295      	uxth	r5, r2
 80164aa:	ea6f 0202 	mvn.w	r2, r2
 80164ae:	b2d3      	uxtb	r3, r2
 80164b0:	7d82      	ldrb	r2, [r0, #22]
 80164b2:	fb1c fc03 	smulbb	ip, ip, r3
 80164b6:	fb02 c205 	mla	r2, r2, r5, ip
 80164ba:	b292      	uxth	r2, r2
 80164bc:	f102 0c01 	add.w	ip, r2, #1
 80164c0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80164c4:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80164c8:	fb1c fc03 	smulbb	ip, ip, r3
 80164cc:	ea4f 2222 	mov.w	r2, r2, asr #8
 80164d0:	f801 2c06 	strb.w	r2, [r1, #-6]
 80164d4:	7d42      	ldrb	r2, [r0, #21]
 80164d6:	fb02 c205 	mla	r2, r2, r5, ip
 80164da:	b292      	uxth	r2, r2
 80164dc:	f102 0c01 	add.w	ip, r2, #1
 80164e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80164e4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80164e8:	f801 2c05 	strb.w	r2, [r1, #-5]
 80164ec:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80164f0:	f890 c014 	ldrb.w	ip, [r0, #20]
 80164f4:	fb12 f303 	smulbb	r3, r2, r3
 80164f8:	fb0c 3305 	mla	r3, ip, r5, r3
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	f103 0201 	add.w	r2, r3, #1
 8016502:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016506:	ea4f 2323 	mov.w	r3, r3, asr #8
 801650a:	f801 3c04 	strb.w	r3, [r1, #-4]
 801650e:	d1bd      	bne.n	801648c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016510:	e789      	b.n	8016426 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016512 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016512:	b510      	push	{r4, lr}
 8016514:	7d04      	ldrb	r4, [r0, #20]
 8016516:	700c      	strb	r4, [r1, #0]
 8016518:	7d41      	ldrb	r1, [r0, #21]
 801651a:	7011      	strb	r1, [r2, #0]
 801651c:	7d82      	ldrb	r2, [r0, #22]
 801651e:	701a      	strb	r2, [r3, #0]
 8016520:	9b02      	ldr	r3, [sp, #8]
 8016522:	7dc2      	ldrb	r2, [r0, #23]
 8016524:	2001      	movs	r0, #1
 8016526:	701a      	strb	r2, [r3, #0]
 8016528:	bd10      	pop	{r4, pc}

0801652a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801652a:	b570      	push	{r4, r5, r6, lr}
 801652c:	4616      	mov	r6, r2
 801652e:	4604      	mov	r4, r0
 8016530:	460d      	mov	r5, r1
 8016532:	f7f9 f931 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8016536:	6803      	ldr	r3, [r0, #0]
 8016538:	4629      	mov	r1, r5
 801653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801653c:	4798      	blx	r3
 801653e:	7520      	strb	r0, [r4, #20]
 8016540:	f7f9 f92a 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8016544:	6803      	ldr	r3, [r0, #0]
 8016546:	4629      	mov	r1, r5
 8016548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801654a:	4798      	blx	r3
 801654c:	7560      	strb	r0, [r4, #21]
 801654e:	f7f9 f923 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8016552:	6803      	ldr	r3, [r0, #0]
 8016554:	4629      	mov	r1, r5
 8016556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016558:	4798      	blx	r3
 801655a:	75e6      	strb	r6, [r4, #23]
 801655c:	75a0      	strb	r0, [r4, #22]
 801655e:	bd70      	pop	{r4, r5, r6, pc}

08016560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016562:	460e      	mov	r6, r1
 8016564:	4617      	mov	r7, r2
 8016566:	4604      	mov	r4, r0
 8016568:	f000 f832 	bl	80165d0 <_ZN8touchgfx15AbstractPainterC1Ev>
 801656c:	4b12      	ldr	r3, [pc, #72]	; (80165b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801656e:	6023      	str	r3, [r4, #0]
 8016570:	f7f9 f912 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8016574:	6803      	ldr	r3, [r0, #0]
 8016576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016578:	4798      	blx	r3
 801657a:	1e43      	subs	r3, r0, #1
 801657c:	425d      	negs	r5, r3
 801657e:	415d      	adcs	r5, r3
 8016580:	4b0e      	ldr	r3, [pc, #56]	; (80165bc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016586:	b130      	cbz	r0, 8016596 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016588:	6803      	ldr	r3, [r0, #0]
 801658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801658c:	4798      	blx	r3
 801658e:	2801      	cmp	r0, #1
 8016590:	bf08      	it	eq
 8016592:	f045 0501 	orreq.w	r5, r5, #1
 8016596:	b92d      	cbnz	r5, 80165a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016598:	4b09      	ldr	r3, [pc, #36]	; (80165c0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801659a:	2129      	movs	r1, #41	; 0x29
 801659c:	4a09      	ldr	r2, [pc, #36]	; (80165c4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801659e:	480a      	ldr	r0, [pc, #40]	; (80165c8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80165a0:	f00e f834 	bl	802460c <__assert_func>
 80165a4:	4b09      	ldr	r3, [pc, #36]	; (80165cc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80165a6:	4620      	mov	r0, r4
 80165a8:	463a      	mov	r2, r7
 80165aa:	4631      	mov	r1, r6
 80165ac:	6023      	str	r3, [r4, #0]
 80165ae:	f7ff ffbc 	bl	801652a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80165b2:	4620      	mov	r0, r4
 80165b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165b6:	bf00      	nop
 80165b8:	08027670 	.word	0x08027670
 80165bc:	2000bc70 	.word	0x2000bc70
 80165c0:	08027688 	.word	0x08027688
 80165c4:	0802774c 	.word	0x0802774c
 80165c8:	080276e6 	.word	0x080276e6
 80165cc:	08027734 	.word	0x08027734

080165d0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80165d0:	4a03      	ldr	r2, [pc, #12]	; (80165e0 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80165d2:	6002      	str	r2, [r0, #0]
 80165d4:	2200      	movs	r2, #0
 80165d6:	6042      	str	r2, [r0, #4]
 80165d8:	22ff      	movs	r2, #255	; 0xff
 80165da:	7202      	strb	r2, [r0, #8]
 80165dc:	4770      	bx	lr
 80165de:	bf00      	nop
 80165e0:	08027790 	.word	0x08027790

080165e4 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80165e4:	4770      	bx	lr

080165e6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80165e6:	8081      	strh	r1, [r0, #4]
 80165e8:	80c2      	strh	r2, [r0, #6]
 80165ea:	4770      	bx	lr

080165ec <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80165ec:	7201      	strb	r1, [r0, #8]
 80165ee:	4770      	bx	lr

080165f0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80165f0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80165f4:	4770      	bx	lr

080165f6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80165f6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80165fa:	4770      	bx	lr

080165fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80165fc:	6281      	str	r1, [r0, #40]	; 0x28
 80165fe:	4770      	bx	lr

08016600 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016600:	b513      	push	{r0, r1, r4, lr}
 8016602:	6803      	ldr	r3, [r0, #0]
 8016604:	4604      	mov	r4, r0
 8016606:	4601      	mov	r1, r0
 8016608:	4668      	mov	r0, sp
 801660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801660c:	4798      	blx	r3
 801660e:	6823      	ldr	r3, [r4, #0]
 8016610:	4669      	mov	r1, sp
 8016612:	4620      	mov	r0, r4
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	4798      	blx	r3
 8016618:	b002      	add	sp, #8
 801661a:	bd10      	pop	{r4, pc}

0801661c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801661c:	b510      	push	{r4, lr}
 801661e:	2200      	movs	r2, #0
 8016620:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016624:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016628:	8002      	strh	r2, [r0, #0]
 801662a:	8042      	strh	r2, [r0, #2]
 801662c:	8084      	strh	r4, [r0, #4]
 801662e:	80c1      	strh	r1, [r0, #6]
 8016630:	bd10      	pop	{r4, pc}

08016632 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016632:	2200      	movs	r2, #0
 8016634:	8002      	strh	r2, [r0, #0]
 8016636:	8042      	strh	r2, [r0, #2]
 8016638:	8082      	strh	r2, [r0, #4]
 801663a:	80c2      	strh	r2, [r0, #6]
 801663c:	4770      	bx	lr
	...

08016640 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016640:	b508      	push	{r3, lr}
 8016642:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016644:	b928      	cbnz	r0, 8016652 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016646:	4b03      	ldr	r3, [pc, #12]	; (8016654 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016648:	2127      	movs	r1, #39	; 0x27
 801664a:	4a03      	ldr	r2, [pc, #12]	; (8016658 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801664c:	4803      	ldr	r0, [pc, #12]	; (801665c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801664e:	f00d ffdd 	bl	802460c <__assert_func>
 8016652:	bd08      	pop	{r3, pc}
 8016654:	0802779c 	.word	0x0802779c
 8016658:	08027880 	.word	0x08027880
 801665c:	080277c3 	.word	0x080277c3

08016660 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016664:	b089      	sub	sp, #36	; 0x24
 8016666:	4604      	mov	r4, r0
 8016668:	6808      	ldr	r0, [r1, #0]
 801666a:	f04f 0a00 	mov.w	sl, #0
 801666e:	6849      	ldr	r1, [r1, #4]
 8016670:	ab02      	add	r3, sp, #8
 8016672:	f04f 0b01 	mov.w	fp, #1
 8016676:	c303      	stmia	r3!, {r0, r1}
 8016678:	4b3f      	ldr	r3, [pc, #252]	; (8016778 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801667a:	4621      	mov	r1, r4
 801667c:	a804      	add	r0, sp, #16
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	2b01      	cmp	r3, #1
 8016682:	6823      	ldr	r3, [r4, #0]
 8016684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016686:	bf1f      	itttt	ne
 8016688:	f10d 0906 	addne.w	r9, sp, #6
 801668c:	ae03      	addne	r6, sp, #12
 801668e:	f10d 050e 	addne.w	r5, sp, #14
 8016692:	f10d 080a 	addne.w	r8, sp, #10
 8016696:	bf01      	itttt	eq
 8016698:	f10d 090e 	addeq.w	r9, sp, #14
 801669c:	f10d 0606 	addeq.w	r6, sp, #6
 80166a0:	ad03      	addeq	r5, sp, #12
 80166a2:	f10d 0808 	addeq.w	r8, sp, #8
 80166a6:	4798      	blx	r3
 80166a8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80166ac:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d056      	beq.n	8016762 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80166b4:	4293      	cmp	r3, r2
 80166b6:	bfa8      	it	ge
 80166b8:	4613      	movge	r3, r2
 80166ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166be:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80166c2:	2f00      	cmp	r7, #0
 80166c4:	dd34      	ble.n	8016730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80166c6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80166ca:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80166ce:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80166d2:	4484      	add	ip, r0
 80166d4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80166d8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80166dc:	fa0f fc8c 	sxth.w	ip, ip
 80166e0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80166e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80166e8:	4562      	cmp	r2, ip
 80166ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166ee:	f8ad e01c 	strh.w	lr, [sp, #28]
 80166f2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80166f6:	da29      	bge.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80166f8:	4472      	add	r2, lr
 80166fa:	b212      	sxth	r2, r2
 80166fc:	4290      	cmp	r0, r2
 80166fe:	da25      	bge.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016700:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016704:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016708:	4402      	add	r2, r0
 801670a:	b212      	sxth	r2, r2
 801670c:	4293      	cmp	r3, r2
 801670e:	da1d      	bge.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016710:	440b      	add	r3, r1
 8016712:	b21b      	sxth	r3, r3
 8016714:	4298      	cmp	r0, r3
 8016716:	da19      	bge.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016718:	6823      	ldr	r3, [r4, #0]
 801671a:	a906      	add	r1, sp, #24
 801671c:	4620      	mov	r0, r4
 801671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016720:	4798      	blx	r3
 8016722:	b998      	cbnz	r0, 801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016724:	107f      	asrs	r7, r7, #1
 8016726:	f04f 0a01 	mov.w	sl, #1
 801672a:	f8ad 7006 	strh.w	r7, [sp, #6]
 801672e:	e7c6      	b.n	80166be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016730:	d10c      	bne.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016732:	f8ad b006 	strh.w	fp, [sp, #6]
 8016736:	f8b8 2000 	ldrh.w	r2, [r8]
 801673a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801673e:	440a      	add	r2, r1
 8016740:	f8a8 2000 	strh.w	r2, [r8]
 8016744:	882b      	ldrh	r3, [r5, #0]
 8016746:	1a5b      	subs	r3, r3, r1
 8016748:	802b      	strh	r3, [r5, #0]
 801674a:	e7ad      	b.n	80166a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801674c:	f1ba 0f00 	cmp.w	sl, #0
 8016750:	d0f1      	beq.n	8016736 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016752:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016756:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801675a:	429a      	cmp	r2, r3
 801675c:	bf08      	it	eq
 801675e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016760:	e7e9      	b.n	8016736 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016762:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016766:	429a      	cmp	r2, r3
 8016768:	bf04      	itt	eq
 801676a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801676e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016770:	b009      	add	sp, #36	; 0x24
 8016772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016776:	bf00      	nop
 8016778:	2000bc68 	.word	0x2000bc68

0801677c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801677c:	2200      	movs	r2, #0
 801677e:	2101      	movs	r1, #1
 8016780:	8082      	strh	r2, [r0, #4]
 8016782:	80c2      	strh	r2, [r0, #6]
 8016784:	8102      	strh	r2, [r0, #8]
 8016786:	8142      	strh	r2, [r0, #10]
 8016788:	8182      	strh	r2, [r0, #12]
 801678a:	81c2      	strh	r2, [r0, #14]
 801678c:	8202      	strh	r2, [r0, #16]
 801678e:	8242      	strh	r2, [r0, #18]
 8016790:	61c2      	str	r2, [r0, #28]
 8016792:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016796:	6282      	str	r2, [r0, #40]	; 0x28
 8016798:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801679c:	4905      	ldr	r1, [pc, #20]	; (80167b4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801679e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80167a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80167a6:	6001      	str	r1, [r0, #0]
 80167a8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80167aa:	22ff      	movs	r2, #255	; 0xff
 80167ac:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	08027808 	.word	0x08027808

080167b8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80167b8:	4770      	bx	lr

080167ba <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80167ba:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80167be:	4602      	mov	r2, r0
 80167c0:	cb03      	ldmia	r3!, {r0, r1}
 80167c2:	6010      	str	r0, [r2, #0]
 80167c4:	4610      	mov	r0, r2
 80167c6:	6051      	str	r1, [r2, #4]
 80167c8:	4770      	bx	lr

080167ca <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80167ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ce:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80167d2:	b395      	cbz	r5, 801683a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80167d4:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80167d8:	f1bc 0f00 	cmp.w	ip, #0
 80167dc:	d02d      	beq.n	801683a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80167de:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80167e2:	f9b1 e000 	ldrsh.w	lr, [r1]
 80167e6:	b354      	cbz	r4, 801683e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80167e8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80167ec:	b33f      	cbz	r7, 801683e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80167ee:	f9b0 8000 	ldrsh.w	r8, [r0]
 80167f2:	4475      	add	r5, lr
 80167f4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80167f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80167fc:	45f0      	cmp	r8, lr
 80167fe:	4646      	mov	r6, r8
 8016800:	4444      	add	r4, r8
 8016802:	bfa8      	it	ge
 8016804:	4676      	movge	r6, lr
 8016806:	4293      	cmp	r3, r2
 8016808:	4619      	mov	r1, r3
 801680a:	443b      	add	r3, r7
 801680c:	bfa8      	it	ge
 801680e:	4611      	movge	r1, r2
 8016810:	4462      	add	r2, ip
 8016812:	b22d      	sxth	r5, r5
 8016814:	8006      	strh	r6, [r0, #0]
 8016816:	b224      	sxth	r4, r4
 8016818:	8041      	strh	r1, [r0, #2]
 801681a:	b212      	sxth	r2, r2
 801681c:	b21b      	sxth	r3, r3
 801681e:	42a5      	cmp	r5, r4
 8016820:	bfac      	ite	ge
 8016822:	ebc6 0405 	rsbge	r4, r6, r5
 8016826:	ebc6 0404 	rsblt	r4, r6, r4
 801682a:	429a      	cmp	r2, r3
 801682c:	bfac      	ite	ge
 801682e:	ebc1 0302 	rsbge	r3, r1, r2
 8016832:	ebc1 0303 	rsblt	r3, r1, r3
 8016836:	8084      	strh	r4, [r0, #4]
 8016838:	80c3      	strh	r3, [r0, #6]
 801683a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801683e:	f8a0 e000 	strh.w	lr, [r0]
 8016842:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016846:	8043      	strh	r3, [r0, #2]
 8016848:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801684c:	8083      	strh	r3, [r0, #4]
 801684e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016852:	e7f1      	b.n	8016838 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016854:	b507      	push	{r0, r1, r2, lr}
 8016856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801685a:	ab01      	add	r3, sp, #4
 801685c:	6809      	ldr	r1, [r1, #0]
 801685e:	6800      	ldr	r0, [r0, #0]
 8016860:	f002 fc4f 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 8016864:	b003      	add	sp, #12
 8016866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801686c <_ZN8touchgfx7CWRUtil4sineEi>:
 801686c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016870:	fb90 f3f2 	sdiv	r3, r0, r2
 8016874:	fb03 0312 	mls	r3, r3, r2, r0
 8016878:	4413      	add	r3, r2
 801687a:	fb93 f0f2 	sdiv	r0, r3, r2
 801687e:	fb02 3010 	mls	r0, r2, r0, r3
 8016882:	4b0a      	ldr	r3, [pc, #40]	; (80168ac <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016884:	285a      	cmp	r0, #90	; 0x5a
 8016886:	dc02      	bgt.n	801688e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016888:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801688c:	4770      	bx	lr
 801688e:	28b4      	cmp	r0, #180	; 0xb4
 8016890:	dc02      	bgt.n	8016898 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016892:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016896:	e7f7      	b.n	8016888 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016898:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801689c:	bfd4      	ite	le
 801689e:	38b4      	suble	r0, #180	; 0xb4
 80168a0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80168a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80168a8:	4240      	negs	r0, r0
 80168aa:	4770      	bx	lr
 80168ac:	0802792a 	.word	0x0802792a

080168b0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80168b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80168b4:	f04f 0300 	mov.w	r3, #0
 80168b8:	bf2c      	ite	cs
 80168ba:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80168be:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80168c2:	1899      	adds	r1, r3, r2
 80168c4:	4288      	cmp	r0, r1
 80168c6:	bf24      	itt	cs
 80168c8:	1853      	addcs	r3, r2, r1
 80168ca:	1a40      	subcs	r0, r0, r1
 80168cc:	0892      	lsrs	r2, r2, #2
 80168ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80168d2:	d1f6      	bne.n	80168c2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80168d4:	4618      	mov	r0, r3
 80168d6:	4770      	bx	lr

080168d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80168d8:	2800      	cmp	r0, #0
 80168da:	b508      	push	{r3, lr}
 80168dc:	da05      	bge.n	80168ea <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80168de:	4240      	negs	r0, r0
 80168e0:	f7ff fffa 	bl	80168d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80168e4:	4240      	negs	r0, r0
 80168e6:	b240      	sxtb	r0, r0
 80168e8:	bd08      	pop	{r3, pc}
 80168ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80168ee:	dc11      	bgt.n	8016914 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80168f0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80168f4:	dd09      	ble.n	801690a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80168f6:	4340      	muls	r0, r0
 80168f8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80168fc:	f7ff ffd8 	bl	80168b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016900:	f7ff ffea 	bl	80168d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016904:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016908:	e7ed      	b.n	80168e6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801690a:	3003      	adds	r0, #3
 801690c:	4b02      	ldr	r3, [pc, #8]	; (8016918 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801690e:	10c0      	asrs	r0, r0, #3
 8016910:	5618      	ldrsb	r0, [r3, r0]
 8016912:	e7e9      	b.n	80168e8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016914:	2000      	movs	r0, #0
 8016916:	e7e7      	b.n	80168e8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016918:	080278ce 	.word	0x080278ce

0801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801691c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801691e:	460c      	mov	r4, r1
 8016920:	1e01      	subs	r1, r0, #0
 8016922:	4615      	mov	r5, r2
 8016924:	db01      	blt.n	801692a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016926:	2c00      	cmp	r4, #0
 8016928:	da06      	bge.n	8016938 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801692a:	4b11      	ldr	r3, [pc, #68]	; (8016970 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801692c:	f240 3197 	movw	r1, #919	; 0x397
 8016930:	4a10      	ldr	r2, [pc, #64]	; (8016974 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016932:	4811      	ldr	r0, [pc, #68]	; (8016978 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016934:	f00d fe6a 	bl	802460c <__assert_func>
 8016938:	428c      	cmp	r4, r1
 801693a:	dd06      	ble.n	801694a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801693c:	4620      	mov	r0, r4
 801693e:	f7ff ffed 	bl	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016942:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016946:	b003      	add	sp, #12
 8016948:	bd30      	pop	{r4, r5, pc}
 801694a:	4349      	muls	r1, r1
 801694c:	fb04 1004 	mla	r0, r4, r4, r1
 8016950:	f7ff ffae 	bl	80168b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016954:	6028      	str	r0, [r5, #0]
 8016956:	2800      	cmp	r0, #0
 8016958:	d0f5      	beq.n	8016946 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801695a:	4602      	mov	r2, r0
 801695c:	ab01      	add	r3, sp, #4
 801695e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016962:	4620      	mov	r0, r4
 8016964:	f002 fbcd 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 8016968:	f7ff ffb6 	bl	80168d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801696c:	e7eb      	b.n	8016946 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801696e:	bf00      	nop
 8016970:	080279e0 	.word	0x080279e0
 8016974:	08027aa8 	.word	0x08027aa8
 8016978:	080279f1 	.word	0x080279f1

0801697c <_ZN8touchgfx4LineC1Ev>:
 801697c:	b510      	push	{r4, lr}
 801697e:	4604      	mov	r4, r0
 8016980:	f7ff fefc 	bl	801677c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016984:	4b0c      	ldr	r3, [pc, #48]	; (80169b8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016986:	2220      	movs	r2, #32
 8016988:	4620      	mov	r0, r4
 801698a:	6023      	str	r3, [r4, #0]
 801698c:	2300      	movs	r3, #0
 801698e:	6422      	str	r2, [r4, #64]	; 0x40
 8016990:	2212      	movs	r2, #18
 8016992:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016996:	6722      	str	r2, [r4, #112]	; 0x70
 8016998:	60a3      	str	r3, [r4, #8]
 801699a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801699e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80169a2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169a6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80169aa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80169ae:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80169b2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80169b6:	bd10      	pop	{r4, pc}
 80169b8:	08027a30 	.word	0x08027a30

080169bc <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80169bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80169c2:	b085      	sub	sp, #20
 80169c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80169c6:	4604      	mov	r4, r0
 80169c8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80169ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80169cc:	1af6      	subs	r6, r6, r3
 80169ce:	eba5 0502 	sub.w	r5, r5, r2
 80169d2:	f040 809b 	bne.w	8016b0c <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80169d6:	b955      	cbnz	r5, 80169ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80169d8:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80169dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80169e0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80169e4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80169e8:	b005      	add	sp, #20
 80169ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ee:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80169f2:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80169f6:	f04f 0802 	mov.w	r8, #2
 80169fa:	463a      	mov	r2, r7
 80169fc:	4629      	mov	r1, r5
 80169fe:	ab03      	add	r3, sp, #12
 8016a00:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016a02:	f002 fb7e 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 8016a06:	ab03      	add	r3, sp, #12
 8016a08:	463a      	mov	r2, r7
 8016a0a:	4631      	mov	r1, r6
 8016a0c:	fb90 f5f8 	sdiv	r5, r0, r8
 8016a10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016a12:	f002 fb76 	bl	8019102 <_ZN8touchgfx6muldivElllRl>
 8016a16:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016a1a:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8016a1e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8016a22:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016a24:	fb90 f0f8 	sdiv	r0, r0, r8
 8016a28:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016a2c:	eba8 0305 	sub.w	r3, r8, r5
 8016a30:	f1ba 0f00 	cmp.w	sl, #0
 8016a34:	f040 80c3 	bne.w	8016bbe <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016a38:	64a3      	str	r3, [r4, #72]	; 0x48
 8016a3a:	19c3      	adds	r3, r0, r7
 8016a3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8016a3e:	ebae 0305 	sub.w	r3, lr, r5
 8016a42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016a44:	eb00 030c 	add.w	r3, r0, ip
 8016a48:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016a4a:	eb05 030e 	add.w	r3, r5, lr
 8016a4e:	6523      	str	r3, [r4, #80]	; 0x50
 8016a50:	ebac 0300 	sub.w	r3, ip, r0
 8016a54:	6623      	str	r3, [r4, #96]	; 0x60
 8016a56:	eb05 0308 	add.w	r3, r5, r8
 8016a5a:	6563      	str	r3, [r4, #84]	; 0x54
 8016a5c:	1a3b      	subs	r3, r7, r0
 8016a5e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8016a60:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016a64:	6663      	str	r3, [r4, #100]	; 0x64
 8016a66:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016a6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a6c:	4632      	mov	r2, r6
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	9100      	str	r1, [sp, #0]
 8016a72:	f859 bb04 	ldr.w	fp, [r9], #4
 8016a76:	9b00      	ldr	r3, [sp, #0]
 8016a78:	455e      	cmp	r6, fp
 8016a7a:	bfa8      	it	ge
 8016a7c:	465e      	movge	r6, fp
 8016a7e:	455a      	cmp	r2, fp
 8016a80:	bfb8      	it	lt
 8016a82:	465a      	movlt	r2, fp
 8016a84:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016a88:	4559      	cmp	r1, fp
 8016a8a:	bfa8      	it	ge
 8016a8c:	4659      	movge	r1, fp
 8016a8e:	455b      	cmp	r3, fp
 8016a90:	bfb8      	it	lt
 8016a92:	465b      	movlt	r3, fp
 8016a94:	9300      	str	r3, [sp, #0]
 8016a96:	9b01      	ldr	r3, [sp, #4]
 8016a98:	454b      	cmp	r3, r9
 8016a9a:	d1ea      	bne.n	8016a72 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8016a9c:	f04f 0b20 	mov.w	fp, #32
 8016aa0:	b209      	sxth	r1, r1
 8016aa2:	b212      	sxth	r2, r2
 8016aa4:	f1ba 0f01 	cmp.w	sl, #1
 8016aa8:	b236      	sxth	r6, r6
 8016aaa:	fb91 f9fb 	sdiv	r9, r1, fp
 8016aae:	f9bd 1000 	ldrsh.w	r1, [sp]
 8016ab2:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016ab6:	fb92 f2fb 	sdiv	r2, r2, fp
 8016aba:	fb91 f1fb 	sdiv	r1, r1, fp
 8016abe:	fb96 f6fb 	sdiv	r6, r6, fp
 8016ac2:	f102 0201 	add.w	r2, r2, #1
 8016ac6:	f101 0101 	add.w	r1, r1, #1
 8016aca:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8016ace:	eba1 0109 	sub.w	r1, r1, r9
 8016ad2:	eba2 0606 	sub.w	r6, r2, r6
 8016ad6:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016ada:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8016ade:	d183      	bne.n	80169e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016ae0:	eba8 0305 	sub.w	r3, r8, r5
 8016ae4:	64a3      	str	r3, [r4, #72]	; 0x48
 8016ae6:	19c3      	adds	r3, r0, r7
 8016ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8016aea:	ebae 0305 	sub.w	r3, lr, r5
 8016aee:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016af0:	eb00 030c 	add.w	r3, r0, ip
 8016af4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016af6:	eb05 030e 	add.w	r3, r5, lr
 8016afa:	4445      	add	r5, r8
 8016afc:	6523      	str	r3, [r4, #80]	; 0x50
 8016afe:	ebac 0300 	sub.w	r3, ip, r0
 8016b02:	1a38      	subs	r0, r7, r0
 8016b04:	6565      	str	r5, [r4, #84]	; 0x54
 8016b06:	6623      	str	r3, [r4, #96]	; 0x60
 8016b08:	6660      	str	r0, [r4, #100]	; 0x64
 8016b0a:	e76d      	b.n	80169e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016b0c:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016b10:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016b14:	2d00      	cmp	r5, #0
 8016b16:	f43f af6e 	beq.w	80169f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016b1a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016b1e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016b22:	fb93 f2f7 	sdiv	r2, r3, r7
 8016b26:	fb07 3312 	mls	r3, r7, r2, r3
 8016b2a:	b34b      	cbz	r3, 8016b80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016b2c:	fb97 f2f3 	sdiv	r2, r7, r3
 8016b30:	fb03 7712 	mls	r7, r3, r2, r7
 8016b34:	2f00      	cmp	r7, #0
 8016b36:	d1f4      	bne.n	8016b22 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016b3e:	bf18      	it	ne
 8016b40:	fb96 f6f3 	sdivne	r6, r6, r3
 8016b44:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016b48:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016b4c:	bf18      	it	ne
 8016b4e:	fb95 f5f3 	sdivne	r5, r5, r3
 8016b52:	4291      	cmp	r1, r2
 8016b54:	dd16      	ble.n	8016b84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016b56:	2d00      	cmp	r5, #0
 8016b58:	da4d      	bge.n	8016bf6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016b5a:	4b29      	ldr	r3, [pc, #164]	; (8016c00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016b5c:	429d      	cmp	r5, r3
 8016b5e:	da27      	bge.n	8016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8016b60:	426a      	negs	r2, r5
 8016b62:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016b66:	fb91 f1f3 	sdiv	r1, r1, r3
 8016b6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b6e:	4299      	cmp	r1, r3
 8016b70:	bfcc      	ite	gt
 8016b72:	1c4b      	addgt	r3, r1, #1
 8016b74:	3301      	addle	r3, #1
 8016b76:	fb96 f6f3 	sdiv	r6, r6, r3
 8016b7a:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b7e:	e00f      	b.n	8016ba0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8016b80:	463b      	mov	r3, r7
 8016b82:	e7d9      	b.n	8016b38 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8016b84:	2d00      	cmp	r5, #0
 8016b86:	fb92 f2f1 	sdiv	r2, r2, r1
 8016b8a:	da13      	bge.n	8016bb4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8016b8c:	4269      	negs	r1, r5
 8016b8e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016b92:	fb93 f3f1 	sdiv	r3, r3, r1
 8016b96:	429a      	cmp	r2, r3
 8016b98:	bfa8      	it	ge
 8016b9a:	461a      	movge	r2, r3
 8016b9c:	4356      	muls	r6, r2
 8016b9e:	4355      	muls	r5, r2
 8016ba0:	fb05 f005 	mul.w	r0, r5, r5
 8016ba4:	fb06 0006 	mla	r0, r6, r6, r0
 8016ba8:	f7ff fe82 	bl	80168b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016bac:	4607      	mov	r7, r0
 8016bae:	e722      	b.n	80169f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	e7eb      	b.n	8016b8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	e7ea      	b.n	8016b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016bb8:	4629      	mov	r1, r5
 8016bba:	2200      	movs	r2, #0
 8016bbc:	e7e7      	b.n	8016b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016bbe:	1a1b      	subs	r3, r3, r0
 8016bc0:	64a3      	str	r3, [r4, #72]	; 0x48
 8016bc2:	19c3      	adds	r3, r0, r7
 8016bc4:	1b5b      	subs	r3, r3, r5
 8016bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8016bc8:	ebae 0305 	sub.w	r3, lr, r5
 8016bcc:	4403      	add	r3, r0
 8016bce:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016bd0:	eb00 030c 	add.w	r3, r0, ip
 8016bd4:	442b      	add	r3, r5
 8016bd6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016bd8:	eb05 030e 	add.w	r3, r5, lr
 8016bdc:	4403      	add	r3, r0
 8016bde:	6523      	str	r3, [r4, #80]	; 0x50
 8016be0:	ebac 0300 	sub.w	r3, ip, r0
 8016be4:	442b      	add	r3, r5
 8016be6:	6623      	str	r3, [r4, #96]	; 0x60
 8016be8:	eb05 0308 	add.w	r3, r5, r8
 8016bec:	1a1b      	subs	r3, r3, r0
 8016bee:	6563      	str	r3, [r4, #84]	; 0x54
 8016bf0:	1a3b      	subs	r3, r7, r0
 8016bf2:	1b5b      	subs	r3, r3, r5
 8016bf4:	e733      	b.n	8016a5e <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016bf6:	4295      	cmp	r5, r2
 8016bf8:	ddde      	ble.n	8016bb8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016bfa:	462a      	mov	r2, r5
 8016bfc:	e7b1      	b.n	8016b62 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8016bfe:	bf00      	nop
 8016c00:	ffff4afc 	.word	0xffff4afc

08016c04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016c04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016c06:	428b      	cmp	r3, r1
 8016c08:	d102      	bne.n	8016c10 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016c0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016c0c:	4293      	cmp	r3, r2
 8016c0e:	d003      	beq.n	8016c18 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016c10:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016c14:	f7ff bed2 	b.w	80169bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016c18:	4770      	bx	lr

08016c1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016c1c:	428b      	cmp	r3, r1
 8016c1e:	d102      	bne.n	8016c26 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016c20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016c22:	4293      	cmp	r3, r2
 8016c24:	d003      	beq.n	8016c2e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016c26:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016c2a:	f7ff bec7 	b.w	80169bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016c2e:	4770      	bx	lr

08016c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016c30:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016c34:	f7ff bec2 	b.w	80169bc <_ZN8touchgfx4Line17updateCachedShapeEv>

08016c38 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c3c:	b0b3      	sub	sp, #204	; 0xcc
 8016c3e:	4604      	mov	r4, r0
 8016c40:	460a      	mov	r2, r1
 8016c42:	4601      	mov	r1, r0
 8016c44:	a804      	add	r0, sp, #16
 8016c46:	ad32      	add	r5, sp, #200	; 0xc8
 8016c48:	f00c f914 	bl	8022e74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016c50:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016c58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016c5a:	1ac0      	subs	r0, r0, r3
 8016c5c:	eba1 0102 	sub.w	r1, r1, r2
 8016c60:	d43c      	bmi.n	8016cdc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016c62:	2900      	cmp	r1, #0
 8016c64:	462a      	mov	r2, r5
 8016c66:	db33      	blt.n	8016cd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016c68:	f7ff fe58 	bl	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016c6c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016c70:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016c72:	a804      	add	r0, sp, #16
 8016c74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016c76:	f00c fac6 	bl	8023206 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016c7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016c7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016c7e:	a804      	add	r0, sp, #16
 8016c80:	f00c fa50 	bl	8023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016c88:	2b01      	cmp	r3, #1
 8016c8a:	d137      	bne.n	8016cfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016c8c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016c8e:	2eb3      	cmp	r6, #179	; 0xb3
 8016c90:	dc34      	bgt.n	8016cfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016c92:	eba7 0906 	sub.w	r9, r7, r6
 8016c96:	4648      	mov	r0, r9
 8016c98:	f7ff fde8 	bl	801686c <_ZN8touchgfx7CWRUtil4sineEi>
 8016c9c:	a902      	add	r1, sp, #8
 8016c9e:	9002      	str	r0, [sp, #8]
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f7ff fdd7 	bl	8016854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ca8:	eb00 0801 	add.w	r8, r0, r1
 8016cac:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016cb0:	f7ff fddc 	bl	801686c <_ZN8touchgfx7CWRUtil4sineEi>
 8016cb4:	a903      	add	r1, sp, #12
 8016cb6:	9003      	str	r0, [sp, #12]
 8016cb8:	4628      	mov	r0, r5
 8016cba:	f7ff fdcb 	bl	8016854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016cbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016cc0:	4641      	mov	r1, r8
 8016cc2:	1a12      	subs	r2, r2, r0
 8016cc4:	a804      	add	r0, sp, #16
 8016cc6:	f00c fa2d 	bl	8023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016cca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016ccc:	441e      	add	r6, r3
 8016cce:	e7de      	b.n	8016c8e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8016cd0:	4249      	negs	r1, r1
 8016cd2:	f7ff fe23 	bl	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cd6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016cda:	e7c9      	b.n	8016c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016cdc:	2900      	cmp	r1, #0
 8016cde:	f1c0 0000 	rsb	r0, r0, #0
 8016ce2:	462a      	mov	r2, r5
 8016ce4:	db04      	blt.n	8016cf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016ce6:	f7ff fe19 	bl	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cea:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8016cee:	e7bf      	b.n	8016c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016cf0:	4249      	negs	r1, r1
 8016cf2:	f7ff fe13 	bl	801691c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cf6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016cfa:	e7b9      	b.n	8016c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016cfc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016cfe:	a804      	add	r0, sp, #16
 8016d00:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016d02:	f00c fa0f 	bl	8023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016d0a:	a804      	add	r0, sp, #16
 8016d0c:	f00c fa0a 	bl	8023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d14:	2b01      	cmp	r3, #1
 8016d16:	d123      	bne.n	8016d60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016d18:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016d1a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8016d1e:	2e00      	cmp	r6, #0
 8016d20:	dd1e      	ble.n	8016d60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016d22:	eb06 0907 	add.w	r9, r6, r7
 8016d26:	4648      	mov	r0, r9
 8016d28:	f7ff fda0 	bl	801686c <_ZN8touchgfx7CWRUtil4sineEi>
 8016d2c:	a902      	add	r1, sp, #8
 8016d2e:	9002      	str	r0, [sp, #8]
 8016d30:	4628      	mov	r0, r5
 8016d32:	f7ff fd8f 	bl	8016854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016d38:	eb00 0801 	add.w	r8, r0, r1
 8016d3c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016d40:	f7ff fd94 	bl	801686c <_ZN8touchgfx7CWRUtil4sineEi>
 8016d44:	a903      	add	r1, sp, #12
 8016d46:	9003      	str	r0, [sp, #12]
 8016d48:	4628      	mov	r0, r5
 8016d4a:	f7ff fd83 	bl	8016854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016d50:	4641      	mov	r1, r8
 8016d52:	1a12      	subs	r2, r2, r0
 8016d54:	a804      	add	r0, sp, #16
 8016d56:	f00c f9e5 	bl	8023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d5c:	1af6      	subs	r6, r6, r3
 8016d5e:	e7de      	b.n	8016d1e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016d60:	a804      	add	r0, sp, #16
 8016d62:	f00c fb54 	bl	802340e <_ZN8touchgfx6Canvas6renderEv>
 8016d66:	4604      	mov	r4, r0
 8016d68:	a804      	add	r0, sp, #16
 8016d6a:	f00c fb91 	bl	8023490 <_ZN8touchgfx6CanvasD1Ev>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	b033      	add	sp, #204	; 0xcc
 8016d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016d76 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016d76:	b570      	push	{r4, r5, r6, lr}
 8016d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d7c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016d7e:	4604      	mov	r4, r0
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d00c      	beq.n	8016d9e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8016d84:	f850 3b26 	ldr.w	r3, [r0], #38
 8016d88:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8016d8a:	f7f9 fc3f 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8016d8e:	2300      	movs	r3, #0
 8016d90:	4601      	mov	r1, r0
 8016d92:	46ac      	mov	ip, r5
 8016d94:	4620      	mov	r0, r4
 8016d96:	461a      	mov	r2, r3
 8016d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d9c:	4760      	bx	ip
 8016d9e:	2000      	movs	r0, #0
 8016da0:	bd70      	pop	{r4, r5, r6, pc}

08016da2 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016da8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d016      	beq.n	8016ddc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8016dae:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8016db2:	4620      	mov	r0, r4
 8016db4:	f7f8 f910 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016db8:	6803      	ldr	r3, [r0, #0]
 8016dba:	4605      	mov	r5, r0
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	69de      	ldr	r6, [r3, #28]
 8016dc0:	f7f8 f926 	bl	800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016dc4:	4607      	mov	r7, r0
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f7f9 fc20 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4602      	mov	r2, r0
 8016dd0:	4639      	mov	r1, r7
 8016dd2:	9300      	str	r3, [sp, #0]
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	47b0      	blx	r6
 8016dd8:	b003      	add	sp, #12
 8016dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ddc:	2000      	movs	r0, #0
 8016dde:	e7fb      	b.n	8016dd8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08016de0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016de0:	b40e      	push	{r1, r2, r3}
 8016de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016dec:	b09b      	sub	sp, #108	; 0x6c
 8016dee:	4604      	mov	r4, r0
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d03f      	beq.n	8016e74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8016df4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016df8:	ab22      	add	r3, sp, #136	; 0x88
 8016dfa:	4638      	mov	r0, r7
 8016dfc:	9303      	str	r3, [sp, #12]
 8016dfe:	f7f8 f8eb 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	4680      	mov	r8, r0
 8016e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e08:	4798      	blx	r3
 8016e0a:	4606      	mov	r6, r0
 8016e0c:	b205      	sxth	r5, r0
 8016e0e:	a804      	add	r0, sp, #16
 8016e10:	f002 ff7e 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8016e14:	f8d8 3000 	ldr.w	r3, [r8]
 8016e18:	4640      	mov	r0, r8
 8016e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e1c:	4798      	blx	r3
 8016e1e:	9a03      	ldr	r2, [sp, #12]
 8016e20:	4603      	mov	r3, r0
 8016e22:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016e24:	a804      	add	r0, sp, #16
 8016e26:	f002 ff90 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016e2a:	4638      	mov	r0, r7
 8016e2c:	f7f8 f8f0 	bl	800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016e30:	4680      	mov	r8, r0
 8016e32:	4638      	mov	r0, r7
 8016e34:	f7f8 f8d0 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016e38:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016e3c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8016e40:	4642      	mov	r2, r8
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	4603      	mov	r3, r0
 8016e46:	a804      	add	r0, sp, #16
 8016e48:	f001 f815 	bl	8017e76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016e4c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016e50:	b203      	sxth	r3, r0
 8016e52:	18a9      	adds	r1, r5, r2
 8016e54:	2900      	cmp	r1, #0
 8016e56:	dd0b      	ble.n	8016e70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8016e58:	3b01      	subs	r3, #1
 8016e5a:	fb13 f302 	smulbb	r3, r3, r2
 8016e5e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016e62:	b21d      	sxth	r5, r3
 8016e64:	4628      	mov	r0, r5
 8016e66:	b01b      	add	sp, #108	; 0x6c
 8016e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6c:	b003      	add	sp, #12
 8016e6e:	4770      	bx	lr
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	dcf7      	bgt.n	8016e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8016e74:	2500      	movs	r5, #0
 8016e76:	e7f5      	b.n	8016e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08016e78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e80:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016e82:	b08d      	sub	sp, #52	; 0x34
 8016e84:	4604      	mov	r4, r0
 8016e86:	429e      	cmp	r6, r3
 8016e88:	4688      	mov	r8, r1
 8016e8a:	d04b      	beq.n	8016f24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016e8c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016e90:	4628      	mov	r0, r5
 8016e92:	f7f8 f8a1 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8016e96:	4607      	mov	r7, r0
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d043      	beq.n	8016f24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016ea2:	f7f8 f8cd 	bl	800f040 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016ea6:	4b21      	ldr	r3, [pc, #132]	; (8016f2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016eb4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016eb8:	785e      	ldrb	r6, [r3, #1]
 8016eba:	f7f8 f8a9 	bl	800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016ec0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016ec4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8016eca:	4b19      	ldr	r3, [pc, #100]	; (8016f30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8016ecc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016ed6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016eda:	9707      	str	r7, [sp, #28]
 8016edc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016ee0:	f88d 6020 	strb.w	r6, [sp, #32]
 8016ee4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016ee8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016eec:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016ef0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016ef4:	b10a      	cbz	r2, 8016efa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016ef6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016ef8:	b906      	cbnz	r6, 8016efc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016efa:	689e      	ldr	r6, [r3, #8]
 8016efc:	af05      	add	r7, sp, #20
 8016efe:	4621      	mov	r1, r4
 8016f00:	4638      	mov	r0, r7
 8016f02:	f002 f864 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f06:	4628      	mov	r0, r5
 8016f08:	f7f9 fb80 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	9001      	str	r0, [sp, #4]
 8016f10:	4630      	mov	r0, r6
 8016f12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016f16:	ab07      	add	r3, sp, #28
 8016f18:	9300      	str	r3, [sp, #0]
 8016f1a:	4643      	mov	r3, r8
 8016f1c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016f20:	f000 fd76 	bl	8017a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016f24:	b00d      	add	sp, #52	; 0x34
 8016f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2a:	bf00      	nop
 8016f2c:	2000bd00 	.word	0x2000bd00
 8016f30:	2000bc70 	.word	0x2000bc70

08016f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016f34:	b570      	push	{r4, r5, r6, lr}
 8016f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f3a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d021      	beq.n	8016f86 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8016f42:	6803      	ldr	r3, [r0, #0]
 8016f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f46:	4798      	blx	r3
 8016f48:	6823      	ldr	r3, [r4, #0]
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016f50:	4798      	blx	r3
 8016f52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016f56:	4606      	mov	r6, r0
 8016f58:	b22d      	sxth	r5, r5
 8016f5a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016f5e:	6823      	ldr	r3, [r4, #0]
 8016f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f62:	d109      	bne.n	8016f78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8016f64:	4629      	mov	r1, r5
 8016f66:	4620      	mov	r0, r4
 8016f68:	4798      	blx	r3
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	4631      	mov	r1, r6
 8016f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f70:	4620      	mov	r0, r4
 8016f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f76:	4718      	bx	r3
 8016f78:	4601      	mov	r1, r0
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	4798      	blx	r3
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	4629      	mov	r1, r5
 8016f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f84:	e7f4      	b.n	8016f70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8016f86:	bd70      	pop	{r4, r5, r6, pc}

08016f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016f88:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016f8c:	84c1      	strh	r1, [r0, #38]	; 0x26
 8016f8e:	b922      	cbnz	r2, 8016f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016f90:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f94:	b90b      	cbnz	r3, 8016f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016f96:	f7ff bfcd 	b.w	8016f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016f9a:	4770      	bx	lr

08016f9c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	8003      	strh	r3, [r0, #0]
 8016fa0:	8043      	strh	r3, [r0, #2]
 8016fa2:	8083      	strh	r3, [r0, #4]
 8016fa4:	80c3      	strh	r3, [r0, #6]
 8016fa6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016faa:	b91b      	cbnz	r3, 8016fb4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016fac:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016fb0:	2bff      	cmp	r3, #255	; 0xff
 8016fb2:	d103      	bne.n	8016fbc <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016fb4:	890b      	ldrh	r3, [r1, #8]
 8016fb6:	8083      	strh	r3, [r0, #4]
 8016fb8:	894b      	ldrh	r3, [r1, #10]
 8016fba:	80c3      	strh	r3, [r0, #6]
 8016fbc:	4770      	bx	lr
	...

08016fc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	466b      	mov	r3, sp
 8016fc6:	6808      	ldr	r0, [r1, #0]
 8016fc8:	6849      	ldr	r1, [r1, #4]
 8016fca:	c303      	stmia	r3!, {r0, r1}
 8016fcc:	6823      	ldr	r3, [r4, #0]
 8016fce:	4669      	mov	r1, sp
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fd4:	4798      	blx	r3
 8016fd6:	4b08      	ldr	r3, [pc, #32]	; (8016ff8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016fde:	b10a      	cbz	r2, 8016fe4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016fe0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016fe2:	b900      	cbnz	r0, 8016fe6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016fe4:	6898      	ldr	r0, [r3, #8]
 8016fe6:	6803      	ldr	r3, [r0, #0]
 8016fe8:	4669      	mov	r1, sp
 8016fea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016fec:	69dd      	ldr	r5, [r3, #28]
 8016fee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016ff2:	47a8      	blx	r5
 8016ff4:	b003      	add	sp, #12
 8016ff6:	bd30      	pop	{r4, r5, pc}
 8016ff8:	2000bc70 	.word	0x2000bc70

08016ffc <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8016ffc:	b570      	push	{r4, r5, r6, lr}
 8016ffe:	6803      	ldr	r3, [r0, #0]
 8017000:	4604      	mov	r4, r0
 8017002:	4615      	mov	r5, r2
 8017004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017006:	4798      	blx	r3
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	4629      	mov	r1, r5
 801700c:	4620      	mov	r0, r4
 801700e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017014:	4718      	bx	r3

08017016 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017016:	b570      	push	{r4, r5, r6, lr}
 8017018:	6803      	ldr	r3, [r0, #0]
 801701a:	4604      	mov	r4, r0
 801701c:	460e      	mov	r6, r1
 801701e:	4615      	mov	r5, r2
 8017020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017022:	4798      	blx	r3
 8017024:	8030      	strh	r0, [r6, #0]
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	4620      	mov	r0, r4
 801702a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801702c:	4798      	blx	r3
 801702e:	8028      	strh	r0, [r5, #0]
 8017030:	bd70      	pop	{r4, r5, r6, pc}

08017032 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017032:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8017036:	4770      	bx	lr

08017038 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8017038:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801703c:	4770      	bx	lr

0801703e <_ZN8touchgfx10TiledImageD1Ev>:
 801703e:	4770      	bx	lr

08017040 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017040:	b510      	push	{r4, lr}
 8017042:	4604      	mov	r4, r0
 8017044:	f000 fa40 	bl	80174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	4620      	mov	r0, r4
 801704c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017050:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801705a:	4718      	bx	r3

0801705c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017062:	4605      	mov	r5, r0
 8017064:	8541      	strh	r1, [r0, #42]	; 0x2a
 8017066:	4630      	mov	r0, r6
 8017068:	f003 fd7e 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801706c:	b1a0      	cbz	r0, 8017098 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801706e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017072:	4630      	mov	r0, r6
 8017074:	f003 fd78 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017078:	fb97 f4f0 	sdiv	r4, r7, r0
 801707c:	fb04 7410 	mls	r4, r4, r0, r7
 8017080:	4630      	mov	r0, r6
 8017082:	f003 fd71 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017086:	4404      	add	r4, r0
 8017088:	4630      	mov	r0, r6
 801708a:	f003 fd6d 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801708e:	fb94 f3f0 	sdiv	r3, r4, r0
 8017092:	fb03 4010 	mls	r0, r3, r0, r4
 8017096:	8568      	strh	r0, [r5, #42]	; 0x2a
 8017098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801709a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80170a0:	4605      	mov	r5, r0
 80170a2:	8581      	strh	r1, [r0, #44]	; 0x2c
 80170a4:	4630      	mov	r0, r6
 80170a6:	f003 fd99 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170aa:	b1a0      	cbz	r0, 80170d6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80170ac:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80170b0:	4630      	mov	r0, r6
 80170b2:	f003 fd93 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170b6:	fb97 f4f0 	sdiv	r4, r7, r0
 80170ba:	fb04 7410 	mls	r4, r4, r0, r7
 80170be:	4630      	mov	r0, r6
 80170c0:	f003 fd8c 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170c4:	4404      	add	r4, r0
 80170c6:	4630      	mov	r0, r6
 80170c8:	f003 fd88 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170cc:	fb94 f3f0 	sdiv	r3, r4, r0
 80170d0:	fb03 4010 	mls	r0, r3, r0, r4
 80170d4:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80170d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170d8 <_ZN8touchgfx10TiledImageD0Ev>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	4604      	mov	r4, r0
 80170dc:	2130      	movs	r1, #48	; 0x30
 80170de:	f00d fa6a 	bl	80245b6 <_ZdlPvj>
 80170e2:	4620      	mov	r0, r4
 80170e4:	bd10      	pop	{r4, pc}
	...

080170e8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80170e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ec:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80170f0:	b093      	sub	sp, #76	; 0x4c
 80170f2:	4607      	mov	r7, r0
 80170f4:	460e      	mov	r6, r1
 80170f6:	4658      	mov	r0, fp
 80170f8:	f003 fd36 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170fc:	4605      	mov	r5, r0
 80170fe:	4658      	mov	r0, fp
 8017100:	f003 fd6c 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017104:	4680      	mov	r8, r0
 8017106:	2d00      	cmp	r5, #0
 8017108:	f000 80c5 	beq.w	8017296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801710c:	2800      	cmp	r0, #0
 801710e:	f000 80c2 	beq.w	8017296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017112:	2300      	movs	r3, #0
 8017114:	a90e      	add	r1, sp, #56	; 0x38
 8017116:	4638      	mov	r0, r7
 8017118:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017120:	4798      	blx	r3
 8017122:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8017126:	f9b6 3000 	ldrsh.w	r3, [r6]
 801712a:	88b1      	ldrh	r1, [r6, #4]
 801712c:	189c      	adds	r4, r3, r2
 801712e:	440b      	add	r3, r1
 8017130:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017134:	fa02 f383 	sxtah	r3, r2, r3
 8017138:	3b01      	subs	r3, #1
 801713a:	fb93 f3f5 	sdiv	r3, r3, r5
 801713e:	fb94 f4f5 	sdiv	r4, r4, r5
 8017142:	fb13 f305 	smulbb	r3, r3, r5
 8017146:	fb14 f405 	smulbb	r4, r4, r5
 801714a:	b21b      	sxth	r3, r3
 801714c:	1aa4      	subs	r4, r4, r2
 801714e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017150:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017154:	b2a4      	uxth	r4, r4
 8017156:	185a      	adds	r2, r3, r1
 8017158:	fb92 f2f8 	sdiv	r2, r2, r8
 801715c:	fb12 f208 	smulbb	r2, r2, r8
 8017160:	1a52      	subs	r2, r2, r1
 8017162:	b212      	sxth	r2, r2
 8017164:	920c      	str	r2, [sp, #48]	; 0x30
 8017166:	88f2      	ldrh	r2, [r6, #6]
 8017168:	4413      	add	r3, r2
 801716a:	fa01 f383 	sxtah	r3, r1, r3
 801716e:	3b01      	subs	r3, #1
 8017170:	fb93 f3f8 	sdiv	r3, r3, r8
 8017174:	fb13 f308 	smulbb	r3, r3, r8
 8017178:	b21b      	sxth	r3, r3
 801717a:	930d      	str	r3, [sp, #52]	; 0x34
 801717c:	1963      	adds	r3, r4, r5
 801717e:	fa1f fa83 	uxth.w	sl, r3
 8017182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017184:	b223      	sxth	r3, r4
 8017186:	4293      	cmp	r3, r2
 8017188:	9305      	str	r3, [sp, #20]
 801718a:	f300 8084 	bgt.w	8017296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801718e:	fa0f f38a 	sxth.w	r3, sl
 8017192:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017196:	9309      	str	r3, [sp, #36]	; 0x24
 8017198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801719a:	4599      	cmp	r9, r3
 801719c:	dd04      	ble.n	80171a8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801719e:	442c      	add	r4, r5
 80171a0:	eb05 030a 	add.w	r3, r5, sl
 80171a4:	b2a4      	uxth	r4, r4
 80171a6:	e7ea      	b.n	801717e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 80171a8:	f9b6 c000 	ldrsh.w	ip, [r6]
 80171ac:	88b2      	ldrh	r2, [r6, #4]
 80171ae:	4462      	add	r2, ip
 80171b0:	b292      	uxth	r2, r2
 80171b2:	b213      	sxth	r3, r2
 80171b4:	9308      	str	r3, [sp, #32]
 80171b6:	fa1f f389 	uxth.w	r3, r9
 80171ba:	eb08 0103 	add.w	r1, r8, r3
 80171be:	9307      	str	r3, [sp, #28]
 80171c0:	b289      	uxth	r1, r1
 80171c2:	b208      	sxth	r0, r1
 80171c4:	9006      	str	r0, [sp, #24]
 80171c6:	9805      	ldr	r0, [sp, #20]
 80171c8:	4603      	mov	r3, r0
 80171ca:	9808      	ldr	r0, [sp, #32]
 80171cc:	4283      	cmp	r3, r0
 80171ce:	da5e      	bge.n	801728e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171d2:	4584      	cmp	ip, r0
 80171d4:	da5b      	bge.n	801728e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171d6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80171da:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80171de:	4486      	add	lr, r0
 80171e0:	fa1f fe8e 	uxth.w	lr, lr
 80171e4:	fa0f f38e 	sxth.w	r3, lr
 80171e8:	4599      	cmp	r9, r3
 80171ea:	930a      	str	r3, [sp, #40]	; 0x28
 80171ec:	da4f      	bge.n	801728e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171ee:	9b06      	ldr	r3, [sp, #24]
 80171f0:	4298      	cmp	r0, r3
 80171f2:	da4c      	bge.n	801728e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80171f4:	9b05      	ldr	r3, [sp, #20]
 80171f6:	459c      	cmp	ip, r3
 80171f8:	bfb8      	it	lt
 80171fa:	469c      	movlt	ip, r3
 80171fc:	4548      	cmp	r0, r9
 80171fe:	9b08      	ldr	r3, [sp, #32]
 8017200:	bfb8      	it	lt
 8017202:	4648      	movlt	r0, r9
 8017204:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8017208:	4699      	mov	r9, r3
 801720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801720c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8017210:	4599      	cmp	r9, r3
 8017212:	bfc8      	it	gt
 8017214:	4652      	movgt	r2, sl
 8017216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017218:	eba2 020c 	sub.w	r2, r2, ip
 801721c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017220:	9a06      	ldr	r2, [sp, #24]
 8017222:	4293      	cmp	r3, r2
 8017224:	bfd8      	it	le
 8017226:	4671      	movle	r1, lr
 8017228:	1a09      	subs	r1, r1, r0
 801722a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801722e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017232:	9b07      	ldr	r3, [sp, #28]
 8017234:	1b12      	subs	r2, r2, r4
 8017236:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801723a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801723e:	1ad2      	subs	r2, r2, r3
 8017240:	4b16      	ldr	r3, [pc, #88]	; (801729c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017242:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801724c:	b109      	cbz	r1, 8017252 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801724e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017250:	b900      	cbnz	r0, 8017254 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017252:	6890      	ldr	r0, [r2, #8]
 8017254:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017258:	f04f 0c01 	mov.w	ip, #1
 801725c:	9b07      	ldr	r3, [sp, #28]
 801725e:	6801      	ldr	r1, [r0, #0]
 8017260:	4413      	add	r3, r2
 8017262:	f8cd c008 	str.w	ip, [sp, #8]
 8017266:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801726a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801726e:	b21b      	sxth	r3, r3
 8017270:	4422      	add	r2, r4
 8017272:	f8cd c004 	str.w	ip, [sp, #4]
 8017276:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801727a:	b212      	sxth	r2, r2
 801727c:	f8cd c000 	str.w	ip, [sp]
 8017280:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017284:	4659      	mov	r1, fp
 8017286:	47c8      	blx	r9
 8017288:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801728c:	e784      	b.n	8017198 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801728e:	2300      	movs	r3, #0
 8017290:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017294:	e7cb      	b.n	801722e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8017296:	b013      	add	sp, #76	; 0x4c
 8017298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729c:	2000bc70 	.word	0x2000bc70

080172a0 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80172a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80172a8:	4606      	mov	r6, r0
 80172aa:	4689      	mov	r9, r1
 80172ac:	2bff      	cmp	r3, #255	; 0xff
 80172ae:	d008      	beq.n	80172c2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80172b0:	2300      	movs	r3, #0
 80172b2:	8003      	strh	r3, [r0, #0]
 80172b4:	8043      	strh	r3, [r0, #2]
 80172b6:	8083      	strh	r3, [r0, #4]
 80172b8:	4630      	mov	r0, r6
 80172ba:	80f3      	strh	r3, [r6, #6]
 80172bc:	b003      	add	sp, #12
 80172be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80172c6:	4668      	mov	r0, sp
 80172c8:	4659      	mov	r1, fp
 80172ca:	f003 fcc1 	bl	801ac50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80172ce:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80172d2:	4658      	mov	r0, fp
 80172d4:	f9bd 7000 	ldrsh.w	r7, [sp]
 80172d8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80172dc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80172e0:	f003 fc42 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80172e4:	4284      	cmp	r4, r0
 80172e6:	d10d      	bne.n	8017304 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80172e8:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80172ec:	4658      	mov	r0, fp
 80172ee:	f003 fc75 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80172f2:	4580      	cmp	r8, r0
 80172f4:	d12a      	bne.n	801734c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80172f6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80172fa:	8037      	strh	r7, [r6, #0]
 80172fc:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017300:	80b5      	strh	r5, [r6, #4]
 8017302:	e7d9      	b.n	80172b8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017304:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8017308:	4658      	mov	r0, fp
 801730a:	f003 fc2d 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801730e:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017312:	1b7f      	subs	r7, r7, r5
 8017314:	b2a3      	uxth	r3, r4
 8017316:	b2bd      	uxth	r5, r7
 8017318:	b22f      	sxth	r7, r5
 801731a:	4428      	add	r0, r5
 801731c:	2f00      	cmp	r7, #0
 801731e:	b280      	uxth	r0, r0
 8017320:	bfb8      	it	lt
 8017322:	18ed      	addlt	r5, r5, r3
 8017324:	4403      	add	r3, r0
 8017326:	bfac      	ite	ge
 8017328:	4625      	movge	r5, r4
 801732a:	2700      	movlt	r7, #0
 801732c:	b29b      	uxth	r3, r3
 801732e:	bfb8      	it	lt
 8017330:	b22d      	sxthlt	r5, r5
 8017332:	b219      	sxth	r1, r3
 8017334:	bfb8      	it	lt
 8017336:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801733a:	4291      	cmp	r1, r2
 801733c:	bfc4      	itt	gt
 801733e:	1a9c      	subgt	r4, r3, r2
 8017340:	b224      	sxthgt	r4, r4
 8017342:	42ac      	cmp	r4, r5
 8017344:	bfc4      	itt	gt
 8017346:	b207      	sxthgt	r7, r0
 8017348:	4625      	movgt	r5, r4
 801734a:	e7cf      	b.n	80172ec <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801734c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017350:	4658      	mov	r0, fp
 8017352:	f003 fc43 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017356:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801735a:	ebaa 0404 	sub.w	r4, sl, r4
 801735e:	fa1f f288 	uxth.w	r2, r8
 8017362:	b2a4      	uxth	r4, r4
 8017364:	fa0f fa84 	sxth.w	sl, r4
 8017368:	4420      	add	r0, r4
 801736a:	f1ba 0f00 	cmp.w	sl, #0
 801736e:	b280      	uxth	r0, r0
 8017370:	bfb8      	it	lt
 8017372:	18a3      	addlt	r3, r4, r2
 8017374:	4402      	add	r2, r0
 8017376:	bfac      	ite	ge
 8017378:	4643      	movge	r3, r8
 801737a:	f04f 0a00 	movlt.w	sl, #0
 801737e:	b292      	uxth	r2, r2
 8017380:	bfb8      	it	lt
 8017382:	b21b      	sxthlt	r3, r3
 8017384:	b214      	sxth	r4, r2
 8017386:	bfb8      	it	lt
 8017388:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801738c:	428c      	cmp	r4, r1
 801738e:	bfc4      	itt	gt
 8017390:	eba2 0801 	subgt.w	r8, r2, r1
 8017394:	fa0f f888 	sxthgt.w	r8, r8
 8017398:	4543      	cmp	r3, r8
 801739a:	bfbc      	itt	lt
 801739c:	fa0f fa80 	sxthlt.w	sl, r0
 80173a0:	4643      	movlt	r3, r8
 80173a2:	e7aa      	b.n	80172fa <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080173a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80173a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80173a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173ac:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80173ae:	4604      	mov	r4, r0
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d018      	beq.n	80173e6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80173b4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80173b8:	4628      	mov	r0, r5
 80173ba:	f7f7 fe0d 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 80173be:	6803      	ldr	r3, [r0, #0]
 80173c0:	4606      	mov	r6, r0
 80173c2:	4628      	mov	r0, r5
 80173c4:	69df      	ldr	r7, [r3, #28]
 80173c6:	f7f7 fe23 	bl	800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80173ca:	4680      	mov	r8, r0
 80173cc:	4628      	mov	r0, r5
 80173ce:	f7f9 f91d 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 80173d2:	2300      	movs	r3, #0
 80173d4:	4602      	mov	r2, r0
 80173d6:	4641      	mov	r1, r8
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	4630      	mov	r0, r6
 80173dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173de:	47b8      	blx	r7
 80173e0:	b002      	add	sp, #8
 80173e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e6:	2000      	movs	r0, #0
 80173e8:	e7fa      	b.n	80173e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080173ea <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80173ea:	b570      	push	{r4, r5, r6, lr}
 80173ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80173f2:	4604      	mov	r4, r0
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d00c      	beq.n	8017412 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80173f8:	f850 3b26 	ldr.w	r3, [r0], #38
 80173fc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80173fe:	f7f9 f905 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 8017402:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017404:	4601      	mov	r1, r0
 8017406:	46ac      	mov	ip, r5
 8017408:	4620      	mov	r0, r4
 801740a:	2300      	movs	r3, #0
 801740c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017410:	4760      	bx	ip
 8017412:	2000      	movs	r0, #0
 8017414:	bd70      	pop	{r4, r5, r6, pc}
	...

08017418 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801741c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017420:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017422:	b08d      	sub	sp, #52	; 0x34
 8017424:	4604      	mov	r4, r0
 8017426:	429e      	cmp	r6, r3
 8017428:	460f      	mov	r7, r1
 801742a:	d048      	beq.n	80174be <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801742c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017430:	4628      	mov	r0, r5
 8017432:	f7f7 fdd1 	bl	800efd8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017436:	4680      	mov	r8, r0
 8017438:	2800      	cmp	r0, #0
 801743a:	d040      	beq.n	80174be <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801743c:	4628      	mov	r0, r5
 801743e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017442:	f7f7 fdfd 	bl	800f040 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017446:	4b1f      	ldr	r3, [pc, #124]	; (80174c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017448:	4628      	mov	r0, r5
 801744a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017454:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017458:	785e      	ldrb	r6, [r3, #1]
 801745a:	f7f7 fdd9 	bl	800f010 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801745e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017462:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017468:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801746c:	f88d 6020 	strb.w	r6, [sp, #32]
 8017470:	ae05      	add	r6, sp, #20
 8017472:	9309      	str	r3, [sp, #36]	; 0x24
 8017474:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017478:	f8cd 801c 	str.w	r8, [sp, #28]
 801747c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017480:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017484:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017488:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801748c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017490:	f7f8 f982 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8017494:	4621      	mov	r1, r4
 8017496:	4680      	mov	r8, r0
 8017498:	4630      	mov	r0, r6
 801749a:	f001 fd98 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801749e:	4628      	mov	r0, r5
 80174a0:	f7f9 f8b4 	bl	801060c <_ZNK8touchgfx9TypedText7getTextEv>
 80174a4:	2300      	movs	r3, #0
 80174a6:	9303      	str	r3, [sp, #12]
 80174a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174aa:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80174ae:	ab07      	add	r3, sp, #28
 80174b0:	4640      	mov	r0, r8
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	463b      	mov	r3, r7
 80174b6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80174ba:	f000 faa9 	bl	8017a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80174be:	b00d      	add	sp, #52	; 0x34
 80174c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c4:	2000bd00 	.word	0x2000bd00

080174c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80174c8:	b570      	push	{r4, r5, r6, lr}
 80174ca:	4605      	mov	r5, r0
 80174cc:	880b      	ldrh	r3, [r1, #0]
 80174ce:	4604      	mov	r4, r0
 80174d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80174d2:	f855 3b26 	ldr.w	r3, [r5], #38
 80174d6:	4628      	mov	r0, r5
 80174d8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80174da:	f003 fb45 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174de:	b201      	sxth	r1, r0
 80174e0:	4620      	mov	r0, r4
 80174e2:	47b0      	blx	r6
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	4628      	mov	r0, r5
 80174e8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80174ea:	f003 fb77 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80174ee:	b201      	sxth	r1, r0
 80174f0:	4620      	mov	r0, r4
 80174f2:	47b0      	blx	r6
 80174f4:	4628      	mov	r0, r5
 80174f6:	f003 fc05 	bl	801ad04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80174fa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80174fe:	bd70      	pop	{r4, r5, r6, pc}

08017500 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017500:	b510      	push	{r4, lr}
 8017502:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017506:	4604      	mov	r4, r0
 8017508:	2bff      	cmp	r3, #255	; 0xff
 801750a:	d006      	beq.n	801751a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801750c:	2300      	movs	r3, #0
 801750e:	8003      	strh	r3, [r0, #0]
 8017510:	8043      	strh	r3, [r0, #2]
 8017512:	8083      	strh	r3, [r0, #4]
 8017514:	80c3      	strh	r3, [r0, #6]
 8017516:	4620      	mov	r0, r4
 8017518:	bd10      	pop	{r4, pc}
 801751a:	3126      	adds	r1, #38	; 0x26
 801751c:	f003 fb98 	bl	801ac50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017520:	e7f9      	b.n	8017516 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017524 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017528:	4604      	mov	r4, r0
 801752a:	b088      	sub	sp, #32
 801752c:	2500      	movs	r5, #0
 801752e:	460f      	mov	r7, r1
 8017530:	f854 3b26 	ldr.w	r3, [r4], #38
 8017534:	a904      	add	r1, sp, #16
 8017536:	4606      	mov	r6, r0
 8017538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801753e:	4798      	blx	r3
 8017540:	4620      	mov	r0, r4
 8017542:	f003 fb11 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017546:	4680      	mov	r8, r0
 8017548:	4620      	mov	r0, r4
 801754a:	f003 fb47 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801754e:	9506      	str	r5, [sp, #24]
 8017550:	ad06      	add	r5, sp, #24
 8017552:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017556:	4639      	mov	r1, r7
 8017558:	f8ad 801c 	strh.w	r8, [sp, #28]
 801755c:	4628      	mov	r0, r5
 801755e:	f7fd fef5 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8017562:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017566:	b1c3      	cbz	r3, 801759a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017568:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801756c:	b1ab      	cbz	r3, 801759a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801756e:	4b0c      	ldr	r3, [pc, #48]	; (80175a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017576:	b10a      	cbz	r2, 801757c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017578:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801757a:	b900      	cbnz	r0, 801757e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801757c:	6898      	ldr	r0, [r3, #8]
 801757e:	2701      	movs	r7, #1
 8017580:	6801      	ldr	r1, [r0, #0]
 8017582:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017586:	9702      	str	r7, [sp, #8]
 8017588:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801758c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017590:	e9cd 5600 	strd	r5, r6, [sp]
 8017594:	68cd      	ldr	r5, [r1, #12]
 8017596:	4621      	mov	r1, r4
 8017598:	47a8      	blx	r5
 801759a:	b008      	add	sp, #32
 801759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175a0:	2000bc70 	.word	0x2000bc70

080175a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80175a4:	4b02      	ldr	r3, [pc, #8]	; (80175b0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80175a6:	6018      	str	r0, [r3, #0]
 80175a8:	4b02      	ldr	r3, [pc, #8]	; (80175b4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80175aa:	6019      	str	r1, [r3, #0]
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	2000bc78 	.word	0x2000bc78
 80175b4:	2000bc8c 	.word	0x2000bc8c

080175b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	4c2b      	ldr	r4, [pc, #172]	; (8017668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80175bc:	4b2b      	ldr	r3, [pc, #172]	; (801766c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80175be:	6821      	ldr	r1, [r4, #0]
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	4281      	cmp	r1, r0
 80175c4:	4d2a      	ldr	r5, [pc, #168]	; (8017670 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80175c6:	492b      	ldr	r1, [pc, #172]	; (8017674 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80175c8:	d108      	bne.n	80175dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80175ca:	682b      	ldr	r3, [r5, #0]
 80175cc:	4293      	cmp	r3, r2
 80175ce:	d105      	bne.n	80175dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80175d0:	6808      	ldr	r0, [r1, #0]
 80175d2:	280f      	cmp	r0, #15
 80175d4:	bf94      	ite	ls
 80175d6:	2000      	movls	r0, #0
 80175d8:	2001      	movhi	r0, #1
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	4b26      	ldr	r3, [pc, #152]	; (8017678 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80175de:	6020      	str	r0, [r4, #0]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	602a      	str	r2, [r5, #0]
 80175e4:	4298      	cmp	r0, r3
 80175e6:	d905      	bls.n	80175f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80175e8:	4b24      	ldr	r3, [pc, #144]	; (801767c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80175ea:	2137      	movs	r1, #55	; 0x37
 80175ec:	4a24      	ldr	r2, [pc, #144]	; (8017680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80175ee:	4825      	ldr	r0, [pc, #148]	; (8017684 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80175f0:	f00d f80c 	bl	802460c <__assert_func>
 80175f4:	f010 0403 	ands.w	r4, r0, #3
 80175f8:	bf1f      	itttt	ne
 80175fa:	f1c4 0504 	rsbne	r5, r4, #4
 80175fe:	3b04      	subne	r3, #4
 8017600:	1952      	addne	r2, r2, r5
 8017602:	191b      	addne	r3, r3, r4
 8017604:	4d20      	ldr	r5, [pc, #128]	; (8017688 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017606:	4402      	add	r2, r0
 8017608:	1a1b      	subs	r3, r3, r0
 801760a:	3001      	adds	r0, #1
 801760c:	602a      	str	r2, [r5, #0]
 801760e:	f020 0401 	bic.w	r4, r0, #1
 8017612:	42a3      	cmp	r3, r4
 8017614:	d203      	bcs.n	801761e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017616:	4b19      	ldr	r3, [pc, #100]	; (801767c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017618:	214a      	movs	r1, #74	; 0x4a
 801761a:	4a19      	ldr	r2, [pc, #100]	; (8017680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801761c:	e7e7      	b.n	80175ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801761e:	f010 0002 	ands.w	r0, r0, #2
 8017622:	bf1f      	itttt	ne
 8017624:	f1c0 0504 	rsbne	r5, r0, #4
 8017628:	1952      	addne	r2, r2, r5
 801762a:	1f05      	subne	r5, r0, #4
 801762c:	195b      	addne	r3, r3, r5
 801762e:	4422      	add	r2, r4
 8017630:	4d16      	ldr	r5, [pc, #88]	; (801768c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017632:	1b1b      	subs	r3, r3, r4
 8017634:	602a      	str	r2, [r5, #0]
 8017636:	429c      	cmp	r4, r3
 8017638:	d903      	bls.n	8017642 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801763a:	4b10      	ldr	r3, [pc, #64]	; (801767c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801763c:	215d      	movs	r1, #93	; 0x5d
 801763e:	4a10      	ldr	r2, [pc, #64]	; (8017680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017640:	e7d5      	b.n	80175ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017642:	b120      	cbz	r0, 801764e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017644:	f1c0 0504 	rsb	r5, r0, #4
 8017648:	3804      	subs	r0, #4
 801764a:	442a      	add	r2, r5
 801764c:	4403      	add	r3, r0
 801764e:	1b1b      	subs	r3, r3, r4
 8017650:	4422      	add	r2, r4
 8017652:	480f      	ldr	r0, [pc, #60]	; (8017690 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017654:	2b0f      	cmp	r3, #15
 8017656:	600b      	str	r3, [r1, #0]
 8017658:	6002      	str	r2, [r0, #0]
 801765a:	d803      	bhi.n	8017664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801765c:	4b0d      	ldr	r3, [pc, #52]	; (8017694 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801765e:	2170      	movs	r1, #112	; 0x70
 8017660:	4a07      	ldr	r2, [pc, #28]	; (8017680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017662:	e7c4      	b.n	80175ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017664:	2001      	movs	r0, #1
 8017666:	e7b8      	b.n	80175da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017668:	2000bc80 	.word	0x2000bc80
 801766c:	2000bc78 	.word	0x2000bc78
 8017670:	2000bc88 	.word	0x2000bc88
 8017674:	2000bc90 	.word	0x2000bc90
 8017678:	2000bc8c 	.word	0x2000bc8c
 801767c:	08027d64 	.word	0x08027d64
 8017680:	08027e2c 	.word	0x08027e2c
 8017684:	08027d9d 	.word	0x08027d9d
 8017688:	2000bc94 	.word	0x2000bc94
 801768c:	2000bc84 	.word	0x2000bc84
 8017690:	2000bc7c 	.word	0x2000bc7c
 8017694:	08027de7 	.word	0x08027de7

08017698 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017698:	4b04      	ldr	r3, [pc, #16]	; (80176ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801769a:	6818      	ldr	r0, [r3, #0]
 801769c:	b120      	cbz	r0, 80176a8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801769e:	4b04      	ldr	r3, [pc, #16]	; (80176b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80176a0:	6818      	ldr	r0, [r3, #0]
 80176a2:	3000      	adds	r0, #0
 80176a4:	bf18      	it	ne
 80176a6:	2001      	movne	r0, #1
 80176a8:	4770      	bx	lr
 80176aa:	bf00      	nop
 80176ac:	2000bc78 	.word	0x2000bc78
 80176b0:	2000bc8c 	.word	0x2000bc8c

080176b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80176b4:	4b01      	ldr	r3, [pc, #4]	; (80176bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80176b6:	6818      	ldr	r0, [r3, #0]
 80176b8:	4770      	bx	lr
 80176ba:	bf00      	nop
 80176bc:	2000bc80 	.word	0x2000bc80

080176c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80176c0:	4b01      	ldr	r3, [pc, #4]	; (80176c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80176c2:	6818      	ldr	r0, [r3, #0]
 80176c4:	4770      	bx	lr
 80176c6:	bf00      	nop
 80176c8:	2000bc88 	.word	0x2000bc88

080176cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80176cc:	4b01      	ldr	r3, [pc, #4]	; (80176d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80176ce:	6818      	ldr	r0, [r3, #0]
 80176d0:	4770      	bx	lr
 80176d2:	bf00      	nop
 80176d4:	2000bc94 	.word	0x2000bc94

080176d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80176d8:	4b01      	ldr	r3, [pc, #4]	; (80176e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80176da:	6818      	ldr	r0, [r3, #0]
 80176dc:	4770      	bx	lr
 80176de:	bf00      	nop
 80176e0:	2000bc84 	.word	0x2000bc84

080176e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80176e4:	4b01      	ldr	r3, [pc, #4]	; (80176ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80176e6:	6818      	ldr	r0, [r3, #0]
 80176e8:	4770      	bx	lr
 80176ea:	bf00      	nop
 80176ec:	2000bc7c 	.word	0x2000bc7c

080176f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80176f0:	4b01      	ldr	r3, [pc, #4]	; (80176f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80176f2:	6818      	ldr	r0, [r3, #0]
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop
 80176f8:	2000bc90 	.word	0x2000bc90

080176fc <_ZN8touchgfx3LCD4initEv>:
 80176fc:	4770      	bx	lr

080176fe <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80176fe:	2000      	movs	r0, #0
 8017700:	4770      	bx	lr

08017702 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017706:	b091      	sub	sp, #68	; 0x44
 8017708:	4699      	mov	r9, r3
 801770a:	4617      	mov	r7, r2
 801770c:	2500      	movs	r5, #0
 801770e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017712:	4680      	mov	r8, r0
 8017714:	a80e      	add	r0, sp, #56	; 0x38
 8017716:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017718:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801771c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017720:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017724:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017728:	910d      	str	r1, [sp, #52]	; 0x34
 801772a:	950e      	str	r5, [sp, #56]	; 0x38
 801772c:	f000 fe3a 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017730:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017732:	f8d9 6000 	ldr.w	r6, [r9]
 8017736:	6818      	ldr	r0, [r3, #0]
 8017738:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801773a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801773e:	1b80      	subs	r0, r0, r6
 8017740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017744:	eb02 0c06 	add.w	ip, r2, r6
 8017748:	ebab 0e0c 	sub.w	lr, fp, ip
 801774c:	4570      	cmp	r0, lr
 801774e:	f340 80bc 	ble.w	80178ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017752:	88a1      	ldrh	r1, [r4, #4]
 8017754:	4459      	add	r1, fp
 8017756:	b209      	sxth	r1, r1
 8017758:	458c      	cmp	ip, r1
 801775a:	f300 80b6 	bgt.w	80178ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801775e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017762:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017766:	4283      	cmp	r3, r0
 8017768:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801776c:	edd9 6a07 	vldr	s13, [r9, #28]
 8017770:	bfa8      	it	ge
 8017772:	4603      	movge	r3, r0
 8017774:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017778:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801777c:	45e3      	cmp	fp, ip
 801777e:	ee07 3a90 	vmov	s15, r3
 8017782:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017786:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801778a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801778e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017792:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801779a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801779e:	ee32 1a05 	vadd.f32	s2, s4, s10
 80177a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80177a6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80177aa:	ee61 1a87 	vmul.f32	s3, s3, s14
 80177ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 80177b2:	f340 808d 	ble.w	80178d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80177b6:	fb9e f5f3 	sdiv	r5, lr, r3
 80177ba:	ee07 5a10 	vmov	s14, r5
 80177be:	2d00      	cmp	r5, #0
 80177c0:	fb03 e415 	mls	r4, r3, r5, lr
 80177c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177c8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80177cc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80177d0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80177d4:	dd12      	ble.n	80177fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80177d6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80177da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80177de:	ee31 2a45 	vsub.f32	s4, s2, s10
 80177e2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80177e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ea:	bf14      	ite	ne
 80177ec:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80177f0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80177f4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80177f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80177fc:	fb05 f703 	mul.w	r7, r5, r3
 8017800:	1bc0      	subs	r0, r0, r7
 8017802:	443e      	add	r6, r7
 8017804:	1997      	adds	r7, r2, r6
 8017806:	4407      	add	r7, r0
 8017808:	42b9      	cmp	r1, r7
 801780a:	bfbc      	itt	lt
 801780c:	1a88      	sublt	r0, r1, r2
 801780e:	1b80      	sublt	r0, r0, r6
 8017810:	2800      	cmp	r0, #0
 8017812:	dd5a      	ble.n	80178ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017814:	fb90 f1f3 	sdiv	r1, r0, r3
 8017818:	fb03 0211 	mls	r2, r3, r1, r0
 801781c:	b90a      	cbnz	r2, 8017822 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801781e:	3901      	subs	r1, #1
 8017820:	461a      	mov	r2, r3
 8017822:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017826:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801782a:	44a4      	add	ip, r4
 801782c:	2900      	cmp	r1, #0
 801782e:	bfcc      	ite	gt
 8017830:	469e      	movgt	lr, r3
 8017832:	4696      	movle	lr, r2
 8017834:	fb03 c505 	mla	r5, r3, r5, ip
 8017838:	eef0 6a42 	vmov.f32	s13, s4
 801783c:	eeb0 7a61 	vmov.f32	s14, s3
 8017840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017844:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017848:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801784c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017850:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017854:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017858:	ee17 0a90 	vmov	r0, s15
 801785c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017860:	fb90 f6f3 	sdiv	r6, r0, r3
 8017864:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017868:	ee17 0a90 	vmov	r0, s15
 801786c:	fb90 f7f3 	sdiv	r7, r0, r3
 8017870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017874:	f8d0 8000 	ldr.w	r8, [r0]
 8017878:	900c      	str	r0, [sp, #48]	; 0x30
 801787a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801787c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017880:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017884:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017888:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801788c:	f8cd a020 	str.w	sl, [sp, #32]
 8017890:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017894:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017896:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801789a:	9603      	str	r6, [sp, #12]
 801789c:	44ca      	add	sl, r9
 801789e:	9506      	str	r5, [sp, #24]
 80178a0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80178a4:	ee16 0a90 	vmov	r0, s13
 80178a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80178ac:	fb07 0704 	mla	r7, r7, r4, r0
 80178b0:	ee17 0a10 	vmov	r0, s14
 80178b4:	fb06 0604 	mla	r6, r6, r4, r0
 80178b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80178ba:	9702      	str	r7, [sp, #8]
 80178bc:	e9cd 3600 	strd	r3, r6, [sp]
 80178c0:	ebae 0304 	sub.w	r3, lr, r4
 80178c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80178c8:	47a8      	blx	r5
 80178ca:	b011      	add	sp, #68	; 0x44
 80178cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d0:	462c      	mov	r4, r5
 80178d2:	e797      	b.n	8017804 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080178d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80178d4:	b570      	push	{r4, r5, r6, lr}
 80178d6:	4604      	mov	r4, r0
 80178d8:	2500      	movs	r5, #0
 80178da:	9804      	ldr	r0, [sp, #16]
 80178dc:	7223      	strb	r3, [r4, #8]
 80178de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80178e2:	8025      	strh	r5, [r4, #0]
 80178e4:	6061      	str	r1, [r4, #4]
 80178e6:	7263      	strb	r3, [r4, #9]
 80178e8:	60e0      	str	r0, [r4, #12]
 80178ea:	8222      	strh	r2, [r4, #16]
 80178ec:	8265      	strh	r5, [r4, #18]
 80178ee:	82a5      	strh	r5, [r4, #20]
 80178f0:	82e5      	strh	r5, [r4, #22]
 80178f2:	8325      	strh	r5, [r4, #24]
 80178f4:	8365      	strh	r5, [r4, #26]
 80178f6:	83a5      	strh	r5, [r4, #28]
 80178f8:	77a5      	strb	r5, [r4, #30]
 80178fa:	6803      	ldr	r3, [r0, #0]
 80178fc:	695b      	ldr	r3, [r3, #20]
 80178fe:	4798      	blx	r3
 8017900:	4606      	mov	r6, r0
 8017902:	b1f8      	cbz	r0, 8017944 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017904:	68e0      	ldr	r0, [r4, #12]
 8017906:	4631      	mov	r1, r6
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	4798      	blx	r3
 801790e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017912:	4605      	mov	r5, r0
 8017914:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017918:	7a83      	ldrb	r3, [r0, #10]
 801791a:	4313      	orrs	r3, r2
 801791c:	83a3      	strh	r3, [r4, #28]
 801791e:	7a63      	ldrb	r3, [r4, #9]
 8017920:	2b04      	cmp	r3, #4
 8017922:	d10f      	bne.n	8017944 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017924:	68e0      	ldr	r0, [r4, #12]
 8017926:	462a      	mov	r2, r5
 8017928:	4631      	mov	r1, r6
 801792a:	6803      	ldr	r3, [r0, #0]
 801792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801792e:	4798      	blx	r3
 8017930:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017934:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017938:	7aab      	ldrb	r3, [r5, #10]
 801793a:	4313      	orrs	r3, r2
 801793c:	4418      	add	r0, r3
 801793e:	8ba3      	ldrh	r3, [r4, #28]
 8017940:	4418      	add	r0, r3
 8017942:	83a0      	strh	r0, [r4, #28]
 8017944:	4620      	mov	r0, r4
 8017946:	bd70      	pop	{r4, r5, r6, pc}

08017948 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794c:	2400      	movs	r4, #0
 801794e:	b085      	sub	sp, #20
 8017950:	4681      	mov	r9, r0
 8017952:	460f      	mov	r7, r1
 8017954:	4692      	mov	sl, r2
 8017956:	469b      	mov	fp, r3
 8017958:	46a0      	mov	r8, r4
 801795a:	4626      	mov	r6, r4
 801795c:	4554      	cmp	r4, sl
 801795e:	da21      	bge.n	80179a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017960:	2300      	movs	r3, #0
 8017962:	463a      	mov	r2, r7
 8017964:	4659      	mov	r1, fp
 8017966:	4648      	mov	r0, r9
 8017968:	9303      	str	r3, [sp, #12]
 801796a:	ab03      	add	r3, sp, #12
 801796c:	f002 fb52 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017970:	4605      	mov	r5, r0
 8017972:	b1b8      	cbz	r0, 80179a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017974:	280a      	cmp	r0, #10
 8017976:	d015      	beq.n	80179a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017978:	9a03      	ldr	r2, [sp, #12]
 801797a:	b182      	cbz	r2, 801799e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801797c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017980:	4641      	mov	r1, r8
 8017982:	7a93      	ldrb	r3, [r2, #10]
 8017984:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017988:	8895      	ldrh	r5, [r2, #4]
 801798a:	4303      	orrs	r3, r0
 801798c:	4638      	mov	r0, r7
 801798e:	9301      	str	r3, [sp, #4]
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017994:	4798      	blx	r3
 8017996:	9b01      	ldr	r3, [sp, #4]
 8017998:	4418      	add	r0, r3
 801799a:	4406      	add	r6, r0
 801799c:	b2b6      	uxth	r6, r6
 801799e:	3401      	adds	r4, #1
 80179a0:	46a8      	mov	r8, r5
 80179a2:	e7db      	b.n	801795c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80179a4:	4630      	mov	r0, r6
 80179a6:	b005      	add	sp, #20
 80179a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80179ac:	2a02      	cmp	r2, #2
 80179ae:	b530      	push	{r4, r5, lr}
 80179b0:	d011      	beq.n	80179d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80179b2:	2a03      	cmp	r2, #3
 80179b4:	d01c      	beq.n	80179f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80179b6:	2a01      	cmp	r2, #1
 80179b8:	d10c      	bne.n	80179d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80179ba:	888b      	ldrh	r3, [r1, #4]
 80179bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80179c0:	8801      	ldrh	r1, [r0, #0]
 80179c2:	1a9b      	subs	r3, r3, r2
 80179c4:	8844      	ldrh	r4, [r0, #2]
 80179c6:	1a5b      	subs	r3, r3, r1
 80179c8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80179cc:	8004      	strh	r4, [r0, #0]
 80179ce:	8043      	strh	r3, [r0, #2]
 80179d0:	8081      	strh	r1, [r0, #4]
 80179d2:	80c2      	strh	r2, [r0, #6]
 80179d4:	bd30      	pop	{r4, r5, pc}
 80179d6:	88cb      	ldrh	r3, [r1, #6]
 80179d8:	88c2      	ldrh	r2, [r0, #6]
 80179da:	1a9b      	subs	r3, r3, r2
 80179dc:	8842      	ldrh	r2, [r0, #2]
 80179de:	1a9b      	subs	r3, r3, r2
 80179e0:	888a      	ldrh	r2, [r1, #4]
 80179e2:	8881      	ldrh	r1, [r0, #4]
 80179e4:	8043      	strh	r3, [r0, #2]
 80179e6:	1a52      	subs	r2, r2, r1
 80179e8:	8801      	ldrh	r1, [r0, #0]
 80179ea:	1a52      	subs	r2, r2, r1
 80179ec:	8002      	strh	r2, [r0, #0]
 80179ee:	e7f1      	b.n	80179d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80179f0:	88cb      	ldrh	r3, [r1, #6]
 80179f2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80179f6:	8841      	ldrh	r1, [r0, #2]
 80179f8:	1a9b      	subs	r3, r3, r2
 80179fa:	f9b0 5000 	ldrsh.w	r5, [r0]
 80179fe:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017a02:	1a5b      	subs	r3, r3, r1
 8017a04:	8045      	strh	r5, [r0, #2]
 8017a06:	8082      	strh	r2, [r0, #4]
 8017a08:	8003      	strh	r3, [r0, #0]
 8017a0a:	80c4      	strh	r4, [r0, #6]
 8017a0c:	e7e2      	b.n	80179d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08017a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8017a10:	b570      	push	{r4, r5, r6, lr}
 8017a12:	b086      	sub	sp, #24
 8017a14:	ac02      	add	r4, sp, #8
 8017a16:	e884 0006 	stmia.w	r4, {r1, r2}
 8017a1a:	461a      	mov	r2, r3
 8017a1c:	ab0c      	add	r3, sp, #48	; 0x30
 8017a1e:	9305      	str	r3, [sp, #20]
 8017a20:	4b0a      	ldr	r3, [pc, #40]	; (8017a4c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8017a22:	685d      	ldr	r5, [r3, #4]
 8017a24:	1069      	asrs	r1, r5, #1
 8017a26:	07ed      	lsls	r5, r5, #31
 8017a28:	eb00 0601 	add.w	r6, r0, r1
 8017a2c:	bf46      	itte	mi
 8017a2e:	681b      	ldrmi	r3, [r3, #0]
 8017a30:	5841      	ldrmi	r1, [r0, r1]
 8017a32:	681d      	ldrpl	r5, [r3, #0]
 8017a34:	4630      	mov	r0, r6
 8017a36:	bf48      	it	mi
 8017a38:	58cd      	ldrmi	r5, [r1, r3]
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	9b05      	ldr	r3, [sp, #20]
 8017a3e:	9301      	str	r3, [sp, #4]
 8017a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a46:	47a8      	blx	r5
 8017a48:	b006      	add	sp, #24
 8017a4a:	bd70      	pop	{r4, r5, r6, pc}
 8017a4c:	20000030 	.word	0x20000030

08017a50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a54:	b09d      	sub	sp, #116	; 0x74
 8017a56:	9114      	str	r1, [sp, #80]	; 0x50
 8017a58:	9315      	str	r3, [sp, #84]	; 0x54
 8017a5a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017a5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017a5e:	8809      	ldrh	r1, [r1, #0]
 8017a60:	889b      	ldrh	r3, [r3, #4]
 8017a62:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017a64:	440b      	add	r3, r1
 8017a66:	9210      	str	r2, [sp, #64]	; 0x40
 8017a68:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8017a6c:	b21b      	sxth	r3, r3
 8017a6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a70:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8017a74:	930e      	str	r3, [sp, #56]	; 0x38
 8017a76:	6833      	ldr	r3, [r6, #0]
 8017a78:	7a59      	ldrb	r1, [r3, #9]
 8017a7a:	7a1b      	ldrb	r3, [r3, #8]
 8017a7c:	9113      	str	r1, [sp, #76]	; 0x4c
 8017a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8017a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017a82:	f9b3 4000 	ldrsh.w	r4, [r3]
 8017a86:	2a00      	cmp	r2, #0
 8017a88:	d059      	beq.n	8017b3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8017a8a:	7c33      	ldrb	r3, [r6, #16]
 8017a8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017a8e:	2b04      	cmp	r3, #4
 8017a90:	bf14      	ite	ne
 8017a92:	2301      	movne	r3, #1
 8017a94:	2302      	moveq	r3, #2
 8017a96:	4413      	add	r3, r2
 8017a98:	f04f 0800 	mov.w	r8, #0
 8017a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8017a9e:	4645      	mov	r5, r8
 8017aa0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8017aa4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	da75      	bge.n	8017b98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8017aac:	2300      	movs	r3, #0
 8017aae:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017ab0:	6832      	ldr	r2, [r6, #0]
 8017ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8017ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ab6:	428b      	cmp	r3, r1
 8017ab8:	db43      	blt.n	8017b42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8017aba:	6813      	ldr	r3, [r2, #0]
 8017abc:	4610      	mov	r0, r2
 8017abe:	695b      	ldr	r3, [r3, #20]
 8017ac0:	4798      	blx	r3
 8017ac2:	4681      	mov	r9, r0
 8017ac4:	6830      	ldr	r0, [r6, #0]
 8017ac6:	aa1b      	add	r2, sp, #108	; 0x6c
 8017ac8:	4649      	mov	r1, r9
 8017aca:	6803      	ldr	r3, [r0, #0]
 8017acc:	689f      	ldr	r7, [r3, #8]
 8017ace:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8017ad2:	47b8      	blx	r7
 8017ad4:	901a      	str	r0, [sp, #104]	; 0x68
 8017ad6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8017ada:	45d1      	cmp	r9, sl
 8017adc:	d045      	beq.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017ade:	f242 070b 	movw	r7, #8203	; 0x200b
 8017ae2:	45b9      	cmp	r9, r7
 8017ae4:	d041      	beq.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017ae6:	f1b9 0f00 	cmp.w	r9, #0
 8017aea:	f000 80ee 	beq.w	8017cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017aee:	f1b9 0f0a 	cmp.w	r9, #10
 8017af2:	d057      	beq.n	8017ba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017af4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017af6:	b383      	cbz	r3, 8017b5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8017af8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8017afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017afe:	2a00      	cmp	r2, #0
 8017b00:	f000 80d2 	beq.w	8017ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8017b04:	f1bb 0f00 	cmp.w	fp, #0
 8017b08:	d100      	bne.n	8017b0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8017b0a:	4444      	add	r4, r8
 8017b0c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8017b10:	f1bb 0f01 	cmp.w	fp, #1
 8017b14:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8017b18:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017b1c:	ea48 0803 	orr.w	r8, r8, r3
 8017b20:	d128      	bne.n	8017b74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8017b22:	eba4 0408 	sub.w	r4, r4, r8
 8017b26:	2d00      	cmp	r5, #0
 8017b28:	d143      	bne.n	8017bb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017b2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b2c:	eb08 0304 	add.w	r3, r8, r4
 8017b30:	4413      	add	r3, r2
 8017b32:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017b34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	da44      	bge.n	8017bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017b3c:	e02b      	b.n	8017b96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8017b3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017b40:	e7aa      	b.n	8017a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8017b42:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8017b46:	4659      	mov	r1, fp
 8017b48:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017b4a:	9301      	str	r3, [sp, #4]
 8017b4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8017b4e:	9300      	str	r3, [sp, #0]
 8017b50:	ab1a      	add	r3, sp, #104	; 0x68
 8017b52:	f002 fa93 	bl	801a07c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017b56:	4681      	mov	r9, r0
 8017b58:	e7bd      	b.n	8017ad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017b5a:	6830      	ldr	r0, [r6, #0]
 8017b5c:	6803      	ldr	r3, [r0, #0]
 8017b5e:	691b      	ldr	r3, [r3, #16]
 8017b60:	4798      	blx	r3
 8017b62:	4550      	cmp	r0, sl
 8017b64:	d001      	beq.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017b66:	42b8      	cmp	r0, r7
 8017b68:	d1c8      	bne.n	8017afc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b6c:	464d      	mov	r5, r9
 8017b6e:	3301      	adds	r3, #1
 8017b70:	930c      	str	r3, [sp, #48]	; 0x30
 8017b72:	e797      	b.n	8017aa4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8017b74:	2d00      	cmp	r5, #0
 8017b76:	f000 80aa 	beq.w	8017cce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8017b7a:	f1bb 0f00 	cmp.w	fp, #0
 8017b7e:	d118      	bne.n	8017bb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017b80:	6830      	ldr	r0, [r6, #0]
 8017b82:	4629      	mov	r1, r5
 8017b84:	6803      	ldr	r3, [r0, #0]
 8017b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b88:	4798      	blx	r3
 8017b8a:	4404      	add	r4, r0
 8017b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b90:	1ae3      	subs	r3, r4, r3
 8017b92:	4293      	cmp	r3, r2
 8017b94:	dd17      	ble.n	8017bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017b96:	464d      	mov	r5, r9
 8017b98:	2d00      	cmp	r5, #0
 8017b9a:	f000 8096 	beq.w	8017cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017b9e:	2d0a      	cmp	r5, #10
 8017ba0:	f040 8084 	bne.w	8017cac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8017ba4:	250a      	movs	r5, #10
 8017ba6:	fab5 f085 	clz	r0, r5
 8017baa:	0940      	lsrs	r0, r0, #5
 8017bac:	b01d      	add	sp, #116	; 0x74
 8017bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bb2:	6830      	ldr	r0, [r6, #0]
 8017bb4:	4629      	mov	r1, r5
 8017bb6:	6803      	ldr	r3, [r0, #0]
 8017bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bba:	4798      	blx	r3
 8017bbc:	f1bb 0f01 	cmp.w	fp, #1
 8017bc0:	eba4 0400 	sub.w	r4, r4, r0
 8017bc4:	d0b1      	beq.n	8017b2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017bc6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017bc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017bca:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017bce:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017bd2:	7b43      	ldrb	r3, [r0, #13]
 8017bd4:	4421      	add	r1, r4
 8017bd6:	015b      	lsls	r3, r3, #5
 8017bd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017bdc:	7983      	ldrb	r3, [r0, #6]
 8017bde:	4313      	orrs	r3, r2
 8017be0:	440b      	add	r3, r1
 8017be2:	42ab      	cmp	r3, r5
 8017be4:	dbc1      	blt.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017be8:	4299      	cmp	r1, r3
 8017bea:	dabe      	bge.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017bec:	6830      	ldr	r0, [r6, #0]
 8017bee:	42a5      	cmp	r5, r4
 8017bf0:	6803      	ldr	r3, [r0, #0]
 8017bf2:	bfcc      	ite	gt
 8017bf4:	1b2d      	subgt	r5, r5, r4
 8017bf6:	2500      	movle	r5, #0
 8017bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bfa:	bfc8      	it	gt
 8017bfc:	b2ad      	uxthgt	r5, r5
 8017bfe:	4798      	blx	r3
 8017c00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017c02:	4935      	ldr	r1, [pc, #212]	; (8017cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8017c04:	7b5a      	ldrb	r2, [r3, #13]
 8017c06:	f893 e008 	ldrb.w	lr, [r3, #8]
 8017c0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8017c0e:	bf18      	it	ne
 8017c10:	468c      	movne	ip, r1
 8017c12:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017c14:	bf08      	it	eq
 8017c16:	f04f 0c00 	moveq.w	ip, #0
 8017c1a:	4408      	add	r0, r1
 8017c1c:	00d1      	lsls	r1, r2, #3
 8017c1e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017c22:	ea41 070e 	orr.w	r7, r1, lr
 8017c26:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017c28:	ea4c 0707 	orr.w	r7, ip, r7
 8017c2c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017c30:	1bc7      	subs	r7, r0, r7
 8017c32:	b2bf      	uxth	r7, r7
 8017c34:	fa0f fa87 	sxth.w	sl, r7
 8017c38:	4551      	cmp	r1, sl
 8017c3a:	dd33      	ble.n	8017ca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8017c3c:	0112      	lsls	r2, r2, #4
 8017c3e:	79d8      	ldrb	r0, [r3, #7]
 8017c40:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017c44:	4302      	orrs	r2, r0
 8017c46:	4492      	add	sl, r2
 8017c48:	4551      	cmp	r1, sl
 8017c4a:	dc8e      	bgt.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017c4c:	1bcf      	subs	r7, r1, r7
 8017c4e:	468a      	mov	sl, r1
 8017c50:	b2bf      	uxth	r7, r7
 8017c52:	9317      	str	r3, [sp, #92]	; 0x5c
 8017c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c56:	6830      	ldr	r0, [r6, #0]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	6801      	ldr	r1, [r0, #0]
 8017c5c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8017c5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017c60:	9311      	str	r3, [sp, #68]	; 0x44
 8017c62:	9216      	str	r2, [sp, #88]	; 0x58
 8017c64:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017c66:	4788      	blx	r1
 8017c68:	79b1      	ldrb	r1, [r6, #6]
 8017c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8017c6e:	7bb1      	ldrb	r1, [r6, #14]
 8017c70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017c72:	910a      	str	r1, [sp, #40]	; 0x28
 8017c74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8017c78:	9109      	str	r1, [sp, #36]	; 0x24
 8017c7a:	68b1      	ldr	r1, [r6, #8]
 8017c7c:	9305      	str	r3, [sp, #20]
 8017c7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017c80:	9206      	str	r2, [sp, #24]
 8017c82:	e9cd a501 	strd	sl, r5, [sp, #4]
 8017c86:	4425      	add	r5, r4
 8017c88:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8017c8c:	b22d      	sxth	r5, r5
 8017c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c90:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017c94:	9500      	str	r5, [sp, #0]
 8017c96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017ca0:	47a8      	blx	r5
 8017ca2:	e762      	b.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017ca4:	2700      	movs	r7, #0
 8017ca6:	e7d4      	b.n	8017c52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8017ca8:	4690      	mov	r8, r2
 8017caa:	e75e      	b.n	8017b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017cac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017cae:	3401      	adds	r4, #1
 8017cb0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017cb2:	429c      	cmp	r4, r3
 8017cb4:	f6bf af77 	bge.w	8017ba6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017cb8:	4659      	mov	r1, fp
 8017cba:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017cbc:	f002 f96a 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017cc0:	4605      	mov	r5, r0
 8017cc2:	b110      	cbz	r0, 8017cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017cc4:	280a      	cmp	r0, #10
 8017cc6:	d1f2      	bne.n	8017cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8017cc8:	e76c      	b.n	8017ba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017cca:	2500      	movs	r5, #0
 8017ccc:	e76b      	b.n	8017ba6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017cce:	f1bb 0f00 	cmp.w	fp, #0
 8017cd2:	f43f af5b 	beq.w	8017b8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8017cd6:	e776      	b.n	8017bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017cd8:	fffffe00 	.word	0xfffffe00

08017cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017cdc:	b530      	push	{r4, r5, lr}
 8017cde:	8a44      	ldrh	r4, [r0, #18]
 8017ce0:	8ac5      	ldrh	r5, [r0, #22]
 8017ce2:	82c3      	strh	r3, [r0, #22]
 8017ce4:	442c      	add	r4, r5
 8017ce6:	1ae4      	subs	r4, r4, r3
 8017ce8:	8b03      	ldrh	r3, [r0, #24]
 8017cea:	8244      	strh	r4, [r0, #18]
 8017cec:	8a84      	ldrh	r4, [r0, #20]
 8017cee:	4422      	add	r2, r4
 8017cf0:	440c      	add	r4, r1
 8017cf2:	1a59      	subs	r1, r3, r1
 8017cf4:	8342      	strh	r2, [r0, #26]
 8017cf6:	8284      	strh	r4, [r0, #20]
 8017cf8:	8301      	strh	r1, [r0, #24]
 8017cfa:	bd30      	pop	{r4, r5, pc}

08017cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d00:	7a45      	ldrb	r5, [r0, #9]
 8017d02:	b085      	sub	sp, #20
 8017d04:	4604      	mov	r4, r0
 8017d06:	4689      	mov	r9, r1
 8017d08:	1eeb      	subs	r3, r5, #3
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	b329      	cbz	r1, 8017d5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	d921      	bls.n	8017d56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8017d12:	1e69      	subs	r1, r5, #1
 8017d14:	f1d1 0b00 	rsbs	fp, r1, #0
 8017d18:	eb4b 0b01 	adc.w	fp, fp, r1
 8017d1c:	1eaa      	subs	r2, r5, #2
 8017d1e:	2500      	movs	r5, #0
 8017d20:	4253      	negs	r3, r2
 8017d22:	9500      	str	r5, [sp, #0]
 8017d24:	4153      	adcs	r3, r2
 8017d26:	9301      	str	r3, [sp, #4]
 8017d28:	2600      	movs	r6, #0
 8017d2a:	f242 080b 	movw	r8, #8203	; 0x200b
 8017d2e:	8266      	strh	r6, [r4, #18]
 8017d30:	82a6      	strh	r6, [r4, #20]
 8017d32:	2300      	movs	r3, #0
 8017d34:	68e2      	ldr	r2, [r4, #12]
 8017d36:	7a21      	ldrb	r1, [r4, #8]
 8017d38:	9303      	str	r3, [sp, #12]
 8017d3a:	ab03      	add	r3, sp, #12
 8017d3c:	6860      	ldr	r0, [r4, #4]
 8017d3e:	8827      	ldrh	r7, [r4, #0]
 8017d40:	f002 f968 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d44:	8020      	strh	r0, [r4, #0]
 8017d46:	b9b0      	cbnz	r0, 8017d76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8017d48:	8b22      	ldrh	r2, [r4, #24]
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f7ff ffc4 	bl	8017cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017d54:	e062      	b.n	8017e1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017d56:	468b      	mov	fp, r1
 8017d58:	e7e0      	b.n	8017d1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8017d5a:	2b01      	cmp	r3, #1
 8017d5c:	f105 35ff 	add.w	r5, r5, #4294967295
 8017d60:	9101      	str	r1, [sp, #4]
 8017d62:	468b      	mov	fp, r1
 8017d64:	bf8c      	ite	hi
 8017d66:	2300      	movhi	r3, #0
 8017d68:	2301      	movls	r3, #1
 8017d6a:	2d01      	cmp	r5, #1
 8017d6c:	9300      	str	r3, [sp, #0]
 8017d6e:	bf8c      	ite	hi
 8017d70:	2500      	movhi	r5, #0
 8017d72:	2501      	movls	r5, #1
 8017d74:	e7d8      	b.n	8017d28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8017d76:	8ae3      	ldrh	r3, [r4, #22]
 8017d78:	280a      	cmp	r0, #10
 8017d7a:	f103 0301 	add.w	r3, r3, #1
 8017d7e:	82e3      	strh	r3, [r4, #22]
 8017d80:	d0e2      	beq.n	8017d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8017d82:	9a03      	ldr	r2, [sp, #12]
 8017d84:	b972      	cbnz	r2, 8017da4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8017d86:	4540      	cmp	r0, r8
 8017d88:	d1d3      	bne.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017d8a:	8823      	ldrh	r3, [r4, #0]
 8017d8c:	8b21      	ldrh	r1, [r4, #24]
 8017d8e:	2b20      	cmp	r3, #32
 8017d90:	d001      	beq.n	8017d96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8017d92:	4543      	cmp	r3, r8
 8017d94:	d11d      	bne.n	8017dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017d96:	2f20      	cmp	r7, #32
 8017d98:	d002      	beq.n	8017da0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8017d9a:	4547      	cmp	r7, r8
 8017d9c:	bf18      	it	ne
 8017d9e:	460e      	movne	r6, r1
 8017da0:	2001      	movs	r0, #1
 8017da2:	e017      	b.n	8017dd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8017da4:	4540      	cmp	r0, r8
 8017da6:	d012      	beq.n	8017dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8017da8:	8893      	ldrh	r3, [r2, #4]
 8017daa:	4639      	mov	r1, r7
 8017dac:	8023      	strh	r3, [r4, #0]
 8017dae:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8017db2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8017db6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017dba:	ea4a 0a00 	orr.w	sl, sl, r0
 8017dbe:	68e0      	ldr	r0, [r4, #12]
 8017dc0:	6803      	ldr	r3, [r0, #0]
 8017dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017dc4:	4798      	blx	r3
 8017dc6:	eb0a 0200 	add.w	r2, sl, r0
 8017dca:	b292      	uxth	r2, r2
 8017dcc:	e7dd      	b.n	8017d8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017dce:	2200      	movs	r2, #0
 8017dd0:	e7db      	b.n	8017d8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	440a      	add	r2, r1
 8017dd6:	8aa3      	ldrh	r3, [r4, #20]
 8017dd8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017ddc:	b292      	uxth	r2, r2
 8017dde:	8322      	strh	r2, [r4, #24]
 8017de0:	4413      	add	r3, r2
 8017de2:	f1b9 0f00 	cmp.w	r9, #0
 8017de6:	d022      	beq.n	8017e2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8017de8:	f1bb 0f00 	cmp.w	fp, #0
 8017dec:	d102      	bne.n	8017df4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8017dee:	9901      	ldr	r1, [sp, #4]
 8017df0:	b149      	cbz	r1, 8017e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017df2:	b140      	cbz	r0, 8017e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017df4:	8ba1      	ldrh	r1, [r4, #28]
 8017df6:	4419      	add	r1, r3
 8017df8:	458c      	cmp	ip, r1
 8017dfa:	da12      	bge.n	8017e22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017dfc:	8a61      	ldrh	r1, [r4, #18]
 8017dfe:	b181      	cbz	r1, 8017e22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017e00:	4563      	cmp	r3, ip
 8017e02:	dd96      	ble.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e04:	e004      	b.n	8017e10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8017e06:	4563      	cmp	r3, ip
 8017e08:	dd93      	ble.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e0a:	8a63      	ldrh	r3, [r4, #18]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d090      	beq.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e10:	2301      	movs	r3, #1
 8017e12:	8ba2      	ldrh	r2, [r4, #28]
 8017e14:	77a3      	strb	r3, [r4, #30]
 8017e16:	8b63      	ldrh	r3, [r4, #26]
 8017e18:	4413      	add	r3, r2
 8017e1a:	8363      	strh	r3, [r4, #26]
 8017e1c:	b005      	add	sp, #20
 8017e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e22:	2300      	movs	r3, #0
 8017e24:	4611      	mov	r1, r2
 8017e26:	4620      	mov	r0, r4
 8017e28:	f7ff ff58 	bl	8017cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017e2c:	e781      	b.n	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e2e:	4563      	cmp	r3, ip
 8017e30:	dd16      	ble.n	8017e60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8017e32:	9b00      	ldr	r3, [sp, #0]
 8017e34:	b113      	cbz	r3, 8017e3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017e36:	2301      	movs	r3, #1
 8017e38:	460a      	mov	r2, r1
 8017e3a:	e787      	b.n	8017d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8017e3c:	2d00      	cmp	r5, #0
 8017e3e:	f43f af78 	beq.w	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e42:	2800      	cmp	r0, #0
 8017e44:	f47f af75 	bne.w	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e48:	2f20      	cmp	r7, #32
 8017e4a:	d001      	beq.n	8017e50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8017e4c:	4547      	cmp	r7, r8
 8017e4e:	d102      	bne.n	8017e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8017e50:	2301      	movs	r3, #1
 8017e52:	4632      	mov	r2, r6
 8017e54:	e77b      	b.n	8017d4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8017e56:	8a63      	ldrh	r3, [r4, #18]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	f43f af6a 	beq.w	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e5e:	e7dd      	b.n	8017e1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017e60:	2800      	cmp	r0, #0
 8017e62:	f47f af66 	bne.w	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e66:	2f20      	cmp	r7, #32
 8017e68:	d002      	beq.n	8017e70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8017e6a:	4547      	cmp	r7, r8
 8017e6c:	f47f af61 	bne.w	8017d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017e70:	2301      	movs	r3, #1
 8017e72:	4632      	mov	r2, r6
 8017e74:	e7d7      	b.n	8017e26 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08017e76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017e76:	b570      	push	{r4, r5, r6, lr}
 8017e78:	4606      	mov	r6, r0
 8017e7a:	b08a      	sub	sp, #40	; 0x28
 8017e7c:	4615      	mov	r5, r2
 8017e7e:	b191      	cbz	r1, 8017ea6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8017e80:	2401      	movs	r4, #1
 8017e82:	e9cd 3100 	strd	r3, r1, [sp]
 8017e86:	4613      	mov	r3, r2
 8017e88:	4601      	mov	r1, r0
 8017e8a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017e8e:	a802      	add	r0, sp, #8
 8017e90:	f7ff fd20 	bl	80178d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017e94:	2100      	movs	r1, #0
 8017e96:	a802      	add	r0, sp, #8
 8017e98:	f7ff ff30 	bl	8017cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017e9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017ea0:	b173      	cbz	r3, 8017ec0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017ea2:	3401      	adds	r4, #1
 8017ea4:	e7f6      	b.n	8017e94 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8017ea6:	2401      	movs	r4, #1
 8017ea8:	4611      	mov	r1, r2
 8017eaa:	f002 f873 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017eae:	280a      	cmp	r0, #10
 8017eb0:	4629      	mov	r1, r5
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	bf08      	it	eq
 8017eb6:	3401      	addeq	r4, #1
 8017eb8:	f002 f86c 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d1f6      	bne.n	8017eae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8017ec0:	b2a0      	uxth	r0, r4
 8017ec2:	b00a      	add	sp, #40	; 0x28
 8017ec4:	bd70      	pop	{r4, r5, r6, pc}

08017ec6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eca:	b0db      	sub	sp, #364	; 0x16c
 8017ecc:	468a      	mov	sl, r1
 8017ece:	461c      	mov	r4, r3
 8017ed0:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8017ed4:	9009      	str	r0, [sp, #36]	; 0x24
 8017ed6:	f1bb 0f00 	cmp.w	fp, #0
 8017eda:	f000 80c7 	beq.w	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f000 80c3 	beq.w	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017ee6:	7ba3      	ldrb	r3, [r4, #14]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	f000 80bf 	beq.w	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017eee:	af0c      	add	r7, sp, #48	; 0x30
 8017ef0:	6810      	ldr	r0, [r2, #0]
 8017ef2:	6851      	ldr	r1, [r2, #4]
 8017ef4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8017ef8:	463b      	mov	r3, r7
 8017efa:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8017efe:	c303      	stmia	r3!, {r0, r1}
 8017f00:	2100      	movs	r1, #0
 8017f02:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8017f06:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017f0a:	4638      	mov	r0, r7
 8017f0c:	910e      	str	r1, [sp, #56]	; 0x38
 8017f0e:	a90e      	add	r1, sp, #56	; 0x38
 8017f10:	79a2      	ldrb	r2, [r4, #6]
 8017f12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017f16:	f7ff fd49 	bl	80179ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017f1a:	a90e      	add	r1, sp, #56	; 0x38
 8017f1c:	79a2      	ldrb	r2, [r4, #6]
 8017f1e:	4608      	mov	r0, r1
 8017f20:	f7ff fd44 	bl	80179ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017f24:	4648      	mov	r0, r9
 8017f26:	f001 fef3 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8017f2a:	6820      	ldr	r0, [r4, #0]
 8017f2c:	6803      	ldr	r3, [r0, #0]
 8017f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f30:	4798      	blx	r3
 8017f32:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f34:	4603      	mov	r3, r0
 8017f36:	4659      	mov	r1, fp
 8017f38:	4648      	mov	r0, r9
 8017f3a:	f001 ff06 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017f3e:	a82e      	add	r0, sp, #184	; 0xb8
 8017f40:	f001 fee6 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8017f44:	f894 8004 	ldrb.w	r8, [r4, #4]
 8017f48:	f1b8 0f00 	cmp.w	r8, #0
 8017f4c:	d009      	beq.n	8017f62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8017f4e:	6820      	ldr	r0, [r4, #0]
 8017f50:	6803      	ldr	r3, [r0, #0]
 8017f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f54:	4798      	blx	r3
 8017f56:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f58:	4603      	mov	r3, r0
 8017f5a:	4659      	mov	r1, fp
 8017f5c:	a82e      	add	r0, sp, #184	; 0xb8
 8017f5e:	f001 fef4 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017f62:	6820      	ldr	r0, [r4, #0]
 8017f64:	6803      	ldr	r3, [r0, #0]
 8017f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f68:	4798      	blx	r3
 8017f6a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017f6e:	182e      	adds	r6, r5, r0
 8017f70:	2e00      	cmp	r6, #0
 8017f72:	dd45      	ble.n	8018000 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017f74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017f78:	4283      	cmp	r3, r0
 8017f7a:	db41      	blt.n	8018000 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8017f7c:	441d      	add	r5, r3
 8017f7e:	fb95 f5f6 	sdiv	r5, r5, r6
 8017f82:	a844      	add	r0, sp, #272	; 0x110
 8017f84:	f001 fec4 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8017f88:	7c23      	ldrb	r3, [r4, #16]
 8017f8a:	b14b      	cbz	r3, 8017fa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8017f8c:	6820      	ldr	r0, [r4, #0]
 8017f8e:	6803      	ldr	r3, [r0, #0]
 8017f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f92:	4798      	blx	r3
 8017f94:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017f96:	4603      	mov	r3, r0
 8017f98:	4659      	mov	r1, fp
 8017f9a:	a844      	add	r0, sp, #272	; 0x110
 8017f9c:	f001 fed5 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017fa0:	7c21      	ldrb	r1, [r4, #16]
 8017fa2:	a810      	add	r0, sp, #64	; 0x40
 8017fa4:	7963      	ldrb	r3, [r4, #5]
 8017fa6:	9101      	str	r1, [sp, #4]
 8017fa8:	6821      	ldr	r1, [r4, #0]
 8017faa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017fae:	9100      	str	r1, [sp, #0]
 8017fb0:	a944      	add	r1, sp, #272	; 0x110
 8017fb2:	f7ff fc8f 	bl	80178d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017fb6:	7c23      	ldrb	r3, [r4, #16]
 8017fb8:	bb23      	cbnz	r3, 8018004 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8017fba:	fa1f fb86 	uxth.w	fp, r6
 8017fbe:	2d00      	cmp	r5, #0
 8017fc0:	dd57      	ble.n	8018072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017fc2:	7961      	ldrb	r1, [r4, #5]
 8017fc4:	4648      	mov	r0, r9
 8017fc6:	f001 ffe5 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	f1b8 0f00 	cmp.w	r8, #0
 8017fd0:	d005      	beq.n	8017fde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8017fd2:	9008      	str	r0, [sp, #32]
 8017fd4:	a82e      	add	r0, sp, #184	; 0xb8
 8017fd6:	7961      	ldrb	r1, [r4, #5]
 8017fd8:	f001 ffdc 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fdc:	9b08      	ldr	r3, [sp, #32]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d044      	beq.n	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017fe2:	2b0a      	cmp	r3, #10
 8017fe4:	d1eb      	bne.n	8017fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017fe6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017fea:	3d01      	subs	r5, #1
 8017fec:	445b      	add	r3, fp
 8017fee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017ff2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017ff6:	eba3 030b 	sub.w	r3, r3, fp
 8017ffa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ffe:	e7de      	b.n	8017fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018000:	2500      	movs	r5, #0
 8018002:	e7be      	b.n	8017f82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8018004:	0073      	lsls	r3, r6, #1
 8018006:	9308      	str	r3, [sp, #32]
 8018008:	2d00      	cmp	r5, #0
 801800a:	dd32      	ble.n	8018072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801800c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018010:	a810      	add	r0, sp, #64	; 0x40
 8018012:	9b08      	ldr	r3, [sp, #32]
 8018014:	428b      	cmp	r3, r1
 8018016:	bfd4      	ite	le
 8018018:	2100      	movle	r1, #0
 801801a:	2101      	movgt	r1, #1
 801801c:	f7ff fe6e 	bl	8017cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018020:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8018024:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018028:	fa1f fb83 	uxth.w	fp, r3
 801802c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018030:	459b      	cmp	fp, r3
 8018032:	d00b      	beq.n	801804c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018034:	7961      	ldrb	r1, [r4, #5]
 8018036:	4648      	mov	r0, r9
 8018038:	f001 ffac 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801803c:	f1b8 0f00 	cmp.w	r8, #0
 8018040:	d0f0      	beq.n	8018024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018042:	7961      	ldrb	r1, [r4, #5]
 8018044:	a82e      	add	r0, sp, #184	; 0xb8
 8018046:	f001 ffa5 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801804a:	e7eb      	b.n	8018024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801804c:	b2b3      	uxth	r3, r6
 801804e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018052:	3d01      	subs	r5, #1
 8018054:	441a      	add	r2, r3
 8018056:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801805a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801805e:	1ad3      	subs	r3, r2, r3
 8018060:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018064:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018068:	2b00      	cmp	r3, #0
 801806a:	d1cd      	bne.n	8018008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801806c:	b05b      	add	sp, #364	; 0x16c
 801806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018072:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8018076:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801807a:	7c23      	ldrb	r3, [r4, #16]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d05f      	beq.n	8018140 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018080:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018084:	a810      	add	r0, sp, #64	; 0x40
 8018086:	458b      	cmp	fp, r1
 8018088:	bfd4      	ite	le
 801808a:	2100      	movle	r1, #0
 801808c:	2101      	movgt	r1, #1
 801808e:	f7ff fe35 	bl	8017cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018092:	f1b8 0f00 	cmp.w	r8, #0
 8018096:	d04c      	beq.n	8018132 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018098:	7c23      	ldrb	r3, [r4, #16]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d053      	beq.n	8018146 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801809e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80180a2:	7922      	ldrb	r2, [r4, #4]
 80180a4:	2a01      	cmp	r2, #1
 80180a6:	d13c      	bne.n	8018122 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80180a8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80180ac:	1ac0      	subs	r0, r0, r3
 80180ae:	2302      	movs	r3, #2
 80180b0:	fb90 f0f3 	sdiv	r0, r0, r3
 80180b4:	b200      	sxth	r0, r0
 80180b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80180ba:	4418      	add	r0, r3
 80180bc:	7c23      	ldrb	r3, [r4, #16]
 80180be:	8028      	strh	r0, [r5, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d03a      	beq.n	801813a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80180c4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80180c8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80180cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80180d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80180d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180d6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80180da:	2200      	movs	r2, #0
 80180dc:	2100      	movs	r1, #0
 80180de:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80180e2:	e9cd 5700 	strd	r5, r7, [sp]
 80180e6:	4652      	mov	r2, sl
 80180e8:	f7ff fcb2 	bl	8017a50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80180ec:	2800      	cmp	r0, #0
 80180ee:	d1bd      	bne.n	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80180f0:	b2b2      	uxth	r2, r6
 80180f2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80180f6:	4611      	mov	r1, r2
 80180f8:	4413      	add	r3, r2
 80180fa:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80180fe:	b21b      	sxth	r3, r3
 8018100:	1a52      	subs	r2, r2, r1
 8018102:	7c21      	ldrb	r1, [r4, #16]
 8018104:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018108:	b212      	sxth	r2, r2
 801810a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801810e:	b109      	cbz	r1, 8018114 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018110:	42b2      	cmp	r2, r6
 8018112:	dbab      	blt.n	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018114:	887a      	ldrh	r2, [r7, #2]
 8018116:	88f9      	ldrh	r1, [r7, #6]
 8018118:	440a      	add	r2, r1
 801811a:	b212      	sxth	r2, r2
 801811c:	4293      	cmp	r3, r2
 801811e:	ddac      	ble.n	801807a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018120:	e7a4      	b.n	801806c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018122:	2a02      	cmp	r2, #2
 8018124:	d107      	bne.n	8018136 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8018126:	7be2      	ldrb	r2, [r4, #15]
 8018128:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801812c:	1a80      	subs	r0, r0, r2
 801812e:	1ac0      	subs	r0, r0, r3
 8018130:	e7c0      	b.n	80180b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018132:	7be0      	ldrb	r0, [r4, #15]
 8018134:	e7bf      	b.n	80180b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018136:	2000      	movs	r0, #0
 8018138:	e7bd      	b.n	80180b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801813a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801813e:	e7c3      	b.n	80180c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8018140:	f1b8 0f00 	cmp.w	r8, #0
 8018144:	d0f5      	beq.n	8018132 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018146:	2300      	movs	r3, #0
 8018148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801814c:	6821      	ldr	r1, [r4, #0]
 801814e:	a82e      	add	r0, sp, #184	; 0xb8
 8018150:	f7ff fbfa 	bl	8017948 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018154:	b203      	sxth	r3, r0
 8018156:	e7a4      	b.n	80180a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08018158 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018158:	2b02      	cmp	r3, #2
 801815a:	b510      	push	{r4, lr}
 801815c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018160:	d00b      	beq.n	801817a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018162:	2b03      	cmp	r3, #3
 8018164:	d00e      	beq.n	8018184 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018166:	2b01      	cmp	r3, #1
 8018168:	d001      	beq.n	801816e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801816a:	1860      	adds	r0, r4, r1
 801816c:	bd10      	pop	{r4, pc}
 801816e:	8880      	ldrh	r0, [r0, #4]
 8018170:	4420      	add	r0, r4
 8018172:	b200      	sxth	r0, r0
 8018174:	1a80      	subs	r0, r0, r2
 8018176:	3801      	subs	r0, #1
 8018178:	e7f8      	b.n	801816c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801817a:	8880      	ldrh	r0, [r0, #4]
 801817c:	4420      	add	r0, r4
 801817e:	b200      	sxth	r0, r0
 8018180:	1a40      	subs	r0, r0, r1
 8018182:	e7f8      	b.n	8018176 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018184:	18a0      	adds	r0, r4, r2
 8018186:	e7f1      	b.n	801816c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018188 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018188:	2b02      	cmp	r3, #2
 801818a:	b510      	push	{r4, lr}
 801818c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018190:	d006      	beq.n	80181a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018192:	2b03      	cmp	r3, #3
 8018194:	d00a      	beq.n	80181ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018196:	2b01      	cmp	r3, #1
 8018198:	bf14      	ite	ne
 801819a:	18a0      	addne	r0, r4, r2
 801819c:	1860      	addeq	r0, r4, r1
 801819e:	bd10      	pop	{r4, pc}
 80181a0:	88c0      	ldrh	r0, [r0, #6]
 80181a2:	4420      	add	r0, r4
 80181a4:	b200      	sxth	r0, r0
 80181a6:	1a80      	subs	r0, r0, r2
 80181a8:	3801      	subs	r0, #1
 80181aa:	e7f8      	b.n	801819e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80181ac:	88c0      	ldrh	r0, [r0, #6]
 80181ae:	4420      	add	r0, r4
 80181b0:	b200      	sxth	r0, r0
 80181b2:	1a40      	subs	r0, r0, r1
 80181b4:	e7f8      	b.n	80181a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080181b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80181b8:	4b01      	ldr	r3, [pc, #4]	; (80181c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80181ba:	2200      	movs	r2, #0
 80181bc:	601a      	str	r2, [r3, #0]
 80181be:	4770      	bx	lr
 80181c0:	2000bc98 	.word	0x2000bc98

080181c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80181c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181c6:	1e05      	subs	r5, r0, #0
 80181c8:	f04f 0601 	mov.w	r6, #1
 80181cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80181d0:	bfba      	itte	lt
 80181d2:	f04f 37ff 	movlt.w	r7, #4294967295
 80181d6:	426d      	neglt	r5, r5
 80181d8:	2701      	movge	r7, #1
 80181da:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80181de:	f1be 0f00 	cmp.w	lr, #0
 80181e2:	bfbc      	itt	lt
 80181e4:	f1ce 0e00 	rsblt	lr, lr, #0
 80181e8:	427f      	neglt	r7, r7
 80181ea:	2c00      	cmp	r4, #0
 80181ec:	fa4e f001 	asr.w	r0, lr, r1
 80181f0:	fa06 f101 	lsl.w	r1, r6, r1
 80181f4:	bfbc      	itt	lt
 80181f6:	4264      	neglt	r4, r4
 80181f8:	427f      	neglt	r7, r7
 80181fa:	3901      	subs	r1, #1
 80181fc:	ea01 010e 	and.w	r1, r1, lr
 8018200:	434d      	muls	r5, r1
 8018202:	f8dc 1000 	ldr.w	r1, [ip]
 8018206:	fb03 1300 	mla	r3, r3, r0, r1
 801820a:	fb95 f1f4 	sdiv	r1, r5, r4
 801820e:	fb04 5511 	mls	r5, r4, r1, r5
 8018212:	441d      	add	r5, r3
 8018214:	fb95 f3f4 	sdiv	r3, r5, r4
 8018218:	4419      	add	r1, r3
 801821a:	fb04 5413 	mls	r4, r4, r3, r5
 801821e:	fb02 1000 	mla	r0, r2, r0, r1
 8018222:	f8cc 4000 	str.w	r4, [ip]
 8018226:	4378      	muls	r0, r7
 8018228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801822c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018230:	4c24      	ldr	r4, [pc, #144]	; (80182c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018232:	b086      	sub	sp, #24
 8018234:	4605      	mov	r5, r0
 8018236:	6807      	ldr	r7, [r0, #0]
 8018238:	69a3      	ldr	r3, [r4, #24]
 801823a:	b92b      	cbnz	r3, 8018248 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801823c:	6840      	ldr	r0, [r0, #4]
 801823e:	e9c5 7000 	strd	r7, r0, [r5]
 8018242:	b006      	add	sp, #24
 8018244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018248:	f04f 0802 	mov.w	r8, #2
 801824c:	68a2      	ldr	r2, [r4, #8]
 801824e:	ae06      	add	r6, sp, #24
 8018250:	6820      	ldr	r0, [r4, #0]
 8018252:	fb93 f1f8 	sdiv	r1, r3, r8
 8018256:	440a      	add	r2, r1
 8018258:	69e1      	ldr	r1, [r4, #28]
 801825a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801825e:	9700      	str	r7, [sp, #0]
 8018260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018262:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018268:	f7ff ffac 	bl	80181c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801826c:	69a3      	ldr	r3, [r4, #24]
 801826e:	4607      	mov	r7, r0
 8018270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018272:	9301      	str	r3, [sp, #4]
 8018274:	686b      	ldr	r3, [r5, #4]
 8018276:	6a21      	ldr	r1, [r4, #32]
 8018278:	9300      	str	r3, [sp, #0]
 801827a:	9602      	str	r6, [sp, #8]
 801827c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801827e:	6860      	ldr	r0, [r4, #4]
 8018280:	f7ff ffa0 	bl	80181c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018284:	69a2      	ldr	r2, [r4, #24]
 8018286:	6963      	ldr	r3, [r4, #20]
 8018288:	4407      	add	r7, r0
 801828a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801828c:	68e0      	ldr	r0, [r4, #12]
 801828e:	fb92 f8f8 	sdiv	r8, r2, r8
 8018292:	4443      	add	r3, r8
 8018294:	9305      	str	r3, [sp, #20]
 8018296:	682b      	ldr	r3, [r5, #0]
 8018298:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801829c:	9300      	str	r3, [sp, #0]
 801829e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80182a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80182a2:	f7ff ff8f 	bl	80181c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80182a6:	69a3      	ldr	r3, [r4, #24]
 80182a8:	4680      	mov	r8, r0
 80182aa:	9602      	str	r6, [sp, #8]
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	686b      	ldr	r3, [r5, #4]
 80182b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80182b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80182b8:	6920      	ldr	r0, [r4, #16]
 80182ba:	f7ff ff83 	bl	80181c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80182be:	4440      	add	r0, r8
 80182c0:	e7bd      	b.n	801823e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80182c2:	bf00      	nop
 80182c4:	2000bc9c 	.word	0x2000bc9c

080182c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80182c8:	4b07      	ldr	r3, [pc, #28]	; (80182e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80182ca:	b510      	push	{r4, lr}
 80182cc:	781b      	ldrb	r3, [r3, #0]
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d108      	bne.n	80182e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80182d2:	4b06      	ldr	r3, [pc, #24]	; (80182ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80182d4:	880c      	ldrh	r4, [r1, #0]
 80182d6:	881b      	ldrh	r3, [r3, #0]
 80182d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80182dc:	3b01      	subs	r3, #1
 80182de:	1b1b      	subs	r3, r3, r4
 80182e0:	8003      	strh	r3, [r0, #0]
 80182e2:	800a      	strh	r2, [r1, #0]
 80182e4:	bd10      	pop	{r4, pc}
 80182e6:	bf00      	nop
 80182e8:	2000bc68 	.word	0x2000bc68
 80182ec:	2000bc6c 	.word	0x2000bc6c

080182f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80182f0:	4b0a      	ldr	r3, [pc, #40]	; (801831c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80182f2:	b510      	push	{r4, lr}
 80182f4:	781b      	ldrb	r3, [r3, #0]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d10e      	bne.n	8018318 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80182fa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80182fe:	8843      	ldrh	r3, [r0, #2]
 8018300:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018304:	18ca      	adds	r2, r1, r3
 8018306:	4b06      	ldr	r3, [pc, #24]	; (8018320 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018308:	8044      	strh	r4, [r0, #2]
 801830a:	881b      	ldrh	r3, [r3, #0]
 801830c:	1a9b      	subs	r3, r3, r2
 801830e:	8003      	strh	r3, [r0, #0]
 8018310:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018314:	8081      	strh	r1, [r0, #4]
 8018316:	80c3      	strh	r3, [r0, #6]
 8018318:	bd10      	pop	{r4, pc}
 801831a:	bf00      	nop
 801831c:	2000bc68 	.word	0x2000bc68
 8018320:	2000bc64 	.word	0x2000bc64

08018324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018324:	4b07      	ldr	r3, [pc, #28]	; (8018344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018326:	b510      	push	{r4, lr}
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	2b01      	cmp	r3, #1
 801832c:	d108      	bne.n	8018340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801832e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018332:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018336:	8003      	strh	r3, [r0, #0]
 8018338:	8893      	ldrh	r3, [r2, #4]
 801833a:	3b01      	subs	r3, #1
 801833c:	1b1b      	subs	r3, r3, r4
 801833e:	800b      	strh	r3, [r1, #0]
 8018340:	bd10      	pop	{r4, pc}
 8018342:	bf00      	nop
 8018344:	2000bc68 	.word	0x2000bc68

08018348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018348:	4b08      	ldr	r3, [pc, #32]	; (801836c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801834a:	b513      	push	{r0, r1, r4, lr}
 801834c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018350:	2400      	movs	r4, #0
 8018352:	4b07      	ldr	r3, [pc, #28]	; (8018370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018354:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018358:	466a      	mov	r2, sp
 801835a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801835e:	9400      	str	r4, [sp, #0]
 8018360:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018364:	f7ff ffde 	bl	8018324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018368:	b002      	add	sp, #8
 801836a:	bd10      	pop	{r4, pc}
 801836c:	2000bc64 	.word	0x2000bc64
 8018370:	2000bc66 	.word	0x2000bc66

08018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018374:	4b0a      	ldr	r3, [pc, #40]	; (80183a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018376:	460a      	mov	r2, r1
 8018378:	b510      	push	{r4, lr}
 801837a:	781b      	ldrb	r3, [r3, #0]
 801837c:	2b01      	cmp	r3, #1
 801837e:	d10d      	bne.n	801839c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018380:	8881      	ldrh	r1, [r0, #4]
 8018382:	8803      	ldrh	r3, [r0, #0]
 8018384:	440b      	add	r3, r1
 8018386:	4601      	mov	r1, r0
 8018388:	3b01      	subs	r3, #1
 801838a:	f821 3b02 	strh.w	r3, [r1], #2
 801838e:	f7ff ffc9 	bl	8018324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018392:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018396:	88c2      	ldrh	r2, [r0, #6]
 8018398:	80c3      	strh	r3, [r0, #6]
 801839a:	8082      	strh	r2, [r0, #4]
 801839c:	bd10      	pop	{r4, pc}
 801839e:	bf00      	nop
 80183a0:	2000bc68 	.word	0x2000bc68

080183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80183a4:	4b09      	ldr	r3, [pc, #36]	; (80183cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80183a6:	b507      	push	{r0, r1, r2, lr}
 80183a8:	2100      	movs	r1, #0
 80183aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183ae:	4b08      	ldr	r3, [pc, #32]	; (80183d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80183b0:	9100      	str	r1, [sp, #0]
 80183b2:	4669      	mov	r1, sp
 80183b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183c0:	f7ff ffd8 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183c4:	b003      	add	sp, #12
 80183c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80183ca:	bf00      	nop
 80183cc:	2000bc64 	.word	0x2000bc64
 80183d0:	2000bc66 	.word	0x2000bc66

080183d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80183d4:	4b03      	ldr	r3, [pc, #12]	; (80183e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80183d6:	6818      	ldr	r0, [r3, #0]
 80183d8:	b110      	cbz	r0, 80183e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80183da:	6803      	ldr	r3, [r0, #0]
 80183dc:	699b      	ldr	r3, [r3, #24]
 80183de:	4718      	bx	r3
 80183e0:	4770      	bx	lr
 80183e2:	bf00      	nop
 80183e4:	2000bcec 	.word	0x2000bcec

080183e8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80183e8:	4770      	bx	lr
	...

080183ec <_ZN8touchgfx11Application4drawEv>:
 80183ec:	4b09      	ldr	r3, [pc, #36]	; (8018414 <_ZN8touchgfx11Application4drawEv+0x28>)
 80183ee:	b507      	push	{r0, r1, r2, lr}
 80183f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183f4:	2100      	movs	r1, #0
 80183f6:	4b08      	ldr	r3, [pc, #32]	; (8018418 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80183f8:	9100      	str	r1, [sp, #0]
 80183fa:	4669      	mov	r1, sp
 80183fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018400:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018404:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018408:	6803      	ldr	r3, [r0, #0]
 801840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801840c:	4798      	blx	r3
 801840e:	b003      	add	sp, #12
 8018410:	f85d fb04 	ldr.w	pc, [sp], #4
 8018414:	2000bc64 	.word	0x2000bc64
 8018418:	2000bc66 	.word	0x2000bc66

0801841c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801841c:	4b03      	ldr	r3, [pc, #12]	; (801842c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801841e:	6818      	ldr	r0, [r3, #0]
 8018420:	b110      	cbz	r0, 8018428 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018422:	6803      	ldr	r3, [r0, #0]
 8018424:	69db      	ldr	r3, [r3, #28]
 8018426:	4718      	bx	r3
 8018428:	4770      	bx	lr
 801842a:	bf00      	nop
 801842c:	2000bcec 	.word	0x2000bcec

08018430 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018430:	4b03      	ldr	r3, [pc, #12]	; (8018440 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018432:	6818      	ldr	r0, [r3, #0]
 8018434:	b110      	cbz	r0, 801843c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018436:	6803      	ldr	r3, [r0, #0]
 8018438:	6a1b      	ldr	r3, [r3, #32]
 801843a:	4718      	bx	r3
 801843c:	4770      	bx	lr
 801843e:	bf00      	nop
 8018440:	2000bcec 	.word	0x2000bcec

08018444 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018444:	4b03      	ldr	r3, [pc, #12]	; (8018454 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018446:	6818      	ldr	r0, [r3, #0]
 8018448:	b110      	cbz	r0, 8018450 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801844a:	6803      	ldr	r3, [r0, #0]
 801844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801844e:	4718      	bx	r3
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop
 8018454:	2000bcec 	.word	0x2000bcec

08018458 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801845c:	4d3a      	ldr	r5, [pc, #232]	; (8018548 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801845e:	4604      	mov	r4, r0
 8018460:	6828      	ldr	r0, [r5, #0]
 8018462:	b140      	cbz	r0, 8018476 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018464:	7a03      	ldrb	r3, [r0, #8]
 8018466:	b933      	cbnz	r3, 8018476 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018468:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801846c:	6803      	ldr	r3, [r0, #0]
 801846e:	689b      	ldr	r3, [r3, #8]
 8018470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018474:	4718      	bx	r3
 8018476:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801847a:	b97b      	cbnz	r3, 801849c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801847c:	b170      	cbz	r0, 801849c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801847e:	7a03      	ldrb	r3, [r0, #8]
 8018480:	b163      	cbz	r3, 801849c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018482:	4b32      	ldr	r3, [pc, #200]	; (801854c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018484:	6818      	ldr	r0, [r3, #0]
 8018486:	b110      	cbz	r0, 801848e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018488:	6803      	ldr	r3, [r0, #0]
 801848a:	691b      	ldr	r3, [r3, #16]
 801848c:	4798      	blx	r3
 801848e:	6828      	ldr	r0, [r5, #0]
 8018490:	6803      	ldr	r3, [r0, #0]
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	4798      	blx	r3
 8018496:	2301      	movs	r3, #1
 8018498:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801849c:	2500      	movs	r5, #0
 801849e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80184a2:	42a8      	cmp	r0, r5
 80184a4:	dd0c      	ble.n	80184c0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80184a6:	1963      	adds	r3, r4, r5
 80184a8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80184ac:	b132      	cbz	r2, 80184bc <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80184ae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80184b2:	4413      	add	r3, r2
 80184b4:	6858      	ldr	r0, [r3, #4]
 80184b6:	6803      	ldr	r3, [r0, #0]
 80184b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184ba:	4798      	blx	r3
 80184bc:	3501      	adds	r5, #1
 80184be:	e7ee      	b.n	801849e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80184c0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80184c4:	3801      	subs	r0, #1
 80184c6:	f04f 0c00 	mov.w	ip, #0
 80184ca:	3678      	adds	r6, #120	; 0x78
 80184cc:	1c43      	adds	r3, r0, #1
 80184ce:	d033      	beq.n	8018538 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80184d0:	1823      	adds	r3, r4, r0
 80184d2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80184d6:	bb6a      	cbnz	r2, 8018534 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80184d8:	b281      	uxth	r1, r0
 80184da:	1d25      	adds	r5, r4, #4
 80184dc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80184e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80184e4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80184e8:	4293      	cmp	r3, r2
 80184ea:	dc0a      	bgt.n	8018502 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80184ec:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80184f0:	4422      	add	r2, r4
 80184f2:	18b1      	adds	r1, r6, r2
 80184f4:	b289      	uxth	r1, r1
 80184f6:	428b      	cmp	r3, r1
 80184f8:	d919      	bls.n	801852e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 80184fa:	7851      	ldrb	r1, [r2, #1]
 80184fc:	f802 1b01 	strb.w	r1, [r2], #1
 8018500:	e7f7      	b.n	80184f2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018502:	682f      	ldr	r7, [r5, #0]
 8018504:	f105 0804 	add.w	r8, r5, #4
 8018508:	45b9      	cmp	r9, r7
 801850a:	d10d      	bne.n	8018528 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801850c:	4696      	mov	lr, r2
 801850e:	f1be 0f1e 	cmp.w	lr, #30
 8018512:	dc06      	bgt.n	8018522 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018514:	f10e 0e01 	add.w	lr, lr, #1
 8018518:	686f      	ldr	r7, [r5, #4]
 801851a:	4573      	cmp	r3, lr
 801851c:	f845 7b04 	str.w	r7, [r5], #4
 8018520:	dcf5      	bgt.n	801850e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018522:	3b01      	subs	r3, #1
 8018524:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018528:	3201      	adds	r2, #1
 801852a:	4645      	mov	r5, r8
 801852c:	e7da      	b.n	80184e4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801852e:	4423      	add	r3, r4
 8018530:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018534:	3801      	subs	r0, #1
 8018536:	e7c9      	b.n	80184cc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018538:	4b04      	ldr	r3, [pc, #16]	; (801854c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801853a:	6818      	ldr	r0, [r3, #0]
 801853c:	b110      	cbz	r0, 8018544 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801853e:	6803      	ldr	r3, [r0, #0]
 8018540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018542:	e795      	b.n	8018470 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018548:	2000bcf0 	.word	0x2000bcf0
 801854c:	2000bcec 	.word	0x2000bcec

08018550 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018550:	b570      	push	{r4, r5, r6, lr}
 8018552:	4606      	mov	r6, r0
 8018554:	460c      	mov	r4, r1
 8018556:	b929      	cbnz	r1, 8018564 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018558:	4b0c      	ldr	r3, [pc, #48]	; (801858c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801855a:	2164      	movs	r1, #100	; 0x64
 801855c:	4a0c      	ldr	r2, [pc, #48]	; (8018590 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801855e:	480d      	ldr	r0, [pc, #52]	; (8018594 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018560:	f00c f854 	bl	802460c <__assert_func>
 8018564:	2300      	movs	r3, #0
 8018566:	4d0c      	ldr	r5, [pc, #48]	; (8018598 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018568:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801856c:	6828      	ldr	r0, [r5, #0]
 801856e:	b110      	cbz	r0, 8018576 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018570:	6803      	ldr	r3, [r0, #0]
 8018572:	695b      	ldr	r3, [r3, #20]
 8018574:	4798      	blx	r3
 8018576:	602c      	str	r4, [r5, #0]
 8018578:	4620      	mov	r0, r4
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	4798      	blx	r3
 8018580:	6833      	ldr	r3, [r6, #0]
 8018582:	4630      	mov	r0, r6
 8018584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801858a:	4718      	bx	r3
 801858c:	08027ec8 	.word	0x08027ec8
 8018590:	08027f90 	.word	0x08027f90
 8018594:	08027ed2 	.word	0x08027ed2
 8018598:	2000bcec 	.word	0x2000bcec

0801859c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801859c:	b510      	push	{r4, lr}
 801859e:	f9b1 4000 	ldrsh.w	r4, [r1]
 80185a2:	888a      	ldrh	r2, [r1, #4]
 80185a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80185a8:	4422      	add	r2, r4
 80185aa:	b212      	sxth	r2, r2
 80185ac:	4293      	cmp	r3, r2
 80185ae:	da15      	bge.n	80185dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185b0:	8882      	ldrh	r2, [r0, #4]
 80185b2:	4413      	add	r3, r2
 80185b4:	b21b      	sxth	r3, r3
 80185b6:	429c      	cmp	r4, r3
 80185b8:	da10      	bge.n	80185dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185ba:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80185be:	88c9      	ldrh	r1, [r1, #6]
 80185c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80185c4:	4419      	add	r1, r3
 80185c6:	b209      	sxth	r1, r1
 80185c8:	428a      	cmp	r2, r1
 80185ca:	da07      	bge.n	80185dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185cc:	88c0      	ldrh	r0, [r0, #6]
 80185ce:	4410      	add	r0, r2
 80185d0:	b200      	sxth	r0, r0
 80185d2:	4283      	cmp	r3, r0
 80185d4:	bfac      	ite	ge
 80185d6:	2000      	movge	r0, #0
 80185d8:	2001      	movlt	r0, #1
 80185da:	bd10      	pop	{r4, pc}
 80185dc:	2000      	movs	r0, #0
 80185de:	e7fc      	b.n	80185da <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080185e0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80185e0:	b570      	push	{r4, r5, r6, lr}
 80185e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80185e6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80185ea:	42ac      	cmp	r4, r5
 80185ec:	db18      	blt.n	8018620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185ee:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80185f2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	db12      	blt.n	8018620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185fa:	8886      	ldrh	r6, [r0, #4]
 80185fc:	4435      	add	r5, r6
 80185fe:	888e      	ldrh	r6, [r1, #4]
 8018600:	4434      	add	r4, r6
 8018602:	b22d      	sxth	r5, r5
 8018604:	b224      	sxth	r4, r4
 8018606:	42a5      	cmp	r5, r4
 8018608:	db0a      	blt.n	8018620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801860a:	88c0      	ldrh	r0, [r0, #6]
 801860c:	4418      	add	r0, r3
 801860e:	88cb      	ldrh	r3, [r1, #6]
 8018610:	441a      	add	r2, r3
 8018612:	b200      	sxth	r0, r0
 8018614:	b212      	sxth	r2, r2
 8018616:	4290      	cmp	r0, r2
 8018618:	bfb4      	ite	lt
 801861a:	2000      	movlt	r0, #0
 801861c:	2001      	movge	r0, #1
 801861e:	bd70      	pop	{r4, r5, r6, pc}
 8018620:	2000      	movs	r0, #0
 8018622:	e7fc      	b.n	801861e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018624 <_ZN8touchgfx11Application11getInstanceEv>:
 8018624:	4b01      	ldr	r3, [pc, #4]	; (801862c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018626:	6818      	ldr	r0, [r3, #0]
 8018628:	4770      	bx	lr
 801862a:	bf00      	nop
 801862c:	2000bcfc 	.word	0x2000bcfc

08018630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018630:	2300      	movs	r3, #0
 8018632:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018636:	30a8      	adds	r0, #168	; 0xa8
 8018638:	f820 3c24 	strh.w	r3, [r0, #-36]
 801863c:	f802 3b01 	strb.w	r3, [r2], #1
 8018640:	4282      	cmp	r2, r0
 8018642:	d1fb      	bne.n	801863c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018644:	4770      	bx	lr

08018646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018646:	4603      	mov	r3, r0
 8018648:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801864c:	2200      	movs	r2, #0
 801864e:	801a      	strh	r2, [r3, #0]
 8018650:	3308      	adds	r3, #8
 8018652:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018656:	f823 2c04 	strh.w	r2, [r3, #-4]
 801865a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801865e:	428b      	cmp	r3, r1
 8018660:	d1f5      	bne.n	801864e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018662:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018666:	4770      	bx	lr

08018668 <_ZN8touchgfx11ApplicationC1Ev>:
 8018668:	b570      	push	{r4, r5, r6, lr}
 801866a:	4b16      	ldr	r3, [pc, #88]	; (80186c4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801866c:	2500      	movs	r5, #0
 801866e:	4604      	mov	r4, r0
 8018670:	30a8      	adds	r0, #168	; 0xa8
 8018672:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018676:	f820 5c24 	strh.w	r5, [r0, #-36]
 801867a:	f7ff ffe4 	bl	8018646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801867e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018682:	f7ff ffe0 	bl	8018646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018686:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801868a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801868e:	490e      	ldr	r1, [pc, #56]	; (80186c8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018690:	480e      	ldr	r0, [pc, #56]	; (80186cc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018692:	f00a faa1 	bl	8022bd8 <CRC_Lock>
 8018696:	4e0e      	ldr	r6, [pc, #56]	; (80186d0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018698:	4b0e      	ldr	r3, [pc, #56]	; (80186d4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801869a:	b158      	cbz	r0, 80186b4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801869c:	801d      	strh	r5, [r3, #0]
 801869e:	2300      	movs	r3, #0
 80186a0:	4a0d      	ldr	r2, [pc, #52]	; (80186d8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80186a2:	4620      	mov	r0, r4
 80186a4:	6013      	str	r3, [r2, #0]
 80186a6:	4a0d      	ldr	r2, [pc, #52]	; (80186dc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80186a8:	6033      	str	r3, [r6, #0]
 80186aa:	6013      	str	r3, [r2, #0]
 80186ac:	f7ff ffc0 	bl	8018630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80186b0:	4620      	mov	r0, r4
 80186b2:	bd70      	pop	{r4, r5, r6, pc}
 80186b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80186b8:	2002      	movs	r0, #2
 80186ba:	801a      	strh	r2, [r3, #0]
 80186bc:	6030      	str	r0, [r6, #0]
 80186be:	f000 ff81 	bl	80195c4 <_ZN8touchgfx6Screen4drawEv>
 80186c2:	e7ec      	b.n	801869e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80186c4:	08027f5c 	.word	0x08027f5c
 80186c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80186cc:	f407a5c2 	.word	0xf407a5c2
 80186d0:	2000bcec 	.word	0x2000bcec
 80186d4:	20000040 	.word	0x20000040
 80186d8:	2000bcfc 	.word	0x2000bcfc
 80186dc:	2000bcf0 	.word	0x2000bcf0

080186e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80186e0:	2300      	movs	r3, #0
 80186e2:	8003      	strh	r3, [r0, #0]
 80186e4:	8043      	strh	r3, [r0, #2]
 80186e6:	8083      	strh	r3, [r0, #4]
 80186e8:	80c3      	strh	r3, [r0, #6]
 80186ea:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80186ee:	4293      	cmp	r3, r2
 80186f0:	b530      	push	{r4, r5, lr}
 80186f2:	d912      	bls.n	801871a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80186f4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80186f8:	3b01      	subs	r3, #1
 80186fa:	6825      	ldr	r5, [r4, #0]
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	6005      	str	r5, [r0, #0]
 8018700:	4293      	cmp	r3, r2
 8018702:	6865      	ldr	r5, [r4, #4]
 8018704:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018708:	6045      	str	r5, [r0, #4]
 801870a:	d906      	bls.n	801871a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801870c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018710:	681d      	ldr	r5, [r3, #0]
 8018712:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018716:	685d      	ldr	r5, [r3, #4]
 8018718:	6065      	str	r5, [r4, #4]
 801871a:	bd30      	pop	{r4, r5, pc}

0801871c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801871c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801871e:	466b      	mov	r3, sp
 8018720:	4604      	mov	r4, r0
 8018722:	e883 0006 	stmia.w	r3, {r1, r2}
 8018726:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801872a:	2a07      	cmp	r2, #7
 801872c:	d906      	bls.n	801873c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801872e:	4b09      	ldr	r3, [pc, #36]	; (8018754 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018730:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018734:	4a08      	ldr	r2, [pc, #32]	; (8018758 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018736:	4809      	ldr	r0, [pc, #36]	; (801875c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018738:	f00b ff68 	bl	802460c <__assert_func>
 801873c:	1c51      	adds	r1, r2, #1
 801873e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018742:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018746:	cb03      	ldmia	r3!, {r0, r1}
 8018748:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801874c:	6069      	str	r1, [r5, #4]
 801874e:	b003      	add	sp, #12
 8018750:	bd30      	pop	{r4, r5, pc}
 8018752:	bf00      	nop
 8018754:	08027efc 	.word	0x08027efc
 8018758:	08027fd4 	.word	0x08027fd4
 801875c:	08027f2b 	.word	0x08027f2b

08018760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018764:	b089      	sub	sp, #36	; 0x24
 8018766:	4606      	mov	r6, r0
 8018768:	466c      	mov	r4, sp
 801876a:	4620      	mov	r0, r4
 801876c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018770:	f7fc fe30 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018774:	bbb0      	cbnz	r0, 80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018776:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801877a:	b1fd      	cbz	r5, 80187bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801877c:	3d01      	subs	r5, #1
 801877e:	af04      	add	r7, sp, #16
 8018780:	f04f 090a 	mov.w	r9, #10
 8018784:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8018788:	ab02      	add	r3, sp, #8
 801878a:	fa1f f885 	uxth.w	r8, r5
 801878e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018792:	6851      	ldr	r1, [r2, #4]
 8018794:	c303      	stmia	r3!, {r0, r1}
 8018796:	4621      	mov	r1, r4
 8018798:	a802      	add	r0, sp, #8
 801879a:	f7ff ff21 	bl	80185e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801879e:	bb08      	cbnz	r0, 80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80187a0:	a902      	add	r1, sp, #8
 80187a2:	4620      	mov	r0, r4
 80187a4:	f7ff ff1c 	bl	80185e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80187a8:	b1f8      	cbz	r0, 80187ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80187aa:	4642      	mov	r2, r8
 80187ac:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80187b0:	a806      	add	r0, sp, #24
 80187b2:	f7ff ff95 	bl	80186e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187b6:	f115 35ff 	adds.w	r5, r5, #4294967295
 80187ba:	d2e3      	bcs.n	8018784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80187bc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80187c0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80187c4:	2b08      	cmp	r3, #8
 80187c6:	d108      	bne.n	80187da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80187c8:	4629      	mov	r1, r5
 80187ca:	a806      	add	r0, sp, #24
 80187cc:	2207      	movs	r2, #7
 80187ce:	f7ff ff87 	bl	80186e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187d2:	a906      	add	r1, sp, #24
 80187d4:	4620      	mov	r0, r4
 80187d6:	f7fd fff8 	bl	80167ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187da:	4628      	mov	r0, r5
 80187dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80187e0:	f7ff ff9c 	bl	801871c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80187e4:	b009      	add	sp, #36	; 0x24
 80187e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187ea:	4621      	mov	r1, r4
 80187ec:	a802      	add	r0, sp, #8
 80187ee:	f7ff fed5 	bl	801859c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80187f2:	b150      	cbz	r0, 801880a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80187f4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80187f8:	a806      	add	r0, sp, #24
 80187fa:	4642      	mov	r2, r8
 80187fc:	f7ff ff70 	bl	80186e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018800:	a902      	add	r1, sp, #8
 8018802:	4620      	mov	r0, r4
 8018804:	f7fd ffe1 	bl	80167ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018808:	e7d5      	b.n	80187b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801880a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801880e:	e887 0003 	stmia.w	r7, {r0, r1}
 8018812:	a902      	add	r1, sp, #8
 8018814:	4638      	mov	r0, r7
 8018816:	f7fd ffd8 	bl	80167ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801881a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801881e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018822:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018826:	fb13 f302 	smulbb	r3, r3, r2
 801882a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801882e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018832:	fb11 f102 	smulbb	r1, r1, r2
 8018836:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801883a:	fb09 f303 	mul.w	r3, r9, r3
 801883e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018842:	220b      	movs	r2, #11
 8018844:	434a      	muls	r2, r1
 8018846:	4293      	cmp	r3, r2
 8018848:	dab5      	bge.n	80187b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801884a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801884e:	a806      	add	r0, sp, #24
 8018850:	4642      	mov	r2, r8
 8018852:	f7ff ff45 	bl	80186e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018856:	e897 0003 	ldmia.w	r7, {r0, r1}
 801885a:	e884 0003 	stmia.w	r4, {r0, r1}
 801885e:	e7aa      	b.n	80187b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08018860 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018860:	4b1d      	ldr	r3, [pc, #116]	; (80188d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018862:	b530      	push	{r4, r5, lr}
 8018864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018868:	b085      	sub	sp, #20
 801886a:	4b1c      	ldr	r3, [pc, #112]	; (80188dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801886c:	460c      	mov	r4, r1
 801886e:	2100      	movs	r1, #0
 8018870:	4605      	mov	r5, r0
 8018872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018876:	6820      	ldr	r0, [r4, #0]
 8018878:	9100      	str	r1, [sp, #0]
 801887a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801887e:	ab02      	add	r3, sp, #8
 8018880:	6861      	ldr	r1, [r4, #4]
 8018882:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018886:	c303      	stmia	r3!, {r0, r1}
 8018888:	4669      	mov	r1, sp
 801888a:	a802      	add	r0, sp, #8
 801888c:	f7fc fd5e 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8018890:	ab02      	add	r3, sp, #8
 8018892:	cb03      	ldmia	r3!, {r0, r1}
 8018894:	4b12      	ldr	r3, [pc, #72]	; (80188e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018896:	6020      	str	r0, [r4, #0]
 8018898:	6818      	ldr	r0, [r3, #0]
 801889a:	6061      	str	r1, [r4, #4]
 801889c:	b138      	cbz	r0, 80188ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801889e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80188a2:	b133      	cbz	r3, 80188b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80188a4:	6821      	ldr	r1, [r4, #0]
 80188a6:	4628      	mov	r0, r5
 80188a8:	6862      	ldr	r2, [r4, #4]
 80188aa:	f7ff ff59 	bl	8018760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80188ae:	b005      	add	sp, #20
 80188b0:	bd30      	pop	{r4, r5, pc}
 80188b2:	6803      	ldr	r3, [r0, #0]
 80188b4:	4621      	mov	r1, r4
 80188b6:	689b      	ldr	r3, [r3, #8]
 80188b8:	4798      	blx	r3
 80188ba:	4b0a      	ldr	r3, [pc, #40]	; (80188e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80188bc:	6818      	ldr	r0, [r3, #0]
 80188be:	b118      	cbz	r0, 80188c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80188c0:	6803      	ldr	r3, [r0, #0]
 80188c2:	4621      	mov	r1, r4
 80188c4:	689b      	ldr	r3, [r3, #8]
 80188c6:	4798      	blx	r3
 80188c8:	4b07      	ldr	r3, [pc, #28]	; (80188e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80188ca:	4621      	mov	r1, r4
 80188cc:	6818      	ldr	r0, [r3, #0]
 80188ce:	6803      	ldr	r3, [r0, #0]
 80188d0:	695b      	ldr	r3, [r3, #20]
 80188d2:	4798      	blx	r3
 80188d4:	e7eb      	b.n	80188ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80188d6:	bf00      	nop
 80188d8:	2000bc64 	.word	0x2000bc64
 80188dc:	2000bc66 	.word	0x2000bc66
 80188e0:	2000bcec 	.word	0x2000bcec
 80188e4:	2000bce8 	.word	0x2000bce8
 80188e8:	2000bc70 	.word	0x2000bc70

080188ec <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80188ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f0:	4604      	mov	r4, r0
 80188f2:	b09b      	sub	sp, #108	; 0x6c
 80188f4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80188f8:	b129      	cbz	r1, 8018906 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80188fa:	2300      	movs	r3, #0
 80188fc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8018900:	b01b      	add	sp, #108	; 0x6c
 8018902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018906:	4baf      	ldr	r3, [pc, #700]	; (8018bc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	b33b      	cbz	r3, 801895c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801890c:	4dae      	ldr	r5, [pc, #696]	; (8018bc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801890e:	4628      	mov	r0, r5
 8018910:	f7fc fd60 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018914:	4606      	mov	r6, r0
 8018916:	bb08      	cbnz	r0, 801895c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018918:	4628      	mov	r0, r5
 801891a:	f7ff fce9 	bl	80182f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801891e:	6829      	ldr	r1, [r5, #0]
 8018920:	686a      	ldr	r2, [r5, #4]
 8018922:	4620      	mov	r0, r4
 8018924:	f7ff ff1c 	bl	8018760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018928:	802e      	strh	r6, [r5, #0]
 801892a:	806e      	strh	r6, [r5, #2]
 801892c:	80ae      	strh	r6, [r5, #4]
 801892e:	80ee      	strh	r6, [r5, #6]
 8018930:	4fa6      	ldr	r7, [pc, #664]	; (8018bcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018932:	a809      	add	r0, sp, #36	; 0x24
 8018934:	f7ff fe87 	bl	8018646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018938:	883d      	ldrh	r5, [r7, #0]
 801893a:	462e      	mov	r6, r5
 801893c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018940:	42b3      	cmp	r3, r6
 8018942:	d910      	bls.n	8018966 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8018944:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018948:	3601      	adds	r6, #1
 801894a:	a809      	add	r0, sp, #36	; 0x24
 801894c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8018950:	b2b6      	uxth	r6, r6
 8018952:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018956:	f7ff fee1 	bl	801871c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801895a:	e7ef      	b.n	801893c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801895c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018960:	2b00      	cmp	r3, #0
 8018962:	d1e5      	bne.n	8018930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8018964:	e7cc      	b.n	8018900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018966:	462e      	mov	r6, r5
 8018968:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801896c:	42b3      	cmp	r3, r6
 801896e:	d90b      	bls.n	8018988 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018970:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018974:	3601      	adds	r6, #1
 8018976:	4620      	mov	r0, r4
 8018978:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801897c:	b2b6      	uxth	r6, r6
 801897e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018982:	f7ff feed 	bl	8018760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018986:	e7ef      	b.n	8018968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8018988:	4e91      	ldr	r6, [pc, #580]	; (8018bd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801898a:	6833      	ldr	r3, [r6, #0]
 801898c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018990:	2b01      	cmp	r3, #1
 8018992:	f040 8092 	bne.w	8018aba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8018996:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801899a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801899e:	f04f 0900 	mov.w	r9, #0
 80189a2:	33aa      	adds	r3, #170	; 0xaa
 80189a4:	42a8      	cmp	r0, r5
 80189a6:	f103 0308 	add.w	r3, r3, #8
 80189aa:	dd0a      	ble.n	80189c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80189ac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80189b0:	3501      	adds	r5, #1
 80189b2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80189b6:	440a      	add	r2, r1
 80189b8:	b212      	sxth	r2, r2
 80189ba:	4591      	cmp	r9, r2
 80189bc:	bfb8      	it	lt
 80189be:	4691      	movlt	r9, r2
 80189c0:	e7f0      	b.n	80189a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80189c2:	4b84      	ldr	r3, [pc, #528]	; (8018bd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80189c4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8018bdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80189c8:	881d      	ldrh	r5, [r3, #0]
 80189ca:	2300      	movs	r3, #0
 80189cc:	2d0f      	cmp	r5, #15
 80189ce:	bf8c      	ite	hi
 80189d0:	08ed      	lsrhi	r5, r5, #3
 80189d2:	2501      	movls	r5, #1
 80189d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80189d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80189dc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80189e0:	6830      	ldr	r0, [r6, #0]
 80189e2:	440b      	add	r3, r1
 80189e4:	6802      	ldr	r2, [r0, #0]
 80189e6:	b21b      	sxth	r3, r3
 80189e8:	4599      	cmp	r9, r3
 80189ea:	dd49      	ble.n	8018a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80189ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80189f0:	4798      	blx	r3
 80189f2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80189f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80189fa:	4413      	add	r3, r2
 80189fc:	b21b      	sxth	r3, r3
 80189fe:	195a      	adds	r2, r3, r5
 8018a00:	4290      	cmp	r0, r2
 8018a02:	da07      	bge.n	8018a14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018a04:	4581      	cmp	r9, r0
 8018a06:	dd05      	ble.n	8018a14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018a08:	4298      	cmp	r0, r3
 8018a0a:	da33      	bge.n	8018a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	dd31      	ble.n	8018a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018a10:	4648      	mov	r0, r9
 8018a12:	e004      	b.n	8018a1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8018a14:	4298      	cmp	r0, r3
 8018a16:	dbfb      	blt.n	8018a10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8018a18:	4548      	cmp	r0, r9
 8018a1a:	bfa8      	it	ge
 8018a1c:	4648      	movge	r0, r9
 8018a1e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018a22:	2100      	movs	r1, #0
 8018a24:	1ac0      	subs	r0, r0, r3
 8018a26:	f8b7 a000 	ldrh.w	sl, [r7]
 8018a2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018a2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a32:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018a36:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018a3a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a3e:	4553      	cmp	r3, sl
 8018a40:	d9ca      	bls.n	80189d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018a42:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018a46:	ab07      	add	r3, sp, #28
 8018a48:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018a4c:	6851      	ldr	r1, [r2, #4]
 8018a4e:	c303      	stmia	r3!, {r0, r1}
 8018a50:	a807      	add	r0, sp, #28
 8018a52:	a905      	add	r1, sp, #20
 8018a54:	f7fc fc7a 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8018a58:	a807      	add	r0, sp, #28
 8018a5a:	f7fc fcbb 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a5e:	b920      	cbnz	r0, 8018a6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8018a60:	6823      	ldr	r3, [r4, #0]
 8018a62:	a907      	add	r1, sp, #28
 8018a64:	4620      	mov	r0, r4
 8018a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a68:	4798      	blx	r3
 8018a6a:	f10a 0a01 	add.w	sl, sl, #1
 8018a6e:	fa1f fa8a 	uxth.w	sl, sl
 8018a72:	e7e2      	b.n	8018a3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8018a74:	6830      	ldr	r0, [r6, #0]
 8018a76:	2101      	movs	r1, #1
 8018a78:	6803      	ldr	r3, [r0, #0]
 8018a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018a7c:	4798      	blx	r3
 8018a7e:	e7ab      	b.n	80189d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018a80:	69d3      	ldr	r3, [r2, #28]
 8018a82:	4798      	blx	r3
 8018a84:	4b54      	ldr	r3, [pc, #336]	; (8018bd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f43f af39 	beq.w	8018900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018a8e:	2300      	movs	r3, #0
 8018a90:	883d      	ldrh	r5, [r7, #0]
 8018a92:	34ea      	adds	r4, #234	; 0xea
 8018a94:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8018a98:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8018a9c:	42ab      	cmp	r3, r5
 8018a9e:	f67f af2f 	bls.w	8018900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018aa2:	ab1a      	add	r3, sp, #104	; 0x68
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018aaa:	3501      	adds	r5, #1
 8018aac:	3b44      	subs	r3, #68	; 0x44
 8018aae:	b2ad      	uxth	r5, r5
 8018ab0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018ab4:	f7ff fe32 	bl	801871c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018ab8:	e7ee      	b.n	8018a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8018aba:	2b02      	cmp	r3, #2
 8018abc:	d16a      	bne.n	8018b94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018abe:	f8df a120 	ldr.w	sl, [pc, #288]	; 8018be0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8018ac2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018ac6:	42ab      	cmp	r3, r5
 8018ac8:	d9dc      	bls.n	8018a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018aca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018ace:	ab03      	add	r3, sp, #12
 8018ad0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018ad4:	6851      	ldr	r1, [r2, #4]
 8018ad6:	c303      	stmia	r3!, {r0, r1}
 8018ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d102      	bne.n	8018ae6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8018ae0:	a803      	add	r0, sp, #12
 8018ae2:	f7ff fc5f 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018ae6:	a803      	add	r0, sp, #12
 8018ae8:	f7fc fc74 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	d14a      	bne.n	8018b86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8018af0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018af4:	f10d 0914 	add.w	r9, sp, #20
 8018af8:	f10d 081c 	add.w	r8, sp, #28
 8018afc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018b04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018b08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018b10:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018b14:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8018b18:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8018b1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b20:	44dc      	add	ip, fp
 8018b22:	6830      	ldr	r0, [r6, #0]
 8018b24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018b28:	ebac 0c02 	sub.w	ip, ip, r2
 8018b2c:	f8d0 e000 	ldr.w	lr, [r0]
 8018b30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018b34:	fa1f fc8c 	uxth.w	ip, ip
 8018b38:	f8cd c000 	str.w	ip, [sp]
 8018b3c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8018b40:	47d8      	blx	fp
 8018b42:	f89a 3000 	ldrb.w	r3, [sl]
 8018b46:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018b4a:	2b01      	cmp	r3, #1
 8018b4c:	d11e      	bne.n	8018b8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8018b4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018b52:	e888 0003 	stmia.w	r8, {r0, r1}
 8018b56:	4640      	mov	r0, r8
 8018b58:	f7ff fbca 	bl	80182f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	4641      	mov	r1, r8
 8018b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b62:	4620      	mov	r0, r4
 8018b64:	4798      	blx	r3
 8018b66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018b6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018b6e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8018b72:	4413      	add	r3, r2
 8018b74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018b78:	440a      	add	r2, r1
 8018b7a:	b21b      	sxth	r3, r3
 8018b7c:	b212      	sxth	r2, r2
 8018b7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b82:	4293      	cmp	r3, r2
 8018b84:	dbc6      	blt.n	8018b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8018b86:	3501      	adds	r5, #1
 8018b88:	b2ad      	uxth	r5, r5
 8018b8a:	e79a      	b.n	8018ac2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	4649      	mov	r1, r9
 8018b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b92:	e7e6      	b.n	8018b62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8018b94:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018b98:	42ab      	cmp	r3, r5
 8018b9a:	f67f af73 	bls.w	8018a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018b9e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018ba2:	ab07      	add	r3, sp, #28
 8018ba4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018ba8:	6851      	ldr	r1, [r2, #4]
 8018baa:	c303      	stmia	r3!, {r0, r1}
 8018bac:	a807      	add	r0, sp, #28
 8018bae:	f7fc fc11 	bl	80153d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bb2:	b920      	cbnz	r0, 8018bbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8018bb4:	6823      	ldr	r3, [r4, #0]
 8018bb6:	a907      	add	r1, sp, #28
 8018bb8:	4620      	mov	r0, r4
 8018bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bbc:	4798      	blx	r3
 8018bbe:	3501      	adds	r5, #1
 8018bc0:	b2ad      	uxth	r5, r5
 8018bc2:	e7e7      	b.n	8018b94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018bc4:	2000bce8 	.word	0x2000bce8
 8018bc8:	2000bcf4 	.word	0x2000bcf4
 8018bcc:	20000040 	.word	0x20000040
 8018bd0:	2000bc70 	.word	0x2000bc70
 8018bd4:	2000bc66 	.word	0x2000bc66
 8018bd8:	2000bc6e 	.word	0x2000bc6e
 8018bdc:	2000bc64 	.word	0x2000bc64
 8018be0:	2000bc68 	.word	0x2000bc68

08018be4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018be4:	4b03      	ldr	r3, [pc, #12]	; (8018bf4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018be6:	2200      	movs	r2, #0
 8018be8:	801a      	strh	r2, [r3, #0]
 8018bea:	805a      	strh	r2, [r3, #2]
 8018bec:	809a      	strh	r2, [r3, #4]
 8018bee:	80da      	strh	r2, [r3, #6]
 8018bf0:	4770      	bx	lr
 8018bf2:	bf00      	nop
 8018bf4:	2000bcf4 	.word	0x2000bcf4

08018bf8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	4770      	bx	lr

08018bfc <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	4770      	bx	lr

08018c00 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018c00:	b508      	push	{r3, lr}
 8018c02:	6803      	ldr	r3, [r0, #0]
 8018c04:	68db      	ldr	r3, [r3, #12]
 8018c06:	4798      	blx	r3
 8018c08:	b128      	cbz	r0, 8018c16 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018c0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018c0e:	7a80      	ldrb	r0, [r0, #10]
 8018c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c14:	4318      	orrs	r0, r3
 8018c16:	bd08      	pop	{r3, pc}

08018c18 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8018c18:	b40e      	push	{r1, r2, r3}
 8018c1a:	b533      	push	{r0, r1, r4, r5, lr}
 8018c1c:	ab05      	add	r3, sp, #20
 8018c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c22:	9301      	str	r3, [sp, #4]
 8018c24:	4b0a      	ldr	r3, [pc, #40]	; (8018c50 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8018c26:	685c      	ldr	r4, [r3, #4]
 8018c28:	1061      	asrs	r1, r4, #1
 8018c2a:	07e4      	lsls	r4, r4, #31
 8018c2c:	eb00 0501 	add.w	r5, r0, r1
 8018c30:	bf46      	itte	mi
 8018c32:	681b      	ldrmi	r3, [r3, #0]
 8018c34:	5841      	ldrmi	r1, [r0, r1]
 8018c36:	681c      	ldrpl	r4, [r3, #0]
 8018c38:	4628      	mov	r0, r5
 8018c3a:	bf48      	it	mi
 8018c3c:	58cc      	ldrmi	r4, [r1, r3]
 8018c3e:	2100      	movs	r1, #0
 8018c40:	9b01      	ldr	r3, [sp, #4]
 8018c42:	47a0      	blx	r4
 8018c44:	b002      	add	sp, #8
 8018c46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c4a:	b003      	add	sp, #12
 8018c4c:	4770      	bx	lr
 8018c4e:	bf00      	nop
 8018c50:	20000028 	.word	0x20000028

08018c54 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8018c54:	b40c      	push	{r2, r3}
 8018c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c58:	ab06      	add	r3, sp, #24
 8018c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c5e:	9301      	str	r3, [sp, #4]
 8018c60:	4b09      	ldr	r3, [pc, #36]	; (8018c88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8018c62:	685d      	ldr	r5, [r3, #4]
 8018c64:	106c      	asrs	r4, r5, #1
 8018c66:	07ed      	lsls	r5, r5, #31
 8018c68:	eb00 0604 	add.w	r6, r0, r4
 8018c6c:	bf45      	ittet	mi
 8018c6e:	681b      	ldrmi	r3, [r3, #0]
 8018c70:	5900      	ldrmi	r0, [r0, r4]
 8018c72:	681c      	ldrpl	r4, [r3, #0]
 8018c74:	58c4      	ldrmi	r4, [r0, r3]
 8018c76:	4630      	mov	r0, r6
 8018c78:	9b01      	ldr	r3, [sp, #4]
 8018c7a:	47a0      	blx	r4
 8018c7c:	b002      	add	sp, #8
 8018c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c82:	b002      	add	sp, #8
 8018c84:	4770      	bx	lr
 8018c86:	bf00      	nop
 8018c88:	20000028 	.word	0x20000028

08018c8c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018c8c:	b40e      	push	{r1, r2, r3}
 8018c8e:	b530      	push	{r4, r5, lr}
 8018c90:	b098      	sub	sp, #96	; 0x60
 8018c92:	4604      	mov	r4, r0
 8018c94:	ab1b      	add	r3, sp, #108	; 0x6c
 8018c96:	a802      	add	r0, sp, #8
 8018c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c9c:	9301      	str	r3, [sp, #4]
 8018c9e:	f001 f837 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8018ca2:	6823      	ldr	r3, [r4, #0]
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	2401      	movs	r4, #1
 8018ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018caa:	4798      	blx	r3
 8018cac:	9a01      	ldr	r2, [sp, #4]
 8018cae:	4603      	mov	r3, r0
 8018cb0:	4629      	mov	r1, r5
 8018cb2:	a802      	add	r0, sp, #8
 8018cb4:	f001 f849 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018cb8:	a802      	add	r0, sp, #8
 8018cba:	f001 f87f 	bl	8019dbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018cbe:	b2a3      	uxth	r3, r4
 8018cc0:	b138      	cbz	r0, 8018cd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8018cc2:	280a      	cmp	r0, #10
 8018cc4:	a802      	add	r0, sp, #8
 8018cc6:	bf04      	itt	eq
 8018cc8:	3301      	addeq	r3, #1
 8018cca:	b21c      	sxtheq	r4, r3
 8018ccc:	f001 f876 	bl	8019dbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018cd0:	e7f5      	b.n	8018cbe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	b018      	add	sp, #96	; 0x60
 8018cd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cda:	b003      	add	sp, #12
 8018cdc:	4770      	bx	lr
	...

08018ce0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018ce0:	b40e      	push	{r1, r2, r3}
 8018ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ce4:	b098      	sub	sp, #96	; 0x60
 8018ce6:	4605      	mov	r5, r0
 8018ce8:	4f25      	ldr	r7, [pc, #148]	; (8018d80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8018cea:	ab1d      	add	r3, sp, #116	; 0x74
 8018cec:	a802      	add	r0, sp, #8
 8018cee:	ae18      	add	r6, sp, #96	; 0x60
 8018cf0:	f853 4b04 	ldr.w	r4, [r3], #4
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	f001 f80b 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8018cfa:	682b      	ldr	r3, [r5, #0]
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d00:	4798      	blx	r3
 8018d02:	4621      	mov	r1, r4
 8018d04:	2400      	movs	r4, #0
 8018d06:	4603      	mov	r3, r0
 8018d08:	9a00      	ldr	r2, [sp, #0]
 8018d0a:	a802      	add	r0, sp, #8
 8018d0c:	f001 f81d 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018d10:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018d14:	462a      	mov	r2, r5
 8018d16:	4633      	mov	r3, r6
 8018d18:	4621      	mov	r1, r4
 8018d1a:	a802      	add	r0, sp, #8
 8018d1c:	f001 f97a 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d20:	b340      	cbz	r0, 8018d74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8018d22:	280a      	cmp	r0, #10
 8018d24:	d01f      	beq.n	8018d66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018d26:	9901      	ldr	r1, [sp, #4]
 8018d28:	b1e9      	cbz	r1, 8018d66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018d2a:	7b4b      	ldrb	r3, [r1, #13]
 8018d2c:	f891 c008 	ldrb.w	ip, [r1, #8]
 8018d30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018d34:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8018d38:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018d3c:	79c9      	ldrb	r1, [r1, #7]
 8018d3e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8018d42:	bf18      	it	ne
 8018d44:	4638      	movne	r0, r7
 8018d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d4a:	bf08      	it	eq
 8018d4c:	2000      	moveq	r0, #0
 8018d4e:	88aa      	ldrh	r2, [r5, #4]
 8018d50:	ea41 010e 	orr.w	r1, r1, lr
 8018d54:	ea43 030c 	orr.w	r3, r3, ip
 8018d58:	440a      	add	r2, r1
 8018d5a:	4303      	orrs	r3, r0
 8018d5c:	1ad3      	subs	r3, r2, r3
 8018d5e:	b29b      	uxth	r3, r3
 8018d60:	42a3      	cmp	r3, r4
 8018d62:	bfc8      	it	gt
 8018d64:	b21c      	sxthgt	r4, r3
 8018d66:	4633      	mov	r3, r6
 8018d68:	462a      	mov	r2, r5
 8018d6a:	2100      	movs	r1, #0
 8018d6c:	a802      	add	r0, sp, #8
 8018d6e:	f001 f951 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d72:	e7d5      	b.n	8018d20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8018d74:	b2a0      	uxth	r0, r4
 8018d76:	b018      	add	sp, #96	; 0x60
 8018d78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d7c:	b003      	add	sp, #12
 8018d7e:	4770      	bx	lr
 8018d80:	fffffe00 	.word	0xfffffe00

08018d84 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018d84:	b40e      	push	{r1, r2, r3}
 8018d86:	b570      	push	{r4, r5, r6, lr}
 8018d88:	b099      	sub	sp, #100	; 0x64
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	26ff      	movs	r6, #255	; 0xff
 8018d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8018d90:	a802      	add	r0, sp, #8
 8018d92:	f853 5b04 	ldr.w	r5, [r3], #4
 8018d96:	9300      	str	r3, [sp, #0]
 8018d98:	f000 ffba 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8018d9c:	6823      	ldr	r3, [r4, #0]
 8018d9e:	4620      	mov	r0, r4
 8018da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018da2:	4798      	blx	r3
 8018da4:	4629      	mov	r1, r5
 8018da6:	4603      	mov	r3, r0
 8018da8:	9a00      	ldr	r2, [sp, #0]
 8018daa:	a802      	add	r0, sp, #8
 8018dac:	ad18      	add	r5, sp, #96	; 0x60
 8018dae:	f000 ffcc 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018db2:	2100      	movs	r1, #0
 8018db4:	4622      	mov	r2, r4
 8018db6:	a802      	add	r0, sp, #8
 8018db8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8018dbc:	462b      	mov	r3, r5
 8018dbe:	f001 f929 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018dc2:	b190      	cbz	r0, 8018dea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8018dc4:	280a      	cmp	r0, #10
 8018dc6:	d009      	beq.n	8018ddc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018dc8:	9a01      	ldr	r2, [sp, #4]
 8018dca:	b13a      	cbz	r2, 8018ddc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018dcc:	7923      	ldrb	r3, [r4, #4]
 8018dce:	7a12      	ldrb	r2, [r2, #8]
 8018dd0:	1a9b      	subs	r3, r3, r2
 8018dd2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8018dd6:	429e      	cmp	r6, r3
 8018dd8:	bf28      	it	cs
 8018dda:	461e      	movcs	r6, r3
 8018ddc:	462b      	mov	r3, r5
 8018dde:	4622      	mov	r2, r4
 8018de0:	2100      	movs	r1, #0
 8018de2:	a802      	add	r0, sp, #8
 8018de4:	f001 f916 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018de8:	e7eb      	b.n	8018dc2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018dea:	4630      	mov	r0, r6
 8018dec:	b019      	add	sp, #100	; 0x64
 8018dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018df2:	b003      	add	sp, #12
 8018df4:	4770      	bx	lr

08018df6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dfa:	b099      	sub	sp, #100	; 0x64
 8018dfc:	4606      	mov	r6, r0
 8018dfe:	4614      	mov	r4, r2
 8018e00:	4688      	mov	r8, r1
 8018e02:	a802      	add	r0, sp, #8
 8018e04:	461d      	mov	r5, r3
 8018e06:	f04f 0b00 	mov.w	fp, #0
 8018e0a:	f000 ff81 	bl	8019d10 <_ZN8touchgfx12TextProviderC1Ev>
 8018e0e:	6833      	ldr	r3, [r6, #0]
 8018e10:	4630      	mov	r0, r6
 8018e12:	465f      	mov	r7, fp
 8018e14:	46da      	mov	sl, fp
 8018e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e18:	46d9      	mov	r9, fp
 8018e1a:	4798      	blx	r3
 8018e1c:	462a      	mov	r2, r5
 8018e1e:	4603      	mov	r3, r0
 8018e20:	4621      	mov	r1, r4
 8018e22:	a802      	add	r0, sp, #8
 8018e24:	f000 ff91 	bl	8019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018e28:	ab01      	add	r3, sp, #4
 8018e2a:	4632      	mov	r2, r6
 8018e2c:	4641      	mov	r1, r8
 8018e2e:	a802      	add	r0, sp, #8
 8018e30:	f8cd 9004 	str.w	r9, [sp, #4]
 8018e34:	f001 f8ee 	bl	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e38:	4605      	mov	r5, r0
 8018e3a:	b108      	cbz	r0, 8018e40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8018e3c:	280a      	cmp	r0, #10
 8018e3e:	d10b      	bne.n	8018e58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8018e40:	4557      	cmp	r7, sl
 8018e42:	bf38      	it	cc
 8018e44:	4657      	movcc	r7, sl
 8018e46:	f04f 0a00 	mov.w	sl, #0
 8018e4a:	b91d      	cbnz	r5, 8018e54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	b019      	add	sp, #100	; 0x64
 8018e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e54:	46ab      	mov	fp, r5
 8018e56:	e7e7      	b.n	8018e28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8018e58:	9a01      	ldr	r2, [sp, #4]
 8018e5a:	2a00      	cmp	r2, #0
 8018e5c:	d0fa      	beq.n	8018e54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8018e5e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8018e62:	4659      	mov	r1, fp
 8018e64:	6833      	ldr	r3, [r6, #0]
 8018e66:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8018e6a:	7a94      	ldrb	r4, [r2, #10]
 8018e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e6e:	4304      	orrs	r4, r0
 8018e70:	4630      	mov	r0, r6
 8018e72:	8895      	ldrh	r5, [r2, #4]
 8018e74:	4798      	blx	r3
 8018e76:	4420      	add	r0, r4
 8018e78:	4450      	add	r0, sl
 8018e7a:	fa1f fa80 	uxth.w	sl, r0
 8018e7e:	e7e4      	b.n	8018e4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08018e80 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018e80:	b513      	push	{r0, r1, r4, lr}
 8018e82:	1d01      	adds	r1, r0, #4
 8018e84:	4603      	mov	r3, r0
 8018e86:	466a      	mov	r2, sp
 8018e88:	c903      	ldmia	r1, {r0, r1}
 8018e8a:	e882 0003 	stmia.w	r2, {r0, r1}
 8018e8e:	2100      	movs	r1, #0
 8018e90:	4618      	mov	r0, r3
 8018e92:	9100      	str	r1, [sp, #0]
 8018e94:	6819      	ldr	r1, [r3, #0]
 8018e96:	690c      	ldr	r4, [r1, #16]
 8018e98:	4611      	mov	r1, r2
 8018e9a:	47a0      	blx	r4
 8018e9c:	b002      	add	sp, #8
 8018e9e:	bd10      	pop	{r4, pc}

08018ea0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018ea0:	b538      	push	{r3, r4, r5, lr}
 8018ea2:	680b      	ldr	r3, [r1, #0]
 8018ea4:	460c      	mov	r4, r1
 8018ea6:	4605      	mov	r5, r0
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	4798      	blx	r3
 8018eac:	6823      	ldr	r3, [r4, #0]
 8018eae:	4620      	mov	r0, r4
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	4798      	blx	r3
 8018eb6:	4628      	mov	r0, r5
 8018eb8:	bd38      	pop	{r3, r4, r5, pc}

08018eba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018eba:	b410      	push	{r4}
 8018ebc:	880a      	ldrh	r2, [r1, #0]
 8018ebe:	8884      	ldrh	r4, [r0, #4]
 8018ec0:	4422      	add	r2, r4
 8018ec2:	800a      	strh	r2, [r1, #0]
 8018ec4:	884a      	ldrh	r2, [r1, #2]
 8018ec6:	88c4      	ldrh	r4, [r0, #6]
 8018ec8:	4422      	add	r2, r4
 8018eca:	804a      	strh	r2, [r1, #2]
 8018ecc:	6940      	ldr	r0, [r0, #20]
 8018ece:	b120      	cbz	r0, 8018eda <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018ed0:	6803      	ldr	r3, [r0, #0]
 8018ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed8:	4718      	bx	r3
 8018eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ede:	4770      	bx	lr

08018ee0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ee2:	460b      	mov	r3, r1
 8018ee4:	b085      	sub	sp, #20
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	b901      	cbnz	r1, 8018eec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018eea:	b1fa      	cbz	r2, 8018f2c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8018eec:	1d27      	adds	r7, r4, #4
 8018eee:	466e      	mov	r6, sp
 8018ef0:	ad02      	add	r5, sp, #8
 8018ef2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018ef6:	e886 0003 	stmia.w	r6, {r0, r1}
 8018efa:	88e1      	ldrh	r1, [r4, #6]
 8018efc:	4620      	mov	r0, r4
 8018efe:	440a      	add	r2, r1
 8018f00:	88a1      	ldrh	r1, [r4, #4]
 8018f02:	4419      	add	r1, r3
 8018f04:	6823      	ldr	r3, [r4, #0]
 8018f06:	b212      	sxth	r2, r2
 8018f08:	b209      	sxth	r1, r1
 8018f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f0c:	4798      	blx	r3
 8018f0e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8018f16:	6960      	ldr	r0, [r4, #20]
 8018f18:	b150      	cbz	r0, 8018f30 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8018f1a:	6803      	ldr	r3, [r0, #0]
 8018f1c:	4631      	mov	r1, r6
 8018f1e:	691b      	ldr	r3, [r3, #16]
 8018f20:	4798      	blx	r3
 8018f22:	6960      	ldr	r0, [r4, #20]
 8018f24:	6803      	ldr	r3, [r0, #0]
 8018f26:	691b      	ldr	r3, [r3, #16]
 8018f28:	4629      	mov	r1, r5
 8018f2a:	4798      	blx	r3
 8018f2c:	b005      	add	sp, #20
 8018f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f30:	f7ff fb78 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 8018f34:	6803      	ldr	r3, [r0, #0]
 8018f36:	4631      	mov	r1, r6
 8018f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f3a:	4798      	blx	r3
 8018f3c:	f7ff fb72 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 8018f40:	6803      	ldr	r3, [r0, #0]
 8018f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f44:	e7f0      	b.n	8018f28 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08018f46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f48:	8882      	ldrh	r2, [r0, #4]
 8018f4a:	4605      	mov	r5, r0
 8018f4c:	880b      	ldrh	r3, [r1, #0]
 8018f4e:	460c      	mov	r4, r1
 8018f50:	4413      	add	r3, r2
 8018f52:	800b      	strh	r3, [r1, #0]
 8018f54:	884b      	ldrh	r3, [r1, #2]
 8018f56:	88c2      	ldrh	r2, [r0, #6]
 8018f58:	4413      	add	r3, r2
 8018f5a:	4602      	mov	r2, r0
 8018f5c:	804b      	strh	r3, [r1, #2]
 8018f5e:	466b      	mov	r3, sp
 8018f60:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018f64:	6851      	ldr	r1, [r2, #4]
 8018f66:	c303      	stmia	r3!, {r0, r1}
 8018f68:	4621      	mov	r1, r4
 8018f6a:	4668      	mov	r0, sp
 8018f6c:	f7fc f9ee 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8018f70:	466b      	mov	r3, sp
 8018f72:	cb03      	ldmia	r3!, {r0, r1}
 8018f74:	6020      	str	r0, [r4, #0]
 8018f76:	6061      	str	r1, [r4, #4]
 8018f78:	6968      	ldr	r0, [r5, #20]
 8018f7a:	b128      	cbz	r0, 8018f88 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8018f7c:	6803      	ldr	r3, [r0, #0]
 8018f7e:	691b      	ldr	r3, [r3, #16]
 8018f80:	4621      	mov	r1, r4
 8018f82:	4798      	blx	r3
 8018f84:	b003      	add	sp, #12
 8018f86:	bd30      	pop	{r4, r5, pc}
 8018f88:	f7ff fb4c 	bl	8018624 <_ZN8touchgfx11Application11getInstanceEv>
 8018f8c:	6803      	ldr	r3, [r0, #0]
 8018f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f90:	e7f6      	b.n	8018f80 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08018f92 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018f92:	b570      	push	{r4, r5, r6, lr}
 8018f94:	8882      	ldrh	r2, [r0, #4]
 8018f96:	460c      	mov	r4, r1
 8018f98:	880b      	ldrh	r3, [r1, #0]
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	4413      	add	r3, r2
 8018f9e:	800b      	strh	r3, [r1, #0]
 8018fa0:	884b      	ldrh	r3, [r1, #2]
 8018fa2:	88c2      	ldrh	r2, [r0, #6]
 8018fa4:	4413      	add	r3, r2
 8018fa6:	804b      	strh	r3, [r1, #2]
 8018fa8:	1d01      	adds	r1, r0, #4
 8018faa:	4620      	mov	r0, r4
 8018fac:	f7fc f9ce 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8018fb0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018fb4:	b153      	cbz	r3, 8018fcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018fb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018fba:	b13b      	cbz	r3, 8018fcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018fbc:	6968      	ldr	r0, [r5, #20]
 8018fbe:	b128      	cbz	r0, 8018fcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018fc0:	6803      	ldr	r3, [r0, #0]
 8018fc2:	4621      	mov	r1, r4
 8018fc4:	6a1b      	ldr	r3, [r3, #32]
 8018fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fca:	4718      	bx	r3
 8018fcc:	bd70      	pop	{r4, r5, r6, pc}

08018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018fce:	b510      	push	{r4, lr}
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	4608      	mov	r0, r1
 8018fd6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018fda:	8023      	strh	r3, [r4, #0]
 8018fdc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018fe0:	8063      	strh	r3, [r4, #2]
 8018fe2:	6803      	ldr	r3, [r0, #0]
 8018fe4:	80a1      	strh	r1, [r4, #4]
 8018fe6:	4621      	mov	r1, r4
 8018fe8:	80e2      	strh	r2, [r4, #6]
 8018fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fec:	4798      	blx	r3
 8018fee:	4620      	mov	r0, r4
 8018ff0:	bd10      	pop	{r4, pc}
	...

08018ff4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018ff4:	b530      	push	{r4, r5, lr}
 8018ff6:	8083      	strh	r3, [r0, #4]
 8018ff8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018ffc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019000:	7183      	strb	r3, [r0, #6]
 8019002:	79c3      	ldrb	r3, [r0, #7]
 8019004:	6101      	str	r1, [r0, #16]
 8019006:	f365 0306 	bfi	r3, r5, #0, #7
 801900a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801900e:	8282      	strh	r2, [r0, #20]
 8019010:	f365 13c7 	bfi	r3, r5, #7, #1
 8019014:	71c3      	strb	r3, [r0, #7]
 8019016:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801901a:	7203      	strb	r3, [r0, #8]
 801901c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019020:	7243      	strb	r3, [r0, #9]
 8019022:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019026:	8143      	strh	r3, [r0, #10]
 8019028:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801902c:	8183      	strh	r3, [r0, #12]
 801902e:	4b01      	ldr	r3, [pc, #4]	; (8019034 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019030:	6003      	str	r3, [r0, #0]
 8019032:	bd30      	pop	{r4, r5, pc}
 8019034:	080280fc 	.word	0x080280fc

08019038 <_ZNK8touchgfx9ConstFont4findEt>:
 8019038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801903a:	8a84      	ldrh	r4, [r0, #20]
 801903c:	2500      	movs	r5, #0
 801903e:	260e      	movs	r6, #14
 8019040:	3c01      	subs	r4, #1
 8019042:	42a5      	cmp	r5, r4
 8019044:	dc0c      	bgt.n	8019060 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019046:	192a      	adds	r2, r5, r4
 8019048:	6903      	ldr	r3, [r0, #16]
 801904a:	1052      	asrs	r2, r2, #1
 801904c:	fb06 3302 	mla	r3, r6, r2, r3
 8019050:	889f      	ldrh	r7, [r3, #4]
 8019052:	428f      	cmp	r7, r1
 8019054:	d901      	bls.n	801905a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019056:	1e54      	subs	r4, r2, #1
 8019058:	e7f3      	b.n	8019042 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801905a:	d202      	bcs.n	8019062 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801905c:	1c55      	adds	r5, r2, #1
 801905e:	e7f0      	b.n	8019042 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019060:	2300      	movs	r3, #0
 8019062:	4618      	mov	r0, r3
 8019064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019066 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019068:	4605      	mov	r5, r0
 801906a:	4617      	mov	r7, r2
 801906c:	461e      	mov	r6, r3
 801906e:	f7ff ffe3 	bl	8019038 <_ZNK8touchgfx9ConstFont4findEt>
 8019072:	b9e0      	cbnz	r0, 80190ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019074:	b911      	cbnz	r1, 801907c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019076:	2400      	movs	r4, #0
 8019078:	4620      	mov	r0, r4
 801907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801907c:	290a      	cmp	r1, #10
 801907e:	d0fa      	beq.n	8019076 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019080:	682b      	ldr	r3, [r5, #0]
 8019082:	4628      	mov	r0, r5
 8019084:	691b      	ldr	r3, [r3, #16]
 8019086:	4798      	blx	r3
 8019088:	4601      	mov	r1, r0
 801908a:	4628      	mov	r0, r5
 801908c:	f7ff ffd4 	bl	8019038 <_ZNK8touchgfx9ConstFont4findEt>
 8019090:	4604      	mov	r4, r0
 8019092:	2800      	cmp	r0, #0
 8019094:	d0ef      	beq.n	8019076 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019096:	682b      	ldr	r3, [r5, #0]
 8019098:	4621      	mov	r1, r4
 801909a:	4628      	mov	r0, r5
 801909c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801909e:	4798      	blx	r3
 80190a0:	6038      	str	r0, [r7, #0]
 80190a2:	682b      	ldr	r3, [r5, #0]
 80190a4:	4628      	mov	r0, r5
 80190a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190a8:	4798      	blx	r3
 80190aa:	7030      	strb	r0, [r6, #0]
 80190ac:	e7e4      	b.n	8019078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80190ae:	4604      	mov	r4, r0
 80190b0:	e7f1      	b.n	8019096 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080190b2 <_ZN8touchgfx6memsetEPvhm>:
 80190b2:	4402      	add	r2, r0
 80190b4:	4290      	cmp	r0, r2
 80190b6:	d002      	beq.n	80190be <_ZN8touchgfx6memsetEPvhm+0xc>
 80190b8:	f800 1b01 	strb.w	r1, [r0], #1
 80190bc:	e7fa      	b.n	80190b4 <_ZN8touchgfx6memsetEPvhm+0x2>
 80190be:	4770      	bx	lr

080190c0 <_ZN8touchgfx3clzEl>:
 80190c0:	b1e8      	cbz	r0, 80190fe <_ZN8touchgfx3clzEl+0x3e>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	bfb8      	it	lt
 80190c6:	4240      	neglt	r0, r0
 80190c8:	0c03      	lsrs	r3, r0, #16
 80190ca:	041b      	lsls	r3, r3, #16
 80190cc:	b9ab      	cbnz	r3, 80190fa <_ZN8touchgfx3clzEl+0x3a>
 80190ce:	0400      	lsls	r0, r0, #16
 80190d0:	2310      	movs	r3, #16
 80190d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80190d6:	bf04      	itt	eq
 80190d8:	0200      	lsleq	r0, r0, #8
 80190da:	3308      	addeq	r3, #8
 80190dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80190e0:	bf04      	itt	eq
 80190e2:	0100      	lsleq	r0, r0, #4
 80190e4:	3304      	addeq	r3, #4
 80190e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80190ea:	bf04      	itt	eq
 80190ec:	0080      	lsleq	r0, r0, #2
 80190ee:	3302      	addeq	r3, #2
 80190f0:	2800      	cmp	r0, #0
 80190f2:	bfa8      	it	ge
 80190f4:	3301      	addge	r3, #1
 80190f6:	1e58      	subs	r0, r3, #1
 80190f8:	4770      	bx	lr
 80190fa:	2300      	movs	r3, #0
 80190fc:	e7e9      	b.n	80190d2 <_ZN8touchgfx3clzEl+0x12>
 80190fe:	201f      	movs	r0, #31
 8019100:	4770      	bx	lr

08019102 <_ZN8touchgfx6muldivElllRl>:
 8019102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019106:	4604      	mov	r4, r0
 8019108:	4698      	mov	r8, r3
 801910a:	2601      	movs	r6, #1
 801910c:	f7ff ffd8 	bl	80190c0 <_ZN8touchgfx3clzEl>
 8019110:	2c00      	cmp	r4, #0
 8019112:	fa04 f500 	lsl.w	r5, r4, r0
 8019116:	fa06 f600 	lsl.w	r6, r6, r0
 801911a:	bfba      	itte	lt
 801911c:	f04f 37ff 	movlt.w	r7, #4294967295
 8019120:	4264      	neglt	r4, r4
 8019122:	2701      	movge	r7, #1
 8019124:	2900      	cmp	r1, #0
 8019126:	f106 36ff 	add.w	r6, r6, #4294967295
 801912a:	bfbc      	itt	lt
 801912c:	4249      	neglt	r1, r1
 801912e:	427f      	neglt	r7, r7
 8019130:	2a00      	cmp	r2, #0
 8019132:	fa41 fc00 	asr.w	ip, r1, r0
 8019136:	ea01 0106 	and.w	r1, r1, r6
 801913a:	bfb8      	it	lt
 801913c:	427f      	neglt	r7, r7
 801913e:	fb04 f401 	mul.w	r4, r4, r1
 8019142:	fb95 f3f2 	sdiv	r3, r5, r2
 8019146:	fb02 5513 	mls	r5, r2, r3, r5
 801914a:	bfb8      	it	lt
 801914c:	4252      	neglt	r2, r2
 801914e:	fb94 f0f2 	sdiv	r0, r4, r2
 8019152:	fb02 4410 	mls	r4, r2, r0, r4
 8019156:	fb0c 4405 	mla	r4, ip, r5, r4
 801915a:	fb94 f1f2 	sdiv	r1, r4, r2
 801915e:	4408      	add	r0, r1
 8019160:	fb02 4211 	mls	r2, r2, r1, r4
 8019164:	fb0c 0003 	mla	r0, ip, r3, r0
 8019168:	f8c8 2000 	str.w	r2, [r8]
 801916c:	4378      	muls	r0, r7
 801916e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019172 <_ZN8touchgfx10ClickEventD1Ev>:
 8019172:	4770      	bx	lr

08019174 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019174:	2000      	movs	r0, #0
 8019176:	4770      	bx	lr

08019178 <_ZN8touchgfx9DragEventD1Ev>:
 8019178:	4770      	bx	lr

0801917a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801917a:	2001      	movs	r0, #1
 801917c:	4770      	bx	lr

0801917e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801917e:	2002      	movs	r0, #2
 8019180:	4770      	bx	lr

08019182 <_ZN8touchgfx12GestureEventD1Ev>:
 8019182:	4770      	bx	lr

08019184 <_ZN8touchgfx10ClickEventD0Ev>:
 8019184:	b510      	push	{r4, lr}
 8019186:	4604      	mov	r4, r0
 8019188:	210c      	movs	r1, #12
 801918a:	f00b fa14 	bl	80245b6 <_ZdlPvj>
 801918e:	4620      	mov	r0, r4
 8019190:	bd10      	pop	{r4, pc}

08019192 <_ZN8touchgfx9DragEventD0Ev>:
 8019192:	b510      	push	{r4, lr}
 8019194:	4604      	mov	r4, r0
 8019196:	2110      	movs	r1, #16
 8019198:	f00b fa0d 	bl	80245b6 <_ZdlPvj>
 801919c:	4620      	mov	r0, r4
 801919e:	bd10      	pop	{r4, pc}

080191a0 <_ZN8touchgfx12GestureEventD0Ev>:
 80191a0:	b510      	push	{r4, lr}
 80191a2:	4604      	mov	r4, r0
 80191a4:	210c      	movs	r1, #12
 80191a6:	f00b fa06 	bl	80245b6 <_ZdlPvj>
 80191aa:	4620      	mov	r0, r4
 80191ac:	bd10      	pop	{r4, pc}
	...

080191b0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80191b0:	b530      	push	{r4, r5, lr}
 80191b2:	460d      	mov	r5, r1
 80191b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80191b6:	b087      	sub	sp, #28
 80191b8:	4604      	mov	r4, r0
 80191ba:	b301      	cbz	r1, 80191fe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80191bc:	a801      	add	r0, sp, #4
 80191be:	f7ff ff06 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191c2:	892a      	ldrh	r2, [r5, #8]
 80191c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80191c8:	7928      	ldrb	r0, [r5, #4]
 80191ca:	1ad2      	subs	r2, r2, r3
 80191cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80191ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80191d2:	441a      	add	r2, r3
 80191d4:	896b      	ldrh	r3, [r5, #10]
 80191d6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80191da:	f88d 0010 	strb.w	r0, [sp, #16]
 80191de:	1b5b      	subs	r3, r3, r5
 80191e0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80191e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80191e4:	442b      	add	r3, r5
 80191e6:	4d07      	ldr	r5, [pc, #28]	; (8019204 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80191e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80191ec:	a903      	add	r1, sp, #12
 80191ee:	9503      	str	r5, [sp, #12]
 80191f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80191f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191f8:	6803      	ldr	r3, [r0, #0]
 80191fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191fc:	4798      	blx	r3
 80191fe:	b007      	add	sp, #28
 8019200:	bd30      	pop	{r4, r5, pc}
 8019202:	bf00      	nop
 8019204:	08028178 	.word	0x08028178

08019208 <_ZNK8touchgfx4Rect9intersectEss>:
 8019208:	b510      	push	{r4, lr}
 801920a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801920e:	428b      	cmp	r3, r1
 8019210:	dc10      	bgt.n	8019234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019212:	8884      	ldrh	r4, [r0, #4]
 8019214:	4423      	add	r3, r4
 8019216:	b21b      	sxth	r3, r3
 8019218:	4299      	cmp	r1, r3
 801921a:	da0b      	bge.n	8019234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801921c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019220:	4293      	cmp	r3, r2
 8019222:	dc07      	bgt.n	8019234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019224:	88c0      	ldrh	r0, [r0, #6]
 8019226:	4418      	add	r0, r3
 8019228:	b200      	sxth	r0, r0
 801922a:	4282      	cmp	r2, r0
 801922c:	bfac      	ite	ge
 801922e:	2000      	movge	r0, #0
 8019230:	2001      	movlt	r0, #1
 8019232:	bd10      	pop	{r4, pc}
 8019234:	2000      	movs	r0, #0
 8019236:	e7fc      	b.n	8019232 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801923a:	460c      	mov	r4, r1
 801923c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801923e:	b089      	sub	sp, #36	; 0x24
 8019240:	4605      	mov	r5, r0
 8019242:	2900      	cmp	r1, #0
 8019244:	d054      	beq.n	80192f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019246:	4668      	mov	r0, sp
 8019248:	f7ff fec1 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801924c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801924e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019250:	4668      	mov	r0, sp
 8019252:	8922      	ldrh	r2, [r4, #8]
 8019254:	88e1      	ldrh	r1, [r4, #6]
 8019256:	443a      	add	r2, r7
 8019258:	4431      	add	r1, r6
 801925a:	b212      	sxth	r2, r2
 801925c:	b209      	sxth	r1, r1
 801925e:	f7ff ffd3 	bl	8019208 <_ZNK8touchgfx4Rect9intersectEss>
 8019262:	b1d0      	cbz	r0, 801929a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019264:	89a2      	ldrh	r2, [r4, #12]
 8019266:	4668      	mov	r0, sp
 8019268:	8961      	ldrh	r1, [r4, #10]
 801926a:	443a      	add	r2, r7
 801926c:	4431      	add	r1, r6
 801926e:	b212      	sxth	r2, r2
 8019270:	b209      	sxth	r1, r1
 8019272:	f7ff ffc9 	bl	8019208 <_ZNK8touchgfx4Rect9intersectEss>
 8019276:	4603      	mov	r3, r0
 8019278:	b978      	cbnz	r0, 801929a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801927a:	4a1e      	ldr	r2, [pc, #120]	; (80192f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801927c:	a904      	add	r1, sp, #16
 801927e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019280:	9204      	str	r2, [sp, #16]
 8019282:	2202      	movs	r2, #2
 8019284:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019288:	f88d 2014 	strb.w	r2, [sp, #20]
 801928c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019290:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019294:	6803      	ldr	r3, [r0, #0]
 8019296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019298:	4798      	blx	r3
 801929a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801929c:	a802      	add	r0, sp, #8
 801929e:	f7ff fe96 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80192a6:	88e0      	ldrh	r0, [r4, #6]
 80192a8:	8961      	ldrh	r1, [r4, #10]
 80192aa:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80192ae:	1a80      	subs	r0, r0, r2
 80192b0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80192b4:	1a89      	subs	r1, r1, r2
 80192b6:	8923      	ldrh	r3, [r4, #8]
 80192b8:	4460      	add	r0, ip
 80192ba:	89a2      	ldrh	r2, [r4, #12]
 80192bc:	4461      	add	r1, ip
 80192be:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80192c0:	eba3 030e 	sub.w	r3, r3, lr
 80192c4:	eba2 020e 	sub.w	r2, r2, lr
 80192c8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80192cc:	7927      	ldrb	r7, [r4, #4]
 80192ce:	4433      	add	r3, r6
 80192d0:	4432      	add	r2, r6
 80192d2:	4c09      	ldr	r4, [pc, #36]	; (80192f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80192d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80192d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 80192da:	a904      	add	r1, sp, #16
 80192dc:	9404      	str	r4, [sp, #16]
 80192de:	f88d 7014 	strb.w	r7, [sp, #20]
 80192e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80192e6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80192ea:	6803      	ldr	r3, [r0, #0]
 80192ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80192ee:	4798      	blx	r3
 80192f0:	b009      	add	sp, #36	; 0x24
 80192f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192f4:	08028150 	.word	0x08028150
 80192f8:	08028164 	.word	0x08028164

080192fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80192fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019300:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019304:	b0a1      	sub	sp, #132	; 0x84
 8019306:	4604      	mov	r4, r0
 8019308:	460d      	mov	r5, r1
 801930a:	790b      	ldrb	r3, [r1, #4]
 801930c:	f1b9 0f00 	cmp.w	r9, #0
 8019310:	d00f      	beq.n	8019332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019312:	2b00      	cmp	r3, #0
 8019314:	f040 80a2 	bne.w	801945c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019318:	b021      	add	sp, #132	; 0x84
 801931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019322:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019326:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801932a:	1d20      	adds	r0, r4, #4
 801932c:	f7fb ff5c 	bl	80151e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019330:	e094      	b.n	801945c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019332:	2b00      	cmp	r3, #0
 8019334:	d1f0      	bne.n	8019318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019336:	4b5f      	ldr	r3, [pc, #380]	; (80194b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801933e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019342:	f1ba 0f03 	cmp.w	sl, #3
 8019346:	ddea      	ble.n	801931e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019348:	f1ba 0f0c 	cmp.w	sl, #12
 801934c:	f04f 0303 	mov.w	r3, #3
 8019350:	f04f 0600 	mov.w	r6, #0
 8019354:	4958      	ldr	r1, [pc, #352]	; (80194b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019356:	bfd8      	it	le
 8019358:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801935c:	960a      	str	r6, [sp, #40]	; 0x28
 801935e:	bfd8      	it	le
 8019360:	fb92 f3f3 	sdivle	r3, r2, r3
 8019364:	9301      	str	r3, [sp, #4]
 8019366:	4b55      	ldr	r3, [pc, #340]	; (80194bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019368:	f9b3 2000 	ldrsh.w	r2, [r3]
 801936c:	4b54      	ldr	r3, [pc, #336]	; (80194c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801936e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019372:	2248      	movs	r2, #72	; 0x48
 8019374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019378:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801937c:	ab0e      	add	r3, sp, #56	; 0x38
 801937e:	4618      	mov	r0, r3
 8019380:	f00b f9c2 	bl	8024708 <memcpy>
 8019384:	f04f 32ff 	mov.w	r2, #4294967295
 8019388:	f8cd a008 	str.w	sl, [sp, #8]
 801938c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019390:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019394:	46b3      	mov	fp, r6
 8019396:	fb93 f3f2 	sdiv	r3, r3, r2
 801939a:	b29b      	uxth	r3, r3
 801939c:	9303      	str	r3, [sp, #12]
 801939e:	2300      	movs	r3, #0
 80193a0:	9a03      	ldr	r2, [sp, #12]
 80193a2:	88ef      	ldrh	r7, [r5, #6]
 80193a4:	a80a      	add	r0, sp, #40	; 0x28
 80193a6:	9309      	str	r3, [sp, #36]	; 0x24
 80193a8:	9b07      	ldr	r3, [sp, #28]
 80193aa:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80193ae:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80193b2:	fb13 f302 	smulbb	r3, r3, r2
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	9304      	str	r3, [sp, #16]
 80193ba:	9b07      	ldr	r3, [sp, #28]
 80193bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	fb13 f302 	smulbb	r3, r3, r2
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	9305      	str	r3, [sp, #20]
 80193ca:	9b04      	ldr	r3, [sp, #16]
 80193cc:	441f      	add	r7, r3
 80193ce:	9b05      	ldr	r3, [sp, #20]
 80193d0:	4498      	add	r8, r3
 80193d2:	b23f      	sxth	r7, r7
 80193d4:	fa0f f888 	sxth.w	r8, r8
 80193d8:	4639      	mov	r1, r7
 80193da:	4642      	mov	r2, r8
 80193dc:	f7ff ff14 	bl	8019208 <_ZNK8touchgfx4Rect9intersectEss>
 80193e0:	b380      	cbz	r0, 8019444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193e2:	4639      	mov	r1, r7
 80193e4:	ab09      	add	r3, sp, #36	; 0x24
 80193e6:	4642      	mov	r2, r8
 80193e8:	1d20      	adds	r0, r4, #4
 80193ea:	f7fb fefd 	bl	80151e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80193ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80193f0:	b341      	cbz	r1, 8019444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193f2:	4549      	cmp	r1, r9
 80193f4:	d026      	beq.n	8019444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80193f6:	a80c      	add	r0, sp, #48	; 0x30
 80193f8:	f7ff fde9 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193fc:	2002      	movs	r0, #2
 80193fe:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019402:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019406:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801940a:	fb92 f2f0 	sdiv	r2, r2, r0
 801940e:	440a      	add	r2, r1
 8019410:	1a99      	subs	r1, r3, r2
 8019412:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019416:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801941a:	fb93 f3f0 	sdiv	r3, r3, r0
 801941e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019422:	4403      	add	r3, r0
 8019424:	1ad3      	subs	r3, r2, r3
 8019426:	9a06      	ldr	r2, [sp, #24]
 8019428:	435b      	muls	r3, r3
 801942a:	fb01 3301 	mla	r3, r1, r1, r3
 801942e:	4293      	cmp	r3, r2
 8019430:	d208      	bcs.n	8019444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019432:	9a04      	ldr	r2, [sp, #16]
 8019434:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019438:	86a2      	strh	r2, [r4, #52]	; 0x34
 801943a:	9a05      	ldr	r2, [sp, #20]
 801943c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019440:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019442:	9306      	str	r3, [sp, #24]
 8019444:	f10b 0b02 	add.w	fp, fp, #2
 8019448:	f1bb 0f08 	cmp.w	fp, #8
 801944c:	dda7      	ble.n	801939e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801944e:	9b02      	ldr	r3, [sp, #8]
 8019450:	3601      	adds	r6, #1
 8019452:	4453      	add	r3, sl
 8019454:	9302      	str	r3, [sp, #8]
 8019456:	9b01      	ldr	r3, [sp, #4]
 8019458:	42b3      	cmp	r3, r6
 801945a:	d199      	bne.n	8019390 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801945c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801945e:	2900      	cmp	r1, #0
 8019460:	f43f af5a 	beq.w	8019318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019464:	a80c      	add	r0, sp, #48	; 0x30
 8019466:	2600      	movs	r6, #0
 8019468:	f7ff fdb1 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801946c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019470:	88ea      	ldrh	r2, [r5, #6]
 8019472:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019476:	1ad2      	subs	r2, r2, r3
 8019478:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801947a:	7929      	ldrb	r1, [r5, #4]
 801947c:	441a      	add	r2, r3
 801947e:	892b      	ldrh	r3, [r5, #8]
 8019480:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019484:	a90e      	add	r1, sp, #56	; 0x38
 8019486:	1a1b      	subs	r3, r3, r0
 8019488:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801948a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801948e:	4403      	add	r3, r0
 8019490:	480c      	ldr	r0, [pc, #48]	; (80194c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019492:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019496:	900e      	str	r0, [sp, #56]	; 0x38
 8019498:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801949a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801949e:	6803      	ldr	r3, [r0, #0]
 80194a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194a2:	4798      	blx	r3
 80194a4:	792b      	ldrb	r3, [r5, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	f43f af36 	beq.w	8019318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80194ac:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80194b0:	e732      	b.n	8019318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80194b2:	bf00      	nop
 80194b4:	2000bc70 	.word	0x2000bc70
 80194b8:	08025d30 	.word	0x08025d30
 80194bc:	2000bc64 	.word	0x2000bc64
 80194c0:	2000bc66 	.word	0x2000bc66
 80194c4:	08028150 	.word	0x08028150

080194c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80194c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194ca:	4604      	mov	r4, r0
 80194cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80194d0:	3201      	adds	r2, #1
 80194d2:	d112      	bne.n	80194fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80194d4:	2500      	movs	r5, #0
 80194d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80194da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80194de:	6803      	ldr	r3, [r0, #0]
 80194e0:	9500      	str	r5, [sp, #0]
 80194e2:	466d      	mov	r5, sp
 80194e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80194e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80194ec:	4629      	mov	r1, r5
 80194ee:	6a1b      	ldr	r3, [r3, #32]
 80194f0:	4798      	blx	r3
 80194f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80194f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80194fa:	4620      	mov	r0, r4
 80194fc:	b003      	add	sp, #12
 80194fe:	bd30      	pop	{r4, r5, pc}

08019500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019500:	b513      	push	{r0, r1, r4, lr}
 8019502:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019506:	4604      	mov	r4, r0
 8019508:	3301      	adds	r3, #1
 801950a:	d109      	bne.n	8019520 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801950c:	4601      	mov	r1, r0
 801950e:	4668      	mov	r0, sp
 8019510:	f7ff fd5d 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019514:	f8bd 3000 	ldrh.w	r3, [sp]
 8019518:	8423      	strh	r3, [r4, #32]
 801951a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801951e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019520:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019524:	b002      	add	sp, #8
 8019526:	bd10      	pop	{r4, pc}

08019528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019528:	b513      	push	{r0, r1, r4, lr}
 801952a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801952e:	4604      	mov	r4, r0
 8019530:	3301      	adds	r3, #1
 8019532:	d109      	bne.n	8019548 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019534:	4601      	mov	r1, r0
 8019536:	4668      	mov	r0, sp
 8019538:	f7ff fd49 	bl	8018fce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801953c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019540:	8423      	strh	r3, [r4, #32]
 8019542:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019546:	8463      	strh	r3, [r4, #34]	; 0x22
 8019548:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801954c:	b002      	add	sp, #8
 801954e:	bd10      	pop	{r4, pc}

08019550 <_ZN8touchgfx6ScreenC1Ev>:
 8019550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019552:	4605      	mov	r5, r0
 8019554:	4b17      	ldr	r3, [pc, #92]	; (80195b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019556:	2200      	movs	r2, #0
 8019558:	4917      	ldr	r1, [pc, #92]	; (80195b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801955a:	f845 3b04 	str.w	r3, [r5], #4
 801955e:	2301      	movs	r3, #1
 8019560:	8102      	strh	r2, [r0, #8]
 8019562:	4604      	mov	r4, r0
 8019564:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019568:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801956c:	4b13      	ldr	r3, [pc, #76]	; (80195bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801956e:	8142      	strh	r2, [r0, #10]
 8019570:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019574:	4b12      	ldr	r3, [pc, #72]	; (80195c0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019576:	8182      	strh	r2, [r0, #12]
 8019578:	81c2      	strh	r2, [r0, #14]
 801957a:	8202      	strh	r2, [r0, #16]
 801957c:	8242      	strh	r2, [r0, #18]
 801957e:	8282      	strh	r2, [r0, #20]
 8019580:	82c2      	strh	r2, [r0, #22]
 8019582:	6202      	str	r2, [r0, #32]
 8019584:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019588:	6342      	str	r2, [r0, #52]	; 0x34
 801958a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801958e:	6041      	str	r1, [r0, #4]
 8019590:	4611      	mov	r1, r2
 8019592:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019596:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801959a:	4628      	mov	r0, r5
 801959c:	f7f6 fe0b 	bl	80101b6 <_ZN8touchgfx8Drawable5setXYEss>
 80195a0:	4639      	mov	r1, r7
 80195a2:	4628      	mov	r0, r5
 80195a4:	f7f6 fe25 	bl	80101f2 <_ZN8touchgfx8Drawable8setWidthEs>
 80195a8:	4628      	mov	r0, r5
 80195aa:	4631      	mov	r1, r6
 80195ac:	f7f6 fe30 	bl	8010210 <_ZN8touchgfx8Drawable9setHeightEs>
 80195b0:	4620      	mov	r0, r4
 80195b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b4:	0802818c 	.word	0x0802818c
 80195b8:	08026e60 	.word	0x08026e60
 80195bc:	2000bc64 	.word	0x2000bc64
 80195c0:	2000bc66 	.word	0x2000bc66

080195c4 <_ZN8touchgfx6Screen4drawEv>:
 80195c4:	4b09      	ldr	r3, [pc, #36]	; (80195ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 80195c6:	b507      	push	{r0, r1, r2, lr}
 80195c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80195cc:	2100      	movs	r1, #0
 80195ce:	4b08      	ldr	r3, [pc, #32]	; (80195f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80195d0:	9100      	str	r1, [sp, #0]
 80195d2:	4669      	mov	r1, sp
 80195d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80195d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80195dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80195e0:	6803      	ldr	r3, [r0, #0]
 80195e2:	689b      	ldr	r3, [r3, #8]
 80195e4:	4798      	blx	r3
 80195e6:	b003      	add	sp, #12
 80195e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80195ec:	2000bc64 	.word	0x2000bc64
 80195f0:	2000bc66 	.word	0x2000bc66

080195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80195f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80195fc:	b089      	sub	sp, #36	; 0x24
 80195fe:	4680      	mov	r8, r0
 8019600:	460c      	mov	r4, r1
 8019602:	4615      	mov	r5, r2
 8019604:	b16b      	cbz	r3, 8019622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019606:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801960a:	b153      	cbz	r3, 8019622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801960c:	4628      	mov	r0, r5
 801960e:	f7ff ff5b 	bl	80194c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019612:	4621      	mov	r1, r4
 8019614:	f7fe ffc2 	bl	801859c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019618:	69eb      	ldr	r3, [r5, #28]
 801961a:	b928      	cbnz	r0, 8019628 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801961c:	461d      	mov	r5, r3
 801961e:	2b00      	cmp	r3, #0
 8019620:	d1f4      	bne.n	801960c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019622:	b009      	add	sp, #36	; 0x24
 8019624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019628:	ae04      	add	r6, sp, #16
 801962a:	2b00      	cmp	r3, #0
 801962c:	d051      	beq.n	80196d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801962e:	682b      	ldr	r3, [r5, #0]
 8019630:	4629      	mov	r1, r5
 8019632:	a802      	add	r0, sp, #8
 8019634:	68db      	ldr	r3, [r3, #12]
 8019636:	4798      	blx	r3
 8019638:	4628      	mov	r0, r5
 801963a:	f7ff ff61 	bl	8019500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801963e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019642:	4407      	add	r7, r0
 8019644:	4628      	mov	r0, r5
 8019646:	f7ff ff6f 	bl	8019528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801964a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801964e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019652:	b23f      	sxth	r7, r7
 8019654:	4418      	add	r0, r3
 8019656:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801965a:	4621      	mov	r1, r4
 801965c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019660:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019664:	4630      	mov	r0, r6
 8019666:	f8ad 3016 	strh.w	r3, [sp, #22]
 801966a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801966e:	f7fb fe6d 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 8019672:	4628      	mov	r0, r5
 8019674:	f7ff ff28 	bl	80194c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019678:	ab06      	add	r3, sp, #24
 801967a:	4602      	mov	r2, r0
 801967c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019680:	e883 0003 	stmia.w	r3, {r0, r1}
 8019684:	4611      	mov	r1, r2
 8019686:	4618      	mov	r0, r3
 8019688:	f7fb fe60 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 801968c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019690:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019694:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019698:	4299      	cmp	r1, r3
 801969a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801969e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80196a2:	d10b      	bne.n	80196bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80196a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80196a8:	4552      	cmp	r2, sl
 80196aa:	d107      	bne.n	80196bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80196ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80196b0:	455a      	cmp	r2, fp
 80196b2:	d103      	bne.n	80196bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80196b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80196b8:	454a      	cmp	r2, r9
 80196ba:	d00a      	beq.n	80196d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80196bc:	f1bb 0f00 	cmp.w	fp, #0
 80196c0:	d002      	beq.n	80196c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 80196c2:	f1b9 0f00 	cmp.w	r9, #0
 80196c6:	d12e      	bne.n	8019726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 80196c8:	69ea      	ldr	r2, [r5, #28]
 80196ca:	4621      	mov	r1, r4
 80196cc:	4640      	mov	r0, r8
 80196ce:	f7ff ff91 	bl	80195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196d2:	4628      	mov	r0, r5
 80196d4:	f7ff fef8 	bl	80194c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80196d8:	6861      	ldr	r1, [r4, #4]
 80196da:	4602      	mov	r2, r0
 80196dc:	4633      	mov	r3, r6
 80196de:	6820      	ldr	r0, [r4, #0]
 80196e0:	c303      	stmia	r3!, {r0, r1}
 80196e2:	4611      	mov	r1, r2
 80196e4:	4630      	mov	r0, r6
 80196e6:	f7fb fe31 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 80196ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d097      	beq.n	8019622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80196f2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d093      	beq.n	8019622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80196fa:	4628      	mov	r0, r5
 80196fc:	f7ff ff00 	bl	8019500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019700:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019704:	1a18      	subs	r0, r3, r0
 8019706:	f8ad 0010 	strh.w	r0, [sp, #16]
 801970a:	4628      	mov	r0, r5
 801970c:	f7ff ff0c 	bl	8019528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019710:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019714:	4631      	mov	r1, r6
 8019716:	1a18      	subs	r0, r3, r0
 8019718:	f8ad 0012 	strh.w	r0, [sp, #18]
 801971c:	4628      	mov	r0, r5
 801971e:	682b      	ldr	r3, [r5, #0]
 8019720:	689b      	ldr	r3, [r3, #8]
 8019722:	4798      	blx	r3
 8019724:	e77d      	b.n	8019622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019726:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801972a:	fa1f f08a 	uxth.w	r0, sl
 801972e:	4552      	cmp	r2, sl
 8019730:	9000      	str	r0, [sp, #0]
 8019732:	da12      	bge.n	801975a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019734:	9301      	str	r3, [sp, #4]
 8019736:	9b00      	ldr	r3, [sp, #0]
 8019738:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801973c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019740:	1a9a      	subs	r2, r3, r2
 8019742:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019746:	4631      	mov	r1, r6
 8019748:	f8ad 0014 	strh.w	r0, [sp, #20]
 801974c:	4640      	mov	r0, r8
 801974e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019752:	69ea      	ldr	r2, [r5, #28]
 8019754:	f7ff ff4e 	bl	80195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019758:	9b01      	ldr	r3, [sp, #4]
 801975a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801975e:	b29f      	uxth	r7, r3
 8019760:	429a      	cmp	r2, r3
 8019762:	da0d      	bge.n	8019780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019764:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019768:	1aba      	subs	r2, r7, r2
 801976a:	f8ad a012 	strh.w	sl, [sp, #18]
 801976e:	4631      	mov	r1, r6
 8019770:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019774:	4640      	mov	r0, r8
 8019776:	f8ad 9016 	strh.w	r9, [sp, #22]
 801977a:	69ea      	ldr	r2, [r5, #28]
 801977c:	f7ff ff3a 	bl	80195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019780:	8822      	ldrh	r2, [r4, #0]
 8019782:	445f      	add	r7, fp
 8019784:	88a3      	ldrh	r3, [r4, #4]
 8019786:	b2bf      	uxth	r7, r7
 8019788:	4413      	add	r3, r2
 801978a:	b23a      	sxth	r2, r7
 801978c:	b29b      	uxth	r3, r3
 801978e:	b219      	sxth	r1, r3
 8019790:	4291      	cmp	r1, r2
 8019792:	dd0d      	ble.n	80197b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019794:	1bdb      	subs	r3, r3, r7
 8019796:	f8ad 2010 	strh.w	r2, [sp, #16]
 801979a:	f8ad a012 	strh.w	sl, [sp, #18]
 801979e:	4631      	mov	r1, r6
 80197a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80197a4:	4640      	mov	r0, r8
 80197a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80197aa:	69ea      	ldr	r2, [r5, #28]
 80197ac:	f7ff ff22 	bl	80195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80197b0:	88e2      	ldrh	r2, [r4, #6]
 80197b2:	8863      	ldrh	r3, [r4, #2]
 80197b4:	4413      	add	r3, r2
 80197b6:	9a00      	ldr	r2, [sp, #0]
 80197b8:	444a      	add	r2, r9
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	fa1f f982 	uxth.w	r9, r2
 80197c0:	b219      	sxth	r1, r3
 80197c2:	fa0f f289 	sxth.w	r2, r9
 80197c6:	428a      	cmp	r2, r1
 80197c8:	da83      	bge.n	80196d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80197ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80197ce:	eba3 0309 	sub.w	r3, r3, r9
 80197d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80197d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80197da:	4631      	mov	r1, r6
 80197dc:	f8ad 0010 	strh.w	r0, [sp, #16]
 80197e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80197e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80197e8:	69ea      	ldr	r2, [r5, #28]
 80197ea:	e76f      	b.n	80196cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

080197ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80197ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197ee:	2300      	movs	r3, #0
 80197f0:	aa02      	add	r2, sp, #8
 80197f2:	4604      	mov	r4, r0
 80197f4:	3004      	adds	r0, #4
 80197f6:	f842 3d04 	str.w	r3, [r2, #-4]!
 80197fa:	460d      	mov	r5, r1
 80197fc:	f7fb fe7d 	bl	80154fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019800:	9a01      	ldr	r2, [sp, #4]
 8019802:	b11a      	cbz	r2, 801980c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019804:	4629      	mov	r1, r5
 8019806:	4620      	mov	r0, r4
 8019808:	f7ff fef4 	bl	80195f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801980c:	b003      	add	sp, #12
 801980e:	bd30      	pop	{r4, r5, pc}

08019810 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019812:	4602      	mov	r2, r0
 8019814:	4604      	mov	r4, r0
 8019816:	460d      	mov	r5, r1
 8019818:	466b      	mov	r3, sp
 801981a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801981e:	6851      	ldr	r1, [r2, #4]
 8019820:	c303      	stmia	r3!, {r0, r1}
 8019822:	4629      	mov	r1, r5
 8019824:	4668      	mov	r0, sp
 8019826:	f7fb fd91 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 801982a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801982e:	4669      	mov	r1, sp
 8019830:	b123      	cbz	r3, 801983c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019832:	4620      	mov	r0, r4
 8019834:	f7ff ffda 	bl	80197ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019838:	b003      	add	sp, #12
 801983a:	bd30      	pop	{r4, r5, pc}
 801983c:	1d20      	adds	r0, r4, #4
 801983e:	f7fb fe23 	bl	8015488 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019842:	e7f9      	b.n	8019838 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019844:	460b      	mov	r3, r1
 8019846:	680a      	ldr	r2, [r1, #0]
 8019848:	1d01      	adds	r1, r0, #4
 801984a:	6952      	ldr	r2, [r2, #20]
 801984c:	4618      	mov	r0, r3
 801984e:	4710      	bx	r2

08019850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8019850:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019854:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8019858:	4b03      	ldr	r3, [pc, #12]	; (8019868 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801985a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801985e:	bf08      	it	eq
 8019860:	2300      	moveq	r3, #0
 8019862:	4308      	orrs	r0, r1
 8019864:	4318      	orrs	r0, r3
 8019866:	4770      	bx	lr
 8019868:	fffffe00 	.word	0xfffffe00

0801986c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801986c:	7b43      	ldrb	r3, [r0, #13]
 801986e:	7201      	strb	r1, [r0, #8]
 8019870:	b289      	uxth	r1, r1
 8019872:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8019876:	05ca      	lsls	r2, r1, #23
 8019878:	bf48      	it	mi
 801987a:	f043 0320 	orrmi.w	r3, r3, #32
 801987e:	7343      	strb	r3, [r0, #13]
 8019880:	058b      	lsls	r3, r1, #22
 8019882:	bf42      	ittt	mi
 8019884:	7b43      	ldrbmi	r3, [r0, #13]
 8019886:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801988a:	7343      	strbmi	r3, [r0, #13]
 801988c:	4770      	bx	lr

0801988e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801988e:	b530      	push	{r4, r5, lr}
 8019890:	2500      	movs	r5, #0
 8019892:	2401      	movs	r4, #1
 8019894:	6843      	ldr	r3, [r0, #4]
 8019896:	b913      	cbnz	r3, 801989e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019898:	6803      	ldr	r3, [r0, #0]
 801989a:	b1f3      	cbz	r3, 80198da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801989c:	6043      	str	r3, [r0, #4]
 801989e:	7c03      	ldrb	r3, [r0, #16]
 80198a0:	b143      	cbz	r3, 80198b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80198a2:	68c3      	ldr	r3, [r0, #12]
 80198a4:	b12b      	cbz	r3, 80198b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80198a6:	881a      	ldrh	r2, [r3, #0]
 80198a8:	b11a      	cbz	r2, 80198b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80198aa:	1c9a      	adds	r2, r3, #2
 80198ac:	60c2      	str	r2, [r0, #12]
 80198ae:	8818      	ldrh	r0, [r3, #0]
 80198b0:	bd30      	pop	{r4, r5, pc}
 80198b2:	7405      	strb	r5, [r0, #16]
 80198b4:	6843      	ldr	r3, [r0, #4]
 80198b6:	8819      	ldrh	r1, [r3, #0]
 80198b8:	b179      	cbz	r1, 80198da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80198ba:	1c9a      	adds	r2, r3, #2
 80198bc:	2902      	cmp	r1, #2
 80198be:	6042      	str	r2, [r0, #4]
 80198c0:	d1f5      	bne.n	80198ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80198c2:	6883      	ldr	r3, [r0, #8]
 80198c4:	1d1a      	adds	r2, r3, #4
 80198c6:	6082      	str	r2, [r0, #8]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	60c3      	str	r3, [r0, #12]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d0e1      	beq.n	8019894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198d0:	881b      	ldrh	r3, [r3, #0]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d0de      	beq.n	8019894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198d6:	7404      	strb	r4, [r0, #16]
 80198d8:	e7dc      	b.n	8019894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80198da:	2000      	movs	r0, #0
 80198dc:	e7e8      	b.n	80198b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080198de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80198de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198e0:	4605      	mov	r5, r0
 80198e2:	4608      	mov	r0, r1
 80198e4:	b1f1      	cbz	r1, 8019924 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80198e6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80198ea:	460b      	mov	r3, r1
 80198ec:	f101 0708 	add.w	r7, r1, #8
 80198f0:	4622      	mov	r2, r4
 80198f2:	6818      	ldr	r0, [r3, #0]
 80198f4:	3308      	adds	r3, #8
 80198f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80198fa:	4626      	mov	r6, r4
 80198fc:	42bb      	cmp	r3, r7
 80198fe:	c603      	stmia	r6!, {r0, r1}
 8019900:	4634      	mov	r4, r6
 8019902:	d1f6      	bne.n	80198f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019904:	6818      	ldr	r0, [r3, #0]
 8019906:	6030      	str	r0, [r6, #0]
 8019908:	4610      	mov	r0, r2
 801990a:	889b      	ldrh	r3, [r3, #4]
 801990c:	80b3      	strh	r3, [r6, #4]
 801990e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8019912:	015b      	lsls	r3, r3, #5
 8019914:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019918:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801991c:	430b      	orrs	r3, r1
 801991e:	425b      	negs	r3, r3
 8019920:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019926:	b538      	push	{r3, r4, r5, lr}
 8019928:	460c      	mov	r4, r1
 801992a:	6811      	ldr	r1, [r2, #0]
 801992c:	4610      	mov	r0, r2
 801992e:	68cd      	ldr	r5, [r1, #12]
 8019930:	4619      	mov	r1, r3
 8019932:	47a8      	blx	r5
 8019934:	2800      	cmp	r0, #0
 8019936:	bf08      	it	eq
 8019938:	4620      	moveq	r0, r4
 801993a:	bd38      	pop	{r3, r4, r5, pc}

0801993c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801993c:	b570      	push	{r4, r5, r6, lr}
 801993e:	8810      	ldrh	r0, [r2, #0]
 8019940:	4298      	cmp	r0, r3
 8019942:	d817      	bhi.n	8019974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019944:	1e48      	subs	r0, r1, #1
 8019946:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801994a:	4298      	cmp	r0, r3
 801994c:	d312      	bcc.n	8019974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801994e:	2400      	movs	r4, #0
 8019950:	428c      	cmp	r4, r1
 8019952:	d20f      	bcs.n	8019974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019954:	1860      	adds	r0, r4, r1
 8019956:	1040      	asrs	r0, r0, #1
 8019958:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801995c:	0085      	lsls	r5, r0, #2
 801995e:	42b3      	cmp	r3, r6
 8019960:	d902      	bls.n	8019968 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019962:	3001      	adds	r0, #1
 8019964:	b284      	uxth	r4, r0
 8019966:	e7f3      	b.n	8019950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019968:	d102      	bne.n	8019970 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801996a:	442a      	add	r2, r5
 801996c:	8850      	ldrh	r0, [r2, #2]
 801996e:	bd70      	pop	{r4, r5, r6, pc}
 8019970:	b281      	uxth	r1, r0
 8019972:	e7ed      	b.n	8019950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019974:	2000      	movs	r0, #0
 8019976:	e7fa      	b.n	801996e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

08019978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8019978:	b510      	push	{r4, lr}
 801997a:	8ac3      	ldrh	r3, [r0, #22]
 801997c:	428b      	cmp	r3, r1
 801997e:	d805      	bhi.n	801998c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8019980:	4b07      	ldr	r3, [pc, #28]	; (80199a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8019982:	21fd      	movs	r1, #253	; 0xfd
 8019984:	4a07      	ldr	r2, [pc, #28]	; (80199a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8019986:	4808      	ldr	r0, [pc, #32]	; (80199a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8019988:	f00a fe40 	bl	802460c <__assert_func>
 801998c:	8a83      	ldrh	r3, [r0, #20]
 801998e:	240a      	movs	r4, #10
 8019990:	4419      	add	r1, r3
 8019992:	fbb1 f3f4 	udiv	r3, r1, r4
 8019996:	fb04 1113 	mls	r1, r4, r3, r1
 801999a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801999e:	bd10      	pop	{r4, pc}
 80199a0:	080281d9 	.word	0x080281d9
 80199a4:	08028608 	.word	0x08028608
 80199a8:	080281e7 	.word	0x080281e7

080199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 80199ac:	b508      	push	{r3, lr}
 80199ae:	8ac3      	ldrh	r3, [r0, #22]
 80199b0:	428b      	cmp	r3, r1
 80199b2:	d805      	bhi.n	80199c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 80199b4:	4b07      	ldr	r3, [pc, #28]	; (80199d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 80199b6:	21d3      	movs	r1, #211	; 0xd3
 80199b8:	4a07      	ldr	r2, [pc, #28]	; (80199d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 80199ba:	4808      	ldr	r0, [pc, #32]	; (80199dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 80199bc:	f00a fe26 	bl	802460c <__assert_func>
 80199c0:	8a83      	ldrh	r3, [r0, #20]
 80199c2:	220a      	movs	r2, #10
 80199c4:	4419      	add	r1, r3
 80199c6:	fbb1 f3f2 	udiv	r3, r1, r2
 80199ca:	fb02 1113 	mls	r1, r2, r3, r1
 80199ce:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80199d2:	bd08      	pop	{r3, pc}
 80199d4:	080281d9 	.word	0x080281d9
 80199d8:	08028358 	.word	0x08028358
 80199dc:	080281e7 	.word	0x080281e7

080199e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80199e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e4:	4604      	mov	r4, r0
 80199e6:	4688      	mov	r8, r1
 80199e8:	4615      	mov	r5, r2
 80199ea:	b94a      	cbnz	r2, 8019a00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 80199ec:	4691      	mov	r9, r2
 80199ee:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80199f2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80199f6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80199fa:	4648      	mov	r0, r9
 80199fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a00:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8019a04:	8892      	ldrh	r2, [r2, #4]
 8019a06:	462b      	mov	r3, r5
 8019a08:	f105 0c08 	add.w	ip, r5, #8
 8019a0c:	46b3      	mov	fp, r6
 8019a0e:	6818      	ldr	r0, [r3, #0]
 8019a10:	3308      	adds	r3, #8
 8019a12:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019a16:	4637      	mov	r7, r6
 8019a18:	4563      	cmp	r3, ip
 8019a1a:	c703      	stmia	r7!, {r0, r1}
 8019a1c:	463e      	mov	r6, r7
 8019a1e:	d1f6      	bne.n	8019a0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8019a20:	6818      	ldr	r0, [r3, #0]
 8019a22:	46d9      	mov	r9, fp
 8019a24:	6038      	str	r0, [r7, #0]
 8019a26:	889b      	ldrh	r3, [r3, #4]
 8019a28:	80bb      	strh	r3, [r7, #4]
 8019a2a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8019a2e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8019a32:	18d3      	adds	r3, r2, r3
 8019a34:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8019a38:	b298      	uxth	r0, r3
 8019a3a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8019a3e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8019a42:	281d      	cmp	r0, #29
 8019a44:	ea4a 0a01 	orr.w	sl, sl, r1
 8019a48:	fa1f f68a 	uxth.w	r6, sl
 8019a4c:	d842      	bhi.n	8019ad4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	4950      	ldr	r1, [pc, #320]	; (8019b94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 8019a52:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8019a56:	4083      	lsls	r3, r0
 8019a58:	420b      	tst	r3, r1
 8019a5a:	d114      	bne.n	8019a86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019a5c:	f413 7f60 	tst.w	r3, #896	; 0x380
 8019a60:	d03c      	beq.n	8019adc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 8019a62:	fa1f fa8a 	uxth.w	sl, sl
 8019a66:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8019a6a:	4658      	mov	r0, fp
 8019a6c:	eba1 010a 	sub.w	r1, r1, sl
 8019a70:	b209      	sxth	r1, r1
 8019a72:	f7ff fefb 	bl	801986c <_ZN8touchgfx9GlyphNode6setTopEs>
 8019a76:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8019a7a:	1b86      	subs	r6, r0, r6
 8019a7c:	eba6 0a0a 	sub.w	sl, r6, sl
 8019a80:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8019a84:	e7b9      	b.n	80199fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019a86:	2100      	movs	r1, #0
 8019a88:	f104 001a 	add.w	r0, r4, #26
 8019a8c:	f7ff ff8e 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019a90:	f640 6333 	movw	r3, #3635	; 0xe33
 8019a94:	4601      	mov	r1, r0
 8019a96:	4298      	cmp	r0, r3
 8019a98:	d10a      	bne.n	8019ab0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8019a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8019a9e:	4640      	mov	r0, r8
 8019aa0:	68db      	ldr	r3, [r3, #12]
 8019aa2:	4798      	blx	r3
 8019aa4:	7b41      	ldrb	r1, [r0, #13]
 8019aa6:	7a00      	ldrb	r0, [r0, #8]
 8019aa8:	f7ff fed2 	bl	8019850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019aac:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019ab0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8019ab4:	4658      	mov	r0, fp
 8019ab6:	4431      	add	r1, r6
 8019ab8:	4451      	add	r1, sl
 8019aba:	b209      	sxth	r1, r1
 8019abc:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8019ac0:	f7ff fed4 	bl	801986c <_ZN8touchgfx9GlyphNode6setTopEs>
 8019ac4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019ac8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019acc:	1a9b      	subs	r3, r3, r2
 8019ace:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8019ad2:	e792      	b.n	80199fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019ad4:	f640 631b 	movw	r3, #3611	; 0xe1b
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d005      	beq.n	8019ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8019adc:	f022 0302 	bic.w	r3, r2, #2
 8019ae0:	f640 611d 	movw	r1, #3613	; 0xe1d
 8019ae4:	428b      	cmp	r3, r1
 8019ae6:	d119      	bne.n	8019b1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8019ae8:	1e53      	subs	r3, r2, #1
 8019aea:	4629      	mov	r1, r5
 8019aec:	4642      	mov	r2, r8
 8019aee:	4620      	mov	r0, r4
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	f7ff ff18 	bl	8019926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019af6:	7b41      	ldrb	r1, [r0, #13]
 8019af8:	7a00      	ldrb	r0, [r0, #8]
 8019afa:	f7ff fea9 	bl	8019850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019afe:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8019b02:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019b06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b0a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019b0e:	4313      	orrs	r3, r2
 8019b10:	115a      	asrs	r2, r3, #5
 8019b12:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019b16:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019b1a:	e02e      	b.n	8019b7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019b1c:	4639      	mov	r1, r7
 8019b1e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019b22:	f7ff fe95 	bl	8019850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019b26:	f640 6109 	movw	r1, #3593	; 0xe09
 8019b2a:	f022 0310 	bic.w	r3, r2, #16
 8019b2e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019b32:	428b      	cmp	r3, r1
 8019b34:	d003      	beq.n	8019b3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8019b36:	f640 6313 	movw	r3, #3603	; 0xe13
 8019b3a:	429a      	cmp	r2, r3
 8019b3c:	d127      	bne.n	8019b8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 8019b3e:	b27f      	sxtb	r7, r7
 8019b40:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019b44:	4629      	mov	r1, r5
 8019b46:	4620      	mov	r0, r4
 8019b48:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8019b4c:	431f      	orrs	r7, r3
 8019b4e:	f640 6313 	movw	r3, #3603	; 0xe13
 8019b52:	429a      	cmp	r2, r3
 8019b54:	bf14      	ite	ne
 8019b56:	f102 33ff 	addne.w	r3, r2, #4294967295
 8019b5a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019b5e:	4642      	mov	r2, r8
 8019b60:	bf18      	it	ne
 8019b62:	b29b      	uxthne	r3, r3
 8019b64:	f7ff fedf 	bl	8019926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019b68:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019b6c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b70:	7a83      	ldrb	r3, [r0, #10]
 8019b72:	4313      	orrs	r3, r2
 8019b74:	1aff      	subs	r7, r7, r3
 8019b76:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8019b7a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8019b7e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019b82:	f7ff fe65 	bl	8019850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019b86:	1b80      	subs	r0, r0, r6
 8019b88:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8019b8c:	e735      	b.n	80199fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019b8e:	2300      	movs	r3, #0
 8019b90:	e7c1      	b.n	8019b16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8019b92:	bf00      	nop
 8019b94:	3fc00079 	.word	0x3fc00079

08019b98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019b98:	3a01      	subs	r2, #1
 8019b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b9e:	b292      	uxth	r2, r2
 8019ba0:	460c      	mov	r4, r1
 8019ba2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019ba6:	42b2      	cmp	r2, r6
 8019ba8:	d018      	beq.n	8019bdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8019baa:	8b01      	ldrh	r1, [r0, #24]
 8019bac:	f834 5b02 	ldrh.w	r5, [r4], #2
 8019bb0:	4291      	cmp	r1, r2
 8019bb2:	d805      	bhi.n	8019bc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8019bb4:	4b13      	ldr	r3, [pc, #76]	; (8019c04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8019bb6:	21d3      	movs	r1, #211	; 0xd3
 8019bb8:	4a13      	ldr	r2, [pc, #76]	; (8019c08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8019bba:	4814      	ldr	r0, [pc, #80]	; (8019c0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8019bbc:	f00a fd26 	bl	802460c <__assert_func>
 8019bc0:	8ac1      	ldrh	r1, [r0, #22]
 8019bc2:	4411      	add	r1, r2
 8019bc4:	3a01      	subs	r2, #1
 8019bc6:	f001 0101 	and.w	r1, r1, #1
 8019bca:	b292      	uxth	r2, r2
 8019bcc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019bd0:	8a49      	ldrh	r1, [r1, #18]
 8019bd2:	428d      	cmp	r5, r1
 8019bd4:	d0e7      	beq.n	8019ba6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8019bd6:	2000      	movs	r0, #0
 8019bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bdc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8019be0:	2600      	movs	r6, #0
 8019be2:	f100 051a 	add.w	r5, r0, #26
 8019be6:	441f      	add	r7, r3
 8019be8:	b2b1      	uxth	r1, r6
 8019bea:	42b9      	cmp	r1, r7
 8019bec:	da08      	bge.n	8019c00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 8019bee:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8019bf2:	4628      	mov	r0, r5
 8019bf4:	f7ff feda 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019bf8:	3601      	adds	r6, #1
 8019bfa:	4540      	cmp	r0, r8
 8019bfc:	d0f4      	beq.n	8019be8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8019bfe:	e7ea      	b.n	8019bd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8019c00:	2001      	movs	r0, #1
 8019c02:	e7e9      	b.n	8019bd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8019c04:	080281d9 	.word	0x080281d9
 8019c08:	08028768 	.word	0x08028768
 8019c0c:	080281e7 	.word	0x080281e7

08019c10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8019c10:	b538      	push	{r3, r4, r5, lr}
 8019c12:	8ac3      	ldrh	r3, [r0, #22]
 8019c14:	428b      	cmp	r3, r1
 8019c16:	d205      	bcs.n	8019c24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8019c18:	4b08      	ldr	r3, [pc, #32]	; (8019c3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8019c1a:	21d8      	movs	r1, #216	; 0xd8
 8019c1c:	4a08      	ldr	r2, [pc, #32]	; (8019c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8019c1e:	4809      	ldr	r0, [pc, #36]	; (8019c44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8019c20:	f00a fcf4 	bl	802460c <__assert_func>
 8019c24:	8a82      	ldrh	r2, [r0, #20]
 8019c26:	250a      	movs	r5, #10
 8019c28:	1a5b      	subs	r3, r3, r1
 8019c2a:	440a      	add	r2, r1
 8019c2c:	82c3      	strh	r3, [r0, #22]
 8019c2e:	fbb2 f4f5 	udiv	r4, r2, r5
 8019c32:	fb05 2214 	mls	r2, r5, r4, r2
 8019c36:	8282      	strh	r2, [r0, #20]
 8019c38:	bd38      	pop	{r3, r4, r5, pc}
 8019c3a:	bf00      	nop
 8019c3c:	080281cd 	.word	0x080281cd
 8019c40:	08028584 	.word	0x08028584
 8019c44:	080281e7 	.word	0x080281e7

08019c48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8019c48:	b538      	push	{r3, r4, r5, lr}
 8019c4a:	8ac3      	ldrh	r3, [r0, #22]
 8019c4c:	2b09      	cmp	r3, #9
 8019c4e:	d905      	bls.n	8019c5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8019c50:	4b08      	ldr	r3, [pc, #32]	; (8019c74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8019c52:	21f7      	movs	r1, #247	; 0xf7
 8019c54:	4a08      	ldr	r2, [pc, #32]	; (8019c78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8019c56:	4809      	ldr	r0, [pc, #36]	; (8019c7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8019c58:	f00a fcd8 	bl	802460c <__assert_func>
 8019c5c:	8a82      	ldrh	r2, [r0, #20]
 8019c5e:	250a      	movs	r5, #10
 8019c60:	441a      	add	r2, r3
 8019c62:	3301      	adds	r3, #1
 8019c64:	fbb2 f4f5 	udiv	r4, r2, r5
 8019c68:	fb05 2214 	mls	r2, r5, r4, r2
 8019c6c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8019c70:	82c3      	strh	r3, [r0, #22]
 8019c72:	bd38      	pop	{r3, r4, r5, pc}
 8019c74:	080281c1 	.word	0x080281c1
 8019c78:	080284d5 	.word	0x080284d5
 8019c7c:	080281e7 	.word	0x080281e7

08019c80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	4604      	mov	r4, r0
 8019c84:	f100 051a 	add.w	r5, r0, #26
 8019c88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019c8a:	2b0a      	cmp	r3, #10
 8019c8c:	d01c      	beq.n	8019cc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8019c8e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8019c90:	b962      	cbnz	r2, 8019cac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8019c92:	f104 051a 	add.w	r5, r4, #26
 8019c96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019c98:	2b0a      	cmp	r3, #10
 8019c9a:	d015      	beq.n	8019cc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	f7ff fdf6 	bl	801988e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019ca2:	4601      	mov	r1, r0
 8019ca4:	4628      	mov	r0, r5
 8019ca6:	f7ff ffcf 	bl	8019c48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019caa:	e7f4      	b.n	8019c96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8019cac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019cae:	3a01      	subs	r2, #1
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	f003 0301 	and.w	r3, r3, #1
 8019cbc:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8019cbe:	8722      	strh	r2, [r4, #56]	; 0x38
 8019cc0:	86e3      	strh	r3, [r4, #54]	; 0x36
 8019cc2:	f7ff ffc1 	bl	8019c48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019cc6:	e7df      	b.n	8019c88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8019cc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08019ccc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8019ccc:	2300      	movs	r3, #0
 8019cce:	b510      	push	{r4, lr}
 8019cd0:	6043      	str	r3, [r0, #4]
 8019cd2:	4604      	mov	r4, r0
 8019cd4:	60c3      	str	r3, [r0, #12]
 8019cd6:	7403      	strb	r3, [r0, #16]
 8019cd8:	8603      	strh	r3, [r0, #48]	; 0x30
 8019cda:	8303      	strh	r3, [r0, #24]
 8019cdc:	8703      	strh	r3, [r0, #56]	; 0x38
 8019cde:	f7ff ffcf 	bl	8019c80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ce2:	4a0a      	ldr	r2, [pc, #40]	; (8019d0c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8019ce4:	6813      	ldr	r3, [r2, #0]
 8019ce6:	4611      	mov	r1, r2
 8019ce8:	b913      	cbnz	r3, 8019cf0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8019cea:	6852      	ldr	r2, [r2, #4]
 8019cec:	07d0      	lsls	r0, r2, #31
 8019cee:	d50b      	bpl.n	8019d08 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8019cf0:	6849      	ldr	r1, [r1, #4]
 8019cf2:	104a      	asrs	r2, r1, #1
 8019cf4:	07c9      	lsls	r1, r1, #31
 8019cf6:	eb04 0002 	add.w	r0, r4, r2
 8019cfa:	bf48      	it	mi
 8019cfc:	58a2      	ldrmi	r2, [r4, r2]
 8019cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d02:	bf48      	it	mi
 8019d04:	58d3      	ldrmi	r3, [r2, r3]
 8019d06:	4718      	bx	r3
 8019d08:	bd10      	pop	{r4, pc}
 8019d0a:	bf00      	nop
 8019d0c:	2000861c 	.word	0x2000861c

08019d10 <_ZN8touchgfx12TextProviderC1Ev>:
 8019d10:	2300      	movs	r3, #0
 8019d12:	2201      	movs	r2, #1
 8019d14:	b510      	push	{r4, lr}
 8019d16:	4604      	mov	r4, r0
 8019d18:	60c3      	str	r3, [r0, #12]
 8019d1a:	7403      	strb	r3, [r0, #16]
 8019d1c:	82c3      	strh	r3, [r0, #22]
 8019d1e:	8303      	strh	r3, [r0, #24]
 8019d20:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019d22:	8603      	strh	r3, [r0, #48]	; 0x30
 8019d24:	86c3      	strh	r3, [r0, #54]	; 0x36
 8019d26:	8703      	strh	r3, [r0, #56]	; 0x38
 8019d28:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019d2a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8019d2e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8019d32:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019d36:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019d3a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8019d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d42:	f7ff ffc3 	bl	8019ccc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019d46:	4620      	mov	r0, r4
 8019d48:	bd10      	pop	{r4, pc}

08019d4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8019d4a:	b410      	push	{r4}
 8019d4c:	6082      	str	r2, [r0, #8]
 8019d4e:	6001      	str	r1, [r0, #0]
 8019d50:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d56:	f7ff bfb9 	b.w	8019ccc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08019d5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8019d5c:	b508      	push	{r3, lr}
 8019d5e:	88c2      	ldrh	r2, [r0, #6]
 8019d60:	440a      	add	r2, r1
 8019d62:	2a02      	cmp	r2, #2
 8019d64:	dd05      	ble.n	8019d72 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8019d66:	4b06      	ldr	r3, [pc, #24]	; (8019d80 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8019d68:	21ec      	movs	r1, #236	; 0xec
 8019d6a:	4a06      	ldr	r2, [pc, #24]	; (8019d84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8019d6c:	4806      	ldr	r0, [pc, #24]	; (8019d88 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8019d6e:	f00a fc4d 	bl	802460c <__assert_func>
 8019d72:	8883      	ldrh	r3, [r0, #4]
 8019d74:	80c2      	strh	r2, [r0, #6]
 8019d76:	1a59      	subs	r1, r3, r1
 8019d78:	f001 0101 	and.w	r1, r1, #1
 8019d7c:	8081      	strh	r1, [r0, #4]
 8019d7e:	bd08      	pop	{r3, pc}
 8019d80:	08028213 	.word	0x08028213
 8019d84:	080286e1 	.word	0x080286e1
 8019d88:	080281e7 	.word	0x080281e7

08019d8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8019d8c:	b508      	push	{r3, lr}
 8019d8e:	88c3      	ldrh	r3, [r0, #6]
 8019d90:	428b      	cmp	r3, r1
 8019d92:	d805      	bhi.n	8019da0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8019d94:	4b06      	ldr	r3, [pc, #24]	; (8019db0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8019d96:	21fd      	movs	r1, #253	; 0xfd
 8019d98:	4a06      	ldr	r2, [pc, #24]	; (8019db4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8019d9a:	4807      	ldr	r0, [pc, #28]	; (8019db8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8019d9c:	f00a fc36 	bl	802460c <__assert_func>
 8019da0:	8883      	ldrh	r3, [r0, #4]
 8019da2:	4419      	add	r1, r3
 8019da4:	f001 0101 	and.w	r1, r1, #1
 8019da8:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019dac:	bd08      	pop	{r3, pc}
 8019dae:	bf00      	nop
 8019db0:	080281d9 	.word	0x080281d9
 8019db4:	08028839 	.word	0x08028839
 8019db8:	080281e7 	.word	0x080281e7

08019dbc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019dbc:	b570      	push	{r4, r5, r6, lr}
 8019dbe:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	b92a      	cbnz	r2, 8019dd0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019dc4:	4b12      	ldr	r3, [pc, #72]	; (8019e10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8019dc6:	21de      	movs	r1, #222	; 0xde
 8019dc8:	4a12      	ldr	r2, [pc, #72]	; (8019e14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019dca:	4813      	ldr	r0, [pc, #76]	; (8019e18 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019dcc:	f00a fc1e 	bl	802460c <__assert_func>
 8019dd0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019dd2:	260a      	movs	r6, #10
 8019dd4:	3a01      	subs	r2, #1
 8019dd6:	3412      	adds	r4, #18
 8019dd8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019ddc:	3301      	adds	r3, #1
 8019dde:	8b4d      	ldrh	r5, [r1, #26]
 8019de0:	8602      	strh	r2, [r0, #48]	; 0x30
 8019de2:	fbb3 f1f6 	udiv	r1, r3, r6
 8019de6:	fb06 3311 	mls	r3, r6, r1, r3
 8019dea:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019dec:	f7ff ff48 	bl	8019c80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019df0:	88e3      	ldrh	r3, [r4, #6]
 8019df2:	2101      	movs	r1, #1
 8019df4:	2b02      	cmp	r3, #2
 8019df6:	bf04      	itt	eq
 8019df8:	2301      	moveq	r3, #1
 8019dfa:	80e3      	strheq	r3, [r4, #6]
 8019dfc:	4620      	mov	r0, r4
 8019dfe:	f7ff ffad 	bl	8019d5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019e02:	4620      	mov	r0, r4
 8019e04:	462a      	mov	r2, r5
 8019e06:	2100      	movs	r1, #0
 8019e08:	f7ff ffc0 	bl	8019d8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	bd70      	pop	{r4, r5, r6, pc}
 8019e10:	080281b8 	.word	0x080281b8
 8019e14:	0802842a 	.word	0x0802842a
 8019e18:	080281e7 	.word	0x080281e7

08019e1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019e1c:	428a      	cmp	r2, r1
 8019e1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e22:	4604      	mov	r4, r0
 8019e24:	460e      	mov	r6, r1
 8019e26:	4615      	mov	r5, r2
 8019e28:	469a      	mov	sl, r3
 8019e2a:	d92b      	bls.n	8019e84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8019e2c:	1a57      	subs	r7, r2, r1
 8019e2e:	f04f 0800 	mov.w	r8, #0
 8019e32:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8019e36:	f04f 0b0a 	mov.w	fp, #10
 8019e3a:	b2bf      	uxth	r7, r7
 8019e3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e3e:	b92b      	cbnz	r3, 8019e4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8019e40:	4b24      	ldr	r3, [pc, #144]	; (8019ed4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8019e42:	21e6      	movs	r1, #230	; 0xe6
 8019e44:	4a24      	ldr	r2, [pc, #144]	; (8019ed8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8019e46:	4825      	ldr	r0, [pc, #148]	; (8019edc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8019e48:	f00a fbe0 	bl	802460c <__assert_func>
 8019e4c:	3b01      	subs	r3, #1
 8019e4e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019e50:	2101      	movs	r1, #1
 8019e52:	4648      	mov	r0, r9
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	f108 0801 	add.w	r8, r8, #1
 8019e5a:	441a      	add	r2, r3
 8019e5c:	8623      	strh	r3, [r4, #48]	; 0x30
 8019e5e:	fbb2 f3fb 	udiv	r3, r2, fp
 8019e62:	fb0b 2313 	mls	r3, fp, r3, r2
 8019e66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e6a:	8b5a      	ldrh	r2, [r3, #26]
 8019e6c:	9201      	str	r2, [sp, #4]
 8019e6e:	f7ff ff75 	bl	8019d5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8019e72:	9a01      	ldr	r2, [sp, #4]
 8019e74:	2100      	movs	r1, #0
 8019e76:	4648      	mov	r0, r9
 8019e78:	f7ff ff88 	bl	8019d8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019e7c:	fa1f f388 	uxth.w	r3, r8
 8019e80:	429f      	cmp	r7, r3
 8019e82:	d8db      	bhi.n	8019e3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8019e84:	f104 071a 	add.w	r7, r4, #26
 8019e88:	4631      	mov	r1, r6
 8019e8a:	260a      	movs	r6, #10
 8019e8c:	4638      	mov	r0, r7
 8019e8e:	f7ff febf 	bl	8019c10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019e92:	b1c5      	cbz	r5, 8019ec6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019e94:	3d01      	subs	r5, #1
 8019e96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e98:	b2ad      	uxth	r5, r5
 8019e9a:	2b09      	cmp	r3, #9
 8019e9c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8019ea0:	d903      	bls.n	8019eaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8019ea2:	4b0f      	ldr	r3, [pc, #60]	; (8019ee0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8019ea4:	21ec      	movs	r1, #236	; 0xec
 8019ea6:	4a0f      	ldr	r2, [pc, #60]	; (8019ee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8019ea8:	e7cd      	b.n	8019e46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8019eaa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8019eac:	3301      	adds	r3, #1
 8019eae:	3109      	adds	r1, #9
 8019eb0:	8623      	strh	r3, [r4, #48]	; 0x30
 8019eb2:	fbb1 f0f6 	udiv	r0, r1, r6
 8019eb6:	fb06 1110 	mls	r1, r6, r0, r1
 8019eba:	4638      	mov	r0, r7
 8019ebc:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8019ebe:	2100      	movs	r1, #0
 8019ec0:	f7ff fd5a 	bl	8019978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019ec4:	e7e5      	b.n	8019e92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	b003      	add	sp, #12
 8019eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ece:	f7ff bed7 	b.w	8019c80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ed2:	bf00      	nop
 8019ed4:	080281b8 	.word	0x080281b8
 8019ed8:	080282ae 	.word	0x080282ae
 8019edc:	080281e7 	.word	0x080281e7
 8019ee0:	08028213 	.word	0x08028213
 8019ee4:	08028226 	.word	0x08028226

08019ee8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eec:	4605      	mov	r5, r0
 8019eee:	4616      	mov	r6, r2
 8019ef0:	1c8c      	adds	r4, r1, #2
 8019ef2:	8809      	ldrh	r1, [r1, #0]
 8019ef4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019ef8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019efc:	42b3      	cmp	r3, r6
 8019efe:	d124      	bne.n	8019f4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019f00:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019f04:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019f08:	f001 070f 	and.w	r7, r1, #15
 8019f0c:	4652      	mov	r2, sl
 8019f0e:	f8cd 8000 	str.w	r8, [sp]
 8019f12:	464b      	mov	r3, r9
 8019f14:	4621      	mov	r1, r4
 8019f16:	4628      	mov	r0, r5
 8019f18:	f7ff fe3e 	bl	8019b98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019f1c:	4683      	mov	fp, r0
 8019f1e:	b168      	cbz	r0, 8019f3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019f20:	eb0a 0109 	add.w	r1, sl, r9
 8019f24:	463a      	mov	r2, r7
 8019f26:	4628      	mov	r0, r5
 8019f28:	4441      	add	r1, r8
 8019f2a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019f2e:	4649      	mov	r1, r9
 8019f30:	f7ff ff74 	bl	8019e1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019f34:	4658      	mov	r0, fp
 8019f36:	b003      	add	sp, #12
 8019f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f3c:	eb07 010a 	add.w	r1, r7, sl
 8019f40:	4449      	add	r1, r9
 8019f42:	4441      	add	r1, r8
 8019f44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019f48:	e7d2      	b.n	8019ef0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019f4a:	f04f 0b00 	mov.w	fp, #0
 8019f4e:	e7f1      	b.n	8019f34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019f50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f54:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8019f56:	4604      	mov	r4, r0
 8019f58:	260b      	movs	r6, #11
 8019f5a:	f100 091a 	add.w	r9, r0, #26
 8019f5e:	886f      	ldrh	r7, [r5, #2]
 8019f60:	087f      	lsrs	r7, r7, #1
 8019f62:	3e01      	subs	r6, #1
 8019f64:	d013      	beq.n	8019f8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019f66:	2100      	movs	r1, #0
 8019f68:	4648      	mov	r0, r9
 8019f6a:	f7ff fd1f 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019f6e:	462a      	mov	r2, r5
 8019f70:	4680      	mov	r8, r0
 8019f72:	4603      	mov	r3, r0
 8019f74:	4639      	mov	r1, r7
 8019f76:	4620      	mov	r0, r4
 8019f78:	f7ff fce0 	bl	801993c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019f7c:	b138      	cbz	r0, 8019f8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8019f7e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019f82:	4642      	mov	r2, r8
 8019f84:	4620      	mov	r0, r4
 8019f86:	f7ff ffaf 	bl	8019ee8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019f8a:	2800      	cmp	r0, #0
 8019f8c:	d1e9      	bne.n	8019f62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8019f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8019f94:	4b1e      	ldr	r3, [pc, #120]	; (801a010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8019f96:	b570      	push	{r4, r5, r6, lr}
 8019f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9c:	4604      	mov	r4, r0
 8019f9e:	f003 0501 	and.w	r5, r3, #1
 8019fa2:	b902      	cbnz	r2, 8019fa6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8019fa4:	b165      	cbz	r5, 8019fc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8019fa6:	105b      	asrs	r3, r3, #1
 8019fa8:	f104 061a 	add.w	r6, r4, #26
 8019fac:	18e0      	adds	r0, r4, r3
 8019fae:	b10d      	cbz	r5, 8019fb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8019fb0:	58e3      	ldr	r3, [r4, r3]
 8019fb2:	589a      	ldr	r2, [r3, r2]
 8019fb4:	4790      	blx	r2
 8019fb6:	2100      	movs	r1, #0
 8019fb8:	4602      	mov	r2, r0
 8019fba:	4630      	mov	r0, r6
 8019fbc:	f7ff fcdc 	bl	8019978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019fc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fc2:	b303      	cbz	r3, 801a006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fc4:	f104 051a 	add.w	r5, r4, #26
 8019fc8:	2100      	movs	r1, #0
 8019fca:	4628      	mov	r0, r5
 8019fcc:	f7ff fcee 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019fd0:	b1c8      	cbz	r0, 801a006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f7ff ffbc 	bl	8019f50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8019fd8:	2101      	movs	r1, #1
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f7ff fce6 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019fe0:	f640 133f 	movw	r3, #2367	; 0x93f
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	4298      	cmp	r0, r3
 8019fe8:	d10d      	bne.n	801a006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019fea:	2100      	movs	r1, #0
 8019fec:	4628      	mov	r0, r5
 8019fee:	f7ff fcdd 	bl	80199ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019ff2:	2101      	movs	r1, #1
 8019ff4:	4602      	mov	r2, r0
 8019ff6:	4628      	mov	r0, r5
 8019ff8:	f7ff fcbe 	bl	8019978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019ffc:	4632      	mov	r2, r6
 8019ffe:	2100      	movs	r1, #0
 801a000:	4628      	mov	r0, r5
 801a002:	f7ff fcb9 	bl	8019978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a006:	4620      	mov	r0, r4
 801a008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a00c:	f7ff bed6 	b.w	8019dbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a010:	20008624 	.word	0x20008624

0801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a016:	4617      	mov	r7, r2
 801a018:	461e      	mov	r6, r3
 801a01a:	4605      	mov	r5, r0
 801a01c:	f7ff ffba 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	4604      	mov	r4, r0
 801a024:	4601      	mov	r1, r0
 801a026:	4638      	mov	r0, r7
 801a028:	68db      	ldr	r3, [r3, #12]
 801a02a:	4798      	blx	r3
 801a02c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a030:	4602      	mov	r2, r0
 801a032:	6030      	str	r0, [r6, #0]
 801a034:	b29b      	uxth	r3, r3
 801a036:	2b7f      	cmp	r3, #127	; 0x7f
 801a038:	d813      	bhi.n	801a062 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a03a:	4639      	mov	r1, r7
 801a03c:	4628      	mov	r0, r5
 801a03e:	f7ff fccf 	bl	80199e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a042:	6030      	str	r0, [r6, #0]
 801a044:	6833      	ldr	r3, [r6, #0]
 801a046:	b143      	cbz	r3, 801a05a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a048:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a04c:	7a9b      	ldrb	r3, [r3, #10]
 801a04e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a052:	4313      	orrs	r3, r2
 801a054:	bf0c      	ite	eq
 801a056:	2301      	moveq	r3, #1
 801a058:	2300      	movne	r3, #0
 801a05a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a05e:	4620      	mov	r0, r4
 801a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a062:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a066:	2b00      	cmp	r3, #0
 801a068:	d0ec      	beq.n	801a044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a06a:	f640 1302 	movw	r3, #2306	; 0x902
 801a06e:	429c      	cmp	r4, r3
 801a070:	d1e8      	bne.n	801a044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a072:	4601      	mov	r1, r0
 801a074:	4628      	mov	r0, r5
 801a076:	f7ff fc32 	bl	80198de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a07a:	e7e2      	b.n	801a042 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a07c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a080:	4617      	mov	r7, r2
 801a082:	461e      	mov	r6, r3
 801a084:	4605      	mov	r5, r0
 801a086:	f7ff ff85 	bl	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a08a:	683b      	ldr	r3, [r7, #0]
 801a08c:	4604      	mov	r4, r0
 801a08e:	4601      	mov	r1, r0
 801a090:	4638      	mov	r0, r7
 801a092:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a09a:	47c0      	blx	r8
 801a09c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a0a0:	4602      	mov	r2, r0
 801a0a2:	6030      	str	r0, [r6, #0]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	2b7f      	cmp	r3, #127	; 0x7f
 801a0a8:	d814      	bhi.n	801a0d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a0aa:	4639      	mov	r1, r7
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	f7ff fc97 	bl	80199e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a0b2:	6030      	str	r0, [r6, #0]
 801a0b4:	6833      	ldr	r3, [r6, #0]
 801a0b6:	b143      	cbz	r3, 801a0ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a0b8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a0bc:	7a9b      	ldrb	r3, [r3, #10]
 801a0be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a0c2:	4313      	orrs	r3, r2
 801a0c4:	bf0c      	ite	eq
 801a0c6:	2301      	moveq	r3, #1
 801a0c8:	2300      	movne	r3, #0
 801a0ca:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0d4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d0eb      	beq.n	801a0b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a0dc:	f640 1302 	movw	r3, #2306	; 0x902
 801a0e0:	429c      	cmp	r4, r3
 801a0e2:	d1e7      	bne.n	801a0b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a0e4:	4601      	mov	r1, r0
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f7ff fbf9 	bl	80198de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a0ec:	e7e1      	b.n	801a0b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a0ee <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	b148      	cbz	r0, 801a106 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	b298      	uxth	r0, r3
 801a0f6:	3301      	adds	r3, #1
 801a0f8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a0fc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a100:	2900      	cmp	r1, #0
 801a102:	d1f7      	bne.n	801a0f4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a104:	4770      	bx	lr
 801a106:	4770      	bx	lr

0801a108 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a108:	b140      	cbz	r0, 801a11c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a10a:	4602      	mov	r2, r0
 801a10c:	1a13      	subs	r3, r2, r0
 801a10e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a112:	b29b      	uxth	r3, r3
 801a114:	2900      	cmp	r1, #0
 801a116:	d1f9      	bne.n	801a10c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a118:	4618      	mov	r0, r3
 801a11a:	4770      	bx	lr
 801a11c:	4603      	mov	r3, r0
 801a11e:	e7fb      	b.n	801a118 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a120:	b530      	push	{r4, r5, lr}
 801a122:	4604      	mov	r4, r0
 801a124:	b159      	cbz	r1, 801a13e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a126:	b148      	cbz	r0, 801a13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a128:	2300      	movs	r3, #0
 801a12a:	b298      	uxth	r0, r3
 801a12c:	4282      	cmp	r2, r0
 801a12e:	d905      	bls.n	801a13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a130:	5ccd      	ldrb	r5, [r1, r3]
 801a132:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a136:	3301      	adds	r3, #1
 801a138:	2d00      	cmp	r5, #0
 801a13a:	d1f6      	bne.n	801a12a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a13c:	bd30      	pop	{r4, r5, pc}
 801a13e:	4608      	mov	r0, r1
 801a140:	e7fc      	b.n	801a13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a142:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a144:	468c      	mov	ip, r1
 801a146:	b08b      	sub	sp, #44	; 0x2c
 801a148:	2100      	movs	r1, #0
 801a14a:	ae01      	add	r6, sp, #4
 801a14c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a150:	211f      	movs	r1, #31
 801a152:	fbb0 f7f3 	udiv	r7, r0, r3
 801a156:	fb03 0517 	mls	r5, r3, r7, r0
 801a15a:	4638      	mov	r0, r7
 801a15c:	b2ec      	uxtb	r4, r5
 801a15e:	2d09      	cmp	r5, #9
 801a160:	bfd4      	ite	le
 801a162:	3430      	addle	r4, #48	; 0x30
 801a164:	3457      	addgt	r4, #87	; 0x57
 801a166:	b2e4      	uxtb	r4, r4
 801a168:	558c      	strb	r4, [r1, r6]
 801a16a:	1e4c      	subs	r4, r1, #1
 801a16c:	b92f      	cbnz	r7, 801a17a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a16e:	4431      	add	r1, r6
 801a170:	4660      	mov	r0, ip
 801a172:	f7ff ffd5 	bl	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a176:	b00b      	add	sp, #44	; 0x2c
 801a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a17a:	4621      	mov	r1, r4
 801a17c:	e7e9      	b.n	801a152 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a17e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a17e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a180:	4607      	mov	r7, r0
 801a182:	b08b      	sub	sp, #44	; 0x2c
 801a184:	4608      	mov	r0, r1
 801a186:	b341      	cbz	r1, 801a1da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a188:	1e99      	subs	r1, r3, #2
 801a18a:	290e      	cmp	r1, #14
 801a18c:	d825      	bhi.n	801a1da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a18e:	2100      	movs	r1, #0
 801a190:	463c      	mov	r4, r7
 801a192:	261f      	movs	r6, #31
 801a194:	f10d 0c04 	add.w	ip, sp, #4
 801a198:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a19c:	1e71      	subs	r1, r6, #1
 801a19e:	fb94 fef3 	sdiv	lr, r4, r3
 801a1a2:	fb03 441e 	mls	r4, r3, lr, r4
 801a1a6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a1aa:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a1ae:	b2ec      	uxtb	r4, r5
 801a1b0:	2d09      	cmp	r5, #9
 801a1b2:	bfd4      	ite	le
 801a1b4:	3430      	addle	r4, #48	; 0x30
 801a1b6:	3457      	addgt	r4, #87	; 0x57
 801a1b8:	b2e4      	uxtb	r4, r4
 801a1ba:	f80c 4006 	strb.w	r4, [ip, r6]
 801a1be:	4674      	mov	r4, lr
 801a1c0:	b96c      	cbnz	r4, 801a1de <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a1c2:	2f00      	cmp	r7, #0
 801a1c4:	da05      	bge.n	801a1d2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a1c6:	ab0a      	add	r3, sp, #40	; 0x28
 801a1c8:	4419      	add	r1, r3
 801a1ca:	232d      	movs	r3, #45	; 0x2d
 801a1cc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a1d0:	1eb1      	subs	r1, r6, #2
 801a1d2:	3101      	adds	r1, #1
 801a1d4:	4461      	add	r1, ip
 801a1d6:	f7ff ffa3 	bl	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a1da:	b00b      	add	sp, #44	; 0x2c
 801a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1de:	460e      	mov	r6, r1
 801a1e0:	e7dc      	b.n	801a19c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a1e2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a1e2:	b510      	push	{r4, lr}
 801a1e4:	b158      	cbz	r0, 801a1fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a1e6:	1e82      	subs	r2, r0, #2
 801a1e8:	210a      	movs	r1, #10
 801a1ea:	2000      	movs	r0, #0
 801a1ec:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a1f0:	3b30      	subs	r3, #48	; 0x30
 801a1f2:	b29c      	uxth	r4, r3
 801a1f4:	2c09      	cmp	r4, #9
 801a1f6:	d802      	bhi.n	801a1fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a1f8:	fb01 3000 	mla	r0, r1, r0, r3
 801a1fc:	e7f6      	b.n	801a1ec <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a1fe:	bd10      	pop	{r4, pc}

0801a200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a204:	b085      	sub	sp, #20
 801a206:	f8d0 8000 	ldr.w	r8, [r0]
 801a20a:	468a      	mov	sl, r1
 801a20c:	461c      	mov	r4, r3
 801a20e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a212:	4681      	mov	r9, r0
 801a214:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a218:	4640      	mov	r0, r8
 801a21a:	9203      	str	r2, [sp, #12]
 801a21c:	9102      	str	r1, [sp, #8]
 801a21e:	9301      	str	r3, [sp, #4]
 801a220:	f7ff ff65 	bl	801a0ee <_ZN8touchgfx7Unicode6strlenEPKt>
 801a224:	9a03      	ldr	r2, [sp, #12]
 801a226:	f1ba 0f00 	cmp.w	sl, #0
 801a22a:	bf0c      	ite	eq
 801a22c:	4684      	moveq	ip, r0
 801a22e:	f100 0c01 	addne.w	ip, r0, #1
 801a232:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a236:	8812      	ldrh	r2, [r2, #0]
 801a238:	fa1f fc8c 	uxth.w	ip, ip
 801a23c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a23e:	2a69      	cmp	r2, #105	; 0x69
 801a240:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a242:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a244:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a248:	d004      	beq.n	801a254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a24a:	d844      	bhi.n	801a2d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a24c:	2a58      	cmp	r2, #88	; 0x58
 801a24e:	d001      	beq.n	801a254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a250:	2a64      	cmp	r2, #100	; 0x64
 801a252:	d14b      	bne.n	801a2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a254:	b1a4      	cbz	r4, 801a280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a256:	b956      	cbnz	r6, 801a26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a258:	2801      	cmp	r0, #1
 801a25a:	d108      	bne.n	801a26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a25c:	f8b8 2000 	ldrh.w	r2, [r8]
 801a260:	2a30      	cmp	r2, #48	; 0x30
 801a262:	bf02      	ittt	eq
 801a264:	f108 0202 	addeq.w	r2, r8, #2
 801a268:	4630      	moveq	r0, r6
 801a26a:	f8c9 2000 	streq.w	r2, [r9]
 801a26e:	45b4      	cmp	ip, r6
 801a270:	da3e      	bge.n	801a2f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801a272:	b2b6      	uxth	r6, r6
 801a274:	eba6 040c 	sub.w	r4, r6, ip
 801a278:	46b4      	mov	ip, r6
 801a27a:	b2a4      	uxth	r4, r4
 801a27c:	f04f 0b00 	mov.w	fp, #0
 801a280:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a284:	3a01      	subs	r2, #1
 801a286:	b169      	cbz	r1, 801a2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a288:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a28a:	458c      	cmp	ip, r1
 801a28c:	da09      	bge.n	801a2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a28e:	eba1 010c 	sub.w	r1, r1, ip
 801a292:	b289      	uxth	r1, r1
 801a294:	b933      	cbnz	r3, 801a2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a296:	f1bb 0f00 	cmp.w	fp, #0
 801a29a:	d02b      	beq.n	801a2f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a29c:	b350      	cbz	r0, 801a2f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a29e:	440c      	add	r4, r1
 801a2a0:	b2a4      	uxth	r4, r4
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	682b      	ldr	r3, [r5, #0]
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	da07      	bge.n	801a2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a2aa:	f1ba 0f00 	cmp.w	sl, #0
 801a2ae:	d004      	beq.n	801a2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a2b0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801a2b4:	682b      	ldr	r3, [r5, #0]
 801a2b6:	3301      	adds	r3, #1
 801a2b8:	602b      	str	r3, [r5, #0]
 801a2ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801a2be:	b354      	cbz	r4, 801a316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a2c0:	682e      	ldr	r6, [r5, #0]
 801a2c2:	3c01      	subs	r4, #1
 801a2c4:	42b2      	cmp	r2, r6
 801a2c6:	b2a4      	uxth	r4, r4
 801a2c8:	dd25      	ble.n	801a316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a2ca:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a2ce:	682b      	ldr	r3, [r5, #0]
 801a2d0:	3301      	adds	r3, #1
 801a2d2:	602b      	str	r3, [r5, #0]
 801a2d4:	e7f3      	b.n	801a2be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801a2d6:	2a73      	cmp	r2, #115	; 0x73
 801a2d8:	d003      	beq.n	801a2e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801a2da:	2a78      	cmp	r2, #120	; 0x78
 801a2dc:	d0ba      	beq.n	801a254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a2de:	2a6f      	cmp	r2, #111	; 0x6f
 801a2e0:	e7b7      	b.n	801a252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801a2e2:	2c00      	cmp	r4, #0
 801a2e4:	d0cc      	beq.n	801a280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a2e6:	42b0      	cmp	r0, r6
 801a2e8:	dd00      	ble.n	801a2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a2ea:	b2b0      	uxth	r0, r6
 801a2ec:	2400      	movs	r4, #0
 801a2ee:	e7c7      	b.n	801a280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a2f0:	2400      	movs	r4, #0
 801a2f2:	e7c3      	b.n	801a27c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801a2f4:	2900      	cmp	r1, #0
 801a2f6:	d0d5      	beq.n	801a2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a2f8:	f04f 0c20 	mov.w	ip, #32
 801a2fc:	682e      	ldr	r6, [r5, #0]
 801a2fe:	2900      	cmp	r1, #0
 801a300:	d0d0      	beq.n	801a2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a302:	3901      	subs	r1, #1
 801a304:	4296      	cmp	r6, r2
 801a306:	b289      	uxth	r1, r1
 801a308:	dacb      	bge.n	801a2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a30a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a30e:	682b      	ldr	r3, [r5, #0]
 801a310:	3301      	adds	r3, #1
 801a312:	602b      	str	r3, [r5, #0]
 801a314:	e7f2      	b.n	801a2fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801a316:	b198      	cbz	r0, 801a340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a318:	f8d9 3000 	ldr.w	r3, [r9]
 801a31c:	881c      	ldrh	r4, [r3, #0]
 801a31e:	b17c      	cbz	r4, 801a340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a320:	682c      	ldr	r4, [r5, #0]
 801a322:	3801      	subs	r0, #1
 801a324:	42a2      	cmp	r2, r4
 801a326:	b280      	uxth	r0, r0
 801a328:	dd0a      	ble.n	801a340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a32a:	1c9c      	adds	r4, r3, #2
 801a32c:	f8c9 4000 	str.w	r4, [r9]
 801a330:	881c      	ldrh	r4, [r3, #0]
 801a332:	682b      	ldr	r3, [r5, #0]
 801a334:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801a338:	682b      	ldr	r3, [r5, #0]
 801a33a:	3301      	adds	r3, #1
 801a33c:	602b      	str	r3, [r5, #0]
 801a33e:	e7ea      	b.n	801a316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a340:	2620      	movs	r6, #32
 801a342:	b151      	cbz	r1, 801a35a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a344:	6828      	ldr	r0, [r5, #0]
 801a346:	3901      	subs	r1, #1
 801a348:	4282      	cmp	r2, r0
 801a34a:	b289      	uxth	r1, r1
 801a34c:	dd05      	ble.n	801a35a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a34e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801a352:	682b      	ldr	r3, [r5, #0]
 801a354:	3301      	adds	r3, #1
 801a356:	602b      	str	r3, [r5, #0]
 801a358:	e7f3      	b.n	801a342 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801a35a:	b005      	add	sp, #20
 801a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a364:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a366:	4604      	mov	r4, r0
 801a368:	f04f 0801 	mov.w	r8, #1
 801a36c:	2000      	movs	r0, #0
 801a36e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801a372:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801a376:	8008      	strh	r0, [r1, #0]
 801a378:	7010      	strb	r0, [r2, #0]
 801a37a:	7018      	strb	r0, [r3, #0]
 801a37c:	f88c 0000 	strb.w	r0, [ip]
 801a380:	f88e 0000 	strb.w	r0, [lr]
 801a384:	7030      	strb	r0, [r6, #0]
 801a386:	6820      	ldr	r0, [r4, #0]
 801a388:	8800      	ldrh	r0, [r0, #0]
 801a38a:	b190      	cbz	r0, 801a3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a38c:	282b      	cmp	r0, #43	; 0x2b
 801a38e:	d001      	beq.n	801a394 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801a390:	2820      	cmp	r0, #32
 801a392:	d104      	bne.n	801a39e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801a394:	8008      	strh	r0, [r1, #0]
 801a396:	6820      	ldr	r0, [r4, #0]
 801a398:	3002      	adds	r0, #2
 801a39a:	6020      	str	r0, [r4, #0]
 801a39c:	e7f3      	b.n	801a386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801a39e:	282d      	cmp	r0, #45	; 0x2d
 801a3a0:	d102      	bne.n	801a3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801a3a2:	f882 8000 	strb.w	r8, [r2]
 801a3a6:	e7f6      	b.n	801a396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a3a8:	2823      	cmp	r0, #35	; 0x23
 801a3aa:	d102      	bne.n	801a3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a3ac:	f883 8000 	strb.w	r8, [r3]
 801a3b0:	e7f1      	b.n	801a396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a3b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a3b6:	2b09      	cmp	r3, #9
 801a3b8:	d901      	bls.n	801a3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801a3ba:	282a      	cmp	r0, #42	; 0x2a
 801a3bc:	d114      	bne.n	801a3e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a3be:	2201      	movs	r2, #1
 801a3c0:	f88e 2000 	strb.w	r2, [lr]
 801a3c4:	6823      	ldr	r3, [r4, #0]
 801a3c6:	8819      	ldrh	r1, [r3, #0]
 801a3c8:	2930      	cmp	r1, #48	; 0x30
 801a3ca:	bf02      	ittt	eq
 801a3cc:	3302      	addeq	r3, #2
 801a3ce:	6023      	streq	r3, [r4, #0]
 801a3d0:	f88c 2000 	strbeq.w	r2, [ip]
 801a3d4:	6820      	ldr	r0, [r4, #0]
 801a3d6:	8803      	ldrh	r3, [r0, #0]
 801a3d8:	2b2a      	cmp	r3, #42	; 0x2a
 801a3da:	d11e      	bne.n	801a41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801a3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a3e0:	603b      	str	r3, [r7, #0]
 801a3e2:	6823      	ldr	r3, [r4, #0]
 801a3e4:	3302      	adds	r3, #2
 801a3e6:	6023      	str	r3, [r4, #0]
 801a3e8:	6823      	ldr	r3, [r4, #0]
 801a3ea:	881b      	ldrh	r3, [r3, #0]
 801a3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801a3ee:	d112      	bne.n	801a416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801a3f0:	2301      	movs	r3, #1
 801a3f2:	7033      	strb	r3, [r6, #0]
 801a3f4:	6823      	ldr	r3, [r4, #0]
 801a3f6:	1c98      	adds	r0, r3, #2
 801a3f8:	6020      	str	r0, [r4, #0]
 801a3fa:	885b      	ldrh	r3, [r3, #2]
 801a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a3fe:	d117      	bne.n	801a430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801a400:	f04f 33ff 	mov.w	r3, #4294967295
 801a404:	602b      	str	r3, [r5, #0]
 801a406:	6823      	ldr	r3, [r4, #0]
 801a408:	3302      	adds	r3, #2
 801a40a:	6023      	str	r3, [r4, #0]
 801a40c:	682b      	ldr	r3, [r5, #0]
 801a40e:	2b06      	cmp	r3, #6
 801a410:	bfa8      	it	ge
 801a412:	2306      	movge	r3, #6
 801a414:	602b      	str	r3, [r5, #0]
 801a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a41a:	f7ff fee2 	bl	801a1e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801a41e:	6038      	str	r0, [r7, #0]
 801a420:	6823      	ldr	r3, [r4, #0]
 801a422:	881a      	ldrh	r2, [r3, #0]
 801a424:	3a30      	subs	r2, #48	; 0x30
 801a426:	2a09      	cmp	r2, #9
 801a428:	d8de      	bhi.n	801a3e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a42a:	3302      	adds	r3, #2
 801a42c:	6023      	str	r3, [r4, #0]
 801a42e:	e7f7      	b.n	801a420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801a430:	f7ff fed7 	bl	801a1e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801a434:	6028      	str	r0, [r5, #0]
 801a436:	6823      	ldr	r3, [r4, #0]
 801a438:	881a      	ldrh	r2, [r3, #0]
 801a43a:	3a30      	subs	r2, #48	; 0x30
 801a43c:	2a09      	cmp	r2, #9
 801a43e:	d8e5      	bhi.n	801a40c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801a440:	3302      	adds	r3, #2
 801a442:	6023      	str	r3, [r4, #0]
 801a444:	e7f7      	b.n	801a436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801a446 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801a446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a44a:	b0a2      	sub	sp, #136	; 0x88
 801a44c:	2500      	movs	r5, #0
 801a44e:	4606      	mov	r6, r0
 801a450:	460f      	mov	r7, r1
 801a452:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801a456:	9209      	str	r2, [sp, #36]	; 0x24
 801a458:	4629      	mov	r1, r5
 801a45a:	2242      	movs	r2, #66	; 0x42
 801a45c:	4640      	mov	r0, r8
 801a45e:	461c      	mov	r4, r3
 801a460:	950d      	str	r5, [sp, #52]	; 0x34
 801a462:	f7fe fe26 	bl	80190b2 <_ZN8touchgfx6memsetEPvhm>
 801a466:	b30e      	cbz	r6, 801a4ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a46a:	b1f3      	cbz	r3, 801a4aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801a46c:	f107 3aff 	add.w	sl, r7, #4294967295
 801a470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a474:	8812      	ldrh	r2, [r2, #0]
 801a476:	2a00      	cmp	r2, #0
 801a478:	f000 80b3 	beq.w	801a5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a47c:	459a      	cmp	sl, r3
 801a47e:	f340 80b0 	ble.w	801a5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801a482:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a488:	f8b9 2000 	ldrh.w	r2, [r9]
 801a48c:	2a00      	cmp	r2, #0
 801a48e:	d0ef      	beq.n	801a470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a490:	2a25      	cmp	r2, #37	; 0x25
 801a492:	f000 80aa 	beq.w	801a5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801a496:	459a      	cmp	sl, r3
 801a498:	ddea      	ble.n	801a470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a49a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a49e:	f109 0202 	add.w	r2, r9, #2
 801a4a2:	3301      	adds	r3, #1
 801a4a4:	9209      	str	r2, [sp, #36]	; 0x24
 801a4a6:	930d      	str	r3, [sp, #52]	; 0x34
 801a4a8:	e7eb      	b.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801a4aa:	8033      	strh	r3, [r6, #0]
 801a4ac:	4630      	mov	r0, r6
 801a4ae:	b022      	add	sp, #136	; 0x88
 801a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4b4:	3b63      	subs	r3, #99	; 0x63
 801a4b6:	2b01      	cmp	r3, #1
 801a4b8:	f200 80df 	bhi.w	801a67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a4bc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a4c0:	8813      	ldrh	r3, [r2, #0]
 801a4c2:	2b69      	cmp	r3, #105	; 0x69
 801a4c4:	d058      	beq.n	801a578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a4c6:	d81b      	bhi.n	801a500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801a4c8:	2b63      	cmp	r3, #99	; 0x63
 801a4ca:	d02e      	beq.n	801a52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801a4cc:	2b64      	cmp	r3, #100	; 0x64
 801a4ce:	d053      	beq.n	801a578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801a4d0:	2b58      	cmp	r3, #88	; 0x58
 801a4d2:	d06f      	beq.n	801a5b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801a4d4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801a4d8:	46a1      	mov	r9, r4
 801a4da:	e02d      	b.n	801a538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a4dc:	2b73      	cmp	r3, #115	; 0x73
 801a4de:	d0ed      	beq.n	801a4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4e0:	d803      	bhi.n	801a4ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801a4e2:	2b6f      	cmp	r3, #111	; 0x6f
 801a4e4:	f040 80c9 	bne.w	801a67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801a4e8:	e7e8      	b.n	801a4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4ea:	2b75      	cmp	r3, #117	; 0x75
 801a4ec:	d0e6      	beq.n	801a4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a4ee:	2b78      	cmp	r3, #120	; 0x78
 801a4f0:	e7f8      	b.n	801a4e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801a4f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4f4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4fa:	3302      	adds	r3, #2
 801a4fc:	9309      	str	r3, [sp, #36]	; 0x24
 801a4fe:	e7b7      	b.n	801a470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a500:	2b73      	cmp	r3, #115	; 0x73
 801a502:	d034      	beq.n	801a56e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801a504:	d807      	bhi.n	801a516 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801a506:	2b6f      	cmp	r3, #111	; 0x6f
 801a508:	d1e4      	bne.n	801a4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a50c:	f104 0904 	add.w	r9, r4, #4
 801a510:	2308      	movs	r3, #8
 801a512:	1aba      	subs	r2, r7, r2
 801a514:	e048      	b.n	801a5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a516:	2b75      	cmp	r3, #117	; 0x75
 801a518:	d041      	beq.n	801a59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801a51a:	2b78      	cmp	r3, #120	; 0x78
 801a51c:	d1da      	bne.n	801a4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801a51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a520:	f104 0904 	add.w	r9, r4, #4
 801a524:	2310      	movs	r3, #16
 801a526:	1aba      	subs	r2, r7, r2
 801a528:	e03e      	b.n	801a5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801a52a:	7823      	ldrb	r3, [r4, #0]
 801a52c:	f104 0904 	add.w	r9, r4, #4
 801a530:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801a534:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801a538:	aa0d      	add	r2, sp, #52	; 0x34
 801a53a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a53e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a542:	a810      	add	r0, sp, #64	; 0x40
 801a544:	9205      	str	r2, [sp, #20]
 801a546:	464c      	mov	r4, r9
 801a548:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801a54c:	9204      	str	r2, [sp, #16]
 801a54e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a550:	9203      	str	r2, [sp, #12]
 801a552:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801a556:	9202      	str	r2, [sp, #8]
 801a558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a55a:	9201      	str	r2, [sp, #4]
 801a55c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801a560:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801a564:	9200      	str	r2, [sp, #0]
 801a566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a568:	f7ff fe4a 	bl	801a200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a56c:	e7c4      	b.n	801a4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801a56e:	f104 0904 	add.w	r9, r4, #4
 801a572:	6823      	ldr	r3, [r4, #0]
 801a574:	9310      	str	r3, [sp, #64]	; 0x40
 801a576:	e7df      	b.n	801a538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a57a:	230a      	movs	r3, #10
 801a57c:	4641      	mov	r1, r8
 801a57e:	6820      	ldr	r0, [r4, #0]
 801a580:	1aba      	subs	r2, r7, r2
 801a582:	f104 0904 	add.w	r9, r4, #4
 801a586:	b292      	uxth	r2, r2
 801a588:	f7ff fdf9 	bl	801a17e <_ZN8touchgfx7Unicode4itoaElPtti>
 801a58c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a590:	2b2d      	cmp	r3, #45	; 0x2d
 801a592:	d1d1      	bne.n	801a538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a594:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a59a:	3302      	adds	r3, #2
 801a59c:	e7ea      	b.n	801a574 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801a59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5a0:	f104 0904 	add.w	r9, r4, #4
 801a5a4:	230a      	movs	r3, #10
 801a5a6:	1aba      	subs	r2, r7, r2
 801a5a8:	b292      	uxth	r2, r2
 801a5aa:	4641      	mov	r1, r8
 801a5ac:	6820      	ldr	r0, [r4, #0]
 801a5ae:	f7ff fdc8 	bl	801a142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a5b2:	e7c1      	b.n	801a538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a5b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5b6:	2310      	movs	r3, #16
 801a5b8:	4641      	mov	r1, r8
 801a5ba:	6820      	ldr	r0, [r4, #0]
 801a5bc:	1aba      	subs	r2, r7, r2
 801a5be:	f104 0904 	add.w	r9, r4, #4
 801a5c2:	b292      	uxth	r2, r2
 801a5c4:	f7ff fdbd 	bl	801a142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a5c8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801a5cc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d0b1      	beq.n	801a538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801a5d4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801a5d8:	2919      	cmp	r1, #25
 801a5da:	d8f7      	bhi.n	801a5cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a5dc:	3b20      	subs	r3, #32
 801a5de:	8013      	strh	r3, [r2, #0]
 801a5e0:	e7f4      	b.n	801a5cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a5e8:	e760      	b.n	801a4ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801a5ea:	459a      	cmp	sl, r3
 801a5ec:	f77f af40 	ble.w	801a470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801a5f0:	f109 0302 	add.w	r3, r9, #2
 801a5f4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801a5f8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801a5fc:	a809      	add	r0, sp, #36	; 0x24
 801a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801a600:	ab0f      	add	r3, sp, #60	; 0x3c
 801a602:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801a606:	9304      	str	r3, [sp, #16]
 801a608:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801a60c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801a610:	9303      	str	r3, [sp, #12]
 801a612:	ab0e      	add	r3, sp, #56	; 0x38
 801a614:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801a618:	9302      	str	r3, [sp, #8]
 801a61a:	ab0c      	add	r3, sp, #48	; 0x30
 801a61c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801a620:	9301      	str	r3, [sp, #4]
 801a622:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801a626:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801a62a:	9300      	str	r3, [sp, #0]
 801a62c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801a630:	950e      	str	r5, [sp, #56]	; 0x38
 801a632:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801a636:	950f      	str	r5, [sp, #60]	; 0x3c
 801a638:	f7ff fe92 	bl	801a360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a640:	2b00      	cmp	r3, #0
 801a642:	bfbf      	itttt	lt
 801a644:	6823      	ldrlt	r3, [r4, #0]
 801a646:	3404      	addlt	r4, #4
 801a648:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a64c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a650:	2b00      	cmp	r3, #0
 801a652:	bfbf      	itttt	lt
 801a654:	6823      	ldrlt	r3, [r4, #0]
 801a656:	3404      	addlt	r4, #4
 801a658:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a65c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801a65e:	8813      	ldrh	r3, [r2, #0]
 801a660:	2b69      	cmp	r3, #105	; 0x69
 801a662:	f43f af2b 	beq.w	801a4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a666:	f63f af39 	bhi.w	801a4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801a66a:	2b58      	cmp	r3, #88	; 0x58
 801a66c:	f43f af26 	beq.w	801a4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801a670:	f63f af20 	bhi.w	801a4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801a674:	2b25      	cmp	r3, #37	; 0x25
 801a676:	f43f af3c 	beq.w	801a4f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801a67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a680:	f8b9 2000 	ldrh.w	r2, [r9]
 801a684:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a688:	3301      	adds	r3, #1
 801a68a:	930d      	str	r3, [sp, #52]	; 0x34
 801a68c:	e734      	b.n	801a4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801a690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a692:	4605      	mov	r5, r0
 801a694:	b0a1      	sub	sp, #132	; 0x84
 801a696:	4610      	mov	r0, r2
 801a698:	460e      	mov	r6, r1
 801a69a:	4614      	mov	r4, r2
 801a69c:	461f      	mov	r7, r3
 801a69e:	f7ff fd33 	bl	801a108 <_ZN8touchgfx7Unicode6strlenEPKc>
 801a6a2:	283f      	cmp	r0, #63	; 0x3f
 801a6a4:	d906      	bls.n	801a6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801a6a6:	4b0a      	ldr	r3, [pc, #40]	; (801a6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801a6a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801a6ac:	4a09      	ldr	r2, [pc, #36]	; (801a6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801a6ae:	480a      	ldr	r0, [pc, #40]	; (801a6d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801a6b0:	f009 ffac 	bl	802460c <__assert_func>
 801a6b4:	4621      	mov	r1, r4
 801a6b6:	2240      	movs	r2, #64	; 0x40
 801a6b8:	4668      	mov	r0, sp
 801a6ba:	f7ff fd31 	bl	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a6be:	463b      	mov	r3, r7
 801a6c0:	466a      	mov	r2, sp
 801a6c2:	4631      	mov	r1, r6
 801a6c4:	4628      	mov	r0, r5
 801a6c6:	f7ff febe 	bl	801a446 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801a6ca:	b021      	add	sp, #132	; 0x84
 801a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	08028911 	.word	0x08028911
 801a6d4:	080289e3 	.word	0x080289e3
 801a6d8:	0802892e 	.word	0x0802892e

0801a6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a6dc:	b40c      	push	{r2, r3}
 801a6de:	b507      	push	{r0, r1, r2, lr}
 801a6e0:	ab04      	add	r3, sp, #16
 801a6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6e6:	9301      	str	r3, [sp, #4]
 801a6e8:	f7ff ffd2 	bl	801a690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a6ec:	b003      	add	sp, #12
 801a6ee:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6f2:	b002      	add	sp, #8
 801a6f4:	4770      	bx	lr
	...

0801a6f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6fc:	b0c3      	sub	sp, #268	; 0x10c
 801a6fe:	2400      	movs	r4, #0
 801a700:	4606      	mov	r6, r0
 801a702:	4689      	mov	r9, r1
 801a704:	af10      	add	r7, sp, #64	; 0x40
 801a706:	9209      	str	r2, [sp, #36]	; 0x24
 801a708:	4621      	mov	r1, r4
 801a70a:	22c8      	movs	r2, #200	; 0xc8
 801a70c:	4638      	mov	r0, r7
 801a70e:	469a      	mov	sl, r3
 801a710:	940c      	str	r4, [sp, #48]	; 0x30
 801a712:	f7fe fcce 	bl	80190b2 <_ZN8touchgfx6memsetEPvhm>
 801a716:	b116      	cbz	r6, 801a71e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a71a:	b923      	cbnz	r3, 801a726 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801a71c:	8033      	strh	r3, [r6, #0]
 801a71e:	4630      	mov	r0, r6
 801a720:	b043      	add	sp, #268	; 0x10c
 801a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a726:	f109 3bff 	add.w	fp, r9, #4294967295
 801a72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a72e:	8812      	ldrh	r2, [r2, #0]
 801a730:	2a00      	cmp	r2, #0
 801a732:	f000 80d1 	beq.w	801a8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a736:	459b      	cmp	fp, r3
 801a738:	f340 80ce 	ble.w	801a8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801a73c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a73e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a740:	882a      	ldrh	r2, [r5, #0]
 801a742:	2a00      	cmp	r2, #0
 801a744:	d0f1      	beq.n	801a72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a746:	2a25      	cmp	r2, #37	; 0x25
 801a748:	f000 80ca 	beq.w	801a8e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801a74c:	459b      	cmp	fp, r3
 801a74e:	ddec      	ble.n	801a72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a750:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a754:	3502      	adds	r5, #2
 801a756:	3301      	adds	r3, #1
 801a758:	9509      	str	r5, [sp, #36]	; 0x24
 801a75a:	930c      	str	r3, [sp, #48]	; 0x30
 801a75c:	e7ee      	b.n	801a73c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801a75e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a762:	3202      	adds	r2, #2
 801a764:	920c      	str	r2, [sp, #48]	; 0x30
 801a766:	e0ac      	b.n	801a8c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801a768:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a76c:	970f      	str	r7, [sp, #60]	; 0x3c
 801a76e:	3401      	adds	r4, #1
 801a770:	edd3 7a00 	vldr	s15, [r3]
 801a774:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a778:	b923      	cbnz	r3, 801a784 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801a77a:	2301      	movs	r3, #1
 801a77c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a780:	2303      	movs	r3, #3
 801a782:	930e      	str	r3, [sp, #56]	; 0x38
 801a784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a788:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a78a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801a78e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a98c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a796:	bf42      	ittt	mi
 801a798:	232d      	movmi	r3, #45	; 0x2d
 801a79a:	eef1 7a67 	vnegmi.f32	s15, s15
 801a79e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	4298      	cmp	r0, r3
 801a7a6:	dd03      	ble.n	801a7b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801a7a8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	e7f9      	b.n	801a7a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801a7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a7b8:	eeb0 7a67 	vmov.f32	s14, s15
 801a7bc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c4:	da26      	bge.n	801a814 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801a7c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a7ca:	eba9 0202 	sub.w	r2, r9, r2
 801a7ce:	2100      	movs	r1, #0
 801a7d0:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a7d4:	b28d      	uxth	r5, r1
 801a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7da:	db21      	blt.n	801a820 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a7dc:	1a53      	subs	r3, r2, r1
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	dd1e      	ble.n	801a820 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a7e2:	2963      	cmp	r1, #99	; 0x63
 801a7e4:	d01b      	beq.n	801a81e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801a7e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a7ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a7ee:	ee17 3a10 	vmov	r3, s14
 801a7f2:	2b09      	cmp	r3, #9
 801a7f4:	bfa8      	it	ge
 801a7f6:	2309      	movge	r3, #9
 801a7f8:	ee07 3a10 	vmov	s14, r3
 801a7fc:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801a800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a804:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801a808:	3101      	adds	r1, #1
 801a80a:	eee7 7a66 	vfms.f32	s15, s14, s13
 801a80e:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801a812:	e7dd      	b.n	801a7d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801a814:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a818:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a81c:	e7ce      	b.n	801a7bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801a81e:	460d      	mov	r5, r1
 801a820:	2a63      	cmp	r2, #99	; 0x63
 801a822:	bfd4      	ite	le
 801a824:	ebc5 0202 	rsble	r2, r5, r2
 801a828:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801a82c:	2a00      	cmp	r2, #0
 801a82e:	dd4e      	ble.n	801a8ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801a830:	4603      	mov	r3, r0
 801a832:	f04f 0801 	mov.w	r8, #1
 801a836:	2b00      	cmp	r3, #0
 801a838:	dd0e      	ble.n	801a858 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801a83a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a83e:	210a      	movs	r1, #10
 801a840:	3b01      	subs	r3, #1
 801a842:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a846:	ee17 ca10 	vmov	ip, s14
 801a84a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a84e:	fb01 c808 	mla	r8, r1, r8, ip
 801a852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a856:	e7ee      	b.n	801a836 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801a858:	2800      	cmp	r0, #0
 801a85a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a85e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801a862:	bfac      	ite	ge
 801a864:	1a18      	subge	r0, r3, r0
 801a866:	4618      	movlt	r0, r3
 801a868:	b292      	uxth	r2, r2
 801a86a:	230a      	movs	r3, #10
 801a86c:	900e      	str	r0, [sp, #56]	; 0x38
 801a86e:	1979      	adds	r1, r7, r5
 801a870:	4640      	mov	r0, r8
 801a872:	f7ff fc84 	bl	801a17e <_ZN8touchgfx7Unicode4itoaElPtti>
 801a876:	f1b8 0f01 	cmp.w	r8, #1
 801a87a:	dc26      	bgt.n	801a8ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801a87c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801a880:	2b00      	cmp	r3, #0
 801a882:	bf0c      	ite	eq
 801a884:	2300      	moveq	r3, #0
 801a886:	232e      	movne	r3, #46	; 0x2e
 801a888:	aa42      	add	r2, sp, #264	; 0x108
 801a88a:	4415      	add	r5, r2
 801a88c:	aa0c      	add	r2, sp, #48	; 0x30
 801a88e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801a892:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a896:	a80f      	add	r0, sp, #60	; 0x3c
 801a898:	9205      	str	r2, [sp, #20]
 801a89a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801a89e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a8a2:	9204      	str	r2, [sp, #16]
 801a8a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a8a6:	9203      	str	r2, [sp, #12]
 801a8a8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801a8ac:	9202      	str	r2, [sp, #8]
 801a8ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8b0:	9201      	str	r2, [sp, #4]
 801a8b2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801a8b6:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801a8ba:	9200      	str	r2, [sp, #0]
 801a8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8be:	f7ff fc9f 	bl	801a200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8c4:	3302      	adds	r3, #2
 801a8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a8c8:	e72f      	b.n	801a72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a8ca:	232e      	movs	r3, #46	; 0x2e
 801a8cc:	e7dc      	b.n	801a888 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801a8ce:	ab42      	add	r3, sp, #264	; 0x108
 801a8d0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	e7d9      	b.n	801a88c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801a8d8:	2200      	movs	r2, #0
 801a8da:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a8de:	e71e      	b.n	801a71e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a8e0:	459b      	cmp	fp, r3
 801a8e2:	f77f af22 	ble.w	801a72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801a8ec:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801a8f0:	a809      	add	r0, sp, #36	; 0x24
 801a8f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8fe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a902:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a906:	930d      	str	r3, [sp, #52]	; 0x34
 801a908:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a90c:	930e      	str	r3, [sp, #56]	; 0x38
 801a90e:	1cab      	adds	r3, r5, #2
 801a910:	9309      	str	r3, [sp, #36]	; 0x24
 801a912:	ab0e      	add	r3, sp, #56	; 0x38
 801a914:	9304      	str	r3, [sp, #16]
 801a916:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801a91a:	9303      	str	r3, [sp, #12]
 801a91c:	ab0d      	add	r3, sp, #52	; 0x34
 801a91e:	9302      	str	r3, [sp, #8]
 801a920:	ab0b      	add	r3, sp, #44	; 0x2c
 801a922:	9301      	str	r3, [sp, #4]
 801a924:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801a928:	9300      	str	r3, [sp, #0]
 801a92a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801a92e:	f7ff fd17 	bl	801a360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a934:	2b00      	cmp	r3, #0
 801a936:	da0b      	bge.n	801a950 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801a938:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a93c:	3401      	adds	r4, #1
 801a93e:	edd3 7a00 	vldr	s15, [r3]
 801a942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a946:	ee17 3a90 	vmov	r3, s15
 801a94a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a94e:	930d      	str	r3, [sp, #52]	; 0x34
 801a950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a952:	2b00      	cmp	r3, #0
 801a954:	da0b      	bge.n	801a96e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801a956:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a95a:	3401      	adds	r4, #1
 801a95c:	edd3 7a00 	vldr	s15, [r3]
 801a960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a964:	ee17 3a90 	vmov	r3, s15
 801a968:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a96c:	930e      	str	r3, [sp, #56]	; 0x38
 801a96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a972:	881b      	ldrh	r3, [r3, #0]
 801a974:	2b25      	cmp	r3, #37	; 0x25
 801a976:	f43f aef2 	beq.w	801a75e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801a97a:	2b66      	cmp	r3, #102	; 0x66
 801a97c:	f43f aef4 	beq.w	801a768 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801a980:	9509      	str	r5, [sp, #36]	; 0x24
 801a982:	882b      	ldrh	r3, [r5, #0]
 801a984:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a988:	3201      	adds	r2, #1
 801a98a:	e6eb      	b.n	801a764 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801a98c:	3f000002 	.word	0x3f000002

0801a990 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801a990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a992:	4605      	mov	r5, r0
 801a994:	b0a1      	sub	sp, #132	; 0x84
 801a996:	4610      	mov	r0, r2
 801a998:	460e      	mov	r6, r1
 801a99a:	4614      	mov	r4, r2
 801a99c:	461f      	mov	r7, r3
 801a99e:	f7ff fbb3 	bl	801a108 <_ZN8touchgfx7Unicode6strlenEPKc>
 801a9a2:	283f      	cmp	r0, #63	; 0x3f
 801a9a4:	d906      	bls.n	801a9b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801a9a6:	4b0a      	ldr	r3, [pc, #40]	; (801a9d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801a9a8:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801a9ac:	4a09      	ldr	r2, [pc, #36]	; (801a9d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801a9ae:	480a      	ldr	r0, [pc, #40]	; (801a9d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801a9b0:	f009 fe2c 	bl	802460c <__assert_func>
 801a9b4:	4621      	mov	r1, r4
 801a9b6:	2240      	movs	r2, #64	; 0x40
 801a9b8:	4668      	mov	r0, sp
 801a9ba:	f7ff fbb1 	bl	801a120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a9be:	463b      	mov	r3, r7
 801a9c0:	466a      	mov	r2, sp
 801a9c2:	4631      	mov	r1, r6
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	f7ff fe97 	bl	801a6f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801a9ca:	b021      	add	sp, #132	; 0x84
 801a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ce:	bf00      	nop
 801a9d0:	08028911 	.word	0x08028911
 801a9d4:	08028954 	.word	0x08028954
 801a9d8:	0802892e 	.word	0x0802892e

0801a9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a9dc:	4b01      	ldr	r3, [pc, #4]	; (801a9e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a9de:	6018      	str	r0, [r3, #0]
 801a9e0:	4770      	bx	lr
 801a9e2:	bf00      	nop
 801a9e4:	2000bd10 	.word	0x2000bd10

0801a9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a9e8:	4b07      	ldr	r3, [pc, #28]	; (801aa08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801a9ea:	881a      	ldrh	r2, [r3, #0]
 801a9ec:	4282      	cmp	r2, r0
 801a9ee:	d809      	bhi.n	801aa04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a9f0:	4b06      	ldr	r3, [pc, #24]	; (801aa0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801a9f2:	881b      	ldrh	r3, [r3, #0]
 801a9f4:	4413      	add	r3, r2
 801a9f6:	4298      	cmp	r0, r3
 801a9f8:	da04      	bge.n	801aa04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a9fa:	4b05      	ldr	r3, [pc, #20]	; (801aa10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801aa02:	4770      	bx	lr
 801aa04:	2000      	movs	r0, #0
 801aa06:	4770      	bx	lr
 801aa08:	2000bd30 	.word	0x2000bd30
 801aa0c:	2000bd34 	.word	0x2000bd34
 801aa10:	2000bd14 	.word	0x2000bd14

0801aa14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa18:	4d26      	ldr	r5, [pc, #152]	; (801aab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801aa1a:	682b      	ldr	r3, [r5, #0]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d046      	beq.n	801aaae <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801aa20:	4a25      	ldr	r2, [pc, #148]	; (801aab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801aa22:	4f26      	ldr	r7, [pc, #152]	; (801aabc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801aa24:	8810      	ldrh	r0, [r2, #0]
 801aa26:	883c      	ldrh	r4, [r7, #0]
 801aa28:	4e25      	ldr	r6, [pc, #148]	; (801aac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801aa2a:	4420      	add	r0, r4
 801aa2c:	1c42      	adds	r2, r0, #1
 801aa2e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801aa32:	f022 0201 	bic.w	r2, r2, #1
 801aa36:	0412      	lsls	r2, r2, #16
 801aa38:	0c12      	lsrs	r2, r2, #16
 801aa3a:	0051      	lsls	r1, r2, #1
 801aa3c:	220e      	movs	r2, #14
 801aa3e:	eb08 0e01 	add.w	lr, r8, r1
 801aa42:	fb02 fc04 	mul.w	ip, r2, r4
 801aa46:	eb03 0208 	add.w	r2, r3, r8
 801aa4a:	4c1e      	ldr	r4, [pc, #120]	; (801aac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801aa4c:	6022      	str	r2, [r4, #0]
 801aa4e:	eb03 020e 	add.w	r2, r3, lr
 801aa52:	44e6      	add	lr, ip
 801aa54:	6032      	str	r2, [r6, #0]
 801aa56:	4473      	add	r3, lr
 801aa58:	4a1b      	ldr	r2, [pc, #108]	; (801aac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801aa5a:	6013      	str	r3, [r2, #0]
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	4a1b      	ldr	r2, [pc, #108]	; (801aacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801aa60:	8013      	strh	r3, [r2, #0]
 801aa62:	4a1b      	ldr	r2, [pc, #108]	; (801aad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801aa64:	6812      	ldr	r2, [r2, #0]
 801aa66:	eba2 0208 	sub.w	r2, r2, r8
 801aa6a:	1a52      	subs	r2, r2, r1
 801aa6c:	4919      	ldr	r1, [pc, #100]	; (801aad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801aa6e:	eba2 020c 	sub.w	r2, r2, ip
 801aa72:	469c      	mov	ip, r3
 801aa74:	600a      	str	r2, [r1, #0]
 801aa76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aa7a:	4a17      	ldr	r2, [pc, #92]	; (801aad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801aa7c:	8013      	strh	r3, [r2, #0]
 801aa7e:	4283      	cmp	r3, r0
 801aa80:	d10d      	bne.n	801aa9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801aa82:	883d      	ldrh	r5, [r7, #0]
 801aa84:	2300      	movs	r3, #0
 801aa86:	6830      	ldr	r0, [r6, #0]
 801aa88:	240e      	movs	r4, #14
 801aa8a:	429d      	cmp	r5, r3
 801aa8c:	d90f      	bls.n	801aaae <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801aa8e:	fb04 0203 	mla	r2, r4, r3, r0
 801aa92:	3301      	adds	r3, #1
 801aa94:	7b11      	ldrb	r1, [r2, #12]
 801aa96:	f36f 1145 	bfc	r1, #5, #1
 801aa9a:	7311      	strb	r1, [r2, #12]
 801aa9c:	e7f5      	b.n	801aa8a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801aa9e:	682a      	ldr	r2, [r5, #0]
 801aaa0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801aaa4:	6822      	ldr	r2, [r4, #0]
 801aaa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801aaaa:	3301      	adds	r3, #1
 801aaac:	e7e7      	b.n	801aa7e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801aaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab2:	bf00      	nop
 801aab4:	2000bd14 	.word	0x2000bd14
 801aab8:	2000bd30 	.word	0x2000bd30
 801aabc:	2000bd34 	.word	0x2000bd34
 801aac0:	2000bd18 	.word	0x2000bd18
 801aac4:	2000bd28 	.word	0x2000bd28
 801aac8:	2000bd20 	.word	0x2000bd20
 801aacc:	2000bd32 	.word	0x2000bd32
 801aad0:	2000bd1c 	.word	0x2000bd1c
 801aad4:	2000bd2c 	.word	0x2000bd2c
 801aad8:	2000bd24 	.word	0x2000bd24

0801aadc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801aadc:	4b10      	ldr	r3, [pc, #64]	; (801ab20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801aade:	b510      	push	{r4, lr}
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	b9db      	cbnz	r3, 801ab1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aae4:	b1d1      	cbz	r1, 801ab1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aae6:	4b0f      	ldr	r3, [pc, #60]	; (801ab24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801aae8:	240e      	movs	r4, #14
 801aaea:	801a      	strh	r2, [r3, #0]
 801aaec:	b292      	uxth	r2, r2
 801aaee:	4b0e      	ldr	r3, [pc, #56]	; (801ab28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801aaf0:	881b      	ldrh	r3, [r3, #0]
 801aaf2:	4413      	add	r3, r2
 801aaf4:	4362      	muls	r2, r4
 801aaf6:	2406      	movs	r4, #6
 801aaf8:	fb04 2203 	mla	r2, r4, r3, r2
 801aafc:	428a      	cmp	r2, r1
 801aafe:	d305      	bcc.n	801ab0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ab00:	4b0a      	ldr	r3, [pc, #40]	; (801ab2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ab02:	2137      	movs	r1, #55	; 0x37
 801ab04:	4a0a      	ldr	r2, [pc, #40]	; (801ab30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ab06:	480b      	ldr	r0, [pc, #44]	; (801ab34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ab08:	f009 fd80 	bl	802460c <__assert_func>
 801ab0c:	4b0a      	ldr	r3, [pc, #40]	; (801ab38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ab0e:	6019      	str	r1, [r3, #0]
 801ab10:	4b0a      	ldr	r3, [pc, #40]	; (801ab3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801ab12:	6018      	str	r0, [r3, #0]
 801ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab18:	f7ff bf7c 	b.w	801aa14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ab1c:	bd10      	pop	{r4, pc}
 801ab1e:	bf00      	nop
 801ab20:	2000bd20 	.word	0x2000bd20
 801ab24:	2000bd34 	.word	0x2000bd34
 801ab28:	2000bd30 	.word	0x2000bd30
 801ab2c:	08028ac5 	.word	0x08028ac5
 801ab30:	08028b1e 	.word	0x08028b1e
 801ab34:	08028aa0 	.word	0x08028aa0
 801ab38:	2000bd1c 	.word	0x2000bd1c
 801ab3c:	2000bd14 	.word	0x2000bd14

0801ab40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ab40:	b470      	push	{r4, r5, r6}
 801ab42:	4c07      	ldr	r4, [pc, #28]	; (801ab60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ab44:	4605      	mov	r5, r0
 801ab46:	4610      	mov	r0, r2
 801ab48:	9a03      	ldr	r2, [sp, #12]
 801ab4a:	6826      	ldr	r6, [r4, #0]
 801ab4c:	b936      	cbnz	r6, 801ab5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ab4e:	6025      	str	r5, [r4, #0]
 801ab50:	4c04      	ldr	r4, [pc, #16]	; (801ab64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ab52:	8021      	strh	r1, [r4, #0]
 801ab54:	4619      	mov	r1, r3
 801ab56:	bc70      	pop	{r4, r5, r6}
 801ab58:	f7ff bfc0 	b.w	801aadc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ab5c:	bc70      	pop	{r4, r5, r6}
 801ab5e:	4770      	bx	lr
 801ab60:	2000bd38 	.word	0x2000bd38
 801ab64:	2000bd30 	.word	0x2000bd30

0801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ab68:	b508      	push	{r3, lr}
 801ab6a:	4b14      	ldr	r3, [pc, #80]	; (801abbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ab6c:	6819      	ldr	r1, [r3, #0]
 801ab6e:	b931      	cbnz	r1, 801ab7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ab70:	4b13      	ldr	r3, [pc, #76]	; (801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ab72:	f240 21e6 	movw	r1, #742	; 0x2e6
 801ab76:	4a13      	ldr	r2, [pc, #76]	; (801abc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ab78:	4813      	ldr	r0, [pc, #76]	; (801abc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ab7a:	f009 fd47 	bl	802460c <__assert_func>
 801ab7e:	4a13      	ldr	r2, [pc, #76]	; (801abcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ab80:	8803      	ldrh	r3, [r0, #0]
 801ab82:	8812      	ldrh	r2, [r2, #0]
 801ab84:	4293      	cmp	r3, r2
 801ab86:	d204      	bcs.n	801ab92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ab88:	2214      	movs	r2, #20
 801ab8a:	fb02 1303 	mla	r3, r2, r3, r1
 801ab8e:	8918      	ldrh	r0, [r3, #8]
 801ab90:	bd08      	pop	{r3, pc}
 801ab92:	490f      	ldr	r1, [pc, #60]	; (801abd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ab94:	8809      	ldrh	r1, [r1, #0]
 801ab96:	4411      	add	r1, r2
 801ab98:	428b      	cmp	r3, r1
 801ab9a:	da06      	bge.n	801abaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ab9c:	1a9b      	subs	r3, r3, r2
 801ab9e:	4a0d      	ldr	r2, [pc, #52]	; (801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801aba0:	210e      	movs	r1, #14
 801aba2:	6812      	ldr	r2, [r2, #0]
 801aba4:	fb01 2303 	mla	r3, r1, r3, r2
 801aba8:	e7f1      	b.n	801ab8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801abaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801abae:	4293      	cmp	r3, r2
 801abb0:	bf0a      	itet	eq
 801abb2:	4b09      	ldreq	r3, [pc, #36]	; (801abd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801abb4:	2000      	movne	r0, #0
 801abb6:	8818      	ldrheq	r0, [r3, #0]
 801abb8:	e7ea      	b.n	801ab90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801abba:	bf00      	nop
 801abbc:	2000bd38 	.word	0x2000bd38
 801abc0:	08026a78 	.word	0x08026a78
 801abc4:	08028bcb 	.word	0x08028bcb
 801abc8:	08028aa0 	.word	0x08028aa0
 801abcc:	2000bd30 	.word	0x2000bd30
 801abd0:	2000bd34 	.word	0x2000bd34
 801abd4:	2000bd18 	.word	0x2000bd18
 801abd8:	2000bc64 	.word	0x2000bc64

0801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801abdc:	b508      	push	{r3, lr}
 801abde:	4b14      	ldr	r3, [pc, #80]	; (801ac30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801abe0:	6819      	ldr	r1, [r3, #0]
 801abe2:	b931      	cbnz	r1, 801abf2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801abe4:	4b13      	ldr	r3, [pc, #76]	; (801ac34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801abe6:	f240 21fa 	movw	r1, #762	; 0x2fa
 801abea:	4a13      	ldr	r2, [pc, #76]	; (801ac38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801abec:	4813      	ldr	r0, [pc, #76]	; (801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801abee:	f009 fd0d 	bl	802460c <__assert_func>
 801abf2:	4a13      	ldr	r2, [pc, #76]	; (801ac40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801abf4:	8803      	ldrh	r3, [r0, #0]
 801abf6:	8812      	ldrh	r2, [r2, #0]
 801abf8:	4293      	cmp	r3, r2
 801abfa:	d204      	bcs.n	801ac06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801abfc:	2214      	movs	r2, #20
 801abfe:	fb02 1303 	mla	r3, r2, r3, r1
 801ac02:	8958      	ldrh	r0, [r3, #10]
 801ac04:	bd08      	pop	{r3, pc}
 801ac06:	490f      	ldr	r1, [pc, #60]	; (801ac44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ac08:	8809      	ldrh	r1, [r1, #0]
 801ac0a:	4411      	add	r1, r2
 801ac0c:	428b      	cmp	r3, r1
 801ac0e:	da06      	bge.n	801ac1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ac10:	1a9b      	subs	r3, r3, r2
 801ac12:	4a0d      	ldr	r2, [pc, #52]	; (801ac48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ac14:	210e      	movs	r1, #14
 801ac16:	6812      	ldr	r2, [r2, #0]
 801ac18:	fb01 2303 	mla	r3, r1, r3, r2
 801ac1c:	e7f1      	b.n	801ac02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ac1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac22:	4293      	cmp	r3, r2
 801ac24:	bf0a      	itet	eq
 801ac26:	4b09      	ldreq	r3, [pc, #36]	; (801ac4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ac28:	2000      	movne	r0, #0
 801ac2a:	8818      	ldrheq	r0, [r3, #0]
 801ac2c:	e7ea      	b.n	801ac04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ac2e:	bf00      	nop
 801ac30:	2000bd38 	.word	0x2000bd38
 801ac34:	08026a78 	.word	0x08026a78
 801ac38:	08028bf7 	.word	0x08028bf7
 801ac3c:	08028aa0 	.word	0x08028aa0
 801ac40:	2000bd30 	.word	0x2000bd30
 801ac44:	2000bd34 	.word	0x2000bd34
 801ac48:	2000bd18 	.word	0x2000bd18
 801ac4c:	2000bc66 	.word	0x2000bc66

0801ac50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ac50:	4b23      	ldr	r3, [pc, #140]	; (801ace0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ac52:	b510      	push	{r4, lr}
 801ac54:	681c      	ldr	r4, [r3, #0]
 801ac56:	b934      	cbnz	r4, 801ac66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ac58:	4b22      	ldr	r3, [pc, #136]	; (801ace4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ac5a:	f240 310e 	movw	r1, #782	; 0x30e
 801ac5e:	4a22      	ldr	r2, [pc, #136]	; (801ace8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ac60:	4822      	ldr	r0, [pc, #136]	; (801acec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ac62:	f009 fcd3 	bl	802460c <__assert_func>
 801ac66:	4a22      	ldr	r2, [pc, #136]	; (801acf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ac68:	880b      	ldrh	r3, [r1, #0]
 801ac6a:	8812      	ldrh	r2, [r2, #0]
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d211      	bcs.n	801ac94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ac70:	2214      	movs	r2, #20
 801ac72:	fb02 4303 	mla	r3, r2, r3, r4
 801ac76:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ac7a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ac7e:	8a1a      	ldrh	r2, [r3, #16]
 801ac80:	8a5b      	ldrh	r3, [r3, #18]
 801ac82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ac86:	8004      	strh	r4, [r0, #0]
 801ac88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac8c:	8041      	strh	r1, [r0, #2]
 801ac8e:	8082      	strh	r2, [r0, #4]
 801ac90:	80c3      	strh	r3, [r0, #6]
 801ac92:	e00e      	b.n	801acb2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ac94:	4917      	ldr	r1, [pc, #92]	; (801acf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ac96:	8809      	ldrh	r1, [r1, #0]
 801ac98:	4411      	add	r1, r2
 801ac9a:	428b      	cmp	r3, r1
 801ac9c:	da0a      	bge.n	801acb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ac9e:	1a9b      	subs	r3, r3, r2
 801aca0:	4a15      	ldr	r2, [pc, #84]	; (801acf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801aca2:	210e      	movs	r1, #14
 801aca4:	6812      	ldr	r2, [r2, #0]
 801aca6:	fb01 2303 	mla	r3, r1, r3, r2
 801acaa:	681a      	ldr	r2, [r3, #0]
 801acac:	6002      	str	r2, [r0, #0]
 801acae:	685a      	ldr	r2, [r3, #4]
 801acb0:	6042      	str	r2, [r0, #4]
 801acb2:	bd10      	pop	{r4, pc}
 801acb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801acb8:	4293      	cmp	r3, r2
 801acba:	d10b      	bne.n	801acd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801acbc:	4b0f      	ldr	r3, [pc, #60]	; (801acfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801acbe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801acc2:	4b0f      	ldr	r3, [pc, #60]	; (801ad00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801acc4:	8081      	strh	r1, [r0, #4]
 801acc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acca:	2300      	movs	r3, #0
 801accc:	80c2      	strh	r2, [r0, #6]
 801acce:	8003      	strh	r3, [r0, #0]
 801acd0:	8043      	strh	r3, [r0, #2]
 801acd2:	e7ee      	b.n	801acb2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801acd4:	2300      	movs	r3, #0
 801acd6:	8003      	strh	r3, [r0, #0]
 801acd8:	8043      	strh	r3, [r0, #2]
 801acda:	8083      	strh	r3, [r0, #4]
 801acdc:	e7d8      	b.n	801ac90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801acde:	bf00      	nop
 801ace0:	2000bd38 	.word	0x2000bd38
 801ace4:	08026a78 	.word	0x08026a78
 801ace8:	08028b64 	.word	0x08028b64
 801acec:	08028aa0 	.word	0x08028aa0
 801acf0:	2000bd30 	.word	0x2000bd30
 801acf4:	2000bd34 	.word	0x2000bd34
 801acf8:	2000bd18 	.word	0x2000bd18
 801acfc:	2000bc64 	.word	0x2000bc64
 801ad00:	2000bc66 	.word	0x2000bc66

0801ad04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ad04:	4b18      	ldr	r3, [pc, #96]	; (801ad68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	b34b      	cbz	r3, 801ad5e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ad0a:	4a18      	ldr	r2, [pc, #96]	; (801ad6c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ad0c:	8800      	ldrh	r0, [r0, #0]
 801ad0e:	8812      	ldrh	r2, [r2, #0]
 801ad10:	4290      	cmp	r0, r2
 801ad12:	d211      	bcs.n	801ad38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ad14:	2214      	movs	r2, #20
 801ad16:	fb02 3300 	mla	r3, r2, r0, r3
 801ad1a:	8a1a      	ldrh	r2, [r3, #16]
 801ad1c:	8919      	ldrh	r1, [r3, #8]
 801ad1e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ad22:	428a      	cmp	r2, r1
 801ad24:	db1d      	blt.n	801ad62 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ad26:	8a58      	ldrh	r0, [r3, #18]
 801ad28:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ad2c:	895b      	ldrh	r3, [r3, #10]
 801ad2e:	4298      	cmp	r0, r3
 801ad30:	bfac      	ite	ge
 801ad32:	2000      	movge	r0, #0
 801ad34:	2001      	movlt	r0, #1
 801ad36:	4770      	bx	lr
 801ad38:	4b0d      	ldr	r3, [pc, #52]	; (801ad70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ad3a:	881b      	ldrh	r3, [r3, #0]
 801ad3c:	4413      	add	r3, r2
 801ad3e:	4298      	cmp	r0, r3
 801ad40:	da0d      	bge.n	801ad5e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ad42:	4b0c      	ldr	r3, [pc, #48]	; (801ad74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ad44:	1a80      	subs	r0, r0, r2
 801ad46:	220e      	movs	r2, #14
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	fb02 3300 	mla	r3, r2, r0, r3
 801ad4e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ad52:	891a      	ldrh	r2, [r3, #8]
 801ad54:	4291      	cmp	r1, r2
 801ad56:	db04      	blt.n	801ad62 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ad58:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ad5c:	e7e6      	b.n	801ad2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ad5e:	2000      	movs	r0, #0
 801ad60:	4770      	bx	lr
 801ad62:	2001      	movs	r0, #1
 801ad64:	4770      	bx	lr
 801ad66:	bf00      	nop
 801ad68:	2000bd38 	.word	0x2000bd38
 801ad6c:	2000bd30 	.word	0x2000bd30
 801ad70:	2000bd34 	.word	0x2000bd34
 801ad74:	2000bd18 	.word	0x2000bd18

0801ad78 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ad78:	b508      	push	{r3, lr}
 801ad7a:	4b12      	ldr	r3, [pc, #72]	; (801adc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ad7c:	6819      	ldr	r1, [r3, #0]
 801ad7e:	b931      	cbnz	r1, 801ad8e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ad80:	4b11      	ldr	r3, [pc, #68]	; (801adc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ad82:	f240 3132 	movw	r1, #818	; 0x332
 801ad86:	4a11      	ldr	r2, [pc, #68]	; (801adcc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ad88:	4811      	ldr	r0, [pc, #68]	; (801add0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ad8a:	f009 fc3f 	bl	802460c <__assert_func>
 801ad8e:	8803      	ldrh	r3, [r0, #0]
 801ad90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad94:	4293      	cmp	r3, r2
 801ad96:	d012      	beq.n	801adbe <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ad98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	d103      	bne.n	801ada8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ada0:	4b0c      	ldr	r3, [pc, #48]	; (801add4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ada6:	bd08      	pop	{r3, pc}
 801ada8:	4a0b      	ldr	r2, [pc, #44]	; (801add8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801adaa:	6812      	ldr	r2, [r2, #0]
 801adac:	b11a      	cbz	r2, 801adb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801adae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801adb2:	2800      	cmp	r0, #0
 801adb4:	d1f7      	bne.n	801ada6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801adb6:	2214      	movs	r2, #20
 801adb8:	4353      	muls	r3, r2
 801adba:	58c8      	ldr	r0, [r1, r3]
 801adbc:	e7f3      	b.n	801ada6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801adbe:	2000      	movs	r0, #0
 801adc0:	e7f1      	b.n	801ada6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801adc2:	bf00      	nop
 801adc4:	2000bd38 	.word	0x2000bd38
 801adc8:	08026a78 	.word	0x08026a78
 801adcc:	08028b9a 	.word	0x08028b9a
 801add0:	08028aa0 	.word	0x08028aa0
 801add4:	2000bc70 	.word	0x2000bc70
 801add8:	2000bd14 	.word	0x2000bd14

0801addc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801addc:	8802      	ldrh	r2, [r0, #0]
 801adde:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d840      	bhi.n	801ae68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ade6:	4b21      	ldr	r3, [pc, #132]	; (801ae6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801ade8:	881b      	ldrh	r3, [r3, #0]
 801adea:	429a      	cmp	r2, r3
 801adec:	d220      	bcs.n	801ae30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801adee:	4b20      	ldr	r3, [pc, #128]	; (801ae70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801adf0:	6819      	ldr	r1, [r3, #0]
 801adf2:	2314      	movs	r3, #20
 801adf4:	fb03 1302 	mla	r3, r3, r2, r1
 801adf8:	6858      	ldr	r0, [r3, #4]
 801adfa:	2800      	cmp	r0, #0
 801adfc:	d035      	beq.n	801ae6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801adfe:	491d      	ldr	r1, [pc, #116]	; (801ae74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ae00:	6809      	ldr	r1, [r1, #0]
 801ae02:	2900      	cmp	r1, #0
 801ae04:	d031      	beq.n	801ae6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ae06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ae0a:	b371      	cbz	r1, 801ae6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ae0c:	895a      	ldrh	r2, [r3, #10]
 801ae0e:	8918      	ldrh	r0, [r3, #8]
 801ae10:	4350      	muls	r0, r2
 801ae12:	7c5a      	ldrb	r2, [r3, #17]
 801ae14:	7cdb      	ldrb	r3, [r3, #19]
 801ae16:	0952      	lsrs	r2, r2, #5
 801ae18:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ae1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ae20:	2b0b      	cmp	r3, #11
 801ae22:	bf18      	it	ne
 801ae24:	0040      	lslne	r0, r0, #1
 801ae26:	3003      	adds	r0, #3
 801ae28:	f020 0003 	bic.w	r0, r0, #3
 801ae2c:	4408      	add	r0, r1
 801ae2e:	4770      	bx	lr
 801ae30:	4911      	ldr	r1, [pc, #68]	; (801ae78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ae32:	8809      	ldrh	r1, [r1, #0]
 801ae34:	4419      	add	r1, r3
 801ae36:	428a      	cmp	r2, r1
 801ae38:	da16      	bge.n	801ae68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ae3a:	4910      	ldr	r1, [pc, #64]	; (801ae7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ae3c:	1ad3      	subs	r3, r2, r3
 801ae3e:	200e      	movs	r0, #14
 801ae40:	6809      	ldr	r1, [r1, #0]
 801ae42:	fb00 1303 	mla	r3, r0, r3, r1
 801ae46:	7b19      	ldrb	r1, [r3, #12]
 801ae48:	f001 011f 	and.w	r1, r1, #31
 801ae4c:	290b      	cmp	r1, #11
 801ae4e:	d10b      	bne.n	801ae68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ae50:	8919      	ldrh	r1, [r3, #8]
 801ae52:	8958      	ldrh	r0, [r3, #10]
 801ae54:	4b07      	ldr	r3, [pc, #28]	; (801ae74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ae56:	4348      	muls	r0, r1
 801ae58:	6819      	ldr	r1, [r3, #0]
 801ae5a:	3003      	adds	r0, #3
 801ae5c:	f020 0303 	bic.w	r3, r0, #3
 801ae60:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ae64:	4418      	add	r0, r3
 801ae66:	4770      	bx	lr
 801ae68:	2000      	movs	r0, #0
 801ae6a:	4770      	bx	lr
 801ae6c:	2000bd30 	.word	0x2000bd30
 801ae70:	2000bd38 	.word	0x2000bd38
 801ae74:	2000bd14 	.word	0x2000bd14
 801ae78:	2000bd34 	.word	0x2000bd34
 801ae7c:	2000bd18 	.word	0x2000bd18

0801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ae80:	4b19      	ldr	r3, [pc, #100]	; (801aee8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ae82:	6819      	ldr	r1, [r3, #0]
 801ae84:	8803      	ldrh	r3, [r0, #0]
 801ae86:	b1e9      	cbz	r1, 801aec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ae88:	4a18      	ldr	r2, [pc, #96]	; (801aeec <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ae8a:	8812      	ldrh	r2, [r2, #0]
 801ae8c:	429a      	cmp	r2, r3
 801ae8e:	d90a      	bls.n	801aea6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ae90:	2214      	movs	r2, #20
 801ae92:	fb02 1303 	mla	r3, r2, r3, r1
 801ae96:	7c58      	ldrb	r0, [r3, #17]
 801ae98:	0942      	lsrs	r2, r0, #5
 801ae9a:	7cd8      	ldrb	r0, [r3, #19]
 801ae9c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801aea0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801aea4:	4770      	bx	lr
 801aea6:	4912      	ldr	r1, [pc, #72]	; (801aef0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801aea8:	8809      	ldrh	r1, [r1, #0]
 801aeaa:	4411      	add	r1, r2
 801aeac:	428b      	cmp	r3, r1
 801aeae:	da09      	bge.n	801aec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801aeb0:	1a9b      	subs	r3, r3, r2
 801aeb2:	4a10      	ldr	r2, [pc, #64]	; (801aef4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801aeb4:	210e      	movs	r1, #14
 801aeb6:	6812      	ldr	r2, [r2, #0]
 801aeb8:	fb01 2303 	mla	r3, r1, r3, r2
 801aebc:	7b18      	ldrb	r0, [r3, #12]
 801aebe:	f000 001f 	and.w	r0, r0, #31
 801aec2:	4770      	bx	lr
 801aec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801aec8:	4293      	cmp	r3, r2
 801aeca:	d10a      	bne.n	801aee2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801aecc:	4b0a      	ldr	r3, [pc, #40]	; (801aef8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aed4:	b10a      	cbz	r2, 801aeda <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801aed6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aed8:	b900      	cbnz	r0, 801aedc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801aeda:	6898      	ldr	r0, [r3, #8]
 801aedc:	6803      	ldr	r3, [r0, #0]
 801aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aee0:	4718      	bx	r3
 801aee2:	2000      	movs	r0, #0
 801aee4:	4770      	bx	lr
 801aee6:	bf00      	nop
 801aee8:	2000bd38 	.word	0x2000bd38
 801aeec:	2000bd30 	.word	0x2000bd30
 801aef0:	2000bd34 	.word	0x2000bd34
 801aef4:	2000bd18 	.word	0x2000bd18
 801aef8:	2000bc70 	.word	0x2000bc70

0801aefc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801aefc:	2018      	movs	r0, #24
 801aefe:	4770      	bx	lr

0801af00 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801af00:	2001      	movs	r0, #1
 801af02:	4770      	bx	lr

0801af04 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801af04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801af08:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801af0c:	4770      	bx	lr

0801af0e <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801af0e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801af12:	4770      	bx	lr

0801af14 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801af14:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801af18:	4770      	bx	lr

0801af1a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801af1a:	b2c8      	uxtb	r0, r1
 801af1c:	4770      	bx	lr

0801af1e <_ZN8touchgfx8LCD24bpp4initEv>:
 801af1e:	4770      	bx	lr

0801af20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	b085      	sub	sp, #20
 801af26:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801af28:	9203      	str	r2, [sp, #12]
 801af2a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	9201      	str	r2, [sp, #4]
 801af32:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801af34:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801af38:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801af3c:	fa1f fc84 	uxth.w	ip, r4
 801af40:	43e4      	mvns	r4, r4
 801af42:	9100      	str	r1, [sp, #0]
 801af44:	b2e4      	uxtb	r4, r4
 801af46:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801af4a:	fb00 2505 	mla	r5, r0, r5, r2
 801af4e:	683a      	ldr	r2, [r7, #0]
 801af50:	6877      	ldr	r7, [r6, #4]
 801af52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af56:	3704      	adds	r7, #4
 801af58:	4415      	add	r5, r2
 801af5a:	6832      	ldr	r2, [r6, #0]
 801af5c:	9202      	str	r2, [sp, #8]
 801af5e:	9a00      	ldr	r2, [sp, #0]
 801af60:	2a00      	cmp	r2, #0
 801af62:	dc03      	bgt.n	801af6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801af64:	9a03      	ldr	r2, [sp, #12]
 801af66:	2a00      	cmp	r2, #0
 801af68:	f340 8116 	ble.w	801b198 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801af6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801af72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af78:	2b00      	cmp	r3, #0
 801af7a:	dd0f      	ble.n	801af9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801af7c:	1406      	asrs	r6, r0, #16
 801af7e:	d406      	bmi.n	801af8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af80:	4546      	cmp	r6, r8
 801af82:	da04      	bge.n	801af8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af84:	1416      	asrs	r6, r2, #16
 801af86:	d402      	bmi.n	801af8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801af88:	9901      	ldr	r1, [sp, #4]
 801af8a:	428e      	cmp	r6, r1
 801af8c:	db07      	blt.n	801af9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801af8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801af90:	3b01      	subs	r3, #1
 801af92:	3503      	adds	r5, #3
 801af94:	4408      	add	r0, r1
 801af96:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af98:	440a      	add	r2, r1
 801af9a:	e7ed      	b.n	801af78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801af9c:	d011      	beq.n	801afc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801af9e:	1e5e      	subs	r6, r3, #1
 801afa0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801afa2:	fb01 0e06 	mla	lr, r1, r6, r0
 801afa6:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801afaa:	d548      	bpl.n	801b03e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801afac:	4699      	mov	r9, r3
 801afae:	462e      	mov	r6, r5
 801afb0:	f1b9 0f00 	cmp.w	r9, #0
 801afb4:	f300 809e 	bgt.w	801b0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801afb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801afbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801afc0:	441d      	add	r5, r3
 801afc2:	9b00      	ldr	r3, [sp, #0]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	f340 80e7 	ble.w	801b198 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801afca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801afce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afd8:	eef0 6a62 	vmov.f32	s13, s5
 801afdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801afe0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801afe8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801afec:	eef0 6a43 	vmov.f32	s13, s6
 801aff0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aff4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801aff8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801affc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b000:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b004:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b008:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b00c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b010:	ee12 2a90 	vmov	r2, s5
 801b014:	eef0 2a47 	vmov.f32	s5, s14
 801b018:	fb92 f3f3 	sdiv	r3, r2, r3
 801b01c:	ee13 2a10 	vmov	r2, s6
 801b020:	9311      	str	r3, [sp, #68]	; 0x44
 801b022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b024:	eeb0 3a67 	vmov.f32	s6, s15
 801b028:	fb92 f3f3 	sdiv	r3, r2, r3
 801b02c:	9312      	str	r3, [sp, #72]	; 0x48
 801b02e:	9b00      	ldr	r3, [sp, #0]
 801b030:	9a03      	ldr	r2, [sp, #12]
 801b032:	3b01      	subs	r3, #1
 801b034:	9300      	str	r3, [sp, #0]
 801b036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b038:	bf08      	it	eq
 801b03a:	4613      	moveq	r3, r2
 801b03c:	e78f      	b.n	801af5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b03e:	45c6      	cmp	lr, r8
 801b040:	dab4      	bge.n	801afac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b042:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b044:	fb01 2606 	mla	r6, r1, r6, r2
 801b048:	1436      	asrs	r6, r6, #16
 801b04a:	d4af      	bmi.n	801afac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b04c:	9901      	ldr	r1, [sp, #4]
 801b04e:	428e      	cmp	r6, r1
 801b050:	daac      	bge.n	801afac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b052:	1cee      	adds	r6, r5, #3
 801b054:	4699      	mov	r9, r3
 801b056:	f1b9 0f00 	cmp.w	r9, #0
 801b05a:	f106 0603 	add.w	r6, r6, #3
 801b05e:	ddab      	ble.n	801afb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b060:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b064:	9902      	ldr	r1, [sp, #8]
 801b066:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b06a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b06e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b072:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b074:	fb1b fb04 	smulbb	fp, fp, r4
 801b078:	f109 39ff 	add.w	r9, r9, #4294967295
 801b07c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b080:	4408      	add	r0, r1
 801b082:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b084:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b088:	440a      	add	r2, r1
 801b08a:	eb07 0a0e 	add.w	sl, r7, lr
 801b08e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b092:	fb0e be0c 	mla	lr, lr, ip, fp
 801b096:	fa1f fe8e 	uxth.w	lr, lr
 801b09a:	f10e 0b01 	add.w	fp, lr, #1
 801b09e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b0a2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b0a6:	fb1b fb04 	smulbb	fp, fp, r4
 801b0aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0ae:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b0b2:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b0b6:	fb0e be0c 	mla	lr, lr, ip, fp
 801b0ba:	fa1f fe8e 	uxth.w	lr, lr
 801b0be:	f10e 0b01 	add.w	fp, lr, #1
 801b0c2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b0c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0ca:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b0ce:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b0d2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b0d6:	fb1a fa04 	smulbb	sl, sl, r4
 801b0da:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b0de:	fa1f fe8e 	uxth.w	lr, lr
 801b0e2:	f10e 0a01 	add.w	sl, lr, #1
 801b0e6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b0ea:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0ee:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b0f2:	e7b0      	b.n	801b056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b0f4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b0f8:	d446      	bmi.n	801b188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0fa:	45c2      	cmp	sl, r8
 801b0fc:	da44      	bge.n	801b188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b0fe:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b102:	d441      	bmi.n	801b188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b104:	9901      	ldr	r1, [sp, #4]
 801b106:	458e      	cmp	lr, r1
 801b108:	da3e      	bge.n	801b188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b10a:	9902      	ldr	r1, [sp, #8]
 801b10c:	f896 b000 	ldrb.w	fp, [r6]
 801b110:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b114:	fb1b fb04 	smulbb	fp, fp, r4
 801b118:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b11c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b120:	eb07 0a0e 	add.w	sl, r7, lr
 801b124:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b128:	fb0e be0c 	mla	lr, lr, ip, fp
 801b12c:	fa1f fe8e 	uxth.w	lr, lr
 801b130:	f10e 0b01 	add.w	fp, lr, #1
 801b134:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b138:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b13c:	fb1b fb04 	smulbb	fp, fp, r4
 801b140:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b144:	f886 e000 	strb.w	lr, [r6]
 801b148:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b14c:	fb0e be0c 	mla	lr, lr, ip, fp
 801b150:	fa1f fe8e 	uxth.w	lr, lr
 801b154:	f10e 0b01 	add.w	fp, lr, #1
 801b158:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b15c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b160:	f886 e001 	strb.w	lr, [r6, #1]
 801b164:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b168:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b16c:	fb1a fa04 	smulbb	sl, sl, r4
 801b170:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b174:	fa1f fe8e 	uxth.w	lr, lr
 801b178:	f10e 0a01 	add.w	sl, lr, #1
 801b17c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b180:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b184:	f886 e002 	strb.w	lr, [r6, #2]
 801b188:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b18a:	3603      	adds	r6, #3
 801b18c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b190:	4408      	add	r0, r1
 801b192:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b194:	440a      	add	r2, r1
 801b196:	e70b      	b.n	801afb0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b198:	b005      	add	sp, #20
 801b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b19e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b19e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a2:	b085      	sub	sp, #20
 801b1a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1aa:	9203      	str	r2, [sp, #12]
 801b1ac:	6870      	ldr	r0, [r6, #4]
 801b1ae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b1b0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b1b4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b1b8:	9101      	str	r1, [sp, #4]
 801b1ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1be:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b1c2:	fb00 2404 	mla	r4, r0, r4, r2
 801b1c6:	6832      	ldr	r2, [r6, #0]
 801b1c8:	686e      	ldr	r6, [r5, #4]
 801b1ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b1ce:	3604      	adds	r6, #4
 801b1d0:	4414      	add	r4, r2
 801b1d2:	682a      	ldr	r2, [r5, #0]
 801b1d4:	9202      	str	r2, [sp, #8]
 801b1d6:	9a01      	ldr	r2, [sp, #4]
 801b1d8:	2a00      	cmp	r2, #0
 801b1da:	dc03      	bgt.n	801b1e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b1dc:	9a03      	ldr	r2, [sp, #12]
 801b1de:	2a00      	cmp	r2, #0
 801b1e0:	f340 80b2 	ble.w	801b348 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b1e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b1ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	dd0c      	ble.n	801b20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b1f4:	1405      	asrs	r5, r0, #16
 801b1f6:	d405      	bmi.n	801b204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b1f8:	4575      	cmp	r5, lr
 801b1fa:	da03      	bge.n	801b204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b1fc:	1415      	asrs	r5, r2, #16
 801b1fe:	d401      	bmi.n	801b204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b200:	4545      	cmp	r5, r8
 801b202:	db05      	blt.n	801b210 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b204:	4460      	add	r0, ip
 801b206:	443a      	add	r2, r7
 801b208:	3b01      	subs	r3, #1
 801b20a:	3403      	adds	r4, #3
 801b20c:	e7f0      	b.n	801b1f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b20e:	d03d      	beq.n	801b28c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b210:	1e5d      	subs	r5, r3, #1
 801b212:	fb0c 0905 	mla	r9, ip, r5, r0
 801b216:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b21a:	d42c      	bmi.n	801b276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b21c:	45f1      	cmp	r9, lr
 801b21e:	da2a      	bge.n	801b276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b220:	fb07 2505 	mla	r5, r7, r5, r2
 801b224:	142d      	asrs	r5, r5, #16
 801b226:	d426      	bmi.n	801b276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b228:	4545      	cmp	r5, r8
 801b22a:	da24      	bge.n	801b276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b22c:	1ce5      	adds	r5, r4, #3
 801b22e:	469a      	mov	sl, r3
 801b230:	f1ba 0f00 	cmp.w	sl, #0
 801b234:	f105 0503 	add.w	r5, r5, #3
 801b238:	dd23      	ble.n	801b282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b23a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b23e:	9902      	ldr	r1, [sp, #8]
 801b240:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b244:	443a      	add	r2, r7
 801b246:	fb0e 1909 	mla	r9, lr, r9, r1
 801b24a:	4460      	add	r0, ip
 801b24c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b250:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b254:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b258:	eb06 0b09 	add.w	fp, r6, r9
 801b25c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b260:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b264:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b268:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b26c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b270:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b274:	e7dc      	b.n	801b230 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b276:	2500      	movs	r5, #0
 801b278:	eba3 0905 	sub.w	r9, r3, r5
 801b27c:	f1b9 0f00 	cmp.w	r9, #0
 801b280:	dc3c      	bgt.n	801b2fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b28a:	441c      	add	r4, r3
 801b28c:	9b01      	ldr	r3, [sp, #4]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	dd5a      	ble.n	801b348 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b292:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b298:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b29c:	eeb0 6a62 	vmov.f32	s12, s5
 801b2a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b2a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b2a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2ac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b2b0:	eeb0 6a43 	vmov.f32	s12, s6
 801b2b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2b8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2d4:	ee12 2a90 	vmov	r2, s5
 801b2d8:	eef0 2a47 	vmov.f32	s5, s14
 801b2dc:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2e0:	ee13 2a10 	vmov	r2, s6
 801b2e4:	eeb0 3a67 	vmov.f32	s6, s15
 801b2e8:	fb92 f7f3 	sdiv	r7, r2, r3
 801b2ec:	9b01      	ldr	r3, [sp, #4]
 801b2ee:	9a03      	ldr	r2, [sp, #12]
 801b2f0:	3b01      	subs	r3, #1
 801b2f2:	9301      	str	r3, [sp, #4]
 801b2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2f6:	bf08      	it	eq
 801b2f8:	4613      	moveq	r3, r2
 801b2fa:	e76c      	b.n	801b1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b2fc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b300:	d41e      	bmi.n	801b340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b302:	45f2      	cmp	sl, lr
 801b304:	da1c      	bge.n	801b340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b306:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b30a:	d419      	bmi.n	801b340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b30c:	45c1      	cmp	r9, r8
 801b30e:	da17      	bge.n	801b340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b310:	9902      	ldr	r1, [sp, #8]
 801b312:	fb0e 1909 	mla	r9, lr, r9, r1
 801b316:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b31a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b31e:	f816 b009 	ldrb.w	fp, [r6, r9]
 801b322:	eb06 0a09 	add.w	sl, r6, r9
 801b326:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801b32a:	f804 b009 	strb.w	fp, [r4, r9]
 801b32e:	44a1      	add	r9, r4
 801b330:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b334:	f889 b001 	strb.w	fp, [r9, #1]
 801b338:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b33c:	f889 a002 	strb.w	sl, [r9, #2]
 801b340:	4460      	add	r0, ip
 801b342:	443a      	add	r2, r7
 801b344:	3501      	adds	r5, #1
 801b346:	e797      	b.n	801b278 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801b348:	b005      	add	sp, #20
 801b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b34e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b352:	b087      	sub	sp, #28
 801b354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b358:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b35a:	9204      	str	r2, [sp, #16]
 801b35c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b360:	6870      	ldr	r0, [r6, #4]
 801b362:	9205      	str	r2, [sp, #20]
 801b364:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b366:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b36a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b36e:	9101      	str	r1, [sp, #4]
 801b370:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b374:	fb00 2505 	mla	r5, r0, r5, r2
 801b378:	6832      	ldr	r2, [r6, #0]
 801b37a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b37e:	4415      	add	r5, r2
 801b380:	6822      	ldr	r2, [r4, #0]
 801b382:	9202      	str	r2, [sp, #8]
 801b384:	6862      	ldr	r2, [r4, #4]
 801b386:	3204      	adds	r2, #4
 801b388:	9203      	str	r2, [sp, #12]
 801b38a:	9a01      	ldr	r2, [sp, #4]
 801b38c:	2a00      	cmp	r2, #0
 801b38e:	dc03      	bgt.n	801b398 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b390:	9a04      	ldr	r2, [sp, #16]
 801b392:	2a00      	cmp	r2, #0
 801b394:	f340 8124 	ble.w	801b5e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b39a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b39e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b3a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	dd0e      	ble.n	801b3c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b3a8:	1422      	asrs	r2, r4, #16
 801b3aa:	d405      	bmi.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b3ac:	4572      	cmp	r2, lr
 801b3ae:	da03      	bge.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b3b0:	1402      	asrs	r2, r0, #16
 801b3b2:	d401      	bmi.n	801b3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b3b4:	4542      	cmp	r2, r8
 801b3b6:	db07      	blt.n	801b3c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b3b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3ba:	3b01      	subs	r3, #1
 801b3bc:	3503      	adds	r5, #3
 801b3be:	4414      	add	r4, r2
 801b3c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3c2:	4410      	add	r0, r2
 801b3c4:	e7ee      	b.n	801b3a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b3c6:	d010      	beq.n	801b3ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b3c8:	1e5a      	subs	r2, r3, #1
 801b3ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b3cc:	fb06 4602 	mla	r6, r6, r2, r4
 801b3d0:	1436      	asrs	r6, r6, #16
 801b3d2:	d546      	bpl.n	801b462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801b3d4:	4699      	mov	r9, r3
 801b3d6:	462f      	mov	r7, r5
 801b3d8:	f1b9 0f00 	cmp.w	r9, #0
 801b3dc:	f300 80a5 	bgt.w	801b52a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b3e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3e8:	441d      	add	r5, r3
 801b3ea:	9b01      	ldr	r3, [sp, #4]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	f340 80f7 	ble.w	801b5e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b3f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3fc:	eeb0 6a62 	vmov.f32	s12, s5
 801b400:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b404:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b408:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b40c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b410:	eeb0 6a43 	vmov.f32	s12, s6
 801b414:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b418:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b41c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b420:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b424:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b428:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b42c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b430:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b434:	ee12 2a90 	vmov	r2, s5
 801b438:	eef0 2a47 	vmov.f32	s5, s14
 801b43c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b440:	ee13 2a10 	vmov	r2, s6
 801b444:	9313      	str	r3, [sp, #76]	; 0x4c
 801b446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b448:	eeb0 3a67 	vmov.f32	s6, s15
 801b44c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b450:	9314      	str	r3, [sp, #80]	; 0x50
 801b452:	9b01      	ldr	r3, [sp, #4]
 801b454:	9a04      	ldr	r2, [sp, #16]
 801b456:	3b01      	subs	r3, #1
 801b458:	9301      	str	r3, [sp, #4]
 801b45a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b45c:	bf08      	it	eq
 801b45e:	4613      	moveq	r3, r2
 801b460:	e793      	b.n	801b38a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b462:	4576      	cmp	r6, lr
 801b464:	dab6      	bge.n	801b3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b466:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b468:	fb06 0202 	mla	r2, r6, r2, r0
 801b46c:	1412      	asrs	r2, r2, #16
 801b46e:	d4b1      	bmi.n	801b3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b470:	4542      	cmp	r2, r8
 801b472:	daaf      	bge.n	801b3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b474:	1cef      	adds	r7, r5, #3
 801b476:	4699      	mov	r9, r3
 801b478:	f1b9 0f00 	cmp.w	r9, #0
 801b47c:	ddb0      	ble.n	801b3e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b47e:	9902      	ldr	r1, [sp, #8]
 801b480:	1402      	asrs	r2, r0, #16
 801b482:	1426      	asrs	r6, r4, #16
 801b484:	fb0e 1202 	mla	r2, lr, r2, r1
 801b488:	9903      	ldr	r1, [sp, #12]
 801b48a:	5d92      	ldrb	r2, [r2, r6]
 801b48c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b490:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b494:	d041      	beq.n	801b51a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b496:	9a05      	ldr	r2, [sp, #20]
 801b498:	fa5f fb86 	uxtb.w	fp, r6
 801b49c:	fb02 fc0c 	mul.w	ip, r2, ip
 801b4a0:	f10c 0201 	add.w	r2, ip, #1
 801b4a4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b4a8:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b4ac:	1212      	asrs	r2, r2, #8
 801b4ae:	fa1f fa82 	uxth.w	sl, r2
 801b4b2:	43d2      	mvns	r2, r2
 801b4b4:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4b8:	b2d2      	uxtb	r2, r2
 801b4ba:	fb0c bc02 	mla	ip, ip, r2, fp
 801b4be:	fa1f fc8c 	uxth.w	ip, ip
 801b4c2:	f10c 0b01 	add.w	fp, ip, #1
 801b4c6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b4ca:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b4ce:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b4d2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b4da:	fb16 fa0a 	smulbb	sl, r6, sl
 801b4de:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b4e2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b4e6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b4ea:	fb06 aa02 	mla	sl, r6, r2, sl
 801b4ee:	fb0c bc02 	mla	ip, ip, r2, fp
 801b4f2:	fa1f fa8a 	uxth.w	sl, sl
 801b4f6:	fa1f fc8c 	uxth.w	ip, ip
 801b4fa:	f10a 0601 	add.w	r6, sl, #1
 801b4fe:	f10c 0b01 	add.w	fp, ip, #1
 801b502:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b506:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b50a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b50e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b512:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b516:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b51a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b51c:	3703      	adds	r7, #3
 801b51e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b522:	4414      	add	r4, r2
 801b524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b526:	4410      	add	r0, r2
 801b528:	e7a6      	b.n	801b478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b52a:	1426      	asrs	r6, r4, #16
 801b52c:	d450      	bmi.n	801b5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b52e:	4576      	cmp	r6, lr
 801b530:	da4e      	bge.n	801b5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b532:	1402      	asrs	r2, r0, #16
 801b534:	d44c      	bmi.n	801b5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b536:	4542      	cmp	r2, r8
 801b538:	da4a      	bge.n	801b5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b53a:	9902      	ldr	r1, [sp, #8]
 801b53c:	fb0e 1202 	mla	r2, lr, r2, r1
 801b540:	9903      	ldr	r1, [sp, #12]
 801b542:	5d92      	ldrb	r2, [r2, r6]
 801b544:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b548:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b54c:	d040      	beq.n	801b5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b54e:	9a05      	ldr	r2, [sp, #20]
 801b550:	fa5f fb86 	uxtb.w	fp, r6
 801b554:	fb02 fc0c 	mul.w	ip, r2, ip
 801b558:	f10c 0201 	add.w	r2, ip, #1
 801b55c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b560:	f897 c000 	ldrb.w	ip, [r7]
 801b564:	1212      	asrs	r2, r2, #8
 801b566:	fa1f fa82 	uxth.w	sl, r2
 801b56a:	43d2      	mvns	r2, r2
 801b56c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b570:	b2d2      	uxtb	r2, r2
 801b572:	fb0c bc02 	mla	ip, ip, r2, fp
 801b576:	fa1f fc8c 	uxth.w	ip, ip
 801b57a:	f10c 0b01 	add.w	fp, ip, #1
 801b57e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b582:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b586:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b58a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b58e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b592:	fb16 fa0a 	smulbb	sl, r6, sl
 801b596:	78be      	ldrb	r6, [r7, #2]
 801b598:	f887 c000 	strb.w	ip, [r7]
 801b59c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801b5a0:	fb06 aa02 	mla	sl, r6, r2, sl
 801b5a4:	fb0c bc02 	mla	ip, ip, r2, fp
 801b5a8:	fa1f fa8a 	uxth.w	sl, sl
 801b5ac:	fa1f fc8c 	uxth.w	ip, ip
 801b5b0:	f10a 0601 	add.w	r6, sl, #1
 801b5b4:	f10c 0b01 	add.w	fp, ip, #1
 801b5b8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b5bc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b5c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b5c4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b5c8:	f887 a002 	strb.w	sl, [r7, #2]
 801b5cc:	f887 c001 	strb.w	ip, [r7, #1]
 801b5d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5d2:	3703      	adds	r7, #3
 801b5d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801b5d8:	4414      	add	r4, r2
 801b5da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5dc:	4410      	add	r0, r2
 801b5de:	e6fb      	b.n	801b3d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b5e0:	b007      	add	sp, #28
 801b5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ea:	b085      	sub	sp, #20
 801b5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b5f2:	9203      	str	r2, [sp, #12]
 801b5f4:	6870      	ldr	r0, [r6, #4]
 801b5f6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b5f8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b5fc:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b600:	9100      	str	r1, [sp, #0]
 801b602:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b606:	fb00 2404 	mla	r4, r0, r4, r2
 801b60a:	6832      	ldr	r2, [r6, #0]
 801b60c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b610:	4414      	add	r4, r2
 801b612:	682a      	ldr	r2, [r5, #0]
 801b614:	9201      	str	r2, [sp, #4]
 801b616:	686a      	ldr	r2, [r5, #4]
 801b618:	3204      	adds	r2, #4
 801b61a:	9202      	str	r2, [sp, #8]
 801b61c:	9a00      	ldr	r2, [sp, #0]
 801b61e:	2a00      	cmp	r2, #0
 801b620:	dc03      	bgt.n	801b62a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801b622:	9a03      	ldr	r2, [sp, #12]
 801b624:	2a00      	cmp	r2, #0
 801b626:	f340 8131 	ble.w	801b88c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b62a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b62c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b630:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b632:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b636:	2b00      	cmp	r3, #0
 801b638:	dd0e      	ble.n	801b658 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b63a:	1405      	asrs	r5, r0, #16
 801b63c:	d405      	bmi.n	801b64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b63e:	4575      	cmp	r5, lr
 801b640:	da03      	bge.n	801b64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b642:	1415      	asrs	r5, r2, #16
 801b644:	d401      	bmi.n	801b64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b646:	4545      	cmp	r5, r8
 801b648:	db07      	blt.n	801b65a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b64a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b64c:	3b01      	subs	r3, #1
 801b64e:	3403      	adds	r4, #3
 801b650:	4428      	add	r0, r5
 801b652:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b654:	442a      	add	r2, r5
 801b656:	e7ee      	b.n	801b636 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801b658:	d06f      	beq.n	801b73a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801b65a:	1e5d      	subs	r5, r3, #1
 801b65c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b65e:	fb06 0605 	mla	r6, r6, r5, r0
 801b662:	1436      	asrs	r6, r6, #16
 801b664:	d460      	bmi.n	801b728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b666:	4576      	cmp	r6, lr
 801b668:	da5e      	bge.n	801b728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b66a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b66c:	fb06 2505 	mla	r5, r6, r5, r2
 801b670:	142d      	asrs	r5, r5, #16
 801b672:	d459      	bmi.n	801b728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b674:	4545      	cmp	r5, r8
 801b676:	da57      	bge.n	801b728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b678:	1ce5      	adds	r5, r4, #3
 801b67a:	469a      	mov	sl, r3
 801b67c:	f1ba 0f00 	cmp.w	sl, #0
 801b680:	dd56      	ble.n	801b730 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801b682:	9901      	ldr	r1, [sp, #4]
 801b684:	1416      	asrs	r6, r2, #16
 801b686:	1407      	asrs	r7, r0, #16
 801b688:	fb0e 1606 	mla	r6, lr, r6, r1
 801b68c:	9902      	ldr	r1, [sp, #8]
 801b68e:	5df6      	ldrb	r6, [r6, r7]
 801b690:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801b694:	0e37      	lsrs	r7, r6, #24
 801b696:	2fff      	cmp	r7, #255	; 0xff
 801b698:	f000 80ef 	beq.w	801b87a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801b69c:	fa5f fc87 	uxtb.w	ip, r7
 801b6a0:	b3d7      	cbz	r7, 801b718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b6a2:	fa1f f78c 	uxth.w	r7, ip
 801b6a6:	ea6f 0c0c 	mvn.w	ip, ip
 801b6aa:	fa5f fb86 	uxtb.w	fp, r6
 801b6ae:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b6b2:	fa5f fc8c 	uxtb.w	ip, ip
 801b6b6:	fb1b fb07 	smulbb	fp, fp, r7
 801b6ba:	fb09 b90c 	mla	r9, r9, ip, fp
 801b6be:	fa1f f989 	uxth.w	r9, r9
 801b6c2:	f109 0b01 	add.w	fp, r9, #1
 801b6c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6ca:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b6ce:	fb1b fb0c 	smulbb	fp, fp, ip
 801b6d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6d6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b6da:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b6de:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b6e2:	fb09 b907 	mla	r9, r9, r7, fp
 801b6e6:	fa1f f989 	uxth.w	r9, r9
 801b6ea:	f109 0b01 	add.w	fp, r9, #1
 801b6ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6f6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b6fa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b6fe:	fb19 fc0c 	smulbb	ip, r9, ip
 801b702:	fb06 c607 	mla	r6, r6, r7, ip
 801b706:	b2b6      	uxth	r6, r6
 801b708:	f106 0c01 	add.w	ip, r6, #1
 801b70c:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801b710:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b714:	f805 cc01 	strb.w	ip, [r5, #-1]
 801b718:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b71a:	3503      	adds	r5, #3
 801b71c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b720:	4408      	add	r0, r1
 801b722:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b724:	440a      	add	r2, r1
 801b726:	e7a9      	b.n	801b67c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801b728:	2600      	movs	r6, #0
 801b72a:	1b9d      	subs	r5, r3, r6
 801b72c:	2d00      	cmp	r5, #0
 801b72e:	dc40      	bgt.n	801b7b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b738:	441c      	add	r4, r3
 801b73a:	9b00      	ldr	r3, [sp, #0]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	f340 80a5 	ble.w	801b88c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801b742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b748:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b74c:	eeb0 6a62 	vmov.f32	s12, s5
 801b750:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b754:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b758:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b75c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b760:	eeb0 6a43 	vmov.f32	s12, s6
 801b764:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b768:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b76c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b770:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b774:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b778:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b77c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b780:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b784:	ee12 2a90 	vmov	r2, s5
 801b788:	eef0 2a47 	vmov.f32	s5, s14
 801b78c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b790:	ee13 2a10 	vmov	r2, s6
 801b794:	9311      	str	r3, [sp, #68]	; 0x44
 801b796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b798:	eeb0 3a67 	vmov.f32	s6, s15
 801b79c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7a0:	9312      	str	r3, [sp, #72]	; 0x48
 801b7a2:	9b00      	ldr	r3, [sp, #0]
 801b7a4:	9a03      	ldr	r2, [sp, #12]
 801b7a6:	3b01      	subs	r3, #1
 801b7a8:	9300      	str	r3, [sp, #0]
 801b7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7ac:	bf08      	it	eq
 801b7ae:	4613      	moveq	r3, r2
 801b7b0:	e734      	b.n	801b61c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b7b2:	1407      	asrs	r7, r0, #16
 801b7b4:	d450      	bmi.n	801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7b6:	4577      	cmp	r7, lr
 801b7b8:	da4e      	bge.n	801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7ba:	1415      	asrs	r5, r2, #16
 801b7bc:	d44c      	bmi.n	801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7be:	4545      	cmp	r5, r8
 801b7c0:	da4a      	bge.n	801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7c2:	9901      	ldr	r1, [sp, #4]
 801b7c4:	fb0e 1505 	mla	r5, lr, r5, r1
 801b7c8:	9902      	ldr	r1, [sp, #8]
 801b7ca:	5ded      	ldrb	r5, [r5, r7]
 801b7cc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801b7d0:	0e2f      	lsrs	r7, r5, #24
 801b7d2:	2fff      	cmp	r7, #255	; 0xff
 801b7d4:	d046      	beq.n	801b864 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801b7d6:	fa5f f987 	uxtb.w	r9, r7
 801b7da:	b3ef      	cbz	r7, 801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b7dc:	fa1f fc89 	uxth.w	ip, r9
 801b7e0:	ea6f 0909 	mvn.w	r9, r9
 801b7e4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b7e8:	fa5f fb85 	uxtb.w	fp, r5
 801b7ec:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b7f0:	fa5f f989 	uxtb.w	r9, r9
 801b7f4:	fb1b fb0c 	smulbb	fp, fp, ip
 801b7f8:	fb0a ba09 	mla	sl, sl, r9, fp
 801b7fc:	fa1f fa8a 	uxth.w	sl, sl
 801b800:	f10a 0b01 	add.w	fp, sl, #1
 801b804:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b808:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b80c:	f804 a007 	strb.w	sl, [r4, r7]
 801b810:	4427      	add	r7, r4
 801b812:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b816:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b81a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b81e:	fb1b fb09 	smulbb	fp, fp, r9
 801b822:	fb0a ba0c 	mla	sl, sl, ip, fp
 801b826:	fa1f fa8a 	uxth.w	sl, sl
 801b82a:	f10a 0b01 	add.w	fp, sl, #1
 801b82e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b832:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b836:	f887 a001 	strb.w	sl, [r7, #1]
 801b83a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b83e:	fb1a f909 	smulbb	r9, sl, r9
 801b842:	fb05 950c 	mla	r5, r5, ip, r9
 801b846:	b2ad      	uxth	r5, r5
 801b848:	f105 0901 	add.w	r9, r5, #1
 801b84c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b850:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b854:	f887 9002 	strb.w	r9, [r7, #2]
 801b858:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b85a:	3601      	adds	r6, #1
 801b85c:	4408      	add	r0, r1
 801b85e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b860:	440a      	add	r2, r1
 801b862:	e762      	b.n	801b72a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801b864:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b868:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801b86c:	55e5      	strb	r5, [r4, r7]
 801b86e:	4427      	add	r7, r4
 801b870:	0c2d      	lsrs	r5, r5, #16
 801b872:	f887 c001 	strb.w	ip, [r7, #1]
 801b876:	70bd      	strb	r5, [r7, #2]
 801b878:	e7ee      	b.n	801b858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b87a:	0a37      	lsrs	r7, r6, #8
 801b87c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b880:	0c36      	lsrs	r6, r6, #16
 801b882:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b886:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b88a:	e745      	b.n	801b718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b88c:	b005      	add	sp, #20
 801b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b892 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b896:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b898:	9201      	str	r2, [sp, #4]
 801b89a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b89e:	6870      	ldr	r0, [r6, #4]
 801b8a0:	9200      	str	r2, [sp, #0]
 801b8a2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b8a6:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801b8aa:	fa1f fc85 	uxth.w	ip, r5
 801b8ae:	43ed      	mvns	r5, r5
 801b8b0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b8b4:	b2ed      	uxtb	r5, r5
 801b8b6:	fb00 2404 	mla	r4, r0, r4, r2
 801b8ba:	6832      	ldr	r2, [r6, #0]
 801b8bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8c0:	4414      	add	r4, r2
 801b8c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b8c4:	f8d2 8000 	ldr.w	r8, [r2]
 801b8c8:	2900      	cmp	r1, #0
 801b8ca:	dc03      	bgt.n	801b8d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801b8cc:	9a01      	ldr	r2, [sp, #4]
 801b8ce:	2a00      	cmp	r2, #0
 801b8d0:	f340 8104 	ble.w	801badc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	dd0f      	ble.n	801b904 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b8e4:	1406      	asrs	r6, r0, #16
 801b8e6:	d406      	bmi.n	801b8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8e8:	4576      	cmp	r6, lr
 801b8ea:	da04      	bge.n	801b8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8ec:	1416      	asrs	r6, r2, #16
 801b8ee:	d402      	bmi.n	801b8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b8f0:	9f00      	ldr	r7, [sp, #0]
 801b8f2:	42be      	cmp	r6, r7
 801b8f4:	db07      	blt.n	801b906 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b8f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b8f8:	3b01      	subs	r3, #1
 801b8fa:	3403      	adds	r4, #3
 801b8fc:	4430      	add	r0, r6
 801b8fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b900:	4432      	add	r2, r6
 801b902:	e7ed      	b.n	801b8e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801b904:	d05f      	beq.n	801b9c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801b906:	1e5e      	subs	r6, r3, #1
 801b908:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b90a:	fb07 0706 	mla	r7, r7, r6, r0
 801b90e:	143f      	asrs	r7, r7, #16
 801b910:	d450      	bmi.n	801b9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b912:	4577      	cmp	r7, lr
 801b914:	da4e      	bge.n	801b9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b916:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b918:	fb07 2606 	mla	r6, r7, r6, r2
 801b91c:	1436      	asrs	r6, r6, #16
 801b91e:	d449      	bmi.n	801b9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b920:	9f00      	ldr	r7, [sp, #0]
 801b922:	42be      	cmp	r6, r7
 801b924:	da46      	bge.n	801b9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b926:	1ce6      	adds	r6, r4, #3
 801b928:	4699      	mov	r9, r3
 801b92a:	f1b9 0f00 	cmp.w	r9, #0
 801b92e:	f106 0603 	add.w	r6, r6, #3
 801b932:	dd43      	ble.n	801b9bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b934:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b938:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b93c:	1417      	asrs	r7, r2, #16
 801b93e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b942:	fb1b fb05 	smulbb	fp, fp, r5
 801b946:	fb0e a707 	mla	r7, lr, r7, sl
 801b94a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b94e:	eb08 0a07 	add.w	sl, r8, r7
 801b952:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b956:	fb07 b70c 	mla	r7, r7, ip, fp
 801b95a:	b2bf      	uxth	r7, r7
 801b95c:	f107 0b01 	add.w	fp, r7, #1
 801b960:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b964:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b968:	fb1b fb05 	smulbb	fp, fp, r5
 801b96c:	123f      	asrs	r7, r7, #8
 801b96e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b972:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b976:	fb07 b70c 	mla	r7, r7, ip, fp
 801b97a:	b2bf      	uxth	r7, r7
 801b97c:	f107 0b01 	add.w	fp, r7, #1
 801b980:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b984:	123f      	asrs	r7, r7, #8
 801b986:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b98a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b98e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b992:	fb1a fa05 	smulbb	sl, sl, r5
 801b996:	fb07 a70c 	mla	r7, r7, ip, sl
 801b99a:	b2bf      	uxth	r7, r7
 801b99c:	f107 0a01 	add.w	sl, r7, #1
 801b9a0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b9a4:	123f      	asrs	r7, r7, #8
 801b9a6:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b9aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b9ac:	4438      	add	r0, r7
 801b9ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b9b0:	443a      	add	r2, r7
 801b9b2:	e7ba      	b.n	801b92a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b9b4:	2700      	movs	r7, #0
 801b9b6:	1bde      	subs	r6, r3, r7
 801b9b8:	2e00      	cmp	r6, #0
 801b9ba:	dc3f      	bgt.n	801ba3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b9bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9c4:	441c      	add	r4, r3
 801b9c6:	2900      	cmp	r1, #0
 801b9c8:	f340 8088 	ble.w	801badc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b9cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9d6:	3901      	subs	r1, #1
 801b9d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9dc:	eef0 6a62 	vmov.f32	s13, s5
 801b9e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b9e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9ec:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801b9f0:	eef0 6a43 	vmov.f32	s13, s6
 801b9f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9f8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801b9fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba14:	ee12 2a90 	vmov	r2, s5
 801ba18:	eef0 2a47 	vmov.f32	s5, s14
 801ba1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba20:	ee13 2a10 	vmov	r2, s6
 801ba24:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba28:	eeb0 3a67 	vmov.f32	s6, s15
 801ba2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba30:	9a01      	ldr	r2, [sp, #4]
 801ba32:	9310      	str	r3, [sp, #64]	; 0x40
 801ba34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba36:	bf08      	it	eq
 801ba38:	4613      	moveq	r3, r2
 801ba3a:	e745      	b.n	801b8c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801ba3c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ba40:	d446      	bmi.n	801bad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba42:	45f2      	cmp	sl, lr
 801ba44:	da44      	bge.n	801bad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba46:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ba4a:	d441      	bmi.n	801bad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba4c:	9e00      	ldr	r6, [sp, #0]
 801ba4e:	45b1      	cmp	r9, r6
 801ba50:	da3e      	bge.n	801bad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801ba52:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ba56:	fb0e a909 	mla	r9, lr, r9, sl
 801ba5a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ba5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ba62:	fb1b fb05 	smulbb	fp, fp, r5
 801ba66:	eb08 0a09 	add.w	sl, r8, r9
 801ba6a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801ba6e:	fb09 b90c 	mla	r9, r9, ip, fp
 801ba72:	fa1f f989 	uxth.w	r9, r9
 801ba76:	f109 0b01 	add.w	fp, r9, #1
 801ba7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ba7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba82:	f804 9006 	strb.w	r9, [r4, r6]
 801ba86:	4426      	add	r6, r4
 801ba88:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ba8c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ba90:	fb1b fb05 	smulbb	fp, fp, r5
 801ba94:	fb09 b90c 	mla	r9, r9, ip, fp
 801ba98:	fa1f f989 	uxth.w	r9, r9
 801ba9c:	f109 0b01 	add.w	fp, r9, #1
 801baa0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801baa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801baa8:	f886 9001 	strb.w	r9, [r6, #1]
 801baac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801bab0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bab4:	fb1a fa05 	smulbb	sl, sl, r5
 801bab8:	fb09 a90c 	mla	r9, r9, ip, sl
 801babc:	fa1f f989 	uxth.w	r9, r9
 801bac0:	f109 0a01 	add.w	sl, r9, #1
 801bac4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801bac8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bacc:	f886 9002 	strb.w	r9, [r6, #2]
 801bad0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bad2:	3701      	adds	r7, #1
 801bad4:	4430      	add	r0, r6
 801bad6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bad8:	4432      	add	r2, r6
 801bada:	e76c      	b.n	801b9b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801badc:	b003      	add	sp, #12
 801bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bae2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801baec:	9201      	str	r2, [sp, #4]
 801baee:	6868      	ldr	r0, [r5, #4]
 801baf0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801baf4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801baf8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bafc:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801bb00:	fb00 2404 	mla	r4, r0, r4, r2
 801bb04:	682a      	ldr	r2, [r5, #0]
 801bb06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bb0a:	4414      	add	r4, r2
 801bb0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bb0e:	f8d2 9000 	ldr.w	r9, [r2]
 801bb12:	2900      	cmp	r1, #0
 801bb14:	dc03      	bgt.n	801bb1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bb16:	9a01      	ldr	r2, [sp, #4]
 801bb18:	2a00      	cmp	r2, #0
 801bb1a:	f340 80a8 	ble.w	801bc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801bb1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb26:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	dd0c      	ble.n	801bb48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bb2e:	1405      	asrs	r5, r0, #16
 801bb30:	d405      	bmi.n	801bb3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb32:	4565      	cmp	r5, ip
 801bb34:	da03      	bge.n	801bb3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb36:	1415      	asrs	r5, r2, #16
 801bb38:	d401      	bmi.n	801bb3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bb3a:	4575      	cmp	r5, lr
 801bb3c:	db05      	blt.n	801bb4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801bb3e:	4438      	add	r0, r7
 801bb40:	4432      	add	r2, r6
 801bb42:	3b01      	subs	r3, #1
 801bb44:	3403      	adds	r4, #3
 801bb46:	e7f0      	b.n	801bb2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bb48:	d03a      	beq.n	801bbc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801bb4a:	1e5d      	subs	r5, r3, #1
 801bb4c:	fb07 0805 	mla	r8, r7, r5, r0
 801bb50:	ea5f 4828 	movs.w	r8, r8, asr #16
 801bb54:	d429      	bmi.n	801bbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb56:	45e0      	cmp	r8, ip
 801bb58:	da27      	bge.n	801bbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb5a:	fb06 2505 	mla	r5, r6, r5, r2
 801bb5e:	142d      	asrs	r5, r5, #16
 801bb60:	d423      	bmi.n	801bbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb62:	4575      	cmp	r5, lr
 801bb64:	da21      	bge.n	801bbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bb66:	f104 0803 	add.w	r8, r4, #3
 801bb6a:	469a      	mov	sl, r3
 801bb6c:	f1ba 0f00 	cmp.w	sl, #0
 801bb70:	f108 0803 	add.w	r8, r8, #3
 801bb74:	dd1f      	ble.n	801bbb6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801bb76:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801bb7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb7e:	1415      	asrs	r5, r2, #16
 801bb80:	4438      	add	r0, r7
 801bb82:	4432      	add	r2, r6
 801bb84:	fb0c b505 	mla	r5, ip, r5, fp
 801bb88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb8c:	eb09 0b05 	add.w	fp, r9, r5
 801bb90:	f819 5005 	ldrb.w	r5, [r9, r5]
 801bb94:	f808 5c06 	strb.w	r5, [r8, #-6]
 801bb98:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801bb9c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801bba0:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801bba4:	f808 5c04 	strb.w	r5, [r8, #-4]
 801bba8:	e7e0      	b.n	801bb6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bbaa:	2500      	movs	r5, #0
 801bbac:	eba3 0805 	sub.w	r8, r3, r5
 801bbb0:	f1b8 0f00 	cmp.w	r8, #0
 801bbb4:	dc38      	bgt.n	801bc28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801bbb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbbe:	441c      	add	r4, r3
 801bbc0:	2900      	cmp	r1, #0
 801bbc2:	dd54      	ble.n	801bc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801bbc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bbc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbce:	3901      	subs	r1, #1
 801bbd0:	eeb0 6a62 	vmov.f32	s12, s5
 801bbd4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bbd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bbdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbe0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801bbe4:	eeb0 6a43 	vmov.f32	s12, s6
 801bbe8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801bbf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bbf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bbfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc08:	ee12 2a90 	vmov	r2, s5
 801bc0c:	eef0 2a47 	vmov.f32	s5, s14
 801bc10:	fb92 f7f3 	sdiv	r7, r2, r3
 801bc14:	ee13 2a10 	vmov	r2, s6
 801bc18:	eeb0 3a67 	vmov.f32	s6, s15
 801bc1c:	fb92 f6f3 	sdiv	r6, r2, r3
 801bc20:	9a01      	ldr	r2, [sp, #4]
 801bc22:	bf08      	it	eq
 801bc24:	4613      	moveq	r3, r2
 801bc26:	e774      	b.n	801bb12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801bc28:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bc2c:	d41b      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc2e:	45e2      	cmp	sl, ip
 801bc30:	da19      	bge.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc32:	ea5f 4822 	movs.w	r8, r2, asr #16
 801bc36:	d416      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc38:	45f0      	cmp	r8, lr
 801bc3a:	da14      	bge.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801bc3c:	fb0c a808 	mla	r8, ip, r8, sl
 801bc40:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc44:	f819 b008 	ldrb.w	fp, [r9, r8]
 801bc48:	eb09 0a08 	add.w	sl, r9, r8
 801bc4c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801bc50:	f804 b008 	strb.w	fp, [r4, r8]
 801bc54:	44a0      	add	r8, r4
 801bc56:	f89a b001 	ldrb.w	fp, [sl, #1]
 801bc5a:	f888 b001 	strb.w	fp, [r8, #1]
 801bc5e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801bc62:	f888 a002 	strb.w	sl, [r8, #2]
 801bc66:	4438      	add	r0, r7
 801bc68:	4432      	add	r2, r6
 801bc6a:	3501      	adds	r5, #1
 801bc6c:	e79e      	b.n	801bbac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801bc6e:	b003      	add	sp, #12
 801bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc78:	b085      	sub	sp, #20
 801bc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc80:	9202      	str	r2, [sp, #8]
 801bc82:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bc86:	6860      	ldr	r0, [r4, #4]
 801bc88:	9203      	str	r2, [sp, #12]
 801bc8a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bc8e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bc92:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bc96:	fb00 2505 	mla	r5, r0, r5, r2
 801bc9a:	6822      	ldr	r2, [r4, #0]
 801bc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bca0:	4415      	add	r5, r2
 801bca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bca4:	6812      	ldr	r2, [r2, #0]
 801bca6:	9201      	str	r2, [sp, #4]
 801bca8:	2900      	cmp	r1, #0
 801bcaa:	dc03      	bgt.n	801bcb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801bcac:	9a02      	ldr	r2, [sp, #8]
 801bcae:	2a00      	cmp	r2, #0
 801bcb0:	f340 811c 	ble.w	801beec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bcb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcb6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bcba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bcbc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	dd0e      	ble.n	801bce2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bcc4:	1422      	asrs	r2, r4, #16
 801bcc6:	d405      	bmi.n	801bcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bcc8:	4572      	cmp	r2, lr
 801bcca:	da03      	bge.n	801bcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bccc:	1402      	asrs	r2, r0, #16
 801bcce:	d401      	bmi.n	801bcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bcd0:	4542      	cmp	r2, r8
 801bcd2:	db07      	blt.n	801bce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801bcd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	3503      	adds	r5, #3
 801bcda:	4414      	add	r4, r2
 801bcdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcde:	4410      	add	r0, r2
 801bce0:	e7ee      	b.n	801bcc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bce2:	d072      	beq.n	801bdca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801bce4:	1e5a      	subs	r2, r3, #1
 801bce6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bce8:	fb06 4602 	mla	r6, r6, r2, r4
 801bcec:	1436      	asrs	r6, r6, #16
 801bcee:	d461      	bmi.n	801bdb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bcf0:	4576      	cmp	r6, lr
 801bcf2:	da5f      	bge.n	801bdb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bcf4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bcf6:	fb06 0202 	mla	r2, r6, r2, r0
 801bcfa:	1412      	asrs	r2, r2, #16
 801bcfc:	d45a      	bmi.n	801bdb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bcfe:	4542      	cmp	r2, r8
 801bd00:	da58      	bge.n	801bdb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801bd02:	1cef      	adds	r7, r5, #3
 801bd04:	4699      	mov	r9, r3
 801bd06:	f1b9 0f00 	cmp.w	r9, #0
 801bd0a:	dd59      	ble.n	801bdc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801bd0c:	1426      	asrs	r6, r4, #16
 801bd0e:	1402      	asrs	r2, r0, #16
 801bd10:	fb0e 6202 	mla	r2, lr, r2, r6
 801bd14:	9e01      	ldr	r6, [sp, #4]
 801bd16:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bd1a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bd1e:	d041      	beq.n	801bda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801bd20:	9a03      	ldr	r2, [sp, #12]
 801bd22:	fa5f fb86 	uxtb.w	fp, r6
 801bd26:	fb02 fc0c 	mul.w	ip, r2, ip
 801bd2a:	f10c 0201 	add.w	r2, ip, #1
 801bd2e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bd32:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bd36:	1212      	asrs	r2, r2, #8
 801bd38:	fa1f fa82 	uxth.w	sl, r2
 801bd3c:	43d2      	mvns	r2, r2
 801bd3e:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd42:	b2d2      	uxtb	r2, r2
 801bd44:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd48:	fa1f fc8c 	uxth.w	ip, ip
 801bd4c:	f10c 0b01 	add.w	fp, ip, #1
 801bd50:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd54:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bd58:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd60:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd64:	fb16 fa0a 	smulbb	sl, r6, sl
 801bd68:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bd6c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bd70:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bd74:	fb06 aa02 	mla	sl, r6, r2, sl
 801bd78:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd7c:	fa1f fa8a 	uxth.w	sl, sl
 801bd80:	fa1f fc8c 	uxth.w	ip, ip
 801bd84:	f10a 0601 	add.w	r6, sl, #1
 801bd88:	f10c 0b01 	add.w	fp, ip, #1
 801bd8c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bd90:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd94:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd98:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd9c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bda0:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bda4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bda6:	3703      	adds	r7, #3
 801bda8:	f109 39ff 	add.w	r9, r9, #4294967295
 801bdac:	4414      	add	r4, r2
 801bdae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bdb0:	4410      	add	r0, r2
 801bdb2:	e7a8      	b.n	801bd06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bdb4:	f04f 0c00 	mov.w	ip, #0
 801bdb8:	eba3 020c 	sub.w	r2, r3, ip
 801bdbc:	2a00      	cmp	r2, #0
 801bdbe:	dc3d      	bgt.n	801be3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801bdc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdc8:	441d      	add	r5, r3
 801bdca:	2900      	cmp	r1, #0
 801bdcc:	f340 808e 	ble.w	801beec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bdd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bdda:	3901      	subs	r1, #1
 801bddc:	eeb0 6a62 	vmov.f32	s12, s5
 801bde0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bde4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bde8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bdf0:	eeb0 6a43 	vmov.f32	s12, s6
 801bdf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdf8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bdfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be14:	ee12 2a90 	vmov	r2, s5
 801be18:	eef0 2a47 	vmov.f32	s5, s14
 801be1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801be20:	ee13 2a10 	vmov	r2, s6
 801be24:	9311      	str	r3, [sp, #68]	; 0x44
 801be26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be28:	eeb0 3a67 	vmov.f32	s6, s15
 801be2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801be30:	9a02      	ldr	r2, [sp, #8]
 801be32:	9312      	str	r3, [sp, #72]	; 0x48
 801be34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be36:	bf08      	it	eq
 801be38:	4613      	moveq	r3, r2
 801be3a:	e735      	b.n	801bca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801be3c:	1426      	asrs	r6, r4, #16
 801be3e:	d44e      	bmi.n	801bede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be40:	4576      	cmp	r6, lr
 801be42:	da4c      	bge.n	801bede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be44:	1402      	asrs	r2, r0, #16
 801be46:	d44a      	bmi.n	801bede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be48:	4542      	cmp	r2, r8
 801be4a:	da48      	bge.n	801bede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be4c:	fb0e 6202 	mla	r2, lr, r2, r6
 801be50:	9e01      	ldr	r6, [sp, #4]
 801be52:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801be56:	0e3a      	lsrs	r2, r7, #24
 801be58:	d041      	beq.n	801bede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801be5a:	9e03      	ldr	r6, [sp, #12]
 801be5c:	fa5f fb87 	uxtb.w	fp, r7
 801be60:	4372      	muls	r2, r6
 801be62:	1c56      	adds	r6, r2, #1
 801be64:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801be68:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801be6c:	1212      	asrs	r2, r2, #8
 801be6e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801be72:	fa1f fa82 	uxth.w	sl, r2
 801be76:	43d2      	mvns	r2, r2
 801be78:	fb1b fb0a 	smulbb	fp, fp, sl
 801be7c:	b2d2      	uxtb	r2, r2
 801be7e:	fb09 b902 	mla	r9, r9, r2, fp
 801be82:	fa1f f989 	uxth.w	r9, r9
 801be86:	f109 0b01 	add.w	fp, r9, #1
 801be8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801be8e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801be92:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801be96:	fb1b fb0a 	smulbb	fp, fp, sl
 801be9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be9e:	fb17 fa0a 	smulbb	sl, r7, sl
 801bea2:	f805 9006 	strb.w	r9, [r5, r6]
 801bea6:	442e      	add	r6, r5
 801bea8:	78b7      	ldrb	r7, [r6, #2]
 801beaa:	f896 9001 	ldrb.w	r9, [r6, #1]
 801beae:	fb07 aa02 	mla	sl, r7, r2, sl
 801beb2:	fb09 b902 	mla	r9, r9, r2, fp
 801beb6:	fa1f fa8a 	uxth.w	sl, sl
 801beba:	fa1f f989 	uxth.w	r9, r9
 801bebe:	f10a 0701 	add.w	r7, sl, #1
 801bec2:	f109 0b01 	add.w	fp, r9, #1
 801bec6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801beca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bed2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bed6:	f886 a002 	strb.w	sl, [r6, #2]
 801beda:	f886 9001 	strb.w	r9, [r6, #1]
 801bede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bee0:	f10c 0c01 	add.w	ip, ip, #1
 801bee4:	4414      	add	r4, r2
 801bee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bee8:	4410      	add	r0, r2
 801beea:	e765      	b.n	801bdb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801beec:	b005      	add	sp, #20
 801beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bef6:	b085      	sub	sp, #20
 801bef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801befc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801befe:	9203      	str	r2, [sp, #12]
 801bf00:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bf04:	6860      	ldr	r0, [r4, #4]
 801bf06:	9201      	str	r2, [sp, #4]
 801bf08:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bf0c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bf10:	fb00 2505 	mla	r5, r0, r5, r2
 801bf14:	6822      	ldr	r2, [r4, #0]
 801bf16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf1a:	4415      	add	r5, r2
 801bf1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bf1e:	6812      	ldr	r2, [r2, #0]
 801bf20:	9202      	str	r2, [sp, #8]
 801bf22:	2900      	cmp	r1, #0
 801bf24:	dc03      	bgt.n	801bf2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bf26:	9a03      	ldr	r2, [sp, #12]
 801bf28:	2a00      	cmp	r2, #0
 801bf2a:	f340 8122 	ble.w	801c172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801bf2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf30:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bf34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf36:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	dd0f      	ble.n	801bf5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bf3e:	1422      	asrs	r2, r4, #16
 801bf40:	d406      	bmi.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf42:	4572      	cmp	r2, lr
 801bf44:	da04      	bge.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf46:	1402      	asrs	r2, r0, #16
 801bf48:	d402      	bmi.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801bf4a:	9e01      	ldr	r6, [sp, #4]
 801bf4c:	42b2      	cmp	r2, r6
 801bf4e:	db07      	blt.n	801bf60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bf50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf52:	3b01      	subs	r3, #1
 801bf54:	3503      	adds	r5, #3
 801bf56:	4414      	add	r4, r2
 801bf58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf5a:	4410      	add	r0, r2
 801bf5c:	e7ed      	b.n	801bf3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bf5e:	d06e      	beq.n	801c03e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801bf60:	1e5a      	subs	r2, r3, #1
 801bf62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bf64:	fb06 4602 	mla	r6, r6, r2, r4
 801bf68:	1436      	asrs	r6, r6, #16
 801bf6a:	d45d      	bmi.n	801c028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf6c:	4576      	cmp	r6, lr
 801bf6e:	da5b      	bge.n	801c028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf70:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bf72:	fb06 0202 	mla	r2, r6, r2, r0
 801bf76:	1412      	asrs	r2, r2, #16
 801bf78:	d456      	bmi.n	801c028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf7a:	9e01      	ldr	r6, [sp, #4]
 801bf7c:	42b2      	cmp	r2, r6
 801bf7e:	da53      	bge.n	801c028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf80:	1cee      	adds	r6, r5, #3
 801bf82:	469a      	mov	sl, r3
 801bf84:	f1ba 0f00 	cmp.w	sl, #0
 801bf88:	dd54      	ble.n	801c034 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf8a:	1427      	asrs	r7, r4, #16
 801bf8c:	1402      	asrs	r2, r0, #16
 801bf8e:	fb0e 7202 	mla	r2, lr, r2, r7
 801bf92:	9f02      	ldr	r7, [sp, #8]
 801bf94:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801bf98:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801bf9c:	d03c      	beq.n	801c018 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801bf9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bfa2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bfa6:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bfaa:	fa5f f28c 	uxtb.w	r2, ip
 801bfae:	b2ff      	uxtb	r7, r7
 801bfb0:	f000 80d8 	beq.w	801c164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bfb4:	fa1f f882 	uxth.w	r8, r2
 801bfb8:	43d2      	mvns	r2, r2
 801bfba:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801bfbe:	fb17 f708 	smulbb	r7, r7, r8
 801bfc2:	b2d2      	uxtb	r2, r2
 801bfc4:	fb19 f908 	smulbb	r9, r9, r8
 801bfc8:	fb0c 7702 	mla	r7, ip, r2, r7
 801bfcc:	fb1b f808 	smulbb	r8, fp, r8
 801bfd0:	b2bf      	uxth	r7, r7
 801bfd2:	f107 0c01 	add.w	ip, r7, #1
 801bfd6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801bfda:	123f      	asrs	r7, r7, #8
 801bfdc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bfe0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801bfe4:	fb07 9902 	mla	r9, r7, r2, r9
 801bfe8:	fa1f f989 	uxth.w	r9, r9
 801bfec:	f109 0701 	add.w	r7, r9, #1
 801bff0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bff4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bff8:	fb07 8802 	mla	r8, r7, r2, r8
 801bffc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c000:	fa1f f888 	uxth.w	r8, r8
 801c004:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c008:	f108 0201 	add.w	r2, r8, #1
 801c00c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c010:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c014:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c018:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c01a:	3603      	adds	r6, #3
 801c01c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c020:	4414      	add	r4, r2
 801c022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c024:	4410      	add	r0, r2
 801c026:	e7ad      	b.n	801bf84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c028:	f04f 0c00 	mov.w	ip, #0
 801c02c:	eba3 020c 	sub.w	r2, r3, ip
 801c030:	2a00      	cmp	r2, #0
 801c032:	dc3d      	bgt.n	801c0b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c03c:	441d      	add	r5, r3
 801c03e:	2900      	cmp	r1, #0
 801c040:	f340 8097 	ble.w	801c172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c044:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c04a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c04e:	3901      	subs	r1, #1
 801c050:	eeb0 6a62 	vmov.f32	s12, s5
 801c054:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c058:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c05c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c060:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c064:	eeb0 6a43 	vmov.f32	s12, s6
 801c068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c06c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c074:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c078:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c07c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c084:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c088:	ee12 2a90 	vmov	r2, s5
 801c08c:	eef0 2a47 	vmov.f32	s5, s14
 801c090:	fb92 f3f3 	sdiv	r3, r2, r3
 801c094:	ee13 2a10 	vmov	r2, s6
 801c098:	9311      	str	r3, [sp, #68]	; 0x44
 801c09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c09c:	eeb0 3a67 	vmov.f32	s6, s15
 801c0a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0a4:	9a03      	ldr	r2, [sp, #12]
 801c0a6:	9312      	str	r3, [sp, #72]	; 0x48
 801c0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0aa:	bf08      	it	eq
 801c0ac:	4613      	moveq	r3, r2
 801c0ae:	e738      	b.n	801bf22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c0b0:	1426      	asrs	r6, r4, #16
 801c0b2:	d448      	bmi.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0b4:	4576      	cmp	r6, lr
 801c0b6:	da46      	bge.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0b8:	1402      	asrs	r2, r0, #16
 801c0ba:	d444      	bmi.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0bc:	9f01      	ldr	r7, [sp, #4]
 801c0be:	42ba      	cmp	r2, r7
 801c0c0:	da41      	bge.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0c2:	fb0e 6202 	mla	r2, lr, r2, r6
 801c0c6:	9e02      	ldr	r6, [sp, #8]
 801c0c8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c0cc:	0e3a      	lsrs	r2, r7, #24
 801c0ce:	d03a      	beq.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c0d0:	2aff      	cmp	r2, #255	; 0xff
 801c0d2:	b2d6      	uxtb	r6, r2
 801c0d4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c0d8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c0dc:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c0e0:	b2ff      	uxtb	r7, r7
 801c0e2:	d037      	beq.n	801c154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c0e4:	fa1f f986 	uxth.w	r9, r6
 801c0e8:	4462      	add	r2, ip
 801c0ea:	43f6      	mvns	r6, r6
 801c0ec:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c0f0:	fb17 f709 	smulbb	r7, r7, r9
 801c0f4:	fb1a fa09 	smulbb	sl, sl, r9
 801c0f8:	b2f6      	uxtb	r6, r6
 801c0fa:	fb1b f909 	smulbb	r9, fp, r9
 801c0fe:	fb08 7706 	mla	r7, r8, r6, r7
 801c102:	b2bf      	uxth	r7, r7
 801c104:	f107 0801 	add.w	r8, r7, #1
 801c108:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c10c:	123f      	asrs	r7, r7, #8
 801c10e:	54af      	strb	r7, [r5, r2]
 801c110:	442a      	add	r2, r5
 801c112:	7857      	ldrb	r7, [r2, #1]
 801c114:	fb07 aa06 	mla	sl, r7, r6, sl
 801c118:	fa1f fa8a 	uxth.w	sl, sl
 801c11c:	f10a 0701 	add.w	r7, sl, #1
 801c120:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c124:	7897      	ldrb	r7, [r2, #2]
 801c126:	fb07 9906 	mla	r9, r7, r6, r9
 801c12a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c12e:	fa1f f989 	uxth.w	r9, r9
 801c132:	f882 a001 	strb.w	sl, [r2, #1]
 801c136:	f109 0601 	add.w	r6, r9, #1
 801c13a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c13e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c142:	f882 9002 	strb.w	r9, [r2, #2]
 801c146:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c148:	f10c 0c01 	add.w	ip, ip, #1
 801c14c:	4414      	add	r4, r2
 801c14e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c150:	4410      	add	r0, r2
 801c152:	e76b      	b.n	801c02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c154:	4462      	add	r2, ip
 801c156:	54af      	strb	r7, [r5, r2]
 801c158:	442a      	add	r2, r5
 801c15a:	f882 a001 	strb.w	sl, [r2, #1]
 801c15e:	f882 b002 	strb.w	fp, [r2, #2]
 801c162:	e7f0      	b.n	801c146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c164:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c168:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c16c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c170:	e752      	b.n	801c018 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c172:	b005      	add	sp, #20
 801c174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c178 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c17c:	b087      	sub	sp, #28
 801c17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c182:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c184:	9204      	str	r2, [sp, #16]
 801c186:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c18a:	6860      	ldr	r0, [r4, #4]
 801c18c:	9205      	str	r2, [sp, #20]
 801c18e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c192:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c196:	9101      	str	r1, [sp, #4]
 801c198:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c19c:	fb00 2505 	mla	r5, r0, r5, r2
 801c1a0:	6822      	ldr	r2, [r4, #0]
 801c1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1a6:	4415      	add	r5, r2
 801c1a8:	f10e 0201 	add.w	r2, lr, #1
 801c1ac:	f022 0201 	bic.w	r2, r2, #1
 801c1b0:	9202      	str	r2, [sp, #8]
 801c1b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c1b4:	6812      	ldr	r2, [r2, #0]
 801c1b6:	9203      	str	r2, [sp, #12]
 801c1b8:	9a01      	ldr	r2, [sp, #4]
 801c1ba:	2a00      	cmp	r2, #0
 801c1bc:	dc03      	bgt.n	801c1c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c1be:	9a04      	ldr	r2, [sp, #16]
 801c1c0:	2a00      	cmp	r2, #0
 801c1c2:	f340 8132 	ble.w	801c42a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c1c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1c8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c1cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	dd0e      	ble.n	801c1f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c1d6:	1422      	asrs	r2, r4, #16
 801c1d8:	d405      	bmi.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1da:	4596      	cmp	lr, r2
 801c1dc:	dd03      	ble.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1de:	1402      	asrs	r2, r0, #16
 801c1e0:	d401      	bmi.n	801c1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c1e2:	4542      	cmp	r2, r8
 801c1e4:	db07      	blt.n	801c1f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c1e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1e8:	3b01      	subs	r3, #1
 801c1ea:	3503      	adds	r5, #3
 801c1ec:	4414      	add	r4, r2
 801c1ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1f0:	4410      	add	r0, r2
 801c1f2:	e7ee      	b.n	801c1d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c1f4:	d010      	beq.n	801c218 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c1f6:	1e5a      	subs	r2, r3, #1
 801c1f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c1fa:	fb06 4602 	mla	r6, r6, r2, r4
 801c1fe:	1436      	asrs	r6, r6, #16
 801c200:	d546      	bpl.n	801c290 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c202:	4699      	mov	r9, r3
 801c204:	462e      	mov	r6, r5
 801c206:	f1b9 0f00 	cmp.w	r9, #0
 801c20a:	f300 80ac 	bgt.w	801c366 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c20e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c216:	441d      	add	r5, r3
 801c218:	9b01      	ldr	r3, [sp, #4]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	f340 8105 	ble.w	801c42a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c220:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c226:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c22a:	eeb0 6a62 	vmov.f32	s12, s5
 801c22e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c232:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c236:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c23a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c23e:	eeb0 6a43 	vmov.f32	s12, s6
 801c242:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c246:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c24a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c24e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c252:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c256:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c25a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c25e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c262:	ee12 2a90 	vmov	r2, s5
 801c266:	eef0 2a47 	vmov.f32	s5, s14
 801c26a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c26e:	ee13 2a10 	vmov	r2, s6
 801c272:	9313      	str	r3, [sp, #76]	; 0x4c
 801c274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c276:	eeb0 3a67 	vmov.f32	s6, s15
 801c27a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c27e:	9314      	str	r3, [sp, #80]	; 0x50
 801c280:	9b01      	ldr	r3, [sp, #4]
 801c282:	9a04      	ldr	r2, [sp, #16]
 801c284:	3b01      	subs	r3, #1
 801c286:	9301      	str	r3, [sp, #4]
 801c288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c28a:	bf08      	it	eq
 801c28c:	4613      	moveq	r3, r2
 801c28e:	e793      	b.n	801c1b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c290:	45b6      	cmp	lr, r6
 801c292:	ddb6      	ble.n	801c202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c294:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c296:	fb06 0202 	mla	r2, r6, r2, r0
 801c29a:	1412      	asrs	r2, r2, #16
 801c29c:	d4b1      	bmi.n	801c202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c29e:	4542      	cmp	r2, r8
 801c2a0:	daaf      	bge.n	801c202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c2a2:	1cee      	adds	r6, r5, #3
 801c2a4:	4699      	mov	r9, r3
 801c2a6:	f1b9 0f00 	cmp.w	r9, #0
 801c2aa:	ddb0      	ble.n	801c20e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c2ac:	1422      	asrs	r2, r4, #16
 801c2ae:	9902      	ldr	r1, [sp, #8]
 801c2b0:	1407      	asrs	r7, r0, #16
 801c2b2:	fb01 2707 	mla	r7, r1, r7, r2
 801c2b6:	9903      	ldr	r1, [sp, #12]
 801c2b8:	087a      	lsrs	r2, r7, #1
 801c2ba:	5c8a      	ldrb	r2, [r1, r2]
 801c2bc:	07f9      	lsls	r1, r7, #31
 801c2be:	bf54      	ite	pl
 801c2c0:	f002 020f 	andpl.w	r2, r2, #15
 801c2c4:	1112      	asrmi	r2, r2, #4
 801c2c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c2ca:	b2d2      	uxtb	r2, r2
 801c2cc:	2a00      	cmp	r2, #0
 801c2ce:	d042      	beq.n	801c356 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c2d0:	4957      	ldr	r1, [pc, #348]	; (801c430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c2d2:	680f      	ldr	r7, [r1, #0]
 801c2d4:	9905      	ldr	r1, [sp, #20]
 801c2d6:	fa5f fb87 	uxtb.w	fp, r7
 801c2da:	434a      	muls	r2, r1
 801c2dc:	f102 0c01 	add.w	ip, r2, #1
 801c2e0:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c2e4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c2e8:	1212      	asrs	r2, r2, #8
 801c2ea:	fa1f fa82 	uxth.w	sl, r2
 801c2ee:	43d2      	mvns	r2, r2
 801c2f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2f4:	b2d2      	uxtb	r2, r2
 801c2f6:	fb0c bc02 	mla	ip, ip, r2, fp
 801c2fa:	fa1f fc8c 	uxth.w	ip, ip
 801c2fe:	f10c 0b01 	add.w	fp, ip, #1
 801c302:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c306:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c30a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c30e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c312:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c316:	fb17 fa0a 	smulbb	sl, r7, sl
 801c31a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c31e:	f806 cc03 	strb.w	ip, [r6, #-3]
 801c322:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801c326:	fb07 aa02 	mla	sl, r7, r2, sl
 801c32a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c32e:	fa1f fa8a 	uxth.w	sl, sl
 801c332:	fa1f fc8c 	uxth.w	ip, ip
 801c336:	f10a 0701 	add.w	r7, sl, #1
 801c33a:	f10c 0b01 	add.w	fp, ip, #1
 801c33e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c342:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c346:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c34a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c34e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c352:	f806 cc02 	strb.w	ip, [r6, #-2]
 801c356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c358:	3603      	adds	r6, #3
 801c35a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c35e:	4414      	add	r4, r2
 801c360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c362:	4410      	add	r0, r2
 801c364:	e79f      	b.n	801c2a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801c366:	1422      	asrs	r2, r4, #16
 801c368:	d457      	bmi.n	801c41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c36a:	4596      	cmp	lr, r2
 801c36c:	dd55      	ble.n	801c41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c36e:	1407      	asrs	r7, r0, #16
 801c370:	d453      	bmi.n	801c41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c372:	4547      	cmp	r7, r8
 801c374:	da51      	bge.n	801c41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c376:	9902      	ldr	r1, [sp, #8]
 801c378:	fb07 2701 	mla	r7, r7, r1, r2
 801c37c:	9903      	ldr	r1, [sp, #12]
 801c37e:	087a      	lsrs	r2, r7, #1
 801c380:	07ff      	lsls	r7, r7, #31
 801c382:	5c8a      	ldrb	r2, [r1, r2]
 801c384:	bf54      	ite	pl
 801c386:	f002 020f 	andpl.w	r2, r2, #15
 801c38a:	1112      	asrmi	r2, r2, #4
 801c38c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c390:	b2d2      	uxtb	r2, r2
 801c392:	2a00      	cmp	r2, #0
 801c394:	d041      	beq.n	801c41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c396:	4926      	ldr	r1, [pc, #152]	; (801c430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c398:	680f      	ldr	r7, [r1, #0]
 801c39a:	9905      	ldr	r1, [sp, #20]
 801c39c:	fa5f fb87 	uxtb.w	fp, r7
 801c3a0:	434a      	muls	r2, r1
 801c3a2:	f102 0c01 	add.w	ip, r2, #1
 801c3a6:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c3aa:	f896 c000 	ldrb.w	ip, [r6]
 801c3ae:	1212      	asrs	r2, r2, #8
 801c3b0:	fa1f fa82 	uxth.w	sl, r2
 801c3b4:	43d2      	mvns	r2, r2
 801c3b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3ba:	b2d2      	uxtb	r2, r2
 801c3bc:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3c0:	fa1f fc8c 	uxth.w	ip, ip
 801c3c4:	f10c 0b01 	add.w	fp, ip, #1
 801c3c8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3cc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c3d0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c3d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3dc:	fb17 fa0a 	smulbb	sl, r7, sl
 801c3e0:	78b7      	ldrb	r7, [r6, #2]
 801c3e2:	f886 c000 	strb.w	ip, [r6]
 801c3e6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c3ea:	fb07 aa02 	mla	sl, r7, r2, sl
 801c3ee:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3f2:	fa1f fa8a 	uxth.w	sl, sl
 801c3f6:	fa1f fc8c 	uxth.w	ip, ip
 801c3fa:	f10a 0701 	add.w	r7, sl, #1
 801c3fe:	f10c 0b01 	add.w	fp, ip, #1
 801c402:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c406:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c40a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c40e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c412:	f886 a002 	strb.w	sl, [r6, #2]
 801c416:	f886 c001 	strb.w	ip, [r6, #1]
 801c41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c41c:	3603      	adds	r6, #3
 801c41e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c422:	4414      	add	r4, r2
 801c424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c426:	4410      	add	r0, r2
 801c428:	e6ed      	b.n	801c206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801c42a:	b007      	add	sp, #28
 801c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c430:	2000bc98 	.word	0x2000bc98

0801c434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c438:	b087      	sub	sp, #28
 801c43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c43e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c440:	9205      	str	r2, [sp, #20]
 801c442:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801c446:	6860      	ldr	r0, [r4, #4]
 801c448:	9202      	str	r2, [sp, #8]
 801c44a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801c44e:	9101      	str	r1, [sp, #4]
 801c450:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801c454:	fb00 2606 	mla	r6, r0, r6, r2
 801c458:	6822      	ldr	r2, [r4, #0]
 801c45a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c45e:	4416      	add	r6, r2
 801c460:	f108 0201 	add.w	r2, r8, #1
 801c464:	f022 0201 	bic.w	r2, r2, #1
 801c468:	9203      	str	r2, [sp, #12]
 801c46a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c46c:	6812      	ldr	r2, [r2, #0]
 801c46e:	9204      	str	r2, [sp, #16]
 801c470:	9a01      	ldr	r2, [sp, #4]
 801c472:	2a00      	cmp	r2, #0
 801c474:	dc03      	bgt.n	801c47e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c476:	9a05      	ldr	r2, [sp, #20]
 801c478:	2a00      	cmp	r2, #0
 801c47a:	f340 813a 	ble.w	801c6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c47e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c480:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c486:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	dd0f      	ble.n	801c4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c48e:	142a      	asrs	r2, r5, #16
 801c490:	d406      	bmi.n	801c4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c492:	4590      	cmp	r8, r2
 801c494:	dd04      	ble.n	801c4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c496:	1422      	asrs	r2, r4, #16
 801c498:	d402      	bmi.n	801c4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c49a:	9802      	ldr	r0, [sp, #8]
 801c49c:	4282      	cmp	r2, r0
 801c49e:	db07      	blt.n	801c4b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c4a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4a2:	3b01      	subs	r3, #1
 801c4a4:	3603      	adds	r6, #3
 801c4a6:	4415      	add	r5, r2
 801c4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4aa:	4414      	add	r4, r2
 801c4ac:	e7ed      	b.n	801c48a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c4ae:	d073      	beq.n	801c598 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801c4b0:	1e5a      	subs	r2, r3, #1
 801c4b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c4b4:	fb00 5002 	mla	r0, r0, r2, r5
 801c4b8:	1400      	asrs	r0, r0, #16
 801c4ba:	d464      	bmi.n	801c586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4bc:	4580      	cmp	r8, r0
 801c4be:	dd62      	ble.n	801c586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c4c2:	fb00 4202 	mla	r2, r0, r2, r4
 801c4c6:	1412      	asrs	r2, r2, #16
 801c4c8:	d45d      	bmi.n	801c586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4ca:	9802      	ldr	r0, [sp, #8]
 801c4cc:	4282      	cmp	r2, r0
 801c4ce:	da5a      	bge.n	801c586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c4d0:	1cf0      	adds	r0, r6, #3
 801c4d2:	469a      	mov	sl, r3
 801c4d4:	f1ba 0f00 	cmp.w	sl, #0
 801c4d8:	dd59      	ble.n	801c58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801c4da:	142a      	asrs	r2, r5, #16
 801c4dc:	9903      	ldr	r1, [sp, #12]
 801c4de:	1427      	asrs	r7, r4, #16
 801c4e0:	fb01 2707 	mla	r7, r1, r7, r2
 801c4e4:	9904      	ldr	r1, [sp, #16]
 801c4e6:	087a      	lsrs	r2, r7, #1
 801c4e8:	5c8a      	ldrb	r2, [r1, r2]
 801c4ea:	07f9      	lsls	r1, r7, #31
 801c4ec:	bf54      	ite	pl
 801c4ee:	f002 020f 	andpl.w	r2, r2, #15
 801c4f2:	1112      	asrmi	r2, r2, #4
 801c4f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c4f8:	b2d2      	uxtb	r2, r2
 801c4fa:	2a00      	cmp	r2, #0
 801c4fc:	d03b      	beq.n	801c576 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4fe:	497e      	ldr	r1, [pc, #504]	; (801c6f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c500:	2aff      	cmp	r2, #255	; 0xff
 801c502:	680f      	ldr	r7, [r1, #0]
 801c504:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c508:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c50c:	b2ff      	uxtb	r7, r7
 801c50e:	f000 80e9 	beq.w	801c6e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c512:	fa1f fe82 	uxth.w	lr, r2
 801c516:	43d2      	mvns	r2, r2
 801c518:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801c51c:	fb17 f70e 	smulbb	r7, r7, lr
 801c520:	b2d2      	uxtb	r2, r2
 801c522:	fb19 f90e 	smulbb	r9, r9, lr
 801c526:	fb0c 7702 	mla	r7, ip, r2, r7
 801c52a:	fb1b fe0e 	smulbb	lr, fp, lr
 801c52e:	b2bf      	uxth	r7, r7
 801c530:	f107 0c01 	add.w	ip, r7, #1
 801c534:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c538:	123f      	asrs	r7, r7, #8
 801c53a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c53e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c542:	fb07 9902 	mla	r9, r7, r2, r9
 801c546:	fa1f f989 	uxth.w	r9, r9
 801c54a:	f109 0701 	add.w	r7, r9, #1
 801c54e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c552:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c556:	fb07 ee02 	mla	lr, r7, r2, lr
 801c55a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c55e:	fa1f fe8e 	uxth.w	lr, lr
 801c562:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c566:	f10e 0201 	add.w	r2, lr, #1
 801c56a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c56e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c572:	f800 ec01 	strb.w	lr, [r0, #-1]
 801c576:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c578:	3003      	adds	r0, #3
 801c57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c57e:	4415      	add	r5, r2
 801c580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c582:	4414      	add	r4, r2
 801c584:	e7a6      	b.n	801c4d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c586:	2700      	movs	r7, #0
 801c588:	1bda      	subs	r2, r3, r7
 801c58a:	2a00      	cmp	r2, #0
 801c58c:	dc40      	bgt.n	801c610 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c58e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c596:	441e      	add	r6, r3
 801c598:	9b01      	ldr	r3, [sp, #4]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	f340 80a9 	ble.w	801c6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c5a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5aa:	eeb0 6a62 	vmov.f32	s12, s5
 801c5ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5be:	eeb0 6a43 	vmov.f32	s12, s6
 801c5c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5e2:	ee12 2a90 	vmov	r2, s5
 801c5e6:	eef0 2a47 	vmov.f32	s5, s14
 801c5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5ee:	ee13 2a10 	vmov	r2, s6
 801c5f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801c5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5f6:	eeb0 3a67 	vmov.f32	s6, s15
 801c5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5fe:	9314      	str	r3, [sp, #80]	; 0x50
 801c600:	9b01      	ldr	r3, [sp, #4]
 801c602:	9a05      	ldr	r2, [sp, #20]
 801c604:	3b01      	subs	r3, #1
 801c606:	9301      	str	r3, [sp, #4]
 801c608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c60a:	bf08      	it	eq
 801c60c:	4613      	moveq	r3, r2
 801c60e:	e72f      	b.n	801c470 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c610:	142a      	asrs	r2, r5, #16
 801c612:	d458      	bmi.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c614:	4590      	cmp	r8, r2
 801c616:	dd56      	ble.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c618:	1420      	asrs	r0, r4, #16
 801c61a:	d454      	bmi.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c61c:	9902      	ldr	r1, [sp, #8]
 801c61e:	4288      	cmp	r0, r1
 801c620:	da51      	bge.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c622:	9903      	ldr	r1, [sp, #12]
 801c624:	fb00 2001 	mla	r0, r0, r1, r2
 801c628:	9904      	ldr	r1, [sp, #16]
 801c62a:	0842      	lsrs	r2, r0, #1
 801c62c:	07c0      	lsls	r0, r0, #31
 801c62e:	5c8a      	ldrb	r2, [r1, r2]
 801c630:	bf54      	ite	pl
 801c632:	f002 020f 	andpl.w	r2, r2, #15
 801c636:	1112      	asrmi	r2, r2, #4
 801c638:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c63c:	b2d2      	uxtb	r2, r2
 801c63e:	2a00      	cmp	r2, #0
 801c640:	d041      	beq.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c642:	492d      	ldr	r1, [pc, #180]	; (801c6f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c644:	2aff      	cmp	r2, #255	; 0xff
 801c646:	6808      	ldr	r0, [r1, #0]
 801c648:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c64c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c650:	fa5f fc80 	uxtb.w	ip, r0
 801c654:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c658:	d03b      	beq.n	801c6d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801c65a:	fa1f f982 	uxth.w	r9, r2
 801c65e:	4438      	add	r0, r7
 801c660:	43d2      	mvns	r2, r2
 801c662:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c666:	fb1c fc09 	smulbb	ip, ip, r9
 801c66a:	fb1a fa09 	smulbb	sl, sl, r9
 801c66e:	b2d2      	uxtb	r2, r2
 801c670:	fb1b f909 	smulbb	r9, fp, r9
 801c674:	fb0e cc02 	mla	ip, lr, r2, ip
 801c678:	fa1f fc8c 	uxth.w	ip, ip
 801c67c:	f10c 0e01 	add.w	lr, ip, #1
 801c680:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c684:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c688:	f806 c000 	strb.w	ip, [r6, r0]
 801c68c:	4430      	add	r0, r6
 801c68e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801c692:	fb0c aa02 	mla	sl, ip, r2, sl
 801c696:	fa1f fa8a 	uxth.w	sl, sl
 801c69a:	f10a 0c01 	add.w	ip, sl, #1
 801c69e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c6a2:	f890 c002 	ldrb.w	ip, [r0, #2]
 801c6a6:	fb0c 9902 	mla	r9, ip, r2, r9
 801c6aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6ae:	fa1f f989 	uxth.w	r9, r9
 801c6b2:	f880 a001 	strb.w	sl, [r0, #1]
 801c6b6:	f109 0201 	add.w	r2, r9, #1
 801c6ba:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c6be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6c2:	f880 9002 	strb.w	r9, [r0, #2]
 801c6c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6c8:	3701      	adds	r7, #1
 801c6ca:	4415      	add	r5, r2
 801c6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6ce:	4414      	add	r4, r2
 801c6d0:	e75a      	b.n	801c588 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c6d2:	4438      	add	r0, r7
 801c6d4:	f806 c000 	strb.w	ip, [r6, r0]
 801c6d8:	4430      	add	r0, r6
 801c6da:	f880 a001 	strb.w	sl, [r0, #1]
 801c6de:	f880 b002 	strb.w	fp, [r0, #2]
 801c6e2:	e7f0      	b.n	801c6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c6e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c6e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c6ec:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c6f0:	e741      	b.n	801c576 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c6f2:	b007      	add	sp, #28
 801c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6f8:	2000bc98 	.word	0x2000bc98

0801c6fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c6fc:	4770      	bx	lr

0801c6fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c6fe:	4770      	bx	lr

0801c700 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c700:	4770      	bx	lr

0801c702 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c702:	4770      	bx	lr

0801c704 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c704:	4770      	bx	lr

0801c706 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c706:	4770      	bx	lr

0801c708 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c708:	4770      	bx	lr

0801c70a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c70a:	4770      	bx	lr

0801c70c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c70c:	4770      	bx	lr

0801c70e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c70e:	4770      	bx	lr

0801c710 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c710:	4770      	bx	lr

0801c712 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c712:	4770      	bx	lr

0801c714 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c714:	4770      	bx	lr

0801c716 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c716:	4770      	bx	lr

0801c718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c718:	4770      	bx	lr

0801c71a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c71a:	4770      	bx	lr

0801c71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c71c:	4770      	bx	lr

0801c71e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c71e:	4770      	bx	lr

0801c720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c720:	4770      	bx	lr

0801c722 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c722:	4770      	bx	lr

0801c724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c724:	2bff      	cmp	r3, #255	; 0xff
 801c726:	b508      	push	{r3, lr}
 801c728:	d04f      	beq.n	801c7ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c72a:	2a2c      	cmp	r2, #44	; 0x2c
 801c72c:	d032      	beq.n	801c794 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801c72e:	d80f      	bhi.n	801c750 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801c730:	2a08      	cmp	r2, #8
 801c732:	d046      	beq.n	801c7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c734:	d805      	bhi.n	801c742 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801c736:	2a04      	cmp	r2, #4
 801c738:	d041      	beq.n	801c7be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c73a:	2a05      	cmp	r2, #5
 801c73c:	d03d      	beq.n	801c7ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c73e:	2000      	movs	r0, #0
 801c740:	e027      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c742:	2a0a      	cmp	r2, #10
 801c744:	d03d      	beq.n	801c7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c746:	d301      	bcc.n	801c74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c748:	2a0b      	cmp	r2, #11
 801c74a:	d1f8      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c74c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c74e:	e020      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c750:	2a30      	cmp	r2, #48	; 0x30
 801c752:	d038      	beq.n	801c7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c754:	d808      	bhi.n	801c768 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801c756:	2a2e      	cmp	r2, #46	; 0x2e
 801c758:	684b      	ldr	r3, [r1, #4]
 801c75a:	d029      	beq.n	801c7b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801c75c:	d90b      	bls.n	801c776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801c75e:	781b      	ldrb	r3, [r3, #0]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d1ec      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c764:	6a00      	ldr	r0, [r0, #32]
 801c766:	e014      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c768:	2a32      	cmp	r2, #50	; 0x32
 801c76a:	d02c      	beq.n	801c7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c76c:	d301      	bcc.n	801c772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801c76e:	2a33      	cmp	r2, #51	; 0x33
 801c770:	d1e5      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c772:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c774:	e00d      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	2b01      	cmp	r3, #1
 801c77a:	d009      	beq.n	801c790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801c77c:	d3f2      	bcc.n	801c764 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801c77e:	2b02      	cmp	r3, #2
 801c780:	d1dd      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c782:	4b39      	ldr	r3, [pc, #228]	; (801c868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c784:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801c788:	4a38      	ldr	r2, [pc, #224]	; (801c86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c78a:	4839      	ldr	r0, [pc, #228]	; (801c870 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801c78c:	f007 ff3e 	bl	802460c <__assert_func>
 801c790:	6900      	ldr	r0, [r0, #16]
 801c792:	bd08      	pop	{r3, pc}
 801c794:	684b      	ldr	r3, [r1, #4]
 801c796:	781b      	ldrb	r3, [r3, #0]
 801c798:	2b01      	cmp	r3, #1
 801c79a:	d007      	beq.n	801c7ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801c79c:	d30b      	bcc.n	801c7b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c79e:	2b02      	cmp	r3, #2
 801c7a0:	d1cd      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7a2:	4b31      	ldr	r3, [pc, #196]	; (801c868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c7a4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801c7a8:	4a30      	ldr	r2, [pc, #192]	; (801c86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c7aa:	e7ee      	b.n	801c78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c7ac:	6880      	ldr	r0, [r0, #8]
 801c7ae:	e7f0      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7b0:	781b      	ldrb	r3, [r3, #0]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d1c3      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7b6:	6980      	ldr	r0, [r0, #24]
 801c7b8:	e7eb      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c7bc:	e7e9      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c7c0:	e7e7      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c7c4:	e7e5      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c7c8:	e7e3      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7ca:	2a2c      	cmp	r2, #44	; 0x2c
 801c7cc:	d030      	beq.n	801c830 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801c7ce:	d80f      	bhi.n	801c7f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801c7d0:	2a08      	cmp	r2, #8
 801c7d2:	d044      	beq.n	801c85e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c7d4:	d805      	bhi.n	801c7e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801c7d6:	2a04      	cmp	r2, #4
 801c7d8:	d03f      	beq.n	801c85a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c7da:	2a05      	cmp	r2, #5
 801c7dc:	d1af      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7de:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c7e0:	e7d7      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7e2:	2a0a      	cmp	r2, #10
 801c7e4:	d03b      	beq.n	801c85e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c7e6:	d301      	bcc.n	801c7ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801c7e8:	2a0b      	cmp	r2, #11
 801c7ea:	d1a8      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c7ec:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c7ee:	e7d0      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7f0:	2a30      	cmp	r2, #48	; 0x30
 801c7f2:	d036      	beq.n	801c862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c7f4:	d808      	bhi.n	801c808 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801c7f6:	2a2e      	cmp	r2, #46	; 0x2e
 801c7f8:	684b      	ldr	r3, [r1, #4]
 801c7fa:	d028      	beq.n	801c84e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801c7fc:	d90b      	bls.n	801c816 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801c7fe:	781b      	ldrb	r3, [r3, #0]
 801c800:	2b00      	cmp	r3, #0
 801c802:	d19c      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c804:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c806:	e7c4      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c808:	2a32      	cmp	r2, #50	; 0x32
 801c80a:	d02a      	beq.n	801c862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c80c:	d301      	bcc.n	801c812 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c80e:	2a33      	cmp	r2, #51	; 0x33
 801c810:	d195      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c812:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c814:	e7bd      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c816:	781b      	ldrb	r3, [r3, #0]
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d007      	beq.n	801c82c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801c81c:	d3f2      	bcc.n	801c804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c81e:	2b02      	cmp	r3, #2
 801c820:	d18d      	bne.n	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c822:	4b11      	ldr	r3, [pc, #68]	; (801c868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c824:	f240 31e1 	movw	r1, #993	; 0x3e1
 801c828:	4a10      	ldr	r2, [pc, #64]	; (801c86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c82a:	e7ae      	b.n	801c78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c82c:	6940      	ldr	r0, [r0, #20]
 801c82e:	e7b0      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c830:	684b      	ldr	r3, [r1, #4]
 801c832:	781b      	ldrb	r3, [r3, #0]
 801c834:	2b01      	cmp	r3, #1
 801c836:	d008      	beq.n	801c84a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801c838:	d30d      	bcc.n	801c856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c83a:	2b02      	cmp	r3, #2
 801c83c:	f47f af7f 	bne.w	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c840:	4b09      	ldr	r3, [pc, #36]	; (801c868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c842:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801c846:	4a09      	ldr	r2, [pc, #36]	; (801c86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c848:	e79f      	b.n	801c78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c84a:	68c0      	ldr	r0, [r0, #12]
 801c84c:	e7a1      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c84e:	781b      	ldrb	r3, [r3, #0]
 801c850:	2b00      	cmp	r3, #0
 801c852:	f47f af74 	bne.w	801c73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c856:	69c0      	ldr	r0, [r0, #28]
 801c858:	e79b      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c85a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c85c:	e799      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c85e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c860:	e797      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c862:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c864:	e795      	b.n	801c792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c866:	bf00      	nop
 801c868:	08028db3 	.word	0x08028db3
 801c86c:	08029567 	.word	0x08029567
 801c870:	08028dff 	.word	0x08028dff

0801c874 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c874:	b508      	push	{r3, lr}
 801c876:	4b06      	ldr	r3, [pc, #24]	; (801c890 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801c878:	8818      	ldrh	r0, [r3, #0]
 801c87a:	b928      	cbnz	r0, 801c888 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801c87c:	4b05      	ldr	r3, [pc, #20]	; (801c894 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801c87e:	21d7      	movs	r1, #215	; 0xd7
 801c880:	4a05      	ldr	r2, [pc, #20]	; (801c898 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801c882:	4806      	ldr	r0, [pc, #24]	; (801c89c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801c884:	f007 fec2 	bl	802460c <__assert_func>
 801c888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c88c:	b280      	uxth	r0, r0
 801c88e:	bd08      	pop	{r3, pc}
 801c890:	2000bc6a 	.word	0x2000bc6a
 801c894:	0802904e 	.word	0x0802904e
 801c898:	0802952c 	.word	0x0802952c
 801c89c:	08029090 	.word	0x08029090

0801c8a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a4:	4616      	mov	r6, r2
 801c8a6:	b087      	sub	sp, #28
 801c8a8:	461f      	mov	r7, r3
 801c8aa:	b33b      	cbz	r3, 801c8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c8ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c8b0:	b323      	cbz	r3, 801c8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c8b2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c8b6:	b30b      	cbz	r3, 801c8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c8b8:	6808      	ldr	r0, [r1, #0]
 801c8ba:	ab04      	add	r3, sp, #16
 801c8bc:	6849      	ldr	r1, [r1, #4]
 801c8be:	4c5a      	ldr	r4, [pc, #360]	; (801ca28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c8c0:	c303      	stmia	r3!, {r0, r1}
 801c8c2:	a804      	add	r0, sp, #16
 801c8c4:	f7fb fd6e 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8c8:	6820      	ldr	r0, [r4, #0]
 801c8ca:	6803      	ldr	r3, [r0, #0]
 801c8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8ce:	4798      	blx	r3
 801c8d0:	2fff      	cmp	r7, #255	; 0xff
 801c8d2:	4623      	mov	r3, r4
 801c8d4:	d015      	beq.n	801c902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c8d6:	f010 0f08 	tst.w	r0, #8
 801c8da:	d015      	beq.n	801c908 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801c8dc:	6818      	ldr	r0, [r3, #0]
 801c8de:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c8e2:	6801      	ldr	r1, [r0, #0]
 801c8e4:	9401      	str	r4, [sp, #4]
 801c8e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c8ea:	9702      	str	r7, [sp, #8]
 801c8ec:	9400      	str	r4, [sp, #0]
 801c8ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c8f2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c8f4:	4631      	mov	r1, r6
 801c8f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c8fa:	47a0      	blx	r4
 801c8fc:	b007      	add	sp, #28
 801c8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c902:	f010 0f02 	tst.w	r0, #2
 801c906:	e7e8      	b.n	801c8da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801c908:	6818      	ldr	r0, [r3, #0]
 801c90a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801c90e:	6803      	ldr	r3, [r0, #0]
 801c910:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c914:	6a1b      	ldr	r3, [r3, #32]
 801c916:	4798      	blx	r3
 801c918:	4944      	ldr	r1, [pc, #272]	; (801ca2c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801c91a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c91e:	2fff      	cmp	r7, #255	; 0xff
 801c920:	f8b1 c000 	ldrh.w	ip, [r1]
 801c924:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801c928:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c92c:	4688      	mov	r8, r1
 801c92e:	fb0c 2303 	mla	r3, ip, r3, r2
 801c932:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801c936:	b2f2      	uxtb	r2, r6
 801c938:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801c93c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c940:	4418      	add	r0, r3
 801c942:	d112      	bne.n	801c96a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801c944:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c948:	2100      	movs	r1, #0
 801c94a:	42a9      	cmp	r1, r5
 801c94c:	da66      	bge.n	801ca1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c94e:	4603      	mov	r3, r0
 801c950:	2700      	movs	r7, #0
 801c952:	42a7      	cmp	r7, r4
 801c954:	f103 0303 	add.w	r3, r3, #3
 801c958:	da57      	bge.n	801ca0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801c95a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c95e:	3701      	adds	r7, #1
 801c960:	f803 ec02 	strb.w	lr, [r3, #-2]
 801c964:	f803 cc01 	strb.w	ip, [r3, #-1]
 801c968:	e7f3      	b.n	801c952 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801c96a:	b2bb      	uxth	r3, r7
 801c96c:	f04f 0800 	mov.w	r8, #0
 801c970:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c974:	fb0c fc03 	mul.w	ip, ip, r3
 801c978:	fb0e fe03 	mul.w	lr, lr, r3
 801c97c:	435a      	muls	r2, r3
 801c97e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801c982:	460f      	mov	r7, r1
 801c984:	b29b      	uxth	r3, r3
 801c986:	45a8      	cmp	r8, r5
 801c988:	da48      	bge.n	801ca1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c98a:	4601      	mov	r1, r0
 801c98c:	f04f 0a00 	mov.w	sl, #0
 801c990:	45a2      	cmp	sl, r4
 801c992:	f101 0103 	add.w	r1, r1, #3
 801c996:	da2f      	bge.n	801c9f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801c998:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801c99c:	f10a 0a01 	add.w	sl, sl, #1
 801c9a0:	fb19 f903 	smulbb	r9, r9, r3
 801c9a4:	4491      	add	r9, r2
 801c9a6:	fa1f f989 	uxth.w	r9, r9
 801c9aa:	f109 0b01 	add.w	fp, r9, #1
 801c9ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9b6:	f801 9c03 	strb.w	r9, [r1, #-3]
 801c9ba:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801c9be:	fb19 f903 	smulbb	r9, r9, r3
 801c9c2:	44f1      	add	r9, lr
 801c9c4:	fa1f f989 	uxth.w	r9, r9
 801c9c8:	f109 0b01 	add.w	fp, r9, #1
 801c9cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9d4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801c9d8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801c9dc:	fb19 f903 	smulbb	r9, r9, r3
 801c9e0:	44e1      	add	r9, ip
 801c9e2:	fa1f f989 	uxth.w	r9, r9
 801c9e6:	f109 0b01 	add.w	fp, r9, #1
 801c9ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9f2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801c9f6:	e7cb      	b.n	801c990 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801c9f8:	8839      	ldrh	r1, [r7, #0]
 801c9fa:	f108 0801 	add.w	r8, r8, #1
 801c9fe:	1b09      	subs	r1, r1, r4
 801ca00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ca04:	4431      	add	r1, r6
 801ca06:	4408      	add	r0, r1
 801ca08:	e7bd      	b.n	801c986 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ca0a:	f8b8 3000 	ldrh.w	r3, [r8]
 801ca0e:	3101      	adds	r1, #1
 801ca10:	1b1b      	subs	r3, r3, r4
 801ca12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca16:	4433      	add	r3, r6
 801ca18:	4418      	add	r0, r3
 801ca1a:	e796      	b.n	801c94a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801ca1c:	4b02      	ldr	r3, [pc, #8]	; (801ca28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ca1e:	6818      	ldr	r0, [r3, #0]
 801ca20:	6803      	ldr	r3, [r0, #0]
 801ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca24:	4798      	blx	r3
 801ca26:	e769      	b.n	801c8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ca28:	2000bc70 	.word	0x2000bc70
 801ca2c:	2000bc6a 	.word	0x2000bc6a

0801ca30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca34:	b08d      	sub	sp, #52	; 0x34
 801ca36:	460c      	mov	r4, r1
 801ca38:	4617      	mov	r7, r2
 801ca3a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ca3e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ca42:	2e00      	cmp	r6, #0
 801ca44:	d04a      	beq.n	801cadc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ca46:	6810      	ldr	r0, [r2, #0]
 801ca48:	ad08      	add	r5, sp, #32
 801ca4a:	6851      	ldr	r1, [r2, #4]
 801ca4c:	c503      	stmia	r5!, {r0, r1}
 801ca4e:	6818      	ldr	r0, [r3, #0]
 801ca50:	ad0a      	add	r5, sp, #40	; 0x28
 801ca52:	6859      	ldr	r1, [r3, #4]
 801ca54:	c503      	stmia	r5!, {r0, r1}
 801ca56:	a808      	add	r0, sp, #32
 801ca58:	f7fb fca4 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca5c:	4639      	mov	r1, r7
 801ca5e:	a80a      	add	r0, sp, #40	; 0x28
 801ca60:	4f59      	ldr	r7, [pc, #356]	; (801cbc8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ca62:	f7fb fc87 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca66:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ca6a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ca6e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ca72:	6838      	ldr	r0, [r7, #0]
 801ca74:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca78:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ca7c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ca80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ca84:	440c      	add	r4, r1
 801ca86:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ca8a:	440a      	add	r2, r1
 801ca8c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ca90:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ca94:	4413      	add	r3, r2
 801ca96:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ca9a:	6803      	ldr	r3, [r0, #0]
 801ca9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca9e:	4798      	blx	r3
 801caa0:	2eff      	cmp	r6, #255	; 0xff
 801caa2:	f000 8089 	beq.w	801cbb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801caa6:	0743      	lsls	r3, r0, #29
 801caa8:	d405      	bmi.n	801cab6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801caaa:	f1b9 0f00 	cmp.w	r9, #0
 801caae:	d018      	beq.n	801cae2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801cab0:	f010 0f10 	tst.w	r0, #16
 801cab4:	d015      	beq.n	801cae2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801cab6:	6838      	ldr	r0, [r7, #0]
 801cab8:	b2ad      	uxth	r5, r5
 801caba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cabe:	6801      	ldr	r1, [r0, #0]
 801cac0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cac4:	9500      	str	r5, [sp, #0]
 801cac6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801caca:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801cace:	9602      	str	r6, [sp, #8]
 801cad0:	fa1f f688 	uxth.w	r6, r8
 801cad4:	9601      	str	r6, [sp, #4]
 801cad6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801cad8:	4621      	mov	r1, r4
 801cada:	47a8      	blx	r5
 801cadc:	b00d      	add	sp, #52	; 0x34
 801cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cae2:	6838      	ldr	r0, [r7, #0]
 801cae4:	6803      	ldr	r3, [r0, #0]
 801cae6:	6a1b      	ldr	r3, [r3, #32]
 801cae8:	4798      	blx	r3
 801caea:	4a38      	ldr	r2, [pc, #224]	; (801cbcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801caec:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801caf0:	2eff      	cmp	r6, #255	; 0xff
 801caf2:	8813      	ldrh	r3, [r2, #0]
 801caf4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801caf8:	fb0c 1303 	mla	r3, ip, r3, r1
 801cafc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801cb00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb04:	4418      	add	r0, r3
 801cb06:	d032      	beq.n	801cb6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801cb08:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801cb0c:	f04f 0c00 	mov.w	ip, #0
 801cb10:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801cb14:	9306      	str	r3, [sp, #24]
 801cb16:	45c4      	cmp	ip, r8
 801cb18:	da49      	bge.n	801cbae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801cb1a:	4686      	mov	lr, r0
 801cb1c:	46a1      	mov	r9, r4
 801cb1e:	eba9 0304 	sub.w	r3, r9, r4
 801cb22:	428b      	cmp	r3, r1
 801cb24:	da13      	bge.n	801cb4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801cb26:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cb2a:	f89e b000 	ldrb.w	fp, [lr]
 801cb2e:	9307      	str	r3, [sp, #28]
 801cb30:	9b06      	ldr	r3, [sp, #24]
 801cb32:	fb1b fb03 	smulbb	fp, fp, r3
 801cb36:	9b07      	ldr	r3, [sp, #28]
 801cb38:	fb03 b306 	mla	r3, r3, r6, fp
 801cb3c:	b29b      	uxth	r3, r3
 801cb3e:	f103 0b01 	add.w	fp, r3, #1
 801cb42:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801cb46:	121b      	asrs	r3, r3, #8
 801cb48:	f80e 3b01 	strb.w	r3, [lr], #1
 801cb4c:	e7e7      	b.n	801cb1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801cb4e:	8813      	ldrh	r3, [r2, #0]
 801cb50:	f10c 0c01 	add.w	ip, ip, #1
 801cb54:	1b5b      	subs	r3, r3, r5
 801cb56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb5a:	4453      	add	r3, sl
 801cb5c:	4418      	add	r0, r3
 801cb5e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801cb62:	1b5b      	subs	r3, r3, r5
 801cb64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb68:	4453      	add	r3, sl
 801cb6a:	441c      	add	r4, r3
 801cb6c:	e7d3      	b.n	801cb16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801cb6e:	2600      	movs	r6, #0
 801cb70:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801cb74:	4546      	cmp	r6, r8
 801cb76:	da1a      	bge.n	801cbae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801cb78:	f100 3eff 	add.w	lr, r0, #4294967295
 801cb7c:	4623      	mov	r3, r4
 801cb7e:	eba3 0904 	sub.w	r9, r3, r4
 801cb82:	4589      	cmp	r9, r1
 801cb84:	da04      	bge.n	801cb90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801cb86:	f813 9b01 	ldrb.w	r9, [r3], #1
 801cb8a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801cb8e:	e7f6      	b.n	801cb7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801cb90:	8813      	ldrh	r3, [r2, #0]
 801cb92:	3601      	adds	r6, #1
 801cb94:	1b5b      	subs	r3, r3, r5
 801cb96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb9a:	4463      	add	r3, ip
 801cb9c:	4418      	add	r0, r3
 801cb9e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801cba2:	1b5b      	subs	r3, r3, r5
 801cba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cba8:	4463      	add	r3, ip
 801cbaa:	441c      	add	r4, r3
 801cbac:	e7e2      	b.n	801cb74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801cbae:	6838      	ldr	r0, [r7, #0]
 801cbb0:	6803      	ldr	r3, [r0, #0]
 801cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbb4:	4798      	blx	r3
 801cbb6:	e791      	b.n	801cadc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cbb8:	f1b9 0f00 	cmp.w	r9, #0
 801cbbc:	f47f af78 	bne.w	801cab0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801cbc0:	f010 0f01 	tst.w	r0, #1
 801cbc4:	e776      	b.n	801cab4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801cbc6:	bf00      	nop
 801cbc8:	2000bc70 	.word	0x2000bc70
 801cbcc:	2000bc6a 	.word	0x2000bc6a

0801cbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cbd0:	b510      	push	{r4, lr}
 801cbd2:	4604      	mov	r4, r0
 801cbd4:	2104      	movs	r1, #4
 801cbd6:	f007 fcee 	bl	80245b6 <_ZdlPvj>
 801cbda:	4620      	mov	r0, r4
 801cbdc:	bd10      	pop	{r4, pc}

0801cbde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cbde:	b510      	push	{r4, lr}
 801cbe0:	4604      	mov	r4, r0
 801cbe2:	2104      	movs	r1, #4
 801cbe4:	f007 fce7 	bl	80245b6 <_ZdlPvj>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	bd10      	pop	{r4, pc}

0801cbec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cbec:	b510      	push	{r4, lr}
 801cbee:	4604      	mov	r4, r0
 801cbf0:	2104      	movs	r1, #4
 801cbf2:	f007 fce0 	bl	80245b6 <_ZdlPvj>
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	bd10      	pop	{r4, pc}

0801cbfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cbfa:	b510      	push	{r4, lr}
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	2104      	movs	r1, #4
 801cc00:	f007 fcd9 	bl	80245b6 <_ZdlPvj>
 801cc04:	4620      	mov	r0, r4
 801cc06:	bd10      	pop	{r4, pc}

0801cc08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc08:	b510      	push	{r4, lr}
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	2104      	movs	r1, #4
 801cc0e:	f007 fcd2 	bl	80245b6 <_ZdlPvj>
 801cc12:	4620      	mov	r0, r4
 801cc14:	bd10      	pop	{r4, pc}

0801cc16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc16:	b510      	push	{r4, lr}
 801cc18:	4604      	mov	r4, r0
 801cc1a:	2104      	movs	r1, #4
 801cc1c:	f007 fccb 	bl	80245b6 <_ZdlPvj>
 801cc20:	4620      	mov	r0, r4
 801cc22:	bd10      	pop	{r4, pc}

0801cc24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc24:	b510      	push	{r4, lr}
 801cc26:	4604      	mov	r4, r0
 801cc28:	2104      	movs	r1, #4
 801cc2a:	f007 fcc4 	bl	80245b6 <_ZdlPvj>
 801cc2e:	4620      	mov	r0, r4
 801cc30:	bd10      	pop	{r4, pc}

0801cc32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc32:	b510      	push	{r4, lr}
 801cc34:	4604      	mov	r4, r0
 801cc36:	2104      	movs	r1, #4
 801cc38:	f007 fcbd 	bl	80245b6 <_ZdlPvj>
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	bd10      	pop	{r4, pc}

0801cc40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cc40:	b510      	push	{r4, lr}
 801cc42:	4604      	mov	r4, r0
 801cc44:	2104      	movs	r1, #4
 801cc46:	f007 fcb6 	bl	80245b6 <_ZdlPvj>
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	bd10      	pop	{r4, pc}

0801cc4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cc4e:	b510      	push	{r4, lr}
 801cc50:	4604      	mov	r4, r0
 801cc52:	2104      	movs	r1, #4
 801cc54:	f007 fcaf 	bl	80245b6 <_ZdlPvj>
 801cc58:	4620      	mov	r0, r4
 801cc5a:	bd10      	pop	{r4, pc}

0801cc5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc5c:	b510      	push	{r4, lr}
 801cc5e:	4604      	mov	r4, r0
 801cc60:	2104      	movs	r1, #4
 801cc62:	f007 fca8 	bl	80245b6 <_ZdlPvj>
 801cc66:	4620      	mov	r0, r4
 801cc68:	bd10      	pop	{r4, pc}

0801cc6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cc6a:	b510      	push	{r4, lr}
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	2104      	movs	r1, #4
 801cc70:	f007 fca1 	bl	80245b6 <_ZdlPvj>
 801cc74:	4620      	mov	r0, r4
 801cc76:	bd10      	pop	{r4, pc}

0801cc78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc78:	b510      	push	{r4, lr}
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	2104      	movs	r1, #4
 801cc7e:	f007 fc9a 	bl	80245b6 <_ZdlPvj>
 801cc82:	4620      	mov	r0, r4
 801cc84:	bd10      	pop	{r4, pc}

0801cc86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc86:	b510      	push	{r4, lr}
 801cc88:	4604      	mov	r4, r0
 801cc8a:	2104      	movs	r1, #4
 801cc8c:	f007 fc93 	bl	80245b6 <_ZdlPvj>
 801cc90:	4620      	mov	r0, r4
 801cc92:	bd10      	pop	{r4, pc}

0801cc94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc94:	b510      	push	{r4, lr}
 801cc96:	4604      	mov	r4, r0
 801cc98:	2104      	movs	r1, #4
 801cc9a:	f007 fc8c 	bl	80245b6 <_ZdlPvj>
 801cc9e:	4620      	mov	r0, r4
 801cca0:	bd10      	pop	{r4, pc}

0801cca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cca2:	b510      	push	{r4, lr}
 801cca4:	4604      	mov	r4, r0
 801cca6:	2104      	movs	r1, #4
 801cca8:	f007 fc85 	bl	80245b6 <_ZdlPvj>
 801ccac:	4620      	mov	r0, r4
 801ccae:	bd10      	pop	{r4, pc}

0801ccb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ccb0:	b510      	push	{r4, lr}
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	2104      	movs	r1, #4
 801ccb6:	f007 fc7e 	bl	80245b6 <_ZdlPvj>
 801ccba:	4620      	mov	r0, r4
 801ccbc:	bd10      	pop	{r4, pc}

0801ccbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ccbe:	b510      	push	{r4, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	2104      	movs	r1, #4
 801ccc4:	f007 fc77 	bl	80245b6 <_ZdlPvj>
 801ccc8:	4620      	mov	r0, r4
 801ccca:	bd10      	pop	{r4, pc}

0801cccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cccc:	b510      	push	{r4, lr}
 801ccce:	4604      	mov	r4, r0
 801ccd0:	2104      	movs	r1, #4
 801ccd2:	f007 fc70 	bl	80245b6 <_ZdlPvj>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	bd10      	pop	{r4, pc}

0801ccda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ccda:	b510      	push	{r4, lr}
 801ccdc:	4604      	mov	r4, r0
 801ccde:	2104      	movs	r1, #4
 801cce0:	f007 fc69 	bl	80245b6 <_ZdlPvj>
 801cce4:	4620      	mov	r0, r4
 801cce6:	bd10      	pop	{r4, pc}

0801cce8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	4d9e      	ldr	r5, [pc, #632]	; (801cf68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801ccee:	4690      	mov	r8, r2
 801ccf0:	b08f      	sub	sp, #60	; 0x3c
 801ccf2:	4604      	mov	r4, r0
 801ccf4:	682a      	ldr	r2, [r5, #0]
 801ccf6:	4689      	mov	r9, r1
 801ccf8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801ccfc:	2a02      	cmp	r2, #2
 801ccfe:	d106      	bne.n	801cd0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801cd00:	4b9a      	ldr	r3, [pc, #616]	; (801cf6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801cd02:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801cd06:	4a9a      	ldr	r2, [pc, #616]	; (801cf70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801cd08:	489a      	ldr	r0, [pc, #616]	; (801cf74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801cd0a:	f007 fc7f 	bl	802460c <__assert_func>
 801cd0e:	ae0e      	add	r6, sp, #56	; 0x38
 801cd10:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801cd14:	4630      	mov	r0, r6
 801cd16:	f7fe f8b3 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cd1a:	6823      	ldr	r3, [r4, #0]
 801cd1c:	4607      	mov	r7, r0
 801cd1e:	4620      	mov	r0, r4
 801cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd22:	4798      	blx	r3
 801cd24:	4287      	cmp	r7, r0
 801cd26:	d004      	beq.n	801cd32 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801cd28:	4b93      	ldr	r3, [pc, #588]	; (801cf78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801cd2a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801cd2e:	4a90      	ldr	r2, [pc, #576]	; (801cf70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801cd30:	e7ea      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801cd32:	4630      	mov	r0, r6
 801cd34:	f7fe f820 	bl	801ad78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cd38:	4607      	mov	r7, r0
 801cd3a:	b920      	cbnz	r0, 801cd46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801cd3c:	4b8f      	ldr	r3, [pc, #572]	; (801cf7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801cd3e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801cd42:	4a8b      	ldr	r2, [pc, #556]	; (801cf70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801cd44:	e7e0      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801cd46:	f8d8 0000 	ldr.w	r0, [r8]
 801cd4a:	ab06      	add	r3, sp, #24
 801cd4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cd50:	f9b8 a000 	ldrsh.w	sl, [r8]
 801cd54:	c303      	stmia	r3!, {r0, r1}
 801cd56:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cd5a:	ab08      	add	r3, sp, #32
 801cd5c:	f8d9 0000 	ldr.w	r0, [r9]
 801cd60:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801cd64:	c303      	stmia	r3!, {r0, r1}
 801cd66:	4630      	mov	r0, r6
 801cd68:	f7fd fefe 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cd6c:	4680      	mov	r8, r0
 801cd6e:	4630      	mov	r0, r6
 801cd70:	4e83      	ldr	r6, [pc, #524]	; (801cf80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801cd72:	f7fd ff33 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cd76:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801cd7a:	f10d 0920 	add.w	r9, sp, #32
 801cd7e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801cd82:	a806      	add	r0, sp, #24
 801cd84:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801cd88:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801cd8c:	f7fb fb0a 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd90:	4648      	mov	r0, r9
 801cd92:	f7fb fb07 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd96:	a80a      	add	r0, sp, #40	; 0x28
 801cd98:	f7fb fb04 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd9c:	4b79      	ldr	r3, [pc, #484]	; (801cf84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801cd9e:	2100      	movs	r1, #0
 801cda0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801cda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cda8:	4648      	mov	r0, r9
 801cdaa:	910c      	str	r1, [sp, #48]	; 0x30
 801cdac:	a90c      	add	r1, sp, #48	; 0x30
 801cdae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801cdb2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cdb6:	f7f8 fac9 	bl	801534c <_ZN8touchgfx4RectaNERKS0_>
 801cdba:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801cdbe:	9602      	str	r6, [sp, #8]
 801cdc0:	f1bc 0f00 	cmp.w	ip, #0
 801cdc4:	f000 80a4 	beq.w	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cdc8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801cdcc:	2e00      	cmp	r6, #0
 801cdce:	f000 809f 	beq.w	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cdd2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801cdd6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801cdda:	4288      	cmp	r0, r1
 801cddc:	db36      	blt.n	801ce4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdde:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801cde2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	db30      	blt.n	801ce4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdea:	4460      	add	r0, ip
 801cdec:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801cdf0:	4461      	add	r1, ip
 801cdf2:	b200      	sxth	r0, r0
 801cdf4:	b209      	sxth	r1, r1
 801cdf6:	4288      	cmp	r0, r1
 801cdf8:	dc28      	bgt.n	801ce4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801cdfa:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801cdfe:	4432      	add	r2, r6
 801ce00:	440b      	add	r3, r1
 801ce02:	b212      	sxth	r2, r2
 801ce04:	b21b      	sxth	r3, r3
 801ce06:	429a      	cmp	r2, r3
 801ce08:	dc20      	bgt.n	801ce4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ce0a:	6823      	ldr	r3, [r4, #0]
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce10:	4798      	blx	r3
 801ce12:	4682      	mov	sl, r0
 801ce14:	6828      	ldr	r0, [r5, #0]
 801ce16:	6803      	ldr	r3, [r0, #0]
 801ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce1a:	4798      	blx	r3
 801ce1c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ce20:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ce24:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ce28:	9303      	str	r3, [sp, #12]
 801ce2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ce2e:	1a9b      	subs	r3, r3, r2
 801ce30:	b29b      	uxth	r3, r3
 801ce32:	b21c      	sxth	r4, r3
 801ce34:	2c00      	cmp	r4, #0
 801ce36:	dc0e      	bgt.n	801ce56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ce38:	b134      	cbz	r4, 801ce48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ce3a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ce42:	4413      	add	r3, r2
 801ce44:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ce48:	463c      	mov	r4, r7
 801ce4a:	e00b      	b.n	801ce64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ce4c:	4b4e      	ldr	r3, [pc, #312]	; (801cf88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ce4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ce52:	4a47      	ldr	r2, [pc, #284]	; (801cf70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ce54:	e758      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ce56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce5a:	ebab 0303 	sub.w	r3, fp, r3
 801ce5e:	443c      	add	r4, r7
 801ce60:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ce64:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ce68:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ce6c:	1a9b      	subs	r3, r3, r2
 801ce6e:	b29b      	uxth	r3, r3
 801ce70:	b219      	sxth	r1, r3
 801ce72:	2900      	cmp	r1, #0
 801ce74:	dd50      	ble.n	801cf18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ce76:	9a03      	ldr	r2, [sp, #12]
 801ce78:	fb02 4401 	mla	r4, r2, r1, r4
 801ce7c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ce80:	1ad3      	subs	r3, r2, r3
 801ce82:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ce86:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ce8a:	f1bc 0f00 	cmp.w	ip, #0
 801ce8e:	dd3f      	ble.n	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ce90:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ce94:	2e00      	cmp	r6, #0
 801ce96:	dd3b      	ble.n	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ce98:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ce9c:	2203      	movs	r2, #3
 801ce9e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cea2:	fb0a f801 	mul.w	r8, sl, r1
 801cea6:	fb13 8802 	smlabb	r8, r3, r2, r8
 801ceaa:	9a02      	ldr	r2, [sp, #8]
 801ceac:	4480      	add	r8, r0
 801ceae:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801ceb2:	8812      	ldrh	r2, [r2, #0]
 801ceb4:	4584      	cmp	ip, r0
 801ceb6:	eba2 0303 	sub.w	r3, r2, r3
 801ceba:	bfa8      	it	ge
 801cebc:	4684      	movge	ip, r0
 801cebe:	459c      	cmp	ip, r3
 801cec0:	bfa8      	it	ge
 801cec2:	469c      	movge	ip, r3
 801cec4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801cec8:	429e      	cmp	r6, r3
 801ceca:	bfa8      	it	ge
 801cecc:	461e      	movge	r6, r3
 801cece:	4b2d      	ldr	r3, [pc, #180]	; (801cf84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ced0:	881b      	ldrh	r3, [r3, #0]
 801ced2:	1a59      	subs	r1, r3, r1
 801ced4:	4633      	mov	r3, r6
 801ced6:	428e      	cmp	r6, r1
 801ced8:	bfa8      	it	ge
 801ceda:	460b      	movge	r3, r1
 801cedc:	4562      	cmp	r2, ip
 801cede:	9302      	str	r3, [sp, #8]
 801cee0:	d12d      	bne.n	801cf3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801cee2:	455a      	cmp	r2, fp
 801cee4:	d12b      	bne.n	801cf3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801cee6:	6828      	ldr	r0, [r5, #0]
 801cee8:	6803      	ldr	r3, [r0, #0]
 801ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ceec:	4798      	blx	r3
 801ceee:	07c3      	lsls	r3, r0, #31
 801cef0:	d51b      	bpl.n	801cf2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801cef2:	6828      	ldr	r0, [r5, #0]
 801cef4:	9b02      	ldr	r3, [sp, #8]
 801cef6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801cefa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801cefe:	6803      	ldr	r3, [r0, #0]
 801cf00:	f8cd b000 	str.w	fp, [sp]
 801cf04:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801cf06:	4623      	mov	r3, r4
 801cf08:	e899 0006 	ldmia.w	r9, {r1, r2}
 801cf0c:	47a8      	blx	r5
 801cf0e:	4607      	mov	r7, r0
 801cf10:	4638      	mov	r0, r7
 801cf12:	b00f      	add	sp, #60	; 0x3c
 801cf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf18:	bf1f      	itttt	ne
 801cf1a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801cf1e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801cf22:	189b      	addne	r3, r3, r2
 801cf24:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801cf28:	e7ad      	b.n	801ce86 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801cf2a:	6828      	ldr	r0, [r5, #0]
 801cf2c:	4642      	mov	r2, r8
 801cf2e:	4621      	mov	r1, r4
 801cf30:	6803      	ldr	r3, [r0, #0]
 801cf32:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801cf34:	9b02      	ldr	r3, [sp, #8]
 801cf36:	fb03 f30a 	mul.w	r3, r3, sl
 801cf3a:	47a8      	blx	r5
 801cf3c:	e7e8      	b.n	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cf3e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801cf42:	f04f 0900 	mov.w	r9, #0
 801cf46:	9b02      	ldr	r3, [sp, #8]
 801cf48:	454b      	cmp	r3, r9
 801cf4a:	dde1      	ble.n	801cf10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801cf4c:	6828      	ldr	r0, [r5, #0]
 801cf4e:	4642      	mov	r2, r8
 801cf50:	4621      	mov	r1, r4
 801cf52:	44d0      	add	r8, sl
 801cf54:	6803      	ldr	r3, [r0, #0]
 801cf56:	f109 0901 	add.w	r9, r9, #1
 801cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf5c:	461e      	mov	r6, r3
 801cf5e:	465b      	mov	r3, fp
 801cf60:	47b0      	blx	r6
 801cf62:	9b03      	ldr	r3, [sp, #12]
 801cf64:	441c      	add	r4, r3
 801cf66:	e7ee      	b.n	801cf46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801cf68:	2000bc70 	.word	0x2000bc70
 801cf6c:	08028e31 	.word	0x08028e31
 801cf70:	08029611 	.word	0x08029611
 801cf74:	08028dff 	.word	0x08028dff
 801cf78:	08028ee5 	.word	0x08028ee5
 801cf7c:	08028f3a 	.word	0x08028f3a
 801cf80:	2000bc6a 	.word	0x2000bc6a
 801cf84:	2000bc6c 	.word	0x2000bc6c
 801cf88:	08028f78 	.word	0x08028f78

0801cf8c <_ZN8touchgfx8LCD24bppC1Ev>:
 801cf8c:	4a0b      	ldr	r2, [pc, #44]	; (801cfbc <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801cf8e:	6002      	str	r2, [r0, #0]
 801cf90:	2200      	movs	r2, #0
 801cf92:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cf96:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cf9a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cf9e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cfa2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cfa6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cfaa:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cfae:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cfb2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cfb6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cfba:	4770      	bx	lr
 801cfbc:	0802925c 	.word	0x0802925c

0801cfc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc4:	b093      	sub	sp, #76	; 0x4c
 801cfc6:	880c      	ldrh	r4, [r1, #0]
 801cfc8:	4605      	mov	r5, r0
 801cfca:	460f      	mov	r7, r1
 801cfcc:	4691      	mov	r9, r2
 801cfce:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801cfd2:	b12c      	cbz	r4, 801cfe0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801cfd4:	4b71      	ldr	r3, [pc, #452]	; (801d19c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cfd6:	2167      	movs	r1, #103	; 0x67
 801cfd8:	4a71      	ldr	r2, [pc, #452]	; (801d1a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801cfda:	4872      	ldr	r0, [pc, #456]	; (801d1a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801cfdc:	f007 fb16 	bl	802460c <__assert_func>
 801cfe0:	6810      	ldr	r0, [r2, #0]
 801cfe2:	ae0e      	add	r6, sp, #56	; 0x38
 801cfe4:	6851      	ldr	r1, [r2, #4]
 801cfe6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d1ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801cfea:	c603      	stmia	r6!, {r0, r1}
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	ae10      	add	r6, sp, #64	; 0x40
 801cff0:	6859      	ldr	r1, [r3, #4]
 801cff2:	c603      	stmia	r6!, {r0, r1}
 801cff4:	a80e      	add	r0, sp, #56	; 0x38
 801cff6:	f7fb f9d5 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cffa:	4649      	mov	r1, r9
 801cffc:	a810      	add	r0, sp, #64	; 0x40
 801cffe:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d002:	f7fb f9b7 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d006:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d00a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d00e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d012:	f8d9 0000 	ldr.w	r0, [r9]
 801d016:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d01a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d01e:	440d      	add	r5, r1
 801d020:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d024:	440a      	add	r2, r1
 801d026:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d02a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d02e:	4413      	add	r3, r2
 801d030:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d034:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d038:	930b      	str	r3, [sp, #44]	; 0x2c
 801d03a:	6803      	ldr	r3, [r0, #0]
 801d03c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d040:	4798      	blx	r3
 801d042:	2801      	cmp	r0, #1
 801d044:	d11e      	bne.n	801d084 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d046:	220b      	movs	r2, #11
 801d048:	9008      	str	r0, [sp, #32]
 801d04a:	b2b6      	uxth	r6, r6
 801d04c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d050:	9207      	str	r2, [sp, #28]
 801d052:	4629      	mov	r1, r5
 801d054:	f8ba 2000 	ldrh.w	r2, [sl]
 801d058:	f8cd 8010 	str.w	r8, [sp, #16]
 801d05c:	9601      	str	r6, [sp, #4]
 801d05e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d062:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d066:	9203      	str	r2, [sp, #12]
 801d068:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d06c:	9202      	str	r2, [sp, #8]
 801d06e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d072:	9200      	str	r2, [sp, #0]
 801d074:	463a      	mov	r2, r7
 801d076:	f8d9 0000 	ldr.w	r0, [r9]
 801d07a:	f7f8 fdb5 	bl	8015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d07e:	b013      	add	sp, #76	; 0x4c
 801d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d084:	f8d9 0000 	ldr.w	r0, [r9]
 801d088:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d08c:	6803      	ldr	r3, [r0, #0]
 801d08e:	6a1b      	ldr	r3, [r3, #32]
 801d090:	4798      	blx	r3
 801d092:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d096:	f8ba 3000 	ldrh.w	r3, [sl]
 801d09a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d09e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d0a2:	fb01 2303 	mla	r3, r1, r3, r2
 801d0a6:	4621      	mov	r1, r4
 801d0a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0ac:	4418      	add	r0, r3
 801d0ae:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d0b2:	930c      	str	r3, [sp, #48]	; 0x30
 801d0b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0b6:	4299      	cmp	r1, r3
 801d0b8:	da6a      	bge.n	801d190 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d0ba:	1cc2      	adds	r2, r0, #3
 801d0bc:	46aa      	mov	sl, r5
 801d0be:	ebaa 0305 	sub.w	r3, sl, r5
 801d0c2:	429e      	cmp	r6, r3
 801d0c4:	dd55      	ble.n	801d172 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d0c6:	2404      	movs	r4, #4
 801d0c8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d0cc:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d0d0:	eb07 0e03 	add.w	lr, r7, r3
 801d0d4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d0d8:	b184      	cbz	r4, 801d0fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d0da:	2cff      	cmp	r4, #255	; 0xff
 801d0dc:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d0e0:	d10e      	bne.n	801d100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d0e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d0e6:	d10b      	bne.n	801d100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d0e8:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d0ec:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d0f0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d0f4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d0f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d0fc:	3203      	adds	r2, #3
 801d0fe:	e7de      	b.n	801d0be <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d100:	fb08 f404 	mul.w	r4, r8, r4
 801d104:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d108:	1c63      	adds	r3, r4, #1
 801d10a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d10e:	121b      	asrs	r3, r3, #8
 801d110:	b29c      	uxth	r4, r3
 801d112:	43db      	mvns	r3, r3
 801d114:	fb1b fb04 	smulbb	fp, fp, r4
 801d118:	b2db      	uxtb	r3, r3
 801d11a:	fb0c bc03 	mla	ip, ip, r3, fp
 801d11e:	fa1f fc8c 	uxth.w	ip, ip
 801d122:	f10c 0b01 	add.w	fp, ip, #1
 801d126:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d12a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d12e:	fb1b fb03 	smulbb	fp, fp, r3
 801d132:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d136:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d13a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d13e:	fb0c bc04 	mla	ip, ip, r4, fp
 801d142:	fa1f fc8c 	uxth.w	ip, ip
 801d146:	f10c 0b01 	add.w	fp, ip, #1
 801d14a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d14e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d152:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d156:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d15a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d15e:	fb1c f303 	smulbb	r3, ip, r3
 801d162:	fb0e 3304 	mla	r3, lr, r4, r3
 801d166:	b29b      	uxth	r3, r3
 801d168:	1c5c      	adds	r4, r3, #1
 801d16a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d16e:	121b      	asrs	r3, r3, #8
 801d170:	e7c2      	b.n	801d0f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d174:	3101      	adds	r1, #1
 801d176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d178:	881b      	ldrh	r3, [r3, #0]
 801d17a:	1b9b      	subs	r3, r3, r6
 801d17c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d180:	4413      	add	r3, r2
 801d182:	4418      	add	r0, r3
 801d184:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d188:	1b9b      	subs	r3, r3, r6
 801d18a:	444b      	add	r3, r9
 801d18c:	441d      	add	r5, r3
 801d18e:	e791      	b.n	801d0b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d190:	4b05      	ldr	r3, [pc, #20]	; (801d1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d192:	6818      	ldr	r0, [r3, #0]
 801d194:	6803      	ldr	r3, [r0, #0]
 801d196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d198:	4798      	blx	r3
 801d19a:	e770      	b.n	801d07e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d19c:	08028d63 	.word	0x08028d63
 801d1a0:	08029433 	.word	0x08029433
 801d1a4:	08028dff 	.word	0x08028dff
 801d1a8:	2000bc70 	.word	0x2000bc70
 801d1ac:	2000bc6a 	.word	0x2000bc6a

0801d1b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b4:	4614      	mov	r4, r2
 801d1b6:	880a      	ldrh	r2, [r1, #0]
 801d1b8:	b091      	sub	sp, #68	; 0x44
 801d1ba:	4680      	mov	r8, r0
 801d1bc:	2a01      	cmp	r2, #1
 801d1be:	460e      	mov	r6, r1
 801d1c0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d1c4:	d005      	beq.n	801d1d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d1c6:	4b6d      	ldr	r3, [pc, #436]	; (801d37c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d1c8:	21b5      	movs	r1, #181	; 0xb5
 801d1ca:	4a6d      	ldr	r2, [pc, #436]	; (801d380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d1cc:	486d      	ldr	r0, [pc, #436]	; (801d384 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d1ce:	f007 fa1d 	bl	802460c <__assert_func>
 801d1d2:	6820      	ldr	r0, [r4, #0]
 801d1d4:	ad0c      	add	r5, sp, #48	; 0x30
 801d1d6:	6861      	ldr	r1, [r4, #4]
 801d1d8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d388 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d1dc:	c503      	stmia	r5!, {r0, r1}
 801d1de:	6818      	ldr	r0, [r3, #0]
 801d1e0:	ad0e      	add	r5, sp, #56	; 0x38
 801d1e2:	6859      	ldr	r1, [r3, #4]
 801d1e4:	c503      	stmia	r5!, {r0, r1}
 801d1e6:	a80c      	add	r0, sp, #48	; 0x30
 801d1e8:	f7fb f8dc 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d1ec:	4621      	mov	r1, r4
 801d1ee:	a80e      	add	r0, sp, #56	; 0x38
 801d1f0:	f7fb f8c0 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d1f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d1f8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d1fc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d200:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d204:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d208:	eb08 0401 	add.w	r4, r8, r1
 801d20c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d210:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d38c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d214:	440a      	add	r2, r1
 801d216:	f8d8 0000 	ldr.w	r0, [r8]
 801d21a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d21e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d222:	4413      	add	r3, r2
 801d224:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d228:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d22c:	930a      	str	r3, [sp, #40]	; 0x28
 801d22e:	6803      	ldr	r3, [r0, #0]
 801d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d234:	4798      	blx	r3
 801d236:	2801      	cmp	r0, #1
 801d238:	d11e      	bne.n	801d278 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d23a:	220b      	movs	r2, #11
 801d23c:	9008      	str	r0, [sp, #32]
 801d23e:	b2ad      	uxth	r5, r5
 801d240:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d244:	9207      	str	r2, [sp, #28]
 801d246:	4621      	mov	r1, r4
 801d248:	f8b9 2000 	ldrh.w	r2, [r9]
 801d24c:	9501      	str	r5, [sp, #4]
 801d24e:	9206      	str	r2, [sp, #24]
 801d250:	2200      	movs	r2, #0
 801d252:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d256:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d25a:	9203      	str	r2, [sp, #12]
 801d25c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d260:	9202      	str	r2, [sp, #8]
 801d262:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d266:	9200      	str	r2, [sp, #0]
 801d268:	4632      	mov	r2, r6
 801d26a:	f8d8 0000 	ldr.w	r0, [r8]
 801d26e:	f7f8 fcbb 	bl	8015be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d272:	b011      	add	sp, #68	; 0x44
 801d274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d278:	f8d8 0000 	ldr.w	r0, [r8]
 801d27c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d280:	6803      	ldr	r3, [r0, #0]
 801d282:	6a1b      	ldr	r3, [r3, #32]
 801d284:	4798      	blx	r3
 801d286:	f8b9 3000 	ldrh.w	r3, [r9]
 801d28a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d28e:	f04f 0e00 	mov.w	lr, #0
 801d292:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d296:	fa1f f987 	uxth.w	r9, r7
 801d29a:	fb01 2303 	mla	r3, r1, r3, r2
 801d29e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d2a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2a6:	b289      	uxth	r1, r1
 801d2a8:	4418      	add	r0, r3
 801d2aa:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2b2:	459e      	cmp	lr, r3
 801d2b4:	da5c      	bge.n	801d370 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d2b6:	1cc3      	adds	r3, r0, #3
 801d2b8:	46a2      	mov	sl, r4
 801d2ba:	ebaa 0204 	sub.w	r2, sl, r4
 801d2be:	4295      	cmp	r5, r2
 801d2c0:	dd46      	ble.n	801d350 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d2c2:	f04f 0c03 	mov.w	ip, #3
 801d2c6:	f04f 0b04 	mov.w	fp, #4
 801d2ca:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d2ce:	2fff      	cmp	r7, #255	; 0xff
 801d2d0:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d2d4:	eb06 0c02 	add.w	ip, r6, r2
 801d2d8:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d2dc:	d02f      	beq.n	801d33e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d2de:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d2e2:	fb12 f201 	smulbb	r2, r2, r1
 801d2e6:	fb0b 2209 	mla	r2, fp, r9, r2
 801d2ea:	b292      	uxth	r2, r2
 801d2ec:	f102 0b01 	add.w	fp, r2, #1
 801d2f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d2f4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d2f8:	fb1b fb01 	smulbb	fp, fp, r1
 801d2fc:	1212      	asrs	r2, r2, #8
 801d2fe:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d302:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d306:	fb02 b209 	mla	r2, r2, r9, fp
 801d30a:	b292      	uxth	r2, r2
 801d30c:	f102 0b01 	add.w	fp, r2, #1
 801d310:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d314:	1212      	asrs	r2, r2, #8
 801d316:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d31a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d31e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801d322:	fb1c fc01 	smulbb	ip, ip, r1
 801d326:	fb02 c209 	mla	r2, r2, r9, ip
 801d32a:	b292      	uxth	r2, r2
 801d32c:	f102 0c01 	add.w	ip, r2, #1
 801d330:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d334:	1212      	asrs	r2, r2, #8
 801d336:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d33a:	3303      	adds	r3, #3
 801d33c:	e7bd      	b.n	801d2ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801d33e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801d342:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d346:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d34a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d34e:	e7f2      	b.n	801d336 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801d350:	4b0d      	ldr	r3, [pc, #52]	; (801d388 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d352:	f10e 0e01 	add.w	lr, lr, #1
 801d356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d358:	881b      	ldrh	r3, [r3, #0]
 801d35a:	1b5b      	subs	r3, r3, r5
 801d35c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d360:	4413      	add	r3, r2
 801d362:	4418      	add	r0, r3
 801d364:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d368:	1b5b      	subs	r3, r3, r5
 801d36a:	4443      	add	r3, r8
 801d36c:	441c      	add	r4, r3
 801d36e:	e79f      	b.n	801d2b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801d370:	4b06      	ldr	r3, [pc, #24]	; (801d38c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d372:	6818      	ldr	r0, [r3, #0]
 801d374:	6803      	ldr	r3, [r0, #0]
 801d376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d378:	4798      	blx	r3
 801d37a:	e77a      	b.n	801d272 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801d37c:	08028c6f 	.word	0x08028c6f
 801d380:	08029326 	.word	0x08029326
 801d384:	08028dff 	.word	0x08028dff
 801d388:	2000bc6a 	.word	0x2000bc6a
 801d38c:	2000bc70 	.word	0x2000bc70

0801d390 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d390:	b570      	push	{r4, r5, r6, lr}
 801d392:	780d      	ldrb	r5, [r1, #0]
 801d394:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d398:	2d01      	cmp	r5, #1
 801d39a:	d00d      	beq.n	801d3b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d39c:	d307      	bcc.n	801d3ae <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d39e:	2d02      	cmp	r5, #2
 801d3a0:	d10f      	bne.n	801d3c2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d3a2:	4b08      	ldr	r3, [pc, #32]	; (801d3c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d3a4:	215a      	movs	r1, #90	; 0x5a
 801d3a6:	4a08      	ldr	r2, [pc, #32]	; (801d3c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d3a8:	4808      	ldr	r0, [pc, #32]	; (801d3cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d3aa:	f007 f92f 	bl	802460c <__assert_func>
 801d3ae:	9404      	str	r4, [sp, #16]
 801d3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3b4:	f7ff be04 	b.w	801cfc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d3b8:	9404      	str	r4, [sp, #16]
 801d3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3be:	f7ff bef7 	b.w	801d1b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d3c2:	bd70      	pop	{r4, r5, r6, pc}
 801d3c4:	08028c24 	.word	0x08028c24
 801d3c8:	080292a4 	.word	0x080292a4
 801d3cc:	08028dff 	.word	0x08028dff

0801d3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3d4:	b08b      	sub	sp, #44	; 0x2c
 801d3d6:	460c      	mov	r4, r1
 801d3d8:	4680      	mov	r8, r0
 801d3da:	469a      	mov	sl, r3
 801d3dc:	6808      	ldr	r0, [r1, #0]
 801d3de:	ab06      	add	r3, sp, #24
 801d3e0:	6849      	ldr	r1, [r1, #4]
 801d3e2:	c303      	stmia	r3!, {r0, r1}
 801d3e4:	6810      	ldr	r0, [r2, #0]
 801d3e6:	ab08      	add	r3, sp, #32
 801d3e8:	6851      	ldr	r1, [r2, #4]
 801d3ea:	c303      	stmia	r3!, {r0, r1}
 801d3ec:	a806      	add	r0, sp, #24
 801d3ee:	f7fa ffd9 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3f2:	4621      	mov	r1, r4
 801d3f4:	a808      	add	r0, sp, #32
 801d3f6:	4c61      	ldr	r4, [pc, #388]	; (801d57c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d3f8:	f7fa ffbc 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d400:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d404:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d408:	6820      	ldr	r0, [r4, #0]
 801d40a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d40e:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801d412:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801d416:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801d41a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d41e:	440a      	add	r2, r1
 801d420:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d424:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d428:	4413      	add	r3, r2
 801d42a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d42e:	6803      	ldr	r3, [r0, #0]
 801d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d432:	4798      	blx	r3
 801d434:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d438:	d118      	bne.n	801d46c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d43a:	f010 0f20 	tst.w	r0, #32
 801d43e:	6820      	ldr	r0, [r4, #0]
 801d440:	d017      	beq.n	801d472 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d442:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d446:	b2bf      	uxth	r7, r7
 801d448:	6801      	ldr	r1, [r0, #0]
 801d44a:	9402      	str	r4, [sp, #8]
 801d44c:	fa1f f489 	uxth.w	r4, r9
 801d450:	f8cd a00c 	str.w	sl, [sp, #12]
 801d454:	9401      	str	r4, [sp, #4]
 801d456:	9700      	str	r7, [sp, #0]
 801d458:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d45c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d45e:	4641      	mov	r1, r8
 801d460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d464:	47a0      	blx	r4
 801d466:	b00b      	add	sp, #44	; 0x2c
 801d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d46c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d470:	e7e5      	b.n	801d43e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d472:	6803      	ldr	r3, [r0, #0]
 801d474:	6a1b      	ldr	r3, [r3, #32]
 801d476:	4798      	blx	r3
 801d478:	4b41      	ldr	r3, [pc, #260]	; (801d580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801d47a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d47e:	f04f 0c00 	mov.w	ip, #0
 801d482:	881a      	ldrh	r2, [r3, #0]
 801d484:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d488:	fb04 1202 	mla	r2, r4, r2, r1
 801d48c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d490:	4410      	add	r0, r2
 801d492:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801d496:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d49a:	0092      	lsls	r2, r2, #2
 801d49c:	9105      	str	r1, [sp, #20]
 801d49e:	9204      	str	r2, [sp, #16]
 801d4a0:	45cc      	cmp	ip, r9
 801d4a2:	da65      	bge.n	801d570 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801d4a4:	1cc4      	adds	r4, r0, #3
 801d4a6:	f108 0504 	add.w	r5, r8, #4
 801d4aa:	f04f 0e00 	mov.w	lr, #0
 801d4ae:	45be      	cmp	lr, r7
 801d4b0:	da4d      	bge.n	801d54e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801d4b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d4b6:	b181      	cbz	r1, 801d4da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d4b8:	29ff      	cmp	r1, #255	; 0xff
 801d4ba:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801d4be:	d111      	bne.n	801d4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d4c0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d4c4:	d10e      	bne.n	801d4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d4c6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801d4ca:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801d4ce:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d4d2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801d4d6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d4da:	f10e 0e01 	add.w	lr, lr, #1
 801d4de:	3403      	adds	r4, #3
 801d4e0:	3504      	adds	r5, #4
 801d4e2:	e7e4      	b.n	801d4ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801d4e4:	fb0a f101 	mul.w	r1, sl, r1
 801d4e8:	1c4a      	adds	r2, r1, #1
 801d4ea:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d4ee:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d4f2:	1212      	asrs	r2, r2, #8
 801d4f4:	b296      	uxth	r6, r2
 801d4f6:	43d2      	mvns	r2, r2
 801d4f8:	fb1b fb06 	smulbb	fp, fp, r6
 801d4fc:	b2d2      	uxtb	r2, r2
 801d4fe:	fb01 b102 	mla	r1, r1, r2, fp
 801d502:	b289      	uxth	r1, r1
 801d504:	f101 0b01 	add.w	fp, r1, #1
 801d508:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d50c:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801d510:	fb1b fb02 	smulbb	fp, fp, r2
 801d514:	1209      	asrs	r1, r1, #8
 801d516:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d51a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801d51e:	fb01 b106 	mla	r1, r1, r6, fp
 801d522:	b289      	uxth	r1, r1
 801d524:	f101 0b01 	add.w	fp, r1, #1
 801d528:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d52c:	1209      	asrs	r1, r1, #8
 801d52e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801d532:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d536:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d53a:	fb11 f202 	smulbb	r2, r1, r2
 801d53e:	fb0b 2206 	mla	r2, fp, r6, r2
 801d542:	b292      	uxth	r2, r2
 801d544:	1c56      	adds	r6, r2, #1
 801d546:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d54a:	1212      	asrs	r2, r2, #8
 801d54c:	e7c3      	b.n	801d4d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801d54e:	881a      	ldrh	r2, [r3, #0]
 801d550:	f10c 0c01 	add.w	ip, ip, #1
 801d554:	9905      	ldr	r1, [sp, #20]
 801d556:	1bd2      	subs	r2, r2, r7
 801d558:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d55c:	440a      	add	r2, r1
 801d55e:	9904      	ldr	r1, [sp, #16]
 801d560:	4410      	add	r0, r2
 801d562:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d566:	1bd2      	subs	r2, r2, r7
 801d568:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d56c:	4490      	add	r8, r2
 801d56e:	e797      	b.n	801d4a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801d570:	4b02      	ldr	r3, [pc, #8]	; (801d57c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d572:	6818      	ldr	r0, [r3, #0]
 801d574:	6803      	ldr	r3, [r0, #0]
 801d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d578:	4798      	blx	r3
 801d57a:	e774      	b.n	801d466 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801d57c:	2000bc70 	.word	0x2000bc70
 801d580:	2000bc6a 	.word	0x2000bc6a

0801d584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d588:	b085      	sub	sp, #20
 801d58a:	4606      	mov	r6, r0
 801d58c:	460c      	mov	r4, r1
 801d58e:	4691      	mov	r9, r2
 801d590:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d594:	4698      	mov	r8, r3
 801d596:	b385      	cbz	r5, 801d5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d598:	4608      	mov	r0, r1
 801d59a:	f7fd fae5 	bl	801ab68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d59e:	4607      	mov	r7, r0
 801d5a0:	4620      	mov	r0, r4
 801d5a2:	f7fd fb1b 	bl	801abdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d5a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d5aa:	4620      	mov	r0, r4
 801d5ac:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d5b0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d5b4:	f8ad 700c 	strh.w	r7, [sp, #12]
 801d5b8:	f7fd fc62 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5bc:	2801      	cmp	r0, #1
 801d5be:	d00f      	beq.n	801d5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f7fd fc5d 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5c6:	2802      	cmp	r0, #2
 801d5c8:	d00a      	beq.n	801d5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5ca:	4620      	mov	r0, r4
 801d5cc:	f7fd fc58 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5d0:	280b      	cmp	r0, #11
 801d5d2:	d005      	beq.n	801d5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d5d4:	4b1b      	ldr	r3, [pc, #108]	; (801d644 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801d5d6:	2142      	movs	r1, #66	; 0x42
 801d5d8:	4a1b      	ldr	r2, [pc, #108]	; (801d648 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801d5da:	481c      	ldr	r0, [pc, #112]	; (801d64c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801d5dc:	f007 f816 	bl	802460c <__assert_func>
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	f7fd fc4d 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5e6:	2802      	cmp	r0, #2
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	d109      	bne.n	801d600 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801d5ec:	f7fd fbc4 	bl	801ad78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d5f0:	462b      	mov	r3, r5
 801d5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5f4:	a902      	add	r1, sp, #8
 801d5f6:	f7ff feeb 	bl	801d3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d5fa:	b005      	add	sp, #20
 801d5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d600:	f7fd fc3e 	bl	801ae80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d604:	280b      	cmp	r0, #11
 801d606:	d10e      	bne.n	801d626 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801d608:	4620      	mov	r0, r4
 801d60a:	f7fd fbb5 	bl	801ad78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d60e:	4606      	mov	r6, r0
 801d610:	4620      	mov	r0, r4
 801d612:	f7fd fbe3 	bl	801addc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d616:	9500      	str	r5, [sp, #0]
 801d618:	4601      	mov	r1, r0
 801d61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d61c:	aa02      	add	r2, sp, #8
 801d61e:	4630      	mov	r0, r6
 801d620:	f7ff feb6 	bl	801d390 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d624:	e7e9      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d626:	6833      	ldr	r3, [r6, #0]
 801d628:	4620      	mov	r0, r4
 801d62a:	691f      	ldr	r7, [r3, #16]
 801d62c:	f7fd fba4 	bl	801ad78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d630:	2300      	movs	r3, #0
 801d632:	4601      	mov	r1, r0
 801d634:	aa02      	add	r2, sp, #8
 801d636:	4630      	mov	r0, r6
 801d638:	e9cd 5300 	strd	r5, r3, [sp]
 801d63c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d63e:	47b8      	blx	r7
 801d640:	e7db      	b.n	801d5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801d642:	bf00      	nop
 801d644:	08028cbd 	.word	0x08028cbd
 801d648:	080293af 	.word	0x080293af
 801d64c:	08028dff 	.word	0x08028dff

0801d650 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d650:	b570      	push	{r4, r5, r6, lr}
 801d652:	9d04      	ldr	r5, [sp, #16]
 801d654:	460c      	mov	r4, r1
 801d656:	4619      	mov	r1, r3
 801d658:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d65c:	2a0c      	cmp	r2, #12
 801d65e:	d826      	bhi.n	801d6ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801d660:	e8df f002 	tbb	[pc, r2]
 801d664:	200e1407 	.word	0x200e1407
 801d668:	20202020 	.word	0x20202020
 801d66c:	20202020 	.word	0x20202020
 801d670:	20          	.byte	0x20
 801d671:	00          	.byte	0x00
 801d672:	4b0f      	ldr	r3, [pc, #60]	; (801d6b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801d674:	f240 117f 	movw	r1, #383	; 0x17f
 801d678:	4a0e      	ldr	r2, [pc, #56]	; (801d6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d67a:	480f      	ldr	r0, [pc, #60]	; (801d6b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d67c:	f006 ffc6 	bl	802460c <__assert_func>
 801d680:	462a      	mov	r2, r5
 801d682:	4620      	mov	r0, r4
 801d684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d688:	f7ff bea2 	b.w	801d3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d68c:	6802      	ldr	r2, [r0, #0]
 801d68e:	2600      	movs	r6, #0
 801d690:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d694:	6916      	ldr	r6, [r2, #16]
 801d696:	462b      	mov	r3, r5
 801d698:	460a      	mov	r2, r1
 801d69a:	4621      	mov	r1, r4
 801d69c:	46b4      	mov	ip, r6
 801d69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d6a2:	4760      	bx	ip
 801d6a4:	4b05      	ldr	r3, [pc, #20]	; (801d6bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d6a6:	f240 1191 	movw	r1, #401	; 0x191
 801d6aa:	4a02      	ldr	r2, [pc, #8]	; (801d6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d6ac:	e7e5      	b.n	801d67a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801d6ae:	bd70      	pop	{r4, r5, r6, pc}
 801d6b0:	08028fd8 	.word	0x08028fd8
 801d6b4:	08029697 	.word	0x08029697
 801d6b8:	08028dff 	.word	0x08028dff
 801d6bc:	08029019 	.word	0x08029019

0801d6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d6c0:	b158      	cbz	r0, 801d6da <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d6c2:	2902      	cmp	r1, #2
 801d6c4:	d00f      	beq.n	801d6e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d6c6:	2903      	cmp	r1, #3
 801d6c8:	d010      	beq.n	801d6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d6ca:	2901      	cmp	r1, #1
 801d6cc:	d101      	bne.n	801d6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d6ce:	2001      	movs	r0, #1
 801d6d0:	4770      	bx	lr
 801d6d2:	4b08      	ldr	r3, [pc, #32]	; (801d6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d6d4:	8819      	ldrh	r1, [r3, #0]
 801d6d6:	4248      	negs	r0, r1
 801d6d8:	4770      	bx	lr
 801d6da:	2902      	cmp	r1, #2
 801d6dc:	d006      	beq.n	801d6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801d6de:	2903      	cmp	r1, #3
 801d6e0:	d0f7      	beq.n	801d6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d6e2:	2901      	cmp	r1, #1
 801d6e4:	d1f3      	bne.n	801d6ce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801d6e6:	4b03      	ldr	r3, [pc, #12]	; (801d6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801d6e8:	8818      	ldrh	r0, [r3, #0]
 801d6ea:	4770      	bx	lr
 801d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d6f0:	4770      	bx	lr
 801d6f2:	bf00      	nop
 801d6f4:	2000bc6a 	.word	0x2000bc6a

0801d6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d6f8:	b170      	cbz	r0, 801d718 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801d6fa:	2902      	cmp	r1, #2
 801d6fc:	d012      	beq.n	801d724 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801d6fe:	2903      	cmp	r1, #3
 801d700:	d006      	beq.n	801d710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d702:	2901      	cmp	r1, #1
 801d704:	d001      	beq.n	801d70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d706:	2001      	movs	r0, #1
 801d708:	4770      	bx	lr
 801d70a:	4b08      	ldr	r3, [pc, #32]	; (801d72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d70c:	8818      	ldrh	r0, [r3, #0]
 801d70e:	4770      	bx	lr
 801d710:	4b06      	ldr	r3, [pc, #24]	; (801d72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801d712:	8818      	ldrh	r0, [r3, #0]
 801d714:	4240      	negs	r0, r0
 801d716:	4770      	bx	lr
 801d718:	2902      	cmp	r1, #2
 801d71a:	d0f9      	beq.n	801d710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801d71c:	2903      	cmp	r1, #3
 801d71e:	d0f2      	beq.n	801d706 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801d720:	2901      	cmp	r1, #1
 801d722:	d1f2      	bne.n	801d70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801d724:	f04f 30ff 	mov.w	r0, #4294967295
 801d728:	4770      	bx	lr
 801d72a:	bf00      	nop
 801d72c:	2000bc6a 	.word	0x2000bc6a

0801d730 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d734:	b095      	sub	sp, #84	; 0x54
 801d736:	9109      	str	r1, [sp, #36]	; 0x24
 801d738:	a910      	add	r1, sp, #64	; 0x40
 801d73a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801d73e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801d742:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801d746:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801d74a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801d74e:	e881 000c 	stmia.w	r1, {r2, r3}
 801d752:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801d756:	9306      	str	r3, [sp, #24]
 801d758:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801d75c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801d760:	930e      	str	r3, [sp, #56]	; 0x38
 801d762:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801d766:	798f      	ldrb	r7, [r1, #6]
 801d768:	930a      	str	r3, [sp, #40]	; 0x28
 801d76a:	7b4b      	ldrb	r3, [r1, #13]
 801d76c:	0158      	lsls	r0, r3, #5
 801d76e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d772:	4338      	orrs	r0, r7
 801d774:	9008      	str	r0, [sp, #32]
 801d776:	f000 8174 	beq.w	801da62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d77a:	011b      	lsls	r3, r3, #4
 801d77c:	79c8      	ldrb	r0, [r1, #7]
 801d77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d782:	4303      	orrs	r3, r0
 801d784:	9307      	str	r3, [sp, #28]
 801d786:	f000 816c 	beq.w	801da62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d78a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d78e:	b29b      	uxth	r3, r3
 801d790:	2e00      	cmp	r6, #0
 801d792:	f000 8112 	beq.w	801d9ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801d796:	1af6      	subs	r6, r6, r3
 801d798:	b2b6      	uxth	r6, r6
 801d79a:	0433      	lsls	r3, r6, #16
 801d79c:	d502      	bpl.n	801d7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d79e:	1bad      	subs	r5, r5, r6
 801d7a0:	2600      	movs	r6, #0
 801d7a2:	b22d      	sxth	r5, r5
 801d7a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d7a8:	a810      	add	r0, sp, #64	; 0x40
 801d7aa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d7ae:	428d      	cmp	r5, r1
 801d7b0:	b28b      	uxth	r3, r1
 801d7b2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d7b6:	bfbf      	itttt	lt
 801d7b8:	18f6      	addlt	r6, r6, r3
 801d7ba:	1b75      	sublt	r5, r6, r5
 801d7bc:	b2ae      	uxthlt	r6, r5
 801d7be:	460d      	movlt	r5, r1
 801d7c0:	8891      	ldrh	r1, [r2, #4]
 801d7c2:	440b      	add	r3, r1
 801d7c4:	4629      	mov	r1, r5
 801d7c6:	b21b      	sxth	r3, r3
 801d7c8:	930d      	str	r3, [sp, #52]	; 0x34
 801d7ca:	88d3      	ldrh	r3, [r2, #6]
 801d7cc:	9a06      	ldr	r2, [sp, #24]
 801d7ce:	449a      	add	sl, r3
 801d7d0:	fa0f f38a 	sxth.w	r3, sl
 801d7d4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801d7d8:	930c      	str	r3, [sp, #48]	; 0x30
 801d7da:	4bb8      	ldr	r3, [pc, #736]	; (801dabc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801d7dc:	f893 b000 	ldrb.w	fp, [r3]
 801d7e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d7e4:	f1dc 0300 	rsbs	r3, ip, #0
 801d7e8:	eb43 030c 	adc.w	r3, r3, ip
 801d7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801d7ee:	464b      	mov	r3, r9
 801d7f0:	f7fa fcb2 	bl	8018158 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d7f4:	4629      	mov	r1, r5
 801d7f6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801d7fa:	464b      	mov	r3, r9
 801d7fc:	9a06      	ldr	r2, [sp, #24]
 801d7fe:	a810      	add	r0, sp, #64	; 0x40
 801d800:	f7fa fcc2 	bl	8018188 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d804:	a914      	add	r1, sp, #80	; 0x50
 801d806:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d80a:	a813      	add	r0, sp, #76	; 0x4c
 801d80c:	f7fa fd9c 	bl	8018348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d810:	f1b9 0f00 	cmp.w	r9, #0
 801d814:	f040 80d4 	bne.w	801d9c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801d818:	f1bb 0f01 	cmp.w	fp, #1
 801d81c:	f040 80d8 	bne.w	801d9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801d820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d822:	2b00      	cmp	r3, #0
 801d824:	f040 8122 	bne.w	801da6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801d828:	4ba5      	ldr	r3, [pc, #660]	; (801dac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d82a:	6818      	ldr	r0, [r3, #0]
 801d82c:	6803      	ldr	r3, [r0, #0]
 801d82e:	6a1b      	ldr	r3, [r3, #32]
 801d830:	4798      	blx	r3
 801d832:	4aa4      	ldr	r2, [pc, #656]	; (801dac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d834:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d838:	8811      	ldrh	r1, [r2, #0]
 801d83a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d83e:	fb01 2303 	mla	r3, r1, r3, r2
 801d842:	2201      	movs	r2, #1
 801d844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d848:	4590      	cmp	r8, r2
 801d84a:	4403      	add	r3, r0
 801d84c:	9307      	str	r3, [sp, #28]
 801d84e:	fa02 f308 	lsl.w	r3, r2, r8
 801d852:	f103 33ff 	add.w	r3, r3, #4294967295
 801d856:	b2db      	uxtb	r3, r3
 801d858:	930f      	str	r3, [sp, #60]	; 0x3c
 801d85a:	f000 8109 	beq.w	801da70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801d85e:	f1b8 0f02 	cmp.w	r8, #2
 801d862:	f000 813e 	beq.w	801dae2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d866:	f1b8 0f04 	cmp.w	r8, #4
 801d86a:	f000 8132 	beq.w	801dad2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801d86e:	b906      	cbnz	r6, 801d872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801d870:	b174      	cbz	r4, 801d890 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801d872:	fb17 6304 	smlabb	r3, r7, r4, r6
 801d876:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d878:	ebaa 0a04 	sub.w	sl, sl, r4
 801d87c:	fb13 f308 	smulbb	r3, r3, r8
 801d880:	fa1f fa8a 	uxth.w	sl, sl
 801d884:	b29b      	uxth	r3, r3
 801d886:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801d88a:	f003 0407 	and.w	r4, r3, #7
 801d88e:	9124      	str	r1, [sp, #144]	; 0x90
 801d890:	4649      	mov	r1, r9
 801d892:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d894:	f7ff ff14 	bl	801d6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d898:	4649      	mov	r1, r9
 801d89a:	4683      	mov	fp, r0
 801d89c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d89e:	f7ff ff2b 	bl	801d6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d8a2:	9906      	ldr	r1, [sp, #24]
 801d8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8a6:	1bad      	subs	r5, r5, r6
 801d8a8:	1a5b      	subs	r3, r3, r1
 801d8aa:	459a      	cmp	sl, r3
 801d8ac:	bfa8      	it	ge
 801d8ae:	469a      	movge	sl, r3
 801d8b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8b2:	1b5d      	subs	r5, r3, r5
 801d8b4:	9b08      	ldr	r3, [sp, #32]
 801d8b6:	429d      	cmp	r5, r3
 801d8b8:	bfd4      	ite	le
 801d8ba:	ebc6 0605 	rsble	r6, r6, r5
 801d8be:	ebc6 0603 	rsbgt	r6, r6, r3
 801d8c2:	1bbf      	subs	r7, r7, r6
 801d8c4:	fb0b 0016 	mls	r0, fp, r6, r0
 801d8c8:	fb08 f307 	mul.w	r3, r8, r7
 801d8cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8d0:	9308      	str	r3, [sp, #32]
 801d8d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d8d8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d8e0:	930c      	str	r3, [sp, #48]	; 0x30
 801d8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d8e4:	b2db      	uxtb	r3, r3
 801d8e6:	930d      	str	r3, [sp, #52]	; 0x34
 801d8e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8ea:	7819      	ldrb	r1, [r3, #0]
 801d8ec:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d8f0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801d8f4:	4121      	asrs	r1, r4
 801d8f6:	9306      	str	r3, [sp, #24]
 801d8f8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801d8fc:	b2c9      	uxtb	r1, r1
 801d8fe:	f1ba 0f00 	cmp.w	sl, #0
 801d902:	f340 80d1 	ble.w	801daa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d906:	46b6      	mov	lr, r6
 801d908:	9807      	ldr	r0, [sp, #28]
 801d90a:	f1be 0f00 	cmp.w	lr, #0
 801d90e:	f340 80b8 	ble.w	801da82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801d912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d914:	400b      	ands	r3, r1
 801d916:	d03e      	beq.n	801d996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d918:	fb13 f302 	smulbb	r3, r3, r2
 801d91c:	2bfe      	cmp	r3, #254	; 0xfe
 801d91e:	dd03      	ble.n	801d928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801d920:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d922:	2dff      	cmp	r5, #255	; 0xff
 801d924:	f000 80a6 	beq.w	801da74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801d928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d92a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d92c:	fb15 f303 	smulbb	r3, r5, r3
 801d930:	b29b      	uxth	r3, r3
 801d932:	1c5d      	adds	r5, r3, #1
 801d934:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d938:	7805      	ldrb	r5, [r0, #0]
 801d93a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d93e:	fa1f fc83 	uxth.w	ip, r3
 801d942:	43db      	mvns	r3, r3
 801d944:	fb17 f90c 	smulbb	r9, r7, ip
 801d948:	b2db      	uxtb	r3, r3
 801d94a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d94c:	fb05 9503 	mla	r5, r5, r3, r9
 801d950:	b2ad      	uxth	r5, r5
 801d952:	f105 0901 	add.w	r9, r5, #1
 801d956:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d95a:	fb17 f90c 	smulbb	r9, r7, ip
 801d95e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d960:	122d      	asrs	r5, r5, #8
 801d962:	fb17 fc0c 	smulbb	ip, r7, ip
 801d966:	7005      	strb	r5, [r0, #0]
 801d968:	7845      	ldrb	r5, [r0, #1]
 801d96a:	fb05 9503 	mla	r5, r5, r3, r9
 801d96e:	b2ad      	uxth	r5, r5
 801d970:	f105 0901 	add.w	r9, r5, #1
 801d974:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d978:	122d      	asrs	r5, r5, #8
 801d97a:	7045      	strb	r5, [r0, #1]
 801d97c:	7885      	ldrb	r5, [r0, #2]
 801d97e:	fb05 cc03 	mla	ip, r5, r3, ip
 801d982:	fa1f fc8c 	uxth.w	ip, ip
 801d986:	f10c 0301 	add.w	r3, ip, #1
 801d98a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d98e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d992:	f880 c002 	strb.w	ip, [r0, #2]
 801d996:	4444      	add	r4, r8
 801d998:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d99c:	b2a4      	uxth	r4, r4
 801d99e:	2c07      	cmp	r4, #7
 801d9a0:	bf89      	itett	hi
 801d9a2:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801d9a4:	fa41 f108 	asrls.w	r1, r1, r8
 801d9a8:	2400      	movhi	r4, #0
 801d9aa:	7859      	ldrbhi	r1, [r3, #1]
 801d9ac:	bf8a      	itet	hi
 801d9ae:	3301      	addhi	r3, #1
 801d9b0:	b2c9      	uxtbls	r1, r1
 801d9b2:	9324      	strhi	r3, [sp, #144]	; 0x90
 801d9b4:	9b06      	ldr	r3, [sp, #24]
 801d9b6:	4418      	add	r0, r3
 801d9b8:	e7a7      	b.n	801d90a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801d9ba:	441d      	add	r5, r3
 801d9bc:	b22d      	sxth	r5, r5
 801d9be:	e6f1      	b.n	801d7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d9c0:	f1b9 0f01 	cmp.w	r9, #1
 801d9c4:	f47f af2c 	bne.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9c8:	f1bb 0f01 	cmp.w	fp, #1
 801d9cc:	f47f af28 	bne.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d9d0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801dac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801d9d4:	f8db 0000 	ldr.w	r0, [fp]
 801d9d8:	6803      	ldr	r3, [r0, #0]
 801d9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9dc:	4798      	blx	r3
 801d9de:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d9e2:	465a      	mov	r2, fp
 801d9e4:	d006      	beq.n	801d9f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d9e6:	f1b8 0f04 	cmp.w	r8, #4
 801d9ea:	d13d      	bne.n	801da68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801d9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9ee:	3300      	adds	r3, #0
 801d9f0:	bf18      	it	ne
 801d9f2:	2301      	movne	r3, #1
 801d9f4:	05c0      	lsls	r0, r0, #23
 801d9f6:	d567      	bpl.n	801dac8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d9f8:	f1b8 0f08 	cmp.w	r8, #8
 801d9fc:	d164      	bne.n	801dac8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	bf0c      	ite	eq
 801da02:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801da06:	2180      	movne	r1, #128	; 0x80
 801da08:	2e00      	cmp	r6, #0
 801da0a:	f47f af09 	bne.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da0e:	2c00      	cmp	r4, #0
 801da10:	f47f af06 	bne.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da14:	9b08      	ldr	r3, [sp, #32]
 801da16:	980d      	ldr	r0, [sp, #52]	; 0x34
 801da18:	442b      	add	r3, r5
 801da1a:	4283      	cmp	r3, r0
 801da1c:	f73f af00 	bgt.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da20:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801da24:	4403      	add	r3, r0
 801da26:	980c      	ldr	r0, [sp, #48]	; 0x30
 801da28:	4283      	cmp	r3, r0
 801da2a:	f73f aef9 	bgt.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801da2e:	f1b8 0f08 	cmp.w	r8, #8
 801da32:	6810      	ldr	r0, [r2, #0]
 801da34:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801da38:	bf18      	it	ne
 801da3a:	3701      	addne	r7, #1
 801da3c:	6804      	ldr	r4, [r0, #0]
 801da3e:	9105      	str	r1, [sp, #20]
 801da40:	bf18      	it	ne
 801da42:	f027 0701 	bicne.w	r7, r7, #1
 801da46:	990a      	ldr	r1, [sp, #40]	; 0x28
 801da48:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801da4c:	bf18      	it	ne
 801da4e:	b2bf      	uxthne	r7, r7
 801da50:	9104      	str	r1, [sp, #16]
 801da52:	9926      	ldr	r1, [sp, #152]	; 0x98
 801da54:	e9cd 7a00 	strd	r7, sl, [sp]
 801da58:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801da5c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801da5e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801da60:	47a0      	blx	r4
 801da62:	b015      	add	sp, #84	; 0x54
 801da64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da68:	2300      	movs	r3, #0
 801da6a:	e7c3      	b.n	801d9f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801da6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da6e:	e6e0      	b.n	801d832 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801da70:	22ff      	movs	r2, #255	; 0xff
 801da72:	e6fc      	b.n	801d86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801da74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da76:	7003      	strb	r3, [r0, #0]
 801da78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da7a:	7043      	strb	r3, [r0, #1]
 801da7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da7e:	7083      	strb	r3, [r0, #2]
 801da80:	e789      	b.n	801d996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801da82:	9b08      	ldr	r3, [sp, #32]
 801da84:	b153      	cbz	r3, 801da9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801da86:	441c      	add	r4, r3
 801da88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da8a:	b2a4      	uxth	r4, r4
 801da8c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801da90:	f004 0407 	and.w	r4, r4, #7
 801da94:	7819      	ldrb	r1, [r3, #0]
 801da96:	9324      	str	r3, [sp, #144]	; 0x90
 801da98:	4121      	asrs	r1, r4
 801da9a:	b2c9      	uxtb	r1, r1
 801da9c:	9b07      	ldr	r3, [sp, #28]
 801da9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801daa2:	445b      	add	r3, fp
 801daa4:	9307      	str	r3, [sp, #28]
 801daa6:	e72a      	b.n	801d8fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d1d9      	bne.n	801da62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801daae:	4b04      	ldr	r3, [pc, #16]	; (801dac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801dab0:	6818      	ldr	r0, [r3, #0]
 801dab2:	6803      	ldr	r3, [r0, #0]
 801dab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dab6:	4798      	blx	r3
 801dab8:	e7d3      	b.n	801da62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801daba:	bf00      	nop
 801dabc:	2000bc68 	.word	0x2000bc68
 801dac0:	2000bc70 	.word	0x2000bc70
 801dac4:	2000bc6a 	.word	0x2000bc6a
 801dac8:	2b00      	cmp	r3, #0
 801daca:	f43f aea9 	beq.w	801d820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dace:	2180      	movs	r1, #128	; 0x80
 801dad0:	e79a      	b.n	801da08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801dad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dad4:	b11b      	cbz	r3, 801dade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801dad6:	07fb      	lsls	r3, r7, #31
 801dad8:	d501      	bpl.n	801dade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801dada:	3701      	adds	r7, #1
 801dadc:	b2bf      	uxth	r7, r7
 801dade:	2211      	movs	r2, #17
 801dae0:	e6c5      	b.n	801d86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801dae2:	2255      	movs	r2, #85	; 0x55
 801dae4:	e6c3      	b.n	801d86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801dae6:	bf00      	nop

0801dae8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801dae8:	b538      	push	{r3, r4, r5, lr}
 801daea:	4c15      	ldr	r4, [pc, #84]	; (801db40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801daec:	4605      	mov	r5, r0
 801daee:	7823      	ldrb	r3, [r4, #0]
 801daf0:	f3bf 8f5b 	dmb	ish
 801daf4:	07da      	lsls	r2, r3, #31
 801daf6:	d40b      	bmi.n	801db10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801daf8:	4620      	mov	r0, r4
 801dafa:	f006 fd5e 	bl	80245ba <__cxa_guard_acquire>
 801dafe:	b138      	cbz	r0, 801db10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801db00:	4620      	mov	r0, r4
 801db02:	f006 fd66 	bl	80245d2 <__cxa_guard_release>
 801db06:	4a0f      	ldr	r2, [pc, #60]	; (801db44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801db08:	490f      	ldr	r1, [pc, #60]	; (801db48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801db0a:	4810      	ldr	r0, [pc, #64]	; (801db4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801db0c:	f006 fd4b 	bl	80245a6 <__aeabi_atexit>
 801db10:	4c0f      	ldr	r4, [pc, #60]	; (801db50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801db12:	7823      	ldrb	r3, [r4, #0]
 801db14:	f3bf 8f5b 	dmb	ish
 801db18:	07db      	lsls	r3, r3, #31
 801db1a:	d40b      	bmi.n	801db34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db1c:	4620      	mov	r0, r4
 801db1e:	f006 fd4c 	bl	80245ba <__cxa_guard_acquire>
 801db22:	b138      	cbz	r0, 801db34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db24:	4620      	mov	r0, r4
 801db26:	f006 fd54 	bl	80245d2 <__cxa_guard_release>
 801db2a:	4a06      	ldr	r2, [pc, #24]	; (801db44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801db2c:	4909      	ldr	r1, [pc, #36]	; (801db54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801db2e:	480a      	ldr	r0, [pc, #40]	; (801db58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db30:	f006 fd39 	bl	80245a6 <__aeabi_atexit>
 801db34:	4b05      	ldr	r3, [pc, #20]	; (801db4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801db36:	612b      	str	r3, [r5, #16]
 801db38:	4b07      	ldr	r3, [pc, #28]	; (801db58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db3a:	616b      	str	r3, [r5, #20]
 801db3c:	bd38      	pop	{r3, r4, r5, pc}
 801db3e:	bf00      	nop
 801db40:	2000bd7c 	.word	0x2000bd7c
 801db44:	20000000 	.word	0x20000000
 801db48:	0801c71f 	.word	0x0801c71f
 801db4c:	20000084 	.word	0x20000084
 801db50:	2000bd80 	.word	0x2000bd80
 801db54:	0801c71d 	.word	0x0801c71d
 801db58:	20000088 	.word	0x20000088

0801db5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801db5c:	b538      	push	{r3, r4, r5, lr}
 801db5e:	4c15      	ldr	r4, [pc, #84]	; (801dbb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801db60:	4605      	mov	r5, r0
 801db62:	7823      	ldrb	r3, [r4, #0]
 801db64:	f3bf 8f5b 	dmb	ish
 801db68:	07da      	lsls	r2, r3, #31
 801db6a:	d40b      	bmi.n	801db84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db6c:	4620      	mov	r0, r4
 801db6e:	f006 fd24 	bl	80245ba <__cxa_guard_acquire>
 801db72:	b138      	cbz	r0, 801db84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db74:	4620      	mov	r0, r4
 801db76:	f006 fd2c 	bl	80245d2 <__cxa_guard_release>
 801db7a:	4a0f      	ldr	r2, [pc, #60]	; (801dbb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801db7c:	490f      	ldr	r1, [pc, #60]	; (801dbbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801db7e:	4810      	ldr	r0, [pc, #64]	; (801dbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801db80:	f006 fd11 	bl	80245a6 <__aeabi_atexit>
 801db84:	4c0f      	ldr	r4, [pc, #60]	; (801dbc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801db86:	7823      	ldrb	r3, [r4, #0]
 801db88:	f3bf 8f5b 	dmb	ish
 801db8c:	07db      	lsls	r3, r3, #31
 801db8e:	d40b      	bmi.n	801dba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db90:	4620      	mov	r0, r4
 801db92:	f006 fd12 	bl	80245ba <__cxa_guard_acquire>
 801db96:	b138      	cbz	r0, 801dba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db98:	4620      	mov	r0, r4
 801db9a:	f006 fd1a 	bl	80245d2 <__cxa_guard_release>
 801db9e:	4a06      	ldr	r2, [pc, #24]	; (801dbb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dba0:	4909      	ldr	r1, [pc, #36]	; (801dbc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801dba2:	480a      	ldr	r0, [pc, #40]	; (801dbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dba4:	f006 fcff 	bl	80245a6 <__aeabi_atexit>
 801dba8:	4b05      	ldr	r3, [pc, #20]	; (801dbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801dbaa:	60ab      	str	r3, [r5, #8]
 801dbac:	4b07      	ldr	r3, [pc, #28]	; (801dbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dbae:	60eb      	str	r3, [r5, #12]
 801dbb0:	bd38      	pop	{r3, r4, r5, pc}
 801dbb2:	bf00      	nop
 801dbb4:	2000bd5c 	.word	0x2000bd5c
 801dbb8:	20000000 	.word	0x20000000
 801dbbc:	0801c723 	.word	0x0801c723
 801dbc0:	20000064 	.word	0x20000064
 801dbc4:	2000bd60 	.word	0x2000bd60
 801dbc8:	0801c721 	.word	0x0801c721
 801dbcc:	20000068 	.word	0x20000068

0801dbd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801dbd0:	b510      	push	{r4, lr}
 801dbd2:	4604      	mov	r4, r0
 801dbd4:	f7ff ff88 	bl	801dae8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801dbd8:	4620      	mov	r0, r4
 801dbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbde:	f7ff bfbd 	b.w	801db5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801dbe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801dbe4:	b538      	push	{r3, r4, r5, lr}
 801dbe6:	4c15      	ldr	r4, [pc, #84]	; (801dc3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801dbe8:	4605      	mov	r5, r0
 801dbea:	7823      	ldrb	r3, [r4, #0]
 801dbec:	f3bf 8f5b 	dmb	ish
 801dbf0:	07da      	lsls	r2, r3, #31
 801dbf2:	d40b      	bmi.n	801dc0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	f006 fce0 	bl	80245ba <__cxa_guard_acquire>
 801dbfa:	b138      	cbz	r0, 801dc0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	f006 fce8 	bl	80245d2 <__cxa_guard_release>
 801dc02:	4a0f      	ldr	r2, [pc, #60]	; (801dc40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dc04:	490f      	ldr	r1, [pc, #60]	; (801dc44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801dc06:	4810      	ldr	r0, [pc, #64]	; (801dc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dc08:	f006 fccd 	bl	80245a6 <__aeabi_atexit>
 801dc0c:	4c0f      	ldr	r4, [pc, #60]	; (801dc4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801dc0e:	7823      	ldrb	r3, [r4, #0]
 801dc10:	f3bf 8f5b 	dmb	ish
 801dc14:	07db      	lsls	r3, r3, #31
 801dc16:	d40b      	bmi.n	801dc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dc18:	4620      	mov	r0, r4
 801dc1a:	f006 fcce 	bl	80245ba <__cxa_guard_acquire>
 801dc1e:	b138      	cbz	r0, 801dc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dc20:	4620      	mov	r0, r4
 801dc22:	f006 fcd6 	bl	80245d2 <__cxa_guard_release>
 801dc26:	4a06      	ldr	r2, [pc, #24]	; (801dc40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dc28:	4909      	ldr	r1, [pc, #36]	; (801dc50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801dc2a:	480a      	ldr	r0, [pc, #40]	; (801dc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc2c:	f006 fcbb 	bl	80245a6 <__aeabi_atexit>
 801dc30:	4b05      	ldr	r3, [pc, #20]	; (801dc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dc32:	622b      	str	r3, [r5, #32]
 801dc34:	4b07      	ldr	r3, [pc, #28]	; (801dc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc36:	626b      	str	r3, [r5, #36]	; 0x24
 801dc38:	bd38      	pop	{r3, r4, r5, pc}
 801dc3a:	bf00      	nop
 801dc3c:	2000bd84 	.word	0x2000bd84
 801dc40:	20000000 	.word	0x20000000
 801dc44:	0801c717 	.word	0x0801c717
 801dc48:	2000008c 	.word	0x2000008c
 801dc4c:	2000bd88 	.word	0x2000bd88
 801dc50:	0801c715 	.word	0x0801c715
 801dc54:	20000090 	.word	0x20000090

0801dc58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801dc58:	b538      	push	{r3, r4, r5, lr}
 801dc5a:	4c15      	ldr	r4, [pc, #84]	; (801dcb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dc5c:	4605      	mov	r5, r0
 801dc5e:	7823      	ldrb	r3, [r4, #0]
 801dc60:	f3bf 8f5b 	dmb	ish
 801dc64:	07da      	lsls	r2, r3, #31
 801dc66:	d40b      	bmi.n	801dc80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc68:	4620      	mov	r0, r4
 801dc6a:	f006 fca6 	bl	80245ba <__cxa_guard_acquire>
 801dc6e:	b138      	cbz	r0, 801dc80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc70:	4620      	mov	r0, r4
 801dc72:	f006 fcae 	bl	80245d2 <__cxa_guard_release>
 801dc76:	4a0f      	ldr	r2, [pc, #60]	; (801dcb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc78:	490f      	ldr	r1, [pc, #60]	; (801dcb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dc7a:	4810      	ldr	r0, [pc, #64]	; (801dcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dc7c:	f006 fc93 	bl	80245a6 <__aeabi_atexit>
 801dc80:	4c0f      	ldr	r4, [pc, #60]	; (801dcc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801dc82:	7823      	ldrb	r3, [r4, #0]
 801dc84:	f3bf 8f5b 	dmb	ish
 801dc88:	07db      	lsls	r3, r3, #31
 801dc8a:	d40b      	bmi.n	801dca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f006 fc94 	bl	80245ba <__cxa_guard_acquire>
 801dc92:	b138      	cbz	r0, 801dca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc94:	4620      	mov	r0, r4
 801dc96:	f006 fc9c 	bl	80245d2 <__cxa_guard_release>
 801dc9a:	4a06      	ldr	r2, [pc, #24]	; (801dcb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc9c:	4909      	ldr	r1, [pc, #36]	; (801dcc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801dc9e:	480a      	ldr	r0, [pc, #40]	; (801dcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dca0:	f006 fc81 	bl	80245a6 <__aeabi_atexit>
 801dca4:	4b05      	ldr	r3, [pc, #20]	; (801dcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dca6:	61ab      	str	r3, [r5, #24]
 801dca8:	4b07      	ldr	r3, [pc, #28]	; (801dcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dcaa:	61eb      	str	r3, [r5, #28]
 801dcac:	bd38      	pop	{r3, r4, r5, pc}
 801dcae:	bf00      	nop
 801dcb0:	2000bd64 	.word	0x2000bd64
 801dcb4:	20000000 	.word	0x20000000
 801dcb8:	0801c71b 	.word	0x0801c71b
 801dcbc:	2000006c 	.word	0x2000006c
 801dcc0:	2000bd68 	.word	0x2000bd68
 801dcc4:	0801c719 	.word	0x0801c719
 801dcc8:	20000070 	.word	0x20000070

0801dccc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801dccc:	b510      	push	{r4, lr}
 801dcce:	4604      	mov	r4, r0
 801dcd0:	f7ff ff88 	bl	801dbe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcda:	f7ff bfbd 	b.w	801dc58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801dce0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801dce0:	b538      	push	{r3, r4, r5, lr}
 801dce2:	4c15      	ldr	r4, [pc, #84]	; (801dd38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801dce4:	4605      	mov	r5, r0
 801dce6:	7823      	ldrb	r3, [r4, #0]
 801dce8:	f3bf 8f5b 	dmb	ish
 801dcec:	07da      	lsls	r2, r3, #31
 801dcee:	d40b      	bmi.n	801dd08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801dcf0:	4620      	mov	r0, r4
 801dcf2:	f006 fc62 	bl	80245ba <__cxa_guard_acquire>
 801dcf6:	b138      	cbz	r0, 801dd08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f006 fc6a 	bl	80245d2 <__cxa_guard_release>
 801dcfe:	4a0f      	ldr	r2, [pc, #60]	; (801dd3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801dd00:	490f      	ldr	r1, [pc, #60]	; (801dd40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801dd02:	4810      	ldr	r0, [pc, #64]	; (801dd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801dd04:	f006 fc4f 	bl	80245a6 <__aeabi_atexit>
 801dd08:	4c0f      	ldr	r4, [pc, #60]	; (801dd48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801dd0a:	7823      	ldrb	r3, [r4, #0]
 801dd0c:	f3bf 8f5b 	dmb	ish
 801dd10:	07db      	lsls	r3, r3, #31
 801dd12:	d40b      	bmi.n	801dd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801dd14:	4620      	mov	r0, r4
 801dd16:	f006 fc50 	bl	80245ba <__cxa_guard_acquire>
 801dd1a:	b138      	cbz	r0, 801dd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801dd1c:	4620      	mov	r0, r4
 801dd1e:	f006 fc58 	bl	80245d2 <__cxa_guard_release>
 801dd22:	4a06      	ldr	r2, [pc, #24]	; (801dd3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801dd24:	4909      	ldr	r1, [pc, #36]	; (801dd4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801dd26:	480a      	ldr	r0, [pc, #40]	; (801dd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801dd28:	f006 fc3d 	bl	80245a6 <__aeabi_atexit>
 801dd2c:	4b05      	ldr	r3, [pc, #20]	; (801dd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801dd2e:	632b      	str	r3, [r5, #48]	; 0x30
 801dd30:	4b07      	ldr	r3, [pc, #28]	; (801dd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801dd32:	636b      	str	r3, [r5, #52]	; 0x34
 801dd34:	bd38      	pop	{r3, r4, r5, pc}
 801dd36:	bf00      	nop
 801dd38:	2000bd6c 	.word	0x2000bd6c
 801dd3c:	20000000 	.word	0x20000000
 801dd40:	0801c70f 	.word	0x0801c70f
 801dd44:	20000074 	.word	0x20000074
 801dd48:	2000bd70 	.word	0x2000bd70
 801dd4c:	0801c70d 	.word	0x0801c70d
 801dd50:	20000078 	.word	0x20000078

0801dd54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801dd54:	b538      	push	{r3, r4, r5, lr}
 801dd56:	4c15      	ldr	r4, [pc, #84]	; (801ddac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801dd58:	4605      	mov	r5, r0
 801dd5a:	7823      	ldrb	r3, [r4, #0]
 801dd5c:	f3bf 8f5b 	dmb	ish
 801dd60:	07da      	lsls	r2, r3, #31
 801dd62:	d40b      	bmi.n	801dd7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dd64:	4620      	mov	r0, r4
 801dd66:	f006 fc28 	bl	80245ba <__cxa_guard_acquire>
 801dd6a:	b138      	cbz	r0, 801dd7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	f006 fc30 	bl	80245d2 <__cxa_guard_release>
 801dd72:	4a0f      	ldr	r2, [pc, #60]	; (801ddb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801dd74:	490f      	ldr	r1, [pc, #60]	; (801ddb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801dd76:	4810      	ldr	r0, [pc, #64]	; (801ddb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801dd78:	f006 fc15 	bl	80245a6 <__aeabi_atexit>
 801dd7c:	4c0f      	ldr	r4, [pc, #60]	; (801ddbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801dd7e:	7823      	ldrb	r3, [r4, #0]
 801dd80:	f3bf 8f5b 	dmb	ish
 801dd84:	07db      	lsls	r3, r3, #31
 801dd86:	d40b      	bmi.n	801dda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801dd88:	4620      	mov	r0, r4
 801dd8a:	f006 fc16 	bl	80245ba <__cxa_guard_acquire>
 801dd8e:	b138      	cbz	r0, 801dda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801dd90:	4620      	mov	r0, r4
 801dd92:	f006 fc1e 	bl	80245d2 <__cxa_guard_release>
 801dd96:	4a06      	ldr	r2, [pc, #24]	; (801ddb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801dd98:	4909      	ldr	r1, [pc, #36]	; (801ddc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801dd9a:	480a      	ldr	r0, [pc, #40]	; (801ddc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801dd9c:	f006 fc03 	bl	80245a6 <__aeabi_atexit>
 801dda0:	4b05      	ldr	r3, [pc, #20]	; (801ddb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801dda2:	62ab      	str	r3, [r5, #40]	; 0x28
 801dda4:	4b07      	ldr	r3, [pc, #28]	; (801ddc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801dda6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801dda8:	bd38      	pop	{r3, r4, r5, pc}
 801ddaa:	bf00      	nop
 801ddac:	2000bd44 	.word	0x2000bd44
 801ddb0:	20000000 	.word	0x20000000
 801ddb4:	0801c713 	.word	0x0801c713
 801ddb8:	2000004c 	.word	0x2000004c
 801ddbc:	2000bd48 	.word	0x2000bd48
 801ddc0:	0801c711 	.word	0x0801c711
 801ddc4:	20000050 	.word	0x20000050

0801ddc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ddc8:	b510      	push	{r4, lr}
 801ddca:	4604      	mov	r4, r0
 801ddcc:	f7ff ff88 	bl	801dce0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddd6:	f7ff bfbd 	b.w	801dd54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801dddc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801dddc:	b538      	push	{r3, r4, r5, lr}
 801ddde:	4c15      	ldr	r4, [pc, #84]	; (801de34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801dde0:	4605      	mov	r5, r0
 801dde2:	7823      	ldrb	r3, [r4, #0]
 801dde4:	f3bf 8f5b 	dmb	ish
 801dde8:	07da      	lsls	r2, r3, #31
 801ddea:	d40b      	bmi.n	801de04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ddec:	4620      	mov	r0, r4
 801ddee:	f006 fbe4 	bl	80245ba <__cxa_guard_acquire>
 801ddf2:	b138      	cbz	r0, 801de04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f006 fbec 	bl	80245d2 <__cxa_guard_release>
 801ddfa:	4a0f      	ldr	r2, [pc, #60]	; (801de38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ddfc:	490f      	ldr	r1, [pc, #60]	; (801de3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ddfe:	4810      	ldr	r0, [pc, #64]	; (801de40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801de00:	f006 fbd1 	bl	80245a6 <__aeabi_atexit>
 801de04:	4c0f      	ldr	r4, [pc, #60]	; (801de44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801de06:	7823      	ldrb	r3, [r4, #0]
 801de08:	f3bf 8f5b 	dmb	ish
 801de0c:	07db      	lsls	r3, r3, #31
 801de0e:	d40b      	bmi.n	801de28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801de10:	4620      	mov	r0, r4
 801de12:	f006 fbd2 	bl	80245ba <__cxa_guard_acquire>
 801de16:	b138      	cbz	r0, 801de28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801de18:	4620      	mov	r0, r4
 801de1a:	f006 fbda 	bl	80245d2 <__cxa_guard_release>
 801de1e:	4a06      	ldr	r2, [pc, #24]	; (801de38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801de20:	4909      	ldr	r1, [pc, #36]	; (801de48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801de22:	480a      	ldr	r0, [pc, #40]	; (801de4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801de24:	f006 fbbf 	bl	80245a6 <__aeabi_atexit>
 801de28:	4b05      	ldr	r3, [pc, #20]	; (801de40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801de2a:	642b      	str	r3, [r5, #64]	; 0x40
 801de2c:	4b07      	ldr	r3, [pc, #28]	; (801de4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801de2e:	646b      	str	r3, [r5, #68]	; 0x44
 801de30:	bd38      	pop	{r3, r4, r5, pc}
 801de32:	bf00      	nop
 801de34:	2000bd74 	.word	0x2000bd74
 801de38:	20000000 	.word	0x20000000
 801de3c:	0801c707 	.word	0x0801c707
 801de40:	2000007c 	.word	0x2000007c
 801de44:	2000bd78 	.word	0x2000bd78
 801de48:	0801c705 	.word	0x0801c705
 801de4c:	20000080 	.word	0x20000080

0801de50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801de50:	b538      	push	{r3, r4, r5, lr}
 801de52:	4c15      	ldr	r4, [pc, #84]	; (801dea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801de54:	4605      	mov	r5, r0
 801de56:	7823      	ldrb	r3, [r4, #0]
 801de58:	f3bf 8f5b 	dmb	ish
 801de5c:	07da      	lsls	r2, r3, #31
 801de5e:	d40b      	bmi.n	801de78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801de60:	4620      	mov	r0, r4
 801de62:	f006 fbaa 	bl	80245ba <__cxa_guard_acquire>
 801de66:	b138      	cbz	r0, 801de78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801de68:	4620      	mov	r0, r4
 801de6a:	f006 fbb2 	bl	80245d2 <__cxa_guard_release>
 801de6e:	4a0f      	ldr	r2, [pc, #60]	; (801deac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801de70:	490f      	ldr	r1, [pc, #60]	; (801deb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801de72:	4810      	ldr	r0, [pc, #64]	; (801deb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801de74:	f006 fb97 	bl	80245a6 <__aeabi_atexit>
 801de78:	4c0f      	ldr	r4, [pc, #60]	; (801deb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801de7a:	7823      	ldrb	r3, [r4, #0]
 801de7c:	f3bf 8f5b 	dmb	ish
 801de80:	07db      	lsls	r3, r3, #31
 801de82:	d40b      	bmi.n	801de9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801de84:	4620      	mov	r0, r4
 801de86:	f006 fb98 	bl	80245ba <__cxa_guard_acquire>
 801de8a:	b138      	cbz	r0, 801de9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801de8c:	4620      	mov	r0, r4
 801de8e:	f006 fba0 	bl	80245d2 <__cxa_guard_release>
 801de92:	4a06      	ldr	r2, [pc, #24]	; (801deac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801de94:	4909      	ldr	r1, [pc, #36]	; (801debc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801de96:	480a      	ldr	r0, [pc, #40]	; (801dec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801de98:	f006 fb85 	bl	80245a6 <__aeabi_atexit>
 801de9c:	4b05      	ldr	r3, [pc, #20]	; (801deb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801de9e:	63ab      	str	r3, [r5, #56]	; 0x38
 801dea0:	4b07      	ldr	r3, [pc, #28]	; (801dec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dea2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801dea4:	bd38      	pop	{r3, r4, r5, pc}
 801dea6:	bf00      	nop
 801dea8:	2000bd54 	.word	0x2000bd54
 801deac:	20000000 	.word	0x20000000
 801deb0:	0801c70b 	.word	0x0801c70b
 801deb4:	2000005c 	.word	0x2000005c
 801deb8:	2000bd58 	.word	0x2000bd58
 801debc:	0801c709 	.word	0x0801c709
 801dec0:	20000060 	.word	0x20000060

0801dec4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801dec4:	b510      	push	{r4, lr}
 801dec6:	4604      	mov	r4, r0
 801dec8:	f7ff ff88 	bl	801dddc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801decc:	4620      	mov	r0, r4
 801dece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ded2:	f7ff bfbd 	b.w	801de50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ded8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ded8:	b538      	push	{r3, r4, r5, lr}
 801deda:	4c15      	ldr	r4, [pc, #84]	; (801df30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801dedc:	4605      	mov	r5, r0
 801dede:	7823      	ldrb	r3, [r4, #0]
 801dee0:	f3bf 8f5b 	dmb	ish
 801dee4:	07da      	lsls	r2, r3, #31
 801dee6:	d40b      	bmi.n	801df00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dee8:	4620      	mov	r0, r4
 801deea:	f006 fb66 	bl	80245ba <__cxa_guard_acquire>
 801deee:	b138      	cbz	r0, 801df00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801def0:	4620      	mov	r0, r4
 801def2:	f006 fb6e 	bl	80245d2 <__cxa_guard_release>
 801def6:	4a0f      	ldr	r2, [pc, #60]	; (801df34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801def8:	490f      	ldr	r1, [pc, #60]	; (801df38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801defa:	4810      	ldr	r0, [pc, #64]	; (801df3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801defc:	f006 fb53 	bl	80245a6 <__aeabi_atexit>
 801df00:	4c0f      	ldr	r4, [pc, #60]	; (801df40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801df02:	7823      	ldrb	r3, [r4, #0]
 801df04:	f3bf 8f5b 	dmb	ish
 801df08:	07db      	lsls	r3, r3, #31
 801df0a:	d40b      	bmi.n	801df24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801df0c:	4620      	mov	r0, r4
 801df0e:	f006 fb54 	bl	80245ba <__cxa_guard_acquire>
 801df12:	b138      	cbz	r0, 801df24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801df14:	4620      	mov	r0, r4
 801df16:	f006 fb5c 	bl	80245d2 <__cxa_guard_release>
 801df1a:	4a06      	ldr	r2, [pc, #24]	; (801df34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801df1c:	4909      	ldr	r1, [pc, #36]	; (801df44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801df1e:	480a      	ldr	r0, [pc, #40]	; (801df48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801df20:	f006 fb41 	bl	80245a6 <__aeabi_atexit>
 801df24:	4b05      	ldr	r3, [pc, #20]	; (801df3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801df26:	652b      	str	r3, [r5, #80]	; 0x50
 801df28:	4b07      	ldr	r3, [pc, #28]	; (801df48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801df2a:	656b      	str	r3, [r5, #84]	; 0x54
 801df2c:	bd38      	pop	{r3, r4, r5, pc}
 801df2e:	bf00      	nop
 801df30:	2000bd4c 	.word	0x2000bd4c
 801df34:	20000000 	.word	0x20000000
 801df38:	0801c6ff 	.word	0x0801c6ff
 801df3c:	20000054 	.word	0x20000054
 801df40:	2000bd50 	.word	0x2000bd50
 801df44:	0801c6fd 	.word	0x0801c6fd
 801df48:	20000058 	.word	0x20000058

0801df4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801df4c:	b538      	push	{r3, r4, r5, lr}
 801df4e:	4c15      	ldr	r4, [pc, #84]	; (801dfa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801df50:	4605      	mov	r5, r0
 801df52:	7823      	ldrb	r3, [r4, #0]
 801df54:	f3bf 8f5b 	dmb	ish
 801df58:	07da      	lsls	r2, r3, #31
 801df5a:	d40b      	bmi.n	801df74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801df5c:	4620      	mov	r0, r4
 801df5e:	f006 fb2c 	bl	80245ba <__cxa_guard_acquire>
 801df62:	b138      	cbz	r0, 801df74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801df64:	4620      	mov	r0, r4
 801df66:	f006 fb34 	bl	80245d2 <__cxa_guard_release>
 801df6a:	4a0f      	ldr	r2, [pc, #60]	; (801dfa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801df6c:	490f      	ldr	r1, [pc, #60]	; (801dfac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801df6e:	4810      	ldr	r0, [pc, #64]	; (801dfb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801df70:	f006 fb19 	bl	80245a6 <__aeabi_atexit>
 801df74:	4c0f      	ldr	r4, [pc, #60]	; (801dfb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801df76:	7823      	ldrb	r3, [r4, #0]
 801df78:	f3bf 8f5b 	dmb	ish
 801df7c:	07db      	lsls	r3, r3, #31
 801df7e:	d40b      	bmi.n	801df98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801df80:	4620      	mov	r0, r4
 801df82:	f006 fb1a 	bl	80245ba <__cxa_guard_acquire>
 801df86:	b138      	cbz	r0, 801df98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801df88:	4620      	mov	r0, r4
 801df8a:	f006 fb22 	bl	80245d2 <__cxa_guard_release>
 801df8e:	4a06      	ldr	r2, [pc, #24]	; (801dfa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801df90:	4909      	ldr	r1, [pc, #36]	; (801dfb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801df92:	480a      	ldr	r0, [pc, #40]	; (801dfbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801df94:	f006 fb07 	bl	80245a6 <__aeabi_atexit>
 801df98:	4b05      	ldr	r3, [pc, #20]	; (801dfb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801df9a:	64ab      	str	r3, [r5, #72]	; 0x48
 801df9c:	4b07      	ldr	r3, [pc, #28]	; (801dfbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801df9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801dfa0:	bd38      	pop	{r3, r4, r5, pc}
 801dfa2:	bf00      	nop
 801dfa4:	2000bd3c 	.word	0x2000bd3c
 801dfa8:	20000000 	.word	0x20000000
 801dfac:	0801c703 	.word	0x0801c703
 801dfb0:	20000044 	.word	0x20000044
 801dfb4:	2000bd40 	.word	0x2000bd40
 801dfb8:	0801c701 	.word	0x0801c701
 801dfbc:	20000048 	.word	0x20000048

0801dfc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801dfc0:	b510      	push	{r4, lr}
 801dfc2:	4604      	mov	r4, r0
 801dfc4:	f7ff ff88 	bl	801ded8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dfc8:	4620      	mov	r0, r4
 801dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfce:	f7ff bfbd 	b.w	801df4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801dfd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801dfd2:	b510      	push	{r4, lr}
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	f7ff fff3 	bl	801dfc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801dfda:	4620      	mov	r0, r4
 801dfdc:	f7ff ff72 	bl	801dec4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	f7ff fe73 	bl	801dccc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801dfe6:	4620      	mov	r0, r4
 801dfe8:	f7ff fdf2 	bl	801dbd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801dfec:	4620      	mov	r0, r4
 801dfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dff2:	f7ff bee9 	b.w	801ddc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801dff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dffc:	b087      	sub	sp, #28
 801dffe:	7888      	ldrb	r0, [r1, #2]
 801e000:	4616      	mov	r6, r2
 801e002:	9001      	str	r0, [sp, #4]
 801e004:	7848      	ldrb	r0, [r1, #1]
 801e006:	9100      	str	r1, [sp, #0]
 801e008:	9002      	str	r0, [sp, #8]
 801e00a:	7808      	ldrb	r0, [r1, #0]
 801e00c:	9901      	ldr	r1, [sp, #4]
 801e00e:	9003      	str	r0, [sp, #12]
 801e010:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e014:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e018:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e01c:	9902      	ldr	r1, [sp, #8]
 801e01e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e022:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e026:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e02a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e02e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e032:	9005      	str	r0, [sp, #20]
 801e034:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e038:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e03c:	2d00      	cmp	r5, #0
 801e03e:	eb06 080a 	add.w	r8, r6, sl
 801e042:	db4a      	blt.n	801e0da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e044:	45a9      	cmp	r9, r5
 801e046:	dd48      	ble.n	801e0da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e048:	f1bc 0f00 	cmp.w	ip, #0
 801e04c:	db43      	blt.n	801e0d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e04e:	45e6      	cmp	lr, ip
 801e050:	dd41      	ble.n	801e0d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e052:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e05a:	441e      	add	r6, r3
 801e05c:	f11c 0001 	adds.w	r0, ip, #1
 801e060:	d43e      	bmi.n	801e0e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e062:	4586      	cmp	lr, r0
 801e064:	dd3c      	ble.n	801e0e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e066:	2a00      	cmp	r2, #0
 801e068:	d03a      	beq.n	801e0e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e06a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e06e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e072:	4418      	add	r0, r3
 801e074:	3501      	adds	r5, #1
 801e076:	d437      	bmi.n	801e0e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e078:	45a9      	cmp	r9, r5
 801e07a:	dd35      	ble.n	801e0e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e07c:	b3a4      	cbz	r4, 801e0e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e07e:	f1bc 0f00 	cmp.w	ip, #0
 801e082:	db2f      	blt.n	801e0e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e084:	45e6      	cmp	lr, ip
 801e086:	dd2d      	ble.n	801e0e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e088:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e090:	441d      	add	r5, r3
 801e092:	f11c 0c01 	adds.w	ip, ip, #1
 801e096:	d42a      	bmi.n	801e0ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e098:	45e6      	cmp	lr, ip
 801e09a:	dd28      	ble.n	801e0ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e09c:	b33a      	cbz	r2, 801e0ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e09e:	44c6      	add	lr, r8
 801e0a0:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e0a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e0a8:	4463      	add	r3, ip
 801e0aa:	ea6f 0c07 	mvn.w	ip, r7
 801e0ae:	2a0f      	cmp	r2, #15
 801e0b0:	f896 a000 	ldrb.w	sl, [r6]
 801e0b4:	fa5f fc8c 	uxtb.w	ip, ip
 801e0b8:	f890 b000 	ldrb.w	fp, [r0]
 801e0bc:	f895 9000 	ldrb.w	r9, [r5]
 801e0c0:	7819      	ldrb	r1, [r3, #0]
 801e0c2:	d801      	bhi.n	801e0c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e0c4:	2c0f      	cmp	r4, #15
 801e0c6:	d914      	bls.n	801e0f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e0c8:	4b40      	ldr	r3, [pc, #256]	; (801e1cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e0ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e0ce:	4a40      	ldr	r2, [pc, #256]	; (801e1d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e0d0:	4840      	ldr	r0, [pc, #256]	; (801e1d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e0d2:	f006 fa9b 	bl	802460c <__assert_func>
 801e0d6:	ae05      	add	r6, sp, #20
 801e0d8:	e7c0      	b.n	801e05c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e0da:	a805      	add	r0, sp, #20
 801e0dc:	4606      	mov	r6, r0
 801e0de:	e7c9      	b.n	801e074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e0e0:	a805      	add	r0, sp, #20
 801e0e2:	e7c7      	b.n	801e074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e0e4:	ad05      	add	r5, sp, #20
 801e0e6:	e7d4      	b.n	801e092 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e0e8:	ab05      	add	r3, sp, #20
 801e0ea:	461d      	mov	r5, r3
 801e0ec:	e7dd      	b.n	801e0aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e0ee:	ab05      	add	r3, sp, #20
 801e0f0:	e7db      	b.n	801e0aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e0f2:	b292      	uxth	r2, r2
 801e0f4:	b2a4      	uxth	r4, r4
 801e0f6:	fa1f fc8c 	uxth.w	ip, ip
 801e0fa:	fb02 f804 	mul.w	r8, r2, r4
 801e0fe:	0112      	lsls	r2, r2, #4
 801e100:	b2bf      	uxth	r7, r7
 801e102:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e106:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e10a:	eba2 0208 	sub.w	r2, r2, r8
 801e10e:	b2a4      	uxth	r4, r4
 801e110:	b292      	uxth	r2, r2
 801e112:	ebae 0e04 	sub.w	lr, lr, r4
 801e116:	fb02 fb0b 	mul.w	fp, r2, fp
 801e11a:	fa1f fe8e 	uxth.w	lr, lr
 801e11e:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e122:	fb04 aa09 	mla	sl, r4, r9, sl
 801e126:	fb08 aa01 	mla	sl, r8, r1, sl
 801e12a:	9903      	ldr	r1, [sp, #12]
 801e12c:	fb11 f90c 	smulbb	r9, r1, ip
 801e130:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e134:	9900      	ldr	r1, [sp, #0]
 801e136:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e13a:	fa1f fa8a 	uxth.w	sl, sl
 801e13e:	f10a 0901 	add.w	r9, sl, #1
 801e142:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e146:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e14a:	f881 a000 	strb.w	sl, [r1]
 801e14e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e152:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e156:	fb02 fa0a 	mul.w	sl, r2, sl
 801e15a:	9902      	ldr	r1, [sp, #8]
 801e15c:	fb0e aa09 	mla	sl, lr, r9, sl
 801e160:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e164:	fb04 aa09 	mla	sl, r4, r9, sl
 801e168:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e16c:	fb08 a909 	mla	r9, r8, r9, sl
 801e170:	fb11 fa0c 	smulbb	sl, r1, ip
 801e174:	9900      	ldr	r1, [sp, #0]
 801e176:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e17a:	fb09 a907 	mla	r9, r9, r7, sl
 801e17e:	fa1f f989 	uxth.w	r9, r9
 801e182:	f109 0a01 	add.w	sl, r9, #1
 801e186:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e18a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e18e:	f881 9001 	strb.w	r9, [r1, #1]
 801e192:	7880      	ldrb	r0, [r0, #2]
 801e194:	78b6      	ldrb	r6, [r6, #2]
 801e196:	4342      	muls	r2, r0
 801e198:	78a8      	ldrb	r0, [r5, #2]
 801e19a:	789b      	ldrb	r3, [r3, #2]
 801e19c:	fb0e 2206 	mla	r2, lr, r6, r2
 801e1a0:	fb04 2400 	mla	r4, r4, r0, r2
 801e1a4:	fb08 4803 	mla	r8, r8, r3, r4
 801e1a8:	9b01      	ldr	r3, [sp, #4]
 801e1aa:	fb13 fc0c 	smulbb	ip, r3, ip
 801e1ae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e1b2:	fb08 c707 	mla	r7, r8, r7, ip
 801e1b6:	b2bf      	uxth	r7, r7
 801e1b8:	f107 0c01 	add.w	ip, r7, #1
 801e1bc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e1c0:	123f      	asrs	r7, r7, #8
 801e1c2:	708f      	strb	r7, [r1, #2]
 801e1c4:	b007      	add	sp, #28
 801e1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ca:	bf00      	nop
 801e1cc:	08028fc7 	.word	0x08028fc7
 801e1d0:	080294be 	.word	0x080294be
 801e1d4:	08029090 	.word	0x08029090

0801e1d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1dc:	ed2d 8b08 	vpush	{d8-d11}
 801e1e0:	b095      	sub	sp, #84	; 0x54
 801e1e2:	eeb0 aa40 	vmov.f32	s20, s0
 801e1e6:	eef0 9a60 	vmov.f32	s19, s1
 801e1ea:	930a      	str	r3, [sp, #40]	; 0x28
 801e1ec:	eeb0 9a41 	vmov.f32	s18, s2
 801e1f0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e1f4:	eeb0 8a62 	vmov.f32	s16, s5
 801e1f8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e1fa:	eef0 8a43 	vmov.f32	s17, s6
 801e1fe:	930c      	str	r3, [sp, #48]	; 0x30
 801e200:	eef0 ba44 	vmov.f32	s23, s8
 801e204:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e208:	eeb0 ba64 	vmov.f32	s22, s9
 801e20c:	9013      	str	r0, [sp, #76]	; 0x4c
 801e20e:	eef0 aa45 	vmov.f32	s21, s10
 801e212:	9310      	str	r3, [sp, #64]	; 0x40
 801e214:	6860      	ldr	r0, [r4, #4]
 801e216:	910f      	str	r1, [sp, #60]	; 0x3c
 801e218:	9212      	str	r2, [sp, #72]	; 0x48
 801e21a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e21c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e220:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e224:	fb00 1303 	mla	r3, r0, r3, r1
 801e228:	6821      	ldr	r1, [r4, #0]
 801e22a:	6854      	ldr	r4, [r2, #4]
 801e22c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e230:	18cb      	adds	r3, r1, r3
 801e232:	930b      	str	r3, [sp, #44]	; 0x2c
 801e234:	6813      	ldr	r3, [r2, #0]
 801e236:	930e      	str	r3, [sp, #56]	; 0x38
 801e238:	1d23      	adds	r3, r4, #4
 801e23a:	9309      	str	r3, [sp, #36]	; 0x24
 801e23c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e23e:	43db      	mvns	r3, r3
 801e240:	b2db      	uxtb	r3, r3
 801e242:	930d      	str	r3, [sp, #52]	; 0x34
 801e244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e246:	2b00      	cmp	r3, #0
 801e248:	dc03      	bgt.n	801e252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e24a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	f340 823c 	ble.w	801e6ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e254:	2b00      	cmp	r3, #0
 801e256:	f340 8115 	ble.w	801e484 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e25a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e25c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e25e:	1412      	asrs	r2, r2, #16
 801e260:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e264:	d431      	bmi.n	801e2ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e266:	1c51      	adds	r1, r2, #1
 801e268:	428d      	cmp	r5, r1
 801e26a:	dd31      	ble.n	801e2d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	db2f      	blt.n	801e2d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e270:	1c59      	adds	r1, r3, #1
 801e272:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e274:	4288      	cmp	r0, r1
 801e276:	dd2b      	ble.n	801e2d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e27a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e27c:	3b01      	subs	r3, #1
 801e27e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e280:	fb02 1203 	mla	r2, r2, r3, r1
 801e284:	1412      	asrs	r2, r2, #16
 801e286:	d42d      	bmi.n	801e2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e288:	3201      	adds	r2, #1
 801e28a:	4295      	cmp	r5, r2
 801e28c:	dd2a      	ble.n	801e2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e28e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e290:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e292:	fb02 1303 	mla	r3, r2, r3, r1
 801e296:	141b      	asrs	r3, r3, #16
 801e298:	d424      	bmi.n	801e2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e29a:	3301      	adds	r3, #1
 801e29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e29e:	429a      	cmp	r2, r3
 801e2a0:	dd20      	ble.n	801e2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2a4:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e2a8:	f103 0c03 	add.w	ip, r3, #3
 801e2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ae:	9311      	str	r3, [sp, #68]	; 0x44
 801e2b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	f300 814f 	bgt.w	801e556 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2c4:	441a      	add	r2, r3
 801e2c6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e2c8:	e0de      	b.n	801e488 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e2ca:	1c51      	adds	r1, r2, #1
 801e2cc:	f040 80cb 	bne.w	801e466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2d0:	42aa      	cmp	r2, r5
 801e2d2:	f280 80c8 	bge.w	801e466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2d6:	1c5f      	adds	r7, r3, #1
 801e2d8:	f2c0 80c5 	blt.w	801e466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e2de:	4293      	cmp	r3, r2
 801e2e0:	f280 80c1 	bge.w	801e466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e2e8:	9311      	str	r3, [sp, #68]	; 0x44
 801e2ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	dde3      	ble.n	801e2b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e2f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e2f4:	141a      	asrs	r2, r3, #16
 801e2f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e2f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e2fa:	1400      	asrs	r0, r0, #16
 801e2fc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e300:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e304:	f100 810e 	bmi.w	801e524 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e308:	1c46      	adds	r6, r0, #1
 801e30a:	42b5      	cmp	r5, r6
 801e30c:	f340 810c 	ble.w	801e528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e310:	2a00      	cmp	r2, #0
 801e312:	f2c0 8109 	blt.w	801e528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e316:	1c56      	adds	r6, r2, #1
 801e318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e31a:	42b4      	cmp	r4, r6
 801e31c:	f340 8104 	ble.w	801e528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e320:	fb02 0005 	mla	r0, r2, r5, r0
 801e324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e328:	f814 e000 	ldrb.w	lr, [r4, r0]
 801e32c:	4402      	add	r2, r0
 801e32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e330:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e334:	eb00 080e 	add.w	r8, r0, lr
 801e338:	2b00      	cmp	r3, #0
 801e33a:	f000 80e4 	beq.w	801e506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801e33e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e342:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e346:	4484      	add	ip, r0
 801e348:	2900      	cmp	r1, #0
 801e34a:	f000 80e5 	beq.w	801e518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801e34e:	1950      	adds	r0, r2, r5
 801e350:	5d52      	ldrb	r2, [r2, r5]
 801e352:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e354:	7840      	ldrb	r0, [r0, #1]
 801e356:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e35a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e35e:	4422      	add	r2, r4
 801e360:	4420      	add	r0, r4
 801e362:	b29b      	uxth	r3, r3
 801e364:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e366:	b289      	uxth	r1, r1
 801e368:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801e36c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e370:	fb03 fa01 	mul.w	sl, r3, r1
 801e374:	011b      	lsls	r3, r3, #4
 801e376:	f89c e000 	ldrb.w	lr, [ip]
 801e37a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e37e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e382:	eba3 030a 	sub.w	r3, r3, sl
 801e386:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e388:	b289      	uxth	r1, r1
 801e38a:	b29b      	uxth	r3, r3
 801e38c:	eba9 0901 	sub.w	r9, r9, r1
 801e390:	fb03 fe0e 	mul.w	lr, r3, lr
 801e394:	fa1f f989 	uxth.w	r9, r9
 801e398:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e39c:	f892 b000 	ldrb.w	fp, [r2]
 801e3a0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e3a4:	f890 b000 	ldrb.w	fp, [r0]
 801e3a8:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e3ac:	f897 b000 	ldrb.w	fp, [r7]
 801e3b0:	fb1b fb04 	smulbb	fp, fp, r4
 801e3b4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e3b8:	fb0e be06 	mla	lr, lr, r6, fp
 801e3bc:	fa1f fe8e 	uxth.w	lr, lr
 801e3c0:	f10e 0b01 	add.w	fp, lr, #1
 801e3c4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801e3c8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801e3cc:	f887 b000 	strb.w	fp, [r7]
 801e3d0:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e3d4:	f898 b001 	ldrb.w	fp, [r8, #1]
 801e3d8:	fb03 fe0e 	mul.w	lr, r3, lr
 801e3dc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e3e0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e3e4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e3e8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e3ec:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e3f0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e3f4:	fb1b fb04 	smulbb	fp, fp, r4
 801e3f8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e3fc:	fb0e be06 	mla	lr, lr, r6, fp
 801e400:	fa1f fe8e 	uxth.w	lr, lr
 801e404:	f10e 0b01 	add.w	fp, lr, #1
 801e408:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e40c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e410:	f887 e001 	strb.w	lr, [r7, #1]
 801e414:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e418:	f898 e002 	ldrb.w	lr, [r8, #2]
 801e41c:	fb03 f30c 	mul.w	r3, r3, ip
 801e420:	fb09 330e 	mla	r3, r9, lr, r3
 801e424:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e428:	7882      	ldrb	r2, [r0, #2]
 801e42a:	fb01 310e 	mla	r1, r1, lr, r3
 801e42e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801e432:	78b9      	ldrb	r1, [r7, #2]
 801e434:	fb11 f104 	smulbb	r1, r1, r4
 801e438:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e43c:	fb0a 1606 	mla	r6, sl, r6, r1
 801e440:	b2b6      	uxth	r6, r6
 801e442:	1c73      	adds	r3, r6, #1
 801e444:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e448:	1236      	asrs	r6, r6, #8
 801e44a:	70be      	strb	r6, [r7, #2]
 801e44c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e44e:	3703      	adds	r7, #3
 801e450:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e452:	4413      	add	r3, r2
 801e454:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e456:	9327      	str	r3, [sp, #156]	; 0x9c
 801e458:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e45a:	4413      	add	r3, r2
 801e45c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e45e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e460:	3b01      	subs	r3, #1
 801e462:	9311      	str	r3, [sp, #68]	; 0x44
 801e464:	e741      	b.n	801e2ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801e466:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e468:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e46a:	4413      	add	r3, r2
 801e46c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e46e:	9327      	str	r3, [sp, #156]	; 0x9c
 801e470:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e472:	4413      	add	r3, r2
 801e474:	9328      	str	r3, [sp, #160]	; 0xa0
 801e476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e478:	3b01      	subs	r3, #1
 801e47a:	930a      	str	r3, [sp, #40]	; 0x28
 801e47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e47e:	3303      	adds	r3, #3
 801e480:	930b      	str	r3, [sp, #44]	; 0x2c
 801e482:	e6e6      	b.n	801e252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e484:	f47f aef8 	bne.w	801e278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	f340 811d 	ble.w	801e6ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e494:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e496:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e49a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e49e:	eef0 6a48 	vmov.f32	s13, s16
 801e4a2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e4a6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e4aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4ae:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801e4b2:	eef0 6a68 	vmov.f32	s13, s17
 801e4b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4ba:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801e4be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e4c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e4c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e4ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e4ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e4d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e4d6:	ee18 2a10 	vmov	r2, s16
 801e4da:	eeb0 8a47 	vmov.f32	s16, s14
 801e4de:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4e2:	ee18 2a90 	vmov	r2, s17
 801e4e6:	9329      	str	r3, [sp, #164]	; 0xa4
 801e4e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e4ea:	eef0 8a67 	vmov.f32	s17, s15
 801e4ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4f2:	932a      	str	r3, [sp, #168]	; 0xa8
 801e4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4f8:	3b01      	subs	r3, #1
 801e4fa:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e4fe:	bf08      	it	eq
 801e500:	4613      	moveq	r3, r2
 801e502:	930a      	str	r3, [sp, #40]	; 0x28
 801e504:	e69e      	b.n	801e244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e506:	b151      	cbz	r1, 801e51e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801e508:	5d52      	ldrb	r2, [r2, r5]
 801e50a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e50c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e510:	4402      	add	r2, r0
 801e512:	4640      	mov	r0, r8
 801e514:	46c4      	mov	ip, r8
 801e516:	e724      	b.n	801e362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e518:	4640      	mov	r0, r8
 801e51a:	4642      	mov	r2, r8
 801e51c:	e721      	b.n	801e362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e51e:	4640      	mov	r0, r8
 801e520:	4642      	mov	r2, r8
 801e522:	e7f7      	b.n	801e514 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801e524:	1c46      	adds	r6, r0, #1
 801e526:	d191      	bne.n	801e44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e528:	4285      	cmp	r5, r0
 801e52a:	dd8f      	ble.n	801e44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e52c:	1c54      	adds	r4, r2, #1
 801e52e:	db8d      	blt.n	801e44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e530:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e532:	4294      	cmp	r4, r2
 801e534:	dd8a      	ble.n	801e44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e536:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e538:	9002      	str	r0, [sp, #8]
 801e53a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e53c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801e540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e544:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e548:	e9cd 5300 	strd	r5, r3, [sp]
 801e54c:	4639      	mov	r1, r7
 801e54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e550:	f7ff fd52 	bl	801dff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e554:	e77a      	b.n	801e44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e556:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e55a:	1410      	asrs	r0, r2, #16
 801e55c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e560:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e562:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e564:	1412      	asrs	r2, r2, #16
 801e566:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e56a:	fb05 2000 	mla	r0, r5, r0, r2
 801e56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e570:	f814 8000 	ldrb.w	r8, [r4, r0]
 801e574:	4402      	add	r2, r0
 801e576:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e578:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e57c:	eb00 0708 	add.w	r7, r0, r8
 801e580:	2b00      	cmp	r3, #0
 801e582:	f000 8093 	beq.w	801e6ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801e586:	7856      	ldrb	r6, [r2, #1]
 801e588:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e58c:	4406      	add	r6, r0
 801e58e:	2900      	cmp	r1, #0
 801e590:	f000 8095 	beq.w	801e6be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801e594:	1950      	adds	r0, r2, r5
 801e596:	5d52      	ldrb	r2, [r2, r5]
 801e598:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e59a:	7840      	ldrb	r0, [r0, #1]
 801e59c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5a4:	4422      	add	r2, r4
 801e5a6:	4420      	add	r0, r4
 801e5a8:	b29b      	uxth	r3, r3
 801e5aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e5ac:	b289      	uxth	r1, r1
 801e5ae:	f10c 0c03 	add.w	ip, ip, #3
 801e5b2:	f814 b008 	ldrb.w	fp, [r4, r8]
 801e5b6:	fb03 f901 	mul.w	r9, r3, r1
 801e5ba:	011b      	lsls	r3, r3, #4
 801e5bc:	f896 8000 	ldrb.w	r8, [r6]
 801e5c0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e5c4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e5c8:	eba3 0309 	sub.w	r3, r3, r9
 801e5cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e5ce:	b289      	uxth	r1, r1
 801e5d0:	b29b      	uxth	r3, r3
 801e5d2:	ebae 0e01 	sub.w	lr, lr, r1
 801e5d6:	fb03 f808 	mul.w	r8, r3, r8
 801e5da:	fa1f fe8e 	uxth.w	lr, lr
 801e5de:	fb0e 880b 	mla	r8, lr, fp, r8
 801e5e2:	f892 b000 	ldrb.w	fp, [r2]
 801e5e6:	fb01 880b 	mla	r8, r1, fp, r8
 801e5ea:	f890 b000 	ldrb.w	fp, [r0]
 801e5ee:	fb09 880b 	mla	r8, r9, fp, r8
 801e5f2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801e5f6:	fb1b fb04 	smulbb	fp, fp, r4
 801e5fa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e5fe:	fb08 b80a 	mla	r8, r8, sl, fp
 801e602:	fa1f f888 	uxth.w	r8, r8
 801e606:	f108 0b01 	add.w	fp, r8, #1
 801e60a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e60e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e612:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801e616:	f896 8001 	ldrb.w	r8, [r6, #1]
 801e61a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e61e:	fb03 f808 	mul.w	r8, r3, r8
 801e622:	fb0e 880b 	mla	r8, lr, fp, r8
 801e626:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e62a:	fb01 880b 	mla	r8, r1, fp, r8
 801e62e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e632:	fb09 880b 	mla	r8, r9, fp, r8
 801e636:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801e63a:	fb1b fb04 	smulbb	fp, fp, r4
 801e63e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e642:	fb08 b80a 	mla	r8, r8, sl, fp
 801e646:	fa1f f888 	uxth.w	r8, r8
 801e64a:	f108 0b01 	add.w	fp, r8, #1
 801e64e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e652:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e656:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801e65a:	78b6      	ldrb	r6, [r6, #2]
 801e65c:	78bf      	ldrb	r7, [r7, #2]
 801e65e:	4373      	muls	r3, r6
 801e660:	7896      	ldrb	r6, [r2, #2]
 801e662:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e664:	fb0e 3307 	mla	r3, lr, r7, r3
 801e668:	fb01 3306 	mla	r3, r1, r6, r3
 801e66c:	7886      	ldrb	r6, [r0, #2]
 801e66e:	fb09 3906 	mla	r9, r9, r6, r3
 801e672:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e676:	fb13 f304 	smulbb	r3, r3, r4
 801e67a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e67e:	fb09 390a 	mla	r9, r9, sl, r3
 801e682:	fa1f f989 	uxth.w	r9, r9
 801e686:	f109 0301 	add.w	r3, r9, #1
 801e68a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e68e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e690:	4413      	add	r3, r2
 801e692:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e694:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e698:	9327      	str	r3, [sp, #156]	; 0x9c
 801e69a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e69c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801e6a0:	4413      	add	r3, r2
 801e6a2:	9328      	str	r3, [sp, #160]	; 0xa0
 801e6a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6a6:	3b01      	subs	r3, #1
 801e6a8:	9311      	str	r3, [sp, #68]	; 0x44
 801e6aa:	e601      	b.n	801e2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e6ac:	b151      	cbz	r1, 801e6c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801e6ae:	5d52      	ldrb	r2, [r2, r5]
 801e6b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e6b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e6b6:	4402      	add	r2, r0
 801e6b8:	4638      	mov	r0, r7
 801e6ba:	463e      	mov	r6, r7
 801e6bc:	e774      	b.n	801e5a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e6be:	4638      	mov	r0, r7
 801e6c0:	463a      	mov	r2, r7
 801e6c2:	e771      	b.n	801e5a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801e6c4:	4638      	mov	r0, r7
 801e6c6:	463a      	mov	r2, r7
 801e6c8:	e7f7      	b.n	801e6ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801e6ca:	b015      	add	sp, #84	; 0x54
 801e6cc:	ecbd 8b08 	vpop	{d8-d11}
 801e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d8:	780d      	ldrb	r5, [r1, #0]
 801e6da:	f891 9002 	ldrb.w	r9, [r1, #2]
 801e6de:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801e6e2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e6e6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e6ea:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801e6ee:	f891 9001 	ldrb.w	r9, [r1, #1]
 801e6f2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e6f6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801e6fa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801e6fe:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801e702:	9501      	str	r5, [sp, #4]
 801e704:	fb06 470c 	mla	r7, r6, ip, r4
 801e708:	2e00      	cmp	r6, #0
 801e70a:	eb02 0e07 	add.w	lr, r2, r7
 801e70e:	db46      	blt.n	801e79e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e710:	45b0      	cmp	r8, r6
 801e712:	dd44      	ble.n	801e79e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801e714:	2c00      	cmp	r4, #0
 801e716:	db40      	blt.n	801e79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e718:	45a4      	cmp	ip, r4
 801e71a:	dd3e      	ble.n	801e79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801e71c:	5dd7      	ldrb	r7, [r2, r7]
 801e71e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e722:	441f      	add	r7, r3
 801e724:	1c62      	adds	r2, r4, #1
 801e726:	d43d      	bmi.n	801e7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e728:	4594      	cmp	ip, r2
 801e72a:	dd3b      	ble.n	801e7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e72c:	f1ba 0f00 	cmp.w	sl, #0
 801e730:	d038      	beq.n	801e7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801e732:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801e736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e73a:	441d      	add	r5, r3
 801e73c:	3601      	adds	r6, #1
 801e73e:	d435      	bmi.n	801e7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e740:	45b0      	cmp	r8, r6
 801e742:	dd33      	ble.n	801e7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e744:	b390      	cbz	r0, 801e7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801e746:	2c00      	cmp	r4, #0
 801e748:	db2e      	blt.n	801e7a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e74a:	45a4      	cmp	ip, r4
 801e74c:	dd2c      	ble.n	801e7a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801e74e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801e752:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e756:	441e      	add	r6, r3
 801e758:	1c62      	adds	r2, r4, #1
 801e75a:	d42a      	bmi.n	801e7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e75c:	4594      	cmp	ip, r2
 801e75e:	dd28      	ble.n	801e7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e760:	f1ba 0f00 	cmp.w	sl, #0
 801e764:	d025      	beq.n	801e7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801e766:	44f4      	add	ip, lr
 801e768:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e76c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e770:	4413      	add	r3, r2
 801e772:	f1ba 0f0f 	cmp.w	sl, #15
 801e776:	f897 8000 	ldrb.w	r8, [r7]
 801e77a:	f895 9000 	ldrb.w	r9, [r5]
 801e77e:	f896 e000 	ldrb.w	lr, [r6]
 801e782:	f893 c000 	ldrb.w	ip, [r3]
 801e786:	d801      	bhi.n	801e78c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801e788:	280f      	cmp	r0, #15
 801e78a:	d914      	bls.n	801e7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801e78c:	4b29      	ldr	r3, [pc, #164]	; (801e834 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801e78e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e792:	4a29      	ldr	r2, [pc, #164]	; (801e838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801e794:	4829      	ldr	r0, [pc, #164]	; (801e83c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801e796:	f005 ff39 	bl	802460c <__assert_func>
 801e79a:	af01      	add	r7, sp, #4
 801e79c:	e7c2      	b.n	801e724 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e79e:	ad01      	add	r5, sp, #4
 801e7a0:	462f      	mov	r7, r5
 801e7a2:	e7cb      	b.n	801e73c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e7a4:	ad01      	add	r5, sp, #4
 801e7a6:	e7c9      	b.n	801e73c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e7a8:	ae01      	add	r6, sp, #4
 801e7aa:	e7d5      	b.n	801e758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801e7ac:	ab01      	add	r3, sp, #4
 801e7ae:	461e      	mov	r6, r3
 801e7b0:	e7df      	b.n	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e7b2:	ab01      	add	r3, sp, #4
 801e7b4:	e7dd      	b.n	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e7b6:	fa1f f48a 	uxth.w	r4, sl
 801e7ba:	b280      	uxth	r0, r0
 801e7bc:	fb04 fa00 	mul.w	sl, r4, r0
 801e7c0:	0124      	lsls	r4, r4, #4
 801e7c2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e7c6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801e7ca:	b282      	uxth	r2, r0
 801e7cc:	eba4 000a 	sub.w	r0, r4, sl
 801e7d0:	ebab 0b02 	sub.w	fp, fp, r2
 801e7d4:	b280      	uxth	r0, r0
 801e7d6:	fa1f fb8b 	uxth.w	fp, fp
 801e7da:	fb00 f909 	mul.w	r9, r0, r9
 801e7de:	fb0b 9808 	mla	r8, fp, r8, r9
 801e7e2:	fb02 8e0e 	mla	lr, r2, lr, r8
 801e7e6:	fb0a ec0c 	mla	ip, sl, ip, lr
 801e7ea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e7ee:	f881 c000 	strb.w	ip, [r1]
 801e7f2:	786c      	ldrb	r4, [r5, #1]
 801e7f4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e7f8:	4344      	muls	r4, r0
 801e7fa:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e7fe:	7874      	ldrb	r4, [r6, #1]
 801e800:	fb02 cc04 	mla	ip, r2, r4, ip
 801e804:	785c      	ldrb	r4, [r3, #1]
 801e806:	fb0a c404 	mla	r4, sl, r4, ip
 801e80a:	1224      	asrs	r4, r4, #8
 801e80c:	704c      	strb	r4, [r1, #1]
 801e80e:	78ad      	ldrb	r5, [r5, #2]
 801e810:	78bc      	ldrb	r4, [r7, #2]
 801e812:	4368      	muls	r0, r5
 801e814:	fb0b 0b04 	mla	fp, fp, r4, r0
 801e818:	78b0      	ldrb	r0, [r6, #2]
 801e81a:	fb02 b000 	mla	r0, r2, r0, fp
 801e81e:	789a      	ldrb	r2, [r3, #2]
 801e820:	fb0a 0a02 	mla	sl, sl, r2, r0
 801e824:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e828:	f881 a002 	strb.w	sl, [r1, #2]
 801e82c:	b003      	add	sp, #12
 801e82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e832:	bf00      	nop
 801e834:	08028fc7 	.word	0x08028fc7
 801e838:	080294be 	.word	0x080294be
 801e83c:	08029090 	.word	0x08029090

0801e840 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e844:	ed2d 8b0a 	vpush	{d8-d12}
 801e848:	b08f      	sub	sp, #60	; 0x3c
 801e84a:	eeb0 aa40 	vmov.f32	s20, s0
 801e84e:	eef0 9a60 	vmov.f32	s19, s1
 801e852:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801e854:	eeb0 9a41 	vmov.f32	s18, s2
 801e858:	9307      	str	r3, [sp, #28]
 801e85a:	eeb0 8a62 	vmov.f32	s16, s5
 801e85e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801e862:	eef0 8a43 	vmov.f32	s17, s6
 801e866:	900d      	str	r0, [sp, #52]	; 0x34
 801e868:	eeb0 ca44 	vmov.f32	s24, s8
 801e86c:	6860      	ldr	r0, [r4, #4]
 801e86e:	eef0 ba64 	vmov.f32	s23, s9
 801e872:	9309      	str	r3, [sp, #36]	; 0x24
 801e874:	eeb0 ba45 	vmov.f32	s22, s10
 801e878:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e87c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801e880:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801e884:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e888:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e88a:	fb00 1303 	mla	r3, r0, r3, r1
 801e88e:	6821      	ldr	r1, [r4, #0]
 801e890:	6854      	ldr	r4, [r2, #4]
 801e892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e896:	3404      	adds	r4, #4
 801e898:	18cb      	adds	r3, r1, r3
 801e89a:	9308      	str	r3, [sp, #32]
 801e89c:	6813      	ldr	r3, [r2, #0]
 801e89e:	930a      	str	r3, [sp, #40]	; 0x28
 801e8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	dc03      	bgt.n	801e8ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e8a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	f340 81d2 	ble.w	801ec52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e8ae:	9b07      	ldr	r3, [sp, #28]
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	f340 80e3 	ble.w	801ea7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801e8b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e8b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8ba:	1412      	asrs	r2, r2, #16
 801e8bc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e8c0:	d42f      	bmi.n	801e922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e8c2:	1c51      	adds	r1, r2, #1
 801e8c4:	428d      	cmp	r5, r1
 801e8c6:	dd2f      	ble.n	801e928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	db2d      	blt.n	801e928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8cc:	1c59      	adds	r1, r3, #1
 801e8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8d0:	4288      	cmp	r0, r1
 801e8d2:	dd29      	ble.n	801e928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e8d4:	9b07      	ldr	r3, [sp, #28]
 801e8d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e8d8:	3b01      	subs	r3, #1
 801e8da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e8dc:	fb02 1203 	mla	r2, r2, r3, r1
 801e8e0:	1412      	asrs	r2, r2, #16
 801e8e2:	d42b      	bmi.n	801e93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8e4:	3201      	adds	r2, #1
 801e8e6:	4295      	cmp	r5, r2
 801e8e8:	dd28      	ble.n	801e93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e8ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e8ee:	fb02 1303 	mla	r3, r2, r3, r1
 801e8f2:	141b      	asrs	r3, r3, #16
 801e8f4:	d422      	bmi.n	801e93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8f6:	3301      	adds	r3, #1
 801e8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8fa:	429a      	cmp	r2, r3
 801e8fc:	dd1e      	ble.n	801e93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e8fe:	9b08      	ldr	r3, [sp, #32]
 801e900:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e904:	f103 0803 	add.w	r8, r3, #3
 801e908:	f1ba 0f00 	cmp.w	sl, #0
 801e90c:	f300 8119 	bgt.w	801eb42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801e910:	9b07      	ldr	r3, [sp, #28]
 801e912:	9a08      	ldr	r2, [sp, #32]
 801e914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e91c:	441a      	add	r2, r3
 801e91e:	9208      	str	r2, [sp, #32]
 801e920:	e0ae      	b.n	801ea80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801e922:	1c51      	adds	r1, r2, #1
 801e924:	f040 809b 	bne.w	801ea5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e928:	42aa      	cmp	r2, r5
 801e92a:	f280 8098 	bge.w	801ea5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e92e:	1c5a      	adds	r2, r3, #1
 801e930:	f2c0 8095 	blt.w	801ea5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e936:	4293      	cmp	r3, r2
 801e938:	f280 8091 	bge.w	801ea5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e93c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801e940:	f1bb 0f00 	cmp.w	fp, #0
 801e944:	dde4      	ble.n	801e910 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e946:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e948:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e94a:	141a      	asrs	r2, r3, #16
 801e94c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e94e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e950:	1400      	asrs	r0, r0, #16
 801e952:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e956:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e95a:	f100 80dc 	bmi.w	801eb16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801e95e:	1c47      	adds	r7, r0, #1
 801e960:	42bd      	cmp	r5, r7
 801e962:	f340 80da 	ble.w	801eb1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e966:	2a00      	cmp	r2, #0
 801e968:	f2c0 80d7 	blt.w	801eb1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e96c:	f102 0c01 	add.w	ip, r2, #1
 801e970:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e972:	4567      	cmp	r7, ip
 801e974:	f340 80d1 	ble.w	801eb1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e978:	fb02 0005 	mla	r0, r2, r5, r0
 801e97c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e97e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e980:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e984:	4402      	add	r2, r0
 801e986:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e98a:	eb04 0c08 	add.w	ip, r4, r8
 801e98e:	2b00      	cmp	r3, #0
 801e990:	f000 80b3 	beq.w	801eafa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801e994:	7857      	ldrb	r7, [r2, #1]
 801e996:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e99a:	4427      	add	r7, r4
 801e99c:	2900      	cmp	r1, #0
 801e99e:	f000 80b4 	beq.w	801eb0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801e9a2:	1950      	adds	r0, r2, r5
 801e9a4:	5d52      	ldrb	r2, [r2, r5]
 801e9a6:	7840      	ldrb	r0, [r0, #1]
 801e9a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e9ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9b0:	4422      	add	r2, r4
 801e9b2:	4420      	add	r0, r4
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	f814 a008 	ldrb.w	sl, [r4, r8]
 801e9ba:	b289      	uxth	r1, r1
 801e9bc:	f897 8000 	ldrb.w	r8, [r7]
 801e9c0:	fb03 f901 	mul.w	r9, r3, r1
 801e9c4:	011b      	lsls	r3, r3, #4
 801e9c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e9ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e9ce:	eba3 0309 	sub.w	r3, r3, r9
 801e9d2:	b289      	uxth	r1, r1
 801e9d4:	b29b      	uxth	r3, r3
 801e9d6:	ebae 0e01 	sub.w	lr, lr, r1
 801e9da:	fb03 f808 	mul.w	r8, r3, r8
 801e9de:	fa1f fe8e 	uxth.w	lr, lr
 801e9e2:	fb0e 880a 	mla	r8, lr, sl, r8
 801e9e6:	f892 a000 	ldrb.w	sl, [r2]
 801e9ea:	fb01 880a 	mla	r8, r1, sl, r8
 801e9ee:	f890 a000 	ldrb.w	sl, [r0]
 801e9f2:	fb09 880a 	mla	r8, r9, sl, r8
 801e9f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e9fa:	f886 8000 	strb.w	r8, [r6]
 801e9fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ea02:	f89c a001 	ldrb.w	sl, [ip, #1]
 801ea06:	fb03 f808 	mul.w	r8, r3, r8
 801ea0a:	fb0e 880a 	mla	r8, lr, sl, r8
 801ea0e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ea12:	fb01 880a 	mla	r8, r1, sl, r8
 801ea16:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ea1a:	fb09 880a 	mla	r8, r9, sl, r8
 801ea1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea22:	f886 8001 	strb.w	r8, [r6, #1]
 801ea26:	78bf      	ldrb	r7, [r7, #2]
 801ea28:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ea2c:	437b      	muls	r3, r7
 801ea2e:	7892      	ldrb	r2, [r2, #2]
 801ea30:	fb0e 330c 	mla	r3, lr, ip, r3
 801ea34:	fb01 3102 	mla	r1, r1, r2, r3
 801ea38:	7882      	ldrb	r2, [r0, #2]
 801ea3a:	fb09 1902 	mla	r9, r9, r2, r1
 801ea3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea42:	f886 9002 	strb.w	r9, [r6, #2]
 801ea46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea48:	3603      	adds	r6, #3
 801ea4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ea4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea50:	4413      	add	r3, r2
 801ea52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ea54:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea58:	4413      	add	r3, r2
 801ea5a:	9324      	str	r3, [sp, #144]	; 0x90
 801ea5c:	e770      	b.n	801e940 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ea5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea60:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ea62:	4413      	add	r3, r2
 801ea64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ea66:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea6a:	4413      	add	r3, r2
 801ea6c:	9324      	str	r3, [sp, #144]	; 0x90
 801ea6e:	9b07      	ldr	r3, [sp, #28]
 801ea70:	3b01      	subs	r3, #1
 801ea72:	9307      	str	r3, [sp, #28]
 801ea74:	9b08      	ldr	r3, [sp, #32]
 801ea76:	3303      	adds	r3, #3
 801ea78:	9308      	str	r3, [sp, #32]
 801ea7a:	e718      	b.n	801e8ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ea7c:	f47f af2a 	bne.w	801e8d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801ea80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	f340 80e5 	ble.w	801ec52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ea88:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ea8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea8e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ea92:	eef0 6a48 	vmov.f32	s13, s16
 801ea96:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ea9a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ea9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaa2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801eaa6:	eef0 6a68 	vmov.f32	s13, s17
 801eaaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaae:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801eab2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eab6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eaba:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eabe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eac2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eac6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eaca:	ee18 2a10 	vmov	r2, s16
 801eace:	eeb0 8a47 	vmov.f32	s16, s14
 801ead2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ead6:	ee18 2a90 	vmov	r2, s17
 801eada:	9325      	str	r3, [sp, #148]	; 0x94
 801eadc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eade:	eef0 8a67 	vmov.f32	s17, s15
 801eae2:	fb92 f3f3 	sdiv	r3, r2, r3
 801eae6:	9326      	str	r3, [sp, #152]	; 0x98
 801eae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eaec:	3b01      	subs	r3, #1
 801eaee:	930b      	str	r3, [sp, #44]	; 0x2c
 801eaf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eaf2:	bf08      	it	eq
 801eaf4:	4613      	moveq	r3, r2
 801eaf6:	9307      	str	r3, [sp, #28]
 801eaf8:	e6d2      	b.n	801e8a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801eafa:	b149      	cbz	r1, 801eb10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801eafc:	5d52      	ldrb	r2, [r2, r5]
 801eafe:	4660      	mov	r0, ip
 801eb00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb04:	4422      	add	r2, r4
 801eb06:	4667      	mov	r7, ip
 801eb08:	e754      	b.n	801e9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801eb0a:	4660      	mov	r0, ip
 801eb0c:	4662      	mov	r2, ip
 801eb0e:	e751      	b.n	801e9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801eb10:	4660      	mov	r0, ip
 801eb12:	4662      	mov	r2, ip
 801eb14:	e7f7      	b.n	801eb06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801eb16:	1c47      	adds	r7, r0, #1
 801eb18:	d195      	bne.n	801ea46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb1a:	4285      	cmp	r5, r0
 801eb1c:	dd93      	ble.n	801ea46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb1e:	1c57      	adds	r7, r2, #1
 801eb20:	db91      	blt.n	801ea46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eb24:	4297      	cmp	r7, r2
 801eb26:	dd8e      	ble.n	801ea46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb28:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801eb2c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801eb30:	e9cd 5700 	strd	r5, r7, [sp]
 801eb34:	4623      	mov	r3, r4
 801eb36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb38:	4631      	mov	r1, r6
 801eb3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eb3c:	f7ff fdca 	bl	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801eb40:	e781      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801eb42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801eb44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801eb46:	1410      	asrs	r0, r2, #16
 801eb48:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eb4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eb4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eb50:	1412      	asrs	r2, r2, #16
 801eb52:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb56:	fb05 2000 	mla	r0, r5, r0, r2
 801eb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb5c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801eb60:	4402      	add	r2, r0
 801eb62:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb66:	eb04 070e 	add.w	r7, r4, lr
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d063      	beq.n	801ec36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801eb6e:	7856      	ldrb	r6, [r2, #1]
 801eb70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb74:	4426      	add	r6, r4
 801eb76:	2900      	cmp	r1, #0
 801eb78:	d065      	beq.n	801ec46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801eb7a:	1950      	adds	r0, r2, r5
 801eb7c:	5d52      	ldrb	r2, [r2, r5]
 801eb7e:	7840      	ldrb	r0, [r0, #1]
 801eb80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb88:	4422      	add	r2, r4
 801eb8a:	4420      	add	r0, r4
 801eb8c:	b29b      	uxth	r3, r3
 801eb8e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801eb92:	b289      	uxth	r1, r1
 801eb94:	f896 e000 	ldrb.w	lr, [r6]
 801eb98:	f108 0803 	add.w	r8, r8, #3
 801eb9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eba0:	fb03 f901 	mul.w	r9, r3, r1
 801eba4:	011b      	lsls	r3, r3, #4
 801eba6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ebaa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ebae:	eba3 0309 	sub.w	r3, r3, r9
 801ebb2:	b289      	uxth	r1, r1
 801ebb4:	b29b      	uxth	r3, r3
 801ebb6:	ebac 0c01 	sub.w	ip, ip, r1
 801ebba:	fb03 fe0e 	mul.w	lr, r3, lr
 801ebbe:	fa1f fc8c 	uxth.w	ip, ip
 801ebc2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebc6:	f892 b000 	ldrb.w	fp, [r2]
 801ebca:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebce:	f890 b000 	ldrb.w	fp, [r0]
 801ebd2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ebd6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ebda:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ebde:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ebe2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ebe6:	fb03 fe0e 	mul.w	lr, r3, lr
 801ebea:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebee:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ebf2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebf6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ebfa:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ebfe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec02:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ec06:	78b6      	ldrb	r6, [r6, #2]
 801ec08:	78bf      	ldrb	r7, [r7, #2]
 801ec0a:	4373      	muls	r3, r6
 801ec0c:	7896      	ldrb	r6, [r2, #2]
 801ec0e:	7882      	ldrb	r2, [r0, #2]
 801ec10:	fb0c 3307 	mla	r3, ip, r7, r3
 801ec14:	fb01 3306 	mla	r3, r1, r6, r3
 801ec18:	fb09 3902 	mla	r9, r9, r2, r3
 801ec1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ec1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ec20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec24:	4413      	add	r3, r2
 801ec26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ec28:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ec2c:	9323      	str	r3, [sp, #140]	; 0x8c
 801ec2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec30:	4413      	add	r3, r2
 801ec32:	9324      	str	r3, [sp, #144]	; 0x90
 801ec34:	e668      	b.n	801e908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ec36:	b149      	cbz	r1, 801ec4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801ec38:	5d52      	ldrb	r2, [r2, r5]
 801ec3a:	4638      	mov	r0, r7
 801ec3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec40:	4422      	add	r2, r4
 801ec42:	463e      	mov	r6, r7
 801ec44:	e7a2      	b.n	801eb8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ec46:	4638      	mov	r0, r7
 801ec48:	463a      	mov	r2, r7
 801ec4a:	e79f      	b.n	801eb8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ec4c:	4638      	mov	r0, r7
 801ec4e:	463a      	mov	r2, r7
 801ec50:	e7f7      	b.n	801ec42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801ec52:	b00f      	add	sp, #60	; 0x3c
 801ec54:	ecbd 8b0a 	vpop	{d8-d12}
 801ec58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec60:	b087      	sub	sp, #28
 801ec62:	7888      	ldrb	r0, [r1, #2]
 801ec64:	9002      	str	r0, [sp, #8]
 801ec66:	7848      	ldrb	r0, [r1, #1]
 801ec68:	9e02      	ldr	r6, [sp, #8]
 801ec6a:	9003      	str	r0, [sp, #12]
 801ec6c:	7808      	ldrb	r0, [r1, #0]
 801ec6e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ec72:	9004      	str	r0, [sp, #16]
 801ec74:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ec78:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801ec7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801ec80:	9e03      	ldr	r6, [sp, #12]
 801ec82:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801ec86:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ec8a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801ec8e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801ec92:	fb04 7508 	mla	r5, r4, r8, r7
 801ec96:	2c00      	cmp	r4, #0
 801ec98:	eb02 0905 	add.w	r9, r2, r5
 801ec9c:	db45      	blt.n	801ed2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801ec9e:	45a2      	cmp	sl, r4
 801eca0:	dd43      	ble.n	801ed2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801eca2:	2f00      	cmp	r7, #0
 801eca4:	db3f      	blt.n	801ed26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801eca6:	45b8      	cmp	r8, r7
 801eca8:	dd3d      	ble.n	801ed26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801ecaa:	5d52      	ldrb	r2, [r2, r5]
 801ecac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ecb0:	1c7a      	adds	r2, r7, #1
 801ecb2:	d43d      	bmi.n	801ed30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ecb4:	4590      	cmp	r8, r2
 801ecb6:	dd3b      	ble.n	801ed30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ecb8:	f1bc 0f00 	cmp.w	ip, #0
 801ecbc:	d038      	beq.n	801ed30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ecbe:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ecc2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ecc6:	3401      	adds	r4, #1
 801ecc8:	d436      	bmi.n	801ed38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecca:	45a2      	cmp	sl, r4
 801eccc:	dd34      	ble.n	801ed38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecce:	f1be 0f00 	cmp.w	lr, #0
 801ecd2:	d031      	beq.n	801ed38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ecd4:	2f00      	cmp	r7, #0
 801ecd6:	db2d      	blt.n	801ed34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801ecd8:	45b8      	cmp	r8, r7
 801ecda:	dd2b      	ble.n	801ed34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801ecdc:	f819 2008 	ldrb.w	r2, [r9, r8]
 801ece0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ece4:	3701      	adds	r7, #1
 801ece6:	d409      	bmi.n	801ecfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ece8:	45b8      	cmp	r8, r7
 801ecea:	dd07      	ble.n	801ecfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ecec:	f1bc 0f00 	cmp.w	ip, #0
 801ecf0:	d004      	beq.n	801ecfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ecf2:	44c8      	add	r8, r9
 801ecf4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ecf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ecfc:	f1bc 0f0f 	cmp.w	ip, #15
 801ed00:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ed04:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ed08:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ed0c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ed10:	d802      	bhi.n	801ed18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801ed12:	f1be 0f0f 	cmp.w	lr, #15
 801ed16:	d911      	bls.n	801ed3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801ed18:	4b77      	ldr	r3, [pc, #476]	; (801eef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801ed1a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ed1e:	4a77      	ldr	r2, [pc, #476]	; (801eefc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801ed20:	4877      	ldr	r0, [pc, #476]	; (801ef00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801ed22:	f005 fc73 	bl	802460c <__assert_func>
 801ed26:	4606      	mov	r6, r0
 801ed28:	e7c2      	b.n	801ecb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801ed2a:	4605      	mov	r5, r0
 801ed2c:	4606      	mov	r6, r0
 801ed2e:	e7ca      	b.n	801ecc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ed30:	4605      	mov	r5, r0
 801ed32:	e7c8      	b.n	801ecc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ed34:	4604      	mov	r4, r0
 801ed36:	e7d5      	b.n	801ece4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801ed38:	4604      	mov	r4, r0
 801ed3a:	e7df      	b.n	801ecfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ed3c:	fa1f fc8c 	uxth.w	ip, ip
 801ed40:	fa1f f28e 	uxth.w	r2, lr
 801ed44:	fb02 fe0c 	mul.w	lr, r2, ip
 801ed48:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ed4c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801ed50:	ebac 070e 	sub.w	r7, ip, lr
 801ed54:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ed58:	b292      	uxth	r2, r2
 801ed5a:	b2bf      	uxth	r7, r7
 801ed5c:	1a9b      	subs	r3, r3, r2
 801ed5e:	fb07 fc0a 	mul.w	ip, r7, sl
 801ed62:	b29b      	uxth	r3, r3
 801ed64:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ed68:	9301      	str	r3, [sp, #4]
 801ed6a:	fb02 cc09 	mla	ip, r2, r9, ip
 801ed6e:	fb0e cc08 	mla	ip, lr, r8, ip
 801ed72:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ed76:	9305      	str	r3, [sp, #20]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	f000 80b9 	beq.w	801eef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801ed7e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ed82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed86:	fb0b fc0c 	mul.w	ip, fp, ip
 801ed8a:	fb0b f606 	mul.w	r6, fp, r6
 801ed8e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ed92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed96:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ed9a:	44dc      	add	ip, fp
 801ed9c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801eda0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801eda4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eda8:	fb0a fb0b 	mul.w	fp, sl, fp
 801edac:	fb0a fa05 	mul.w	sl, sl, r5
 801edb0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801edb4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801edb8:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801edbc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801edc0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801edc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801edc8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801edcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edd0:	0a36      	lsrs	r6, r6, #8
 801edd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edd6:	44dc      	add	ip, fp
 801edd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eddc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ede0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ede4:	fb09 fb0b 	mul.w	fp, r9, fp
 801ede8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edec:	fb09 f904 	mul.w	r9, r9, r4
 801edf0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801edf4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801edf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edfc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ee00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ee04:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ee08:	fb0c fc07 	mul.w	ip, ip, r7
 801ee0c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ee10:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801ee14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ee18:	445d      	add	r5, fp
 801ee1a:	fb08 f404 	mul.w	r4, r8, r4
 801ee1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ee22:	fb08 f800 	mul.w	r8, r8, r0
 801ee26:	0a2d      	lsrs	r5, r5, #8
 801ee28:	0a20      	lsrs	r0, r4, #8
 801ee2a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ee2e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ee32:	fb07 f70a 	mul.w	r7, r7, sl
 801ee36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ee3a:	4404      	add	r4, r0
 801ee3c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801ee40:	0a24      	lsrs	r4, r4, #8
 801ee42:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801ee46:	9801      	ldr	r0, [sp, #4]
 801ee48:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ee4c:	fb03 cc00 	mla	ip, r3, r0, ip
 801ee50:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ee54:	fb00 7606 	mla	r6, r0, r6, r7
 801ee58:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801ee5c:	fb04 cc0e 	mla	ip, r4, lr, ip
 801ee60:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ee64:	b280      	uxth	r0, r0
 801ee66:	9c04      	ldr	r4, [sp, #16]
 801ee68:	fb05 cc02 	mla	ip, r5, r2, ip
 801ee6c:	fb0e 6e08 	mla	lr, lr, r8, r6
 801ee70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee74:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ee78:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801ee7c:	fb02 ec0c 	mla	ip, r2, ip, lr
 801ee80:	9a05      	ldr	r2, [sp, #20]
 801ee82:	4342      	muls	r2, r0
 801ee84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee88:	1c53      	adds	r3, r2, #1
 801ee8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ee8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee92:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee96:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ee9a:	fa5f f28c 	uxtb.w	r2, ip
 801ee9e:	b2db      	uxtb	r3, r3
 801eea0:	fb14 f403 	smulbb	r4, r4, r3
 801eea4:	fb02 4200 	mla	r2, r2, r0, r4
 801eea8:	b292      	uxth	r2, r2
 801eeaa:	1c54      	adds	r4, r2, #1
 801eeac:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801eeb0:	9c03      	ldr	r4, [sp, #12]
 801eeb2:	fb14 f403 	smulbb	r4, r4, r3
 801eeb6:	1212      	asrs	r2, r2, #8
 801eeb8:	700a      	strb	r2, [r1, #0]
 801eeba:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801eebe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eec2:	fb02 4200 	mla	r2, r2, r0, r4
 801eec6:	b292      	uxth	r2, r2
 801eec8:	1c54      	adds	r4, r2, #1
 801eeca:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801eece:	1212      	asrs	r2, r2, #8
 801eed0:	704a      	strb	r2, [r1, #1]
 801eed2:	9a02      	ldr	r2, [sp, #8]
 801eed4:	fb12 f303 	smulbb	r3, r2, r3
 801eed8:	fb0c 3c00 	mla	ip, ip, r0, r3
 801eedc:	fa1f fc8c 	uxth.w	ip, ip
 801eee0:	f10c 0301 	add.w	r3, ip, #1
 801eee4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eee8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eeec:	f881 c002 	strb.w	ip, [r1, #2]
 801eef0:	b007      	add	sp, #28
 801eef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eef6:	bf00      	nop
 801eef8:	08028fc7 	.word	0x08028fc7
 801eefc:	080294be 	.word	0x080294be
 801ef00:	08029090 	.word	0x08029090

0801ef04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef08:	ed2d 8b08 	vpush	{d8-d11}
 801ef0c:	b09b      	sub	sp, #108	; 0x6c
 801ef0e:	eeb0 aa40 	vmov.f32	s20, s0
 801ef12:	eef0 9a60 	vmov.f32	s19, s1
 801ef16:	930a      	str	r3, [sp, #40]	; 0x28
 801ef18:	eeb0 9a41 	vmov.f32	s18, s2
 801ef1c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801ef20:	eeb0 8a62 	vmov.f32	s16, s5
 801ef24:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801ef26:	eef0 8a43 	vmov.f32	s17, s6
 801ef2a:	9312      	str	r3, [sp, #72]	; 0x48
 801ef2c:	eef0 ba44 	vmov.f32	s23, s8
 801ef30:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801ef34:	eeb0 ba64 	vmov.f32	s22, s9
 801ef38:	9019      	str	r0, [sp, #100]	; 0x64
 801ef3a:	eef0 aa45 	vmov.f32	s21, s10
 801ef3e:	9114      	str	r1, [sp, #80]	; 0x50
 801ef40:	9317      	str	r3, [sp, #92]	; 0x5c
 801ef42:	6868      	ldr	r0, [r5, #4]
 801ef44:	9218      	str	r2, [sp, #96]	; 0x60
 801ef46:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801ef48:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801ef4c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801ef50:	fb00 1303 	mla	r3, r0, r3, r1
 801ef54:	6829      	ldr	r1, [r5, #0]
 801ef56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef5a:	18cb      	adds	r3, r1, r3
 801ef5c:	930d      	str	r3, [sp, #52]	; 0x34
 801ef5e:	6813      	ldr	r3, [r2, #0]
 801ef60:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef62:	6853      	ldr	r3, [r2, #4]
 801ef64:	3304      	adds	r3, #4
 801ef66:	9309      	str	r3, [sp, #36]	; 0x24
 801ef68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef6a:	2b00      	cmp	r3, #0
 801ef6c:	dc03      	bgt.n	801ef76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ef6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	f340 8352 	ble.w	801f61a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801ef76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	f340 81a2 	ble.w	801f2c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801ef7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ef80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef82:	1412      	asrs	r2, r2, #16
 801ef84:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef88:	d431      	bmi.n	801efee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ef8a:	1c51      	adds	r1, r2, #1
 801ef8c:	428c      	cmp	r4, r1
 801ef8e:	dd31      	ble.n	801eff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	db2f      	blt.n	801eff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef94:	1c59      	adds	r1, r3, #1
 801ef96:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ef98:	4288      	cmp	r0, r1
 801ef9a:	dd2b      	ble.n	801eff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ef9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef9e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801efa0:	3b01      	subs	r3, #1
 801efa2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801efa4:	fb02 1203 	mla	r2, r2, r3, r1
 801efa8:	1412      	asrs	r2, r2, #16
 801efaa:	d42d      	bmi.n	801f008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efac:	3201      	adds	r2, #1
 801efae:	4294      	cmp	r4, r2
 801efb0:	dd2a      	ble.n	801f008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efb2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801efb4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801efb6:	fb02 1303 	mla	r3, r2, r3, r1
 801efba:	141b      	asrs	r3, r3, #16
 801efbc:	d424      	bmi.n	801f008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efbe:	3301      	adds	r3, #1
 801efc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efc2:	429a      	cmp	r2, r3
 801efc4:	dd20      	ble.n	801f008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801efc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efc8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801efcc:	f103 0e03 	add.w	lr, r3, #3
 801efd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efd2:	9315      	str	r3, [sp, #84]	; 0x54
 801efd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	f300 81de 	bgt.w	801f398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801efdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801efe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efe8:	441a      	add	r2, r3
 801efea:	920d      	str	r2, [sp, #52]	; 0x34
 801efec:	e16b      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801efee:	1c51      	adds	r1, r2, #1
 801eff0:	f040 8158 	bne.w	801f2a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801eff4:	42a2      	cmp	r2, r4
 801eff6:	f280 8155 	bge.w	801f2a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801effa:	1c5a      	adds	r2, r3, #1
 801effc:	f2c0 8152 	blt.w	801f2a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f002:	4293      	cmp	r3, r2
 801f004:	f280 814e 	bge.w	801f2a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f00a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f00c:	9316      	str	r3, [sp, #88]	; 0x58
 801f00e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f012:	9315      	str	r3, [sp, #84]	; 0x54
 801f014:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f016:	2b00      	cmp	r3, #0
 801f018:	dde0      	ble.n	801efdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f01a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f01c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f01e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f022:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f024:	141b      	asrs	r3, r3, #16
 801f026:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f02a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f02c:	1412      	asrs	r2, r2, #16
 801f02e:	f100 819a 	bmi.w	801f366 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f032:	1c55      	adds	r5, r2, #1
 801f034:	42ac      	cmp	r4, r5
 801f036:	f340 8198 	ble.w	801f36a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	f2c0 8195 	blt.w	801f36a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f040:	1c5d      	adds	r5, r3, #1
 801f042:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f044:	42af      	cmp	r7, r5
 801f046:	f340 8190 	ble.w	801f36a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f04a:	fb03 2304 	mla	r3, r3, r4, r2
 801f04e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f050:	18d5      	adds	r5, r2, r3
 801f052:	5cd3      	ldrb	r3, [r2, r3]
 801f054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f05a:	0e1f      	lsrs	r7, r3, #24
 801f05c:	2800      	cmp	r0, #0
 801f05e:	f000 8171 	beq.w	801f344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f062:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f066:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f06a:	920e      	str	r2, [sp, #56]	; 0x38
 801f06c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f070:	2900      	cmp	r1, #0
 801f072:	f000 8172 	beq.w	801f35a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f076:	eb05 0c04 	add.w	ip, r5, r4
 801f07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f07c:	5d2d      	ldrb	r5, [r5, r4]
 801f07e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f082:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f086:	950b      	str	r5, [sp, #44]	; 0x2c
 801f088:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f08c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f08e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f092:	0e15      	lsrs	r5, r2, #24
 801f094:	920f      	str	r2, [sp, #60]	; 0x3c
 801f096:	b280      	uxth	r0, r0
 801f098:	b289      	uxth	r1, r1
 801f09a:	fb00 fa01 	mul.w	sl, r0, r1
 801f09e:	0100      	lsls	r0, r0, #4
 801f0a0:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f0a4:	eba0 080a 	sub.w	r8, r0, sl
 801f0a8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f0ac:	b289      	uxth	r1, r1
 801f0ae:	fa1f f888 	uxth.w	r8, r8
 801f0b2:	1a52      	subs	r2, r2, r1
 801f0b4:	fb08 f00e 	mul.w	r0, r8, lr
 801f0b8:	b292      	uxth	r2, r2
 801f0ba:	fb02 0007 	mla	r0, r2, r7, r0
 801f0be:	fb01 0009 	mla	r0, r1, r9, r0
 801f0c2:	fb0a 0005 	mla	r0, sl, r5, r0
 801f0c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f0ca:	2800      	cmp	r0, #0
 801f0cc:	f000 80dd 	beq.w	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f0d0:	2fff      	cmp	r7, #255	; 0xff
 801f0d2:	d01a      	beq.n	801f10a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f0d4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f0d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f0dc:	fb07 fc0c 	mul.w	ip, r7, ip
 801f0e0:	435f      	muls	r7, r3
 801f0e2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f0e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0ea:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f0ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f0f2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f0f6:	4463      	add	r3, ip
 801f0f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f0fc:	0a1b      	lsrs	r3, r3, #8
 801f0fe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f106:	ea43 030b 	orr.w	r3, r3, fp
 801f10a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f10e:	d01e      	beq.n	801f14e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f110:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f112:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f116:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f11a:	fb0e fb0b 	mul.w	fp, lr, fp
 801f11e:	fb0e fe07 	mul.w	lr, lr, r7
 801f122:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f126:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f12a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f12e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f132:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f136:	44dc      	add	ip, fp
 801f138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f13c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f140:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f144:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f148:	ea4c 070e 	orr.w	r7, ip, lr
 801f14c:	970e      	str	r7, [sp, #56]	; 0x38
 801f14e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f152:	d01e      	beq.n	801f192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f154:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f156:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f15a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f15e:	fb09 fe0e 	mul.w	lr, r9, lr
 801f162:	fb09 f907 	mul.w	r9, r9, r7
 801f166:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f16a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f16e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f172:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f176:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f17a:	44f4      	add	ip, lr
 801f17c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f184:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f18c:	ea4c 0709 	orr.w	r7, ip, r9
 801f190:	970b      	str	r7, [sp, #44]	; 0x2c
 801f192:	2dff      	cmp	r5, #255	; 0xff
 801f194:	d01c      	beq.n	801f1d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f196:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f198:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f19c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f1a0:	fb05 fe0e 	mul.w	lr, r5, lr
 801f1a4:	437d      	muls	r5, r7
 801f1a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f1aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f1ae:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f1b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1b6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f1ba:	44f4      	add	ip, lr
 801f1bc:	0a2d      	lsrs	r5, r5, #8
 801f1be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1c2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f1c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1ca:	ea4c 0505 	orr.w	r5, ip, r5
 801f1ce:	950f      	str	r5, [sp, #60]	; 0x3c
 801f1d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f1d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f1d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f1da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f1de:	fb08 f505 	mul.w	r5, r8, r5
 801f1e2:	fb02 5507 	mla	r5, r2, r7, r5
 801f1e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f1e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f1ec:	fb01 5507 	mla	r5, r1, r7, r5
 801f1f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f1f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f1f6:	fb0a 5507 	mla	r5, sl, r7, r5
 801f1fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f1fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f200:	0a2d      	lsrs	r5, r5, #8
 801f202:	fb08 f807 	mul.w	r8, r8, r7
 801f206:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f20a:	fb02 8303 	mla	r3, r2, r3, r8
 801f20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f210:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f216:	fb01 330c 	mla	r3, r1, ip, r3
 801f21a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f21e:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f224:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f226:	4343      	muls	r3, r0
 801f228:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f22c:	1c58      	adds	r0, r3, #1
 801f22e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f232:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f236:	ea45 050a 	orr.w	r5, r5, sl
 801f23a:	7833      	ldrb	r3, [r6, #0]
 801f23c:	b2ea      	uxtb	r2, r5
 801f23e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f242:	fb12 f201 	smulbb	r2, r2, r1
 801f246:	b2c0      	uxtb	r0, r0
 801f248:	fb03 2300 	mla	r3, r3, r0, r2
 801f24c:	b29b      	uxth	r3, r3
 801f24e:	1c5a      	adds	r2, r3, #1
 801f250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f254:	7872      	ldrb	r2, [r6, #1]
 801f256:	fb12 f200 	smulbb	r2, r2, r0
 801f25a:	121b      	asrs	r3, r3, #8
 801f25c:	7033      	strb	r3, [r6, #0]
 801f25e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f262:	0c2d      	lsrs	r5, r5, #16
 801f264:	fb03 2301 	mla	r3, r3, r1, r2
 801f268:	b29b      	uxth	r3, r3
 801f26a:	1c5a      	adds	r2, r3, #1
 801f26c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f270:	121b      	asrs	r3, r3, #8
 801f272:	7073      	strb	r3, [r6, #1]
 801f274:	78b3      	ldrb	r3, [r6, #2]
 801f276:	fb13 f000 	smulbb	r0, r3, r0
 801f27a:	fb05 0501 	mla	r5, r5, r1, r0
 801f27e:	b2ad      	uxth	r5, r5
 801f280:	1c6b      	adds	r3, r5, #1
 801f282:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f286:	122d      	asrs	r5, r5, #8
 801f288:	70b5      	strb	r5, [r6, #2]
 801f28a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f28c:	3603      	adds	r6, #3
 801f28e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f290:	4413      	add	r3, r2
 801f292:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f294:	932d      	str	r3, [sp, #180]	; 0xb4
 801f296:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f298:	4413      	add	r3, r2
 801f29a:	932e      	str	r3, [sp, #184]	; 0xb8
 801f29c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f29e:	3b01      	subs	r3, #1
 801f2a0:	9316      	str	r3, [sp, #88]	; 0x58
 801f2a2:	e6b7      	b.n	801f014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f2a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f2a6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f2a8:	4413      	add	r3, r2
 801f2aa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f2ac:	932d      	str	r3, [sp, #180]	; 0xb4
 801f2ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f2b0:	4413      	add	r3, r2
 801f2b2:	932e      	str	r3, [sp, #184]	; 0xb8
 801f2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2b6:	3b01      	subs	r3, #1
 801f2b8:	930a      	str	r3, [sp, #40]	; 0x28
 801f2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2bc:	3303      	adds	r3, #3
 801f2be:	930d      	str	r3, [sp, #52]	; 0x34
 801f2c0:	e659      	b.n	801ef76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f2c2:	f47f ae6b 	bne.w	801ef9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f2c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	f340 81a6 	ble.w	801f61a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f2d8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f2dc:	eef0 6a48 	vmov.f32	s13, s16
 801f2e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f2e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f2e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2ec:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f2f0:	eef0 6a68 	vmov.f32	s13, s17
 801f2f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2f8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f2fc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f300:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f304:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f308:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f30c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f310:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f314:	ee18 2a10 	vmov	r2, s16
 801f318:	eeb0 8a47 	vmov.f32	s16, s14
 801f31c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f320:	ee18 2a90 	vmov	r2, s17
 801f324:	932f      	str	r3, [sp, #188]	; 0xbc
 801f326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f328:	eef0 8a67 	vmov.f32	s17, s15
 801f32c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f330:	9330      	str	r3, [sp, #192]	; 0xc0
 801f332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f334:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f336:	3b01      	subs	r3, #1
 801f338:	9314      	str	r3, [sp, #80]	; 0x50
 801f33a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f33c:	bf08      	it	eq
 801f33e:	4613      	moveq	r3, r2
 801f340:	930a      	str	r3, [sp, #40]	; 0x28
 801f342:	e611      	b.n	801ef68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f344:	b161      	cbz	r1, 801f360 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801f346:	5d2a      	ldrb	r2, [r5, r4]
 801f348:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f34a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f34e:	25ff      	movs	r5, #255	; 0xff
 801f350:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f354:	920b      	str	r2, [sp, #44]	; 0x2c
 801f356:	46ae      	mov	lr, r5
 801f358:	e69d      	b.n	801f096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f35a:	25ff      	movs	r5, #255	; 0xff
 801f35c:	46a9      	mov	r9, r5
 801f35e:	e69a      	b.n	801f096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f360:	25ff      	movs	r5, #255	; 0xff
 801f362:	46a9      	mov	r9, r5
 801f364:	e7f7      	b.n	801f356 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801f366:	1c57      	adds	r7, r2, #1
 801f368:	d18f      	bne.n	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f36a:	4294      	cmp	r4, r2
 801f36c:	dd8d      	ble.n	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f36e:	1c5d      	adds	r5, r3, #1
 801f370:	db8b      	blt.n	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f372:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f374:	429d      	cmp	r5, r3
 801f376:	dd88      	ble.n	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f378:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f37a:	9202      	str	r2, [sp, #8]
 801f37c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f37e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801f382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f384:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f386:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f38a:	e9cd 4300 	strd	r4, r3, [sp]
 801f38e:	4631      	mov	r1, r6
 801f390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f392:	f7ff fc63 	bl	801ec5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f396:	e778      	b.n	801f28a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f398:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f39a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f39c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f3a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f3a2:	1412      	asrs	r2, r2, #16
 801f3a4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f3a8:	141b      	asrs	r3, r3, #16
 801f3aa:	fb04 2303 	mla	r3, r4, r3, r2
 801f3ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3b0:	18d5      	adds	r5, r2, r3
 801f3b2:	5cd3      	ldrb	r3, [r2, r3]
 801f3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f3ba:	0e1e      	lsrs	r6, r3, #24
 801f3bc:	2900      	cmp	r1, #0
 801f3be:	f000 811b 	beq.w	801f5f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801f3c2:	786a      	ldrb	r2, [r5, #1]
 801f3c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f3c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f3ca:	9210      	str	r2, [sp, #64]	; 0x40
 801f3cc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f3d0:	2800      	cmp	r0, #0
 801f3d2:	f000 811c 	beq.w	801f60e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801f3d6:	192a      	adds	r2, r5, r4
 801f3d8:	5d2d      	ldrb	r5, [r5, r4]
 801f3da:	7852      	ldrb	r2, [r2, #1]
 801f3dc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f3e0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f3e4:	950c      	str	r5, [sp, #48]	; 0x30
 801f3e6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f3ea:	0e15      	lsrs	r5, r2, #24
 801f3ec:	9211      	str	r2, [sp, #68]	; 0x44
 801f3ee:	b289      	uxth	r1, r1
 801f3f0:	b280      	uxth	r0, r0
 801f3f2:	fb01 fa00 	mul.w	sl, r1, r0
 801f3f6:	0109      	lsls	r1, r1, #4
 801f3f8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f3fc:	eba1 080a 	sub.w	r8, r1, sl
 801f400:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f404:	b280      	uxth	r0, r0
 801f406:	fa1f f888 	uxth.w	r8, r8
 801f40a:	1a12      	subs	r2, r2, r0
 801f40c:	fb08 f10c 	mul.w	r1, r8, ip
 801f410:	b292      	uxth	r2, r2
 801f412:	fb02 1106 	mla	r1, r2, r6, r1
 801f416:	fb00 1109 	mla	r1, r0, r9, r1
 801f41a:	fb0a 1105 	mla	r1, sl, r5, r1
 801f41e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f422:	2900      	cmp	r1, #0
 801f424:	f000 80da 	beq.w	801f5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801f428:	2eff      	cmp	r6, #255	; 0xff
 801f42a:	d016      	beq.n	801f45a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801f42c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f430:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f434:	4377      	muls	r7, r6
 801f436:	435e      	muls	r6, r3
 801f438:	0a3b      	lsrs	r3, r7, #8
 801f43a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f43e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f442:	443b      	add	r3, r7
 801f444:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f448:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f44c:	0a1b      	lsrs	r3, r3, #8
 801f44e:	0a3f      	lsrs	r7, r7, #8
 801f450:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f454:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f458:	433b      	orrs	r3, r7
 801f45a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f45e:	d01d      	beq.n	801f49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801f460:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f462:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f464:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f468:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f46c:	fb0c f606 	mul.w	r6, ip, r6
 801f470:	fb0c fc07 	mul.w	ip, ip, r7
 801f474:	0a37      	lsrs	r7, r6, #8
 801f476:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f47a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f47e:	4437      	add	r7, r6
 801f480:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f484:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f488:	0a3f      	lsrs	r7, r7, #8
 801f48a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f48e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f492:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f496:	ea47 060c 	orr.w	r6, r7, ip
 801f49a:	9610      	str	r6, [sp, #64]	; 0x40
 801f49c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f4a0:	d01d      	beq.n	801f4de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801f4a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f4a4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f4a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f4ac:	fb09 fc0c 	mul.w	ip, r9, ip
 801f4b0:	fb09 f906 	mul.w	r9, r9, r6
 801f4b4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f4b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4bc:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f4c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4c4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f4c8:	4467      	add	r7, ip
 801f4ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f4ce:	0a3f      	lsrs	r7, r7, #8
 801f4d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f4d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f4d8:	ea47 0609 	orr.w	r6, r7, r9
 801f4dc:	960c      	str	r6, [sp, #48]	; 0x30
 801f4de:	2dff      	cmp	r5, #255	; 0xff
 801f4e0:	d01a      	beq.n	801f518 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801f4e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f4e4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f4e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f4ec:	fb05 fc0c 	mul.w	ip, r5, ip
 801f4f0:	4375      	muls	r5, r6
 801f4f2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f4f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4fa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f4fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f502:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f506:	4467      	add	r7, ip
 801f508:	0a2d      	lsrs	r5, r5, #8
 801f50a:	0a3f      	lsrs	r7, r7, #8
 801f50c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f510:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f514:	433d      	orrs	r5, r7
 801f516:	9511      	str	r5, [sp, #68]	; 0x44
 801f518:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f51a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f51e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f522:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f526:	fb08 f505 	mul.w	r5, r8, r5
 801f52a:	fb02 5506 	mla	r5, r2, r6, r5
 801f52e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f530:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f534:	fb00 5506 	mla	r5, r0, r6, r5
 801f538:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f53a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f53e:	fb0a 5506 	mla	r5, sl, r6, r5
 801f542:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f544:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f548:	0a2d      	lsrs	r5, r5, #8
 801f54a:	fb08 f806 	mul.w	r8, r8, r6
 801f54e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f552:	fb02 8303 	mla	r3, r2, r3, r8
 801f556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f558:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f55c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f55e:	fb00 3307 	mla	r3, r0, r7, r3
 801f562:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f566:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801f56a:	fb01 f30b 	mul.w	r3, r1, fp
 801f56e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f572:	1c59      	adds	r1, r3, #1
 801f574:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f578:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f57c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f580:	ea45 050c 	orr.w	r5, r5, ip
 801f584:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f588:	b2ea      	uxtb	r2, r5
 801f58a:	b2c9      	uxtb	r1, r1
 801f58c:	fb12 f20b 	smulbb	r2, r2, fp
 801f590:	fb03 2301 	mla	r3, r3, r1, r2
 801f594:	b29b      	uxth	r3, r3
 801f596:	1c5a      	adds	r2, r3, #1
 801f598:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f59c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f5a0:	fb12 f201 	smulbb	r2, r2, r1
 801f5a4:	121b      	asrs	r3, r3, #8
 801f5a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f5aa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f5ae:	0c2d      	lsrs	r5, r5, #16
 801f5b0:	fb03 230b 	mla	r3, r3, fp, r2
 801f5b4:	b29b      	uxth	r3, r3
 801f5b6:	1c5a      	adds	r2, r3, #1
 801f5b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f5bc:	121b      	asrs	r3, r3, #8
 801f5be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f5c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f5c6:	fb13 f101 	smulbb	r1, r3, r1
 801f5ca:	fb05 150b 	mla	r5, r5, fp, r1
 801f5ce:	b2ad      	uxth	r5, r5
 801f5d0:	1c69      	adds	r1, r5, #1
 801f5d2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f5d6:	122d      	asrs	r5, r5, #8
 801f5d8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f5dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f5de:	f10e 0e03 	add.w	lr, lr, #3
 801f5e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f5e4:	4413      	add	r3, r2
 801f5e6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f5e8:	932d      	str	r3, [sp, #180]	; 0xb4
 801f5ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f5ec:	4413      	add	r3, r2
 801f5ee:	932e      	str	r3, [sp, #184]	; 0xb8
 801f5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5f2:	3b01      	subs	r3, #1
 801f5f4:	9315      	str	r3, [sp, #84]	; 0x54
 801f5f6:	e4ed      	b.n	801efd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f5f8:	b160      	cbz	r0, 801f614 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801f5fa:	5d2a      	ldrb	r2, [r5, r4]
 801f5fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f5fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f602:	25ff      	movs	r5, #255	; 0xff
 801f604:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f608:	920c      	str	r2, [sp, #48]	; 0x30
 801f60a:	46ac      	mov	ip, r5
 801f60c:	e6ef      	b.n	801f3ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f60e:	25ff      	movs	r5, #255	; 0xff
 801f610:	46a9      	mov	r9, r5
 801f612:	e6ec      	b.n	801f3ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801f614:	25ff      	movs	r5, #255	; 0xff
 801f616:	46a9      	mov	r9, r5
 801f618:	e7f7      	b.n	801f60a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801f61a:	b01b      	add	sp, #108	; 0x6c
 801f61c:	ecbd 8b08 	vpop	{d8-d11}
 801f620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f628:	b085      	sub	sp, #20
 801f62a:	7888      	ldrb	r0, [r1, #2]
 801f62c:	4692      	mov	sl, r2
 801f62e:	4698      	mov	r8, r3
 801f630:	9000      	str	r0, [sp, #0]
 801f632:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f636:	7848      	ldrb	r0, [r1, #1]
 801f638:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f63c:	9001      	str	r0, [sp, #4]
 801f63e:	7808      	ldrb	r0, [r1, #0]
 801f640:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f644:	9002      	str	r0, [sp, #8]
 801f646:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f64a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f64e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f652:	fb04 560c 	mla	r6, r4, ip, r5
 801f656:	2c00      	cmp	r4, #0
 801f658:	eb02 0e06 	add.w	lr, r2, r6
 801f65c:	9a00      	ldr	r2, [sp, #0]
 801f65e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f662:	9a01      	ldr	r2, [sp, #4]
 801f664:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f668:	db3e      	blt.n	801f6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f66a:	45a1      	cmp	r9, r4
 801f66c:	dd3c      	ble.n	801f6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801f66e:	2d00      	cmp	r5, #0
 801f670:	db38      	blt.n	801f6e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f672:	45ac      	cmp	ip, r5
 801f674:	dd36      	ble.n	801f6e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801f676:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801f67a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801f67e:	1c6e      	adds	r6, r5, #1
 801f680:	d435      	bmi.n	801f6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f682:	45b4      	cmp	ip, r6
 801f684:	dd33      	ble.n	801f6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f686:	b393      	cbz	r3, 801f6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801f688:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f68c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801f690:	3401      	adds	r4, #1
 801f692:	d430      	bmi.n	801f6f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f694:	45a1      	cmp	r9, r4
 801f696:	dd2e      	ble.n	801f6f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f698:	b36f      	cbz	r7, 801f6f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801f69a:	2d00      	cmp	r5, #0
 801f69c:	db29      	blt.n	801f6f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f69e:	45ac      	cmp	ip, r5
 801f6a0:	dd27      	ble.n	801f6f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801f6a2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f6a6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801f6aa:	3501      	adds	r5, #1
 801f6ac:	d407      	bmi.n	801f6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f6ae:	45ac      	cmp	ip, r5
 801f6b0:	dd05      	ble.n	801f6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f6b2:	b123      	cbz	r3, 801f6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f6b4:	44f4      	add	ip, lr
 801f6b6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f6ba:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801f6be:	2b0f      	cmp	r3, #15
 801f6c0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f6c4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f6c8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f6cc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f6d0:	d801      	bhi.n	801f6d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801f6d2:	2f0f      	cmp	r7, #15
 801f6d4:	d911      	bls.n	801f6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801f6d6:	4b76      	ldr	r3, [pc, #472]	; (801f8b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801f6d8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f6dc:	4a75      	ldr	r2, [pc, #468]	; (801f8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801f6de:	4876      	ldr	r0, [pc, #472]	; (801f8b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801f6e0:	f004 ff94 	bl	802460c <__assert_func>
 801f6e4:	4602      	mov	r2, r0
 801f6e6:	e7ca      	b.n	801f67e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801f6e8:	4606      	mov	r6, r0
 801f6ea:	4602      	mov	r2, r0
 801f6ec:	e7d0      	b.n	801f690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f6ee:	4606      	mov	r6, r0
 801f6f0:	e7ce      	b.n	801f690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801f6f2:	4604      	mov	r4, r0
 801f6f4:	e7d9      	b.n	801f6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801f6f6:	4604      	mov	r4, r0
 801f6f8:	e7e1      	b.n	801f6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801f6fa:	b29b      	uxth	r3, r3
 801f6fc:	b2bf      	uxth	r7, r7
 801f6fe:	fb07 fe03 	mul.w	lr, r7, r3
 801f702:	011b      	lsls	r3, r3, #4
 801f704:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f708:	eba3 0c0e 	sub.w	ip, r3, lr
 801f70c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f710:	b2bf      	uxth	r7, r7
 801f712:	fa1f fc8c 	uxth.w	ip, ip
 801f716:	1bed      	subs	r5, r5, r7
 801f718:	fb0c f30a 	mul.w	r3, ip, sl
 801f71c:	b2ad      	uxth	r5, r5
 801f71e:	fb05 330b 	mla	r3, r5, fp, r3
 801f722:	fb07 3309 	mla	r3, r7, r9, r3
 801f726:	fb0e 3308 	mla	r3, lr, r8, r3
 801f72a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f72e:	9303      	str	r3, [sp, #12]
 801f730:	2b00      	cmp	r3, #0
 801f732:	f000 80b9 	beq.w	801f8a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801f736:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f73a:	d018      	beq.n	801f76e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801f73c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f740:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f744:	fb0b f303 	mul.w	r3, fp, r3
 801f748:	fb0b fb02 	mul.w	fp, fp, r2
 801f74c:	0a1a      	lsrs	r2, r3, #8
 801f74e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f752:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f756:	441a      	add	r2, r3
 801f758:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f75c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f760:	0a12      	lsrs	r2, r2, #8
 801f762:	0a1b      	lsrs	r3, r3, #8
 801f764:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f76c:	431a      	orrs	r2, r3
 801f76e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f772:	d019      	beq.n	801f7a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801f774:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f778:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f77c:	fb0a fb0b 	mul.w	fp, sl, fp
 801f780:	fb0a fa06 	mul.w	sl, sl, r6
 801f784:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f788:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f78c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f790:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f794:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f798:	445e      	add	r6, fp
 801f79a:	0a1b      	lsrs	r3, r3, #8
 801f79c:	0a36      	lsrs	r6, r6, #8
 801f79e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f7a6:	431e      	orrs	r6, r3
 801f7a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f7ac:	d019      	beq.n	801f7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801f7ae:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f7b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f7b6:	fb09 fa0a 	mul.w	sl, r9, sl
 801f7ba:	fb09 f904 	mul.w	r9, r9, r4
 801f7be:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f7c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f7c6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f7ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f7ce:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f7d2:	4454      	add	r4, sl
 801f7d4:	0a1b      	lsrs	r3, r3, #8
 801f7d6:	0a24      	lsrs	r4, r4, #8
 801f7d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f7e0:	431c      	orrs	r4, r3
 801f7e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f7e6:	d019      	beq.n	801f81c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801f7e8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f7ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f7f0:	fb08 f909 	mul.w	r9, r8, r9
 801f7f4:	fb08 f800 	mul.w	r8, r8, r0
 801f7f8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f7fc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f800:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f804:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f808:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f80c:	4448      	add	r0, r9
 801f80e:	0a1b      	lsrs	r3, r3, #8
 801f810:	0a00      	lsrs	r0, r0, #8
 801f812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f816:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f81a:	4318      	orrs	r0, r3
 801f81c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f820:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f824:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f828:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f82c:	fb0c f808 	mul.w	r8, ip, r8
 801f830:	fb0c f606 	mul.w	r6, ip, r6
 801f834:	fb05 8803 	mla	r8, r5, r3, r8
 801f838:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f83c:	fb05 6202 	mla	r2, r5, r2, r6
 801f840:	fb07 8803 	mla	r8, r7, r3, r8
 801f844:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f848:	fb0e 8303 	mla	r3, lr, r3, r8
 801f84c:	0a1b      	lsrs	r3, r3, #8
 801f84e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f852:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f856:	9c02      	ldr	r4, [sp, #8]
 801f858:	fb07 2703 	mla	r7, r7, r3, r2
 801f85c:	9a03      	ldr	r2, [sp, #12]
 801f85e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f862:	43d2      	mvns	r2, r2
 801f864:	fb0e 7303 	mla	r3, lr, r3, r7
 801f868:	b2d2      	uxtb	r2, r2
 801f86a:	0a1b      	lsrs	r3, r3, #8
 801f86c:	4354      	muls	r4, r2
 801f86e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f872:	1c60      	adds	r0, r4, #1
 801f874:	ea48 0303 	orr.w	r3, r8, r3
 801f878:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f87c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f880:	7008      	strb	r0, [r1, #0]
 801f882:	9801      	ldr	r0, [sp, #4]
 801f884:	4350      	muls	r0, r2
 801f886:	1c44      	adds	r4, r0, #1
 801f888:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801f88c:	0a18      	lsrs	r0, r3, #8
 801f88e:	0c1b      	lsrs	r3, r3, #16
 801f890:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f894:	7048      	strb	r0, [r1, #1]
 801f896:	9800      	ldr	r0, [sp, #0]
 801f898:	4350      	muls	r0, r2
 801f89a:	4602      	mov	r2, r0
 801f89c:	3001      	adds	r0, #1
 801f89e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f8a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f8a6:	708b      	strb	r3, [r1, #2]
 801f8a8:	b005      	add	sp, #20
 801f8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8ae:	bf00      	nop
 801f8b0:	08028fc7 	.word	0x08028fc7
 801f8b4:	080294be 	.word	0x080294be
 801f8b8:	08029090 	.word	0x08029090

0801f8bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8c0:	ed2d 8b08 	vpush	{d8-d11}
 801f8c4:	b097      	sub	sp, #92	; 0x5c
 801f8c6:	eeb0 aa40 	vmov.f32	s20, s0
 801f8ca:	eef0 9a60 	vmov.f32	s19, s1
 801f8ce:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801f8d0:	eeb0 9a41 	vmov.f32	s18, s2
 801f8d4:	9308      	str	r3, [sp, #32]
 801f8d6:	eeb0 8a62 	vmov.f32	s16, s5
 801f8da:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f8de:	eef0 8a43 	vmov.f32	s17, s6
 801f8e2:	9015      	str	r0, [sp, #84]	; 0x54
 801f8e4:	eef0 ba44 	vmov.f32	s23, s8
 801f8e8:	6868      	ldr	r0, [r5, #4]
 801f8ea:	eeb0 ba64 	vmov.f32	s22, s9
 801f8ee:	9112      	str	r1, [sp, #72]	; 0x48
 801f8f0:	eef0 aa45 	vmov.f32	s21, s10
 801f8f4:	9310      	str	r3, [sp, #64]	; 0x40
 801f8f6:	9214      	str	r2, [sp, #80]	; 0x50
 801f8f8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f8fa:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801f8fe:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f902:	fb00 1303 	mla	r3, r0, r3, r1
 801f906:	6829      	ldr	r1, [r5, #0]
 801f908:	6855      	ldr	r5, [r2, #4]
 801f90a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f90e:	3504      	adds	r5, #4
 801f910:	18cb      	adds	r3, r1, r3
 801f912:	930b      	str	r3, [sp, #44]	; 0x2c
 801f914:	6813      	ldr	r3, [r2, #0]
 801f916:	9311      	str	r3, [sp, #68]	; 0x44
 801f918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	dc03      	bgt.n	801f926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f91e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f920:	2b00      	cmp	r3, #0
 801f922:	f340 8333 	ble.w	801ff8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f926:	9b08      	ldr	r3, [sp, #32]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	f340 8190 	ble.w	801fc4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f92e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f930:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f932:	1412      	asrs	r2, r2, #16
 801f934:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f938:	d42f      	bmi.n	801f99a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f93a:	1c51      	adds	r1, r2, #1
 801f93c:	428c      	cmp	r4, r1
 801f93e:	dd2f      	ble.n	801f9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f940:	2b00      	cmp	r3, #0
 801f942:	db2d      	blt.n	801f9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f944:	1c59      	adds	r1, r3, #1
 801f946:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f948:	4288      	cmp	r0, r1
 801f94a:	dd29      	ble.n	801f9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f94c:	9b08      	ldr	r3, [sp, #32]
 801f94e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f950:	3b01      	subs	r3, #1
 801f952:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f954:	fb02 1203 	mla	r2, r2, r3, r1
 801f958:	1412      	asrs	r2, r2, #16
 801f95a:	d42b      	bmi.n	801f9b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f95c:	3201      	adds	r2, #1
 801f95e:	4294      	cmp	r4, r2
 801f960:	dd28      	ble.n	801f9b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f962:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f964:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f966:	fb02 1303 	mla	r3, r2, r3, r1
 801f96a:	141b      	asrs	r3, r3, #16
 801f96c:	d422      	bmi.n	801f9b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f96e:	3301      	adds	r3, #1
 801f970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f972:	429a      	cmp	r2, r3
 801f974:	dd1e      	ble.n	801f9b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f978:	f103 0803 	add.w	r8, r3, #3
 801f97c:	9b08      	ldr	r3, [sp, #32]
 801f97e:	9307      	str	r3, [sp, #28]
 801f980:	9b07      	ldr	r3, [sp, #28]
 801f982:	2b00      	cmp	r3, #0
 801f984:	f300 81ca 	bgt.w	801fd1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801f988:	9b08      	ldr	r3, [sp, #32]
 801f98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f98c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f994:	441a      	add	r2, r3
 801f996:	920b      	str	r2, [sp, #44]	; 0x2c
 801f998:	e15b      	b.n	801fc52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f99a:	1c51      	adds	r1, r2, #1
 801f99c:	f040 8148 	bne.w	801fc30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f9a0:	42a2      	cmp	r2, r4
 801f9a2:	f280 8145 	bge.w	801fc30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f9a6:	1c5a      	adds	r2, r3, #1
 801f9a8:	f2c0 8142 	blt.w	801fc30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f9ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f9ae:	4293      	cmp	r3, r2
 801f9b0:	f280 813e 	bge.w	801fc30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f9b4:	9b08      	ldr	r3, [sp, #32]
 801f9b6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9ba:	9307      	str	r3, [sp, #28]
 801f9bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	dde2      	ble.n	801f988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f9c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f9c6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f9ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f9cc:	141b      	asrs	r3, r3, #16
 801f9ce:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f9d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9d4:	1412      	asrs	r2, r2, #16
 801f9d6:	f100 818b 	bmi.w	801fcf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801f9da:	1c56      	adds	r6, r2, #1
 801f9dc:	42b4      	cmp	r4, r6
 801f9de:	f340 8189 	ble.w	801fcf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	f2c0 8186 	blt.w	801fcf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9e8:	1c5e      	adds	r6, r3, #1
 801f9ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f9ec:	42b7      	cmp	r7, r6
 801f9ee:	f340 8181 	ble.w	801fcf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f9f2:	fb03 2304 	mla	r3, r3, r4, r2
 801f9f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f9f8:	18d6      	adds	r6, r2, r3
 801f9fa:	5cd3      	ldrb	r3, [r2, r3]
 801f9fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fa00:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fa04:	2900      	cmp	r1, #0
 801fa06:	f000 8163 	beq.w	801fcd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801fa0a:	7872      	ldrb	r2, [r6, #1]
 801fa0c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fa10:	920c      	str	r2, [sp, #48]	; 0x30
 801fa12:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fa16:	2800      	cmp	r0, #0
 801fa18:	f000 8164 	beq.w	801fce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801fa1c:	1932      	adds	r2, r6, r4
 801fa1e:	5d36      	ldrb	r6, [r6, r4]
 801fa20:	7852      	ldrb	r2, [r2, #1]
 801fa22:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801fa26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fa2a:	9609      	str	r6, [sp, #36]	; 0x24
 801fa2c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fa30:	0e16      	lsrs	r6, r2, #24
 801fa32:	920d      	str	r2, [sp, #52]	; 0x34
 801fa34:	b289      	uxth	r1, r1
 801fa36:	b280      	uxth	r0, r0
 801fa38:	fb01 fb00 	mul.w	fp, r1, r0
 801fa3c:	0109      	lsls	r1, r1, #4
 801fa3e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801fa42:	eba1 090b 	sub.w	r9, r1, fp
 801fa46:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fa4a:	b280      	uxth	r0, r0
 801fa4c:	fa1f f989 	uxth.w	r9, r9
 801fa50:	1a12      	subs	r2, r2, r0
 801fa52:	fb09 f108 	mul.w	r1, r9, r8
 801fa56:	b292      	uxth	r2, r2
 801fa58:	fb02 110c 	mla	r1, r2, ip, r1
 801fa5c:	fb00 110a 	mla	r1, r0, sl, r1
 801fa60:	fb0b 1106 	mla	r1, fp, r6, r1
 801fa64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa68:	2900      	cmp	r1, #0
 801fa6a:	f000 80d2 	beq.w	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fa6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa72:	d01b      	beq.n	801faac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801fa74:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fa78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa7c:	fb0c fe0e 	mul.w	lr, ip, lr
 801fa80:	fb0c fc03 	mul.w	ip, ip, r3
 801fa84:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fa88:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa90:	4473      	add	r3, lr
 801fa92:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801fa96:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fa9a:	0a1b      	lsrs	r3, r3, #8
 801fa9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801faa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faa4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801faa8:	ea43 030e 	orr.w	r3, r3, lr
 801faac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fab0:	d01e      	beq.n	801faf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801fab2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fab4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fab8:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801fabc:	fb08 fc0c 	mul.w	ip, r8, ip
 801fac0:	fb08 f80e 	mul.w	r8, r8, lr
 801fac4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fac8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801facc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fad0:	44e6      	add	lr, ip
 801fad2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801fad6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801fada:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fade:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fae6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801faea:	ea4e 0708 	orr.w	r7, lr, r8
 801faee:	970c      	str	r7, [sp, #48]	; 0x30
 801faf0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801faf4:	d01e      	beq.n	801fb34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801faf6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801faf8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fafc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb00:	fb0a f808 	mul.w	r8, sl, r8
 801fb04:	fb0a fa0c 	mul.w	sl, sl, ip
 801fb08:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fb0c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fb10:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb1c:	44c6      	add	lr, r8
 801fb1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb2e:	ea4e 070a 	orr.w	r7, lr, sl
 801fb32:	9709      	str	r7, [sp, #36]	; 0x24
 801fb34:	2eff      	cmp	r6, #255	; 0xff
 801fb36:	d01d      	beq.n	801fb74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801fb38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb3a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fb3e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb42:	fb06 f808 	mul.w	r8, r6, r8
 801fb46:	fb06 f60c 	mul.w	r6, r6, ip
 801fb4a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fb4e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fb52:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fb56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb5a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fb5e:	44c6      	add	lr, r8
 801fb60:	0a36      	lsrs	r6, r6, #8
 801fb62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb6e:	ea4e 0606 	orr.w	r6, lr, r6
 801fb72:	960d      	str	r6, [sp, #52]	; 0x34
 801fb74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb76:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb84:	43c9      	mvns	r1, r1
 801fb86:	fb09 f606 	mul.w	r6, r9, r6
 801fb8a:	b2c9      	uxtb	r1, r1
 801fb8c:	fb02 660c 	mla	r6, r2, ip, r6
 801fb90:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb96:	fb00 660c 	mla	r6, r0, ip, r6
 801fb9a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fba0:	fb0b 660c 	mla	r6, fp, ip, r6
 801fba4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fba8:	fb09 f90c 	mul.w	r9, r9, ip
 801fbac:	0a36      	lsrs	r6, r6, #8
 801fbae:	fb02 9303 	mla	r3, r2, r3, r9
 801fbb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbb4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fbb8:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801fbbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fbbe:	fb00 330e 	mla	r3, r0, lr, r3
 801fbc2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801fbc6:	fb0b 3b00 	mla	fp, fp, r0, r3
 801fbca:	9b07      	ldr	r3, [sp, #28]
 801fbcc:	781b      	ldrb	r3, [r3, #0]
 801fbce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fbd2:	fb03 f201 	mul.w	r2, r3, r1
 801fbd6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fbda:	1c53      	adds	r3, r2, #1
 801fbdc:	ea46 060b 	orr.w	r6, r6, fp
 801fbe0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbe4:	9a07      	ldr	r2, [sp, #28]
 801fbe6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fbea:	7013      	strb	r3, [r2, #0]
 801fbec:	7853      	ldrb	r3, [r2, #1]
 801fbee:	434b      	muls	r3, r1
 801fbf0:	1c5a      	adds	r2, r3, #1
 801fbf2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fbf6:	0a33      	lsrs	r3, r6, #8
 801fbf8:	0c36      	lsrs	r6, r6, #16
 801fbfa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbfe:	9a07      	ldr	r2, [sp, #28]
 801fc00:	7053      	strb	r3, [r2, #1]
 801fc02:	7893      	ldrb	r3, [r2, #2]
 801fc04:	4359      	muls	r1, r3
 801fc06:	1c4b      	adds	r3, r1, #1
 801fc08:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fc0c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801fc10:	7096      	strb	r6, [r2, #2]
 801fc12:	9b07      	ldr	r3, [sp, #28]
 801fc14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fc16:	3303      	adds	r3, #3
 801fc18:	9307      	str	r3, [sp, #28]
 801fc1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc1c:	4413      	add	r3, r2
 801fc1e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc20:	9329      	str	r3, [sp, #164]	; 0xa4
 801fc22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc24:	4413      	add	r3, r2
 801fc26:	932a      	str	r3, [sp, #168]	; 0xa8
 801fc28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fc2a:	3b01      	subs	r3, #1
 801fc2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc2e:	e6c5      	b.n	801f9bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fc30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc32:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fc34:	4413      	add	r3, r2
 801fc36:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc38:	9329      	str	r3, [sp, #164]	; 0xa4
 801fc3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc3c:	4413      	add	r3, r2
 801fc3e:	932a      	str	r3, [sp, #168]	; 0xa8
 801fc40:	9b08      	ldr	r3, [sp, #32]
 801fc42:	3b01      	subs	r3, #1
 801fc44:	9308      	str	r3, [sp, #32]
 801fc46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc48:	3303      	adds	r3, #3
 801fc4a:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc4c:	e66b      	b.n	801f926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801fc4e:	f47f ae7d 	bne.w	801f94c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801fc52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	f340 8199 	ble.w	801ff8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801fc5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc60:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fc64:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fc68:	eef0 6a48 	vmov.f32	s13, s16
 801fc6c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fc70:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fc74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc78:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801fc7c:	eef0 6a68 	vmov.f32	s13, s17
 801fc80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc84:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801fc88:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc90:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc94:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc98:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc9c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fca0:	ee18 2a10 	vmov	r2, s16
 801fca4:	eeb0 8a47 	vmov.f32	s16, s14
 801fca8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcac:	ee18 2a90 	vmov	r2, s17
 801fcb0:	932b      	str	r3, [sp, #172]	; 0xac
 801fcb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcb4:	eef0 8a67 	vmov.f32	s17, s15
 801fcb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcbc:	932c      	str	r3, [sp, #176]	; 0xb0
 801fcbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fcc2:	3b01      	subs	r3, #1
 801fcc4:	9312      	str	r3, [sp, #72]	; 0x48
 801fcc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcc8:	bf08      	it	eq
 801fcca:	4613      	moveq	r3, r2
 801fccc:	9308      	str	r3, [sp, #32]
 801fcce:	e623      	b.n	801f918 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fcd0:	b158      	cbz	r0, 801fcea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fcd2:	5d32      	ldrb	r2, [r6, r4]
 801fcd4:	26ff      	movs	r6, #255	; 0xff
 801fcd6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fcda:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801fcde:	9209      	str	r2, [sp, #36]	; 0x24
 801fce0:	46b0      	mov	r8, r6
 801fce2:	e6a7      	b.n	801fa34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801fce4:	26ff      	movs	r6, #255	; 0xff
 801fce6:	46b2      	mov	sl, r6
 801fce8:	e6a4      	b.n	801fa34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801fcea:	26ff      	movs	r6, #255	; 0xff
 801fcec:	46b2      	mov	sl, r6
 801fcee:	e7f7      	b.n	801fce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801fcf0:	1c57      	adds	r7, r2, #1
 801fcf2:	d18e      	bne.n	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fcf4:	4294      	cmp	r4, r2
 801fcf6:	dd8c      	ble.n	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fcf8:	1c5e      	adds	r6, r3, #1
 801fcfa:	db8a      	blt.n	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fcfc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fcfe:	429e      	cmp	r6, r3
 801fd00:	dd87      	ble.n	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd02:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801fd06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fd0a:	e9cd 4600 	strd	r4, r6, [sp]
 801fd0e:	462b      	mov	r3, r5
 801fd10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd12:	9907      	ldr	r1, [sp, #28]
 801fd14:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fd16:	f7ff fc85 	bl	801f624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801fd1a:	e77a      	b.n	801fc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fd20:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fd24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd26:	1409      	asrs	r1, r1, #16
 801fd28:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fd2c:	141b      	asrs	r3, r3, #16
 801fd2e:	fb04 1303 	mla	r3, r4, r3, r1
 801fd32:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fd34:	18ce      	adds	r6, r1, r3
 801fd36:	5ccb      	ldrb	r3, [r1, r3]
 801fd38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd3c:	0e1f      	lsrs	r7, r3, #24
 801fd3e:	2a00      	cmp	r2, #0
 801fd40:	f000 8114 	beq.w	801ff6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801fd44:	7871      	ldrb	r1, [r6, #1]
 801fd46:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801fd4a:	910e      	str	r1, [sp, #56]	; 0x38
 801fd4c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801fd50:	2800      	cmp	r0, #0
 801fd52:	f000 8115 	beq.w	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801fd56:	1931      	adds	r1, r6, r4
 801fd58:	5d36      	ldrb	r6, [r6, r4]
 801fd5a:	7849      	ldrb	r1, [r1, #1]
 801fd5c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801fd60:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801fd64:	960a      	str	r6, [sp, #40]	; 0x28
 801fd66:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fd6a:	0e0e      	lsrs	r6, r1, #24
 801fd6c:	910f      	str	r1, [sp, #60]	; 0x3c
 801fd6e:	b292      	uxth	r2, r2
 801fd70:	b280      	uxth	r0, r0
 801fd72:	fb02 fb00 	mul.w	fp, r2, r0
 801fd76:	0112      	lsls	r2, r2, #4
 801fd78:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801fd7c:	eba2 090b 	sub.w	r9, r2, fp
 801fd80:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fd84:	b280      	uxth	r0, r0
 801fd86:	fa1f f989 	uxth.w	r9, r9
 801fd8a:	1a09      	subs	r1, r1, r0
 801fd8c:	fb09 f20e 	mul.w	r2, r9, lr
 801fd90:	b289      	uxth	r1, r1
 801fd92:	fb01 2207 	mla	r2, r1, r7, r2
 801fd96:	fb00 220a 	mla	r2, r0, sl, r2
 801fd9a:	fb0b 2206 	mla	r2, fp, r6, r2
 801fd9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fda2:	9213      	str	r2, [sp, #76]	; 0x4c
 801fda4:	2a00      	cmp	r2, #0
 801fda6:	f000 80d4 	beq.w	801ff52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801fdaa:	2fff      	cmp	r7, #255	; 0xff
 801fdac:	d01a      	beq.n	801fde4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801fdae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fdb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdb6:	fb07 fc0c 	mul.w	ip, r7, ip
 801fdba:	435f      	muls	r7, r3
 801fdbc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fdc0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fdc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdc8:	4463      	add	r3, ip
 801fdca:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801fdce:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801fdd2:	0a1b      	lsrs	r3, r3, #8
 801fdd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fddc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fde0:	ea43 030c 	orr.w	r3, r3, ip
 801fde4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fde8:	d01f      	beq.n	801fe2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801fdea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fdec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdf2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fdf6:	fb0e f707 	mul.w	r7, lr, r7
 801fdfa:	fb0e fe0c 	mul.w	lr, lr, ip
 801fdfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fe06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe0a:	44bc      	add	ip, r7
 801fe0c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fe10:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fe14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe20:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fe24:	ea4c 020e 	orr.w	r2, ip, lr
 801fe28:	920e      	str	r2, [sp, #56]	; 0x38
 801fe2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fe2e:	d01e      	beq.n	801fe6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801fe30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fe32:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fe36:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe3a:	fb0a fe0e 	mul.w	lr, sl, lr
 801fe3e:	fb0a fa07 	mul.w	sl, sl, r7
 801fe42:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fe46:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fe4a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fe4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe56:	44f4      	add	ip, lr
 801fe58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe68:	ea4c 020a 	orr.w	r2, ip, sl
 801fe6c:	920a      	str	r2, [sp, #40]	; 0x28
 801fe6e:	2eff      	cmp	r6, #255	; 0xff
 801fe70:	d01c      	beq.n	801feac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801fe72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe74:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fe78:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe7c:	fb06 fe0e 	mul.w	lr, r6, lr
 801fe80:	437e      	muls	r6, r7
 801fe82:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fe86:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fe8a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fe8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe92:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fe96:	44f4      	add	ip, lr
 801fe98:	0a36      	lsrs	r6, r6, #8
 801fe9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe9e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fea2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fea6:	ea4c 0206 	orr.w	r2, ip, r6
 801feaa:	920f      	str	r2, [sp, #60]	; 0x3c
 801feac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801feae:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801feb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801feb6:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801feba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801febc:	fb09 f606 	mul.w	r6, r9, r6
 801fec0:	fb01 6607 	mla	r6, r1, r7, r6
 801fec4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801fec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801feca:	fb00 6607 	mla	r6, r0, r7, r6
 801fece:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801fed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fed4:	fb0b 6607 	mla	r6, fp, r7, r6
 801fed8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fede:	fb09 f907 	mul.w	r9, r9, r7
 801fee2:	0a36      	lsrs	r6, r6, #8
 801fee4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801feea:	fb01 9303 	mla	r3, r1, r3, r9
 801feee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fef2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801fef6:	fb00 330c 	mla	r3, r0, ip, r3
 801fefa:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801fefe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ff00:	43da      	mvns	r2, r3
 801ff02:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801ff06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff0a:	b2d2      	uxtb	r2, r2
 801ff0c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff10:	fb03 f102 	mul.w	r1, r3, r2
 801ff14:	ea46 060e 	orr.w	r6, r6, lr
 801ff18:	1c4b      	adds	r3, r1, #1
 801ff1a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff1e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ff22:	f808 3c03 	strb.w	r3, [r8, #-3]
 801ff26:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801ff2a:	4353      	muls	r3, r2
 801ff2c:	1c59      	adds	r1, r3, #1
 801ff2e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ff32:	0a33      	lsrs	r3, r6, #8
 801ff34:	0c36      	lsrs	r6, r6, #16
 801ff36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff3a:	f808 3c02 	strb.w	r3, [r8, #-2]
 801ff3e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ff42:	435a      	muls	r2, r3
 801ff44:	1c53      	adds	r3, r2, #1
 801ff46:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ff4a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ff4e:	f808 6c01 	strb.w	r6, [r8, #-1]
 801ff52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ff54:	f108 0803 	add.w	r8, r8, #3
 801ff58:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ff5a:	4413      	add	r3, r2
 801ff5c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ff5e:	9329      	str	r3, [sp, #164]	; 0xa4
 801ff60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff62:	4413      	add	r3, r2
 801ff64:	932a      	str	r3, [sp, #168]	; 0xa8
 801ff66:	9b07      	ldr	r3, [sp, #28]
 801ff68:	3b01      	subs	r3, #1
 801ff6a:	e508      	b.n	801f97e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801ff6c:	b158      	cbz	r0, 801ff86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801ff6e:	5d31      	ldrb	r1, [r6, r4]
 801ff70:	26ff      	movs	r6, #255	; 0xff
 801ff72:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801ff76:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ff7a:	910a      	str	r1, [sp, #40]	; 0x28
 801ff7c:	46b6      	mov	lr, r6
 801ff7e:	e6f6      	b.n	801fd6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ff80:	26ff      	movs	r6, #255	; 0xff
 801ff82:	46b2      	mov	sl, r6
 801ff84:	e6f3      	b.n	801fd6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ff86:	26ff      	movs	r6, #255	; 0xff
 801ff88:	46b2      	mov	sl, r6
 801ff8a:	e7f7      	b.n	801ff7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801ff8c:	b017      	add	sp, #92	; 0x5c
 801ff8e:	ecbd 8b08 	vpop	{d8-d11}
 801ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ff98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff9c:	b08d      	sub	sp, #52	; 0x34
 801ff9e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801ffa2:	9103      	str	r1, [sp, #12]
 801ffa4:	fb07 5803 	mla	r8, r7, r3, r5
 801ffa8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ffac:	9803      	ldr	r0, [sp, #12]
 801ffae:	2f00      	cmp	r7, #0
 801ffb0:	910b      	str	r1, [sp, #44]	; 0x2c
 801ffb2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ffb6:	9903      	ldr	r1, [sp, #12]
 801ffb8:	9c03      	ldr	r4, [sp, #12]
 801ffba:	eb02 0608 	add.w	r6, r2, r8
 801ffbe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ffc2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801ffc6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ffca:	7809      	ldrb	r1, [r1, #0]
 801ffcc:	7840      	ldrb	r0, [r0, #1]
 801ffce:	78a4      	ldrb	r4, [r4, #2]
 801ffd0:	db51      	blt.n	8020076 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ffd2:	45be      	cmp	lr, r7
 801ffd4:	dd4f      	ble.n	8020076 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ffd6:	2d00      	cmp	r5, #0
 801ffd8:	db49      	blt.n	802006e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ffda:	42ab      	cmp	r3, r5
 801ffdc:	dd47      	ble.n	802006e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ffde:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ffe2:	9204      	str	r2, [sp, #16]
 801ffe4:	7872      	ldrb	r2, [r6, #1]
 801ffe6:	9205      	str	r2, [sp, #20]
 801ffe8:	78b2      	ldrb	r2, [r6, #2]
 801ffea:	9206      	str	r2, [sp, #24]
 801ffec:	1c6a      	adds	r2, r5, #1
 801ffee:	d449      	bmi.n	8020084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fff0:	4293      	cmp	r3, r2
 801fff2:	dd47      	ble.n	8020084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fff4:	f1bc 0f00 	cmp.w	ip, #0
 801fff8:	d044      	beq.n	8020084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801fffa:	7972      	ldrb	r2, [r6, #5]
 801fffc:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020000:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020004:	9201      	str	r2, [sp, #4]
 8020006:	3701      	adds	r7, #1
 8020008:	d444      	bmi.n	8020094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802000a:	45be      	cmp	lr, r7
 802000c:	dd42      	ble.n	8020094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802000e:	f1b9 0f00 	cmp.w	r9, #0
 8020012:	f000 80c1 	beq.w	8020198 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020016:	2d00      	cmp	r5, #0
 8020018:	db38      	blt.n	802008c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802001a:	42ab      	cmp	r3, r5
 802001c:	dd36      	ble.n	802008c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802001e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020022:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020026:	2203      	movs	r2, #3
 8020028:	fb03 6702 	mla	r7, r3, r2, r6
 802002c:	fb03 6202 	mla	r2, r3, r2, r6
 8020030:	787f      	ldrb	r7, [r7, #1]
 8020032:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020036:	9702      	str	r7, [sp, #8]
 8020038:	3501      	adds	r5, #1
 802003a:	d432      	bmi.n	80200a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802003c:	42ab      	cmp	r3, r5
 802003e:	dd30      	ble.n	80200a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020040:	f1bc 0f00 	cmp.w	ip, #0
 8020044:	d031      	beq.n	80200aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020046:	2703      	movs	r7, #3
 8020048:	fb13 7207 	smlabb	r2, r3, r7, r7
 802004c:	5cb5      	ldrb	r5, [r6, r2]
 802004e:	fb03 6207 	mla	r2, r3, r7, r6
 8020052:	fb03 6307 	mla	r3, r3, r7, r6
 8020056:	7912      	ldrb	r2, [r2, #4]
 8020058:	795e      	ldrb	r6, [r3, #5]
 802005a:	f1bc 0f0f 	cmp.w	ip, #15
 802005e:	d927      	bls.n	80200b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020060:	4b53      	ldr	r3, [pc, #332]	; (80201b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020062:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020066:	4a53      	ldr	r2, [pc, #332]	; (80201b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020068:	4853      	ldr	r0, [pc, #332]	; (80201b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802006a:	f004 facf 	bl	802460c <__assert_func>
 802006e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020072:	9104      	str	r1, [sp, #16]
 8020074:	e7ba      	b.n	801ffec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020076:	9401      	str	r4, [sp, #4]
 8020078:	4682      	mov	sl, r0
 802007a:	468b      	mov	fp, r1
 802007c:	9104      	str	r1, [sp, #16]
 802007e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020082:	e7c0      	b.n	8020006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020084:	9401      	str	r4, [sp, #4]
 8020086:	4682      	mov	sl, r0
 8020088:	468b      	mov	fp, r1
 802008a:	e7bc      	b.n	8020006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802008c:	46a6      	mov	lr, r4
 802008e:	9002      	str	r0, [sp, #8]
 8020090:	4688      	mov	r8, r1
 8020092:	e7d1      	b.n	8020038 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020094:	4626      	mov	r6, r4
 8020096:	4602      	mov	r2, r0
 8020098:	460d      	mov	r5, r1
 802009a:	46a6      	mov	lr, r4
 802009c:	9002      	str	r0, [sp, #8]
 802009e:	4688      	mov	r8, r1
 80200a0:	e7db      	b.n	802005a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80200a2:	4626      	mov	r6, r4
 80200a4:	4602      	mov	r2, r0
 80200a6:	460d      	mov	r5, r1
 80200a8:	e7d7      	b.n	802005a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80200aa:	4626      	mov	r6, r4
 80200ac:	4602      	mov	r2, r0
 80200ae:	460d      	mov	r5, r1
 80200b0:	f1b9 0f0f 	cmp.w	r9, #15
 80200b4:	d8d4      	bhi.n	8020060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80200b6:	fa1f f38c 	uxth.w	r3, ip
 80200ba:	fa1f fc89 	uxth.w	ip, r9
 80200be:	fb03 f70c 	mul.w	r7, r3, ip
 80200c2:	011b      	lsls	r3, r3, #4
 80200c4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80200c8:	9707      	str	r7, [sp, #28]
 80200ca:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80200ce:	fa1f fc8c 	uxth.w	ip, ip
 80200d2:	eba7 070c 	sub.w	r7, r7, ip
 80200d6:	b2bf      	uxth	r7, r7
 80200d8:	9709      	str	r7, [sp, #36]	; 0x24
 80200da:	9f07      	ldr	r7, [sp, #28]
 80200dc:	1bdb      	subs	r3, r3, r7
 80200de:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	9708      	str	r7, [sp, #32]
 80200e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80200e8:	930a      	str	r3, [sp, #40]	; 0x28
 80200ea:	ea6f 0907 	mvn.w	r9, r7
 80200ee:	fb03 fb0b 	mul.w	fp, r3, fp
 80200f2:	9f04      	ldr	r7, [sp, #16]
 80200f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200f6:	fa5f f989 	uxtb.w	r9, r9
 80200fa:	fb03 bb07 	mla	fp, r3, r7, fp
 80200fe:	9f07      	ldr	r7, [sp, #28]
 8020100:	fb11 f109 	smulbb	r1, r1, r9
 8020104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020106:	fb0c b808 	mla	r8, ip, r8, fp
 802010a:	fb10 f009 	smulbb	r0, r0, r9
 802010e:	fb14 f409 	smulbb	r4, r4, r9
 8020112:	fb07 8805 	mla	r8, r7, r5, r8
 8020116:	9d08      	ldr	r5, [sp, #32]
 8020118:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802011a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802011e:	fb08 1805 	mla	r8, r8, r5, r1
 8020122:	9d05      	ldr	r5, [sp, #20]
 8020124:	fa1f f888 	uxth.w	r8, r8
 8020128:	f108 0101 	add.w	r1, r8, #1
 802012c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020130:	9903      	ldr	r1, [sp, #12]
 8020132:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020136:	f881 8000 	strb.w	r8, [r1]
 802013a:	fb03 f10a 	mul.w	r1, r3, sl
 802013e:	fb07 1105 	mla	r1, r7, r5, r1
 8020142:	9d02      	ldr	r5, [sp, #8]
 8020144:	fb0c 1105 	mla	r1, ip, r5, r1
 8020148:	9d07      	ldr	r5, [sp, #28]
 802014a:	fb05 1102 	mla	r1, r5, r2, r1
 802014e:	9a08      	ldr	r2, [sp, #32]
 8020150:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020154:	fb01 0102 	mla	r1, r1, r2, r0
 8020158:	9a03      	ldr	r2, [sp, #12]
 802015a:	b289      	uxth	r1, r1
 802015c:	1c48      	adds	r0, r1, #1
 802015e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020162:	1209      	asrs	r1, r1, #8
 8020164:	7051      	strb	r1, [r2, #1]
 8020166:	9a01      	ldr	r2, [sp, #4]
 8020168:	4353      	muls	r3, r2
 802016a:	9a06      	ldr	r2, [sp, #24]
 802016c:	fb07 3702 	mla	r7, r7, r2, r3
 8020170:	9b08      	ldr	r3, [sp, #32]
 8020172:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020176:	fb05 c606 	mla	r6, r5, r6, ip
 802017a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802017e:	fb06 4603 	mla	r6, r6, r3, r4
 8020182:	9b03      	ldr	r3, [sp, #12]
 8020184:	b2b6      	uxth	r6, r6
 8020186:	f106 0e01 	add.w	lr, r6, #1
 802018a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802018e:	1236      	asrs	r6, r6, #8
 8020190:	709e      	strb	r6, [r3, #2]
 8020192:	b00d      	add	sp, #52	; 0x34
 8020194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020198:	f1bc 0f0f 	cmp.w	ip, #15
 802019c:	f63f af60 	bhi.w	8020060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80201a0:	4626      	mov	r6, r4
 80201a2:	4602      	mov	r2, r0
 80201a4:	460d      	mov	r5, r1
 80201a6:	46a6      	mov	lr, r4
 80201a8:	9002      	str	r0, [sp, #8]
 80201aa:	4688      	mov	r8, r1
 80201ac:	e783      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80201ae:	bf00      	nop
 80201b0:	08028fc7 	.word	0x08028fc7
 80201b4:	080294be 	.word	0x080294be
 80201b8:	08029090 	.word	0x08029090

080201bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c0:	ed2d 8b08 	vpush	{d8-d11}
 80201c4:	b0a1      	sub	sp, #132	; 0x84
 80201c6:	eeb0 aa40 	vmov.f32	s20, s0
 80201ca:	eef0 9a60 	vmov.f32	s19, s1
 80201ce:	9307      	str	r3, [sp, #28]
 80201d0:	eeb0 9a41 	vmov.f32	s18, s2
 80201d4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80201d8:	eeb0 8a62 	vmov.f32	s16, s5
 80201dc:	9210      	str	r2, [sp, #64]	; 0x40
 80201de:	eef0 8a43 	vmov.f32	s17, s6
 80201e2:	9308      	str	r3, [sp, #32]
 80201e4:	eef0 ba44 	vmov.f32	s23, s8
 80201e8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80201ec:	eeb0 ba64 	vmov.f32	s22, s9
 80201f0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80201f2:	eef0 aa45 	vmov.f32	s21, s10
 80201f6:	930a      	str	r3, [sp, #40]	; 0x28
 80201f8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80201fc:	901f      	str	r0, [sp, #124]	; 0x7c
 80201fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8020200:	6850      	ldr	r0, [r2, #4]
 8020202:	910e      	str	r1, [sp, #56]	; 0x38
 8020204:	6812      	ldr	r2, [r2, #0]
 8020206:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802020a:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802020e:	fb00 1303 	mla	r3, r0, r3, r1
 8020212:	9908      	ldr	r1, [sp, #32]
 8020214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020218:	18d3      	adds	r3, r2, r3
 802021a:	2203      	movs	r2, #3
 802021c:	9309      	str	r3, [sp, #36]	; 0x24
 802021e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	930c      	str	r3, [sp, #48]	; 0x30
 8020224:	f06f 0304 	mvn.w	r3, #4
 8020228:	fb11 3302 	smlabb	r3, r1, r2, r3
 802022c:	930d      	str	r3, [sp, #52]	; 0x34
 802022e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020230:	43db      	mvns	r3, r3
 8020232:	b2db      	uxtb	r3, r3
 8020234:	930b      	str	r3, [sp, #44]	; 0x2c
 8020236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020238:	2b00      	cmp	r3, #0
 802023a:	dc03      	bgt.n	8020244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802023c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802023e:	2b00      	cmp	r3, #0
 8020240:	f340 81df 	ble.w	8020602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020244:	9b07      	ldr	r3, [sp, #28]
 8020246:	2b00      	cmp	r3, #0
 8020248:	f340 80f2 	ble.w	8020430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802024c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8020250:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020254:	d430      	bmi.n	80202b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020256:	1c51      	adds	r1, r2, #1
 8020258:	9808      	ldr	r0, [sp, #32]
 802025a:	4281      	cmp	r1, r0
 802025c:	da2f      	bge.n	80202be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802025e:	2b00      	cmp	r3, #0
 8020260:	db2d      	blt.n	80202be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020262:	1c59      	adds	r1, r3, #1
 8020264:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020266:	4288      	cmp	r0, r1
 8020268:	dd29      	ble.n	80202be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802026a:	9b07      	ldr	r3, [sp, #28]
 802026c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802026e:	3b01      	subs	r3, #1
 8020270:	fb02 8203 	mla	r2, r2, r3, r8
 8020274:	1412      	asrs	r2, r2, #16
 8020276:	d42d      	bmi.n	80202d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020278:	3201      	adds	r2, #1
 802027a:	9908      	ldr	r1, [sp, #32]
 802027c:	4291      	cmp	r1, r2
 802027e:	dd29      	ble.n	80202d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020280:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020282:	fb02 b303 	mla	r3, r2, r3, fp
 8020286:	141b      	asrs	r3, r3, #16
 8020288:	d424      	bmi.n	80202d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802028a:	3301      	adds	r3, #1
 802028c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802028e:	429a      	cmp	r2, r3
 8020290:	dd20      	ble.n	80202d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020294:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020298:	1cde      	adds	r6, r3, #3
 802029a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802029e:	f1bc 0f00 	cmp.w	ip, #0
 80202a2:	f300 811f 	bgt.w	80204e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80202a6:	9b07      	ldr	r3, [sp, #28]
 80202a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202b2:	4423      	add	r3, r4
 80202b4:	9309      	str	r3, [sp, #36]	; 0x24
 80202b6:	e0bd      	b.n	8020434 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80202b8:	1c57      	adds	r7, r2, #1
 80202ba:	f040 80ae 	bne.w	802041a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202be:	9908      	ldr	r1, [sp, #32]
 80202c0:	428a      	cmp	r2, r1
 80202c2:	f280 80aa 	bge.w	802041a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202c6:	1c5e      	adds	r6, r3, #1
 80202c8:	f2c0 80a7 	blt.w	802041a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202ce:	4293      	cmp	r3, r2
 80202d0:	f280 80a3 	bge.w	802041a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80202d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80202d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80202da:	f1ba 0f00 	cmp.w	sl, #0
 80202de:	dde2      	ble.n	80202a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80202e0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80202e4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80202e8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80202ec:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80202f0:	f100 80df 	bmi.w	80204b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80202f4:	1c45      	adds	r5, r0, #1
 80202f6:	9f08      	ldr	r7, [sp, #32]
 80202f8:	42af      	cmp	r7, r5
 80202fa:	f340 80dc 	ble.w	80204b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80202fe:	2900      	cmp	r1, #0
 8020300:	f2c0 80d9 	blt.w	80204b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020304:	1c4d      	adds	r5, r1, #1
 8020306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020308:	42af      	cmp	r7, r5
 802030a:	f340 80d4 	ble.w	80204b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802030e:	9d08      	ldr	r5, [sp, #32]
 8020310:	fb05 0101 	mla	r1, r5, r1, r0
 8020314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020316:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802031a:	1845      	adds	r5, r0, r1
 802031c:	5c40      	ldrb	r0, [r0, r1]
 802031e:	792f      	ldrb	r7, [r5, #4]
 8020320:	7869      	ldrb	r1, [r5, #1]
 8020322:	9711      	str	r7, [sp, #68]	; 0x44
 8020324:	796f      	ldrb	r7, [r5, #5]
 8020326:	f895 e002 	ldrb.w	lr, [r5, #2]
 802032a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802032e:	9712      	str	r7, [sp, #72]	; 0x48
 8020330:	b17a      	cbz	r2, 8020352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8020332:	3505      	adds	r5, #5
 8020334:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020336:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020338:	19ef      	adds	r7, r5, r7
 802033a:	5d2d      	ldrb	r5, [r5, r4]
 802033c:	787c      	ldrb	r4, [r7, #1]
 802033e:	9513      	str	r5, [sp, #76]	; 0x4c
 8020340:	9415      	str	r4, [sp, #84]	; 0x54
 8020342:	78bc      	ldrb	r4, [r7, #2]
 8020344:	9417      	str	r4, [sp, #92]	; 0x5c
 8020346:	78fc      	ldrb	r4, [r7, #3]
 8020348:	9414      	str	r4, [sp, #80]	; 0x50
 802034a:	793c      	ldrb	r4, [r7, #4]
 802034c:	9416      	str	r4, [sp, #88]	; 0x58
 802034e:	797c      	ldrb	r4, [r7, #5]
 8020350:	9418      	str	r4, [sp, #96]	; 0x60
 8020352:	b29b      	uxth	r3, r3
 8020354:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020356:	b292      	uxth	r2, r2
 8020358:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802035c:	fb03 f702 	mul.w	r7, r3, r2
 8020360:	011b      	lsls	r3, r3, #4
 8020362:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8020366:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802036a:	1bdb      	subs	r3, r3, r7
 802036c:	b292      	uxth	r2, r2
 802036e:	b29b      	uxth	r3, r3
 8020370:	ebac 0c02 	sub.w	ip, ip, r2
 8020374:	fb03 f909 	mul.w	r9, r3, r9
 8020378:	fa1f fc8c 	uxth.w	ip, ip
 802037c:	fb0c 9000 	mla	r0, ip, r0, r9
 8020380:	f896 9000 	ldrb.w	r9, [r6]
 8020384:	fb02 0004 	mla	r0, r2, r4, r0
 8020388:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802038a:	fb07 0004 	mla	r0, r7, r4, r0
 802038e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020390:	fb19 f904 	smulbb	r9, r9, r4
 8020394:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020398:	fb00 9005 	mla	r0, r0, r5, r9
 802039c:	b280      	uxth	r0, r0
 802039e:	f100 0901 	add.w	r9, r0, #1
 80203a2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80203a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80203a8:	4358      	muls	r0, r3
 80203aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80203ae:	fb0c 0101 	mla	r1, ip, r1, r0
 80203b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80203b4:	f886 9000 	strb.w	r9, [r6]
 80203b8:	fb02 1100 	mla	r1, r2, r0, r1
 80203bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80203be:	fb07 1100 	mla	r1, r7, r0, r1
 80203c2:	7870      	ldrb	r0, [r6, #1]
 80203c4:	fb10 f004 	smulbb	r0, r0, r4
 80203c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80203cc:	fb01 0105 	mla	r1, r1, r5, r0
 80203d0:	b289      	uxth	r1, r1
 80203d2:	1c48      	adds	r0, r1, #1
 80203d4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80203d8:	1209      	asrs	r1, r1, #8
 80203da:	7071      	strb	r1, [r6, #1]
 80203dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80203de:	434b      	muls	r3, r1
 80203e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80203e2:	fb0c 330e 	mla	r3, ip, lr, r3
 80203e6:	fb02 3201 	mla	r2, r2, r1, r3
 80203ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203ec:	fb07 2703 	mla	r7, r7, r3, r2
 80203f0:	78b2      	ldrb	r2, [r6, #2]
 80203f2:	fb12 f204 	smulbb	r2, r2, r4
 80203f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80203fa:	fb07 2505 	mla	r5, r7, r5, r2
 80203fe:	b2ad      	uxth	r5, r5
 8020400:	1c6f      	adds	r7, r5, #1
 8020402:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020406:	122d      	asrs	r5, r5, #8
 8020408:	70b5      	strb	r5, [r6, #2]
 802040a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802040c:	3603      	adds	r6, #3
 802040e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020412:	4498      	add	r8, r3
 8020414:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020416:	449b      	add	fp, r3
 8020418:	e75f      	b.n	80202da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802041a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802041c:	4498      	add	r8, r3
 802041e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020420:	449b      	add	fp, r3
 8020422:	9b07      	ldr	r3, [sp, #28]
 8020424:	3b01      	subs	r3, #1
 8020426:	9307      	str	r3, [sp, #28]
 8020428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802042a:	3303      	adds	r3, #3
 802042c:	9309      	str	r3, [sp, #36]	; 0x24
 802042e:	e709      	b.n	8020244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020430:	f47f af1b 	bne.w	802026a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020436:	2b00      	cmp	r3, #0
 8020438:	f340 80e3 	ble.w	8020602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802043c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020440:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020442:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020446:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802044a:	eef0 6a48 	vmov.f32	s13, s16
 802044e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020452:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020456:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802045a:	ee16 8a90 	vmov	r8, s13
 802045e:	eef0 6a68 	vmov.f32	s13, s17
 8020462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020466:	ee16 ba90 	vmov	fp, s13
 802046a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802046e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020472:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020476:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802047a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802047e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020482:	ee18 2a10 	vmov	r2, s16
 8020486:	eeb0 8a47 	vmov.f32	s16, s14
 802048a:	fb92 f3f3 	sdiv	r3, r2, r3
 802048e:	ee18 2a90 	vmov	r2, s17
 8020492:	9335      	str	r3, [sp, #212]	; 0xd4
 8020494:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020496:	eef0 8a67 	vmov.f32	s17, s15
 802049a:	fb92 f3f3 	sdiv	r3, r2, r3
 802049e:	9336      	str	r3, [sp, #216]	; 0xd8
 80204a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80204a4:	3b01      	subs	r3, #1
 80204a6:	930e      	str	r3, [sp, #56]	; 0x38
 80204a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80204aa:	bf08      	it	eq
 80204ac:	4613      	moveq	r3, r2
 80204ae:	9307      	str	r3, [sp, #28]
 80204b0:	e6c1      	b.n	8020236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80204b2:	1c45      	adds	r5, r0, #1
 80204b4:	d1a9      	bne.n	802040a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204b6:	9c08      	ldr	r4, [sp, #32]
 80204b8:	42a0      	cmp	r0, r4
 80204ba:	daa6      	bge.n	802040a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204bc:	1c4c      	adds	r4, r1, #1
 80204be:	dba4      	blt.n	802040a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80204c2:	428c      	cmp	r4, r1
 80204c4:	dda1      	ble.n	802040a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80204c8:	9001      	str	r0, [sp, #4]
 80204ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80204cc:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80204d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204d2:	4631      	mov	r1, r6
 80204d4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80204d8:	9300      	str	r3, [sp, #0]
 80204da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204dc:	9b08      	ldr	r3, [sp, #32]
 80204de:	f7ff fd5b 	bl	801ff98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80204e2:	e792      	b.n	802040a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80204e4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80204e8:	9c08      	ldr	r4, [sp, #32]
 80204ea:	ea4f 402b 	mov.w	r0, fp, asr #16
 80204ee:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80204f2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80204f6:	fb04 2000 	mla	r0, r4, r0, r2
 80204fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80204fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020502:	4402      	add	r2, r0
 8020504:	5c25      	ldrb	r5, [r4, r0]
 8020506:	7894      	ldrb	r4, [r2, #2]
 8020508:	7850      	ldrb	r0, [r2, #1]
 802050a:	9411      	str	r4, [sp, #68]	; 0x44
 802050c:	7954      	ldrb	r4, [r2, #5]
 802050e:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020512:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020516:	9412      	str	r4, [sp, #72]	; 0x48
 8020518:	b171      	cbz	r1, 8020538 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802051a:	3205      	adds	r2, #5
 802051c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802051e:	1917      	adds	r7, r2, r4
 8020520:	5d12      	ldrb	r2, [r2, r4]
 8020522:	9219      	str	r2, [sp, #100]	; 0x64
 8020524:	787a      	ldrb	r2, [r7, #1]
 8020526:	921b      	str	r2, [sp, #108]	; 0x6c
 8020528:	78ba      	ldrb	r2, [r7, #2]
 802052a:	921d      	str	r2, [sp, #116]	; 0x74
 802052c:	78fa      	ldrb	r2, [r7, #3]
 802052e:	921a      	str	r2, [sp, #104]	; 0x68
 8020530:	793a      	ldrb	r2, [r7, #4]
 8020532:	921c      	str	r2, [sp, #112]	; 0x70
 8020534:	797a      	ldrb	r2, [r7, #5]
 8020536:	921e      	str	r2, [sp, #120]	; 0x78
 8020538:	b29b      	uxth	r3, r3
 802053a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802053c:	b289      	uxth	r1, r1
 802053e:	3603      	adds	r6, #3
 8020540:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020544:	fb03 f201 	mul.w	r2, r3, r1
 8020548:	011b      	lsls	r3, r3, #4
 802054a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802054e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020552:	1a9b      	subs	r3, r3, r2
 8020554:	b289      	uxth	r1, r1
 8020556:	b29b      	uxth	r3, r3
 8020558:	1a7f      	subs	r7, r7, r1
 802055a:	fb03 fa0a 	mul.w	sl, r3, sl
 802055e:	b2bf      	uxth	r7, r7
 8020560:	fb03 f909 	mul.w	r9, r3, r9
 8020564:	fb07 a505 	mla	r5, r7, r5, sl
 8020568:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802056c:	fb07 9000 	mla	r0, r7, r0, r9
 8020570:	fb01 5504 	mla	r5, r1, r4, r5
 8020574:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020576:	fb02 5504 	mla	r5, r2, r4, r5
 802057a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802057c:	fb1a fa04 	smulbb	sl, sl, r4
 8020580:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020584:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020586:	fb05 a50e 	mla	r5, r5, lr, sl
 802058a:	fb01 0004 	mla	r0, r1, r4, r0
 802058e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020590:	b2ad      	uxth	r5, r5
 8020592:	fb02 0004 	mla	r0, r2, r4, r0
 8020596:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020598:	f105 0a01 	add.w	sl, r5, #1
 802059c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80205a0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80205a4:	122d      	asrs	r5, r5, #8
 80205a6:	f806 5c06 	strb.w	r5, [r6, #-6]
 80205aa:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80205ae:	fb15 f504 	smulbb	r5, r5, r4
 80205b2:	fb00 500e 	mla	r0, r0, lr, r5
 80205b6:	b280      	uxth	r0, r0
 80205b8:	1c45      	adds	r5, r0, #1
 80205ba:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80205be:	1200      	asrs	r0, r0, #8
 80205c0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80205c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80205c6:	4343      	muls	r3, r0
 80205c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80205ca:	fb07 3300 	mla	r3, r7, r0, r3
 80205ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 80205d0:	fb01 3100 	mla	r1, r1, r0, r3
 80205d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80205d6:	fb02 1203 	mla	r2, r2, r3, r1
 80205da:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80205de:	fb11 f104 	smulbb	r1, r1, r4
 80205e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80205e6:	fb02 120e 	mla	r2, r2, lr, r1
 80205ea:	b292      	uxth	r2, r2
 80205ec:	1c53      	adds	r3, r2, #1
 80205ee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80205f2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80205f4:	1212      	asrs	r2, r2, #8
 80205f6:	4498      	add	r8, r3
 80205f8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80205fa:	f806 2c04 	strb.w	r2, [r6, #-4]
 80205fe:	449b      	add	fp, r3
 8020600:	e64d      	b.n	802029e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020602:	b021      	add	sp, #132	; 0x84
 8020604:	ecbd 8b08 	vpop	{d8-d11}
 8020608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802060c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020610:	b085      	sub	sp, #20
 8020612:	784d      	ldrb	r5, [r1, #1]
 8020614:	788e      	ldrb	r6, [r1, #2]
 8020616:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802061a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802061e:	9403      	str	r4, [sp, #12]
 8020620:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020624:	780c      	ldrb	r4, [r1, #0]
 8020626:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802062a:	fb07 ce03 	mla	lr, r7, r3, ip
 802062e:	2f00      	cmp	r7, #0
 8020630:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020634:	eb02 0b0e 	add.w	fp, r2, lr
 8020638:	db56      	blt.n	80206e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802063a:	45b9      	cmp	r9, r7
 802063c:	dd54      	ble.n	80206e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802063e:	f1bc 0f00 	cmp.w	ip, #0
 8020642:	db4d      	blt.n	80206e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020644:	4563      	cmp	r3, ip
 8020646:	dd4b      	ble.n	80206e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020648:	f812 200e 	ldrb.w	r2, [r2, lr]
 802064c:	9200      	str	r2, [sp, #0]
 802064e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020652:	9201      	str	r2, [sp, #4]
 8020654:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020658:	9202      	str	r2, [sp, #8]
 802065a:	f11c 0201 	adds.w	r2, ip, #1
 802065e:	d44a      	bmi.n	80206f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020660:	4293      	cmp	r3, r2
 8020662:	dd48      	ble.n	80206f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020664:	2800      	cmp	r0, #0
 8020666:	d046      	beq.n	80206f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020668:	f89b e003 	ldrb.w	lr, [fp, #3]
 802066c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020670:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020674:	3701      	adds	r7, #1
 8020676:	d446      	bmi.n	8020706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020678:	45b9      	cmp	r9, r7
 802067a:	dd44      	ble.n	8020706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802067c:	9a03      	ldr	r2, [sp, #12]
 802067e:	2a00      	cmp	r2, #0
 8020680:	d045      	beq.n	802070e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020682:	f1bc 0f00 	cmp.w	ip, #0
 8020686:	db3a      	blt.n	80206fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020688:	4563      	cmp	r3, ip
 802068a:	dd38      	ble.n	80206fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802068c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020690:	f04f 0903 	mov.w	r9, #3
 8020694:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020698:	fb03 b209 	mla	r2, r3, r9, fp
 802069c:	fb03 b909 	mla	r9, r3, r9, fp
 80206a0:	7852      	ldrb	r2, [r2, #1]
 80206a2:	f899 9002 	ldrb.w	r9, [r9, #2]
 80206a6:	f11c 0c01 	adds.w	ip, ip, #1
 80206aa:	d40d      	bmi.n	80206c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80206ac:	4563      	cmp	r3, ip
 80206ae:	dd0b      	ble.n	80206c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80206b0:	b160      	cbz	r0, 80206cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80206b2:	2603      	movs	r6, #3
 80206b4:	fb13 6406 	smlabb	r4, r3, r6, r6
 80206b8:	fb03 b506 	mla	r5, r3, r6, fp
 80206bc:	fb03 b306 	mla	r3, r3, r6, fp
 80206c0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80206c4:	792d      	ldrb	r5, [r5, #4]
 80206c6:	795e      	ldrb	r6, [r3, #5]
 80206c8:	280f      	cmp	r0, #15
 80206ca:	d802      	bhi.n	80206d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80206cc:	9b03      	ldr	r3, [sp, #12]
 80206ce:	2b0f      	cmp	r3, #15
 80206d0:	d922      	bls.n	8020718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80206d2:	4b2f      	ldr	r3, [pc, #188]	; (8020790 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80206d4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80206d8:	4a2e      	ldr	r2, [pc, #184]	; (8020794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80206da:	482f      	ldr	r0, [pc, #188]	; (8020798 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80206dc:	f003 ff96 	bl	802460c <__assert_func>
 80206e0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80206e4:	9400      	str	r4, [sp, #0]
 80206e6:	e7b8      	b.n	802065a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80206e8:	46b2      	mov	sl, r6
 80206ea:	46a8      	mov	r8, r5
 80206ec:	46a6      	mov	lr, r4
 80206ee:	9400      	str	r4, [sp, #0]
 80206f0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80206f4:	e7be      	b.n	8020674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80206f6:	46b2      	mov	sl, r6
 80206f8:	46a8      	mov	r8, r5
 80206fa:	46a6      	mov	lr, r4
 80206fc:	e7ba      	b.n	8020674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80206fe:	46b1      	mov	r9, r6
 8020700:	462a      	mov	r2, r5
 8020702:	4627      	mov	r7, r4
 8020704:	e7cf      	b.n	80206a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020706:	46b1      	mov	r9, r6
 8020708:	462a      	mov	r2, r5
 802070a:	4627      	mov	r7, r4
 802070c:	e7dc      	b.n	80206c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802070e:	280f      	cmp	r0, #15
 8020710:	d8df      	bhi.n	80206d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020712:	46b1      	mov	r9, r6
 8020714:	462a      	mov	r2, r5
 8020716:	4627      	mov	r7, r4
 8020718:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 802071c:	b280      	uxth	r0, r0
 802071e:	fb00 f30b 	mul.w	r3, r0, fp
 8020722:	0100      	lsls	r0, r0, #4
 8020724:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020728:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802072c:	1ac0      	subs	r0, r0, r3
 802072e:	fa1f fb8b 	uxth.w	fp, fp
 8020732:	b280      	uxth	r0, r0
 8020734:	ebac 0c0b 	sub.w	ip, ip, fp
 8020738:	9003      	str	r0, [sp, #12]
 802073a:	fa1f fc8c 	uxth.w	ip, ip
 802073e:	fb00 fe0e 	mul.w	lr, r0, lr
 8020742:	9800      	ldr	r0, [sp, #0]
 8020744:	fb0c ee00 	mla	lr, ip, r0, lr
 8020748:	9803      	ldr	r0, [sp, #12]
 802074a:	fb00 f808 	mul.w	r8, r0, r8
 802074e:	9801      	ldr	r0, [sp, #4]
 8020750:	fb0b ee07 	mla	lr, fp, r7, lr
 8020754:	fb0c 8800 	mla	r8, ip, r0, r8
 8020758:	fb03 ee04 	mla	lr, r3, r4, lr
 802075c:	fb0b 8202 	mla	r2, fp, r2, r8
 8020760:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020764:	fb03 2505 	mla	r5, r3, r5, r2
 8020768:	9a03      	ldr	r2, [sp, #12]
 802076a:	f881 e000 	strb.w	lr, [r1]
 802076e:	fb02 f00a 	mul.w	r0, r2, sl
 8020772:	9a02      	ldr	r2, [sp, #8]
 8020774:	122d      	asrs	r5, r5, #8
 8020776:	fb0c 0c02 	mla	ip, ip, r2, r0
 802077a:	704d      	strb	r5, [r1, #1]
 802077c:	fb0b c909 	mla	r9, fp, r9, ip
 8020780:	fb03 9606 	mla	r6, r3, r6, r9
 8020784:	1236      	asrs	r6, r6, #8
 8020786:	708e      	strb	r6, [r1, #2]
 8020788:	b005      	add	sp, #20
 802078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802078e:	bf00      	nop
 8020790:	08028fc7 	.word	0x08028fc7
 8020794:	080294be 	.word	0x080294be
 8020798:	08029090 	.word	0x08029090

0802079c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207a0:	ed2d 8b0a 	vpush	{d8-d12}
 80207a4:	b09d      	sub	sp, #116	; 0x74
 80207a6:	eeb0 aa40 	vmov.f32	s20, s0
 80207aa:	eef0 9a60 	vmov.f32	s19, s1
 80207ae:	9306      	str	r3, [sp, #24]
 80207b0:	eeb0 9a41 	vmov.f32	s18, s2
 80207b4:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80207b8:	eeb0 8a62 	vmov.f32	s16, s5
 80207bc:	901b      	str	r0, [sp, #108]	; 0x6c
 80207be:	eef0 8a43 	vmov.f32	s17, s6
 80207c2:	9307      	str	r3, [sp, #28]
 80207c4:	eeb0 ca44 	vmov.f32	s24, s8
 80207c8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80207cc:	eef0 ba64 	vmov.f32	s23, s9
 80207d0:	eeb0 ba45 	vmov.f32	s22, s10
 80207d4:	9309      	str	r3, [sp, #36]	; 0x24
 80207d6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80207da:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80207de:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80207e0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80207e4:	6850      	ldr	r0, [r2, #4]
 80207e6:	6812      	ldr	r2, [r2, #0]
 80207e8:	fb00 1303 	mla	r3, r0, r3, r1
 80207ec:	9907      	ldr	r1, [sp, #28]
 80207ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207f2:	18d3      	adds	r3, r2, r3
 80207f4:	2203      	movs	r2, #3
 80207f6:	9308      	str	r3, [sp, #32]
 80207f8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80207fa:	681b      	ldr	r3, [r3, #0]
 80207fc:	930a      	str	r3, [sp, #40]	; 0x28
 80207fe:	f06f 0304 	mvn.w	r3, #4
 8020802:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020806:	fb11 3302 	smlabb	r3, r1, r2, r3
 802080a:	930b      	str	r3, [sp, #44]	; 0x2c
 802080c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802080e:	2b00      	cmp	r3, #0
 8020810:	dc03      	bgt.n	802081a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020814:	2b00      	cmp	r3, #0
 8020816:	f340 8193 	ble.w	8020b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802081a:	9b06      	ldr	r3, [sp, #24]
 802081c:	2b00      	cmp	r3, #0
 802081e:	f340 80d0 	ble.w	80209c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020822:	1432      	asrs	r2, r6, #16
 8020824:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020828:	d42f      	bmi.n	802088a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802082a:	1c51      	adds	r1, r2, #1
 802082c:	9807      	ldr	r0, [sp, #28]
 802082e:	4281      	cmp	r1, r0
 8020830:	da2e      	bge.n	8020890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020832:	2b00      	cmp	r3, #0
 8020834:	db2c      	blt.n	8020890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020836:	1c59      	adds	r1, r3, #1
 8020838:	9809      	ldr	r0, [sp, #36]	; 0x24
 802083a:	4288      	cmp	r0, r1
 802083c:	dd28      	ble.n	8020890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802083e:	9b06      	ldr	r3, [sp, #24]
 8020840:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020842:	3b01      	subs	r3, #1
 8020844:	fb02 6203 	mla	r2, r2, r3, r6
 8020848:	1412      	asrs	r2, r2, #16
 802084a:	d42c      	bmi.n	80208a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802084c:	3201      	adds	r2, #1
 802084e:	9907      	ldr	r1, [sp, #28]
 8020850:	4291      	cmp	r1, r2
 8020852:	dd28      	ble.n	80208a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020854:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020856:	fb02 5303 	mla	r3, r2, r3, r5
 802085a:	141b      	asrs	r3, r3, #16
 802085c:	d423      	bmi.n	80208a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802085e:	3301      	adds	r3, #1
 8020860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020862:	429a      	cmp	r2, r3
 8020864:	dd1f      	ble.n	80208a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020866:	9b08      	ldr	r3, [sp, #32]
 8020868:	f8dd e018 	ldr.w	lr, [sp, #24]
 802086c:	f103 0c03 	add.w	ip, r3, #3
 8020870:	f1be 0f00 	cmp.w	lr, #0
 8020874:	f300 80fa 	bgt.w	8020a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020878:	9b06      	ldr	r3, [sp, #24]
 802087a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802087e:	9b08      	ldr	r3, [sp, #32]
 8020880:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020884:	4423      	add	r3, r4
 8020886:	9308      	str	r3, [sp, #32]
 8020888:	e09d      	b.n	80209c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802088a:	1c51      	adds	r1, r2, #1
 802088c:	f040 808e 	bne.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020890:	9907      	ldr	r1, [sp, #28]
 8020892:	428a      	cmp	r2, r1
 8020894:	f280 808a 	bge.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020898:	1c5f      	adds	r7, r3, #1
 802089a:	f2c0 8087 	blt.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802089e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208a0:	4293      	cmp	r3, r2
 80208a2:	f280 8083 	bge.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80208a6:	9f06      	ldr	r7, [sp, #24]
 80208a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80208ac:	2f00      	cmp	r7, #0
 80208ae:	dde3      	ble.n	8020878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80208b0:	1432      	asrs	r2, r6, #16
 80208b2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80208b6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80208ba:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80208be:	f100 80bf 	bmi.w	8020a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80208c2:	1c50      	adds	r0, r2, #1
 80208c4:	9c07      	ldr	r4, [sp, #28]
 80208c6:	4284      	cmp	r4, r0
 80208c8:	f340 80bc 	ble.w	8020a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	f2c0 80b9 	blt.w	8020a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208d2:	1c58      	adds	r0, r3, #1
 80208d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80208d6:	4284      	cmp	r4, r0
 80208d8:	f340 80b4 	ble.w	8020a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80208dc:	9807      	ldr	r0, [sp, #28]
 80208de:	fb00 2303 	mla	r3, r0, r3, r2
 80208e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208ea:	441a      	add	r2, r3
 80208ec:	f810 c003 	ldrb.w	ip, [r0, r3]
 80208f0:	7953      	ldrb	r3, [r2, #5]
 80208f2:	7850      	ldrb	r0, [r2, #1]
 80208f4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80208f8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80208fc:	f892 8004 	ldrb.w	r8, [r2, #4]
 8020900:	930e      	str	r3, [sp, #56]	; 0x38
 8020902:	f1bb 0f00 	cmp.w	fp, #0
 8020906:	d00f      	beq.n	8020928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020908:	3205      	adds	r2, #5
 802090a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802090c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802090e:	18d3      	adds	r3, r2, r3
 8020910:	5d12      	ldrb	r2, [r2, r4]
 8020912:	920f      	str	r2, [sp, #60]	; 0x3c
 8020914:	785a      	ldrb	r2, [r3, #1]
 8020916:	9211      	str	r2, [sp, #68]	; 0x44
 8020918:	789a      	ldrb	r2, [r3, #2]
 802091a:	9213      	str	r2, [sp, #76]	; 0x4c
 802091c:	78da      	ldrb	r2, [r3, #3]
 802091e:	9210      	str	r2, [sp, #64]	; 0x40
 8020920:	791a      	ldrb	r2, [r3, #4]
 8020922:	795b      	ldrb	r3, [r3, #5]
 8020924:	9212      	str	r2, [sp, #72]	; 0x48
 8020926:	9314      	str	r3, [sp, #80]	; 0x50
 8020928:	b28b      	uxth	r3, r1
 802092a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802092c:	fa1f f28b 	uxth.w	r2, fp
 8020930:	fb03 fb02 	mul.w	fp, r3, r2
 8020934:	011b      	lsls	r3, r3, #4
 8020936:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802093a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802093e:	eba3 030b 	sub.w	r3, r3, fp
 8020942:	b292      	uxth	r2, r2
 8020944:	b29b      	uxth	r3, r3
 8020946:	1a89      	subs	r1, r1, r2
 8020948:	fb03 f808 	mul.w	r8, r3, r8
 802094c:	b289      	uxth	r1, r1
 802094e:	fb03 f909 	mul.w	r9, r3, r9
 8020952:	fb01 8800 	mla	r8, r1, r0, r8
 8020956:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020958:	fb01 990c 	mla	r9, r1, ip, r9
 802095c:	fb02 8800 	mla	r8, r2, r0, r8
 8020960:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020962:	fb02 9904 	mla	r9, r2, r4, r9
 8020966:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020968:	fb0b 8800 	mla	r8, fp, r0, r8
 802096c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802096e:	fb0b 9904 	mla	r9, fp, r4, r9
 8020972:	4343      	muls	r3, r0
 8020974:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020978:	ea4f 2929 	mov.w	r9, r9, asr #8
 802097c:	fb01 330e 	mla	r3, r1, lr, r3
 8020980:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020982:	f88a 9000 	strb.w	r9, [sl]
 8020986:	fb02 3201 	mla	r2, r2, r1, r3
 802098a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802098c:	f88a 8001 	strb.w	r8, [sl, #1]
 8020990:	fb0b 2b03 	mla	fp, fp, r3, r2
 8020994:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8020998:	f88a b002 	strb.w	fp, [sl, #2]
 802099c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802099e:	f10a 0a03 	add.w	sl, sl, #3
 80209a2:	3f01      	subs	r7, #1
 80209a4:	441e      	add	r6, r3
 80209a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80209a8:	441d      	add	r5, r3
 80209aa:	e77f      	b.n	80208ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80209ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80209ae:	441e      	add	r6, r3
 80209b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80209b2:	441d      	add	r5, r3
 80209b4:	9b06      	ldr	r3, [sp, #24]
 80209b6:	3b01      	subs	r3, #1
 80209b8:	9306      	str	r3, [sp, #24]
 80209ba:	9b08      	ldr	r3, [sp, #32]
 80209bc:	3303      	adds	r3, #3
 80209be:	9308      	str	r3, [sp, #32]
 80209c0:	e72b      	b.n	802081a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80209c2:	f47f af3c 	bne.w	802083e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80209c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	f340 80b9 	ble.w	8020b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80209ce:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80209d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80209d4:	ee79 9aab 	vadd.f32	s19, s19, s23
 80209d8:	eef0 6a48 	vmov.f32	s13, s16
 80209dc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80209e0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80209e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209e8:	ee16 6a90 	vmov	r6, s13
 80209ec:	eef0 6a68 	vmov.f32	s13, s17
 80209f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209f4:	ee16 5a90 	vmov	r5, s13
 80209f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80209fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a10:	ee18 2a10 	vmov	r2, s16
 8020a14:	eeb0 8a47 	vmov.f32	s16, s14
 8020a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a1c:	ee18 2a90 	vmov	r2, s17
 8020a20:	9333      	str	r3, [sp, #204]	; 0xcc
 8020a22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a24:	eef0 8a67 	vmov.f32	s17, s15
 8020a28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a2c:	9334      	str	r3, [sp, #208]	; 0xd0
 8020a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a32:	3b01      	subs	r3, #1
 8020a34:	930c      	str	r3, [sp, #48]	; 0x30
 8020a36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a38:	bf08      	it	eq
 8020a3a:	4613      	moveq	r3, r2
 8020a3c:	9306      	str	r3, [sp, #24]
 8020a3e:	e6e5      	b.n	802080c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8020a40:	1c54      	adds	r4, r2, #1
 8020a42:	d1ab      	bne.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a44:	9807      	ldr	r0, [sp, #28]
 8020a46:	4282      	cmp	r2, r0
 8020a48:	daa8      	bge.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a4a:	1c58      	adds	r0, r3, #1
 8020a4c:	dba6      	blt.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a50:	4298      	cmp	r0, r3
 8020a52:	dda3      	ble.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a54:	9000      	str	r0, [sp, #0]
 8020a56:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020a58:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8020a5c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8020a60:	9b07      	ldr	r3, [sp, #28]
 8020a62:	4651      	mov	r1, sl
 8020a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a66:	f7ff fdd1 	bl	802060c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020a6a:	e797      	b.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020a6c:	1431      	asrs	r1, r6, #16
 8020a6e:	9c07      	ldr	r4, [sp, #28]
 8020a70:	1428      	asrs	r0, r5, #16
 8020a72:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020a76:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8020a7a:	fb04 1000 	mla	r0, r4, r0, r1
 8020a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020a80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020a82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a86:	4401      	add	r1, r0
 8020a88:	5c20      	ldrb	r0, [r4, r0]
 8020a8a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020a8e:	900e      	str	r0, [sp, #56]	; 0x38
 8020a90:	f891 a003 	ldrb.w	sl, [r1, #3]
 8020a94:	7848      	ldrb	r0, [r1, #1]
 8020a96:	f891 9004 	ldrb.w	r9, [r1, #4]
 8020a9a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8020a9e:	b172      	cbz	r2, 8020abe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8020aa0:	3105      	adds	r1, #5
 8020aa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020aa4:	190f      	adds	r7, r1, r4
 8020aa6:	5d09      	ldrb	r1, [r1, r4]
 8020aa8:	9115      	str	r1, [sp, #84]	; 0x54
 8020aaa:	7879      	ldrb	r1, [r7, #1]
 8020aac:	9117      	str	r1, [sp, #92]	; 0x5c
 8020aae:	78b9      	ldrb	r1, [r7, #2]
 8020ab0:	9119      	str	r1, [sp, #100]	; 0x64
 8020ab2:	78f9      	ldrb	r1, [r7, #3]
 8020ab4:	9116      	str	r1, [sp, #88]	; 0x58
 8020ab6:	7939      	ldrb	r1, [r7, #4]
 8020ab8:	9118      	str	r1, [sp, #96]	; 0x60
 8020aba:	7979      	ldrb	r1, [r7, #5]
 8020abc:	911a      	str	r1, [sp, #104]	; 0x68
 8020abe:	b29b      	uxth	r3, r3
 8020ac0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ac2:	b292      	uxth	r2, r2
 8020ac4:	f10c 0c03 	add.w	ip, ip, #3
 8020ac8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020acc:	fb03 f102 	mul.w	r1, r3, r2
 8020ad0:	011b      	lsls	r3, r3, #4
 8020ad2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8020ad6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020ada:	1a5b      	subs	r3, r3, r1
 8020adc:	b292      	uxth	r2, r2
 8020ade:	b29b      	uxth	r3, r3
 8020ae0:	1abf      	subs	r7, r7, r2
 8020ae2:	fb03 f909 	mul.w	r9, r3, r9
 8020ae6:	b2bf      	uxth	r7, r7
 8020ae8:	fb03 fa0a 	mul.w	sl, r3, sl
 8020aec:	fb03 f30b 	mul.w	r3, r3, fp
 8020af0:	fb07 9900 	mla	r9, r7, r0, r9
 8020af4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020af6:	fb07 aa04 	mla	sl, r7, r4, sl
 8020afa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020afc:	fb02 9900 	mla	r9, r2, r0, r9
 8020b00:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020b02:	fb07 3308 	mla	r3, r7, r8, r3
 8020b06:	fb01 9900 	mla	r9, r1, r0, r9
 8020b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020b0c:	fb02 aa04 	mla	sl, r2, r4, sl
 8020b10:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020b12:	fb02 3200 	mla	r2, r2, r0, r3
 8020b16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020b18:	fb01 aa04 	mla	sl, r1, r4, sl
 8020b1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b20:	fb01 2103 	mla	r1, r1, r3, r2
 8020b24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020b26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b2a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8020b2e:	1209      	asrs	r1, r1, #8
 8020b30:	441e      	add	r6, r3
 8020b32:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020b34:	f80c ac06 	strb.w	sl, [ip, #-6]
 8020b38:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8020b3c:	441d      	add	r5, r3
 8020b3e:	e697      	b.n	8020870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8020b40:	b01d      	add	sp, #116	; 0x74
 8020b42:	ecbd 8b0a 	vpop	{d8-d12}
 8020b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b50:	b085      	sub	sp, #20
 8020b52:	7888      	ldrb	r0, [r1, #2]
 8020b54:	4691      	mov	r9, r2
 8020b56:	9000      	str	r0, [sp, #0]
 8020b58:	7848      	ldrb	r0, [r1, #1]
 8020b5a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8020b5e:	9001      	str	r0, [sp, #4]
 8020b60:	7808      	ldrb	r0, [r1, #0]
 8020b62:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8020b66:	9002      	str	r0, [sp, #8]
 8020b68:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020b6c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8020b70:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8020b74:	fb04 c603 	mla	r6, r4, r3, ip
 8020b78:	2c00      	cmp	r4, #0
 8020b7a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8020b7e:	9a00      	ldr	r2, [sp, #0]
 8020b80:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020b84:	9a01      	ldr	r2, [sp, #4]
 8020b86:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020b8a:	db3a      	blt.n	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8020b8c:	45a0      	cmp	r8, r4
 8020b8e:	dd38      	ble.n	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8020b90:	f1bc 0f00 	cmp.w	ip, #0
 8020b94:	db33      	blt.n	8020bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8020b96:	4563      	cmp	r3, ip
 8020b98:	dd31      	ble.n	8020bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8020b9a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8020b9e:	f11c 0601 	adds.w	r6, ip, #1
 8020ba2:	d431      	bmi.n	8020c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020ba4:	42b3      	cmp	r3, r6
 8020ba6:	dd2f      	ble.n	8020c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020ba8:	b375      	cbz	r5, 8020c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020baa:	f8de 6004 	ldr.w	r6, [lr, #4]
 8020bae:	3401      	adds	r4, #1
 8020bb0:	d42e      	bmi.n	8020c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020bb2:	45a0      	cmp	r8, r4
 8020bb4:	dd2c      	ble.n	8020c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020bb6:	b35f      	cbz	r7, 8020c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020bb8:	f1bc 0f00 	cmp.w	ip, #0
 8020bbc:	db26      	blt.n	8020c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8020bbe:	4563      	cmp	r3, ip
 8020bc0:	dd24      	ble.n	8020c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8020bc2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8020bc6:	f11c 0c01 	adds.w	ip, ip, #1
 8020bca:	d405      	bmi.n	8020bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bcc:	4563      	cmp	r3, ip
 8020bce:	dd03      	ble.n	8020bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bd0:	b115      	cbz	r5, 8020bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020bd2:	3301      	adds	r3, #1
 8020bd4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8020bd8:	2d0f      	cmp	r5, #15
 8020bda:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020bde:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020be2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020be6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020bea:	d801      	bhi.n	8020bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8020bec:	2f0f      	cmp	r7, #15
 8020bee:	d911      	bls.n	8020c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8020bf0:	4b80      	ldr	r3, [pc, #512]	; (8020df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8020bf2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020bf6:	4a80      	ldr	r2, [pc, #512]	; (8020df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8020bf8:	4880      	ldr	r0, [pc, #512]	; (8020dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8020bfa:	f003 fd07 	bl	802460c <__assert_func>
 8020bfe:	4602      	mov	r2, r0
 8020c00:	e7cd      	b.n	8020b9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8020c02:	4606      	mov	r6, r0
 8020c04:	4602      	mov	r2, r0
 8020c06:	e7d2      	b.n	8020bae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020c08:	4606      	mov	r6, r0
 8020c0a:	e7d0      	b.n	8020bae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020c0c:	4604      	mov	r4, r0
 8020c0e:	e7da      	b.n	8020bc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8020c10:	4604      	mov	r4, r0
 8020c12:	e7e1      	b.n	8020bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020c14:	b2ab      	uxth	r3, r5
 8020c16:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020c1a:	b2bf      	uxth	r7, r7
 8020c1c:	fb03 fe07 	mul.w	lr, r3, r7
 8020c20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020c24:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020c28:	eba3 0c0e 	sub.w	ip, r3, lr
 8020c2c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020c30:	b2bf      	uxth	r7, r7
 8020c32:	fa1f fc8c 	uxth.w	ip, ip
 8020c36:	eba5 0507 	sub.w	r5, r5, r7
 8020c3a:	fb0c f30a 	mul.w	r3, ip, sl
 8020c3e:	b2ad      	uxth	r5, r5
 8020c40:	fb05 330b 	mla	r3, r5, fp, r3
 8020c44:	fb07 3309 	mla	r3, r7, r9, r3
 8020c48:	fb0e 3308 	mla	r3, lr, r8, r3
 8020c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c50:	9303      	str	r3, [sp, #12]
 8020c52:	d018      	beq.n	8020c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8020c54:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020c58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c5c:	fb0b f303 	mul.w	r3, fp, r3
 8020c60:	fb0b fb02 	mul.w	fp, fp, r2
 8020c64:	0a1a      	lsrs	r2, r3, #8
 8020c66:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020c6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c6e:	441a      	add	r2, r3
 8020c70:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020c74:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020c78:	0a12      	lsrs	r2, r2, #8
 8020c7a:	0a1b      	lsrs	r3, r3, #8
 8020c7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c84:	431a      	orrs	r2, r3
 8020c86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020c8a:	d019      	beq.n	8020cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8020c8c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020c90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c94:	fb0a fb0b 	mul.w	fp, sl, fp
 8020c98:	fb0a fa06 	mul.w	sl, sl, r6
 8020c9c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020ca0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ca4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020ca8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020cac:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020cb0:	445e      	add	r6, fp
 8020cb2:	0a1b      	lsrs	r3, r3, #8
 8020cb4:	0a36      	lsrs	r6, r6, #8
 8020cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020cbe:	431e      	orrs	r6, r3
 8020cc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020cc4:	d019      	beq.n	8020cfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8020cc6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020cca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020cce:	fb09 fa0a 	mul.w	sl, r9, sl
 8020cd2:	fb09 f904 	mul.w	r9, r9, r4
 8020cd6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020cda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020cde:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020ce2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020ce6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020cea:	4454      	add	r4, sl
 8020cec:	0a1b      	lsrs	r3, r3, #8
 8020cee:	0a24      	lsrs	r4, r4, #8
 8020cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cf4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cf8:	431c      	orrs	r4, r3
 8020cfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020cfe:	d019      	beq.n	8020d34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8020d00:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020d04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d08:	fb08 f909 	mul.w	r9, r8, r9
 8020d0c:	fb08 f800 	mul.w	r8, r8, r0
 8020d10:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020d14:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020d18:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020d1c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020d20:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020d24:	4448      	add	r0, r9
 8020d26:	0a1b      	lsrs	r3, r3, #8
 8020d28:	0a00      	lsrs	r0, r0, #8
 8020d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020d32:	4318      	orrs	r0, r3
 8020d34:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020d38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d3c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020d40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d44:	fb0c f808 	mul.w	r8, ip, r8
 8020d48:	fb0c f606 	mul.w	r6, ip, r6
 8020d4c:	fb05 8803 	mla	r8, r5, r3, r8
 8020d50:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020d54:	fb05 6202 	mla	r2, r5, r2, r6
 8020d58:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020d5c:	fb07 8803 	mla	r8, r7, r3, r8
 8020d60:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020d64:	fb07 2704 	mla	r7, r7, r4, r2
 8020d68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d6c:	fb0e 8303 	mla	r3, lr, r3, r8
 8020d70:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8020d74:	fb0e 7e00 	mla	lr, lr, r0, r7
 8020d78:	9803      	ldr	r0, [sp, #12]
 8020d7a:	b292      	uxth	r2, r2
 8020d7c:	9c02      	ldr	r4, [sp, #8]
 8020d7e:	0a1b      	lsrs	r3, r3, #8
 8020d80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d84:	4350      	muls	r0, r2
 8020d86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020d8e:	ea43 0e0e 	orr.w	lr, r3, lr
 8020d92:	1c43      	adds	r3, r0, #1
 8020d94:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020d98:	fa5f f08e 	uxtb.w	r0, lr
 8020d9c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020da0:	b2db      	uxtb	r3, r3
 8020da2:	fb14 f403 	smulbb	r4, r4, r3
 8020da6:	fb00 4002 	mla	r0, r0, r2, r4
 8020daa:	b280      	uxth	r0, r0
 8020dac:	1c44      	adds	r4, r0, #1
 8020dae:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020db2:	9c01      	ldr	r4, [sp, #4]
 8020db4:	fb14 f403 	smulbb	r4, r4, r3
 8020db8:	1200      	asrs	r0, r0, #8
 8020dba:	7008      	strb	r0, [r1, #0]
 8020dbc:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8020dc0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020dc4:	fb00 4002 	mla	r0, r0, r2, r4
 8020dc8:	b280      	uxth	r0, r0
 8020dca:	1c44      	adds	r4, r0, #1
 8020dcc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020dd0:	1200      	asrs	r0, r0, #8
 8020dd2:	7048      	strb	r0, [r1, #1]
 8020dd4:	9800      	ldr	r0, [sp, #0]
 8020dd6:	fb10 f303 	smulbb	r3, r0, r3
 8020dda:	fb0e 3202 	mla	r2, lr, r2, r3
 8020dde:	b292      	uxth	r2, r2
 8020de0:	f102 0e01 	add.w	lr, r2, #1
 8020de4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020de8:	1212      	asrs	r2, r2, #8
 8020dea:	708a      	strb	r2, [r1, #2]
 8020dec:	b005      	add	sp, #20
 8020dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020df2:	bf00      	nop
 8020df4:	08028fc7 	.word	0x08028fc7
 8020df8:	080294be 	.word	0x080294be
 8020dfc:	08029090 	.word	0x08029090

08020e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e04:	ed2d 8b08 	vpush	{d8-d11}
 8020e08:	b099      	sub	sp, #100	; 0x64
 8020e0a:	eeb0 aa40 	vmov.f32	s20, s0
 8020e0e:	eef0 9a60 	vmov.f32	s19, s1
 8020e12:	9306      	str	r3, [sp, #24]
 8020e14:	eeb0 9a41 	vmov.f32	s18, s2
 8020e18:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8020e1c:	eeb0 8a62 	vmov.f32	s16, s5
 8020e20:	9216      	str	r2, [sp, #88]	; 0x58
 8020e22:	eef0 8a43 	vmov.f32	s17, s6
 8020e26:	9307      	str	r3, [sp, #28]
 8020e28:	eef0 ba44 	vmov.f32	s23, s8
 8020e2c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8020e30:	eeb0 ba64 	vmov.f32	s22, s9
 8020e34:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020e36:	eef0 aa45 	vmov.f32	s21, s10
 8020e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8020e3c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8020e40:	9017      	str	r0, [sp, #92]	; 0x5c
 8020e42:	9112      	str	r1, [sp, #72]	; 0x48
 8020e44:	6850      	ldr	r0, [r2, #4]
 8020e46:	9315      	str	r3, [sp, #84]	; 0x54
 8020e48:	6812      	ldr	r2, [r2, #0]
 8020e4a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8020e4c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8020e50:	fb00 1303 	mla	r3, r0, r3, r1
 8020e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e58:	18d3      	adds	r3, r2, r3
 8020e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8020e5c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	9311      	str	r3, [sp, #68]	; 0x44
 8020e62:	9b07      	ldr	r3, [sp, #28]
 8020e64:	009b      	lsls	r3, r3, #2
 8020e66:	930e      	str	r3, [sp, #56]	; 0x38
 8020e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	dc03      	bgt.n	8020e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020e6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	f340 833b 	ble.w	80214ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8020e76:	9b06      	ldr	r3, [sp, #24]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	f340 8197 	ble.w	80211ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8020e7e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e80:	1423      	asrs	r3, r4, #16
 8020e82:	1412      	asrs	r2, r2, #16
 8020e84:	d432      	bmi.n	8020eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8020e86:	1c51      	adds	r1, r2, #1
 8020e88:	9807      	ldr	r0, [sp, #28]
 8020e8a:	4288      	cmp	r0, r1
 8020e8c:	dd31      	ble.n	8020ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	db2f      	blt.n	8020ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e92:	1c59      	adds	r1, r3, #1
 8020e94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e96:	4288      	cmp	r0, r1
 8020e98:	dd2b      	ble.n	8020ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020e9a:	9b06      	ldr	r3, [sp, #24]
 8020e9c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020e9e:	3b01      	subs	r3, #1
 8020ea0:	992b      	ldr	r1, [sp, #172]	; 0xac
 8020ea2:	fb02 1203 	mla	r2, r2, r3, r1
 8020ea6:	1412      	asrs	r2, r2, #16
 8020ea8:	d42e      	bmi.n	8020f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020eaa:	3201      	adds	r2, #1
 8020eac:	9907      	ldr	r1, [sp, #28]
 8020eae:	4291      	cmp	r1, r2
 8020eb0:	dd2a      	ble.n	8020f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020eb2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020eb4:	fb02 4303 	mla	r3, r2, r3, r4
 8020eb8:	141b      	asrs	r3, r3, #16
 8020eba:	d425      	bmi.n	8020f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020ebc:	3301      	adds	r3, #1
 8020ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ec0:	429a      	cmp	r2, r3
 8020ec2:	dd21      	ble.n	8020f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ec6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8020eca:	f103 0e03 	add.w	lr, r3, #3
 8020ece:	9b06      	ldr	r3, [sp, #24]
 8020ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	f300 81d2 	bgt.w	802127e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8020eda:	9b06      	ldr	r3, [sp, #24]
 8020edc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ee2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ee6:	4423      	add	r3, r4
 8020ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8020eea:	e161      	b.n	80211b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8020eec:	1c51      	adds	r1, r2, #1
 8020eee:	f040 8150 	bne.w	8021192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020ef2:	9907      	ldr	r1, [sp, #28]
 8020ef4:	428a      	cmp	r2, r1
 8020ef6:	f280 814c 	bge.w	8021192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020efa:	1c5a      	adds	r2, r3, #1
 8020efc:	f2c0 8149 	blt.w	8021192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020f00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020f02:	4293      	cmp	r3, r2
 8020f04:	f280 8145 	bge.w	8021192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020f08:	9b06      	ldr	r3, [sp, #24]
 8020f0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8020f0e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8020f12:	9313      	str	r3, [sp, #76]	; 0x4c
 8020f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	dddf      	ble.n	8020eda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8020f1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020f1c:	1423      	asrs	r3, r4, #16
 8020f1e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020f22:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020f26:	1412      	asrs	r2, r2, #16
 8020f28:	f100 8190 	bmi.w	802124c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8020f2c:	1c55      	adds	r5, r2, #1
 8020f2e:	9f07      	ldr	r7, [sp, #28]
 8020f30:	42af      	cmp	r7, r5
 8020f32:	f340 818d 	ble.w	8021250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	f2c0 818a 	blt.w	8021250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f3c:	1c5d      	adds	r5, r3, #1
 8020f3e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020f40:	42af      	cmp	r7, r5
 8020f42:	f340 8185 	ble.w	8021250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020f46:	9d07      	ldr	r5, [sp, #28]
 8020f48:	fb03 2305 	mla	r3, r3, r5, r2
 8020f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f4e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020f56:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020f5a:	2800      	cmp	r0, #0
 8020f5c:	f000 8167 	beq.w	802122e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020f60:	686a      	ldr	r2, [r5, #4]
 8020f62:	920b      	str	r2, [sp, #44]	; 0x2c
 8020f64:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020f68:	2900      	cmp	r1, #0
 8020f6a:	f000 8169 	beq.w	8021240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f70:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020f72:	18aa      	adds	r2, r5, r2
 8020f74:	59ed      	ldr	r5, [r5, r7]
 8020f76:	6852      	ldr	r2, [r2, #4]
 8020f78:	9508      	str	r5, [sp, #32]
 8020f7a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020f7e:	0e15      	lsrs	r5, r2, #24
 8020f80:	920c      	str	r2, [sp, #48]	; 0x30
 8020f82:	b280      	uxth	r0, r0
 8020f84:	b289      	uxth	r1, r1
 8020f86:	fb00 fb01 	mul.w	fp, r0, r1
 8020f8a:	0100      	lsls	r0, r0, #4
 8020f8c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8020f90:	eba0 090b 	sub.w	r9, r0, fp
 8020f94:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8020f98:	b289      	uxth	r1, r1
 8020f9a:	fa1f f989 	uxth.w	r9, r9
 8020f9e:	1a52      	subs	r2, r2, r1
 8020fa0:	fb09 f008 	mul.w	r0, r9, r8
 8020fa4:	b292      	uxth	r2, r2
 8020fa6:	fb02 000c 	mla	r0, r2, ip, r0
 8020faa:	fb01 000a 	mla	r0, r1, sl, r0
 8020fae:	fb0b 0005 	mla	r0, fp, r5, r0
 8020fb2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020fb6:	2800      	cmp	r0, #0
 8020fb8:	f000 80e0 	beq.w	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020fbc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020fc0:	d01b      	beq.n	8020ffa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8020fc2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020fc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fca:	fb0c fe0e 	mul.w	lr, ip, lr
 8020fce:	fb0c fc03 	mul.w	ip, ip, r3
 8020fd2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020fd6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020fda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fde:	4473      	add	r3, lr
 8020fe0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020fe4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020fe8:	0a1b      	lsrs	r3, r3, #8
 8020fea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ff2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020ff6:	ea43 030e 	orr.w	r3, r3, lr
 8020ffa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020ffe:	d01e      	beq.n	802103e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021000:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021002:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021006:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802100a:	fb08 fc0c 	mul.w	ip, r8, ip
 802100e:	fb08 f80e 	mul.w	r8, r8, lr
 8021012:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021016:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802101a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802101e:	44e6      	add	lr, ip
 8021020:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021024:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021028:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802102c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021034:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021038:	ea4e 0708 	orr.w	r7, lr, r8
 802103c:	970b      	str	r7, [sp, #44]	; 0x2c
 802103e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021042:	d01e      	beq.n	8021082 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021044:	9f08      	ldr	r7, [sp, #32]
 8021046:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802104a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802104e:	fb0a f808 	mul.w	r8, sl, r8
 8021052:	fb0a fa0c 	mul.w	sl, sl, ip
 8021056:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802105a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802105e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021066:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802106a:	44c6      	add	lr, r8
 802106c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021074:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802107c:	ea4e 070a 	orr.w	r7, lr, sl
 8021080:	9708      	str	r7, [sp, #32]
 8021082:	2dff      	cmp	r5, #255	; 0xff
 8021084:	d01d      	beq.n	80210c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8021086:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021088:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802108c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021090:	fb05 f808 	mul.w	r8, r5, r8
 8021094:	fb05 f50c 	mul.w	r5, r5, ip
 8021098:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802109c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80210a0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80210a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80210ac:	44c6      	add	lr, r8
 80210ae:	0a2d      	lsrs	r5, r5, #8
 80210b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210b4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80210b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210bc:	ea4e 0505 	orr.w	r5, lr, r5
 80210c0:	950c      	str	r5, [sp, #48]	; 0x30
 80210c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80210c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80210c8:	9f08      	ldr	r7, [sp, #32]
 80210ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80210d2:	fb09 f505 	mul.w	r5, r9, r5
 80210d6:	fb02 550c 	mla	r5, r2, ip, r5
 80210da:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80210de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80210e0:	fb01 550c 	mla	r5, r1, ip, r5
 80210e4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80210e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80210ea:	fb0b 550c 	mla	r5, fp, ip, r5
 80210ee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80210f2:	fb09 f90c 	mul.w	r9, r9, ip
 80210f6:	0a2d      	lsrs	r5, r5, #8
 80210f8:	fb02 9303 	mla	r3, r2, r3, r9
 80210fc:	9a08      	ldr	r2, [sp, #32]
 80210fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021102:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021108:	fb01 330e 	mla	r3, r1, lr, r3
 802110c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021110:	fb0b 3b01 	mla	fp, fp, r1, r3
 8021114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021116:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021118:	4343      	muls	r3, r0
 802111a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802111e:	1c58      	adds	r0, r3, #1
 8021120:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021124:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021128:	ea45 050b 	orr.w	r5, r5, fp
 802112c:	7833      	ldrb	r3, [r6, #0]
 802112e:	b2ea      	uxtb	r2, r5
 8021130:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021134:	fb12 f201 	smulbb	r2, r2, r1
 8021138:	b2c0      	uxtb	r0, r0
 802113a:	fb03 2300 	mla	r3, r3, r0, r2
 802113e:	b29b      	uxth	r3, r3
 8021140:	1c5a      	adds	r2, r3, #1
 8021142:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021146:	7872      	ldrb	r2, [r6, #1]
 8021148:	fb12 f200 	smulbb	r2, r2, r0
 802114c:	121b      	asrs	r3, r3, #8
 802114e:	7033      	strb	r3, [r6, #0]
 8021150:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021154:	0c2d      	lsrs	r5, r5, #16
 8021156:	fb03 2301 	mla	r3, r3, r1, r2
 802115a:	b29b      	uxth	r3, r3
 802115c:	1c5a      	adds	r2, r3, #1
 802115e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021162:	121b      	asrs	r3, r3, #8
 8021164:	7073      	strb	r3, [r6, #1]
 8021166:	78b3      	ldrb	r3, [r6, #2]
 8021168:	fb13 f000 	smulbb	r0, r3, r0
 802116c:	fb05 0501 	mla	r5, r5, r1, r0
 8021170:	b2ad      	uxth	r5, r5
 8021172:	1c6b      	adds	r3, r5, #1
 8021174:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021178:	122d      	asrs	r5, r5, #8
 802117a:	70b5      	strb	r5, [r6, #2]
 802117c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802117e:	3603      	adds	r6, #3
 8021180:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021182:	4413      	add	r3, r2
 8021184:	932b      	str	r3, [sp, #172]	; 0xac
 8021186:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021188:	441c      	add	r4, r3
 802118a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802118c:	3b01      	subs	r3, #1
 802118e:	9314      	str	r3, [sp, #80]	; 0x50
 8021190:	e6c0      	b.n	8020f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021192:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021194:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021196:	4413      	add	r3, r2
 8021198:	932b      	str	r3, [sp, #172]	; 0xac
 802119a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802119c:	441c      	add	r4, r3
 802119e:	9b06      	ldr	r3, [sp, #24]
 80211a0:	3b01      	subs	r3, #1
 80211a2:	9306      	str	r3, [sp, #24]
 80211a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211a6:	3303      	adds	r3, #3
 80211a8:	930a      	str	r3, [sp, #40]	; 0x28
 80211aa:	e664      	b.n	8020e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80211ac:	f47f ae75 	bne.w	8020e9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80211b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80211b2:	2b00      	cmp	r3, #0
 80211b4:	f340 819a 	ble.w	80214ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80211b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80211be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80211c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80211c6:	eef0 6a48 	vmov.f32	s13, s16
 80211ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80211ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80211d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211d6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80211da:	eef0 6a68 	vmov.f32	s13, s17
 80211de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211e2:	ee16 4a90 	vmov	r4, s13
 80211e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80211ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80211ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80211f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80211f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80211fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80211fe:	ee18 2a10 	vmov	r2, s16
 8021202:	eeb0 8a47 	vmov.f32	s16, s14
 8021206:	fb92 f3f3 	sdiv	r3, r2, r3
 802120a:	ee18 2a90 	vmov	r2, s17
 802120e:	932d      	str	r3, [sp, #180]	; 0xb4
 8021210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021212:	eef0 8a67 	vmov.f32	s17, s15
 8021216:	fb92 f3f3 	sdiv	r3, r2, r3
 802121a:	932e      	str	r3, [sp, #184]	; 0xb8
 802121c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802121e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021220:	3b01      	subs	r3, #1
 8021222:	9312      	str	r3, [sp, #72]	; 0x48
 8021224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021226:	bf08      	it	eq
 8021228:	4613      	moveq	r3, r2
 802122a:	9306      	str	r3, [sp, #24]
 802122c:	e61c      	b.n	8020e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802122e:	b151      	cbz	r1, 8021246 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021232:	58aa      	ldr	r2, [r5, r2]
 8021234:	25ff      	movs	r5, #255	; 0xff
 8021236:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802123a:	9208      	str	r2, [sp, #32]
 802123c:	46a8      	mov	r8, r5
 802123e:	e6a0      	b.n	8020f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021240:	25ff      	movs	r5, #255	; 0xff
 8021242:	46aa      	mov	sl, r5
 8021244:	e69d      	b.n	8020f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021246:	25ff      	movs	r5, #255	; 0xff
 8021248:	46aa      	mov	sl, r5
 802124a:	e7f7      	b.n	802123c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802124c:	1c57      	adds	r7, r2, #1
 802124e:	d195      	bne.n	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021250:	9d07      	ldr	r5, [sp, #28]
 8021252:	4295      	cmp	r5, r2
 8021254:	dd92      	ble.n	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021256:	1c5d      	adds	r5, r3, #1
 8021258:	db90      	blt.n	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802125a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802125c:	429d      	cmp	r5, r3
 802125e:	dd8d      	ble.n	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021260:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021262:	9201      	str	r2, [sp, #4]
 8021264:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021266:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802126a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802126c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802126e:	9300      	str	r3, [sp, #0]
 8021270:	9b07      	ldr	r3, [sp, #28]
 8021272:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021276:	4631      	mov	r1, r6
 8021278:	f7ff fc68 	bl	8020b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802127c:	e77e      	b.n	802117c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802127e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021280:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021284:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021286:	9d07      	ldr	r5, [sp, #28]
 8021288:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802128c:	1412      	asrs	r2, r2, #16
 802128e:	1423      	asrs	r3, r4, #16
 8021290:	fb05 2303 	mla	r3, r5, r3, r2
 8021294:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021296:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802129e:	0e1e      	lsrs	r6, r3, #24
 80212a0:	2900      	cmp	r1, #0
 80212a2:	f000 8114 	beq.w	80214ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80212a6:	686a      	ldr	r2, [r5, #4]
 80212a8:	920d      	str	r2, [sp, #52]	; 0x34
 80212aa:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80212ae:	2800      	cmp	r0, #0
 80212b0:	f000 8116 	beq.w	80214e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80212b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80212b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80212b8:	18aa      	adds	r2, r5, r2
 80212ba:	59ed      	ldr	r5, [r5, r7]
 80212bc:	6852      	ldr	r2, [r2, #4]
 80212be:	9509      	str	r5, [sp, #36]	; 0x24
 80212c0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80212c4:	0e15      	lsrs	r5, r2, #24
 80212c6:	920f      	str	r2, [sp, #60]	; 0x3c
 80212c8:	b289      	uxth	r1, r1
 80212ca:	b280      	uxth	r0, r0
 80212cc:	fb01 fa00 	mul.w	sl, r1, r0
 80212d0:	0109      	lsls	r1, r1, #4
 80212d2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80212d6:	eba1 080a 	sub.w	r8, r1, sl
 80212da:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80212de:	b280      	uxth	r0, r0
 80212e0:	fa1f f888 	uxth.w	r8, r8
 80212e4:	1a12      	subs	r2, r2, r0
 80212e6:	fb08 f10c 	mul.w	r1, r8, ip
 80212ea:	b292      	uxth	r2, r2
 80212ec:	fb02 1106 	mla	r1, r2, r6, r1
 80212f0:	fb00 1109 	mla	r1, r0, r9, r1
 80212f4:	fb0a 1105 	mla	r1, sl, r5, r1
 80212f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80212fc:	2900      	cmp	r1, #0
 80212fe:	f000 80da 	beq.w	80214b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021302:	2eff      	cmp	r6, #255	; 0xff
 8021304:	d016      	beq.n	8021334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8021306:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802130a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802130e:	4377      	muls	r7, r6
 8021310:	435e      	muls	r6, r3
 8021312:	0a3b      	lsrs	r3, r7, #8
 8021314:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021318:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802131c:	443b      	add	r3, r7
 802131e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021322:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021326:	0a1b      	lsrs	r3, r3, #8
 8021328:	0a3f      	lsrs	r7, r7, #8
 802132a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802132e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021332:	433b      	orrs	r3, r7
 8021334:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021338:	d01d      	beq.n	8021376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802133a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802133c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802133e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021342:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021346:	fb0c f606 	mul.w	r6, ip, r6
 802134a:	fb0c fc07 	mul.w	ip, ip, r7
 802134e:	0a37      	lsrs	r7, r6, #8
 8021350:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021354:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021358:	4437      	add	r7, r6
 802135a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802135e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021362:	0a3f      	lsrs	r7, r7, #8
 8021364:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021368:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802136c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021370:	ea47 060c 	orr.w	r6, r7, ip
 8021374:	960d      	str	r6, [sp, #52]	; 0x34
 8021376:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802137a:	d01d      	beq.n	80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802137c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802137e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021382:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021386:	fb09 fc0c 	mul.w	ip, r9, ip
 802138a:	fb09 f906 	mul.w	r9, r9, r6
 802138e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021392:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021396:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802139a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802139e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80213a2:	4467      	add	r7, ip
 80213a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80213a8:	0a3f      	lsrs	r7, r7, #8
 80213aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80213ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213b2:	ea47 0609 	orr.w	r6, r7, r9
 80213b6:	9609      	str	r6, [sp, #36]	; 0x24
 80213b8:	2dff      	cmp	r5, #255	; 0xff
 80213ba:	d01a      	beq.n	80213f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80213bc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80213be:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80213c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80213c6:	fb05 fc0c 	mul.w	ip, r5, ip
 80213ca:	4375      	muls	r5, r6
 80213cc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80213d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80213d4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80213d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213dc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80213e0:	4467      	add	r7, ip
 80213e2:	0a2d      	lsrs	r5, r5, #8
 80213e4:	0a3f      	lsrs	r7, r7, #8
 80213e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80213ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213ee:	433d      	orrs	r5, r7
 80213f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80213f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213f4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80213f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213fc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021400:	fb08 f505 	mul.w	r5, r8, r5
 8021404:	fb02 5506 	mla	r5, r2, r6, r5
 8021408:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802140a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802140e:	fb00 5506 	mla	r5, r0, r6, r5
 8021412:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021414:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021418:	fb0a 5506 	mla	r5, sl, r6, r5
 802141c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802141e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021422:	0a2d      	lsrs	r5, r5, #8
 8021424:	fb08 f806 	mul.w	r8, r8, r6
 8021428:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802142c:	fb02 8303 	mla	r3, r2, r3, r8
 8021430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021432:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021438:	fb00 3307 	mla	r3, r0, r7, r3
 802143c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021440:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021444:	fb01 f30b 	mul.w	r3, r1, fp
 8021448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802144c:	1c59      	adds	r1, r3, #1
 802144e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021452:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021456:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802145a:	ea45 050c 	orr.w	r5, r5, ip
 802145e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021462:	b2ea      	uxtb	r2, r5
 8021464:	b2c9      	uxtb	r1, r1
 8021466:	fb12 f20b 	smulbb	r2, r2, fp
 802146a:	fb03 2301 	mla	r3, r3, r1, r2
 802146e:	b29b      	uxth	r3, r3
 8021470:	1c5a      	adds	r2, r3, #1
 8021472:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021476:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802147a:	fb12 f201 	smulbb	r2, r2, r1
 802147e:	121b      	asrs	r3, r3, #8
 8021480:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021484:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021488:	0c2d      	lsrs	r5, r5, #16
 802148a:	fb03 230b 	mla	r3, r3, fp, r2
 802148e:	b29b      	uxth	r3, r3
 8021490:	1c5a      	adds	r2, r3, #1
 8021492:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021496:	121b      	asrs	r3, r3, #8
 8021498:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802149c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80214a0:	fb13 f101 	smulbb	r1, r3, r1
 80214a4:	fb05 150b 	mla	r5, r5, fp, r1
 80214a8:	b2ad      	uxth	r5, r5
 80214aa:	1c69      	adds	r1, r5, #1
 80214ac:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80214b0:	122d      	asrs	r5, r5, #8
 80214b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80214b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80214b8:	f10e 0e03 	add.w	lr, lr, #3
 80214bc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214be:	4413      	add	r3, r2
 80214c0:	932b      	str	r3, [sp, #172]	; 0xac
 80214c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80214c4:	441c      	add	r4, r3
 80214c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80214c8:	3b01      	subs	r3, #1
 80214ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80214cc:	e501      	b.n	8020ed2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80214ce:	b150      	cbz	r0, 80214e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80214d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214d2:	58aa      	ldr	r2, [r5, r2]
 80214d4:	25ff      	movs	r5, #255	; 0xff
 80214d6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80214da:	9209      	str	r2, [sp, #36]	; 0x24
 80214dc:	46ac      	mov	ip, r5
 80214de:	e6f3      	b.n	80212c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80214e0:	25ff      	movs	r5, #255	; 0xff
 80214e2:	46a9      	mov	r9, r5
 80214e4:	e6f0      	b.n	80212c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80214e6:	25ff      	movs	r5, #255	; 0xff
 80214e8:	46a9      	mov	r9, r5
 80214ea:	e7f7      	b.n	80214dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80214ec:	b019      	add	sp, #100	; 0x64
 80214ee:	ecbd 8b08 	vpop	{d8-d11}
 80214f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080214f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80214f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214fc:	b085      	sub	sp, #20
 80214fe:	7888      	ldrb	r0, [r1, #2]
 8021500:	4691      	mov	r9, r2
 8021502:	9000      	str	r0, [sp, #0]
 8021504:	7848      	ldrb	r0, [r1, #1]
 8021506:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802150a:	9001      	str	r0, [sp, #4]
 802150c:	7808      	ldrb	r0, [r1, #0]
 802150e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021512:	9002      	str	r0, [sp, #8]
 8021514:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021518:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802151c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021520:	fb04 c603 	mla	r6, r4, r3, ip
 8021524:	2c00      	cmp	r4, #0
 8021526:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802152a:	9a00      	ldr	r2, [sp, #0]
 802152c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021530:	9a01      	ldr	r2, [sp, #4]
 8021532:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021536:	db3a      	blt.n	80215ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021538:	45a0      	cmp	r8, r4
 802153a:	dd38      	ble.n	80215ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802153c:	f1bc 0f00 	cmp.w	ip, #0
 8021540:	db33      	blt.n	80215aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021542:	4563      	cmp	r3, ip
 8021544:	dd31      	ble.n	80215aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021546:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802154a:	f11c 0601 	adds.w	r6, ip, #1
 802154e:	d431      	bmi.n	80215b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021550:	42b3      	cmp	r3, r6
 8021552:	dd2f      	ble.n	80215b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021554:	b375      	cbz	r5, 80215b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021556:	f8de 6004 	ldr.w	r6, [lr, #4]
 802155a:	3401      	adds	r4, #1
 802155c:	d42e      	bmi.n	80215bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802155e:	45a0      	cmp	r8, r4
 8021560:	dd2c      	ble.n	80215bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021562:	b35f      	cbz	r7, 80215bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021564:	f1bc 0f00 	cmp.w	ip, #0
 8021568:	db26      	blt.n	80215b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802156a:	4563      	cmp	r3, ip
 802156c:	dd24      	ble.n	80215b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802156e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021572:	f11c 0c01 	adds.w	ip, ip, #1
 8021576:	d405      	bmi.n	8021584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021578:	4563      	cmp	r3, ip
 802157a:	dd03      	ble.n	8021584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802157c:	b115      	cbz	r5, 8021584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802157e:	3301      	adds	r3, #1
 8021580:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021584:	2d0f      	cmp	r5, #15
 8021586:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802158a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802158e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021592:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021596:	d801      	bhi.n	802159c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021598:	2f0f      	cmp	r7, #15
 802159a:	d911      	bls.n	80215c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802159c:	4b77      	ldr	r3, [pc, #476]	; (802177c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802159e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80215a2:	4a77      	ldr	r2, [pc, #476]	; (8021780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80215a4:	4877      	ldr	r0, [pc, #476]	; (8021784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80215a6:	f003 f831 	bl	802460c <__assert_func>
 80215aa:	4602      	mov	r2, r0
 80215ac:	e7cd      	b.n	802154a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80215ae:	4606      	mov	r6, r0
 80215b0:	4602      	mov	r2, r0
 80215b2:	e7d2      	b.n	802155a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80215b4:	4606      	mov	r6, r0
 80215b6:	e7d0      	b.n	802155a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80215b8:	4604      	mov	r4, r0
 80215ba:	e7da      	b.n	8021572 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80215bc:	4604      	mov	r4, r0
 80215be:	e7e1      	b.n	8021584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80215c0:	b2ab      	uxth	r3, r5
 80215c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80215c6:	b2bf      	uxth	r7, r7
 80215c8:	fb03 fe07 	mul.w	lr, r3, r7
 80215cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80215d0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80215d4:	eba3 0c0e 	sub.w	ip, r3, lr
 80215d8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80215dc:	b2bf      	uxth	r7, r7
 80215de:	fa1f fc8c 	uxth.w	ip, ip
 80215e2:	eba5 0507 	sub.w	r5, r5, r7
 80215e6:	fb0c f30a 	mul.w	r3, ip, sl
 80215ea:	b2ad      	uxth	r5, r5
 80215ec:	fb05 330b 	mla	r3, r5, fp, r3
 80215f0:	fb07 3309 	mla	r3, r7, r9, r3
 80215f4:	fb0e 3308 	mla	r3, lr, r8, r3
 80215f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215fc:	9303      	str	r3, [sp, #12]
 80215fe:	d018      	beq.n	8021632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021600:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021604:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021608:	fb0b f303 	mul.w	r3, fp, r3
 802160c:	fb0b fb02 	mul.w	fp, fp, r2
 8021610:	0a1a      	lsrs	r2, r3, #8
 8021612:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021616:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802161a:	441a      	add	r2, r3
 802161c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021620:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021624:	0a12      	lsrs	r2, r2, #8
 8021626:	0a1b      	lsrs	r3, r3, #8
 8021628:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802162c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021630:	431a      	orrs	r2, r3
 8021632:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021636:	d019      	beq.n	802166c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021638:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802163c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021640:	fb0a fb0b 	mul.w	fp, sl, fp
 8021644:	fb0a fa06 	mul.w	sl, sl, r6
 8021648:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802164c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021650:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021654:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021658:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802165c:	445e      	add	r6, fp
 802165e:	0a1b      	lsrs	r3, r3, #8
 8021660:	0a36      	lsrs	r6, r6, #8
 8021662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021666:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802166a:	431e      	orrs	r6, r3
 802166c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021670:	d019      	beq.n	80216a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021672:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021676:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802167a:	fb09 fa0a 	mul.w	sl, r9, sl
 802167e:	fb09 f904 	mul.w	r9, r9, r4
 8021682:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021686:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802168a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802168e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021692:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021696:	4454      	add	r4, sl
 8021698:	0a1b      	lsrs	r3, r3, #8
 802169a:	0a24      	lsrs	r4, r4, #8
 802169c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80216a4:	431c      	orrs	r4, r3
 80216a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80216aa:	d019      	beq.n	80216e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80216ac:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80216b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80216b4:	fb08 f909 	mul.w	r9, r8, r9
 80216b8:	fb08 f800 	mul.w	r8, r8, r0
 80216bc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80216c0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80216c4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80216c8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80216cc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80216d0:	4448      	add	r0, r9
 80216d2:	0a1b      	lsrs	r3, r3, #8
 80216d4:	0a00      	lsrs	r0, r0, #8
 80216d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80216de:	4318      	orrs	r0, r3
 80216e0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80216e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80216e8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80216ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216f0:	fb0c f808 	mul.w	r8, ip, r8
 80216f4:	fb0c f606 	mul.w	r6, ip, r6
 80216f8:	fb05 8803 	mla	r8, r5, r3, r8
 80216fc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021700:	fb05 6202 	mla	r2, r5, r2, r6
 8021704:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021708:	fb07 8803 	mla	r8, r7, r3, r8
 802170c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021710:	fb07 2704 	mla	r7, r7, r4, r2
 8021714:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021718:	fb0e 8303 	mla	r3, lr, r3, r8
 802171c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021720:	9802      	ldr	r0, [sp, #8]
 8021722:	0a1b      	lsrs	r3, r3, #8
 8021724:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021728:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802172c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021730:	ea43 0e0e 	orr.w	lr, r3, lr
 8021734:	9b03      	ldr	r3, [sp, #12]
 8021736:	43db      	mvns	r3, r3
 8021738:	b2db      	uxtb	r3, r3
 802173a:	4358      	muls	r0, r3
 802173c:	1c42      	adds	r2, r0, #1
 802173e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021742:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021746:	700a      	strb	r2, [r1, #0]
 8021748:	9a01      	ldr	r2, [sp, #4]
 802174a:	435a      	muls	r2, r3
 802174c:	1c50      	adds	r0, r2, #1
 802174e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021752:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021756:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802175a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802175e:	704a      	strb	r2, [r1, #1]
 8021760:	9a00      	ldr	r2, [sp, #0]
 8021762:	435a      	muls	r2, r3
 8021764:	4613      	mov	r3, r2
 8021766:	3201      	adds	r2, #1
 8021768:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802176c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021770:	f881 e002 	strb.w	lr, [r1, #2]
 8021774:	b005      	add	sp, #20
 8021776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802177a:	bf00      	nop
 802177c:	08028fc7 	.word	0x08028fc7
 8021780:	080294be 	.word	0x080294be
 8021784:	08029090 	.word	0x08029090

08021788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802178c:	ed2d 8b08 	vpush	{d8-d11}
 8021790:	b097      	sub	sp, #92	; 0x5c
 8021792:	eeb0 aa40 	vmov.f32	s20, s0
 8021796:	eef0 9a60 	vmov.f32	s19, s1
 802179a:	9306      	str	r3, [sp, #24]
 802179c:	eeb0 9a41 	vmov.f32	s18, s2
 80217a0:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80217a4:	eeb0 8a62 	vmov.f32	s16, s5
 80217a8:	9214      	str	r2, [sp, #80]	; 0x50
 80217aa:	eef0 8a43 	vmov.f32	s17, s6
 80217ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80217b0:	eef0 ba44 	vmov.f32	s23, s8
 80217b4:	9307      	str	r3, [sp, #28]
 80217b6:	eeb0 ba64 	vmov.f32	s22, s9
 80217ba:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80217be:	eef0 aa45 	vmov.f32	s21, s10
 80217c2:	9015      	str	r0, [sp, #84]	; 0x54
 80217c4:	9112      	str	r1, [sp, #72]	; 0x48
 80217c6:	6850      	ldr	r0, [r2, #4]
 80217c8:	9310      	str	r3, [sp, #64]	; 0x40
 80217ca:	6812      	ldr	r2, [r2, #0]
 80217cc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80217ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80217d2:	fb00 1303 	mla	r3, r0, r3, r1
 80217d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217da:	18d3      	adds	r3, r2, r3
 80217dc:	930a      	str	r3, [sp, #40]	; 0x28
 80217de:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	9311      	str	r3, [sp, #68]	; 0x44
 80217e4:	9b07      	ldr	r3, [sp, #28]
 80217e6:	009b      	lsls	r3, r3, #2
 80217e8:	930e      	str	r3, [sp, #56]	; 0x38
 80217ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	dc03      	bgt.n	80217f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80217f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	f340 832e 	ble.w	8021e54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80217f8:	9b06      	ldr	r3, [sp, #24]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	f340 8186 	ble.w	8021b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021800:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021802:	1423      	asrs	r3, r4, #16
 8021804:	1412      	asrs	r2, r2, #16
 8021806:	d42f      	bmi.n	8021868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021808:	1c51      	adds	r1, r2, #1
 802180a:	9807      	ldr	r0, [sp, #28]
 802180c:	4288      	cmp	r0, r1
 802180e:	dd2e      	ble.n	802186e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021810:	2b00      	cmp	r3, #0
 8021812:	db2c      	blt.n	802186e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021814:	1c59      	adds	r1, r3, #1
 8021816:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021818:	4288      	cmp	r0, r1
 802181a:	dd28      	ble.n	802186e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802181c:	9b06      	ldr	r3, [sp, #24]
 802181e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021820:	3b01      	subs	r3, #1
 8021822:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021824:	fb02 1203 	mla	r2, r2, r3, r1
 8021828:	1412      	asrs	r2, r2, #16
 802182a:	d42b      	bmi.n	8021884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802182c:	3201      	adds	r2, #1
 802182e:	9907      	ldr	r1, [sp, #28]
 8021830:	4291      	cmp	r1, r2
 8021832:	dd27      	ble.n	8021884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021834:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021836:	fb02 4303 	mla	r3, r2, r3, r4
 802183a:	141b      	asrs	r3, r3, #16
 802183c:	d422      	bmi.n	8021884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802183e:	3301      	adds	r3, #1
 8021840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021842:	429a      	cmp	r2, r3
 8021844:	dd1e      	ble.n	8021884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021848:	f8dd b018 	ldr.w	fp, [sp, #24]
 802184c:	1cdd      	adds	r5, r3, #3
 802184e:	f1bb 0f00 	cmp.w	fp, #0
 8021852:	f300 81c4 	bgt.w	8021bde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021856:	9b06      	ldr	r3, [sp, #24]
 8021858:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802185c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802185e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021862:	4423      	add	r3, r4
 8021864:	930a      	str	r3, [sp, #40]	; 0x28
 8021866:	e153      	b.n	8021b10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8021868:	1c51      	adds	r1, r2, #1
 802186a:	f040 8142 	bne.w	8021af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802186e:	9907      	ldr	r1, [sp, #28]
 8021870:	428a      	cmp	r2, r1
 8021872:	f280 813e 	bge.w	8021af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021876:	1c5a      	adds	r2, r3, #1
 8021878:	f2c0 813b 	blt.w	8021af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802187c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802187e:	4293      	cmp	r3, r2
 8021880:	f280 8137 	bge.w	8021af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021884:	9b06      	ldr	r3, [sp, #24]
 8021886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021888:	9313      	str	r3, [sp, #76]	; 0x4c
 802188a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802188c:	2b00      	cmp	r3, #0
 802188e:	dde2      	ble.n	8021856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021890:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021892:	1423      	asrs	r3, r4, #16
 8021894:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021896:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802189a:	1409      	asrs	r1, r1, #16
 802189c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80218a0:	f100 8187 	bmi.w	8021bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80218a4:	1c4e      	adds	r6, r1, #1
 80218a6:	9f07      	ldr	r7, [sp, #28]
 80218a8:	42b7      	cmp	r7, r6
 80218aa:	f340 8184 	ble.w	8021bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	f2c0 8181 	blt.w	8021bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80218b4:	1c5e      	adds	r6, r3, #1
 80218b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80218b8:	42b7      	cmp	r7, r6
 80218ba:	f340 817c 	ble.w	8021bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80218be:	9e07      	ldr	r6, [sp, #28]
 80218c0:	fb03 1306 	mla	r3, r3, r6, r1
 80218c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80218c6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80218ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80218ce:	0e1f      	lsrs	r7, r3, #24
 80218d0:	2a00      	cmp	r2, #0
 80218d2:	f000 815c 	beq.w	8021b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80218d6:	6871      	ldr	r1, [r6, #4]
 80218d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80218da:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80218de:	2800      	cmp	r0, #0
 80218e0:	f000 815e 	beq.w	8021ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80218e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80218e6:	eb06 0c01 	add.w	ip, r6, r1
 80218ea:	5876      	ldr	r6, [r6, r1]
 80218ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80218f0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80218f4:	9608      	str	r6, [sp, #32]
 80218f6:	0e0e      	lsrs	r6, r1, #24
 80218f8:	910c      	str	r1, [sp, #48]	; 0x30
 80218fa:	b292      	uxth	r2, r2
 80218fc:	b280      	uxth	r0, r0
 80218fe:	fb02 fa00 	mul.w	sl, r2, r0
 8021902:	0112      	lsls	r2, r2, #4
 8021904:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021908:	eba2 080a 	sub.w	r8, r2, sl
 802190c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021910:	b280      	uxth	r0, r0
 8021912:	fa1f f888 	uxth.w	r8, r8
 8021916:	1a09      	subs	r1, r1, r0
 8021918:	fb08 f20e 	mul.w	r2, r8, lr
 802191c:	b289      	uxth	r1, r1
 802191e:	fb01 2207 	mla	r2, r1, r7, r2
 8021922:	fb00 2209 	mla	r2, r0, r9, r2
 8021926:	fb0a 2206 	mla	r2, sl, r6, r2
 802192a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802192e:	2a00      	cmp	r2, #0
 8021930:	f000 80d4 	beq.w	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021934:	2fff      	cmp	r7, #255	; 0xff
 8021936:	d01a      	beq.n	802196e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021938:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802193c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021940:	fb07 fc0c 	mul.w	ip, r7, ip
 8021944:	435f      	muls	r7, r3
 8021946:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802194a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802194e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8021952:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021956:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802195a:	4463      	add	r3, ip
 802195c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021960:	0a1b      	lsrs	r3, r3, #8
 8021962:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021966:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802196a:	ea43 030b 	orr.w	r3, r3, fp
 802196e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021972:	d01e      	beq.n	80219b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021974:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021976:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802197a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802197e:	fb0e fb0b 	mul.w	fp, lr, fp
 8021982:	fb0e fe07 	mul.w	lr, lr, r7
 8021986:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802198a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802198e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021992:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021996:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802199a:	44dc      	add	ip, fp
 802199c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80219a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80219a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219ac:	ea4c 070e 	orr.w	r7, ip, lr
 80219b0:	970b      	str	r7, [sp, #44]	; 0x2c
 80219b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80219b6:	d01e      	beq.n	80219f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80219b8:	9f08      	ldr	r7, [sp, #32]
 80219ba:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80219be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219c2:	fb09 fe0e 	mul.w	lr, r9, lr
 80219c6:	fb09 f907 	mul.w	r9, r9, r7
 80219ca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80219ce:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80219d2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80219d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219da:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80219de:	44f4      	add	ip, lr
 80219e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219f0:	ea4c 0709 	orr.w	r7, ip, r9
 80219f4:	9708      	str	r7, [sp, #32]
 80219f6:	2eff      	cmp	r6, #255	; 0xff
 80219f8:	d01c      	beq.n	8021a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80219fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80219fc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021a00:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a04:	fb06 fe0e 	mul.w	lr, r6, lr
 8021a08:	437e      	muls	r6, r7
 8021a0a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021a0e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021a12:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021a16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a1a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021a1e:	44f4      	add	ip, lr
 8021a20:	0a36      	lsrs	r6, r6, #8
 8021a22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a2e:	ea4c 0606 	orr.w	r6, ip, r6
 8021a32:	960c      	str	r6, [sp, #48]	; 0x30
 8021a34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021a36:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021a3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a3e:	2aff      	cmp	r2, #255	; 0xff
 8021a40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a44:	fb08 f606 	mul.w	r6, r8, r6
 8021a48:	fb01 6607 	mla	r6, r1, r7, r6
 8021a4c:	9f08      	ldr	r7, [sp, #32]
 8021a4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a52:	fb00 6607 	mla	r6, r0, r7, r6
 8021a56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021a58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a5c:	fb0a 6607 	mla	r6, sl, r7, r6
 8021a60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021a62:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a66:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8021a6a:	fb08 f807 	mul.w	r8, r8, r7
 8021a6e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a72:	fb01 8303 	mla	r3, r1, r3, r8
 8021a76:	9908      	ldr	r1, [sp, #32]
 8021a78:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a7e:	fb00 330c 	mla	r3, r0, ip, r3
 8021a82:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021a86:	fb0a 3a00 	mla	sl, sl, r0, r3
 8021a8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a92:	ea46 060a 	orr.w	r6, r6, sl
 8021a96:	b2f0      	uxtb	r0, r6
 8021a98:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021a9c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021aa0:	f000 8084 	beq.w	8021bac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021aa4:	43d2      	mvns	r2, r2
 8021aa6:	782b      	ldrb	r3, [r5, #0]
 8021aa8:	b2d2      	uxtb	r2, r2
 8021aaa:	fb03 f702 	mul.w	r7, r3, r2
 8021aae:	1c7b      	adds	r3, r7, #1
 8021ab0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021ab4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021ab8:	702b      	strb	r3, [r5, #0]
 8021aba:	786b      	ldrb	r3, [r5, #1]
 8021abc:	fb03 f002 	mul.w	r0, r3, r2
 8021ac0:	1c43      	adds	r3, r0, #1
 8021ac2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021ac6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021aca:	706b      	strb	r3, [r5, #1]
 8021acc:	78ab      	ldrb	r3, [r5, #2]
 8021ace:	4353      	muls	r3, r2
 8021ad0:	1c5a      	adds	r2, r3, #1
 8021ad2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021ad6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021ada:	70ae      	strb	r6, [r5, #2]
 8021adc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021ade:	3503      	adds	r5, #3
 8021ae0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021ae2:	4413      	add	r3, r2
 8021ae4:	9329      	str	r3, [sp, #164]	; 0xa4
 8021ae6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ae8:	441c      	add	r4, r3
 8021aea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021aec:	3b01      	subs	r3, #1
 8021aee:	9313      	str	r3, [sp, #76]	; 0x4c
 8021af0:	e6cb      	b.n	802188a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021af2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021af4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021af6:	4413      	add	r3, r2
 8021af8:	9329      	str	r3, [sp, #164]	; 0xa4
 8021afa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021afc:	441c      	add	r4, r3
 8021afe:	9b06      	ldr	r3, [sp, #24]
 8021b00:	3b01      	subs	r3, #1
 8021b02:	9306      	str	r3, [sp, #24]
 8021b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b06:	3303      	adds	r3, #3
 8021b08:	930a      	str	r3, [sp, #40]	; 0x28
 8021b0a:	e675      	b.n	80217f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021b0c:	f47f ae86 	bne.w	802181c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8021b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	f340 819e 	ble.w	8021e54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b26:	eef0 6a48 	vmov.f32	s13, s16
 8021b2a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b36:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021b3a:	eef0 6a68 	vmov.f32	s13, s17
 8021b3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b42:	ee16 4a90 	vmov	r4, s13
 8021b46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b5e:	ee18 2a10 	vmov	r2, s16
 8021b62:	eeb0 8a47 	vmov.f32	s16, s14
 8021b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b6a:	ee18 2a90 	vmov	r2, s17
 8021b6e:	932b      	str	r3, [sp, #172]	; 0xac
 8021b70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b72:	eef0 8a67 	vmov.f32	s17, s15
 8021b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b7a:	932c      	str	r3, [sp, #176]	; 0xb0
 8021b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b80:	3b01      	subs	r3, #1
 8021b82:	9312      	str	r3, [sp, #72]	; 0x48
 8021b84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b86:	bf08      	it	eq
 8021b88:	4613      	moveq	r3, r2
 8021b8a:	9306      	str	r3, [sp, #24]
 8021b8c:	e62d      	b.n	80217ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8021b8e:	b150      	cbz	r0, 8021ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8021b90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021b92:	5871      	ldr	r1, [r6, r1]
 8021b94:	26ff      	movs	r6, #255	; 0xff
 8021b96:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021b9a:	9108      	str	r1, [sp, #32]
 8021b9c:	46b6      	mov	lr, r6
 8021b9e:	e6ac      	b.n	80218fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8021ba0:	26ff      	movs	r6, #255	; 0xff
 8021ba2:	46b1      	mov	r9, r6
 8021ba4:	e6a9      	b.n	80218fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8021ba6:	26ff      	movs	r6, #255	; 0xff
 8021ba8:	46b1      	mov	r9, r6
 8021baa:	e7f7      	b.n	8021b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021bac:	7028      	strb	r0, [r5, #0]
 8021bae:	7069      	strb	r1, [r5, #1]
 8021bb0:	e793      	b.n	8021ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8021bb2:	1c4f      	adds	r7, r1, #1
 8021bb4:	d192      	bne.n	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bb6:	9e07      	ldr	r6, [sp, #28]
 8021bb8:	428e      	cmp	r6, r1
 8021bba:	dd8f      	ble.n	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bbc:	1c5e      	adds	r6, r3, #1
 8021bbe:	db8d      	blt.n	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bc0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021bc2:	429e      	cmp	r6, r3
 8021bc4:	dd8a      	ble.n	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bc6:	9600      	str	r6, [sp, #0]
 8021bc8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8021bcc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8021bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021bd2:	4629      	mov	r1, r5
 8021bd4:	9b07      	ldr	r3, [sp, #28]
 8021bd6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021bd8:	f7ff fc8e 	bl	80214f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021bdc:	e77e      	b.n	8021adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021bde:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021be0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021be4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021be6:	9e07      	ldr	r6, [sp, #28]
 8021be8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021bec:	1409      	asrs	r1, r1, #16
 8021bee:	1423      	asrs	r3, r4, #16
 8021bf0:	fb06 1303 	mla	r3, r6, r3, r1
 8021bf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021bf6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021bfe:	0e1f      	lsrs	r7, r3, #24
 8021c00:	2a00      	cmp	r2, #0
 8021c02:	f000 8113 	beq.w	8021e2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8021c06:	6871      	ldr	r1, [r6, #4]
 8021c08:	910d      	str	r1, [sp, #52]	; 0x34
 8021c0a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021c0e:	2800      	cmp	r0, #0
 8021c10:	f000 8115 	beq.w	8021e3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021c14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021c16:	eb06 0c01 	add.w	ip, r6, r1
 8021c1a:	5876      	ldr	r6, [r6, r1]
 8021c1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021c20:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021c24:	9609      	str	r6, [sp, #36]	; 0x24
 8021c26:	0e0e      	lsrs	r6, r1, #24
 8021c28:	910f      	str	r1, [sp, #60]	; 0x3c
 8021c2a:	b292      	uxth	r2, r2
 8021c2c:	b280      	uxth	r0, r0
 8021c2e:	fb02 fa00 	mul.w	sl, r2, r0
 8021c32:	0112      	lsls	r2, r2, #4
 8021c34:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021c38:	eba2 080a 	sub.w	r8, r2, sl
 8021c3c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021c40:	b280      	uxth	r0, r0
 8021c42:	fa1f f888 	uxth.w	r8, r8
 8021c46:	1a09      	subs	r1, r1, r0
 8021c48:	fb08 f20e 	mul.w	r2, r8, lr
 8021c4c:	b289      	uxth	r1, r1
 8021c4e:	fb01 2207 	mla	r2, r1, r7, r2
 8021c52:	fb00 2209 	mla	r2, r0, r9, r2
 8021c56:	fb0a 2206 	mla	r2, sl, r6, r2
 8021c5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c5e:	2a00      	cmp	r2, #0
 8021c60:	f000 80da 	beq.w	8021e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8021c64:	2fff      	cmp	r7, #255	; 0xff
 8021c66:	d01a      	beq.n	8021c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8021c68:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021c6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c70:	fb07 fc0c 	mul.w	ip, r7, ip
 8021c74:	435f      	muls	r7, r3
 8021c76:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021c7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021c7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c82:	4463      	add	r3, ip
 8021c84:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8021c88:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8021c8c:	0a1b      	lsrs	r3, r3, #8
 8021c8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021c9a:	ea43 030c 	orr.w	r3, r3, ip
 8021c9e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021ca2:	d021      	beq.n	8021ce8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8021ca4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021ca6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021caa:	fb0e f707 	mul.w	r7, lr, r7
 8021cae:	9713      	str	r7, [sp, #76]	; 0x4c
 8021cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021cb2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021cb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021cb8:	fb0e fe0c 	mul.w	lr, lr, ip
 8021cbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021cc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021cc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cc8:	44bc      	add	ip, r7
 8021cca:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021cce:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021cd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cde:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021ce2:	ea4c 070e 	orr.w	r7, ip, lr
 8021ce6:	970d      	str	r7, [sp, #52]	; 0x34
 8021ce8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cec:	d01e      	beq.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8021cee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021cf0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021cf4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021cf8:	fb09 fe0e 	mul.w	lr, r9, lr
 8021cfc:	fb09 f907 	mul.w	r9, r9, r7
 8021d00:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021d04:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021d08:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d10:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021d14:	44f4      	add	ip, lr
 8021d16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d1e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021d22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d26:	ea4c 0709 	orr.w	r7, ip, r9
 8021d2a:	9709      	str	r7, [sp, #36]	; 0x24
 8021d2c:	2eff      	cmp	r6, #255	; 0xff
 8021d2e:	d01c      	beq.n	8021d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8021d30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d32:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021d36:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021d3a:	fb06 fe0e 	mul.w	lr, r6, lr
 8021d3e:	437e      	muls	r6, r7
 8021d40:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021d44:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021d48:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021d4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d50:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021d54:	44f4      	add	ip, lr
 8021d56:	0a36      	lsrs	r6, r6, #8
 8021d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d64:	ea4c 0606 	orr.w	r6, ip, r6
 8021d68:	960f      	str	r6, [sp, #60]	; 0x3c
 8021d6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021d6c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d74:	2aff      	cmp	r2, #255	; 0xff
 8021d76:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d7a:	fb08 f606 	mul.w	r6, r8, r6
 8021d7e:	fb01 6607 	mla	r6, r1, r7, r6
 8021d82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021d84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d88:	fb00 6607 	mla	r6, r0, r7, r6
 8021d8c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d8e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d92:	fb0a 6607 	mla	r6, sl, r7, r6
 8021d96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021d98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021d9c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8021da0:	fb08 f807 	mul.w	r8, r8, r7
 8021da4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021da8:	fb01 8303 	mla	r3, r1, r3, r8
 8021dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021dae:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021db4:	fb00 330c 	mla	r3, r0, ip, r3
 8021db8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8021dbc:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8021dc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021dc4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021dc8:	ea46 060e 	orr.w	r6, r6, lr
 8021dcc:	b2f0      	uxtb	r0, r6
 8021dce:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021dd2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021dd6:	d038      	beq.n	8021e4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8021dd8:	43d2      	mvns	r2, r2
 8021dda:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8021dde:	b2d2      	uxtb	r2, r2
 8021de0:	4357      	muls	r7, r2
 8021de2:	1c7b      	adds	r3, r7, #1
 8021de4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021de8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021dec:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8021df0:	4350      	muls	r0, r2
 8021df2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8021df6:	1c43      	adds	r3, r0, #1
 8021df8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021dfc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021e04:	4353      	muls	r3, r2
 8021e06:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021e0a:	1c5a      	adds	r2, r3, #1
 8021e0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021e10:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021e14:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021e18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021e1a:	3503      	adds	r5, #3
 8021e1c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e22:	4413      	add	r3, r2
 8021e24:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e28:	441c      	add	r4, r3
 8021e2a:	e510      	b.n	802184e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8021e2c:	b150      	cbz	r0, 8021e44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8021e2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021e30:	5871      	ldr	r1, [r6, r1]
 8021e32:	26ff      	movs	r6, #255	; 0xff
 8021e34:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021e38:	9109      	str	r1, [sp, #36]	; 0x24
 8021e3a:	46b6      	mov	lr, r6
 8021e3c:	e6f5      	b.n	8021c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021e3e:	26ff      	movs	r6, #255	; 0xff
 8021e40:	46b1      	mov	r9, r6
 8021e42:	e6f2      	b.n	8021c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021e44:	26ff      	movs	r6, #255	; 0xff
 8021e46:	46b1      	mov	r9, r6
 8021e48:	e7f7      	b.n	8021e3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8021e4a:	f805 0c03 	strb.w	r0, [r5, #-3]
 8021e4e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021e52:	e7df      	b.n	8021e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8021e54:	b017      	add	sp, #92	; 0x5c
 8021e56:	ecbd 8b08 	vpop	{d8-d11}
 8021e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021e60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e64:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8021e68:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021e6c:	2800      	cmp	r0, #0
 8021e6e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021e72:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021e76:	fb0c 0e03 	mla	lr, ip, r3, r0
 8021e7a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021e7e:	db6b      	blt.n	8021f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e80:	4580      	cmp	r8, r0
 8021e82:	dd69      	ble.n	8021f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e84:	f1bc 0f00 	cmp.w	ip, #0
 8021e88:	db66      	blt.n	8021f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e8a:	45e1      	cmp	r9, ip
 8021e8c:	dd64      	ble.n	8021f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8021e8e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021e92:	f01e 0f01 	tst.w	lr, #1
 8021e96:	5d16      	ldrb	r6, [r2, r4]
 8021e98:	bf0c      	ite	eq
 8021e9a:	f006 060f 	andeq.w	r6, r6, #15
 8021e9e:	1136      	asrne	r6, r6, #4
 8021ea0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021ea4:	b2f6      	uxtb	r6, r6
 8021ea6:	f110 0a01 	adds.w	sl, r0, #1
 8021eaa:	d457      	bmi.n	8021f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021eac:	45d0      	cmp	r8, sl
 8021eae:	dd55      	ble.n	8021f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021eb0:	f1bc 0f00 	cmp.w	ip, #0
 8021eb4:	db52      	blt.n	8021f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021eb6:	45e1      	cmp	r9, ip
 8021eb8:	dd50      	ble.n	8021f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021eba:	2f00      	cmp	r7, #0
 8021ebc:	f000 80ac 	beq.w	8022018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8021ec0:	f10e 0b01 	add.w	fp, lr, #1
 8021ec4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021ec8:	f01b 0f01 	tst.w	fp, #1
 8021ecc:	5d14      	ldrb	r4, [r2, r4]
 8021ece:	bf0c      	ite	eq
 8021ed0:	f004 040f 	andeq.w	r4, r4, #15
 8021ed4:	1124      	asrne	r4, r4, #4
 8021ed6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021eda:	b2e4      	uxtb	r4, r4
 8021edc:	2d00      	cmp	r5, #0
 8021ede:	f000 8096 	beq.w	802200e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8021ee2:	2800      	cmp	r0, #0
 8021ee4:	f10c 0c01 	add.w	ip, ip, #1
 8021ee8:	db3c      	blt.n	8021f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021eea:	4580      	cmp	r8, r0
 8021eec:	dd3a      	ble.n	8021f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021eee:	f1bc 0f00 	cmp.w	ip, #0
 8021ef2:	db37      	blt.n	8021f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021ef4:	45e1      	cmp	r9, ip
 8021ef6:	dd35      	ble.n	8021f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021ef8:	eb03 0b0e 	add.w	fp, r3, lr
 8021efc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8021f00:	f01b 0f01 	tst.w	fp, #1
 8021f04:	5c10      	ldrb	r0, [r2, r0]
 8021f06:	bf0c      	ite	eq
 8021f08:	f000 000f 	andeq.w	r0, r0, #15
 8021f0c:	1100      	asrne	r0, r0, #4
 8021f0e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021f12:	b2c0      	uxtb	r0, r0
 8021f14:	f1ba 0f00 	cmp.w	sl, #0
 8021f18:	db26      	blt.n	8021f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f1a:	45d0      	cmp	r8, sl
 8021f1c:	dd24      	ble.n	8021f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f1e:	f1bc 0f00 	cmp.w	ip, #0
 8021f22:	db21      	blt.n	8021f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f24:	45e1      	cmp	r9, ip
 8021f26:	dd1f      	ble.n	8021f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021f28:	b307      	cbz	r7, 8021f6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8021f2a:	3301      	adds	r3, #1
 8021f2c:	449e      	add	lr, r3
 8021f2e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021f32:	f01e 0f01 	tst.w	lr, #1
 8021f36:	5cd3      	ldrb	r3, [r2, r3]
 8021f38:	bf0c      	ite	eq
 8021f3a:	f003 030f 	andeq.w	r3, r3, #15
 8021f3e:	111b      	asrne	r3, r3, #4
 8021f40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021f44:	b2db      	uxtb	r3, r3
 8021f46:	2f0f      	cmp	r7, #15
 8021f48:	d911      	bls.n	8021f6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8021f4a:	4b35      	ldr	r3, [pc, #212]	; (8022020 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8021f4c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021f50:	4a34      	ldr	r2, [pc, #208]	; (8022024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8021f52:	4835      	ldr	r0, [pc, #212]	; (8022028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8021f54:	f002 fb5a 	bl	802460c <__assert_func>
 8021f58:	2600      	movs	r6, #0
 8021f5a:	e7a4      	b.n	8021ea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8021f5c:	2400      	movs	r4, #0
 8021f5e:	e7bd      	b.n	8021edc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8021f60:	463c      	mov	r4, r7
 8021f62:	e7be      	b.n	8021ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8021f64:	2000      	movs	r0, #0
 8021f66:	e7d5      	b.n	8021f14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8021f68:	2300      	movs	r3, #0
 8021f6a:	e7ec      	b.n	8021f46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8021f6c:	463b      	mov	r3, r7
 8021f6e:	2d0f      	cmp	r5, #15
 8021f70:	d8eb      	bhi.n	8021f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8021f72:	b2bf      	uxth	r7, r7
 8021f74:	b2ad      	uxth	r5, r5
 8021f76:	fb07 f205 	mul.w	r2, r7, r5
 8021f7a:	013f      	lsls	r7, r7, #4
 8021f7c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021f80:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8021f84:	1abf      	subs	r7, r7, r2
 8021f86:	b2ad      	uxth	r5, r5
 8021f88:	b2bf      	uxth	r7, r7
 8021f8a:	ebac 0c05 	sub.w	ip, ip, r5
 8021f8e:	437c      	muls	r4, r7
 8021f90:	fa1f fc8c 	uxth.w	ip, ip
 8021f94:	fb06 440c 	mla	r4, r6, ip, r4
 8021f98:	fb05 4400 	mla	r4, r5, r0, r4
 8021f9c:	fb02 4203 	mla	r2, r2, r3, r4
 8021fa0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021fa4:	b38a      	cbz	r2, 802200a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8021fa6:	4b21      	ldr	r3, [pc, #132]	; (802202c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8021fa8:	681c      	ldr	r4, [r3, #0]
 8021faa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8021fae:	b2e5      	uxtb	r5, r4
 8021fb0:	4353      	muls	r3, r2
 8021fb2:	1c5a      	adds	r2, r3, #1
 8021fb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021fb8:	1212      	asrs	r2, r2, #8
 8021fba:	b290      	uxth	r0, r2
 8021fbc:	43d2      	mvns	r2, r2
 8021fbe:	fb15 f500 	smulbb	r5, r5, r0
 8021fc2:	b2d3      	uxtb	r3, r2
 8021fc4:	780a      	ldrb	r2, [r1, #0]
 8021fc6:	fb02 5203 	mla	r2, r2, r3, r5
 8021fca:	b292      	uxth	r2, r2
 8021fcc:	1c55      	adds	r5, r2, #1
 8021fce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021fd2:	784d      	ldrb	r5, [r1, #1]
 8021fd4:	fb15 f503 	smulbb	r5, r5, r3
 8021fd8:	1212      	asrs	r2, r2, #8
 8021fda:	700a      	strb	r2, [r1, #0]
 8021fdc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021fe0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021fe4:	fb02 5200 	mla	r2, r2, r0, r5
 8021fe8:	b292      	uxth	r2, r2
 8021fea:	1c55      	adds	r5, r2, #1
 8021fec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021ff0:	1212      	asrs	r2, r2, #8
 8021ff2:	704a      	strb	r2, [r1, #1]
 8021ff4:	788a      	ldrb	r2, [r1, #2]
 8021ff6:	fb12 f303 	smulbb	r3, r2, r3
 8021ffa:	fb04 3300 	mla	r3, r4, r0, r3
 8021ffe:	b29b      	uxth	r3, r3
 8022000:	1c5a      	adds	r2, r3, #1
 8022002:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022006:	121b      	asrs	r3, r3, #8
 8022008:	708b      	strb	r3, [r1, #2]
 802200a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802200e:	2f0f      	cmp	r7, #15
 8022010:	d89b      	bhi.n	8021f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022012:	462b      	mov	r3, r5
 8022014:	4628      	mov	r0, r5
 8022016:	e7ac      	b.n	8021f72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022018:	2d00      	cmp	r5, #0
 802201a:	d1a1      	bne.n	8021f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802201c:	462c      	mov	r4, r5
 802201e:	e7f8      	b.n	8022012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022020:	08028fc7 	.word	0x08028fc7
 8022024:	080294be 	.word	0x080294be
 8022028:	08029090 	.word	0x08029090
 802202c:	2000bc98 	.word	0x2000bc98

08022030 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022034:	ed2d 8b08 	vpush	{d8-d11}
 8022038:	b097      	sub	sp, #92	; 0x5c
 802203a:	eeb0 aa40 	vmov.f32	s20, s0
 802203e:	eef0 9a60 	vmov.f32	s19, s1
 8022042:	9308      	str	r3, [sp, #32]
 8022044:	eeb0 9a41 	vmov.f32	s18, s2
 8022048:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802204c:	eeb0 8a62 	vmov.f32	s16, s5
 8022050:	9214      	str	r2, [sp, #80]	; 0x50
 8022052:	eef0 8a43 	vmov.f32	s17, s6
 8022056:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022058:	eef0 ba44 	vmov.f32	s23, s8
 802205c:	9309      	str	r3, [sp, #36]	; 0x24
 802205e:	eeb0 ba64 	vmov.f32	s22, s9
 8022062:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022066:	eef0 aa45 	vmov.f32	s21, s10
 802206a:	9015      	str	r0, [sp, #84]	; 0x54
 802206c:	910c      	str	r1, [sp, #48]	; 0x30
 802206e:	930e      	str	r3, [sp, #56]	; 0x38
 8022070:	6850      	ldr	r0, [r2, #4]
 8022072:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022076:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802207a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802207e:	fb00 1803 	mla	r8, r0, r3, r1
 8022082:	6813      	ldr	r3, [r2, #0]
 8022084:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022088:	4498      	add	r8, r3
 802208a:	f10b 0301 	add.w	r3, fp, #1
 802208e:	f023 0301 	bic.w	r3, r3, #1
 8022092:	930f      	str	r3, [sp, #60]	; 0x3c
 8022094:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022096:	681f      	ldr	r7, [r3, #0]
 8022098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802209a:	2b00      	cmp	r3, #0
 802209c:	dc03      	bgt.n	80220a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802209e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	f340 8238 	ble.w	8022516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80220a6:	9b08      	ldr	r3, [sp, #32]
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	f340 810c 	ble.w	80222c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80220ae:	142a      	asrs	r2, r5, #16
 80220b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80220b4:	d42c      	bmi.n	8022110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80220b6:	1c51      	adds	r1, r2, #1
 80220b8:	458b      	cmp	fp, r1
 80220ba:	dd2c      	ble.n	8022116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220bc:	2b00      	cmp	r3, #0
 80220be:	db2a      	blt.n	8022116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220c0:	1c59      	adds	r1, r3, #1
 80220c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220c4:	4288      	cmp	r0, r1
 80220c6:	dd26      	ble.n	8022116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220c8:	9b08      	ldr	r3, [sp, #32]
 80220ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220cc:	3b01      	subs	r3, #1
 80220ce:	fb02 5203 	mla	r2, r2, r3, r5
 80220d2:	1412      	asrs	r2, r2, #16
 80220d4:	d429      	bmi.n	802212a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220d6:	3201      	adds	r2, #1
 80220d8:	4593      	cmp	fp, r2
 80220da:	dd26      	ble.n	802212a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220dc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80220de:	fb02 6303 	mla	r3, r2, r3, r6
 80220e2:	141b      	asrs	r3, r3, #16
 80220e4:	d421      	bmi.n	802212a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220e6:	3301      	adds	r3, #1
 80220e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220ea:	429a      	cmp	r2, r3
 80220ec:	dd1d      	ble.n	802212a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80220ee:	f108 0e03 	add.w	lr, r8, #3
 80220f2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80220f6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80220fa:	f1b9 0f00 	cmp.w	r9, #0
 80220fe:	f300 814f 	bgt.w	80223a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8022102:	9b08      	ldr	r3, [sp, #32]
 8022104:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022108:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802210c:	44a0      	add	r8, r4
 802210e:	e0dc      	b.n	80222ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8022110:	1c51      	adds	r1, r2, #1
 8022112:	f040 80ce 	bne.w	80222b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022116:	4593      	cmp	fp, r2
 8022118:	f340 80cb 	ble.w	80222b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802211c:	1c5a      	adds	r2, r3, #1
 802211e:	f2c0 80c8 	blt.w	80222b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022124:	4293      	cmp	r3, r2
 8022126:	f280 80c4 	bge.w	80222b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802212a:	9b08      	ldr	r3, [sp, #32]
 802212c:	46c1      	mov	r9, r8
 802212e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022132:	930d      	str	r3, [sp, #52]	; 0x34
 8022134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022136:	2b00      	cmp	r3, #0
 8022138:	dde3      	ble.n	8022102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802213a:	1428      	asrs	r0, r5, #16
 802213c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022140:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022144:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022148:	f100 8111 	bmi.w	802236e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802214c:	f100 0c01 	add.w	ip, r0, #1
 8022150:	45e3      	cmp	fp, ip
 8022152:	f340 810e 	ble.w	8022372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022156:	2b00      	cmp	r3, #0
 8022158:	f2c0 810b 	blt.w	8022372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802215c:	f103 0c01 	add.w	ip, r3, #1
 8022160:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022162:	4564      	cmp	r4, ip
 8022164:	f340 8105 	ble.w	8022372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022168:	fb03 030a 	mla	r3, r3, sl, r0
 802216c:	0858      	lsrs	r0, r3, #1
 802216e:	07dc      	lsls	r4, r3, #31
 8022170:	5c38      	ldrb	r0, [r7, r0]
 8022172:	bf54      	ite	pl
 8022174:	f000 000f 	andpl.w	r0, r0, #15
 8022178:	1100      	asrmi	r0, r0, #4
 802217a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802217e:	b2c0      	uxtb	r0, r0
 8022180:	2a00      	cmp	r2, #0
 8022182:	f000 80e1 	beq.w	8022348 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8022186:	f103 0e01 	add.w	lr, r3, #1
 802218a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802218e:	f01e 0f01 	tst.w	lr, #1
 8022192:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022196:	bf0c      	ite	eq
 8022198:	f00c 0c0f 	andeq.w	ip, ip, #15
 802219c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80221a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80221a4:	fa5f f48c 	uxtb.w	r4, ip
 80221a8:	9410      	str	r4, [sp, #64]	; 0x40
 80221aa:	b1f9      	cbz	r1, 80221ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80221ac:	4453      	add	r3, sl
 80221ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80221b2:	07dc      	lsls	r4, r3, #31
 80221b4:	f103 0301 	add.w	r3, r3, #1
 80221b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80221bc:	bf54      	ite	pl
 80221be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80221c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80221c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80221ca:	fa5f f48c 	uxtb.w	r4, ip
 80221ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80221d2:	940a      	str	r4, [sp, #40]	; 0x28
 80221d4:	07dc      	lsls	r4, r3, #31
 80221d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80221da:	bf54      	ite	pl
 80221dc:	f00c 030f 	andpl.w	r3, ip, #15
 80221e0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80221e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80221e8:	b2db      	uxtb	r3, r3
 80221ea:	9311      	str	r3, [sp, #68]	; 0x44
 80221ec:	b292      	uxth	r2, r2
 80221ee:	b289      	uxth	r1, r1
 80221f0:	0113      	lsls	r3, r2, #4
 80221f2:	fb02 fc01 	mul.w	ip, r2, r1
 80221f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221f8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80221fc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8022200:	eba3 030c 	sub.w	r3, r3, ip
 8022204:	b289      	uxth	r1, r1
 8022206:	b29b      	uxth	r3, r3
 8022208:	ebae 0e01 	sub.w	lr, lr, r1
 802220c:	4353      	muls	r3, r2
 802220e:	fa1f fe8e 	uxth.w	lr, lr
 8022212:	fb00 320e 	mla	r2, r0, lr, r3
 8022216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022218:	fb01 2203 	mla	r2, r1, r3, r2
 802221c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802221e:	fb0c 2203 	mla	r2, ip, r3, r2
 8022222:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022226:	2a00      	cmp	r2, #0
 8022228:	d039      	beq.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802222a:	4bbd      	ldr	r3, [pc, #756]	; (8022520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802222c:	6819      	ldr	r1, [r3, #0]
 802222e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022230:	fa5f fc81 	uxtb.w	ip, r1
 8022234:	435a      	muls	r2, r3
 8022236:	1c53      	adds	r3, r2, #1
 8022238:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802223c:	1212      	asrs	r2, r2, #8
 802223e:	b290      	uxth	r0, r2
 8022240:	43d2      	mvns	r2, r2
 8022242:	fb1c fc00 	smulbb	ip, ip, r0
 8022246:	b2d3      	uxtb	r3, r2
 8022248:	f899 2000 	ldrb.w	r2, [r9]
 802224c:	fb02 c203 	mla	r2, r2, r3, ip
 8022250:	b292      	uxth	r2, r2
 8022252:	f102 0c01 	add.w	ip, r2, #1
 8022256:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802225a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802225e:	fb1c fc03 	smulbb	ip, ip, r3
 8022262:	1212      	asrs	r2, r2, #8
 8022264:	f889 2000 	strb.w	r2, [r9]
 8022268:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802226c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022270:	fb02 c200 	mla	r2, r2, r0, ip
 8022274:	b292      	uxth	r2, r2
 8022276:	f102 0c01 	add.w	ip, r2, #1
 802227a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802227e:	1212      	asrs	r2, r2, #8
 8022280:	f889 2001 	strb.w	r2, [r9, #1]
 8022284:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022288:	fb12 f303 	smulbb	r3, r2, r3
 802228c:	fb01 3300 	mla	r3, r1, r0, r3
 8022290:	b29b      	uxth	r3, r3
 8022292:	1c5a      	adds	r2, r3, #1
 8022294:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022298:	121b      	asrs	r3, r3, #8
 802229a:	f889 3002 	strb.w	r3, [r9, #2]
 802229e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80222a0:	f109 0903 	add.w	r9, r9, #3
 80222a4:	441d      	add	r5, r3
 80222a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222a8:	441e      	add	r6, r3
 80222aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222ac:	3b01      	subs	r3, #1
 80222ae:	930d      	str	r3, [sp, #52]	; 0x34
 80222b0:	e740      	b.n	8022134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80222b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80222b4:	f108 0803 	add.w	r8, r8, #3
 80222b8:	441d      	add	r5, r3
 80222ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222bc:	441e      	add	r6, r3
 80222be:	9b08      	ldr	r3, [sp, #32]
 80222c0:	3b01      	subs	r3, #1
 80222c2:	9308      	str	r3, [sp, #32]
 80222c4:	e6ef      	b.n	80220a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80222c6:	f47f aeff 	bne.w	80220c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80222ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	f340 8122 	ble.w	8022516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80222d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80222dc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80222e0:	eef0 6a48 	vmov.f32	s13, s16
 80222e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80222e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80222ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222f0:	ee16 5a90 	vmov	r5, s13
 80222f4:	eef0 6a68 	vmov.f32	s13, s17
 80222f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222fc:	ee16 6a90 	vmov	r6, s13
 8022300:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022304:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022308:	ee37 8a48 	vsub.f32	s16, s14, s16
 802230c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022310:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022314:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022318:	ee18 2a10 	vmov	r2, s16
 802231c:	eeb0 8a47 	vmov.f32	s16, s14
 8022320:	fb92 f3f3 	sdiv	r3, r2, r3
 8022324:	ee18 2a90 	vmov	r2, s17
 8022328:	932b      	str	r3, [sp, #172]	; 0xac
 802232a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802232c:	eef0 8a67 	vmov.f32	s17, s15
 8022330:	fb92 f3f3 	sdiv	r3, r2, r3
 8022334:	932c      	str	r3, [sp, #176]	; 0xb0
 8022336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802233a:	3b01      	subs	r3, #1
 802233c:	930c      	str	r3, [sp, #48]	; 0x30
 802233e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022340:	bf08      	it	eq
 8022342:	4613      	moveq	r3, r2
 8022344:	9308      	str	r3, [sp, #32]
 8022346:	e6a7      	b.n	8022098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022348:	2900      	cmp	r1, #0
 802234a:	f43f af4f 	beq.w	80221ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802234e:	4453      	add	r3, sl
 8022350:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022354:	07db      	lsls	r3, r3, #31
 8022356:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802235a:	bf54      	ite	pl
 802235c:	f00c 030f 	andpl.w	r3, ip, #15
 8022360:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022364:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022368:	b2db      	uxtb	r3, r3
 802236a:	930a      	str	r3, [sp, #40]	; 0x28
 802236c:	e73e      	b.n	80221ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802236e:	1c44      	adds	r4, r0, #1
 8022370:	d195      	bne.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022372:	4583      	cmp	fp, r0
 8022374:	dd93      	ble.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022376:	1c5c      	adds	r4, r3, #1
 8022378:	db91      	blt.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802237a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802237c:	429c      	cmp	r4, r3
 802237e:	dd8e      	ble.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022380:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022382:	9002      	str	r0, [sp, #8]
 8022384:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022386:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802238a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802238c:	463a      	mov	r2, r7
 802238e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022392:	e9cd b300 	strd	fp, r3, [sp]
 8022396:	4649      	mov	r1, r9
 8022398:	4653      	mov	r3, sl
 802239a:	f7ff fd61 	bl	8021e60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802239e:	e77e      	b.n	802229e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80223a0:	142a      	asrs	r2, r5, #16
 80223a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80223a6:	1433      	asrs	r3, r6, #16
 80223a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80223ac:	fb0a 2303 	mla	r3, sl, r3, r2
 80223b0:	085a      	lsrs	r2, r3, #1
 80223b2:	07dc      	lsls	r4, r3, #31
 80223b4:	5cba      	ldrb	r2, [r7, r2]
 80223b6:	bf54      	ite	pl
 80223b8:	f002 020f 	andpl.w	r2, r2, #15
 80223bc:	1112      	asrmi	r2, r2, #4
 80223be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80223c2:	b2d2      	uxtb	r2, r2
 80223c4:	2900      	cmp	r1, #0
 80223c6:	f000 8093 	beq.w	80224f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80223ca:	1c5c      	adds	r4, r3, #1
 80223cc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80223d0:	07e4      	lsls	r4, r4, #31
 80223d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223d6:	bf54      	ite	pl
 80223d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80223dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80223e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223e4:	fa5f f48c 	uxtb.w	r4, ip
 80223e8:	9412      	str	r4, [sp, #72]	; 0x48
 80223ea:	b300      	cbz	r0, 802242e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80223ec:	4453      	add	r3, sl
 80223ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80223f2:	07dc      	lsls	r4, r3, #31
 80223f4:	f103 0301 	add.w	r3, r3, #1
 80223f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223fc:	bf54      	ite	pl
 80223fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022402:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022406:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802240a:	fa5f f48c 	uxtb.w	r4, ip
 802240e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022412:	940b      	str	r4, [sp, #44]	; 0x2c
 8022414:	07dc      	lsls	r4, r3, #31
 8022416:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802241a:	bf54      	ite	pl
 802241c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022420:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022424:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022428:	fa5f f38c 	uxtb.w	r3, ip
 802242c:	9313      	str	r3, [sp, #76]	; 0x4c
 802242e:	b289      	uxth	r1, r1
 8022430:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022432:	b280      	uxth	r0, r0
 8022434:	fb01 f300 	mul.w	r3, r1, r0
 8022438:	0109      	lsls	r1, r1, #4
 802243a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802243e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022442:	1ac9      	subs	r1, r1, r3
 8022444:	b280      	uxth	r0, r0
 8022446:	b289      	uxth	r1, r1
 8022448:	ebac 0c00 	sub.w	ip, ip, r0
 802244c:	4361      	muls	r1, r4
 802244e:	fa1f fc8c 	uxth.w	ip, ip
 8022452:	fb02 120c 	mla	r2, r2, ip, r1
 8022456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022458:	fb00 2001 	mla	r0, r0, r1, r2
 802245c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802245e:	fb03 0302 	mla	r3, r3, r2, r0
 8022462:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022466:	2b00      	cmp	r3, #0
 8022468:	d039      	beq.n	80224de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802246a:	4a2d      	ldr	r2, [pc, #180]	; (8022520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802246c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022470:	6810      	ldr	r0, [r2, #0]
 8022472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022474:	fa5f fc80 	uxtb.w	ip, r0
 8022478:	4353      	muls	r3, r2
 802247a:	1c5a      	adds	r2, r3, #1
 802247c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022480:	121b      	asrs	r3, r3, #8
 8022482:	b29a      	uxth	r2, r3
 8022484:	43db      	mvns	r3, r3
 8022486:	fb1c fc02 	smulbb	ip, ip, r2
 802248a:	b2db      	uxtb	r3, r3
 802248c:	fb01 c103 	mla	r1, r1, r3, ip
 8022490:	b289      	uxth	r1, r1
 8022492:	f101 0c01 	add.w	ip, r1, #1
 8022496:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802249a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802249e:	fb1c fc03 	smulbb	ip, ip, r3
 80224a2:	1209      	asrs	r1, r1, #8
 80224a4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80224a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80224ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80224b0:	fb01 c102 	mla	r1, r1, r2, ip
 80224b4:	b289      	uxth	r1, r1
 80224b6:	f101 0c01 	add.w	ip, r1, #1
 80224ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80224be:	1209      	asrs	r1, r1, #8
 80224c0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80224c4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80224c8:	fb11 f303 	smulbb	r3, r1, r3
 80224cc:	fb00 3002 	mla	r0, r0, r2, r3
 80224d0:	b280      	uxth	r0, r0
 80224d2:	1c42      	adds	r2, r0, #1
 80224d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224d8:	1200      	asrs	r0, r0, #8
 80224da:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80224de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80224e0:	f10e 0e03 	add.w	lr, lr, #3
 80224e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80224e8:	441d      	add	r5, r3
 80224ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80224ec:	441e      	add	r6, r3
 80224ee:	e604      	b.n	80220fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80224f0:	2800      	cmp	r0, #0
 80224f2:	d09c      	beq.n	802242e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80224f4:	4453      	add	r3, sl
 80224f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80224fa:	07db      	lsls	r3, r3, #31
 80224fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022500:	bf54      	ite	pl
 8022502:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022506:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802250a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802250e:	fa5f f38c 	uxtb.w	r3, ip
 8022512:	930b      	str	r3, [sp, #44]	; 0x2c
 8022514:	e78b      	b.n	802242e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022516:	b017      	add	sp, #92	; 0x5c
 8022518:	ecbd 8b08 	vpop	{d8-d11}
 802251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022520:	2000bc98 	.word	0x2000bc98

08022524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022528:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802252c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022530:	2800      	cmp	r0, #0
 8022532:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022536:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802253a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802253e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022542:	db6b      	blt.n	802261c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022544:	4580      	cmp	r8, r0
 8022546:	dd69      	ble.n	802261c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022548:	f1bc 0f00 	cmp.w	ip, #0
 802254c:	db66      	blt.n	802261c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802254e:	45e1      	cmp	r9, ip
 8022550:	dd64      	ble.n	802261c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022552:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022556:	f01e 0f01 	tst.w	lr, #1
 802255a:	5d16      	ldrb	r6, [r2, r4]
 802255c:	bf0c      	ite	eq
 802255e:	f006 060f 	andeq.w	r6, r6, #15
 8022562:	1136      	asrne	r6, r6, #4
 8022564:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022568:	b2f6      	uxtb	r6, r6
 802256a:	f110 0a01 	adds.w	sl, r0, #1
 802256e:	d457      	bmi.n	8022620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022570:	45d0      	cmp	r8, sl
 8022572:	dd55      	ble.n	8022620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022574:	f1bc 0f00 	cmp.w	ip, #0
 8022578:	db52      	blt.n	8022620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802257a:	45e1      	cmp	r9, ip
 802257c:	dd50      	ble.n	8022620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802257e:	2f00      	cmp	r7, #0
 8022580:	f000 80a5 	beq.w	80226ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022584:	f10e 0b01 	add.w	fp, lr, #1
 8022588:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802258c:	f01b 0f01 	tst.w	fp, #1
 8022590:	5d14      	ldrb	r4, [r2, r4]
 8022592:	bf0c      	ite	eq
 8022594:	f004 040f 	andeq.w	r4, r4, #15
 8022598:	1124      	asrne	r4, r4, #4
 802259a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802259e:	b2e4      	uxtb	r4, r4
 80225a0:	2d00      	cmp	r5, #0
 80225a2:	f000 808f 	beq.w	80226c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80225a6:	2800      	cmp	r0, #0
 80225a8:	f10c 0c01 	add.w	ip, ip, #1
 80225ac:	db3c      	blt.n	8022628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80225ae:	4580      	cmp	r8, r0
 80225b0:	dd3a      	ble.n	8022628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80225b2:	f1bc 0f00 	cmp.w	ip, #0
 80225b6:	db37      	blt.n	8022628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80225b8:	45e1      	cmp	r9, ip
 80225ba:	dd35      	ble.n	8022628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80225bc:	eb03 0b0e 	add.w	fp, r3, lr
 80225c0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80225c4:	f01b 0f01 	tst.w	fp, #1
 80225c8:	5c10      	ldrb	r0, [r2, r0]
 80225ca:	bf0c      	ite	eq
 80225cc:	f000 000f 	andeq.w	r0, r0, #15
 80225d0:	1100      	asrne	r0, r0, #4
 80225d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80225d6:	b2c0      	uxtb	r0, r0
 80225d8:	f1ba 0f00 	cmp.w	sl, #0
 80225dc:	db26      	blt.n	802262c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225de:	45d0      	cmp	r8, sl
 80225e0:	dd24      	ble.n	802262c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225e2:	f1bc 0f00 	cmp.w	ip, #0
 80225e6:	db21      	blt.n	802262c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225e8:	45e1      	cmp	r9, ip
 80225ea:	dd1f      	ble.n	802262c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80225ec:	b307      	cbz	r7, 8022630 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80225ee:	3301      	adds	r3, #1
 80225f0:	449e      	add	lr, r3
 80225f2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80225f6:	f01e 0f01 	tst.w	lr, #1
 80225fa:	5cd3      	ldrb	r3, [r2, r3]
 80225fc:	bf0c      	ite	eq
 80225fe:	f003 030f 	andeq.w	r3, r3, #15
 8022602:	111b      	asrne	r3, r3, #4
 8022604:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022608:	b2db      	uxtb	r3, r3
 802260a:	2f0f      	cmp	r7, #15
 802260c:	d911      	bls.n	8022632 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802260e:	4b32      	ldr	r3, [pc, #200]	; (80226d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022610:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022614:	4a31      	ldr	r2, [pc, #196]	; (80226dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022616:	4832      	ldr	r0, [pc, #200]	; (80226e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022618:	f001 fff8 	bl	802460c <__assert_func>
 802261c:	2600      	movs	r6, #0
 802261e:	e7a4      	b.n	802256a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022620:	2400      	movs	r4, #0
 8022622:	e7bd      	b.n	80225a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022624:	463c      	mov	r4, r7
 8022626:	e7be      	b.n	80225a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022628:	2000      	movs	r0, #0
 802262a:	e7d5      	b.n	80225d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802262c:	2300      	movs	r3, #0
 802262e:	e7ec      	b.n	802260a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022630:	463b      	mov	r3, r7
 8022632:	2d0f      	cmp	r5, #15
 8022634:	d8eb      	bhi.n	802260e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022636:	b2bf      	uxth	r7, r7
 8022638:	b2ad      	uxth	r5, r5
 802263a:	fb07 f205 	mul.w	r2, r7, r5
 802263e:	013f      	lsls	r7, r7, #4
 8022640:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022644:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022648:	1abf      	subs	r7, r7, r2
 802264a:	b2ad      	uxth	r5, r5
 802264c:	b2bf      	uxth	r7, r7
 802264e:	ebac 0c05 	sub.w	ip, ip, r5
 8022652:	437c      	muls	r4, r7
 8022654:	fa1f fc8c 	uxth.w	ip, ip
 8022658:	fb06 440c 	mla	r4, r6, ip, r4
 802265c:	fb05 4400 	mla	r4, r5, r0, r4
 8022660:	fb02 4303 	mla	r3, r2, r3, r4
 8022664:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022668:	b353      	cbz	r3, 80226c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802266a:	4a1e      	ldr	r2, [pc, #120]	; (80226e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802266c:	7808      	ldrb	r0, [r1, #0]
 802266e:	6814      	ldr	r4, [r2, #0]
 8022670:	b29a      	uxth	r2, r3
 8022672:	43db      	mvns	r3, r3
 8022674:	b2e5      	uxtb	r5, r4
 8022676:	b2db      	uxtb	r3, r3
 8022678:	fb15 f502 	smulbb	r5, r5, r2
 802267c:	fb00 5003 	mla	r0, r0, r3, r5
 8022680:	b280      	uxth	r0, r0
 8022682:	1c45      	adds	r5, r0, #1
 8022684:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022688:	784d      	ldrb	r5, [r1, #1]
 802268a:	fb15 f503 	smulbb	r5, r5, r3
 802268e:	1200      	asrs	r0, r0, #8
 8022690:	7008      	strb	r0, [r1, #0]
 8022692:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022696:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802269a:	fb00 5002 	mla	r0, r0, r2, r5
 802269e:	b280      	uxth	r0, r0
 80226a0:	1c45      	adds	r5, r0, #1
 80226a2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80226a6:	1200      	asrs	r0, r0, #8
 80226a8:	7048      	strb	r0, [r1, #1]
 80226aa:	7888      	ldrb	r0, [r1, #2]
 80226ac:	fb10 f303 	smulbb	r3, r0, r3
 80226b0:	fb04 3202 	mla	r2, r4, r2, r3
 80226b4:	b292      	uxth	r2, r2
 80226b6:	1c53      	adds	r3, r2, #1
 80226b8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80226bc:	1212      	asrs	r2, r2, #8
 80226be:	708a      	strb	r2, [r1, #2]
 80226c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226c4:	2f0f      	cmp	r7, #15
 80226c6:	d8a2      	bhi.n	802260e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80226c8:	462b      	mov	r3, r5
 80226ca:	4628      	mov	r0, r5
 80226cc:	e7b3      	b.n	8022636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80226ce:	2d00      	cmp	r5, #0
 80226d0:	d1a8      	bne.n	8022624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80226d2:	462c      	mov	r4, r5
 80226d4:	e7f8      	b.n	80226c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80226d6:	bf00      	nop
 80226d8:	08028fc7 	.word	0x08028fc7
 80226dc:	080294be 	.word	0x080294be
 80226e0:	08029090 	.word	0x08029090
 80226e4:	2000bc98 	.word	0x2000bc98

080226e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ec:	ed2d 8b08 	vpush	{d8-d11}
 80226f0:	b095      	sub	sp, #84	; 0x54
 80226f2:	461c      	mov	r4, r3
 80226f4:	eeb0 aa40 	vmov.f32	s20, s0
 80226f8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80226fc:	eef0 9a60 	vmov.f32	s19, s1
 8022700:	920e      	str	r2, [sp, #56]	; 0x38
 8022702:	eeb0 9a41 	vmov.f32	s18, s2
 8022706:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022708:	eeb0 8a62 	vmov.f32	s16, s5
 802270c:	9307      	str	r3, [sp, #28]
 802270e:	eef0 8a43 	vmov.f32	s17, s6
 8022712:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022716:	eef0 ba44 	vmov.f32	s23, s8
 802271a:	9013      	str	r0, [sp, #76]	; 0x4c
 802271c:	eeb0 ba64 	vmov.f32	s22, s9
 8022720:	9109      	str	r1, [sp, #36]	; 0x24
 8022722:	eef0 aa45 	vmov.f32	s21, s10
 8022726:	9308      	str	r3, [sp, #32]
 8022728:	6850      	ldr	r0, [r2, #4]
 802272a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802272e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022732:	fb00 1803 	mla	r8, r0, r3, r1
 8022736:	6813      	ldr	r3, [r2, #0]
 8022738:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802273c:	4498      	add	r8, r3
 802273e:	9b07      	ldr	r3, [sp, #28]
 8022740:	3301      	adds	r3, #1
 8022742:	f023 0301 	bic.w	r3, r3, #1
 8022746:	930b      	str	r3, [sp, #44]	; 0x2c
 8022748:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802274a:	681f      	ldr	r7, [r3, #0]
 802274c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802274e:	2b00      	cmp	r3, #0
 8022750:	dc03      	bgt.n	802275a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022754:	2b00      	cmp	r3, #0
 8022756:	f340 8238 	ble.w	8022bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802275a:	2c00      	cmp	r4, #0
 802275c:	f340 8109 	ble.w	8022972 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022760:	142a      	asrs	r2, r5, #16
 8022762:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022766:	d42b      	bmi.n	80227c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022768:	1c51      	adds	r1, r2, #1
 802276a:	9807      	ldr	r0, [sp, #28]
 802276c:	4288      	cmp	r0, r1
 802276e:	dd2a      	ble.n	80227c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022770:	2b00      	cmp	r3, #0
 8022772:	db28      	blt.n	80227c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022774:	1c59      	adds	r1, r3, #1
 8022776:	9808      	ldr	r0, [sp, #32]
 8022778:	4288      	cmp	r0, r1
 802277a:	dd24      	ble.n	80227c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802277c:	1e63      	subs	r3, r4, #1
 802277e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022780:	fb02 5203 	mla	r2, r2, r3, r5
 8022784:	1412      	asrs	r2, r2, #16
 8022786:	d429      	bmi.n	80227dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022788:	3201      	adds	r2, #1
 802278a:	9907      	ldr	r1, [sp, #28]
 802278c:	4291      	cmp	r1, r2
 802278e:	dd25      	ble.n	80227dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022790:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022792:	fb02 6303 	mla	r3, r2, r3, r6
 8022796:	141b      	asrs	r3, r3, #16
 8022798:	d420      	bmi.n	80227dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802279a:	3301      	adds	r3, #1
 802279c:	9a08      	ldr	r2, [sp, #32]
 802279e:	429a      	cmp	r2, r3
 80227a0:	dd1c      	ble.n	80227dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80227a2:	f108 0e03 	add.w	lr, r8, #3
 80227a6:	46a1      	mov	r9, r4
 80227a8:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80227ac:	f1b9 0f00 	cmp.w	r9, #0
 80227b0:	f300 8155 	bgt.w	8022a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80227b4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80227b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227bc:	44a0      	add	r8, r4
 80227be:	e0da      	b.n	8022976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80227c0:	1c50      	adds	r0, r2, #1
 80227c2:	f040 80ce 	bne.w	8022962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227c6:	9907      	ldr	r1, [sp, #28]
 80227c8:	4291      	cmp	r1, r2
 80227ca:	f340 80ca 	ble.w	8022962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227ce:	1c59      	adds	r1, r3, #1
 80227d0:	f2c0 80c7 	blt.w	8022962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227d4:	9a08      	ldr	r2, [sp, #32]
 80227d6:	4293      	cmp	r3, r2
 80227d8:	f280 80c3 	bge.w	8022962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80227dc:	46a3      	mov	fp, r4
 80227de:	46c1      	mov	r9, r8
 80227e0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80227e4:	f1bb 0f00 	cmp.w	fp, #0
 80227e8:	dde4      	ble.n	80227b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80227ea:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80227ee:	1428      	asrs	r0, r5, #16
 80227f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80227f8:	920a      	str	r2, [sp, #40]	; 0x28
 80227fa:	f100 8116 	bmi.w	8022a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80227fe:	f100 0c01 	add.w	ip, r0, #1
 8022802:	9a07      	ldr	r2, [sp, #28]
 8022804:	4562      	cmp	r2, ip
 8022806:	f340 8112 	ble.w	8022a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802280a:	2b00      	cmp	r3, #0
 802280c:	f2c0 810f 	blt.w	8022a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022810:	f103 0c01 	add.w	ip, r3, #1
 8022814:	9a08      	ldr	r2, [sp, #32]
 8022816:	4562      	cmp	r2, ip
 8022818:	f340 8109 	ble.w	8022a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802281c:	fb03 030a 	mla	r3, r3, sl, r0
 8022820:	0858      	lsrs	r0, r3, #1
 8022822:	07da      	lsls	r2, r3, #31
 8022824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022826:	5c38      	ldrb	r0, [r7, r0]
 8022828:	bf54      	ite	pl
 802282a:	f000 000f 	andpl.w	r0, r0, #15
 802282e:	1100      	asrmi	r0, r0, #4
 8022830:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022834:	b2c0      	uxtb	r0, r0
 8022836:	2a00      	cmp	r2, #0
 8022838:	f000 80dd 	beq.w	80229f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 802283c:	f103 0e01 	add.w	lr, r3, #1
 8022840:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022844:	f01e 0f01 	tst.w	lr, #1
 8022848:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802284c:	bf0c      	ite	eq
 802284e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022852:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022856:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802285a:	fa5f fc8c 	uxtb.w	ip, ip
 802285e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022862:	b301      	cbz	r1, 80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022864:	4453      	add	r3, sl
 8022866:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802286a:	07da      	lsls	r2, r3, #31
 802286c:	f103 0301 	add.w	r3, r3, #1
 8022870:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022874:	bf54      	ite	pl
 8022876:	f00c 0c0f 	andpl.w	ip, ip, #15
 802287a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802287e:	07da      	lsls	r2, r3, #31
 8022880:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022884:	fa5f fc8c 	uxtb.w	ip, ip
 8022888:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802288c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022890:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022894:	bf54      	ite	pl
 8022896:	f00c 030f 	andpl.w	r3, ip, #15
 802289a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802289e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80228a2:	b2db      	uxtb	r3, r3
 80228a4:	9310      	str	r3, [sp, #64]	; 0x40
 80228a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80228aa:	b289      	uxth	r1, r1
 80228ac:	fb02 f301 	mul.w	r3, r2, r1
 80228b0:	0112      	lsls	r2, r2, #4
 80228b2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80228b6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80228ba:	1ad2      	subs	r2, r2, r3
 80228bc:	fa1f fe81 	uxth.w	lr, r1
 80228c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80228c2:	b292      	uxth	r2, r2
 80228c4:	ebac 0c0e 	sub.w	ip, ip, lr
 80228c8:	434a      	muls	r2, r1
 80228ca:	fa1f fc8c 	uxth.w	ip, ip
 80228ce:	fb00 200c 	mla	r0, r0, ip, r2
 80228d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80228d4:	fb0e 0002 	mla	r0, lr, r2, r0
 80228d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228da:	fb03 0002 	mla	r0, r3, r2, r0
 80228de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80228e2:	b3a8      	cbz	r0, 8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80228e4:	4bbb      	ldr	r3, [pc, #748]	; (8022bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80228e6:	28ff      	cmp	r0, #255	; 0xff
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80228ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80228f2:	b2db      	uxtb	r3, r3
 80228f4:	f000 8092 	beq.w	8022a1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80228f8:	b282      	uxth	r2, r0
 80228fa:	43c0      	mvns	r0, r0
 80228fc:	f899 e000 	ldrb.w	lr, [r9]
 8022900:	fb13 f302 	smulbb	r3, r3, r2
 8022904:	b2c0      	uxtb	r0, r0
 8022906:	fb11 f102 	smulbb	r1, r1, r2
 802290a:	fb0e 3300 	mla	r3, lr, r0, r3
 802290e:	fb1c f202 	smulbb	r2, ip, r2
 8022912:	b29b      	uxth	r3, r3
 8022914:	f103 0e01 	add.w	lr, r3, #1
 8022918:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802291c:	121b      	asrs	r3, r3, #8
 802291e:	f889 3000 	strb.w	r3, [r9]
 8022922:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022926:	fb03 1100 	mla	r1, r3, r0, r1
 802292a:	b289      	uxth	r1, r1
 802292c:	1c4b      	adds	r3, r1, #1
 802292e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022932:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022936:	fb03 2000 	mla	r0, r3, r0, r2
 802293a:	1209      	asrs	r1, r1, #8
 802293c:	b280      	uxth	r0, r0
 802293e:	f889 1001 	strb.w	r1, [r9, #1]
 8022942:	f100 0c01 	add.w	ip, r0, #1
 8022946:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802294a:	1200      	asrs	r0, r0, #8
 802294c:	f889 0002 	strb.w	r0, [r9, #2]
 8022950:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022952:	f109 0903 	add.w	r9, r9, #3
 8022956:	f10b 3bff 	add.w	fp, fp, #4294967295
 802295a:	441d      	add	r5, r3
 802295c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802295e:	441e      	add	r6, r3
 8022960:	e740      	b.n	80227e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022964:	3c01      	subs	r4, #1
 8022966:	f108 0803 	add.w	r8, r8, #3
 802296a:	441d      	add	r5, r3
 802296c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802296e:	441e      	add	r6, r3
 8022970:	e6f3      	b.n	802275a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022972:	f47f af03 	bne.w	802277c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022978:	2b00      	cmp	r3, #0
 802297a:	f340 8126 	ble.w	8022bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802297e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022984:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022988:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802298c:	eef0 6a48 	vmov.f32	s13, s16
 8022990:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022994:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022998:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802299c:	ee16 5a90 	vmov	r5, s13
 80229a0:	eef0 6a68 	vmov.f32	s13, s17
 80229a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229a8:	ee16 6a90 	vmov	r6, s13
 80229ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80229b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80229b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80229b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80229bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80229c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80229c4:	ee18 2a10 	vmov	r2, s16
 80229c8:	eeb0 8a47 	vmov.f32	s16, s14
 80229cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80229d0:	ee18 2a90 	vmov	r2, s17
 80229d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80229d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229d8:	eef0 8a67 	vmov.f32	s17, s15
 80229dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80229e0:	932a      	str	r3, [sp, #168]	; 0xa8
 80229e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229e6:	3b01      	subs	r3, #1
 80229e8:	9309      	str	r3, [sp, #36]	; 0x24
 80229ea:	bf08      	it	eq
 80229ec:	4614      	moveq	r4, r2
 80229ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229f0:	bf18      	it	ne
 80229f2:	461c      	movne	r4, r3
 80229f4:	e6aa      	b.n	802274c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80229f6:	2900      	cmp	r1, #0
 80229f8:	f43f af55 	beq.w	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80229fc:	4453      	add	r3, sl
 80229fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a02:	07db      	lsls	r3, r3, #31
 8022a04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a08:	bf54      	ite	pl
 8022a0a:	f00c 030f 	andpl.w	r3, ip, #15
 8022a0e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022a12:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a16:	b2db      	uxtb	r3, r3
 8022a18:	930c      	str	r3, [sp, #48]	; 0x30
 8022a1a:	e744      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022a1c:	f889 3000 	strb.w	r3, [r9]
 8022a20:	f889 1001 	strb.w	r1, [r9, #1]
 8022a24:	f889 c002 	strb.w	ip, [r9, #2]
 8022a28:	e792      	b.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a2a:	1c42      	adds	r2, r0, #1
 8022a2c:	d190      	bne.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a2e:	9a07      	ldr	r2, [sp, #28]
 8022a30:	4282      	cmp	r2, r0
 8022a32:	dd8d      	ble.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a34:	1c5a      	adds	r2, r3, #1
 8022a36:	db8b      	blt.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a38:	9a08      	ldr	r2, [sp, #32]
 8022a3a:	429a      	cmp	r2, r3
 8022a3c:	dd88      	ble.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a40:	9105      	str	r1, [sp, #20]
 8022a42:	4649      	mov	r1, r9
 8022a44:	9002      	str	r0, [sp, #8]
 8022a46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022a48:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022a4c:	9b08      	ldr	r3, [sp, #32]
 8022a4e:	463a      	mov	r2, r7
 8022a50:	9301      	str	r3, [sp, #4]
 8022a52:	9b07      	ldr	r3, [sp, #28]
 8022a54:	9300      	str	r3, [sp, #0]
 8022a56:	4653      	mov	r3, sl
 8022a58:	f7ff fd64 	bl	8022524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022a5c:	e778      	b.n	8022950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022a5e:	142a      	asrs	r2, r5, #16
 8022a60:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022a64:	1433      	asrs	r3, r6, #16
 8022a66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022a6a:	fb0a 2303 	mla	r3, sl, r3, r2
 8022a6e:	085a      	lsrs	r2, r3, #1
 8022a70:	07d9      	lsls	r1, r3, #31
 8022a72:	5cba      	ldrb	r2, [r7, r2]
 8022a74:	bf54      	ite	pl
 8022a76:	f002 020f 	andpl.w	r2, r2, #15
 8022a7a:	1112      	asrmi	r2, r2, #4
 8022a7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a80:	b2d2      	uxtb	r2, r2
 8022a82:	2800      	cmp	r0, #0
 8022a84:	f000 808a 	beq.w	8022b9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8022a88:	f103 0b01 	add.w	fp, r3, #1
 8022a8c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8022a90:	f01b 0f01 	tst.w	fp, #1
 8022a94:	5c79      	ldrb	r1, [r7, r1]
 8022a96:	bf0c      	ite	eq
 8022a98:	f001 010f 	andeq.w	r1, r1, #15
 8022a9c:	1109      	asrne	r1, r1, #4
 8022a9e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022aa2:	b2c9      	uxtb	r1, r1
 8022aa4:	9111      	str	r1, [sp, #68]	; 0x44
 8022aa6:	f1bc 0f00 	cmp.w	ip, #0
 8022aaa:	d019      	beq.n	8022ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022aac:	4453      	add	r3, sl
 8022aae:	0859      	lsrs	r1, r3, #1
 8022ab0:	f013 0f01 	tst.w	r3, #1
 8022ab4:	f103 0301 	add.w	r3, r3, #1
 8022ab8:	5c79      	ldrb	r1, [r7, r1]
 8022aba:	bf0c      	ite	eq
 8022abc:	f001 010f 	andeq.w	r1, r1, #15
 8022ac0:	1109      	asrne	r1, r1, #4
 8022ac2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022ac6:	b2c9      	uxtb	r1, r1
 8022ac8:	910d      	str	r1, [sp, #52]	; 0x34
 8022aca:	0859      	lsrs	r1, r3, #1
 8022acc:	07db      	lsls	r3, r3, #31
 8022ace:	5c79      	ldrb	r1, [r7, r1]
 8022ad0:	bf54      	ite	pl
 8022ad2:	f001 010f 	andpl.w	r1, r1, #15
 8022ad6:	1109      	asrmi	r1, r1, #4
 8022ad8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022adc:	b2c9      	uxtb	r1, r1
 8022ade:	9112      	str	r1, [sp, #72]	; 0x48
 8022ae0:	b280      	uxth	r0, r0
 8022ae2:	fa1f fc8c 	uxth.w	ip, ip
 8022ae6:	fb00 f30c 	mul.w	r3, r0, ip
 8022aea:	0100      	lsls	r0, r0, #4
 8022aec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022af0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022af4:	1ac0      	subs	r0, r0, r3
 8022af6:	fa1f fc8c 	uxth.w	ip, ip
 8022afa:	b280      	uxth	r0, r0
 8022afc:	eba1 010c 	sub.w	r1, r1, ip
 8022b00:	fa1f fb81 	uxth.w	fp, r1
 8022b04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022b06:	4348      	muls	r0, r1
 8022b08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022b0a:	fb02 020b 	mla	r2, r2, fp, r0
 8022b0e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022b14:	fb03 c302 	mla	r3, r3, r2, ip
 8022b18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b1c:	b3ab      	cbz	r3, 8022b8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022b1e:	4a2d      	ldr	r2, [pc, #180]	; (8022bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022b20:	2bff      	cmp	r3, #255	; 0xff
 8022b22:	6811      	ldr	r1, [r2, #0]
 8022b24:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8022b28:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8022b2c:	b2c9      	uxtb	r1, r1
 8022b2e:	d045      	beq.n	8022bbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8022b30:	b298      	uxth	r0, r3
 8022b32:	43db      	mvns	r3, r3
 8022b34:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8022b38:	fb11 f100 	smulbb	r1, r1, r0
 8022b3c:	b2db      	uxtb	r3, r3
 8022b3e:	fb1c fc00 	smulbb	ip, ip, r0
 8022b42:	fb02 1103 	mla	r1, r2, r3, r1
 8022b46:	fb1b f000 	smulbb	r0, fp, r0
 8022b4a:	b289      	uxth	r1, r1
 8022b4c:	1c4a      	adds	r2, r1, #1
 8022b4e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022b52:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022b56:	fb02 cc03 	mla	ip, r2, r3, ip
 8022b5a:	1209      	asrs	r1, r1, #8
 8022b5c:	fa1f fc8c 	uxth.w	ip, ip
 8022b60:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022b64:	f10c 0201 	add.w	r2, ip, #1
 8022b68:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022b6c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8022b70:	fb02 0303 	mla	r3, r2, r3, r0
 8022b74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022b78:	b29b      	uxth	r3, r3
 8022b7a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022b7e:	1c5a      	adds	r2, r3, #1
 8022b80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b84:	121b      	asrs	r3, r3, #8
 8022b86:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8022b8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b8c:	f10e 0e03 	add.w	lr, lr, #3
 8022b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8022b94:	441d      	add	r5, r3
 8022b96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b98:	441e      	add	r6, r3
 8022b9a:	e607      	b.n	80227ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8022b9c:	f1bc 0f00 	cmp.w	ip, #0
 8022ba0:	d09e      	beq.n	8022ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022ba2:	4453      	add	r3, sl
 8022ba4:	0859      	lsrs	r1, r3, #1
 8022ba6:	07db      	lsls	r3, r3, #31
 8022ba8:	5c79      	ldrb	r1, [r7, r1]
 8022baa:	bf54      	ite	pl
 8022bac:	f001 010f 	andpl.w	r1, r1, #15
 8022bb0:	1109      	asrmi	r1, r1, #4
 8022bb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022bb6:	b2c9      	uxtb	r1, r1
 8022bb8:	910d      	str	r1, [sp, #52]	; 0x34
 8022bba:	e791      	b.n	8022ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022bbc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022bc0:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022bc4:	f80e bc01 	strb.w	fp, [lr, #-1]
 8022bc8:	e7df      	b.n	8022b8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022bca:	b015      	add	sp, #84	; 0x54
 8022bcc:	ecbd 8b08 	vpop	{d8-d11}
 8022bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bd4:	2000bc98 	.word	0x2000bc98

08022bd8 <CRC_Lock>:
 8022bd8:	4a1d      	ldr	r2, [pc, #116]	; (8022c50 <CRC_Lock+0x78>)
 8022bda:	b530      	push	{r4, r5, lr}
 8022bdc:	6813      	ldr	r3, [r2, #0]
 8022bde:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022be2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022be6:	f023 0301 	bic.w	r3, r3, #1
 8022bea:	6013      	str	r3, [r2, #0]
 8022bec:	4b19      	ldr	r3, [pc, #100]	; (8022c54 <CRC_Lock+0x7c>)
 8022bee:	681a      	ldr	r2, [r3, #0]
 8022bf0:	4022      	ands	r2, r4
 8022bf2:	42aa      	cmp	r2, r5
 8022bf4:	d005      	beq.n	8022c02 <CRC_Lock+0x2a>
 8022bf6:	681b      	ldr	r3, [r3, #0]
 8022bf8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022bfc:	4023      	ands	r3, r4
 8022bfe:	4293      	cmp	r3, r2
 8022c00:	d11d      	bne.n	8022c3e <CRC_Lock+0x66>
 8022c02:	4b15      	ldr	r3, [pc, #84]	; (8022c58 <CRC_Lock+0x80>)
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	b9d3      	cbnz	r3, 8022c3e <CRC_Lock+0x66>
 8022c08:	4a14      	ldr	r2, [pc, #80]	; (8022c5c <CRC_Lock+0x84>)
 8022c0a:	6813      	ldr	r3, [r2, #0]
 8022c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022c10:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8022c14:	d006      	beq.n	8022c24 <CRC_Lock+0x4c>
 8022c16:	6813      	ldr	r3, [r2, #0]
 8022c18:	f240 4283 	movw	r2, #1155	; 0x483
 8022c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022c20:	4293      	cmp	r3, r2
 8022c22:	d10c      	bne.n	8022c3e <CRC_Lock+0x66>
 8022c24:	4b0e      	ldr	r3, [pc, #56]	; (8022c60 <CRC_Lock+0x88>)
 8022c26:	2201      	movs	r2, #1
 8022c28:	601a      	str	r2, [r3, #0]
 8022c2a:	681a      	ldr	r2, [r3, #0]
 8022c2c:	2a00      	cmp	r2, #0
 8022c2e:	d1fc      	bne.n	8022c2a <CRC_Lock+0x52>
 8022c30:	4b0c      	ldr	r3, [pc, #48]	; (8022c64 <CRC_Lock+0x8c>)
 8022c32:	6018      	str	r0, [r3, #0]
 8022c34:	6818      	ldr	r0, [r3, #0]
 8022c36:	1a43      	subs	r3, r0, r1
 8022c38:	4258      	negs	r0, r3
 8022c3a:	4158      	adcs	r0, r3
 8022c3c:	bd30      	pop	{r4, r5, pc}
 8022c3e:	4b0a      	ldr	r3, [pc, #40]	; (8022c68 <CRC_Lock+0x90>)
 8022c40:	2201      	movs	r2, #1
 8022c42:	601a      	str	r2, [r3, #0]
 8022c44:	681a      	ldr	r2, [r3, #0]
 8022c46:	2a00      	cmp	r2, #0
 8022c48:	d1fc      	bne.n	8022c44 <CRC_Lock+0x6c>
 8022c4a:	4b08      	ldr	r3, [pc, #32]	; (8022c6c <CRC_Lock+0x94>)
 8022c4c:	e7f1      	b.n	8022c32 <CRC_Lock+0x5a>
 8022c4e:	bf00      	nop
 8022c50:	e0002000 	.word	0xe0002000
 8022c54:	e000ed00 	.word	0xe000ed00
 8022c58:	e0042000 	.word	0xe0042000
 8022c5c:	5c001000 	.word	0x5c001000
 8022c60:	58024c08 	.word	0x58024c08
 8022c64:	58024c00 	.word	0x58024c00
 8022c68:	40023008 	.word	0x40023008
 8022c6c:	40023000 	.word	0x40023000

08022c70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022c70:	6101      	str	r1, [r0, #16]
 8022c72:	4770      	bx	lr

08022c74 <_ZN8touchgfx8Gestures4tickEv>:
 8022c74:	7b83      	ldrb	r3, [r0, #14]
 8022c76:	b14b      	cbz	r3, 8022c8c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022c78:	8903      	ldrh	r3, [r0, #8]
 8022c7a:	3301      	adds	r3, #1
 8022c7c:	b29b      	uxth	r3, r3
 8022c7e:	2b07      	cmp	r3, #7
 8022c80:	8103      	strh	r3, [r0, #8]
 8022c82:	bf81      	itttt	hi
 8022c84:	2300      	movhi	r3, #0
 8022c86:	8143      	strhhi	r3, [r0, #10]
 8022c88:	8183      	strhhi	r3, [r0, #12]
 8022c8a:	7383      	strbhi	r3, [r0, #14]
 8022c8c:	4770      	bx	lr
	...

08022c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022c90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022c94:	4604      	mov	r4, r0
 8022c96:	4698      	mov	r8, r3
 8022c98:	8880      	ldrh	r0, [r0, #4]
 8022c9a:	4617      	mov	r7, r2
 8022c9c:	4b1d      	ldr	r3, [pc, #116]	; (8022d14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8022c9e:	460e      	mov	r6, r1
 8022ca0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8022ca4:	eba8 0000 	sub.w	r0, r8, r0
 8022ca8:	9300      	str	r3, [sp, #0]
 8022caa:	2300      	movs	r3, #0
 8022cac:	b280      	uxth	r0, r0
 8022cae:	8aa2      	ldrh	r2, [r4, #20]
 8022cb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8022cb4:	b203      	sxth	r3, r0
 8022cb6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022cba:	88e1      	ldrh	r1, [r4, #6]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022cc2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022cc6:	bfb8      	it	lt
 8022cc8:	4240      	neglt	r0, r0
 8022cca:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022cce:	bfb8      	it	lt
 8022cd0:	b203      	sxthlt	r3, r0
 8022cd2:	4293      	cmp	r3, r2
 8022cd4:	dc08      	bgt.n	8022ce8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8022cd6:	1a69      	subs	r1, r5, r1
 8022cd8:	b289      	uxth	r1, r1
 8022cda:	b20b      	sxth	r3, r1
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	bfbc      	itt	lt
 8022ce0:	4249      	neglt	r1, r1
 8022ce2:	b20b      	sxthlt	r3, r1
 8022ce4:	429a      	cmp	r2, r3
 8022ce6:	da13      	bge.n	8022d10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8022ce8:	6920      	ldr	r0, [r4, #16]
 8022cea:	4669      	mov	r1, sp
 8022cec:	eba8 0606 	sub.w	r6, r8, r6
 8022cf0:	1bef      	subs	r7, r5, r7
 8022cf2:	6803      	ldr	r3, [r0, #0]
 8022cf4:	685b      	ldr	r3, [r3, #4]
 8022cf6:	4798      	blx	r3
 8022cf8:	2300      	movs	r3, #0
 8022cfa:	2001      	movs	r0, #1
 8022cfc:	8166      	strh	r6, [r4, #10]
 8022cfe:	8123      	strh	r3, [r4, #8]
 8022d00:	81a7      	strh	r7, [r4, #12]
 8022d02:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022d06:	80e5      	strh	r5, [r4, #6]
 8022d08:	73a0      	strb	r0, [r4, #14]
 8022d0a:	b004      	add	sp, #16
 8022d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d10:	2000      	movs	r0, #0
 8022d12:	e7fa      	b.n	8022d0a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8022d14:	08028164 	.word	0x08028164

08022d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d1a:	461e      	mov	r6, r3
 8022d1c:	1e4b      	subs	r3, r1, #1
 8022d1e:	b085      	sub	sp, #20
 8022d20:	4604      	mov	r4, r0
 8022d22:	2b01      	cmp	r3, #1
 8022d24:	460d      	mov	r5, r1
 8022d26:	4617      	mov	r7, r2
 8022d28:	d84b      	bhi.n	8022dc2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022d2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022d2e:	1cd3      	adds	r3, r2, #3
 8022d30:	b29b      	uxth	r3, r3
 8022d32:	2b06      	cmp	r3, #6
 8022d34:	d916      	bls.n	8022d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022d36:	f8df c098 	ldr.w	ip, [pc, #152]	; 8022dd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022d3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d3e:	f8cd c004 	str.w	ip, [sp, #4]
 8022d42:	f04f 0c00 	mov.w	ip, #0
 8022d46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022d4a:	6900      	ldr	r0, [r0, #16]
 8022d4c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022d50:	a901      	add	r1, sp, #4
 8022d52:	f88d c008 	strb.w	ip, [sp, #8]
 8022d56:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022d5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d5e:	6803      	ldr	r3, [r0, #0]
 8022d60:	689b      	ldr	r3, [r3, #8]
 8022d62:	4798      	blx	r3
 8022d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022d68:	1cd3      	adds	r3, r2, #3
 8022d6a:	b29b      	uxth	r3, r3
 8022d6c:	2b06      	cmp	r3, #6
 8022d6e:	d916      	bls.n	8022d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d70:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8022dd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022d74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d78:	f8cd c004 	str.w	ip, [sp, #4]
 8022d7c:	f04f 0c01 	mov.w	ip, #1
 8022d80:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022d84:	6920      	ldr	r0, [r4, #16]
 8022d86:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022d8a:	a901      	add	r1, sp, #4
 8022d8c:	f88d c008 	strb.w	ip, [sp, #8]
 8022d90:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022d94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d98:	6803      	ldr	r3, [r0, #0]
 8022d9a:	689b      	ldr	r3, [r3, #8]
 8022d9c:	4798      	blx	r3
 8022d9e:	4b0b      	ldr	r3, [pc, #44]	; (8022dcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8022da0:	a901      	add	r1, sp, #4
 8022da2:	6920      	ldr	r0, [r4, #16]
 8022da4:	9301      	str	r3, [sp, #4]
 8022da6:	2300      	movs	r3, #0
 8022da8:	f88d 5008 	strb.w	r5, [sp, #8]
 8022dac:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022db0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022db8:	6803      	ldr	r3, [r0, #0]
 8022dba:	681b      	ldr	r3, [r3, #0]
 8022dbc:	4798      	blx	r3
 8022dbe:	b005      	add	sp, #20
 8022dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dc2:	2900      	cmp	r1, #0
 8022dc4:	d1eb      	bne.n	8022d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022dc6:	80a2      	strh	r2, [r4, #4]
 8022dc8:	80c6      	strh	r6, [r0, #6]
 8022dca:	e7e8      	b.n	8022d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022dcc:	08028150 	.word	0x08028150
 8022dd0:	08028178 	.word	0x08028178

08022dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8022dd4:	10c9      	asrs	r1, r1, #3
 8022dd6:	2900      	cmp	r1, #0
 8022dd8:	bfb8      	it	lt
 8022dda:	4249      	neglt	r1, r1
 8022ddc:	2801      	cmp	r0, #1
 8022dde:	d108      	bne.n	8022df2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022de0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022de4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8022de8:	4601      	mov	r1, r0
 8022dea:	dd02      	ble.n	8022df2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022dec:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022df0:	4770      	bx	lr
 8022df2:	29ff      	cmp	r1, #255	; 0xff
 8022df4:	bfa8      	it	ge
 8022df6:	21ff      	movge	r1, #255	; 0xff
 8022df8:	4608      	mov	r0, r1
 8022dfa:	4770      	bx	lr

08022dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8022dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e00:	688c      	ldr	r4, [r1, #8]
 8022e02:	b087      	sub	sp, #28
 8022e04:	4607      	mov	r7, r0
 8022e06:	2c00      	cmp	r4, #0
 8022e08:	db2b      	blt.n	8022e62 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022e0a:	6803      	ldr	r3, [r0, #0]
 8022e0c:	68da      	ldr	r2, [r3, #12]
 8022e0e:	42a2      	cmp	r2, r4
 8022e10:	dd27      	ble.n	8022e62 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022e12:	681a      	ldr	r2, [r3, #0]
 8022e14:	691e      	ldr	r6, [r3, #16]
 8022e16:	68cd      	ldr	r5, [r1, #12]
 8022e18:	fb06 2604 	mla	r6, r6, r4, r2
 8022e1c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8022e20:	698a      	ldr	r2, [r1, #24]
 8022e22:	f893 a004 	ldrb.w	sl, [r3, #4]
 8022e26:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8022e2a:	9205      	str	r2, [sp, #20]
 8022e2c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8022e30:	9b05      	ldr	r3, [sp, #20]
 8022e32:	6839      	ldr	r1, [r7, #0]
 8022e34:	eb03 0c02 	add.w	ip, r3, r2
 8022e38:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8022e3c:	6889      	ldr	r1, [r1, #8]
 8022e3e:	1898      	adds	r0, r3, r2
 8022e40:	4288      	cmp	r0, r1
 8022e42:	db02      	blt.n	8022e4a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8022e44:	1a8b      	subs	r3, r1, r2
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	dd09      	ble.n	8022e5e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8022e4a:	6878      	ldr	r0, [r7, #4]
 8022e4c:	6801      	ldr	r1, [r0, #0]
 8022e4e:	9400      	str	r4, [sp, #0]
 8022e50:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8022e54:	4653      	mov	r3, sl
 8022e56:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8022e5a:	4631      	mov	r1, r6
 8022e5c:	47d8      	blx	fp
 8022e5e:	3d01      	subs	r5, #1
 8022e60:	d1e4      	bne.n	8022e2c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8022e62:	b007      	add	sp, #28
 8022e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e68 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022e68:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8022e6c:	b90b      	cbnz	r3, 8022e72 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8022e6e:	f001 b974 	b.w	802415a <_ZN8touchgfx7Outline6lineToEii>
 8022e72:	4770      	bx	lr

08022e74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8022e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e78:	4604      	mov	r4, r0
 8022e7a:	2600      	movs	r6, #0
 8022e7c:	4b8e      	ldr	r3, [pc, #568]	; (80230b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8022e7e:	f100 0518 	add.w	r5, r0, #24
 8022e82:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8022e86:	b086      	sub	sp, #24
 8022e88:	4690      	mov	r8, r2
 8022e8a:	e9c0 3100 	strd	r3, r1, [r0]
 8022e8e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8022e92:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8022e96:	4628      	mov	r0, r5
 8022e98:	f001 fb75 	bl	8024586 <_ZN8touchgfx15RenderingBufferC1Ev>
 8022e9c:	4638      	mov	r0, r7
 8022e9e:	f000 fb45 	bl	802352c <_ZN8touchgfx7OutlineC1Ev>
 8022ea2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8022ea6:	f001 fb23 	bl	80244f0 <_ZN8touchgfx8ScanlineC1Ev>
 8022eaa:	2301      	movs	r3, #1
 8022eac:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8022eb0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8022eb4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022eb8:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8022ebc:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8022ec0:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8022ec4:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8022ec8:	f7f4 fbe6 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8022ecc:	b928      	cbnz	r0, 8022eda <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8022ece:	4b7b      	ldr	r3, [pc, #492]	; (80230bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8022ed0:	2118      	movs	r1, #24
 8022ed2:	4a7b      	ldr	r2, [pc, #492]	; (80230c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022ed4:	487b      	ldr	r0, [pc, #492]	; (80230c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022ed6:	f001 fb99 	bl	802460c <__assert_func>
 8022eda:	f9b8 2000 	ldrsh.w	r2, [r8]
 8022ede:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8022ee2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8022ee6:	4410      	add	r0, r2
 8022ee8:	9602      	str	r6, [sp, #8]
 8022eea:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8022eee:	b280      	uxth	r0, r0
 8022ef0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022ef4:	fa0f fa80 	sxth.w	sl, r0
 8022ef8:	f1ba 0f00 	cmp.w	sl, #0
 8022efc:	dd70      	ble.n	8022fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022efe:	4591      	cmp	r9, r2
 8022f00:	dd6e      	ble.n	8022fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022f02:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022f06:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8022f0a:	440b      	add	r3, r1
 8022f0c:	b29b      	uxth	r3, r3
 8022f0e:	b21e      	sxth	r6, r3
 8022f10:	2e00      	cmp	r6, #0
 8022f12:	dd65      	ble.n	8022fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022f14:	458e      	cmp	lr, r1
 8022f16:	dd63      	ble.n	8022fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022f18:	45d1      	cmp	r9, sl
 8022f1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8022f1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8022f22:	bfb8      	it	lt
 8022f24:	fa1f f089 	uxthlt.w	r0, r9
 8022f28:	45b6      	cmp	lr, r6
 8022f2a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022f2e:	bfb8      	it	lt
 8022f30:	fa1f f38e 	uxthlt.w	r3, lr
 8022f34:	1a80      	subs	r0, r0, r2
 8022f36:	f8ad 100a 	strh.w	r1, [sp, #10]
 8022f3a:	1a5b      	subs	r3, r3, r1
 8022f3c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8022f40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022f44:	f10d 0808 	add.w	r8, sp, #8
 8022f48:	ae04      	add	r6, sp, #16
 8022f4a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022f4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8022f52:	f8dc 3000 	ldr.w	r3, [ip]
 8022f56:	4660      	mov	r0, ip
 8022f58:	4631      	mov	r1, r6
 8022f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022f5c:	4798      	blx	r3
 8022f5e:	6861      	ldr	r1, [r4, #4]
 8022f60:	4640      	mov	r0, r8
 8022f62:	3104      	adds	r1, #4
 8022f64:	f7f5 fa06 	bl	8018374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f68:	4630      	mov	r0, r6
 8022f6a:	f7f5 fa1b 	bl	80183a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f6e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8022f72:	f7f4 fb21 	bl	80175b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8022f76:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8022f7a:	4638      	mov	r0, r7
 8022f7c:	f000 fab2 	bl	80234e4 <_ZN8touchgfx7Outline5resetEv>
 8022f80:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022f84:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022f88:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8022f8c:	015b      	lsls	r3, r3, #5
 8022f8e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8022f92:	0152      	lsls	r2, r2, #5
 8022f94:	60e3      	str	r3, [r4, #12]
 8022f96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022f9a:	60a2      	str	r2, [r4, #8]
 8022f9c:	015b      	lsls	r3, r3, #5
 8022f9e:	6123      	str	r3, [r4, #16]
 8022fa0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8022fa4:	015b      	lsls	r3, r3, #5
 8022fa6:	6163      	str	r3, [r4, #20]
 8022fa8:	4b47      	ldr	r3, [pc, #284]	; (80230c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8022faa:	6818      	ldr	r0, [r3, #0]
 8022fac:	6803      	ldr	r3, [r0, #0]
 8022fae:	6a1b      	ldr	r3, [r3, #32]
 8022fb0:	4798      	blx	r3
 8022fb2:	4606      	mov	r6, r0
 8022fb4:	f7ec fbf0 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8022fb8:	6803      	ldr	r3, [r0, #0]
 8022fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022fbc:	4798      	blx	r3
 8022fbe:	4607      	mov	r7, r0
 8022fc0:	f7ec fbea 	bl	800f798 <_ZN8touchgfx3HAL3lcdEv>
 8022fc4:	6803      	ldr	r3, [r0, #0]
 8022fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fc8:	4798      	blx	r3
 8022fca:	280c      	cmp	r0, #12
 8022fcc:	d854      	bhi.n	8023078 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8022fce:	e8df f000 	tbb	[pc, r0]
 8022fd2:	554b      	.short	0x554b
 8022fd4:	2b6e0a66 	.word	0x2b6e0a66
 8022fd8:	5f5f5f3b 	.word	0x5f5f5f3b
 8022fdc:	5f5f      	.short	0x5f5f
 8022fde:	6e          	.byte	0x6e
 8022fdf:	00          	.byte	0x00
 8022fe0:	2300      	movs	r3, #0
 8022fe2:	9303      	str	r3, [sp, #12]
 8022fe4:	e7ae      	b.n	8022f44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8022fe6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022fea:	2108      	movs	r1, #8
 8022fec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022ff0:	fb92 f1f1 	sdiv	r1, r2, r1
 8022ff4:	fb07 1303 	mla	r3, r7, r3, r1
 8022ff8:	441e      	add	r6, r3
 8022ffa:	4253      	negs	r3, r2
 8022ffc:	f002 0207 	and.w	r2, r2, #7
 8023000:	f003 0307 	and.w	r3, r3, #7
 8023004:	bf58      	it	pl
 8023006:	425a      	negpl	r2, r3
 8023008:	b2d2      	uxtb	r2, r2
 802300a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802300e:	4628      	mov	r0, r5
 8023010:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023014:	66e1      	str	r1, [r4, #108]	; 0x6c
 8023016:	e9cd 1700 	strd	r1, r7, [sp]
 802301a:	4631      	mov	r1, r6
 802301c:	f001 fabb 	bl	8024596 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023020:	4620      	mov	r0, r4
 8023022:	b006      	add	sp, #24
 8023024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023028:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802302c:	2104      	movs	r1, #4
 802302e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023032:	fb92 f1f1 	sdiv	r1, r2, r1
 8023036:	fb07 1303 	mla	r3, r7, r3, r1
 802303a:	441e      	add	r6, r3
 802303c:	4253      	negs	r3, r2
 802303e:	f002 0203 	and.w	r2, r2, #3
 8023042:	f003 0303 	and.w	r3, r3, #3
 8023046:	e7dd      	b.n	8023004 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023048:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802304c:	2102      	movs	r1, #2
 802304e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023052:	2a00      	cmp	r2, #0
 8023054:	fb92 f1f1 	sdiv	r1, r2, r1
 8023058:	f002 0201 	and.w	r2, r2, #1
 802305c:	fb07 1303 	mla	r3, r7, r3, r1
 8023060:	bfb8      	it	lt
 8023062:	4252      	neglt	r2, r2
 8023064:	441e      	add	r6, r3
 8023066:	e7cf      	b.n	8023008 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023068:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802306c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023070:	437b      	muls	r3, r7
 8023072:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023076:	441e      	add	r6, r3
 8023078:	2200      	movs	r2, #0
 802307a:	e7c6      	b.n	802300a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802307c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023080:	2103      	movs	r1, #3
 8023082:	fb07 f203 	mul.w	r2, r7, r3
 8023086:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802308a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802308e:	e7f2      	b.n	8023076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023090:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023094:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023098:	fb07 2303 	mla	r3, r7, r3, r2
 802309c:	e7eb      	b.n	8023076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802309e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80230a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80230a6:	437b      	muls	r3, r7
 80230a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80230ac:	e7e3      	b.n	8023076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80230ae:	4b07      	ldr	r3, [pc, #28]	; (80230cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80230b0:	2156      	movs	r1, #86	; 0x56
 80230b2:	4a03      	ldr	r2, [pc, #12]	; (80230c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80230b4:	e70e      	b.n	8022ed4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80230b6:	bf00      	nop
 80230b8:	080297e4 	.word	0x080297e4
 80230bc:	0802972e 	.word	0x0802972e
 80230c0:	080297ec 	.word	0x080297ec
 80230c4:	0802978a 	.word	0x0802978a
 80230c8:	2000bc70 	.word	0x2000bc70
 80230cc:	080297be 	.word	0x080297be

080230d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80230d0:	6812      	ldr	r2, [r2, #0]
 80230d2:	2a00      	cmp	r2, #0
 80230d4:	db0b      	blt.n	80230ee <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80230d6:	9800      	ldr	r0, [sp, #0]
 80230d8:	6800      	ldr	r0, [r0, #0]
 80230da:	4290      	cmp	r0, r2
 80230dc:	bfd4      	ite	le
 80230de:	2002      	movle	r0, #2
 80230e0:	2000      	movgt	r0, #0
 80230e2:	680a      	ldr	r2, [r1, #0]
 80230e4:	2a00      	cmp	r2, #0
 80230e6:	da04      	bge.n	80230f2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80230e8:	f040 0004 	orr.w	r0, r0, #4
 80230ec:	4770      	bx	lr
 80230ee:	2001      	movs	r0, #1
 80230f0:	e7f7      	b.n	80230e2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4293      	cmp	r3, r2
 80230f6:	bfd8      	it	le
 80230f8:	f040 0008 	orrle.w	r0, r0, #8
 80230fc:	4770      	bx	lr
	...

08023100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023100:	4b07      	ldr	r3, [pc, #28]	; (8023120 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8023102:	b510      	push	{r4, lr}
 8023104:	781b      	ldrb	r3, [r3, #0]
 8023106:	2b01      	cmp	r3, #1
 8023108:	d108      	bne.n	802311c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802310a:	6843      	ldr	r3, [r0, #4]
 802310c:	6814      	ldr	r4, [r2, #0]
 802310e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8023112:	680b      	ldr	r3, [r1, #0]
 8023114:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023118:	6013      	str	r3, [r2, #0]
 802311a:	600c      	str	r4, [r1, #0]
 802311c:	bd10      	pop	{r4, pc}
 802311e:	bf00      	nop
 8023120:	2000bc68 	.word	0x2000bc68

08023124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023126:	b085      	sub	sp, #20
 8023128:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802312c:	4604      	mov	r4, r0
 802312e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023132:	b33b      	cbz	r3, 8023184 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023134:	aa02      	add	r2, sp, #8
 8023136:	a903      	add	r1, sp, #12
 8023138:	f7ff ffe2 	bl	8023100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802313c:	68a3      	ldr	r3, [r4, #8]
 802313e:	9e03      	ldr	r6, [sp, #12]
 8023140:	aa02      	add	r2, sp, #8
 8023142:	9f02      	ldr	r7, [sp, #8]
 8023144:	a903      	add	r1, sp, #12
 8023146:	1af6      	subs	r6, r6, r3
 8023148:	68e3      	ldr	r3, [r4, #12]
 802314a:	4620      	mov	r0, r4
 802314c:	1aff      	subs	r7, r7, r3
 802314e:	f104 0314 	add.w	r3, r4, #20
 8023152:	9603      	str	r6, [sp, #12]
 8023154:	9300      	str	r3, [sp, #0]
 8023156:	f104 0310 	add.w	r3, r4, #16
 802315a:	9702      	str	r7, [sp, #8]
 802315c:	f7ff ffb8 	bl	80230d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023160:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023164:	4605      	mov	r5, r0
 8023166:	b97b      	cbnz	r3, 8023188 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023168:	463a      	mov	r2, r7
 802316a:	4631      	mov	r1, r6
 802316c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023170:	f7ff fe7a 	bl	8022e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023174:	9b03      	ldr	r3, [sp, #12]
 8023176:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802317a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802317e:	9b02      	ldr	r3, [sp, #8]
 8023180:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023184:	b005      	add	sp, #20
 8023186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023188:	b110      	cbz	r0, 8023190 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802318a:	ea13 0200 	ands.w	r2, r3, r0
 802318e:	d11c      	bne.n	80231ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023190:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023194:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8023198:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802319c:	b188      	cbz	r0, 80231c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802319e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80231a2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80231a6:	b913      	cbnz	r3, 80231ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80231a8:	4630      	mov	r0, r6
 80231aa:	f001 f806 	bl	80241ba <_ZN8touchgfx7Outline6moveToEii>
 80231ae:	2300      	movs	r3, #0
 80231b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80231b4:	2301      	movs	r3, #1
 80231b6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80231ba:	4630      	mov	r0, r6
 80231bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80231c0:	e7d6      	b.n	8023170 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80231c2:	4630      	mov	r0, r6
 80231c4:	f7ff fe50 	bl	8022e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80231c8:	e7f7      	b.n	80231ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80231ca:	4615      	mov	r5, r2
 80231cc:	e7d2      	b.n	8023174 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080231ce <_ZN8touchgfx6Canvas5closeEv>:
 80231ce:	b538      	push	{r3, r4, r5, lr}
 80231d0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80231d4:	4604      	mov	r4, r0
 80231d6:	b993      	cbnz	r3, 80231fe <_ZN8touchgfx6Canvas5closeEv+0x30>
 80231d8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80231dc:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80231e0:	4213      	tst	r3, r2
 80231e2:	d10c      	bne.n	80231fe <_ZN8touchgfx6Canvas5closeEv+0x30>
 80231e4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80231e8:	b123      	cbz	r3, 80231f4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80231ea:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80231ee:	4628      	mov	r0, r5
 80231f0:	f7ff fe3a 	bl	8022e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80231f4:	4628      	mov	r0, r5
 80231f6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80231fa:	f7ff fe35 	bl	8022e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80231fe:	2300      	movs	r3, #0
 8023200:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023204:	bd38      	pop	{r3, r4, r5, pc}

08023206 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023208:	b085      	sub	sp, #20
 802320a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802320e:	4604      	mov	r4, r0
 8023210:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023214:	b353      	cbz	r3, 802326c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023216:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802321a:	b90b      	cbnz	r3, 8023220 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802321c:	f7ff ffd7 	bl	80231ce <_ZN8touchgfx6Canvas5closeEv>
 8023220:	aa02      	add	r2, sp, #8
 8023222:	a903      	add	r1, sp, #12
 8023224:	4620      	mov	r0, r4
 8023226:	f7ff ff6b 	bl	8023100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802322a:	68a3      	ldr	r3, [r4, #8]
 802322c:	9d03      	ldr	r5, [sp, #12]
 802322e:	aa02      	add	r2, sp, #8
 8023230:	9e02      	ldr	r6, [sp, #8]
 8023232:	a903      	add	r1, sp, #12
 8023234:	1aed      	subs	r5, r5, r3
 8023236:	68e3      	ldr	r3, [r4, #12]
 8023238:	4620      	mov	r0, r4
 802323a:	1af6      	subs	r6, r6, r3
 802323c:	f104 0314 	add.w	r3, r4, #20
 8023240:	9503      	str	r5, [sp, #12]
 8023242:	9300      	str	r3, [sp, #0]
 8023244:	f104 0310 	add.w	r3, r4, #16
 8023248:	9602      	str	r6, [sp, #8]
 802324a:	f7ff ff41 	bl	80230d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802324e:	4607      	mov	r7, r0
 8023250:	b170      	cbz	r0, 8023270 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023252:	2301      	movs	r3, #1
 8023254:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023258:	9a03      	ldr	r2, [sp, #12]
 802325a:	9b02      	ldr	r3, [sp, #8]
 802325c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023260:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023264:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8023268:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802326c:	b005      	add	sp, #20
 802326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023270:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023274:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8023278:	b92b      	cbnz	r3, 8023286 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802327a:	4632      	mov	r2, r6
 802327c:	4629      	mov	r1, r5
 802327e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023282:	f000 ff9a 	bl	80241ba <_ZN8touchgfx7Outline6moveToEii>
 8023286:	2300      	movs	r3, #0
 8023288:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802328c:	2301      	movs	r3, #1
 802328e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023292:	e7e1      	b.n	8023258 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023294 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023298:	4604      	mov	r4, r0
 802329a:	b087      	sub	sp, #28
 802329c:	9105      	str	r1, [sp, #20]
 802329e:	f001 f8d0 	bl	8024442 <_ZN8touchgfx7Outline8getCellsEv>
 80232a2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80232a6:	4605      	mov	r5, r0
 80232a8:	f1b9 0f00 	cmp.w	r9, #0
 80232ac:	d103      	bne.n	80232b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80232ae:	2001      	movs	r0, #1
 80232b0:	b007      	add	sp, #28
 80232b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80232ba:	2e00      	cmp	r6, #0
 80232bc:	d139      	bne.n	8023332 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80232be:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80232c2:	f105 0708 	add.w	r7, r5, #8
 80232c6:	4640      	mov	r0, r8
 80232c8:	f001 f8fd 	bl	80244c6 <_ZN8touchgfx8Scanline5resetEv>
 80232cc:	f109 33ff 	add.w	r3, r9, #4294967295
 80232d0:	9303      	str	r3, [sp, #12]
 80232d2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80232d6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80232da:	46da      	mov	sl, fp
 80232dc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80232e0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80232e4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80232e8:	9b03      	ldr	r3, [sp, #12]
 80232ea:	4416      	add	r6, r2
 80232ec:	9504      	str	r5, [sp, #16]
 80232ee:	463d      	mov	r5, r7
 80232f0:	3b01      	subs	r3, #1
 80232f2:	9303      	str	r3, [sp, #12]
 80232f4:	3301      	adds	r3, #1
 80232f6:	d01e      	beq.n	8023336 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80232f8:	3708      	adds	r7, #8
 80232fa:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80232fe:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023302:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023306:	4290      	cmp	r0, r2
 8023308:	d11e      	bne.n	8023348 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802330a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802330e:	4411      	add	r1, r2
 8023310:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023314:	e7e8      	b.n	80232e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023316:	1c91      	adds	r1, r2, #2
 8023318:	f04f 0301 	mov.w	r3, #1
 802331c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802331e:	8053      	strh	r3, [r2, #2]
 8023320:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023322:	1c91      	adds	r1, r2, #2
 8023324:	65a1      	str	r1, [r4, #88]	; 0x58
 8023326:	f8a2 b002 	strh.w	fp, [r2, #2]
 802332a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802332c:	3201      	adds	r2, #1
 802332e:	6562      	str	r2, [r4, #84]	; 0x54
 8023330:	e03a      	b.n	80233a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023332:	2000      	movs	r0, #0
 8023334:	e7bc      	b.n	80232b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023336:	b951      	cbnz	r1, 802334e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023338:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802333a:	2b00      	cmp	r3, #0
 802333c:	d0b7      	beq.n	80232ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802333e:	4641      	mov	r1, r8
 8023340:	9805      	ldr	r0, [sp, #20]
 8023342:	f7ff fd5b 	bl	8022dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023346:	e7b2      	b.n	80232ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023348:	2900      	cmp	r1, #0
 802334a:	d035      	beq.n	80233b8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802334c:	9504      	str	r5, [sp, #16]
 802334e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023352:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023356:	f7ff fd3d 	bl	8022dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802335a:	4605      	mov	r5, r0
 802335c:	b330      	cbz	r0, 80233ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802335e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023360:	b182      	cbz	r2, 8023384 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023362:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023364:	454a      	cmp	r2, r9
 8023366:	d00d      	beq.n	8023384 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023368:	4641      	mov	r1, r8
 802336a:	9805      	ldr	r0, [sp, #20]
 802336c:	f7ff fd46 	bl	8022dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023370:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023374:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023376:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802337a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802337c:	2300      	movs	r3, #0
 802337e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023380:	6563      	str	r3, [r4, #84]	; 0x54
 8023382:	65a2      	str	r2, [r4, #88]	; 0x58
 8023384:	f1bb 0f00 	cmp.w	fp, #0
 8023388:	db10      	blt.n	80233ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802338a:	f7f4 f993 	bl	80176b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802338e:	4583      	cmp	fp, r0
 8023390:	d20c      	bcs.n	80233ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023392:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023394:	f802 500b 	strb.w	r5, [r2, fp]
 8023398:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802339a:	3201      	adds	r2, #1
 802339c:	455a      	cmp	r2, fp
 802339e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80233a0:	d1b9      	bne.n	8023316 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80233a2:	8811      	ldrh	r1, [r2, #0]
 80233a4:	3101      	adds	r1, #1
 80233a6:	8011      	strh	r1, [r2, #0]
 80233a8:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80233ac:	9b03      	ldr	r3, [sp, #12]
 80233ae:	3301      	adds	r3, #1
 80233b0:	d0c2      	beq.n	8023338 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80233b2:	f10b 0a01 	add.w	sl, fp, #1
 80233b6:	9d04      	ldr	r5, [sp, #16]
 80233b8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80233bc:	4553      	cmp	r3, sl
 80233be:	dd88      	ble.n	80232d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80233c0:	01b1      	lsls	r1, r6, #6
 80233c2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80233c6:	f7ff fd05 	bl	8022dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80233ca:	4683      	mov	fp, r0
 80233cc:	2800      	cmp	r0, #0
 80233ce:	d080      	beq.n	80232d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80233d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80233d2:	b183      	cbz	r3, 80233f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80233d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80233d6:	454b      	cmp	r3, r9
 80233d8:	d00d      	beq.n	80233f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80233da:	4641      	mov	r1, r8
 80233dc:	9805      	ldr	r0, [sp, #20]
 80233de:	f7ff fd0d 	bl	8022dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80233e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80233e6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80233ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80233ec:	65e3      	str	r3, [r4, #92]	; 0x5c
 80233ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80233f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80233f2:	2300      	movs	r3, #0
 80233f4:	6563      	str	r3, [r4, #84]	; 0x54
 80233f6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80233fa:	464a      	mov	r2, r9
 80233fc:	f8cd b000 	str.w	fp, [sp]
 8023400:	4651      	mov	r1, sl
 8023402:	eba3 030a 	sub.w	r3, r3, sl
 8023406:	4640      	mov	r0, r8
 8023408:	f001 f884 	bl	8024514 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802340c:	e761      	b.n	80232d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802340e <_ZN8touchgfx6Canvas6renderEv>:
 802340e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023410:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023414:	4604      	mov	r4, r0
 8023416:	b913      	cbnz	r3, 802341e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023418:	2001      	movs	r0, #1
 802341a:	b003      	add	sp, #12
 802341c:	bd30      	pop	{r4, r5, pc}
 802341e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023422:	2b00      	cmp	r3, #0
 8023424:	d131      	bne.n	802348a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023426:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802342a:	2b00      	cmp	r3, #0
 802342c:	d0f4      	beq.n	8023418 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802342e:	6840      	ldr	r0, [r0, #4]
 8023430:	6803      	ldr	r3, [r0, #0]
 8023432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023434:	4798      	blx	r3
 8023436:	2800      	cmp	r0, #0
 8023438:	d0ee      	beq.n	8023418 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802343a:	4620      	mov	r0, r4
 802343c:	f7ff fec7 	bl	80231ce <_ZN8touchgfx6Canvas5closeEv>
 8023440:	6860      	ldr	r0, [r4, #4]
 8023442:	6803      	ldr	r3, [r0, #0]
 8023444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023446:	4798      	blx	r3
 8023448:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802344c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023450:	f7f3 f8c9 	bl	80165e6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023454:	6860      	ldr	r0, [r4, #4]
 8023456:	6803      	ldr	r3, [r0, #0]
 8023458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802345a:	4798      	blx	r3
 802345c:	4605      	mov	r5, r0
 802345e:	6860      	ldr	r0, [r4, #4]
 8023460:	6803      	ldr	r3, [r0, #0]
 8023462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023464:	4798      	blx	r3
 8023466:	4601      	mov	r1, r0
 8023468:	4628      	mov	r0, r5
 802346a:	f7f3 f8bf 	bl	80165ec <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802346e:	6860      	ldr	r0, [r4, #4]
 8023470:	6803      	ldr	r3, [r0, #0]
 8023472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023474:	4798      	blx	r3
 8023476:	f104 0318 	add.w	r3, r4, #24
 802347a:	4669      	mov	r1, sp
 802347c:	e9cd 3000 	strd	r3, r0, [sp]
 8023480:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023484:	f7ff ff06 	bl	8023294 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023488:	e7c7      	b.n	802341a <_ZN8touchgfx6Canvas6renderEv+0xc>
 802348a:	2000      	movs	r0, #0
 802348c:	e7c5      	b.n	802341a <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023490 <_ZN8touchgfx6CanvasD1Ev>:
 8023490:	b538      	push	{r3, r4, r5, lr}
 8023492:	4605      	mov	r5, r0
 8023494:	4b08      	ldr	r3, [pc, #32]	; (80234b8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023496:	4604      	mov	r4, r0
 8023498:	f845 3b2c 	str.w	r3, [r5], #44
 802349c:	4b07      	ldr	r3, [pc, #28]	; (80234bc <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802349e:	6818      	ldr	r0, [r3, #0]
 80234a0:	6803      	ldr	r3, [r0, #0]
 80234a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234a4:	4798      	blx	r3
 80234a6:	4628      	mov	r0, r5
 80234a8:	f000 f814 	bl	80234d4 <_ZN8touchgfx7OutlineD1Ev>
 80234ac:	f104 0018 	add.w	r0, r4, #24
 80234b0:	f001 f870 	bl	8024594 <_ZN8touchgfx15RenderingBufferD1Ev>
 80234b4:	4620      	mov	r0, r4
 80234b6:	bd38      	pop	{r3, r4, r5, pc}
 80234b8:	080297e4 	.word	0x080297e4
 80234bc:	2000bc70 	.word	0x2000bc70

080234c0 <_ZN8touchgfx6CanvasD0Ev>:
 80234c0:	b510      	push	{r4, lr}
 80234c2:	4604      	mov	r4, r0
 80234c4:	f7ff ffe4 	bl	8023490 <_ZN8touchgfx6CanvasD1Ev>
 80234c8:	21b8      	movs	r1, #184	; 0xb8
 80234ca:	4620      	mov	r0, r4
 80234cc:	f001 f873 	bl	80245b6 <_ZdlPvj>
 80234d0:	4620      	mov	r0, r4
 80234d2:	bd10      	pop	{r4, pc}

080234d4 <_ZN8touchgfx7OutlineD1Ev>:
 80234d4:	4770      	bx	lr

080234d6 <_ZN8touchgfx7OutlineD0Ev>:
 80234d6:	b510      	push	{r4, lr}
 80234d8:	4604      	mov	r4, r0
 80234da:	2148      	movs	r1, #72	; 0x48
 80234dc:	f001 f86b 	bl	80245b6 <_ZdlPvj>
 80234e0:	4620      	mov	r0, r4
 80234e2:	bd10      	pop	{r4, pc}

080234e4 <_ZN8touchgfx7Outline5resetEv>:
 80234e4:	b510      	push	{r4, lr}
 80234e6:	4604      	mov	r4, r0
 80234e8:	f7f4 f8fc 	bl	80176e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80234ec:	60e0      	str	r0, [r4, #12]
 80234ee:	f7f4 f8ff 	bl	80176f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80234f2:	68e3      	ldr	r3, [r4, #12]
 80234f4:	2200      	movs	r2, #0
 80234f6:	08c0      	lsrs	r0, r0, #3
 80234f8:	6123      	str	r3, [r4, #16]
 80234fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80234fe:	6060      	str	r0, [r4, #4]
 8023500:	82a3      	strh	r3, [r4, #20]
 8023502:	82e3      	strh	r3, [r4, #22]
 8023504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023506:	60a2      	str	r2, [r4, #8]
 8023508:	f023 0301 	bic.w	r3, r3, #1
 802350c:	8322      	strh	r2, [r4, #24]
 802350e:	8362      	strh	r2, [r4, #26]
 8023510:	f043 0302 	orr.w	r3, r3, #2
 8023514:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023518:	63e3      	str	r3, [r4, #60]	; 0x3c
 802351a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802351e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023522:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023526:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802352a:	bd10      	pop	{r4, pc}

0802352c <_ZN8touchgfx7OutlineC1Ev>:
 802352c:	4b0f      	ldr	r3, [pc, #60]	; (802356c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802352e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023532:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023536:	b510      	push	{r4, lr}
 8023538:	6003      	str	r3, [r0, #0]
 802353a:	2300      	movs	r3, #0
 802353c:	4604      	mov	r4, r0
 802353e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023542:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023546:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802354a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802354e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023552:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023556:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802355a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802355e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023562:	f7ff ffbf 	bl	80234e4 <_ZN8touchgfx7Outline5resetEv>
 8023566:	4620      	mov	r0, r4
 8023568:	bd10      	pop	{r4, pc}
 802356a:	bf00      	nop
 802356c:	08029844 	.word	0x08029844

08023570 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023574:	b093      	sub	sp, #76	; 0x4c
 8023576:	4604      	mov	r4, r0
 8023578:	1156      	asrs	r6, r2, #5
 802357a:	f002 0e1f 	and.w	lr, r2, #31
 802357e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023580:	9305      	str	r3, [sp, #20]
 8023582:	1143      	asrs	r3, r0, #5
 8023584:	1145      	asrs	r5, r0, #5
 8023586:	930c      	str	r3, [sp, #48]	; 0x30
 8023588:	f000 031f 	and.w	r3, r0, #31
 802358c:	9303      	str	r3, [sp, #12]
 802358e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023590:	42b3      	cmp	r3, r6
 8023592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023594:	bfc8      	it	gt
 8023596:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023598:	42b3      	cmp	r3, r6
 802359a:	bfdc      	itt	le
 802359c:	1c73      	addle	r3, r6, #1
 802359e:	63a3      	strle	r3, [r4, #56]	; 0x38
 80235a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80235a2:	42ab      	cmp	r3, r5
 80235a4:	bfc8      	it	gt
 80235a6:	462b      	movgt	r3, r5
 80235a8:	ea4f 1560 	mov.w	r5, r0, asr #5
 80235ac:	bfc8      	it	gt
 80235ae:	6323      	strgt	r3, [r4, #48]	; 0x30
 80235b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80235b2:	42ab      	cmp	r3, r5
 80235b4:	bfd8      	it	le
 80235b6:	462b      	movle	r3, r5
 80235b8:	ea4f 1561 	mov.w	r5, r1, asr #5
 80235bc:	bfdc      	itt	le
 80235be:	3301      	addle	r3, #1
 80235c0:	63a3      	strle	r3, [r4, #56]	; 0x38
 80235c2:	9b05      	ldr	r3, [sp, #20]
 80235c4:	eba3 0a01 	sub.w	sl, r3, r1
 80235c8:	1143      	asrs	r3, r0, #5
 80235ca:	429e      	cmp	r6, r3
 80235cc:	f040 8119 	bne.w	8023802 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80235d0:	9b05      	ldr	r3, [sp, #20]
 80235d2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80235d6:	9b03      	ldr	r3, [sp, #12]
 80235d8:	459e      	cmp	lr, r3
 80235da:	d12c      	bne.n	8023636 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80235dc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80235e0:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80235e4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80235e8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80235ec:	4291      	cmp	r1, r2
 80235ee:	d037      	beq.n	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80235f0:	8b61      	ldrh	r1, [r4, #26]
 80235f2:	8b22      	ldrh	r2, [r4, #24]
 80235f4:	430a      	orrs	r2, r1
 80235f6:	d00b      	beq.n	8023610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80235f8:	2b00      	cmp	r3, #0
 80235fa:	db09      	blt.n	8023610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80235fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80235fe:	429a      	cmp	r2, r3
 8023600:	dd06      	ble.n	8023610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023602:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023606:	429a      	cmp	r2, r3
 8023608:	d308      	bcc.n	802361c <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802360a:	2301      	movs	r3, #1
 802360c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023610:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023614:	82e6      	strh	r6, [r4, #22]
 8023616:	2300      	movs	r3, #0
 8023618:	8323      	strh	r3, [r4, #24]
 802361a:	e0c6      	b.n	80237aa <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802361c:	f104 0314 	add.w	r3, r4, #20
 8023620:	6922      	ldr	r2, [r4, #16]
 8023622:	cb03      	ldmia	r3!, {r0, r1}
 8023624:	6010      	str	r0, [r2, #0]
 8023626:	6051      	str	r1, [r2, #4]
 8023628:	6923      	ldr	r3, [r4, #16]
 802362a:	3308      	adds	r3, #8
 802362c:	6123      	str	r3, [r4, #16]
 802362e:	68a3      	ldr	r3, [r4, #8]
 8023630:	3301      	adds	r3, #1
 8023632:	60a3      	str	r3, [r4, #8]
 8023634:	e7ec      	b.n	8023610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023636:	9b05      	ldr	r3, [sp, #20]
 8023638:	45ac      	cmp	ip, r5
 802363a:	f001 011f 	and.w	r1, r1, #31
 802363e:	8b20      	ldrh	r0, [r4, #24]
 8023640:	f003 031f 	and.w	r3, r3, #31
 8023644:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023648:	9304      	str	r3, [sp, #16]
 802364a:	9b03      	ldr	r3, [sp, #12]
 802364c:	eba3 020e 	sub.w	r2, r3, lr
 8023650:	d109      	bne.n	8023666 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023652:	9b04      	ldr	r3, [sp, #16]
 8023654:	4410      	add	r0, r2
 8023656:	4419      	add	r1, r3
 8023658:	8320      	strh	r0, [r4, #24]
 802365a:	fb02 8201 	mla	r2, r2, r1, r8
 802365e:	8362      	strh	r2, [r4, #26]
 8023660:	b013      	add	sp, #76	; 0x4c
 8023662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023666:	f1ba 0f00 	cmp.w	sl, #0
 802366a:	f2c0 80a0 	blt.w	80237ae <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802366e:	f1c1 0320 	rsb	r3, r1, #32
 8023672:	f04f 0b20 	mov.w	fp, #32
 8023676:	435a      	muls	r2, r3
 8023678:	2301      	movs	r3, #1
 802367a:	9302      	str	r3, [sp, #8]
 802367c:	4459      	add	r1, fp
 802367e:	fb92 f7fa 	sdiv	r7, r2, sl
 8023682:	fb0a 2217 	mls	r2, sl, r7, r2
 8023686:	2a00      	cmp	r2, #0
 8023688:	bfbc      	itt	lt
 802368a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802368e:	4452      	addlt	r2, sl
 8023690:	fb07 8101 	mla	r1, r7, r1, r8
 8023694:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023698:	4438      	add	r0, r7
 802369a:	b20b      	sxth	r3, r1
 802369c:	9902      	ldr	r1, [sp, #8]
 802369e:	b200      	sxth	r0, r0
 80236a0:	9301      	str	r3, [sp, #4]
 80236a2:	8363      	strh	r3, [r4, #26]
 80236a4:	186b      	adds	r3, r5, r1
 80236a6:	0435      	lsls	r5, r6, #16
 80236a8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80236ac:	8320      	strh	r0, [r4, #24]
 80236ae:	eb03 0905 	add.w	r9, r3, r5
 80236b2:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80236b6:	9300      	str	r3, [sp, #0]
 80236b8:	45c1      	cmp	r9, r8
 80236ba:	9505      	str	r5, [sp, #20]
 80236bc:	d014      	beq.n	80236e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80236be:	9b01      	ldr	r3, [sp, #4]
 80236c0:	4303      	orrs	r3, r0
 80236c2:	d00b      	beq.n	80236dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236c4:	2900      	cmp	r1, #0
 80236c6:	db09      	blt.n	80236dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236ca:	428b      	cmp	r3, r1
 80236cc:	dd06      	ble.n	80236dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80236ce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80236d2:	4299      	cmp	r1, r3
 80236d4:	d374      	bcc.n	80237c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80236d6:	2301      	movs	r3, #1
 80236d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80236dc:	9b00      	ldr	r3, [sp, #0]
 80236de:	82e6      	strh	r6, [r4, #22]
 80236e0:	82a3      	strh	r3, [r4, #20]
 80236e2:	2300      	movs	r3, #0
 80236e4:	8323      	strh	r3, [r4, #24]
 80236e6:	8363      	strh	r3, [r4, #26]
 80236e8:	9900      	ldr	r1, [sp, #0]
 80236ea:	eb0e 0307 	add.w	r3, lr, r7
 80236ee:	458c      	cmp	ip, r1
 80236f0:	d04e      	beq.n	8023790 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80236f2:	9903      	ldr	r1, [sp, #12]
 80236f4:	eba2 020a 	sub.w	r2, r2, sl
 80236f8:	1ac9      	subs	r1, r1, r3
 80236fa:	9201      	str	r2, [sp, #4]
 80236fc:	440f      	add	r7, r1
 80236fe:	017f      	lsls	r7, r7, #5
 8023700:	fb97 fefa 	sdiv	lr, r7, sl
 8023704:	fb0a 771e 	mls	r7, sl, lr, r7
 8023708:	2f00      	cmp	r7, #0
 802370a:	bfbc      	itt	lt
 802370c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023710:	4457      	addlt	r7, sl
 8023712:	f10e 0101 	add.w	r1, lr, #1
 8023716:	9106      	str	r1, [sp, #24]
 8023718:	9a01      	ldr	r2, [sp, #4]
 802371a:	8b20      	ldrh	r0, [r4, #24]
 802371c:	19d2      	adds	r2, r2, r7
 802371e:	8b61      	ldrh	r1, [r4, #26]
 8023720:	9d02      	ldr	r5, [sp, #8]
 8023722:	9201      	str	r2, [sp, #4]
 8023724:	bf5b      	ittet	pl
 8023726:	eba2 020a 	subpl.w	r2, r2, sl
 802372a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802372e:	46f0      	movmi	r8, lr
 8023730:	9201      	strpl	r2, [sp, #4]
 8023732:	9a00      	ldr	r2, [sp, #0]
 8023734:	4440      	add	r0, r8
 8023736:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802373a:	4443      	add	r3, r8
 802373c:	442a      	add	r2, r5
 802373e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023742:	9d05      	ldr	r5, [sp, #20]
 8023744:	b200      	sxth	r0, r0
 8023746:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802374a:	b209      	sxth	r1, r1
 802374c:	4415      	add	r5, r2
 802374e:	8320      	strh	r0, [r4, #24]
 8023750:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023754:	8361      	strh	r1, [r4, #26]
 8023756:	9200      	str	r2, [sp, #0]
 8023758:	454d      	cmp	r5, r9
 802375a:	d016      	beq.n	802378a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802375c:	4301      	orrs	r1, r0
 802375e:	d00d      	beq.n	802377c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023760:	f1b8 0f00 	cmp.w	r8, #0
 8023764:	db0a      	blt.n	802377c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023766:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023768:	4541      	cmp	r1, r8
 802376a:	dd07      	ble.n	802377c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802376c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023770:	4288      	cmp	r0, r1
 8023772:	d335      	bcc.n	80237e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023774:	f04f 0101 	mov.w	r1, #1
 8023778:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802377c:	9900      	ldr	r1, [sp, #0]
 802377e:	82e6      	strh	r6, [r4, #22]
 8023780:	82a1      	strh	r1, [r4, #20]
 8023782:	f04f 0100 	mov.w	r1, #0
 8023786:	8321      	strh	r1, [r4, #24]
 8023788:	8361      	strh	r1, [r4, #26]
 802378a:	9a00      	ldr	r2, [sp, #0]
 802378c:	4594      	cmp	ip, r2
 802378e:	d1c3      	bne.n	8023718 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023790:	9a03      	ldr	r2, [sp, #12]
 8023792:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023796:	1ad3      	subs	r3, r2, r3
 8023798:	8b22      	ldrh	r2, [r4, #24]
 802379a:	441a      	add	r2, r3
 802379c:	8322      	strh	r2, [r4, #24]
 802379e:	9a04      	ldr	r2, [sp, #16]
 80237a0:	3220      	adds	r2, #32
 80237a2:	eba2 020b 	sub.w	r2, r2, fp
 80237a6:	fb03 c302 	mla	r3, r3, r2, ip
 80237aa:	8363      	strh	r3, [r4, #26]
 80237ac:	e758      	b.n	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80237ae:	f04f 33ff 	mov.w	r3, #4294967295
 80237b2:	434a      	muls	r2, r1
 80237b4:	f1ca 0a00 	rsb	sl, sl, #0
 80237b8:	f04f 0b00 	mov.w	fp, #0
 80237bc:	9302      	str	r3, [sp, #8]
 80237be:	e75d      	b.n	802367c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80237c0:	f104 0314 	add.w	r3, r4, #20
 80237c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80237c8:	cb03      	ldmia	r3!, {r0, r1}
 80237ca:	f8c8 0000 	str.w	r0, [r8]
 80237ce:	f8c8 1004 	str.w	r1, [r8, #4]
 80237d2:	6923      	ldr	r3, [r4, #16]
 80237d4:	3308      	adds	r3, #8
 80237d6:	6123      	str	r3, [r4, #16]
 80237d8:	68a3      	ldr	r3, [r4, #8]
 80237da:	3301      	adds	r3, #1
 80237dc:	60a3      	str	r3, [r4, #8]
 80237de:	e77d      	b.n	80236dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80237e0:	f104 0814 	add.w	r8, r4, #20
 80237e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80237e8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80237ec:	f8c9 0000 	str.w	r0, [r9]
 80237f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80237f4:	6921      	ldr	r1, [r4, #16]
 80237f6:	3108      	adds	r1, #8
 80237f8:	6121      	str	r1, [r4, #16]
 80237fa:	68a1      	ldr	r1, [r4, #8]
 80237fc:	3101      	adds	r1, #1
 80237fe:	60a1      	str	r1, [r4, #8]
 8023800:	e7bc      	b.n	802377c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023802:	1a83      	subs	r3, r0, r2
 8023804:	9301      	str	r3, [sp, #4]
 8023806:	f1ba 0f00 	cmp.w	sl, #0
 802380a:	f040 8094 	bne.w	8023936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802380e:	9a01      	ldr	r2, [sp, #4]
 8023810:	0049      	lsls	r1, r1, #1
 8023812:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023816:	2a00      	cmp	r2, #0
 8023818:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802381c:	8b62      	ldrh	r2, [r4, #26]
 802381e:	bfaa      	itet	ge
 8023820:	f04f 0a20 	movge.w	sl, #32
 8023824:	f04f 38ff 	movlt.w	r8, #4294967295
 8023828:	f04f 0801 	movge.w	r8, #1
 802382c:	8b21      	ldrh	r1, [r4, #24]
 802382e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023832:	4471      	add	r1, lr
 8023834:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023838:	eb08 0206 	add.w	r2, r8, r6
 802383c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023840:	b209      	sxth	r1, r1
 8023842:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023846:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802384a:	8321      	strh	r1, [r4, #24]
 802384c:	fa0f fe8e 	sxth.w	lr, lr
 8023850:	42b7      	cmp	r7, r6
 8023852:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023856:	d013      	beq.n	8023880 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023858:	ea51 010e 	orrs.w	r1, r1, lr
 802385c:	d00b      	beq.n	8023876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802385e:	2800      	cmp	r0, #0
 8023860:	db09      	blt.n	8023876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023862:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023864:	4281      	cmp	r1, r0
 8023866:	dd06      	ble.n	8023876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023868:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802386c:	4288      	cmp	r0, r1
 802386e:	d339      	bcc.n	80238e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023870:	2101      	movs	r1, #1
 8023872:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023876:	2100      	movs	r1, #0
 8023878:	82a5      	strh	r5, [r4, #20]
 802387a:	82e2      	strh	r2, [r4, #22]
 802387c:	8321      	strh	r1, [r4, #24]
 802387e:	8361      	strh	r1, [r4, #26]
 8023880:	f1aa 0610 	sub.w	r6, sl, #16
 8023884:	f04f 0e00 	mov.w	lr, #0
 8023888:	f04f 0b01 	mov.w	fp, #1
 802388c:	0076      	lsls	r6, r6, #1
 802388e:	fb06 f703 	mul.w	r7, r6, r3
 8023892:	b236      	sxth	r6, r6
 8023894:	b23f      	sxth	r7, r7
 8023896:	ea46 0107 	orr.w	r1, r6, r7
 802389a:	9100      	str	r1, [sp, #0]
 802389c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802389e:	428a      	cmp	r2, r1
 80238a0:	d03e      	beq.n	8023920 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80238a2:	4442      	add	r2, r8
 80238a4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80238a8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80238ac:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80238b0:	8326      	strh	r6, [r4, #24]
 80238b2:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80238b6:	8367      	strh	r7, [r4, #26]
 80238b8:	4584      	cmp	ip, r0
 80238ba:	d0ef      	beq.n	802389c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80238bc:	9800      	ldr	r0, [sp, #0]
 80238be:	b150      	cbz	r0, 80238d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238c0:	2900      	cmp	r1, #0
 80238c2:	db08      	blt.n	80238d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80238c6:	4288      	cmp	r0, r1
 80238c8:	dd05      	ble.n	80238d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80238ca:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80238ce:	4288      	cmp	r0, r1
 80238d0:	d315      	bcc.n	80238fe <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80238d2:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80238d6:	82a5      	strh	r5, [r4, #20]
 80238d8:	82e2      	strh	r2, [r4, #22]
 80238da:	f8a4 e018 	strh.w	lr, [r4, #24]
 80238de:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80238e2:	e7db      	b.n	802389c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80238e4:	f104 0614 	add.w	r6, r4, #20
 80238e8:	6927      	ldr	r7, [r4, #16]
 80238ea:	ce03      	ldmia	r6!, {r0, r1}
 80238ec:	6038      	str	r0, [r7, #0]
 80238ee:	6079      	str	r1, [r7, #4]
 80238f0:	6921      	ldr	r1, [r4, #16]
 80238f2:	3108      	adds	r1, #8
 80238f4:	6121      	str	r1, [r4, #16]
 80238f6:	68a1      	ldr	r1, [r4, #8]
 80238f8:	3101      	adds	r1, #1
 80238fa:	60a1      	str	r1, [r4, #8]
 80238fc:	e7bb      	b.n	8023876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80238fe:	f104 0c14 	add.w	ip, r4, #20
 8023902:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023906:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802390a:	f8c9 0000 	str.w	r0, [r9]
 802390e:	f8c9 1004 	str.w	r1, [r9, #4]
 8023912:	6921      	ldr	r1, [r4, #16]
 8023914:	3108      	adds	r1, #8
 8023916:	6121      	str	r1, [r4, #16]
 8023918:	68a1      	ldr	r1, [r4, #8]
 802391a:	3101      	adds	r1, #1
 802391c:	60a1      	str	r1, [r4, #8]
 802391e:	e7da      	b.n	80238d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023920:	9a03      	ldr	r2, [sp, #12]
 8023922:	8b61      	ldrh	r1, [r4, #26]
 8023924:	f1a2 0c20 	sub.w	ip, r2, #32
 8023928:	8b22      	ldrh	r2, [r4, #24]
 802392a:	44d4      	add	ip, sl
 802392c:	4462      	add	r2, ip
 802392e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023932:	8322      	strh	r2, [r4, #24]
 8023934:	e739      	b.n	80237aa <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023936:	9b01      	ldr	r3, [sp, #4]
 8023938:	2b00      	cmp	r3, #0
 802393a:	db3f      	blt.n	80239bc <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 802393c:	2201      	movs	r2, #1
 802393e:	f1ce 0320 	rsb	r3, lr, #32
 8023942:	920b      	str	r2, [sp, #44]	; 0x2c
 8023944:	2220      	movs	r2, #32
 8023946:	fb0a f303 	mul.w	r3, sl, r3
 802394a:	9202      	str	r2, [sp, #8]
 802394c:	9a01      	ldr	r2, [sp, #4]
 802394e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023952:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023956:	fb93 f7f2 	sdiv	r7, r3, r2
 802395a:	fb02 3317 	mls	r3, r2, r7, r3
 802395e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023962:	2b00      	cmp	r3, #0
 8023964:	9308      	str	r3, [sp, #32]
 8023966:	bfbc      	itt	lt
 8023968:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802396c:	189b      	addlt	r3, r3, r2
 802396e:	eb07 0b01 	add.w	fp, r7, r1
 8023972:	bfb8      	it	lt
 8023974:	9308      	strlt	r3, [sp, #32]
 8023976:	ea4f 136b 	mov.w	r3, fp, asr #5
 802397a:	9304      	str	r3, [sp, #16]
 802397c:	9b02      	ldr	r3, [sp, #8]
 802397e:	4573      	cmp	r3, lr
 8023980:	d133      	bne.n	80239ea <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8023982:	9b04      	ldr	r3, [sp, #16]
 8023984:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8023988:	454b      	cmp	r3, r9
 802398a:	d045      	beq.n	8023a18 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802398c:	8b62      	ldrh	r2, [r4, #26]
 802398e:	8b23      	ldrh	r3, [r4, #24]
 8023990:	4313      	orrs	r3, r2
 8023992:	d00c      	beq.n	80239ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023994:	f1b8 0f00 	cmp.w	r8, #0
 8023998:	db09      	blt.n	80239ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802399a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802399c:	4543      	cmp	r3, r8
 802399e:	dd06      	ble.n	80239ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80239a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80239a4:	429a      	cmp	r2, r3
 80239a6:	d313      	bcc.n	80239d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80239a8:	2301      	movs	r3, #1
 80239aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80239ae:	9b04      	ldr	r3, [sp, #16]
 80239b0:	82e6      	strh	r6, [r4, #22]
 80239b2:	82a3      	strh	r3, [r4, #20]
 80239b4:	2300      	movs	r3, #0
 80239b6:	8323      	strh	r3, [r4, #24]
 80239b8:	8363      	strh	r3, [r4, #26]
 80239ba:	e02d      	b.n	8023a18 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80239bc:	9a01      	ldr	r2, [sp, #4]
 80239be:	fb0a f30e 	mul.w	r3, sl, lr
 80239c2:	4252      	negs	r2, r2
 80239c4:	9201      	str	r2, [sp, #4]
 80239c6:	f04f 32ff 	mov.w	r2, #4294967295
 80239ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80239cc:	2200      	movs	r2, #0
 80239ce:	e7bc      	b.n	802394a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80239d0:	f104 0314 	add.w	r3, r4, #20
 80239d4:	6922      	ldr	r2, [r4, #16]
 80239d6:	cb03      	ldmia	r3!, {r0, r1}
 80239d8:	6010      	str	r0, [r2, #0]
 80239da:	6051      	str	r1, [r2, #4]
 80239dc:	6923      	ldr	r3, [r4, #16]
 80239de:	3308      	adds	r3, #8
 80239e0:	6123      	str	r3, [r4, #16]
 80239e2:	68a3      	ldr	r3, [r4, #8]
 80239e4:	3301      	adds	r3, #1
 80239e6:	60a3      	str	r3, [r4, #8]
 80239e8:	e7e1      	b.n	80239ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80239ea:	f00b 031f 	and.w	r3, fp, #31
 80239ee:	f001 011f 	and.w	r1, r1, #31
 80239f2:	8b20      	ldrh	r0, [r4, #24]
 80239f4:	9309      	str	r3, [sp, #36]	; 0x24
 80239f6:	9b02      	ldr	r3, [sp, #8]
 80239f8:	eba3 020e 	sub.w	r2, r3, lr
 80239fc:	8b63      	ldrh	r3, [r4, #26]
 80239fe:	9300      	str	r3, [sp, #0]
 8023a00:	9b04      	ldr	r3, [sp, #16]
 8023a02:	42ab      	cmp	r3, r5
 8023a04:	f040 80ef 	bne.w	8023be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8023a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a0a:	4410      	add	r0, r2
 8023a0c:	4419      	add	r1, r3
 8023a0e:	9b00      	ldr	r3, [sp, #0]
 8023a10:	8320      	strh	r0, [r4, #24]
 8023a12:	fb02 3101 	mla	r1, r2, r1, r3
 8023a16:	8361      	strh	r1, [r4, #26]
 8023a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a1a:	9904      	ldr	r1, [sp, #16]
 8023a1c:	4433      	add	r3, r6
 8023a1e:	9300      	str	r3, [sp, #0]
 8023a20:	9a00      	ldr	r2, [sp, #0]
 8023a22:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023a26:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8023a2a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023a2e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023a32:	4288      	cmp	r0, r1
 8023a34:	d018      	beq.n	8023a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8023a36:	8b60      	ldrh	r0, [r4, #26]
 8023a38:	8b21      	ldrh	r1, [r4, #24]
 8023a3a:	ea50 0201 	orrs.w	r2, r0, r1
 8023a3e:	d00c      	beq.n	8023a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	db0a      	blt.n	8023a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023a46:	4299      	cmp	r1, r3
 8023a48:	dd07      	ble.n	8023a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023a4a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023a4e:	4299      	cmp	r1, r3
 8023a50:	f0c0 818b 	bcc.w	8023d6a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8023a54:	2301      	movs	r3, #1
 8023a56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023a5a:	9b04      	ldr	r3, [sp, #16]
 8023a5c:	82a3      	strh	r3, [r4, #20]
 8023a5e:	9b00      	ldr	r3, [sp, #0]
 8023a60:	82e3      	strh	r3, [r4, #22]
 8023a62:	2300      	movs	r3, #0
 8023a64:	8323      	strh	r3, [r4, #24]
 8023a66:	8363      	strh	r3, [r4, #26]
 8023a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a6a:	9a00      	ldr	r2, [sp, #0]
 8023a6c:	4293      	cmp	r3, r2
 8023a6e:	f000 808d 	beq.w	8023b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8023a72:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8023a76:	9901      	ldr	r1, [sp, #4]
 8023a78:	9801      	ldr	r0, [sp, #4]
 8023a7a:	fb93 f1f1 	sdiv	r1, r3, r1
 8023a7e:	fb00 3311 	mls	r3, r0, r1, r3
 8023a82:	9106      	str	r1, [sp, #24]
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	9307      	str	r3, [sp, #28]
 8023a88:	da04      	bge.n	8023a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8023a8a:	1e4b      	subs	r3, r1, #1
 8023a8c:	9306      	str	r3, [sp, #24]
 8023a8e:	9b07      	ldr	r3, [sp, #28]
 8023a90:	4403      	add	r3, r0
 8023a92:	9307      	str	r3, [sp, #28]
 8023a94:	9b08      	ldr	r3, [sp, #32]
 8023a96:	f04f 0c00 	mov.w	ip, #0
 8023a9a:	9901      	ldr	r1, [sp, #4]
 8023a9c:	1a5b      	subs	r3, r3, r1
 8023a9e:	4659      	mov	r1, fp
 8023aa0:	9308      	str	r3, [sp, #32]
 8023aa2:	9b02      	ldr	r3, [sp, #8]
 8023aa4:	f1c3 0320 	rsb	r3, r3, #32
 8023aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8023aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023aac:	9b02      	ldr	r3, [sp, #8]
 8023aae:	1a1b      	subs	r3, r3, r0
 8023ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8023ab2:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8023ab6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023aba:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8023abe:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8023ac2:	181b      	adds	r3, r3, r0
 8023ac4:	bf58      	it	pl
 8023ac6:	9801      	ldrpl	r0, [sp, #4]
 8023ac8:	9308      	str	r3, [sp, #32]
 8023aca:	bf54      	ite	pl
 8023acc:	1a1b      	subpl	r3, r3, r0
 8023ace:	9d06      	ldrmi	r5, [sp, #24]
 8023ad0:	9802      	ldr	r0, [sp, #8]
 8023ad2:	bf5e      	ittt	pl
 8023ad4:	9308      	strpl	r3, [sp, #32]
 8023ad6:	9b06      	ldrpl	r3, [sp, #24]
 8023ad8:	1c5d      	addpl	r5, r3, #1
 8023ada:	44ab      	add	fp, r5
 8023adc:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023ae0:	9304      	str	r3, [sp, #16]
 8023ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ae4:	4283      	cmp	r3, r0
 8023ae6:	f040 815a 	bne.w	8023d9e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8023aea:	9b04      	ldr	r3, [sp, #16]
 8023aec:	9a00      	ldr	r2, [sp, #0]
 8023aee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8023af2:	4543      	cmp	r3, r8
 8023af4:	d01a      	beq.n	8023b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023af6:	8b61      	ldrh	r1, [r4, #26]
 8023af8:	8b23      	ldrh	r3, [r4, #24]
 8023afa:	430b      	orrs	r3, r1
 8023afc:	d00e      	beq.n	8023b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023afe:	f1be 0f00 	cmp.w	lr, #0
 8023b02:	db0b      	blt.n	8023b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023b06:	4573      	cmp	r3, lr
 8023b08:	dd08      	ble.n	8023b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023b0a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023b0e:	4299      	cmp	r1, r3
 8023b10:	f0c0 8138 	bcc.w	8023d84 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8023b14:	f04f 0301 	mov.w	r3, #1
 8023b18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b1c:	9b04      	ldr	r3, [sp, #16]
 8023b1e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023b22:	82a3      	strh	r3, [r4, #20]
 8023b24:	9b00      	ldr	r3, [sp, #0]
 8023b26:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023b2a:	82e3      	strh	r3, [r4, #22]
 8023b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b2e:	9a00      	ldr	r2, [sp, #0]
 8023b30:	441a      	add	r2, r3
 8023b32:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023b36:	9200      	str	r2, [sp, #0]
 8023b38:	9900      	ldr	r1, [sp, #0]
 8023b3a:	9a04      	ldr	r2, [sp, #16]
 8023b3c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8023b40:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023b48:	4288      	cmp	r0, r1
 8023b4a:	d01a      	beq.n	8023b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8023b4c:	8b60      	ldrh	r0, [r4, #26]
 8023b4e:	8b21      	ldrh	r1, [r4, #24]
 8023b50:	ea50 0201 	orrs.w	r2, r0, r1
 8023b54:	d00d      	beq.n	8023b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b56:	2b00      	cmp	r3, #0
 8023b58:	db0b      	blt.n	8023b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023b5c:	4299      	cmp	r1, r3
 8023b5e:	dd08      	ble.n	8023b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023b60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023b64:	4299      	cmp	r1, r3
 8023b66:	f0c0 81f9 	bcc.w	8023f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8023b6a:	f04f 0301 	mov.w	r3, #1
 8023b6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b72:	9b04      	ldr	r3, [sp, #16]
 8023b74:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023b78:	82a3      	strh	r3, [r4, #20]
 8023b7a:	9b00      	ldr	r3, [sp, #0]
 8023b7c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023b80:	82e3      	strh	r3, [r4, #22]
 8023b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b84:	4659      	mov	r1, fp
 8023b86:	9a00      	ldr	r2, [sp, #0]
 8023b88:	4293      	cmp	r3, r2
 8023b8a:	d192      	bne.n	8023ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8023b8c:	9b02      	ldr	r3, [sp, #8]
 8023b8e:	f1c3 0c20 	rsb	ip, r3, #32
 8023b92:	9b05      	ldr	r3, [sp, #20]
 8023b94:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8023b98:	9b03      	ldr	r3, [sp, #12]
 8023b9a:	459c      	cmp	ip, r3
 8023b9c:	f040 81f8 	bne.w	8023f90 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8023ba0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023ba4:	9a00      	ldr	r2, [sp, #0]
 8023ba6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023baa:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8023bae:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023bb2:	4288      	cmp	r0, r1
 8023bb4:	f43f ad54 	beq.w	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023bb8:	8b60      	ldrh	r0, [r4, #26]
 8023bba:	8b21      	ldrh	r1, [r4, #24]
 8023bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8023bc0:	d00c      	beq.n	8023bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	db0a      	blt.n	8023bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023bc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023bc8:	4299      	cmp	r1, r3
 8023bca:	dd07      	ble.n	8023bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023bcc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023bd0:	4299      	cmp	r1, r3
 8023bd2:	f0c0 81d0 	bcc.w	8023f76 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8023bd6:	2301      	movs	r3, #1
 8023bd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023bdc:	9b00      	ldr	r3, [sp, #0]
 8023bde:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023be2:	82e3      	strh	r3, [r4, #22]
 8023be4:	e517      	b.n	8023616 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8023be6:	2f00      	cmp	r7, #0
 8023be8:	f2c0 8097 	blt.w	8023d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8023bec:	2301      	movs	r3, #1
 8023bee:	f1c1 0c20 	rsb	ip, r1, #32
 8023bf2:	9307      	str	r3, [sp, #28]
 8023bf4:	2320      	movs	r3, #32
 8023bf6:	fb02 f20c 	mul.w	r2, r2, ip
 8023bfa:	9306      	str	r3, [sp, #24]
 8023bfc:	9b06      	ldr	r3, [sp, #24]
 8023bfe:	fb92 fcf7 	sdiv	ip, r2, r7
 8023c02:	fb07 221c 	mls	r2, r7, ip, r2
 8023c06:	4419      	add	r1, r3
 8023c08:	9b00      	ldr	r3, [sp, #0]
 8023c0a:	2a00      	cmp	r2, #0
 8023c0c:	bfbc      	itt	lt
 8023c0e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023c12:	19d2      	addlt	r2, r2, r7
 8023c14:	fb0c 3101 	mla	r1, ip, r1, r3
 8023c18:	9b07      	ldr	r3, [sp, #28]
 8023c1a:	4460      	add	r0, ip
 8023c1c:	441d      	add	r5, r3
 8023c1e:	0433      	lsls	r3, r6, #16
 8023c20:	b200      	sxth	r0, r0
 8023c22:	930a      	str	r3, [sp, #40]	; 0x28
 8023c24:	18eb      	adds	r3, r5, r3
 8023c26:	b209      	sxth	r1, r1
 8023c28:	8320      	strh	r0, [r4, #24]
 8023c2a:	454b      	cmp	r3, r9
 8023c2c:	8361      	strh	r1, [r4, #26]
 8023c2e:	d014      	beq.n	8023c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8023c30:	ea50 0301 	orrs.w	r3, r0, r1
 8023c34:	d00c      	beq.n	8023c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c36:	f1b8 0f00 	cmp.w	r8, #0
 8023c3a:	db09      	blt.n	8023c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023c3e:	4543      	cmp	r3, r8
 8023c40:	dd06      	ble.n	8023c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023c42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023c46:	4299      	cmp	r1, r3
 8023c48:	d36e      	bcc.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8023c4a:	2301      	movs	r3, #1
 8023c4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023c50:	2300      	movs	r3, #0
 8023c52:	82a5      	strh	r5, [r4, #20]
 8023c54:	82e6      	strh	r6, [r4, #22]
 8023c56:	8323      	strh	r3, [r4, #24]
 8023c58:	8363      	strh	r3, [r4, #26]
 8023c5a:	9904      	ldr	r1, [sp, #16]
 8023c5c:	eb0e 030c 	add.w	r3, lr, ip
 8023c60:	42a9      	cmp	r1, r5
 8023c62:	d04d      	beq.n	8023d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8023c64:	9902      	ldr	r1, [sp, #8]
 8023c66:	1bd2      	subs	r2, r2, r7
 8023c68:	1ac9      	subs	r1, r1, r3
 8023c6a:	9200      	str	r2, [sp, #0]
 8023c6c:	448c      	add	ip, r1
 8023c6e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8023c72:	fb9c fef7 	sdiv	lr, ip, r7
 8023c76:	fb07 cc1e 	mls	ip, r7, lr, ip
 8023c7a:	f1bc 0f00 	cmp.w	ip, #0
 8023c7e:	bfbc      	itt	lt
 8023c80:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023c84:	44bc      	addlt	ip, r7
 8023c86:	f10e 0101 	add.w	r1, lr, #1
 8023c8a:	910d      	str	r1, [sp, #52]	; 0x34
 8023c8c:	9a00      	ldr	r2, [sp, #0]
 8023c8e:	8b20      	ldrh	r0, [r4, #24]
 8023c90:	eb12 020c 	adds.w	r2, r2, ip
 8023c94:	8b61      	ldrh	r1, [r4, #26]
 8023c96:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023c9a:	9200      	str	r2, [sp, #0]
 8023c9c:	bf5b      	ittet	pl
 8023c9e:	1bd2      	subpl	r2, r2, r7
 8023ca0:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8023ca4:	46f0      	movmi	r8, lr
 8023ca6:	9200      	strpl	r2, [sp, #0]
 8023ca8:	9a07      	ldr	r2, [sp, #28]
 8023caa:	4440      	add	r0, r8
 8023cac:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023cb0:	4443      	add	r3, r8
 8023cb2:	4415      	add	r5, r2
 8023cb4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cba:	b200      	sxth	r0, r0
 8023cbc:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023cc0:	442a      	add	r2, r5
 8023cc2:	b209      	sxth	r1, r1
 8023cc4:	8320      	strh	r0, [r4, #24]
 8023cc6:	454a      	cmp	r2, r9
 8023cc8:	8361      	strh	r1, [r4, #26]
 8023cca:	d016      	beq.n	8023cfa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8023ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8023cd0:	d00d      	beq.n	8023cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cd2:	f1b8 0f00 	cmp.w	r8, #0
 8023cd6:	db0a      	blt.n	8023cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023cda:	4541      	cmp	r1, r8
 8023cdc:	dd07      	ble.n	8023cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023cde:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023ce2:	4288      	cmp	r0, r1
 8023ce4:	d330      	bcc.n	8023d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8023ce6:	f04f 0201 	mov.w	r2, #1
 8023cea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023cee:	f04f 0200 	mov.w	r2, #0
 8023cf2:	82a5      	strh	r5, [r4, #20]
 8023cf4:	82e6      	strh	r6, [r4, #22]
 8023cf6:	8322      	strh	r2, [r4, #24]
 8023cf8:	8362      	strh	r2, [r4, #26]
 8023cfa:	9904      	ldr	r1, [sp, #16]
 8023cfc:	42a9      	cmp	r1, r5
 8023cfe:	d1c5      	bne.n	8023c8c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8023d00:	9a02      	ldr	r2, [sp, #8]
 8023d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023d04:	1ad3      	subs	r3, r2, r3
 8023d06:	8b22      	ldrh	r2, [r4, #24]
 8023d08:	3120      	adds	r1, #32
 8023d0a:	441a      	add	r2, r3
 8023d0c:	8322      	strh	r2, [r4, #24]
 8023d0e:	9a06      	ldr	r2, [sp, #24]
 8023d10:	1a89      	subs	r1, r1, r2
 8023d12:	8b62      	ldrh	r2, [r4, #26]
 8023d14:	fb03 2301 	mla	r3, r3, r1, r2
 8023d18:	e64e      	b.n	80239b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8023d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8023d1e:	434a      	muls	r2, r1
 8023d20:	427f      	negs	r7, r7
 8023d22:	9307      	str	r3, [sp, #28]
 8023d24:	2300      	movs	r3, #0
 8023d26:	e768      	b.n	8023bfa <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8023d28:	f104 0314 	add.w	r3, r4, #20
 8023d2c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023d30:	cb03      	ldmia	r3!, {r0, r1}
 8023d32:	f8c8 0000 	str.w	r0, [r8]
 8023d36:	f8c8 1004 	str.w	r1, [r8, #4]
 8023d3a:	6923      	ldr	r3, [r4, #16]
 8023d3c:	3308      	adds	r3, #8
 8023d3e:	6123      	str	r3, [r4, #16]
 8023d40:	68a3      	ldr	r3, [r4, #8]
 8023d42:	3301      	adds	r3, #1
 8023d44:	60a3      	str	r3, [r4, #8]
 8023d46:	e783      	b.n	8023c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023d48:	f104 0814 	add.w	r8, r4, #20
 8023d4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023d50:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023d54:	f8c9 0000 	str.w	r0, [r9]
 8023d58:	f8c9 1004 	str.w	r1, [r9, #4]
 8023d5c:	6921      	ldr	r1, [r4, #16]
 8023d5e:	3108      	adds	r1, #8
 8023d60:	6121      	str	r1, [r4, #16]
 8023d62:	68a1      	ldr	r1, [r4, #8]
 8023d64:	3101      	adds	r1, #1
 8023d66:	60a1      	str	r1, [r4, #8]
 8023d68:	e7c1      	b.n	8023cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023d6a:	f104 0314 	add.w	r3, r4, #20
 8023d6e:	6925      	ldr	r5, [r4, #16]
 8023d70:	cb03      	ldmia	r3!, {r0, r1}
 8023d72:	6028      	str	r0, [r5, #0]
 8023d74:	6069      	str	r1, [r5, #4]
 8023d76:	6923      	ldr	r3, [r4, #16]
 8023d78:	3308      	adds	r3, #8
 8023d7a:	6123      	str	r3, [r4, #16]
 8023d7c:	68a3      	ldr	r3, [r4, #8]
 8023d7e:	3301      	adds	r3, #1
 8023d80:	60a3      	str	r3, [r4, #8]
 8023d82:	e66a      	b.n	8023a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023d84:	f104 0314 	add.w	r3, r4, #20
 8023d88:	6925      	ldr	r5, [r4, #16]
 8023d8a:	cb03      	ldmia	r3!, {r0, r1}
 8023d8c:	6028      	str	r0, [r5, #0]
 8023d8e:	6069      	str	r1, [r5, #4]
 8023d90:	6923      	ldr	r3, [r4, #16]
 8023d92:	3308      	adds	r3, #8
 8023d94:	6123      	str	r3, [r4, #16]
 8023d96:	68a3      	ldr	r3, [r4, #8]
 8023d98:	3301      	adds	r3, #1
 8023d9a:	60a3      	str	r3, [r4, #8]
 8023d9c:	e6be      	b.n	8023b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023d9e:	f00b 031f 	and.w	r3, fp, #31
 8023da2:	114f      	asrs	r7, r1, #5
 8023da4:	8b20      	ldrh	r0, [r4, #24]
 8023da6:	f001 011f 	and.w	r1, r1, #31
 8023daa:	930f      	str	r3, [sp, #60]	; 0x3c
 8023dac:	9b04      	ldr	r3, [sp, #16]
 8023dae:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023db2:	429f      	cmp	r7, r3
 8023db4:	d10a      	bne.n	8023dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8023db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db8:	4418      	add	r0, r3
 8023dba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023dbc:	4419      	add	r1, r3
 8023dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dc0:	8320      	strh	r0, [r4, #24]
 8023dc2:	fb03 9901 	mla	r9, r3, r1, r9
 8023dc6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8023dca:	e6af      	b.n	8023b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023dcc:	2d00      	cmp	r5, #0
 8023dce:	f2c0 809b 	blt.w	8023f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8023dd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023dd4:	f1c1 0320 	rsb	r3, r1, #32
 8023dd8:	4373      	muls	r3, r6
 8023dda:	2601      	movs	r6, #1
 8023ddc:	960e      	str	r6, [sp, #56]	; 0x38
 8023dde:	2620      	movs	r6, #32
 8023de0:	960d      	str	r6, [sp, #52]	; 0x34
 8023de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023de4:	fb93 f6f5 	sdiv	r6, r3, r5
 8023de8:	4411      	add	r1, r2
 8023dea:	fb05 3316 	mls	r3, r5, r6, r3
 8023dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	4417      	add	r7, r2
 8023df4:	9a00      	ldr	r2, [sp, #0]
 8023df6:	bfbc      	itt	lt
 8023df8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023dfc:	195b      	addlt	r3, r3, r5
 8023dfe:	0412      	lsls	r2, r2, #16
 8023e00:	fb06 9101 	mla	r1, r6, r1, r9
 8023e04:	4430      	add	r0, r6
 8023e06:	eb07 0902 	add.w	r9, r7, r2
 8023e0a:	9210      	str	r2, [sp, #64]	; 0x40
 8023e0c:	b200      	sxth	r0, r0
 8023e0e:	b209      	sxth	r1, r1
 8023e10:	45c1      	cmp	r9, r8
 8023e12:	8320      	strh	r0, [r4, #24]
 8023e14:	8361      	strh	r1, [r4, #26]
 8023e16:	d017      	beq.n	8023e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8023e18:	ea50 0201 	orrs.w	r2, r0, r1
 8023e1c:	d00d      	beq.n	8023e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e1e:	f1be 0f00 	cmp.w	lr, #0
 8023e22:	db0a      	blt.n	8023e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e26:	4571      	cmp	r1, lr
 8023e28:	dd07      	ble.n	8023e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023e2a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e2e:	4288      	cmp	r0, r1
 8023e30:	d372      	bcc.n	8023f18 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8023e32:	f04f 0201 	mov.w	r2, #1
 8023e36:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023e3a:	9a00      	ldr	r2, [sp, #0]
 8023e3c:	82a7      	strh	r7, [r4, #20]
 8023e3e:	82e2      	strh	r2, [r4, #22]
 8023e40:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023e44:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e4a:	eb02 0e06 	add.w	lr, r2, r6
 8023e4e:	9a04      	ldr	r2, [sp, #16]
 8023e50:	42ba      	cmp	r2, r7
 8023e52:	d049      	beq.n	8023ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8023e54:	9a02      	ldr	r2, [sp, #8]
 8023e56:	1b5b      	subs	r3, r3, r5
 8023e58:	eba2 010e 	sub.w	r1, r2, lr
 8023e5c:	440e      	add	r6, r1
 8023e5e:	0176      	lsls	r6, r6, #5
 8023e60:	fb96 f8f5 	sdiv	r8, r6, r5
 8023e64:	fb05 6618 	mls	r6, r5, r8, r6
 8023e68:	2e00      	cmp	r6, #0
 8023e6a:	bfbc      	itt	lt
 8023e6c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8023e70:	1976      	addlt	r6, r6, r5
 8023e72:	f108 0201 	add.w	r2, r8, #1
 8023e76:	9211      	str	r2, [sp, #68]	; 0x44
 8023e78:	199b      	adds	r3, r3, r6
 8023e7a:	8b20      	ldrh	r0, [r4, #24]
 8023e7c:	8b61      	ldrh	r1, [r4, #26]
 8023e7e:	bf54      	ite	pl
 8023e80:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8023e84:	46c1      	movmi	r9, r8
 8023e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e88:	bf58      	it	pl
 8023e8a:	1b5b      	subpl	r3, r3, r5
 8023e8c:	4448      	add	r0, r9
 8023e8e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8023e92:	4417      	add	r7, r2
 8023e94:	44ce      	add	lr, r9
 8023e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e98:	b200      	sxth	r0, r0
 8023e9a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8023e9e:	b209      	sxth	r1, r1
 8023ea0:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023ea4:	443a      	add	r2, r7
 8023ea6:	8320      	strh	r0, [r4, #24]
 8023ea8:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023eac:	8361      	strh	r1, [r4, #26]
 8023eae:	4552      	cmp	r2, sl
 8023eb0:	d017      	beq.n	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8023eb2:	ea50 0201 	orrs.w	r2, r0, r1
 8023eb6:	d00d      	beq.n	8023ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023eb8:	f1b9 0f00 	cmp.w	r9, #0
 8023ebc:	db0a      	blt.n	8023ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023ebe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023ec0:	4549      	cmp	r1, r9
 8023ec2:	dd07      	ble.n	8023ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023ec4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023ec8:	4288      	cmp	r0, r1
 8023eca:	d336      	bcc.n	8023f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8023ecc:	f04f 0201 	mov.w	r2, #1
 8023ed0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023ed4:	9a00      	ldr	r2, [sp, #0]
 8023ed6:	82a7      	strh	r7, [r4, #20]
 8023ed8:	82e2      	strh	r2, [r4, #22]
 8023eda:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023ede:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023ee2:	9a04      	ldr	r2, [sp, #16]
 8023ee4:	42ba      	cmp	r2, r7
 8023ee6:	d1c7      	bne.n	8023e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8023ee8:	9b02      	ldr	r3, [sp, #8]
 8023eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023eec:	eba3 0e0e 	sub.w	lr, r3, lr
 8023ef0:	8b23      	ldrh	r3, [r4, #24]
 8023ef2:	3120      	adds	r1, #32
 8023ef4:	4473      	add	r3, lr
 8023ef6:	8323      	strh	r3, [r4, #24]
 8023ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023efa:	1ac9      	subs	r1, r1, r3
 8023efc:	8b63      	ldrh	r3, [r4, #26]
 8023efe:	fb0e 3e01 	mla	lr, lr, r1, r3
 8023f02:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023f06:	e611      	b.n	8023b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023f08:	f04f 36ff 	mov.w	r6, #4294967295
 8023f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f0e:	426d      	negs	r5, r5
 8023f10:	960e      	str	r6, [sp, #56]	; 0x38
 8023f12:	2600      	movs	r6, #0
 8023f14:	434b      	muls	r3, r1
 8023f16:	e763      	b.n	8023de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8023f18:	f104 0e14 	add.w	lr, r4, #20
 8023f1c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023f20:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023f24:	f8c8 0000 	str.w	r0, [r8]
 8023f28:	f8c8 1004 	str.w	r1, [r8, #4]
 8023f2c:	6921      	ldr	r1, [r4, #16]
 8023f2e:	3108      	adds	r1, #8
 8023f30:	6121      	str	r1, [r4, #16]
 8023f32:	68a1      	ldr	r1, [r4, #8]
 8023f34:	3101      	adds	r1, #1
 8023f36:	60a1      	str	r1, [r4, #8]
 8023f38:	e77f      	b.n	8023e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023f3a:	f104 0914 	add.w	r9, r4, #20
 8023f3e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023f42:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8023f46:	f8ca 0000 	str.w	r0, [sl]
 8023f4a:	f8ca 1004 	str.w	r1, [sl, #4]
 8023f4e:	6921      	ldr	r1, [r4, #16]
 8023f50:	3108      	adds	r1, #8
 8023f52:	6121      	str	r1, [r4, #16]
 8023f54:	68a1      	ldr	r1, [r4, #8]
 8023f56:	3101      	adds	r1, #1
 8023f58:	60a1      	str	r1, [r4, #8]
 8023f5a:	e7bb      	b.n	8023ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023f5c:	f104 0314 	add.w	r3, r4, #20
 8023f60:	6925      	ldr	r5, [r4, #16]
 8023f62:	cb03      	ldmia	r3!, {r0, r1}
 8023f64:	6028      	str	r0, [r5, #0]
 8023f66:	6069      	str	r1, [r5, #4]
 8023f68:	6923      	ldr	r3, [r4, #16]
 8023f6a:	3308      	adds	r3, #8
 8023f6c:	6123      	str	r3, [r4, #16]
 8023f6e:	68a3      	ldr	r3, [r4, #8]
 8023f70:	3301      	adds	r3, #1
 8023f72:	60a3      	str	r3, [r4, #8]
 8023f74:	e5fd      	b.n	8023b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023f76:	f104 0314 	add.w	r3, r4, #20
 8023f7a:	6925      	ldr	r5, [r4, #16]
 8023f7c:	cb03      	ldmia	r3!, {r0, r1}
 8023f7e:	6028      	str	r0, [r5, #0]
 8023f80:	6069      	str	r1, [r5, #4]
 8023f82:	6923      	ldr	r3, [r4, #16]
 8023f84:	3308      	adds	r3, #8
 8023f86:	6123      	str	r3, [r4, #16]
 8023f88:	68a3      	ldr	r3, [r4, #8]
 8023f8a:	3301      	adds	r3, #1
 8023f8c:	60a3      	str	r3, [r4, #8]
 8023f8e:	e625      	b.n	8023bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023f90:	9b05      	ldr	r3, [sp, #20]
 8023f92:	ea4f 176b 	mov.w	r7, fp, asr #5
 8023f96:	f00b 081f 	and.w	r8, fp, #31
 8023f9a:	8b20      	ldrh	r0, [r4, #24]
 8023f9c:	f003 031f 	and.w	r3, r3, #31
 8023fa0:	4577      	cmp	r7, lr
 8023fa2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023fa6:	9302      	str	r3, [sp, #8]
 8023fa8:	9b03      	ldr	r3, [sp, #12]
 8023faa:	eba3 050c 	sub.w	r5, r3, ip
 8023fae:	d108      	bne.n	8023fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8023fb0:	9b02      	ldr	r3, [sp, #8]
 8023fb2:	4428      	add	r0, r5
 8023fb4:	4498      	add	r8, r3
 8023fb6:	8320      	strh	r0, [r4, #24]
 8023fb8:	fb05 9508 	mla	r5, r5, r8, r9
 8023fbc:	8365      	strh	r5, [r4, #26]
 8023fbe:	f7ff bb4f 	b.w	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023fc2:	9b05      	ldr	r3, [sp, #20]
 8023fc4:	ebb3 030b 	subs.w	r3, r3, fp
 8023fc8:	f100 809c 	bmi.w	8024104 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8023fcc:	f1c8 0120 	rsb	r1, r8, #32
 8023fd0:	2201      	movs	r2, #1
 8023fd2:	f04f 0b20 	mov.w	fp, #32
 8023fd6:	434d      	muls	r5, r1
 8023fd8:	9201      	str	r2, [sp, #4]
 8023fda:	9a01      	ldr	r2, [sp, #4]
 8023fdc:	44d8      	add	r8, fp
 8023fde:	fb95 f6f3 	sdiv	r6, r5, r3
 8023fe2:	fb03 5516 	mls	r5, r3, r6, r5
 8023fe6:	4417      	add	r7, r2
 8023fe8:	9a00      	ldr	r2, [sp, #0]
 8023fea:	2d00      	cmp	r5, #0
 8023fec:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8023ff0:	bfbc      	itt	lt
 8023ff2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023ff6:	18ed      	addlt	r5, r5, r3
 8023ff8:	eb07 0a02 	add.w	sl, r7, r2
 8023ffc:	9204      	str	r2, [sp, #16]
 8023ffe:	fb06 9808 	mla	r8, r6, r8, r9
 8024002:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024006:	4430      	add	r0, r6
 8024008:	fa0f f188 	sxth.w	r1, r8
 802400c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024010:	b200      	sxth	r0, r0
 8024012:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024016:	8361      	strh	r1, [r4, #26]
 8024018:	8320      	strh	r0, [r4, #24]
 802401a:	45ca      	cmp	sl, r9
 802401c:	d015      	beq.n	802404a <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802401e:	ea50 0201 	orrs.w	r2, r0, r1
 8024022:	d00c      	beq.n	802403e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024024:	f1b8 0f00 	cmp.w	r8, #0
 8024028:	db09      	blt.n	802403e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802402a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802402c:	4541      	cmp	r1, r8
 802402e:	dd06      	ble.n	802403e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024030:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024034:	4288      	cmp	r0, r1
 8024036:	d36e      	bcc.n	8024116 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024038:	2101      	movs	r1, #1
 802403a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802403e:	2100      	movs	r1, #0
 8024040:	9a00      	ldr	r2, [sp, #0]
 8024042:	82a7      	strh	r7, [r4, #20]
 8024044:	82e2      	strh	r2, [r4, #22]
 8024046:	8321      	strh	r1, [r4, #24]
 8024048:	8361      	strh	r1, [r4, #26]
 802404a:	45be      	cmp	lr, r7
 802404c:	44b4      	add	ip, r6
 802404e:	d048      	beq.n	80240e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024050:	9a03      	ldr	r2, [sp, #12]
 8024052:	1aed      	subs	r5, r5, r3
 8024054:	eba2 010c 	sub.w	r1, r2, ip
 8024058:	440e      	add	r6, r1
 802405a:	0176      	lsls	r6, r6, #5
 802405c:	fb96 f8f3 	sdiv	r8, r6, r3
 8024060:	fb03 6618 	mls	r6, r3, r8, r6
 8024064:	2e00      	cmp	r6, #0
 8024066:	bfbc      	itt	lt
 8024068:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802406c:	18f6      	addlt	r6, r6, r3
 802406e:	f108 0201 	add.w	r2, r8, #1
 8024072:	9205      	str	r2, [sp, #20]
 8024074:	19ad      	adds	r5, r5, r6
 8024076:	8b20      	ldrh	r0, [r4, #24]
 8024078:	8b61      	ldrh	r1, [r4, #26]
 802407a:	bf54      	ite	pl
 802407c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024080:	46c1      	movmi	r9, r8
 8024082:	9a01      	ldr	r2, [sp, #4]
 8024084:	bf58      	it	pl
 8024086:	1aed      	subpl	r5, r5, r3
 8024088:	4448      	add	r0, r9
 802408a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802408e:	4417      	add	r7, r2
 8024090:	44cc      	add	ip, r9
 8024092:	9a04      	ldr	r2, [sp, #16]
 8024094:	b200      	sxth	r0, r0
 8024096:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802409a:	b209      	sxth	r1, r1
 802409c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80240a0:	443a      	add	r2, r7
 80240a2:	8320      	strh	r0, [r4, #24]
 80240a4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80240a8:	8361      	strh	r1, [r4, #26]
 80240aa:	4552      	cmp	r2, sl
 80240ac:	d017      	beq.n	80240de <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80240ae:	ea50 0201 	orrs.w	r2, r0, r1
 80240b2:	d00d      	beq.n	80240d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80240b4:	f1b9 0f00 	cmp.w	r9, #0
 80240b8:	db0a      	blt.n	80240d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80240ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80240bc:	4549      	cmp	r1, r9
 80240be:	dd07      	ble.n	80240d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80240c0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80240c4:	4288      	cmp	r0, r1
 80240c6:	d337      	bcc.n	8024138 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80240c8:	f04f 0201 	mov.w	r2, #1
 80240cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80240d0:	9a00      	ldr	r2, [sp, #0]
 80240d2:	82a7      	strh	r7, [r4, #20]
 80240d4:	82e2      	strh	r2, [r4, #22]
 80240d6:	f04f 0200 	mov.w	r2, #0
 80240da:	8322      	strh	r2, [r4, #24]
 80240dc:	8362      	strh	r2, [r4, #26]
 80240de:	45be      	cmp	lr, r7
 80240e0:	d1c8      	bne.n	8024074 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80240e2:	9b03      	ldr	r3, [sp, #12]
 80240e4:	8b62      	ldrh	r2, [r4, #26]
 80240e6:	eba3 0c0c 	sub.w	ip, r3, ip
 80240ea:	8b23      	ldrh	r3, [r4, #24]
 80240ec:	4463      	add	r3, ip
 80240ee:	8323      	strh	r3, [r4, #24]
 80240f0:	9b02      	ldr	r3, [sp, #8]
 80240f2:	3320      	adds	r3, #32
 80240f4:	eba3 030b 	sub.w	r3, r3, fp
 80240f8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80240fc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024100:	f7ff baae 	b.w	8023660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024104:	f04f 32ff 	mov.w	r2, #4294967295
 8024108:	fb05 f508 	mul.w	r5, r5, r8
 802410c:	425b      	negs	r3, r3
 802410e:	f04f 0b00 	mov.w	fp, #0
 8024112:	9201      	str	r2, [sp, #4]
 8024114:	e761      	b.n	8023fda <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8024116:	f104 0814 	add.w	r8, r4, #20
 802411a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802411e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024122:	f8c9 0000 	str.w	r0, [r9]
 8024126:	f8c9 1004 	str.w	r1, [r9, #4]
 802412a:	6921      	ldr	r1, [r4, #16]
 802412c:	3108      	adds	r1, #8
 802412e:	6121      	str	r1, [r4, #16]
 8024130:	68a1      	ldr	r1, [r4, #8]
 8024132:	3101      	adds	r1, #1
 8024134:	60a1      	str	r1, [r4, #8]
 8024136:	e782      	b.n	802403e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024138:	f104 0914 	add.w	r9, r4, #20
 802413c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024140:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024144:	f8ca 0000 	str.w	r0, [sl]
 8024148:	f8ca 1004 	str.w	r1, [sl, #4]
 802414c:	6921      	ldr	r1, [r4, #16]
 802414e:	3108      	adds	r1, #8
 8024150:	6121      	str	r1, [r4, #16]
 8024152:	68a1      	ldr	r1, [r4, #8]
 8024154:	3101      	adds	r1, #1
 8024156:	60a1      	str	r1, [r4, #8]
 8024158:	e7ba      	b.n	80240d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802415a <_ZN8touchgfx7Outline6lineToEii>:
 802415a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802415c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802415e:	4604      	mov	r4, r0
 8024160:	460d      	mov	r5, r1
 8024162:	4616      	mov	r6, r2
 8024164:	079b      	lsls	r3, r3, #30
 8024166:	d526      	bpl.n	80241b6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024168:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802416c:	ea85 0001 	eor.w	r0, r5, r1
 8024170:	ea86 0302 	eor.w	r3, r6, r2
 8024174:	4303      	orrs	r3, r0
 8024176:	d01e      	beq.n	80241b6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024178:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802417a:	114b      	asrs	r3, r1, #5
 802417c:	9600      	str	r6, [sp, #0]
 802417e:	4283      	cmp	r3, r0
 8024180:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024182:	bfb8      	it	lt
 8024184:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024186:	3301      	adds	r3, #1
 8024188:	4283      	cmp	r3, r0
 802418a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802418c:	bfc8      	it	gt
 802418e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024190:	116b      	asrs	r3, r5, #5
 8024192:	4283      	cmp	r3, r0
 8024194:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024196:	bfb8      	it	lt
 8024198:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802419a:	3301      	adds	r3, #1
 802419c:	4283      	cmp	r3, r0
 802419e:	4620      	mov	r0, r4
 80241a0:	bfc8      	it	gt
 80241a2:	6363      	strgt	r3, [r4, #52]	; 0x34
 80241a4:	462b      	mov	r3, r5
 80241a6:	f7ff f9e3 	bl	8023570 <_ZN8touchgfx7Outline10renderLineEiiii>
 80241aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80241ac:	f043 0301 	orr.w	r3, r3, #1
 80241b0:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80241b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80241b6:	b002      	add	sp, #8
 80241b8:	bd70      	pop	{r4, r5, r6, pc}

080241ba <_ZN8touchgfx7Outline6moveToEii>:
 80241ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80241be:	4615      	mov	r5, r2
 80241c0:	4604      	mov	r4, r0
 80241c2:	460e      	mov	r6, r1
 80241c4:	079a      	lsls	r2, r3, #30
 80241c6:	d401      	bmi.n	80241cc <_ZN8touchgfx7Outline6moveToEii+0x12>
 80241c8:	f7ff f98c 	bl	80234e4 <_ZN8touchgfx7Outline5resetEv>
 80241cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80241ce:	07db      	lsls	r3, r3, #31
 80241d0:	d504      	bpl.n	80241dc <_ZN8touchgfx7Outline6moveToEii+0x22>
 80241d2:	4620      	mov	r0, r4
 80241d4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80241d8:	f7ff ffbf 	bl	802415a <_ZN8touchgfx7Outline6lineToEii>
 80241dc:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80241e0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80241e4:	116f      	asrs	r7, r5, #5
 80241e6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80241ea:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80241ee:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80241f2:	4291      	cmp	r1, r2
 80241f4:	d015      	beq.n	8024222 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80241f6:	8b61      	ldrh	r1, [r4, #26]
 80241f8:	8b22      	ldrh	r2, [r4, #24]
 80241fa:	430a      	orrs	r2, r1
 80241fc:	d00b      	beq.n	8024216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80241fe:	2b00      	cmp	r3, #0
 8024200:	db09      	blt.n	8024216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024202:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024204:	429a      	cmp	r2, r3
 8024206:	dd06      	ble.n	8024216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024208:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802420c:	429a      	cmp	r2, r3
 802420e:	d30d      	bcc.n	802422c <_ZN8touchgfx7Outline6moveToEii+0x72>
 8024210:	2301      	movs	r3, #1
 8024212:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024216:	2300      	movs	r3, #0
 8024218:	f8a4 c014 	strh.w	ip, [r4, #20]
 802421c:	82e7      	strh	r7, [r4, #22]
 802421e:	8323      	strh	r3, [r4, #24]
 8024220:	8363      	strh	r3, [r4, #26]
 8024222:	61e6      	str	r6, [r4, #28]
 8024224:	62a5      	str	r5, [r4, #40]	; 0x28
 8024226:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802422c:	f104 0314 	add.w	r3, r4, #20
 8024230:	6922      	ldr	r2, [r4, #16]
 8024232:	cb03      	ldmia	r3!, {r0, r1}
 8024234:	6010      	str	r0, [r2, #0]
 8024236:	6051      	str	r1, [r2, #4]
 8024238:	6923      	ldr	r3, [r4, #16]
 802423a:	3308      	adds	r3, #8
 802423c:	6123      	str	r3, [r4, #16]
 802423e:	68a3      	ldr	r3, [r4, #8]
 8024240:	3301      	adds	r3, #1
 8024242:	60a3      	str	r3, [r4, #8]
 8024244:	e7e7      	b.n	8024216 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08024246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8024246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802424a:	b0d1      	sub	sp, #324	; 0x144
 802424c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024250:	466c      	mov	r4, sp
 8024252:	1a0d      	subs	r5, r1, r0
 8024254:	f100 0208 	add.w	r2, r0, #8
 8024258:	2d48      	cmp	r5, #72	; 0x48
 802425a:	f340 80ba 	ble.w	80243d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802425e:	112d      	asrs	r5, r5, #4
 8024260:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024264:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024268:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802426c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024270:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024274:	681e      	ldr	r6, [r3, #0]
 8024276:	6006      	str	r6, [r0, #0]
 8024278:	685e      	ldr	r6, [r3, #4]
 802427a:	6046      	str	r6, [r0, #4]
 802427c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024280:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024284:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024288:	80df      	strh	r7, [r3, #6]
 802428a:	f1a1 0308 	sub.w	r3, r1, #8
 802428e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024292:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024296:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802429a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802429e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80242a2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80242a6:	45ac      	cmp	ip, r5
 80242a8:	dd0f      	ble.n	80242ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80242aa:	681d      	ldr	r5, [r3, #0]
 80242ac:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80242b0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80242b4:	6015      	str	r5, [r2, #0]
 80242b6:	685d      	ldr	r5, [r3, #4]
 80242b8:	6055      	str	r5, [r2, #4]
 80242ba:	f821 7c08 	strh.w	r7, [r1, #-8]
 80242be:	f821 6c06 	strh.w	r6, [r1, #-6]
 80242c2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80242c6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80242ca:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80242ce:	f9b0 7000 	ldrsh.w	r7, [r0]
 80242d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80242d6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80242da:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80242de:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80242e2:	4565      	cmp	r5, ip
 80242e4:	dd0d      	ble.n	8024302 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80242e6:	6815      	ldr	r5, [r2, #0]
 80242e8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80242ec:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80242f0:	6005      	str	r5, [r0, #0]
 80242f2:	6855      	ldr	r5, [r2, #4]
 80242f4:	8107      	strh	r7, [r0, #8]
 80242f6:	6045      	str	r5, [r0, #4]
 80242f8:	8146      	strh	r6, [r0, #10]
 80242fa:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80242fe:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024302:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024306:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802430a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802430e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024312:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024316:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802431a:	45ac      	cmp	ip, r5
 802431c:	dd0f      	ble.n	802433e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802431e:	681d      	ldr	r5, [r3, #0]
 8024320:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024324:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024328:	6005      	str	r5, [r0, #0]
 802432a:	685d      	ldr	r5, [r3, #4]
 802432c:	6045      	str	r5, [r0, #4]
 802432e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024332:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024336:	f821 ec04 	strh.w	lr, [r1, #-4]
 802433a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802433e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024342:	f102 0508 	add.w	r5, r2, #8
 8024346:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802434a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802434e:	462f      	mov	r7, r5
 8024350:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024354:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024358:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802435c:	45b2      	cmp	sl, r6
 802435e:	dc18      	bgt.n	8024392 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024360:	3b08      	subs	r3, #8
 8024362:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024366:	f9b3 6000 	ldrsh.w	r6, [r3]
 802436a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802436e:	45b2      	cmp	sl, r6
 8024370:	dbf6      	blt.n	8024360 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024372:	42ab      	cmp	r3, r5
 8024374:	681e      	ldr	r6, [r3, #0]
 8024376:	d30e      	bcc.n	8024396 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024378:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802437c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024380:	602e      	str	r6, [r5, #0]
 8024382:	685e      	ldr	r6, [r3, #4]
 8024384:	606e      	str	r6, [r5, #4]
 8024386:	f8a3 9000 	strh.w	r9, [r3]
 802438a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802438e:	809f      	strh	r7, [r3, #4]
 8024390:	80da      	strh	r2, [r3, #6]
 8024392:	462a      	mov	r2, r5
 8024394:	e7d3      	b.n	802433e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024396:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802439a:	6006      	str	r6, [r0, #0]
 802439c:	685e      	ldr	r6, [r3, #4]
 802439e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80243a2:	6046      	str	r6, [r0, #4]
 80243a4:	1a1e      	subs	r6, r3, r0
 80243a6:	80da      	strh	r2, [r3, #6]
 80243a8:	1b4a      	subs	r2, r1, r5
 80243aa:	f8a3 e000 	strh.w	lr, [r3]
 80243ae:	10d2      	asrs	r2, r2, #3
 80243b0:	f8a3 c002 	strh.w	ip, [r3, #2]
 80243b4:	f8a3 8004 	strh.w	r8, [r3, #4]
 80243b8:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80243bc:	bfb5      	itete	lt
 80243be:	e9c4 0300 	strdlt	r0, r3, [r4]
 80243c2:	4607      	movge	r7, r0
 80243c4:	460b      	movlt	r3, r1
 80243c6:	e9c4 5100 	strdge	r5, r1, [r4]
 80243ca:	4638      	mov	r0, r7
 80243cc:	3408      	adds	r4, #8
 80243ce:	4619      	mov	r1, r3
 80243d0:	e73f      	b.n	8024252 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80243d2:	4291      	cmp	r1, r2
 80243d4:	d925      	bls.n	8024422 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80243d6:	f1a2 0310 	sub.w	r3, r2, #16
 80243da:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80243de:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80243e2:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80243e6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80243ea:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80243ee:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80243f2:	42b5      	cmp	r5, r6
 80243f4:	dd13      	ble.n	802441e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80243f6:	461d      	mov	r5, r3
 80243f8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80243fc:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024400:	3b08      	subs	r3, #8
 8024402:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024406:	619e      	str	r6, [r3, #24]
 8024408:	42a8      	cmp	r0, r5
 802440a:	686e      	ldr	r6, [r5, #4]
 802440c:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024410:	61de      	str	r6, [r3, #28]
 8024412:	825f      	strh	r7, [r3, #18]
 8024414:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024418:	f8a3 e016 	strh.w	lr, [r3, #22]
 802441c:	d1dd      	bne.n	80243da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802441e:	3208      	adds	r2, #8
 8024420:	e7d7      	b.n	80243d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024422:	466b      	mov	r3, sp
 8024424:	429c      	cmp	r4, r3
 8024426:	d903      	bls.n	8024430 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024428:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802442c:	3c08      	subs	r4, #8
 802442e:	e710      	b.n	8024252 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024430:	b051      	add	sp, #324	; 0x144
 8024432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024436 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024436:	6881      	ldr	r1, [r0, #8]
 8024438:	b111      	cbz	r1, 8024440 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802443a:	68c0      	ldr	r0, [r0, #12]
 802443c:	f7ff bf03 	b.w	8024246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024440:	4770      	bx	lr

08024442 <_ZN8touchgfx7Outline8getCellsEv>:
 8024442:	b510      	push	{r4, lr}
 8024444:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024446:	4604      	mov	r4, r0
 8024448:	07da      	lsls	r2, r3, #31
 802444a:	d507      	bpl.n	802445c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802444c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024450:	f7ff fe83 	bl	802415a <_ZN8touchgfx7Outline6lineToEii>
 8024454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024456:	f023 0301 	bic.w	r3, r3, #1
 802445a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802445c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802445e:	079b      	lsls	r3, r3, #30
 8024460:	d51a      	bpl.n	8024498 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024462:	8b62      	ldrh	r2, [r4, #26]
 8024464:	8b23      	ldrh	r3, [r4, #24]
 8024466:	4313      	orrs	r3, r2
 8024468:	d00d      	beq.n	8024486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802446a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802446e:	2b00      	cmp	r3, #0
 8024470:	db09      	blt.n	8024486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024472:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024474:	4293      	cmp	r3, r2
 8024476:	da06      	bge.n	8024486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024478:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802447c:	429a      	cmp	r2, r3
 802447e:	d80d      	bhi.n	802449c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024480:	2301      	movs	r3, #1
 8024482:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024486:	68a0      	ldr	r0, [r4, #8]
 8024488:	b138      	cbz	r0, 802449a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802448a:	4620      	mov	r0, r4
 802448c:	f7ff ffd3 	bl	8024436 <_ZN8touchgfx7Outline9sortCellsEv>
 8024490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024492:	f023 0302 	bic.w	r3, r3, #2
 8024496:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024498:	68e0      	ldr	r0, [r4, #12]
 802449a:	bd10      	pop	{r4, pc}
 802449c:	f104 0314 	add.w	r3, r4, #20
 80244a0:	6922      	ldr	r2, [r4, #16]
 80244a2:	cb03      	ldmia	r3!, {r0, r1}
 80244a4:	6010      	str	r0, [r2, #0]
 80244a6:	6051      	str	r1, [r2, #4]
 80244a8:	6923      	ldr	r3, [r4, #16]
 80244aa:	3308      	adds	r3, #8
 80244ac:	6123      	str	r3, [r4, #16]
 80244ae:	68a3      	ldr	r3, [r4, #8]
 80244b0:	3301      	adds	r3, #1
 80244b2:	60a3      	str	r3, [r4, #8]
 80244b4:	e7e7      	b.n	8024486 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080244b6 <_ZN8touchgfx8ScanlineD1Ev>:
 80244b6:	4770      	bx	lr

080244b8 <_ZN8touchgfx8ScanlineD0Ev>:
 80244b8:	b510      	push	{r4, lr}
 80244ba:	4604      	mov	r4, r0
 80244bc:	2124      	movs	r1, #36	; 0x24
 80244be:	f000 f87a 	bl	80245b6 <_ZdlPvj>
 80244c2:	4620      	mov	r0, r4
 80244c4:	bd10      	pop	{r4, pc}

080244c6 <_ZN8touchgfx8Scanline5resetEv>:
 80244c6:	b510      	push	{r4, lr}
 80244c8:	4604      	mov	r4, r0
 80244ca:	f7f3 f8f9 	bl	80176c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80244ce:	61a0      	str	r0, [r4, #24]
 80244d0:	f7f3 f8fc 	bl	80176cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80244d4:	61e0      	str	r0, [r4, #28]
 80244d6:	f7f3 f8ff 	bl	80176d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80244da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244de:	6220      	str	r0, [r4, #32]
 80244e0:	6160      	str	r0, [r4, #20]
 80244e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80244e6:	69e3      	ldr	r3, [r4, #28]
 80244e8:	6123      	str	r3, [r4, #16]
 80244ea:	2300      	movs	r3, #0
 80244ec:	60e3      	str	r3, [r4, #12]
 80244ee:	bd10      	pop	{r4, pc}

080244f0 <_ZN8touchgfx8ScanlineC1Ev>:
 80244f0:	4b07      	ldr	r3, [pc, #28]	; (8024510 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80244f2:	b510      	push	{r4, lr}
 80244f4:	6003      	str	r3, [r0, #0]
 80244f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244fa:	4604      	mov	r4, r0
 80244fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024500:	2300      	movs	r3, #0
 8024502:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024506:	6143      	str	r3, [r0, #20]
 8024508:	f7ff ffdd 	bl	80244c6 <_ZN8touchgfx8Scanline5resetEv>
 802450c:	4620      	mov	r0, r4
 802450e:	bd10      	pop	{r4, pc}
 8024510:	08029854 	.word	0x08029854

08024514 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024518:	1e0c      	subs	r4, r1, #0
 802451a:	4605      	mov	r5, r0
 802451c:	4617      	mov	r7, r2
 802451e:	461e      	mov	r6, r3
 8024520:	da03      	bge.n	802452a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024522:	4426      	add	r6, r4
 8024524:	2e01      	cmp	r6, #1
 8024526:	d421      	bmi.n	802456c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024528:	2400      	movs	r4, #0
 802452a:	f7f3 f8c3 	bl	80176b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802452e:	42a0      	cmp	r0, r4
 8024530:	d91c      	bls.n	802456c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024532:	eb04 0806 	add.w	r8, r4, r6
 8024536:	f7f3 f8bd 	bl	80176b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802453a:	4580      	cmp	r8, r0
 802453c:	d902      	bls.n	8024544 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802453e:	f7f3 f8b9 	bl	80176b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024542:	1b06      	subs	r6, r0, r4
 8024544:	69a8      	ldr	r0, [r5, #24]
 8024546:	4632      	mov	r2, r6
 8024548:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802454c:	4420      	add	r0, r4
 802454e:	f7f4 fdb0 	bl	80190b2 <_ZN8touchgfx6memsetEPvhm>
 8024552:	686b      	ldr	r3, [r5, #4]
 8024554:	b2b2      	uxth	r2, r6
 8024556:	3301      	adds	r3, #1
 8024558:	42a3      	cmp	r3, r4
 802455a:	696b      	ldr	r3, [r5, #20]
 802455c:	d108      	bne.n	8024570 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802455e:	8819      	ldrh	r1, [r3, #0]
 8024560:	440a      	add	r2, r1
 8024562:	801a      	strh	r2, [r3, #0]
 8024564:	3c01      	subs	r4, #1
 8024566:	4434      	add	r4, r6
 8024568:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024570:	1c99      	adds	r1, r3, #2
 8024572:	6169      	str	r1, [r5, #20]
 8024574:	805a      	strh	r2, [r3, #2]
 8024576:	692b      	ldr	r3, [r5, #16]
 8024578:	1c9a      	adds	r2, r3, #2
 802457a:	612a      	str	r2, [r5, #16]
 802457c:	805c      	strh	r4, [r3, #2]
 802457e:	68eb      	ldr	r3, [r5, #12]
 8024580:	3301      	adds	r3, #1
 8024582:	60eb      	str	r3, [r5, #12]
 8024584:	e7ee      	b.n	8024564 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024586 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024586:	2200      	movs	r2, #0
 8024588:	6002      	str	r2, [r0, #0]
 802458a:	7102      	strb	r2, [r0, #4]
 802458c:	6102      	str	r2, [r0, #16]
 802458e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024592:	4770      	bx	lr

08024594 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024594:	4770      	bx	lr

08024596 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024596:	6083      	str	r3, [r0, #8]
 8024598:	9b00      	ldr	r3, [sp, #0]
 802459a:	6001      	str	r1, [r0, #0]
 802459c:	60c3      	str	r3, [r0, #12]
 802459e:	9b01      	ldr	r3, [sp, #4]
 80245a0:	7102      	strb	r2, [r0, #4]
 80245a2:	6103      	str	r3, [r0, #16]
 80245a4:	4770      	bx	lr

080245a6 <__aeabi_atexit>:
 80245a6:	460b      	mov	r3, r1
 80245a8:	4601      	mov	r1, r0
 80245aa:	4618      	mov	r0, r3
 80245ac:	f000 b852 	b.w	8024654 <__cxa_atexit>

080245b0 <__cxa_pure_virtual>:
 80245b0:	b508      	push	{r3, lr}
 80245b2:	f000 f81f 	bl	80245f4 <_ZSt9terminatev>

080245b6 <_ZdlPvj>:
 80245b6:	f000 b80f 	b.w	80245d8 <_ZdlPv>

080245ba <__cxa_guard_acquire>:
 80245ba:	6803      	ldr	r3, [r0, #0]
 80245bc:	07db      	lsls	r3, r3, #31
 80245be:	d406      	bmi.n	80245ce <__cxa_guard_acquire+0x14>
 80245c0:	7843      	ldrb	r3, [r0, #1]
 80245c2:	b103      	cbz	r3, 80245c6 <__cxa_guard_acquire+0xc>
 80245c4:	deff      	udf	#255	; 0xff
 80245c6:	2301      	movs	r3, #1
 80245c8:	7043      	strb	r3, [r0, #1]
 80245ca:	4618      	mov	r0, r3
 80245cc:	4770      	bx	lr
 80245ce:	2000      	movs	r0, #0
 80245d0:	4770      	bx	lr

080245d2 <__cxa_guard_release>:
 80245d2:	2301      	movs	r3, #1
 80245d4:	6003      	str	r3, [r0, #0]
 80245d6:	4770      	bx	lr

080245d8 <_ZdlPv>:
 80245d8:	f000 b88e 	b.w	80246f8 <free>

080245dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80245dc:	b508      	push	{r3, lr}
 80245de:	4780      	blx	r0
 80245e0:	f000 f80d 	bl	80245fe <abort>

080245e4 <_ZSt13get_terminatev>:
 80245e4:	4b02      	ldr	r3, [pc, #8]	; (80245f0 <_ZSt13get_terminatev+0xc>)
 80245e6:	6818      	ldr	r0, [r3, #0]
 80245e8:	f3bf 8f5b 	dmb	ish
 80245ec:	4770      	bx	lr
 80245ee:	bf00      	nop
 80245f0:	20000094 	.word	0x20000094

080245f4 <_ZSt9terminatev>:
 80245f4:	b508      	push	{r3, lr}
 80245f6:	f7ff fff5 	bl	80245e4 <_ZSt13get_terminatev>
 80245fa:	f7ff ffef 	bl	80245dc <_ZN10__cxxabiv111__terminateEPFvvE>

080245fe <abort>:
 80245fe:	b508      	push	{r3, lr}
 8024600:	2006      	movs	r0, #6
 8024602:	f000 fc3d 	bl	8024e80 <raise>
 8024606:	2001      	movs	r0, #1
 8024608:	f7df f802 	bl	8003610 <_exit>

0802460c <__assert_func>:
 802460c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802460e:	461c      	mov	r4, r3
 8024610:	4b09      	ldr	r3, [pc, #36]	; (8024638 <__assert_func+0x2c>)
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	4605      	mov	r5, r0
 8024616:	68d8      	ldr	r0, [r3, #12]
 8024618:	b152      	cbz	r2, 8024630 <__assert_func+0x24>
 802461a:	4b08      	ldr	r3, [pc, #32]	; (802463c <__assert_func+0x30>)
 802461c:	9100      	str	r1, [sp, #0]
 802461e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024622:	4907      	ldr	r1, [pc, #28]	; (8024640 <__assert_func+0x34>)
 8024624:	462b      	mov	r3, r5
 8024626:	4622      	mov	r2, r4
 8024628:	f000 f828 	bl	802467c <fiprintf>
 802462c:	f7ff ffe7 	bl	80245fe <abort>
 8024630:	4b04      	ldr	r3, [pc, #16]	; (8024644 <__assert_func+0x38>)
 8024632:	461a      	mov	r2, r3
 8024634:	e7f2      	b.n	802461c <__assert_func+0x10>
 8024636:	bf00      	nop
 8024638:	20000098 	.word	0x20000098
 802463c:	0802985c 	.word	0x0802985c
 8024640:	08029869 	.word	0x08029869
 8024644:	08029897 	.word	0x08029897

08024648 <atexit>:
 8024648:	2300      	movs	r3, #0
 802464a:	4601      	mov	r1, r0
 802464c:	461a      	mov	r2, r3
 802464e:	4618      	mov	r0, r3
 8024650:	f000 bcf2 	b.w	8025038 <__register_exitproc>

08024654 <__cxa_atexit>:
 8024654:	b510      	push	{r4, lr}
 8024656:	4c05      	ldr	r4, [pc, #20]	; (802466c <__cxa_atexit+0x18>)
 8024658:	4613      	mov	r3, r2
 802465a:	b12c      	cbz	r4, 8024668 <__cxa_atexit+0x14>
 802465c:	460a      	mov	r2, r1
 802465e:	4601      	mov	r1, r0
 8024660:	2002      	movs	r0, #2
 8024662:	f000 fce9 	bl	8025038 <__register_exitproc>
 8024666:	bd10      	pop	{r4, pc}
 8024668:	4620      	mov	r0, r4
 802466a:	e7fc      	b.n	8024666 <__cxa_atexit+0x12>
 802466c:	08025039 	.word	0x08025039

08024670 <__errno>:
 8024670:	4b01      	ldr	r3, [pc, #4]	; (8024678 <__errno+0x8>)
 8024672:	6818      	ldr	r0, [r3, #0]
 8024674:	4770      	bx	lr
 8024676:	bf00      	nop
 8024678:	20000098 	.word	0x20000098

0802467c <fiprintf>:
 802467c:	b40e      	push	{r1, r2, r3}
 802467e:	b503      	push	{r0, r1, lr}
 8024680:	4601      	mov	r1, r0
 8024682:	ab03      	add	r3, sp, #12
 8024684:	4805      	ldr	r0, [pc, #20]	; (802469c <fiprintf+0x20>)
 8024686:	f853 2b04 	ldr.w	r2, [r3], #4
 802468a:	6800      	ldr	r0, [r0, #0]
 802468c:	9301      	str	r3, [sp, #4]
 802468e:	f000 f921 	bl	80248d4 <_vfiprintf_r>
 8024692:	b002      	add	sp, #8
 8024694:	f85d eb04 	ldr.w	lr, [sp], #4
 8024698:	b003      	add	sp, #12
 802469a:	4770      	bx	lr
 802469c:	20000098 	.word	0x20000098

080246a0 <__libc_init_array>:
 80246a0:	b570      	push	{r4, r5, r6, lr}
 80246a2:	4e0d      	ldr	r6, [pc, #52]	; (80246d8 <__libc_init_array+0x38>)
 80246a4:	4c0d      	ldr	r4, [pc, #52]	; (80246dc <__libc_init_array+0x3c>)
 80246a6:	1ba4      	subs	r4, r4, r6
 80246a8:	10a4      	asrs	r4, r4, #2
 80246aa:	2500      	movs	r5, #0
 80246ac:	42a5      	cmp	r5, r4
 80246ae:	d109      	bne.n	80246c4 <__libc_init_array+0x24>
 80246b0:	4e0b      	ldr	r6, [pc, #44]	; (80246e0 <__libc_init_array+0x40>)
 80246b2:	4c0c      	ldr	r4, [pc, #48]	; (80246e4 <__libc_init_array+0x44>)
 80246b4:	f000 ffb0 	bl	8025618 <_init>
 80246b8:	1ba4      	subs	r4, r4, r6
 80246ba:	10a4      	asrs	r4, r4, #2
 80246bc:	2500      	movs	r5, #0
 80246be:	42a5      	cmp	r5, r4
 80246c0:	d105      	bne.n	80246ce <__libc_init_array+0x2e>
 80246c2:	bd70      	pop	{r4, r5, r6, pc}
 80246c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80246c8:	4798      	blx	r3
 80246ca:	3501      	adds	r5, #1
 80246cc:	e7ee      	b.n	80246ac <__libc_init_array+0xc>
 80246ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80246d2:	4798      	blx	r3
 80246d4:	3501      	adds	r5, #1
 80246d6:	e7f2      	b.n	80246be <__libc_init_array+0x1e>
 80246d8:	08060d2c 	.word	0x08060d2c
 80246dc:	08060d2c 	.word	0x08060d2c
 80246e0:	08060d2c 	.word	0x08060d2c
 80246e4:	08060d40 	.word	0x08060d40

080246e8 <malloc>:
 80246e8:	4b02      	ldr	r3, [pc, #8]	; (80246f4 <malloc+0xc>)
 80246ea:	4601      	mov	r1, r0
 80246ec:	6818      	ldr	r0, [r3, #0]
 80246ee:	f000 b86d 	b.w	80247cc <_malloc_r>
 80246f2:	bf00      	nop
 80246f4:	20000098 	.word	0x20000098

080246f8 <free>:
 80246f8:	4b02      	ldr	r3, [pc, #8]	; (8024704 <free+0xc>)
 80246fa:	4601      	mov	r1, r0
 80246fc:	6818      	ldr	r0, [r3, #0]
 80246fe:	f000 b817 	b.w	8024730 <_free_r>
 8024702:	bf00      	nop
 8024704:	20000098 	.word	0x20000098

08024708 <memcpy>:
 8024708:	b510      	push	{r4, lr}
 802470a:	1e43      	subs	r3, r0, #1
 802470c:	440a      	add	r2, r1
 802470e:	4291      	cmp	r1, r2
 8024710:	d100      	bne.n	8024714 <memcpy+0xc>
 8024712:	bd10      	pop	{r4, pc}
 8024714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024718:	f803 4f01 	strb.w	r4, [r3, #1]!
 802471c:	e7f7      	b.n	802470e <memcpy+0x6>

0802471e <memset>:
 802471e:	4402      	add	r2, r0
 8024720:	4603      	mov	r3, r0
 8024722:	4293      	cmp	r3, r2
 8024724:	d100      	bne.n	8024728 <memset+0xa>
 8024726:	4770      	bx	lr
 8024728:	f803 1b01 	strb.w	r1, [r3], #1
 802472c:	e7f9      	b.n	8024722 <memset+0x4>
	...

08024730 <_free_r>:
 8024730:	b538      	push	{r3, r4, r5, lr}
 8024732:	4605      	mov	r5, r0
 8024734:	2900      	cmp	r1, #0
 8024736:	d045      	beq.n	80247c4 <_free_r+0x94>
 8024738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802473c:	1f0c      	subs	r4, r1, #4
 802473e:	2b00      	cmp	r3, #0
 8024740:	bfb8      	it	lt
 8024742:	18e4      	addlt	r4, r4, r3
 8024744:	f000 feba 	bl	80254bc <__malloc_lock>
 8024748:	4a1f      	ldr	r2, [pc, #124]	; (80247c8 <_free_r+0x98>)
 802474a:	6813      	ldr	r3, [r2, #0]
 802474c:	4610      	mov	r0, r2
 802474e:	b933      	cbnz	r3, 802475e <_free_r+0x2e>
 8024750:	6063      	str	r3, [r4, #4]
 8024752:	6014      	str	r4, [r2, #0]
 8024754:	4628      	mov	r0, r5
 8024756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802475a:	f000 beb0 	b.w	80254be <__malloc_unlock>
 802475e:	42a3      	cmp	r3, r4
 8024760:	d90c      	bls.n	802477c <_free_r+0x4c>
 8024762:	6821      	ldr	r1, [r4, #0]
 8024764:	1862      	adds	r2, r4, r1
 8024766:	4293      	cmp	r3, r2
 8024768:	bf04      	itt	eq
 802476a:	681a      	ldreq	r2, [r3, #0]
 802476c:	685b      	ldreq	r3, [r3, #4]
 802476e:	6063      	str	r3, [r4, #4]
 8024770:	bf04      	itt	eq
 8024772:	1852      	addeq	r2, r2, r1
 8024774:	6022      	streq	r2, [r4, #0]
 8024776:	6004      	str	r4, [r0, #0]
 8024778:	e7ec      	b.n	8024754 <_free_r+0x24>
 802477a:	4613      	mov	r3, r2
 802477c:	685a      	ldr	r2, [r3, #4]
 802477e:	b10a      	cbz	r2, 8024784 <_free_r+0x54>
 8024780:	42a2      	cmp	r2, r4
 8024782:	d9fa      	bls.n	802477a <_free_r+0x4a>
 8024784:	6819      	ldr	r1, [r3, #0]
 8024786:	1858      	adds	r0, r3, r1
 8024788:	42a0      	cmp	r0, r4
 802478a:	d10b      	bne.n	80247a4 <_free_r+0x74>
 802478c:	6820      	ldr	r0, [r4, #0]
 802478e:	4401      	add	r1, r0
 8024790:	1858      	adds	r0, r3, r1
 8024792:	4282      	cmp	r2, r0
 8024794:	6019      	str	r1, [r3, #0]
 8024796:	d1dd      	bne.n	8024754 <_free_r+0x24>
 8024798:	6810      	ldr	r0, [r2, #0]
 802479a:	6852      	ldr	r2, [r2, #4]
 802479c:	605a      	str	r2, [r3, #4]
 802479e:	4401      	add	r1, r0
 80247a0:	6019      	str	r1, [r3, #0]
 80247a2:	e7d7      	b.n	8024754 <_free_r+0x24>
 80247a4:	d902      	bls.n	80247ac <_free_r+0x7c>
 80247a6:	230c      	movs	r3, #12
 80247a8:	602b      	str	r3, [r5, #0]
 80247aa:	e7d3      	b.n	8024754 <_free_r+0x24>
 80247ac:	6820      	ldr	r0, [r4, #0]
 80247ae:	1821      	adds	r1, r4, r0
 80247b0:	428a      	cmp	r2, r1
 80247b2:	bf04      	itt	eq
 80247b4:	6811      	ldreq	r1, [r2, #0]
 80247b6:	6852      	ldreq	r2, [r2, #4]
 80247b8:	6062      	str	r2, [r4, #4]
 80247ba:	bf04      	itt	eq
 80247bc:	1809      	addeq	r1, r1, r0
 80247be:	6021      	streq	r1, [r4, #0]
 80247c0:	605c      	str	r4, [r3, #4]
 80247c2:	e7c7      	b.n	8024754 <_free_r+0x24>
 80247c4:	bd38      	pop	{r3, r4, r5, pc}
 80247c6:	bf00      	nop
 80247c8:	2000bd8c 	.word	0x2000bd8c

080247cc <_malloc_r>:
 80247cc:	b570      	push	{r4, r5, r6, lr}
 80247ce:	1ccd      	adds	r5, r1, #3
 80247d0:	f025 0503 	bic.w	r5, r5, #3
 80247d4:	3508      	adds	r5, #8
 80247d6:	2d0c      	cmp	r5, #12
 80247d8:	bf38      	it	cc
 80247da:	250c      	movcc	r5, #12
 80247dc:	2d00      	cmp	r5, #0
 80247de:	4606      	mov	r6, r0
 80247e0:	db01      	blt.n	80247e6 <_malloc_r+0x1a>
 80247e2:	42a9      	cmp	r1, r5
 80247e4:	d903      	bls.n	80247ee <_malloc_r+0x22>
 80247e6:	230c      	movs	r3, #12
 80247e8:	6033      	str	r3, [r6, #0]
 80247ea:	2000      	movs	r0, #0
 80247ec:	bd70      	pop	{r4, r5, r6, pc}
 80247ee:	f000 fe65 	bl	80254bc <__malloc_lock>
 80247f2:	4a21      	ldr	r2, [pc, #132]	; (8024878 <_malloc_r+0xac>)
 80247f4:	6814      	ldr	r4, [r2, #0]
 80247f6:	4621      	mov	r1, r4
 80247f8:	b991      	cbnz	r1, 8024820 <_malloc_r+0x54>
 80247fa:	4c20      	ldr	r4, [pc, #128]	; (802487c <_malloc_r+0xb0>)
 80247fc:	6823      	ldr	r3, [r4, #0]
 80247fe:	b91b      	cbnz	r3, 8024808 <_malloc_r+0x3c>
 8024800:	4630      	mov	r0, r6
 8024802:	f000 fb05 	bl	8024e10 <_sbrk_r>
 8024806:	6020      	str	r0, [r4, #0]
 8024808:	4629      	mov	r1, r5
 802480a:	4630      	mov	r0, r6
 802480c:	f000 fb00 	bl	8024e10 <_sbrk_r>
 8024810:	1c43      	adds	r3, r0, #1
 8024812:	d124      	bne.n	802485e <_malloc_r+0x92>
 8024814:	230c      	movs	r3, #12
 8024816:	6033      	str	r3, [r6, #0]
 8024818:	4630      	mov	r0, r6
 802481a:	f000 fe50 	bl	80254be <__malloc_unlock>
 802481e:	e7e4      	b.n	80247ea <_malloc_r+0x1e>
 8024820:	680b      	ldr	r3, [r1, #0]
 8024822:	1b5b      	subs	r3, r3, r5
 8024824:	d418      	bmi.n	8024858 <_malloc_r+0x8c>
 8024826:	2b0b      	cmp	r3, #11
 8024828:	d90f      	bls.n	802484a <_malloc_r+0x7e>
 802482a:	600b      	str	r3, [r1, #0]
 802482c:	50cd      	str	r5, [r1, r3]
 802482e:	18cc      	adds	r4, r1, r3
 8024830:	4630      	mov	r0, r6
 8024832:	f000 fe44 	bl	80254be <__malloc_unlock>
 8024836:	f104 000b 	add.w	r0, r4, #11
 802483a:	1d23      	adds	r3, r4, #4
 802483c:	f020 0007 	bic.w	r0, r0, #7
 8024840:	1ac3      	subs	r3, r0, r3
 8024842:	d0d3      	beq.n	80247ec <_malloc_r+0x20>
 8024844:	425a      	negs	r2, r3
 8024846:	50e2      	str	r2, [r4, r3]
 8024848:	e7d0      	b.n	80247ec <_malloc_r+0x20>
 802484a:	428c      	cmp	r4, r1
 802484c:	684b      	ldr	r3, [r1, #4]
 802484e:	bf16      	itet	ne
 8024850:	6063      	strne	r3, [r4, #4]
 8024852:	6013      	streq	r3, [r2, #0]
 8024854:	460c      	movne	r4, r1
 8024856:	e7eb      	b.n	8024830 <_malloc_r+0x64>
 8024858:	460c      	mov	r4, r1
 802485a:	6849      	ldr	r1, [r1, #4]
 802485c:	e7cc      	b.n	80247f8 <_malloc_r+0x2c>
 802485e:	1cc4      	adds	r4, r0, #3
 8024860:	f024 0403 	bic.w	r4, r4, #3
 8024864:	42a0      	cmp	r0, r4
 8024866:	d005      	beq.n	8024874 <_malloc_r+0xa8>
 8024868:	1a21      	subs	r1, r4, r0
 802486a:	4630      	mov	r0, r6
 802486c:	f000 fad0 	bl	8024e10 <_sbrk_r>
 8024870:	3001      	adds	r0, #1
 8024872:	d0cf      	beq.n	8024814 <_malloc_r+0x48>
 8024874:	6025      	str	r5, [r4, #0]
 8024876:	e7db      	b.n	8024830 <_malloc_r+0x64>
 8024878:	2000bd8c 	.word	0x2000bd8c
 802487c:	2000bd90 	.word	0x2000bd90

08024880 <__sfputc_r>:
 8024880:	6893      	ldr	r3, [r2, #8]
 8024882:	3b01      	subs	r3, #1
 8024884:	2b00      	cmp	r3, #0
 8024886:	b410      	push	{r4}
 8024888:	6093      	str	r3, [r2, #8]
 802488a:	da08      	bge.n	802489e <__sfputc_r+0x1e>
 802488c:	6994      	ldr	r4, [r2, #24]
 802488e:	42a3      	cmp	r3, r4
 8024890:	db01      	blt.n	8024896 <__sfputc_r+0x16>
 8024892:	290a      	cmp	r1, #10
 8024894:	d103      	bne.n	802489e <__sfputc_r+0x1e>
 8024896:	f85d 4b04 	ldr.w	r4, [sp], #4
 802489a:	f000 bb0d 	b.w	8024eb8 <__swbuf_r>
 802489e:	6813      	ldr	r3, [r2, #0]
 80248a0:	1c58      	adds	r0, r3, #1
 80248a2:	6010      	str	r0, [r2, #0]
 80248a4:	7019      	strb	r1, [r3, #0]
 80248a6:	4608      	mov	r0, r1
 80248a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80248ac:	4770      	bx	lr

080248ae <__sfputs_r>:
 80248ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248b0:	4606      	mov	r6, r0
 80248b2:	460f      	mov	r7, r1
 80248b4:	4614      	mov	r4, r2
 80248b6:	18d5      	adds	r5, r2, r3
 80248b8:	42ac      	cmp	r4, r5
 80248ba:	d101      	bne.n	80248c0 <__sfputs_r+0x12>
 80248bc:	2000      	movs	r0, #0
 80248be:	e007      	b.n	80248d0 <__sfputs_r+0x22>
 80248c0:	463a      	mov	r2, r7
 80248c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80248c6:	4630      	mov	r0, r6
 80248c8:	f7ff ffda 	bl	8024880 <__sfputc_r>
 80248cc:	1c43      	adds	r3, r0, #1
 80248ce:	d1f3      	bne.n	80248b8 <__sfputs_r+0xa>
 80248d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080248d4 <_vfiprintf_r>:
 80248d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248d8:	460c      	mov	r4, r1
 80248da:	b09d      	sub	sp, #116	; 0x74
 80248dc:	4617      	mov	r7, r2
 80248de:	461d      	mov	r5, r3
 80248e0:	4606      	mov	r6, r0
 80248e2:	b118      	cbz	r0, 80248ec <_vfiprintf_r+0x18>
 80248e4:	6983      	ldr	r3, [r0, #24]
 80248e6:	b90b      	cbnz	r3, 80248ec <_vfiprintf_r+0x18>
 80248e8:	f000 fcfa 	bl	80252e0 <__sinit>
 80248ec:	4b7c      	ldr	r3, [pc, #496]	; (8024ae0 <_vfiprintf_r+0x20c>)
 80248ee:	429c      	cmp	r4, r3
 80248f0:	d158      	bne.n	80249a4 <_vfiprintf_r+0xd0>
 80248f2:	6874      	ldr	r4, [r6, #4]
 80248f4:	89a3      	ldrh	r3, [r4, #12]
 80248f6:	0718      	lsls	r0, r3, #28
 80248f8:	d55e      	bpl.n	80249b8 <_vfiprintf_r+0xe4>
 80248fa:	6923      	ldr	r3, [r4, #16]
 80248fc:	2b00      	cmp	r3, #0
 80248fe:	d05b      	beq.n	80249b8 <_vfiprintf_r+0xe4>
 8024900:	2300      	movs	r3, #0
 8024902:	9309      	str	r3, [sp, #36]	; 0x24
 8024904:	2320      	movs	r3, #32
 8024906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802490a:	2330      	movs	r3, #48	; 0x30
 802490c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024910:	9503      	str	r5, [sp, #12]
 8024912:	f04f 0b01 	mov.w	fp, #1
 8024916:	46b8      	mov	r8, r7
 8024918:	4645      	mov	r5, r8
 802491a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802491e:	b10b      	cbz	r3, 8024924 <_vfiprintf_r+0x50>
 8024920:	2b25      	cmp	r3, #37	; 0x25
 8024922:	d154      	bne.n	80249ce <_vfiprintf_r+0xfa>
 8024924:	ebb8 0a07 	subs.w	sl, r8, r7
 8024928:	d00b      	beq.n	8024942 <_vfiprintf_r+0x6e>
 802492a:	4653      	mov	r3, sl
 802492c:	463a      	mov	r2, r7
 802492e:	4621      	mov	r1, r4
 8024930:	4630      	mov	r0, r6
 8024932:	f7ff ffbc 	bl	80248ae <__sfputs_r>
 8024936:	3001      	adds	r0, #1
 8024938:	f000 80c2 	beq.w	8024ac0 <_vfiprintf_r+0x1ec>
 802493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802493e:	4453      	add	r3, sl
 8024940:	9309      	str	r3, [sp, #36]	; 0x24
 8024942:	f898 3000 	ldrb.w	r3, [r8]
 8024946:	2b00      	cmp	r3, #0
 8024948:	f000 80ba 	beq.w	8024ac0 <_vfiprintf_r+0x1ec>
 802494c:	2300      	movs	r3, #0
 802494e:	f04f 32ff 	mov.w	r2, #4294967295
 8024952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024956:	9304      	str	r3, [sp, #16]
 8024958:	9307      	str	r3, [sp, #28]
 802495a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802495e:	931a      	str	r3, [sp, #104]	; 0x68
 8024960:	46a8      	mov	r8, r5
 8024962:	2205      	movs	r2, #5
 8024964:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024968:	485e      	ldr	r0, [pc, #376]	; (8024ae4 <_vfiprintf_r+0x210>)
 802496a:	f7db fc51 	bl	8000210 <memchr>
 802496e:	9b04      	ldr	r3, [sp, #16]
 8024970:	bb78      	cbnz	r0, 80249d2 <_vfiprintf_r+0xfe>
 8024972:	06d9      	lsls	r1, r3, #27
 8024974:	bf44      	itt	mi
 8024976:	2220      	movmi	r2, #32
 8024978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802497c:	071a      	lsls	r2, r3, #28
 802497e:	bf44      	itt	mi
 8024980:	222b      	movmi	r2, #43	; 0x2b
 8024982:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024986:	782a      	ldrb	r2, [r5, #0]
 8024988:	2a2a      	cmp	r2, #42	; 0x2a
 802498a:	d02a      	beq.n	80249e2 <_vfiprintf_r+0x10e>
 802498c:	9a07      	ldr	r2, [sp, #28]
 802498e:	46a8      	mov	r8, r5
 8024990:	2000      	movs	r0, #0
 8024992:	250a      	movs	r5, #10
 8024994:	4641      	mov	r1, r8
 8024996:	f811 3b01 	ldrb.w	r3, [r1], #1
 802499a:	3b30      	subs	r3, #48	; 0x30
 802499c:	2b09      	cmp	r3, #9
 802499e:	d969      	bls.n	8024a74 <_vfiprintf_r+0x1a0>
 80249a0:	b360      	cbz	r0, 80249fc <_vfiprintf_r+0x128>
 80249a2:	e024      	b.n	80249ee <_vfiprintf_r+0x11a>
 80249a4:	4b50      	ldr	r3, [pc, #320]	; (8024ae8 <_vfiprintf_r+0x214>)
 80249a6:	429c      	cmp	r4, r3
 80249a8:	d101      	bne.n	80249ae <_vfiprintf_r+0xda>
 80249aa:	68b4      	ldr	r4, [r6, #8]
 80249ac:	e7a2      	b.n	80248f4 <_vfiprintf_r+0x20>
 80249ae:	4b4f      	ldr	r3, [pc, #316]	; (8024aec <_vfiprintf_r+0x218>)
 80249b0:	429c      	cmp	r4, r3
 80249b2:	bf08      	it	eq
 80249b4:	68f4      	ldreq	r4, [r6, #12]
 80249b6:	e79d      	b.n	80248f4 <_vfiprintf_r+0x20>
 80249b8:	4621      	mov	r1, r4
 80249ba:	4630      	mov	r0, r6
 80249bc:	f000 face 	bl	8024f5c <__swsetup_r>
 80249c0:	2800      	cmp	r0, #0
 80249c2:	d09d      	beq.n	8024900 <_vfiprintf_r+0x2c>
 80249c4:	f04f 30ff 	mov.w	r0, #4294967295
 80249c8:	b01d      	add	sp, #116	; 0x74
 80249ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249ce:	46a8      	mov	r8, r5
 80249d0:	e7a2      	b.n	8024918 <_vfiprintf_r+0x44>
 80249d2:	4a44      	ldr	r2, [pc, #272]	; (8024ae4 <_vfiprintf_r+0x210>)
 80249d4:	1a80      	subs	r0, r0, r2
 80249d6:	fa0b f000 	lsl.w	r0, fp, r0
 80249da:	4318      	orrs	r0, r3
 80249dc:	9004      	str	r0, [sp, #16]
 80249de:	4645      	mov	r5, r8
 80249e0:	e7be      	b.n	8024960 <_vfiprintf_r+0x8c>
 80249e2:	9a03      	ldr	r2, [sp, #12]
 80249e4:	1d11      	adds	r1, r2, #4
 80249e6:	6812      	ldr	r2, [r2, #0]
 80249e8:	9103      	str	r1, [sp, #12]
 80249ea:	2a00      	cmp	r2, #0
 80249ec:	db01      	blt.n	80249f2 <_vfiprintf_r+0x11e>
 80249ee:	9207      	str	r2, [sp, #28]
 80249f0:	e004      	b.n	80249fc <_vfiprintf_r+0x128>
 80249f2:	4252      	negs	r2, r2
 80249f4:	f043 0302 	orr.w	r3, r3, #2
 80249f8:	9207      	str	r2, [sp, #28]
 80249fa:	9304      	str	r3, [sp, #16]
 80249fc:	f898 3000 	ldrb.w	r3, [r8]
 8024a00:	2b2e      	cmp	r3, #46	; 0x2e
 8024a02:	d10e      	bne.n	8024a22 <_vfiprintf_r+0x14e>
 8024a04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8024a08:	2b2a      	cmp	r3, #42	; 0x2a
 8024a0a:	d138      	bne.n	8024a7e <_vfiprintf_r+0x1aa>
 8024a0c:	9b03      	ldr	r3, [sp, #12]
 8024a0e:	1d1a      	adds	r2, r3, #4
 8024a10:	681b      	ldr	r3, [r3, #0]
 8024a12:	9203      	str	r2, [sp, #12]
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	bfb8      	it	lt
 8024a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8024a1c:	f108 0802 	add.w	r8, r8, #2
 8024a20:	9305      	str	r3, [sp, #20]
 8024a22:	4d33      	ldr	r5, [pc, #204]	; (8024af0 <_vfiprintf_r+0x21c>)
 8024a24:	f898 1000 	ldrb.w	r1, [r8]
 8024a28:	2203      	movs	r2, #3
 8024a2a:	4628      	mov	r0, r5
 8024a2c:	f7db fbf0 	bl	8000210 <memchr>
 8024a30:	b140      	cbz	r0, 8024a44 <_vfiprintf_r+0x170>
 8024a32:	2340      	movs	r3, #64	; 0x40
 8024a34:	1b40      	subs	r0, r0, r5
 8024a36:	fa03 f000 	lsl.w	r0, r3, r0
 8024a3a:	9b04      	ldr	r3, [sp, #16]
 8024a3c:	4303      	orrs	r3, r0
 8024a3e:	f108 0801 	add.w	r8, r8, #1
 8024a42:	9304      	str	r3, [sp, #16]
 8024a44:	f898 1000 	ldrb.w	r1, [r8]
 8024a48:	482a      	ldr	r0, [pc, #168]	; (8024af4 <_vfiprintf_r+0x220>)
 8024a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024a4e:	2206      	movs	r2, #6
 8024a50:	f108 0701 	add.w	r7, r8, #1
 8024a54:	f7db fbdc 	bl	8000210 <memchr>
 8024a58:	2800      	cmp	r0, #0
 8024a5a:	d037      	beq.n	8024acc <_vfiprintf_r+0x1f8>
 8024a5c:	4b26      	ldr	r3, [pc, #152]	; (8024af8 <_vfiprintf_r+0x224>)
 8024a5e:	bb1b      	cbnz	r3, 8024aa8 <_vfiprintf_r+0x1d4>
 8024a60:	9b03      	ldr	r3, [sp, #12]
 8024a62:	3307      	adds	r3, #7
 8024a64:	f023 0307 	bic.w	r3, r3, #7
 8024a68:	3308      	adds	r3, #8
 8024a6a:	9303      	str	r3, [sp, #12]
 8024a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a6e:	444b      	add	r3, r9
 8024a70:	9309      	str	r3, [sp, #36]	; 0x24
 8024a72:	e750      	b.n	8024916 <_vfiprintf_r+0x42>
 8024a74:	fb05 3202 	mla	r2, r5, r2, r3
 8024a78:	2001      	movs	r0, #1
 8024a7a:	4688      	mov	r8, r1
 8024a7c:	e78a      	b.n	8024994 <_vfiprintf_r+0xc0>
 8024a7e:	2300      	movs	r3, #0
 8024a80:	f108 0801 	add.w	r8, r8, #1
 8024a84:	9305      	str	r3, [sp, #20]
 8024a86:	4619      	mov	r1, r3
 8024a88:	250a      	movs	r5, #10
 8024a8a:	4640      	mov	r0, r8
 8024a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a90:	3a30      	subs	r2, #48	; 0x30
 8024a92:	2a09      	cmp	r2, #9
 8024a94:	d903      	bls.n	8024a9e <_vfiprintf_r+0x1ca>
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	d0c3      	beq.n	8024a22 <_vfiprintf_r+0x14e>
 8024a9a:	9105      	str	r1, [sp, #20]
 8024a9c:	e7c1      	b.n	8024a22 <_vfiprintf_r+0x14e>
 8024a9e:	fb05 2101 	mla	r1, r5, r1, r2
 8024aa2:	2301      	movs	r3, #1
 8024aa4:	4680      	mov	r8, r0
 8024aa6:	e7f0      	b.n	8024a8a <_vfiprintf_r+0x1b6>
 8024aa8:	ab03      	add	r3, sp, #12
 8024aaa:	9300      	str	r3, [sp, #0]
 8024aac:	4622      	mov	r2, r4
 8024aae:	4b13      	ldr	r3, [pc, #76]	; (8024afc <_vfiprintf_r+0x228>)
 8024ab0:	a904      	add	r1, sp, #16
 8024ab2:	4630      	mov	r0, r6
 8024ab4:	f3af 8000 	nop.w
 8024ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024abc:	4681      	mov	r9, r0
 8024abe:	d1d5      	bne.n	8024a6c <_vfiprintf_r+0x198>
 8024ac0:	89a3      	ldrh	r3, [r4, #12]
 8024ac2:	065b      	lsls	r3, r3, #25
 8024ac4:	f53f af7e 	bmi.w	80249c4 <_vfiprintf_r+0xf0>
 8024ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024aca:	e77d      	b.n	80249c8 <_vfiprintf_r+0xf4>
 8024acc:	ab03      	add	r3, sp, #12
 8024ace:	9300      	str	r3, [sp, #0]
 8024ad0:	4622      	mov	r2, r4
 8024ad2:	4b0a      	ldr	r3, [pc, #40]	; (8024afc <_vfiprintf_r+0x228>)
 8024ad4:	a904      	add	r1, sp, #16
 8024ad6:	4630      	mov	r0, r6
 8024ad8:	f000 f888 	bl	8024bec <_printf_i>
 8024adc:	e7ec      	b.n	8024ab8 <_vfiprintf_r+0x1e4>
 8024ade:	bf00      	nop
 8024ae0:	080298f4 	.word	0x080298f4
 8024ae4:	0802989c 	.word	0x0802989c
 8024ae8:	08029914 	.word	0x08029914
 8024aec:	080298d4 	.word	0x080298d4
 8024af0:	080298a2 	.word	0x080298a2
 8024af4:	080298a6 	.word	0x080298a6
 8024af8:	00000000 	.word	0x00000000
 8024afc:	080248af 	.word	0x080248af

08024b00 <_printf_common>:
 8024b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b04:	4691      	mov	r9, r2
 8024b06:	461f      	mov	r7, r3
 8024b08:	688a      	ldr	r2, [r1, #8]
 8024b0a:	690b      	ldr	r3, [r1, #16]
 8024b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024b10:	4293      	cmp	r3, r2
 8024b12:	bfb8      	it	lt
 8024b14:	4613      	movlt	r3, r2
 8024b16:	f8c9 3000 	str.w	r3, [r9]
 8024b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024b1e:	4606      	mov	r6, r0
 8024b20:	460c      	mov	r4, r1
 8024b22:	b112      	cbz	r2, 8024b2a <_printf_common+0x2a>
 8024b24:	3301      	adds	r3, #1
 8024b26:	f8c9 3000 	str.w	r3, [r9]
 8024b2a:	6823      	ldr	r3, [r4, #0]
 8024b2c:	0699      	lsls	r1, r3, #26
 8024b2e:	bf42      	ittt	mi
 8024b30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024b34:	3302      	addmi	r3, #2
 8024b36:	f8c9 3000 	strmi.w	r3, [r9]
 8024b3a:	6825      	ldr	r5, [r4, #0]
 8024b3c:	f015 0506 	ands.w	r5, r5, #6
 8024b40:	d107      	bne.n	8024b52 <_printf_common+0x52>
 8024b42:	f104 0a19 	add.w	sl, r4, #25
 8024b46:	68e3      	ldr	r3, [r4, #12]
 8024b48:	f8d9 2000 	ldr.w	r2, [r9]
 8024b4c:	1a9b      	subs	r3, r3, r2
 8024b4e:	42ab      	cmp	r3, r5
 8024b50:	dc28      	bgt.n	8024ba4 <_printf_common+0xa4>
 8024b52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8024b56:	6822      	ldr	r2, [r4, #0]
 8024b58:	3300      	adds	r3, #0
 8024b5a:	bf18      	it	ne
 8024b5c:	2301      	movne	r3, #1
 8024b5e:	0692      	lsls	r2, r2, #26
 8024b60:	d42d      	bmi.n	8024bbe <_printf_common+0xbe>
 8024b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b66:	4639      	mov	r1, r7
 8024b68:	4630      	mov	r0, r6
 8024b6a:	47c0      	blx	r8
 8024b6c:	3001      	adds	r0, #1
 8024b6e:	d020      	beq.n	8024bb2 <_printf_common+0xb2>
 8024b70:	6823      	ldr	r3, [r4, #0]
 8024b72:	68e5      	ldr	r5, [r4, #12]
 8024b74:	f8d9 2000 	ldr.w	r2, [r9]
 8024b78:	f003 0306 	and.w	r3, r3, #6
 8024b7c:	2b04      	cmp	r3, #4
 8024b7e:	bf08      	it	eq
 8024b80:	1aad      	subeq	r5, r5, r2
 8024b82:	68a3      	ldr	r3, [r4, #8]
 8024b84:	6922      	ldr	r2, [r4, #16]
 8024b86:	bf0c      	ite	eq
 8024b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024b8c:	2500      	movne	r5, #0
 8024b8e:	4293      	cmp	r3, r2
 8024b90:	bfc4      	itt	gt
 8024b92:	1a9b      	subgt	r3, r3, r2
 8024b94:	18ed      	addgt	r5, r5, r3
 8024b96:	f04f 0900 	mov.w	r9, #0
 8024b9a:	341a      	adds	r4, #26
 8024b9c:	454d      	cmp	r5, r9
 8024b9e:	d11a      	bne.n	8024bd6 <_printf_common+0xd6>
 8024ba0:	2000      	movs	r0, #0
 8024ba2:	e008      	b.n	8024bb6 <_printf_common+0xb6>
 8024ba4:	2301      	movs	r3, #1
 8024ba6:	4652      	mov	r2, sl
 8024ba8:	4639      	mov	r1, r7
 8024baa:	4630      	mov	r0, r6
 8024bac:	47c0      	blx	r8
 8024bae:	3001      	adds	r0, #1
 8024bb0:	d103      	bne.n	8024bba <_printf_common+0xba>
 8024bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8024bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024bba:	3501      	adds	r5, #1
 8024bbc:	e7c3      	b.n	8024b46 <_printf_common+0x46>
 8024bbe:	18e1      	adds	r1, r4, r3
 8024bc0:	1c5a      	adds	r2, r3, #1
 8024bc2:	2030      	movs	r0, #48	; 0x30
 8024bc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024bc8:	4422      	add	r2, r4
 8024bca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024bd2:	3302      	adds	r3, #2
 8024bd4:	e7c5      	b.n	8024b62 <_printf_common+0x62>
 8024bd6:	2301      	movs	r3, #1
 8024bd8:	4622      	mov	r2, r4
 8024bda:	4639      	mov	r1, r7
 8024bdc:	4630      	mov	r0, r6
 8024bde:	47c0      	blx	r8
 8024be0:	3001      	adds	r0, #1
 8024be2:	d0e6      	beq.n	8024bb2 <_printf_common+0xb2>
 8024be4:	f109 0901 	add.w	r9, r9, #1
 8024be8:	e7d8      	b.n	8024b9c <_printf_common+0x9c>
	...

08024bec <_printf_i>:
 8024bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024bf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024bf4:	460c      	mov	r4, r1
 8024bf6:	7e09      	ldrb	r1, [r1, #24]
 8024bf8:	b085      	sub	sp, #20
 8024bfa:	296e      	cmp	r1, #110	; 0x6e
 8024bfc:	4617      	mov	r7, r2
 8024bfe:	4606      	mov	r6, r0
 8024c00:	4698      	mov	r8, r3
 8024c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c04:	f000 80b3 	beq.w	8024d6e <_printf_i+0x182>
 8024c08:	d822      	bhi.n	8024c50 <_printf_i+0x64>
 8024c0a:	2963      	cmp	r1, #99	; 0x63
 8024c0c:	d036      	beq.n	8024c7c <_printf_i+0x90>
 8024c0e:	d80a      	bhi.n	8024c26 <_printf_i+0x3a>
 8024c10:	2900      	cmp	r1, #0
 8024c12:	f000 80b9 	beq.w	8024d88 <_printf_i+0x19c>
 8024c16:	2958      	cmp	r1, #88	; 0x58
 8024c18:	f000 8083 	beq.w	8024d22 <_printf_i+0x136>
 8024c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8024c24:	e032      	b.n	8024c8c <_printf_i+0xa0>
 8024c26:	2964      	cmp	r1, #100	; 0x64
 8024c28:	d001      	beq.n	8024c2e <_printf_i+0x42>
 8024c2a:	2969      	cmp	r1, #105	; 0x69
 8024c2c:	d1f6      	bne.n	8024c1c <_printf_i+0x30>
 8024c2e:	6820      	ldr	r0, [r4, #0]
 8024c30:	6813      	ldr	r3, [r2, #0]
 8024c32:	0605      	lsls	r5, r0, #24
 8024c34:	f103 0104 	add.w	r1, r3, #4
 8024c38:	d52a      	bpl.n	8024c90 <_printf_i+0xa4>
 8024c3a:	681b      	ldr	r3, [r3, #0]
 8024c3c:	6011      	str	r1, [r2, #0]
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	da03      	bge.n	8024c4a <_printf_i+0x5e>
 8024c42:	222d      	movs	r2, #45	; 0x2d
 8024c44:	425b      	negs	r3, r3
 8024c46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8024c4a:	486f      	ldr	r0, [pc, #444]	; (8024e08 <_printf_i+0x21c>)
 8024c4c:	220a      	movs	r2, #10
 8024c4e:	e039      	b.n	8024cc4 <_printf_i+0xd8>
 8024c50:	2973      	cmp	r1, #115	; 0x73
 8024c52:	f000 809d 	beq.w	8024d90 <_printf_i+0x1a4>
 8024c56:	d808      	bhi.n	8024c6a <_printf_i+0x7e>
 8024c58:	296f      	cmp	r1, #111	; 0x6f
 8024c5a:	d020      	beq.n	8024c9e <_printf_i+0xb2>
 8024c5c:	2970      	cmp	r1, #112	; 0x70
 8024c5e:	d1dd      	bne.n	8024c1c <_printf_i+0x30>
 8024c60:	6823      	ldr	r3, [r4, #0]
 8024c62:	f043 0320 	orr.w	r3, r3, #32
 8024c66:	6023      	str	r3, [r4, #0]
 8024c68:	e003      	b.n	8024c72 <_printf_i+0x86>
 8024c6a:	2975      	cmp	r1, #117	; 0x75
 8024c6c:	d017      	beq.n	8024c9e <_printf_i+0xb2>
 8024c6e:	2978      	cmp	r1, #120	; 0x78
 8024c70:	d1d4      	bne.n	8024c1c <_printf_i+0x30>
 8024c72:	2378      	movs	r3, #120	; 0x78
 8024c74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024c78:	4864      	ldr	r0, [pc, #400]	; (8024e0c <_printf_i+0x220>)
 8024c7a:	e055      	b.n	8024d28 <_printf_i+0x13c>
 8024c7c:	6813      	ldr	r3, [r2, #0]
 8024c7e:	1d19      	adds	r1, r3, #4
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	6011      	str	r1, [r2, #0]
 8024c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024c8c:	2301      	movs	r3, #1
 8024c8e:	e08c      	b.n	8024daa <_printf_i+0x1be>
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	6011      	str	r1, [r2, #0]
 8024c94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024c98:	bf18      	it	ne
 8024c9a:	b21b      	sxthne	r3, r3
 8024c9c:	e7cf      	b.n	8024c3e <_printf_i+0x52>
 8024c9e:	6813      	ldr	r3, [r2, #0]
 8024ca0:	6825      	ldr	r5, [r4, #0]
 8024ca2:	1d18      	adds	r0, r3, #4
 8024ca4:	6010      	str	r0, [r2, #0]
 8024ca6:	0628      	lsls	r0, r5, #24
 8024ca8:	d501      	bpl.n	8024cae <_printf_i+0xc2>
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	e002      	b.n	8024cb4 <_printf_i+0xc8>
 8024cae:	0668      	lsls	r0, r5, #25
 8024cb0:	d5fb      	bpl.n	8024caa <_printf_i+0xbe>
 8024cb2:	881b      	ldrh	r3, [r3, #0]
 8024cb4:	4854      	ldr	r0, [pc, #336]	; (8024e08 <_printf_i+0x21c>)
 8024cb6:	296f      	cmp	r1, #111	; 0x6f
 8024cb8:	bf14      	ite	ne
 8024cba:	220a      	movne	r2, #10
 8024cbc:	2208      	moveq	r2, #8
 8024cbe:	2100      	movs	r1, #0
 8024cc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024cc4:	6865      	ldr	r5, [r4, #4]
 8024cc6:	60a5      	str	r5, [r4, #8]
 8024cc8:	2d00      	cmp	r5, #0
 8024cca:	f2c0 8095 	blt.w	8024df8 <_printf_i+0x20c>
 8024cce:	6821      	ldr	r1, [r4, #0]
 8024cd0:	f021 0104 	bic.w	r1, r1, #4
 8024cd4:	6021      	str	r1, [r4, #0]
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	d13d      	bne.n	8024d56 <_printf_i+0x16a>
 8024cda:	2d00      	cmp	r5, #0
 8024cdc:	f040 808e 	bne.w	8024dfc <_printf_i+0x210>
 8024ce0:	4665      	mov	r5, ip
 8024ce2:	2a08      	cmp	r2, #8
 8024ce4:	d10b      	bne.n	8024cfe <_printf_i+0x112>
 8024ce6:	6823      	ldr	r3, [r4, #0]
 8024ce8:	07db      	lsls	r3, r3, #31
 8024cea:	d508      	bpl.n	8024cfe <_printf_i+0x112>
 8024cec:	6923      	ldr	r3, [r4, #16]
 8024cee:	6862      	ldr	r2, [r4, #4]
 8024cf0:	429a      	cmp	r2, r3
 8024cf2:	bfde      	ittt	le
 8024cf4:	2330      	movle	r3, #48	; 0x30
 8024cf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024cfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024cfe:	ebac 0305 	sub.w	r3, ip, r5
 8024d02:	6123      	str	r3, [r4, #16]
 8024d04:	f8cd 8000 	str.w	r8, [sp]
 8024d08:	463b      	mov	r3, r7
 8024d0a:	aa03      	add	r2, sp, #12
 8024d0c:	4621      	mov	r1, r4
 8024d0e:	4630      	mov	r0, r6
 8024d10:	f7ff fef6 	bl	8024b00 <_printf_common>
 8024d14:	3001      	adds	r0, #1
 8024d16:	d14d      	bne.n	8024db4 <_printf_i+0x1c8>
 8024d18:	f04f 30ff 	mov.w	r0, #4294967295
 8024d1c:	b005      	add	sp, #20
 8024d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024d22:	4839      	ldr	r0, [pc, #228]	; (8024e08 <_printf_i+0x21c>)
 8024d24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8024d28:	6813      	ldr	r3, [r2, #0]
 8024d2a:	6821      	ldr	r1, [r4, #0]
 8024d2c:	1d1d      	adds	r5, r3, #4
 8024d2e:	681b      	ldr	r3, [r3, #0]
 8024d30:	6015      	str	r5, [r2, #0]
 8024d32:	060a      	lsls	r2, r1, #24
 8024d34:	d50b      	bpl.n	8024d4e <_printf_i+0x162>
 8024d36:	07ca      	lsls	r2, r1, #31
 8024d38:	bf44      	itt	mi
 8024d3a:	f041 0120 	orrmi.w	r1, r1, #32
 8024d3e:	6021      	strmi	r1, [r4, #0]
 8024d40:	b91b      	cbnz	r3, 8024d4a <_printf_i+0x15e>
 8024d42:	6822      	ldr	r2, [r4, #0]
 8024d44:	f022 0220 	bic.w	r2, r2, #32
 8024d48:	6022      	str	r2, [r4, #0]
 8024d4a:	2210      	movs	r2, #16
 8024d4c:	e7b7      	b.n	8024cbe <_printf_i+0xd2>
 8024d4e:	064d      	lsls	r5, r1, #25
 8024d50:	bf48      	it	mi
 8024d52:	b29b      	uxthmi	r3, r3
 8024d54:	e7ef      	b.n	8024d36 <_printf_i+0x14a>
 8024d56:	4665      	mov	r5, ip
 8024d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8024d5c:	fb02 3311 	mls	r3, r2, r1, r3
 8024d60:	5cc3      	ldrb	r3, [r0, r3]
 8024d62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8024d66:	460b      	mov	r3, r1
 8024d68:	2900      	cmp	r1, #0
 8024d6a:	d1f5      	bne.n	8024d58 <_printf_i+0x16c>
 8024d6c:	e7b9      	b.n	8024ce2 <_printf_i+0xf6>
 8024d6e:	6813      	ldr	r3, [r2, #0]
 8024d70:	6825      	ldr	r5, [r4, #0]
 8024d72:	6961      	ldr	r1, [r4, #20]
 8024d74:	1d18      	adds	r0, r3, #4
 8024d76:	6010      	str	r0, [r2, #0]
 8024d78:	0628      	lsls	r0, r5, #24
 8024d7a:	681b      	ldr	r3, [r3, #0]
 8024d7c:	d501      	bpl.n	8024d82 <_printf_i+0x196>
 8024d7e:	6019      	str	r1, [r3, #0]
 8024d80:	e002      	b.n	8024d88 <_printf_i+0x19c>
 8024d82:	066a      	lsls	r2, r5, #25
 8024d84:	d5fb      	bpl.n	8024d7e <_printf_i+0x192>
 8024d86:	8019      	strh	r1, [r3, #0]
 8024d88:	2300      	movs	r3, #0
 8024d8a:	6123      	str	r3, [r4, #16]
 8024d8c:	4665      	mov	r5, ip
 8024d8e:	e7b9      	b.n	8024d04 <_printf_i+0x118>
 8024d90:	6813      	ldr	r3, [r2, #0]
 8024d92:	1d19      	adds	r1, r3, #4
 8024d94:	6011      	str	r1, [r2, #0]
 8024d96:	681d      	ldr	r5, [r3, #0]
 8024d98:	6862      	ldr	r2, [r4, #4]
 8024d9a:	2100      	movs	r1, #0
 8024d9c:	4628      	mov	r0, r5
 8024d9e:	f7db fa37 	bl	8000210 <memchr>
 8024da2:	b108      	cbz	r0, 8024da8 <_printf_i+0x1bc>
 8024da4:	1b40      	subs	r0, r0, r5
 8024da6:	6060      	str	r0, [r4, #4]
 8024da8:	6863      	ldr	r3, [r4, #4]
 8024daa:	6123      	str	r3, [r4, #16]
 8024dac:	2300      	movs	r3, #0
 8024dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024db2:	e7a7      	b.n	8024d04 <_printf_i+0x118>
 8024db4:	6923      	ldr	r3, [r4, #16]
 8024db6:	462a      	mov	r2, r5
 8024db8:	4639      	mov	r1, r7
 8024dba:	4630      	mov	r0, r6
 8024dbc:	47c0      	blx	r8
 8024dbe:	3001      	adds	r0, #1
 8024dc0:	d0aa      	beq.n	8024d18 <_printf_i+0x12c>
 8024dc2:	6823      	ldr	r3, [r4, #0]
 8024dc4:	079b      	lsls	r3, r3, #30
 8024dc6:	d413      	bmi.n	8024df0 <_printf_i+0x204>
 8024dc8:	68e0      	ldr	r0, [r4, #12]
 8024dca:	9b03      	ldr	r3, [sp, #12]
 8024dcc:	4298      	cmp	r0, r3
 8024dce:	bfb8      	it	lt
 8024dd0:	4618      	movlt	r0, r3
 8024dd2:	e7a3      	b.n	8024d1c <_printf_i+0x130>
 8024dd4:	2301      	movs	r3, #1
 8024dd6:	464a      	mov	r2, r9
 8024dd8:	4639      	mov	r1, r7
 8024dda:	4630      	mov	r0, r6
 8024ddc:	47c0      	blx	r8
 8024dde:	3001      	adds	r0, #1
 8024de0:	d09a      	beq.n	8024d18 <_printf_i+0x12c>
 8024de2:	3501      	adds	r5, #1
 8024de4:	68e3      	ldr	r3, [r4, #12]
 8024de6:	9a03      	ldr	r2, [sp, #12]
 8024de8:	1a9b      	subs	r3, r3, r2
 8024dea:	42ab      	cmp	r3, r5
 8024dec:	dcf2      	bgt.n	8024dd4 <_printf_i+0x1e8>
 8024dee:	e7eb      	b.n	8024dc8 <_printf_i+0x1dc>
 8024df0:	2500      	movs	r5, #0
 8024df2:	f104 0919 	add.w	r9, r4, #25
 8024df6:	e7f5      	b.n	8024de4 <_printf_i+0x1f8>
 8024df8:	2b00      	cmp	r3, #0
 8024dfa:	d1ac      	bne.n	8024d56 <_printf_i+0x16a>
 8024dfc:	7803      	ldrb	r3, [r0, #0]
 8024dfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024e02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024e06:	e76c      	b.n	8024ce2 <_printf_i+0xf6>
 8024e08:	080298ad 	.word	0x080298ad
 8024e0c:	080298be 	.word	0x080298be

08024e10 <_sbrk_r>:
 8024e10:	b538      	push	{r3, r4, r5, lr}
 8024e12:	4c06      	ldr	r4, [pc, #24]	; (8024e2c <_sbrk_r+0x1c>)
 8024e14:	2300      	movs	r3, #0
 8024e16:	4605      	mov	r5, r0
 8024e18:	4608      	mov	r0, r1
 8024e1a:	6023      	str	r3, [r4, #0]
 8024e1c:	f7de fc70 	bl	8003700 <_sbrk>
 8024e20:	1c43      	adds	r3, r0, #1
 8024e22:	d102      	bne.n	8024e2a <_sbrk_r+0x1a>
 8024e24:	6823      	ldr	r3, [r4, #0]
 8024e26:	b103      	cbz	r3, 8024e2a <_sbrk_r+0x1a>
 8024e28:	602b      	str	r3, [r5, #0]
 8024e2a:	bd38      	pop	{r3, r4, r5, pc}
 8024e2c:	2000cb30 	.word	0x2000cb30

08024e30 <_raise_r>:
 8024e30:	291f      	cmp	r1, #31
 8024e32:	b538      	push	{r3, r4, r5, lr}
 8024e34:	4604      	mov	r4, r0
 8024e36:	460d      	mov	r5, r1
 8024e38:	d904      	bls.n	8024e44 <_raise_r+0x14>
 8024e3a:	2316      	movs	r3, #22
 8024e3c:	6003      	str	r3, [r0, #0]
 8024e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8024e42:	bd38      	pop	{r3, r4, r5, pc}
 8024e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024e46:	b112      	cbz	r2, 8024e4e <_raise_r+0x1e>
 8024e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024e4c:	b94b      	cbnz	r3, 8024e62 <_raise_r+0x32>
 8024e4e:	4620      	mov	r0, r4
 8024e50:	f000 f830 	bl	8024eb4 <_getpid_r>
 8024e54:	462a      	mov	r2, r5
 8024e56:	4601      	mov	r1, r0
 8024e58:	4620      	mov	r0, r4
 8024e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e5e:	f000 b817 	b.w	8024e90 <_kill_r>
 8024e62:	2b01      	cmp	r3, #1
 8024e64:	d00a      	beq.n	8024e7c <_raise_r+0x4c>
 8024e66:	1c59      	adds	r1, r3, #1
 8024e68:	d103      	bne.n	8024e72 <_raise_r+0x42>
 8024e6a:	2316      	movs	r3, #22
 8024e6c:	6003      	str	r3, [r0, #0]
 8024e6e:	2001      	movs	r0, #1
 8024e70:	e7e7      	b.n	8024e42 <_raise_r+0x12>
 8024e72:	2400      	movs	r4, #0
 8024e74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024e78:	4628      	mov	r0, r5
 8024e7a:	4798      	blx	r3
 8024e7c:	2000      	movs	r0, #0
 8024e7e:	e7e0      	b.n	8024e42 <_raise_r+0x12>

08024e80 <raise>:
 8024e80:	4b02      	ldr	r3, [pc, #8]	; (8024e8c <raise+0xc>)
 8024e82:	4601      	mov	r1, r0
 8024e84:	6818      	ldr	r0, [r3, #0]
 8024e86:	f7ff bfd3 	b.w	8024e30 <_raise_r>
 8024e8a:	bf00      	nop
 8024e8c:	20000098 	.word	0x20000098

08024e90 <_kill_r>:
 8024e90:	b538      	push	{r3, r4, r5, lr}
 8024e92:	4c07      	ldr	r4, [pc, #28]	; (8024eb0 <_kill_r+0x20>)
 8024e94:	2300      	movs	r3, #0
 8024e96:	4605      	mov	r5, r0
 8024e98:	4608      	mov	r0, r1
 8024e9a:	4611      	mov	r1, r2
 8024e9c:	6023      	str	r3, [r4, #0]
 8024e9e:	f7de fba7 	bl	80035f0 <_kill>
 8024ea2:	1c43      	adds	r3, r0, #1
 8024ea4:	d102      	bne.n	8024eac <_kill_r+0x1c>
 8024ea6:	6823      	ldr	r3, [r4, #0]
 8024ea8:	b103      	cbz	r3, 8024eac <_kill_r+0x1c>
 8024eaa:	602b      	str	r3, [r5, #0]
 8024eac:	bd38      	pop	{r3, r4, r5, pc}
 8024eae:	bf00      	nop
 8024eb0:	2000cb30 	.word	0x2000cb30

08024eb4 <_getpid_r>:
 8024eb4:	f7de bb94 	b.w	80035e0 <_getpid>

08024eb8 <__swbuf_r>:
 8024eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024eba:	460e      	mov	r6, r1
 8024ebc:	4614      	mov	r4, r2
 8024ebe:	4605      	mov	r5, r0
 8024ec0:	b118      	cbz	r0, 8024eca <__swbuf_r+0x12>
 8024ec2:	6983      	ldr	r3, [r0, #24]
 8024ec4:	b90b      	cbnz	r3, 8024eca <__swbuf_r+0x12>
 8024ec6:	f000 fa0b 	bl	80252e0 <__sinit>
 8024eca:	4b21      	ldr	r3, [pc, #132]	; (8024f50 <__swbuf_r+0x98>)
 8024ecc:	429c      	cmp	r4, r3
 8024ece:	d12a      	bne.n	8024f26 <__swbuf_r+0x6e>
 8024ed0:	686c      	ldr	r4, [r5, #4]
 8024ed2:	69a3      	ldr	r3, [r4, #24]
 8024ed4:	60a3      	str	r3, [r4, #8]
 8024ed6:	89a3      	ldrh	r3, [r4, #12]
 8024ed8:	071a      	lsls	r2, r3, #28
 8024eda:	d52e      	bpl.n	8024f3a <__swbuf_r+0x82>
 8024edc:	6923      	ldr	r3, [r4, #16]
 8024ede:	b363      	cbz	r3, 8024f3a <__swbuf_r+0x82>
 8024ee0:	6923      	ldr	r3, [r4, #16]
 8024ee2:	6820      	ldr	r0, [r4, #0]
 8024ee4:	1ac0      	subs	r0, r0, r3
 8024ee6:	6963      	ldr	r3, [r4, #20]
 8024ee8:	b2f6      	uxtb	r6, r6
 8024eea:	4283      	cmp	r3, r0
 8024eec:	4637      	mov	r7, r6
 8024eee:	dc04      	bgt.n	8024efa <__swbuf_r+0x42>
 8024ef0:	4621      	mov	r1, r4
 8024ef2:	4628      	mov	r0, r5
 8024ef4:	f000 f98a 	bl	802520c <_fflush_r>
 8024ef8:	bb28      	cbnz	r0, 8024f46 <__swbuf_r+0x8e>
 8024efa:	68a3      	ldr	r3, [r4, #8]
 8024efc:	3b01      	subs	r3, #1
 8024efe:	60a3      	str	r3, [r4, #8]
 8024f00:	6823      	ldr	r3, [r4, #0]
 8024f02:	1c5a      	adds	r2, r3, #1
 8024f04:	6022      	str	r2, [r4, #0]
 8024f06:	701e      	strb	r6, [r3, #0]
 8024f08:	6963      	ldr	r3, [r4, #20]
 8024f0a:	3001      	adds	r0, #1
 8024f0c:	4283      	cmp	r3, r0
 8024f0e:	d004      	beq.n	8024f1a <__swbuf_r+0x62>
 8024f10:	89a3      	ldrh	r3, [r4, #12]
 8024f12:	07db      	lsls	r3, r3, #31
 8024f14:	d519      	bpl.n	8024f4a <__swbuf_r+0x92>
 8024f16:	2e0a      	cmp	r6, #10
 8024f18:	d117      	bne.n	8024f4a <__swbuf_r+0x92>
 8024f1a:	4621      	mov	r1, r4
 8024f1c:	4628      	mov	r0, r5
 8024f1e:	f000 f975 	bl	802520c <_fflush_r>
 8024f22:	b190      	cbz	r0, 8024f4a <__swbuf_r+0x92>
 8024f24:	e00f      	b.n	8024f46 <__swbuf_r+0x8e>
 8024f26:	4b0b      	ldr	r3, [pc, #44]	; (8024f54 <__swbuf_r+0x9c>)
 8024f28:	429c      	cmp	r4, r3
 8024f2a:	d101      	bne.n	8024f30 <__swbuf_r+0x78>
 8024f2c:	68ac      	ldr	r4, [r5, #8]
 8024f2e:	e7d0      	b.n	8024ed2 <__swbuf_r+0x1a>
 8024f30:	4b09      	ldr	r3, [pc, #36]	; (8024f58 <__swbuf_r+0xa0>)
 8024f32:	429c      	cmp	r4, r3
 8024f34:	bf08      	it	eq
 8024f36:	68ec      	ldreq	r4, [r5, #12]
 8024f38:	e7cb      	b.n	8024ed2 <__swbuf_r+0x1a>
 8024f3a:	4621      	mov	r1, r4
 8024f3c:	4628      	mov	r0, r5
 8024f3e:	f000 f80d 	bl	8024f5c <__swsetup_r>
 8024f42:	2800      	cmp	r0, #0
 8024f44:	d0cc      	beq.n	8024ee0 <__swbuf_r+0x28>
 8024f46:	f04f 37ff 	mov.w	r7, #4294967295
 8024f4a:	4638      	mov	r0, r7
 8024f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024f4e:	bf00      	nop
 8024f50:	080298f4 	.word	0x080298f4
 8024f54:	08029914 	.word	0x08029914
 8024f58:	080298d4 	.word	0x080298d4

08024f5c <__swsetup_r>:
 8024f5c:	4b32      	ldr	r3, [pc, #200]	; (8025028 <__swsetup_r+0xcc>)
 8024f5e:	b570      	push	{r4, r5, r6, lr}
 8024f60:	681d      	ldr	r5, [r3, #0]
 8024f62:	4606      	mov	r6, r0
 8024f64:	460c      	mov	r4, r1
 8024f66:	b125      	cbz	r5, 8024f72 <__swsetup_r+0x16>
 8024f68:	69ab      	ldr	r3, [r5, #24]
 8024f6a:	b913      	cbnz	r3, 8024f72 <__swsetup_r+0x16>
 8024f6c:	4628      	mov	r0, r5
 8024f6e:	f000 f9b7 	bl	80252e0 <__sinit>
 8024f72:	4b2e      	ldr	r3, [pc, #184]	; (802502c <__swsetup_r+0xd0>)
 8024f74:	429c      	cmp	r4, r3
 8024f76:	d10f      	bne.n	8024f98 <__swsetup_r+0x3c>
 8024f78:	686c      	ldr	r4, [r5, #4]
 8024f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f7e:	b29a      	uxth	r2, r3
 8024f80:	0715      	lsls	r5, r2, #28
 8024f82:	d42c      	bmi.n	8024fde <__swsetup_r+0x82>
 8024f84:	06d0      	lsls	r0, r2, #27
 8024f86:	d411      	bmi.n	8024fac <__swsetup_r+0x50>
 8024f88:	2209      	movs	r2, #9
 8024f8a:	6032      	str	r2, [r6, #0]
 8024f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f90:	81a3      	strh	r3, [r4, #12]
 8024f92:	f04f 30ff 	mov.w	r0, #4294967295
 8024f96:	e03e      	b.n	8025016 <__swsetup_r+0xba>
 8024f98:	4b25      	ldr	r3, [pc, #148]	; (8025030 <__swsetup_r+0xd4>)
 8024f9a:	429c      	cmp	r4, r3
 8024f9c:	d101      	bne.n	8024fa2 <__swsetup_r+0x46>
 8024f9e:	68ac      	ldr	r4, [r5, #8]
 8024fa0:	e7eb      	b.n	8024f7a <__swsetup_r+0x1e>
 8024fa2:	4b24      	ldr	r3, [pc, #144]	; (8025034 <__swsetup_r+0xd8>)
 8024fa4:	429c      	cmp	r4, r3
 8024fa6:	bf08      	it	eq
 8024fa8:	68ec      	ldreq	r4, [r5, #12]
 8024faa:	e7e6      	b.n	8024f7a <__swsetup_r+0x1e>
 8024fac:	0751      	lsls	r1, r2, #29
 8024fae:	d512      	bpl.n	8024fd6 <__swsetup_r+0x7a>
 8024fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024fb2:	b141      	cbz	r1, 8024fc6 <__swsetup_r+0x6a>
 8024fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024fb8:	4299      	cmp	r1, r3
 8024fba:	d002      	beq.n	8024fc2 <__swsetup_r+0x66>
 8024fbc:	4630      	mov	r0, r6
 8024fbe:	f7ff fbb7 	bl	8024730 <_free_r>
 8024fc2:	2300      	movs	r3, #0
 8024fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8024fc6:	89a3      	ldrh	r3, [r4, #12]
 8024fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024fcc:	81a3      	strh	r3, [r4, #12]
 8024fce:	2300      	movs	r3, #0
 8024fd0:	6063      	str	r3, [r4, #4]
 8024fd2:	6923      	ldr	r3, [r4, #16]
 8024fd4:	6023      	str	r3, [r4, #0]
 8024fd6:	89a3      	ldrh	r3, [r4, #12]
 8024fd8:	f043 0308 	orr.w	r3, r3, #8
 8024fdc:	81a3      	strh	r3, [r4, #12]
 8024fde:	6923      	ldr	r3, [r4, #16]
 8024fe0:	b94b      	cbnz	r3, 8024ff6 <__swsetup_r+0x9a>
 8024fe2:	89a3      	ldrh	r3, [r4, #12]
 8024fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024fec:	d003      	beq.n	8024ff6 <__swsetup_r+0x9a>
 8024fee:	4621      	mov	r1, r4
 8024ff0:	4630      	mov	r0, r6
 8024ff2:	f000 fa23 	bl	802543c <__smakebuf_r>
 8024ff6:	89a2      	ldrh	r2, [r4, #12]
 8024ff8:	f012 0301 	ands.w	r3, r2, #1
 8024ffc:	d00c      	beq.n	8025018 <__swsetup_r+0xbc>
 8024ffe:	2300      	movs	r3, #0
 8025000:	60a3      	str	r3, [r4, #8]
 8025002:	6963      	ldr	r3, [r4, #20]
 8025004:	425b      	negs	r3, r3
 8025006:	61a3      	str	r3, [r4, #24]
 8025008:	6923      	ldr	r3, [r4, #16]
 802500a:	b953      	cbnz	r3, 8025022 <__swsetup_r+0xc6>
 802500c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025014:	d1ba      	bne.n	8024f8c <__swsetup_r+0x30>
 8025016:	bd70      	pop	{r4, r5, r6, pc}
 8025018:	0792      	lsls	r2, r2, #30
 802501a:	bf58      	it	pl
 802501c:	6963      	ldrpl	r3, [r4, #20]
 802501e:	60a3      	str	r3, [r4, #8]
 8025020:	e7f2      	b.n	8025008 <__swsetup_r+0xac>
 8025022:	2000      	movs	r0, #0
 8025024:	e7f7      	b.n	8025016 <__swsetup_r+0xba>
 8025026:	bf00      	nop
 8025028:	20000098 	.word	0x20000098
 802502c:	080298f4 	.word	0x080298f4
 8025030:	08029914 	.word	0x08029914
 8025034:	080298d4 	.word	0x080298d4

08025038 <__register_exitproc>:
 8025038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802503c:	4d2c      	ldr	r5, [pc, #176]	; (80250f0 <__register_exitproc+0xb8>)
 802503e:	682c      	ldr	r4, [r5, #0]
 8025040:	4607      	mov	r7, r0
 8025042:	460e      	mov	r6, r1
 8025044:	4691      	mov	r9, r2
 8025046:	4698      	mov	r8, r3
 8025048:	b934      	cbnz	r4, 8025058 <__register_exitproc+0x20>
 802504a:	4b2a      	ldr	r3, [pc, #168]	; (80250f4 <__register_exitproc+0xbc>)
 802504c:	4c2a      	ldr	r4, [pc, #168]	; (80250f8 <__register_exitproc+0xc0>)
 802504e:	602c      	str	r4, [r5, #0]
 8025050:	b113      	cbz	r3, 8025058 <__register_exitproc+0x20>
 8025052:	681b      	ldr	r3, [r3, #0]
 8025054:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025058:	6863      	ldr	r3, [r4, #4]
 802505a:	2b1f      	cmp	r3, #31
 802505c:	dd3d      	ble.n	80250da <__register_exitproc+0xa2>
 802505e:	4b27      	ldr	r3, [pc, #156]	; (80250fc <__register_exitproc+0xc4>)
 8025060:	b91b      	cbnz	r3, 802506a <__register_exitproc+0x32>
 8025062:	f04f 30ff 	mov.w	r0, #4294967295
 8025066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802506a:	208c      	movs	r0, #140	; 0x8c
 802506c:	f7ff fb3c 	bl	80246e8 <malloc>
 8025070:	4604      	mov	r4, r0
 8025072:	2800      	cmp	r0, #0
 8025074:	d0f5      	beq.n	8025062 <__register_exitproc+0x2a>
 8025076:	2300      	movs	r3, #0
 8025078:	682a      	ldr	r2, [r5, #0]
 802507a:	6002      	str	r2, [r0, #0]
 802507c:	6043      	str	r3, [r0, #4]
 802507e:	6028      	str	r0, [r5, #0]
 8025080:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025084:	b30f      	cbz	r7, 80250ca <__register_exitproc+0x92>
 8025086:	f44f 7084 	mov.w	r0, #264	; 0x108
 802508a:	f7ff fb2d 	bl	80246e8 <malloc>
 802508e:	2800      	cmp	r0, #0
 8025090:	d0e7      	beq.n	8025062 <__register_exitproc+0x2a>
 8025092:	2300      	movs	r3, #0
 8025094:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025098:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802509c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80250a0:	6862      	ldr	r2, [r4, #4]
 80250a2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80250a6:	2301      	movs	r3, #1
 80250a8:	4093      	lsls	r3, r2
 80250aa:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80250ae:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80250b2:	431a      	orrs	r2, r3
 80250b4:	2f02      	cmp	r7, #2
 80250b6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80250ba:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80250be:	bf02      	ittt	eq
 80250c0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80250c4:	4313      	orreq	r3, r2
 80250c6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80250ca:	6863      	ldr	r3, [r4, #4]
 80250cc:	1c5a      	adds	r2, r3, #1
 80250ce:	3302      	adds	r3, #2
 80250d0:	6062      	str	r2, [r4, #4]
 80250d2:	2000      	movs	r0, #0
 80250d4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80250d8:	e7c5      	b.n	8025066 <__register_exitproc+0x2e>
 80250da:	2f00      	cmp	r7, #0
 80250dc:	d0f5      	beq.n	80250ca <__register_exitproc+0x92>
 80250de:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80250e2:	2800      	cmp	r0, #0
 80250e4:	d1dc      	bne.n	80250a0 <__register_exitproc+0x68>
 80250e6:	4b05      	ldr	r3, [pc, #20]	; (80250fc <__register_exitproc+0xc4>)
 80250e8:	2b00      	cmp	r3, #0
 80250ea:	d0ba      	beq.n	8025062 <__register_exitproc+0x2a>
 80250ec:	e7cb      	b.n	8025086 <__register_exitproc+0x4e>
 80250ee:	bf00      	nop
 80250f0:	2000bf28 	.word	0x2000bf28
 80250f4:	080298d0 	.word	0x080298d0
 80250f8:	2000be9c 	.word	0x2000be9c
 80250fc:	080246e9 	.word	0x080246e9

08025100 <__sflush_r>:
 8025100:	898a      	ldrh	r2, [r1, #12]
 8025102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025106:	4605      	mov	r5, r0
 8025108:	0710      	lsls	r0, r2, #28
 802510a:	460c      	mov	r4, r1
 802510c:	d458      	bmi.n	80251c0 <__sflush_r+0xc0>
 802510e:	684b      	ldr	r3, [r1, #4]
 8025110:	2b00      	cmp	r3, #0
 8025112:	dc05      	bgt.n	8025120 <__sflush_r+0x20>
 8025114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025116:	2b00      	cmp	r3, #0
 8025118:	dc02      	bgt.n	8025120 <__sflush_r+0x20>
 802511a:	2000      	movs	r0, #0
 802511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025122:	2e00      	cmp	r6, #0
 8025124:	d0f9      	beq.n	802511a <__sflush_r+0x1a>
 8025126:	2300      	movs	r3, #0
 8025128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802512c:	682f      	ldr	r7, [r5, #0]
 802512e:	6a21      	ldr	r1, [r4, #32]
 8025130:	602b      	str	r3, [r5, #0]
 8025132:	d032      	beq.n	802519a <__sflush_r+0x9a>
 8025134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025136:	89a3      	ldrh	r3, [r4, #12]
 8025138:	075a      	lsls	r2, r3, #29
 802513a:	d505      	bpl.n	8025148 <__sflush_r+0x48>
 802513c:	6863      	ldr	r3, [r4, #4]
 802513e:	1ac0      	subs	r0, r0, r3
 8025140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025142:	b10b      	cbz	r3, 8025148 <__sflush_r+0x48>
 8025144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025146:	1ac0      	subs	r0, r0, r3
 8025148:	2300      	movs	r3, #0
 802514a:	4602      	mov	r2, r0
 802514c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802514e:	6a21      	ldr	r1, [r4, #32]
 8025150:	4628      	mov	r0, r5
 8025152:	47b0      	blx	r6
 8025154:	1c43      	adds	r3, r0, #1
 8025156:	89a3      	ldrh	r3, [r4, #12]
 8025158:	d106      	bne.n	8025168 <__sflush_r+0x68>
 802515a:	6829      	ldr	r1, [r5, #0]
 802515c:	291d      	cmp	r1, #29
 802515e:	d848      	bhi.n	80251f2 <__sflush_r+0xf2>
 8025160:	4a29      	ldr	r2, [pc, #164]	; (8025208 <__sflush_r+0x108>)
 8025162:	40ca      	lsrs	r2, r1
 8025164:	07d6      	lsls	r6, r2, #31
 8025166:	d544      	bpl.n	80251f2 <__sflush_r+0xf2>
 8025168:	2200      	movs	r2, #0
 802516a:	6062      	str	r2, [r4, #4]
 802516c:	04d9      	lsls	r1, r3, #19
 802516e:	6922      	ldr	r2, [r4, #16]
 8025170:	6022      	str	r2, [r4, #0]
 8025172:	d504      	bpl.n	802517e <__sflush_r+0x7e>
 8025174:	1c42      	adds	r2, r0, #1
 8025176:	d101      	bne.n	802517c <__sflush_r+0x7c>
 8025178:	682b      	ldr	r3, [r5, #0]
 802517a:	b903      	cbnz	r3, 802517e <__sflush_r+0x7e>
 802517c:	6560      	str	r0, [r4, #84]	; 0x54
 802517e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025180:	602f      	str	r7, [r5, #0]
 8025182:	2900      	cmp	r1, #0
 8025184:	d0c9      	beq.n	802511a <__sflush_r+0x1a>
 8025186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802518a:	4299      	cmp	r1, r3
 802518c:	d002      	beq.n	8025194 <__sflush_r+0x94>
 802518e:	4628      	mov	r0, r5
 8025190:	f7ff face 	bl	8024730 <_free_r>
 8025194:	2000      	movs	r0, #0
 8025196:	6360      	str	r0, [r4, #52]	; 0x34
 8025198:	e7c0      	b.n	802511c <__sflush_r+0x1c>
 802519a:	2301      	movs	r3, #1
 802519c:	4628      	mov	r0, r5
 802519e:	47b0      	blx	r6
 80251a0:	1c41      	adds	r1, r0, #1
 80251a2:	d1c8      	bne.n	8025136 <__sflush_r+0x36>
 80251a4:	682b      	ldr	r3, [r5, #0]
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d0c5      	beq.n	8025136 <__sflush_r+0x36>
 80251aa:	2b1d      	cmp	r3, #29
 80251ac:	d001      	beq.n	80251b2 <__sflush_r+0xb2>
 80251ae:	2b16      	cmp	r3, #22
 80251b0:	d101      	bne.n	80251b6 <__sflush_r+0xb6>
 80251b2:	602f      	str	r7, [r5, #0]
 80251b4:	e7b1      	b.n	802511a <__sflush_r+0x1a>
 80251b6:	89a3      	ldrh	r3, [r4, #12]
 80251b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80251bc:	81a3      	strh	r3, [r4, #12]
 80251be:	e7ad      	b.n	802511c <__sflush_r+0x1c>
 80251c0:	690f      	ldr	r7, [r1, #16]
 80251c2:	2f00      	cmp	r7, #0
 80251c4:	d0a9      	beq.n	802511a <__sflush_r+0x1a>
 80251c6:	0793      	lsls	r3, r2, #30
 80251c8:	680e      	ldr	r6, [r1, #0]
 80251ca:	bf08      	it	eq
 80251cc:	694b      	ldreq	r3, [r1, #20]
 80251ce:	600f      	str	r7, [r1, #0]
 80251d0:	bf18      	it	ne
 80251d2:	2300      	movne	r3, #0
 80251d4:	eba6 0807 	sub.w	r8, r6, r7
 80251d8:	608b      	str	r3, [r1, #8]
 80251da:	f1b8 0f00 	cmp.w	r8, #0
 80251de:	dd9c      	ble.n	802511a <__sflush_r+0x1a>
 80251e0:	4643      	mov	r3, r8
 80251e2:	463a      	mov	r2, r7
 80251e4:	6a21      	ldr	r1, [r4, #32]
 80251e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80251e8:	4628      	mov	r0, r5
 80251ea:	47b0      	blx	r6
 80251ec:	2800      	cmp	r0, #0
 80251ee:	dc06      	bgt.n	80251fe <__sflush_r+0xfe>
 80251f0:	89a3      	ldrh	r3, [r4, #12]
 80251f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80251f6:	81a3      	strh	r3, [r4, #12]
 80251f8:	f04f 30ff 	mov.w	r0, #4294967295
 80251fc:	e78e      	b.n	802511c <__sflush_r+0x1c>
 80251fe:	4407      	add	r7, r0
 8025200:	eba8 0800 	sub.w	r8, r8, r0
 8025204:	e7e9      	b.n	80251da <__sflush_r+0xda>
 8025206:	bf00      	nop
 8025208:	20400001 	.word	0x20400001

0802520c <_fflush_r>:
 802520c:	b538      	push	{r3, r4, r5, lr}
 802520e:	690b      	ldr	r3, [r1, #16]
 8025210:	4605      	mov	r5, r0
 8025212:	460c      	mov	r4, r1
 8025214:	b1db      	cbz	r3, 802524e <_fflush_r+0x42>
 8025216:	b118      	cbz	r0, 8025220 <_fflush_r+0x14>
 8025218:	6983      	ldr	r3, [r0, #24]
 802521a:	b90b      	cbnz	r3, 8025220 <_fflush_r+0x14>
 802521c:	f000 f860 	bl	80252e0 <__sinit>
 8025220:	4b0c      	ldr	r3, [pc, #48]	; (8025254 <_fflush_r+0x48>)
 8025222:	429c      	cmp	r4, r3
 8025224:	d109      	bne.n	802523a <_fflush_r+0x2e>
 8025226:	686c      	ldr	r4, [r5, #4]
 8025228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802522c:	b17b      	cbz	r3, 802524e <_fflush_r+0x42>
 802522e:	4621      	mov	r1, r4
 8025230:	4628      	mov	r0, r5
 8025232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025236:	f7ff bf63 	b.w	8025100 <__sflush_r>
 802523a:	4b07      	ldr	r3, [pc, #28]	; (8025258 <_fflush_r+0x4c>)
 802523c:	429c      	cmp	r4, r3
 802523e:	d101      	bne.n	8025244 <_fflush_r+0x38>
 8025240:	68ac      	ldr	r4, [r5, #8]
 8025242:	e7f1      	b.n	8025228 <_fflush_r+0x1c>
 8025244:	4b05      	ldr	r3, [pc, #20]	; (802525c <_fflush_r+0x50>)
 8025246:	429c      	cmp	r4, r3
 8025248:	bf08      	it	eq
 802524a:	68ec      	ldreq	r4, [r5, #12]
 802524c:	e7ec      	b.n	8025228 <_fflush_r+0x1c>
 802524e:	2000      	movs	r0, #0
 8025250:	bd38      	pop	{r3, r4, r5, pc}
 8025252:	bf00      	nop
 8025254:	080298f4 	.word	0x080298f4
 8025258:	08029914 	.word	0x08029914
 802525c:	080298d4 	.word	0x080298d4

08025260 <std>:
 8025260:	2300      	movs	r3, #0
 8025262:	b510      	push	{r4, lr}
 8025264:	4604      	mov	r4, r0
 8025266:	e9c0 3300 	strd	r3, r3, [r0]
 802526a:	6083      	str	r3, [r0, #8]
 802526c:	8181      	strh	r1, [r0, #12]
 802526e:	6643      	str	r3, [r0, #100]	; 0x64
 8025270:	81c2      	strh	r2, [r0, #14]
 8025272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025276:	6183      	str	r3, [r0, #24]
 8025278:	4619      	mov	r1, r3
 802527a:	2208      	movs	r2, #8
 802527c:	305c      	adds	r0, #92	; 0x5c
 802527e:	f7ff fa4e 	bl	802471e <memset>
 8025282:	4b05      	ldr	r3, [pc, #20]	; (8025298 <std+0x38>)
 8025284:	6263      	str	r3, [r4, #36]	; 0x24
 8025286:	4b05      	ldr	r3, [pc, #20]	; (802529c <std+0x3c>)
 8025288:	62a3      	str	r3, [r4, #40]	; 0x28
 802528a:	4b05      	ldr	r3, [pc, #20]	; (80252a0 <std+0x40>)
 802528c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802528e:	4b05      	ldr	r3, [pc, #20]	; (80252a4 <std+0x44>)
 8025290:	6224      	str	r4, [r4, #32]
 8025292:	6323      	str	r3, [r4, #48]	; 0x30
 8025294:	bd10      	pop	{r4, pc}
 8025296:	bf00      	nop
 8025298:	080254c1 	.word	0x080254c1
 802529c:	080254e3 	.word	0x080254e3
 80252a0:	0802551b 	.word	0x0802551b
 80252a4:	0802553f 	.word	0x0802553f

080252a8 <_cleanup_r>:
 80252a8:	4901      	ldr	r1, [pc, #4]	; (80252b0 <_cleanup_r+0x8>)
 80252aa:	f000 b885 	b.w	80253b8 <_fwalk_reent>
 80252ae:	bf00      	nop
 80252b0:	0802520d 	.word	0x0802520d

080252b4 <__sfmoreglue>:
 80252b4:	b570      	push	{r4, r5, r6, lr}
 80252b6:	1e4a      	subs	r2, r1, #1
 80252b8:	2568      	movs	r5, #104	; 0x68
 80252ba:	4355      	muls	r5, r2
 80252bc:	460e      	mov	r6, r1
 80252be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80252c2:	f7ff fa83 	bl	80247cc <_malloc_r>
 80252c6:	4604      	mov	r4, r0
 80252c8:	b140      	cbz	r0, 80252dc <__sfmoreglue+0x28>
 80252ca:	2100      	movs	r1, #0
 80252cc:	e9c0 1600 	strd	r1, r6, [r0]
 80252d0:	300c      	adds	r0, #12
 80252d2:	60a0      	str	r0, [r4, #8]
 80252d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80252d8:	f7ff fa21 	bl	802471e <memset>
 80252dc:	4620      	mov	r0, r4
 80252de:	bd70      	pop	{r4, r5, r6, pc}

080252e0 <__sinit>:
 80252e0:	6983      	ldr	r3, [r0, #24]
 80252e2:	b510      	push	{r4, lr}
 80252e4:	4604      	mov	r4, r0
 80252e6:	bb33      	cbnz	r3, 8025336 <__sinit+0x56>
 80252e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80252ec:	6503      	str	r3, [r0, #80]	; 0x50
 80252ee:	4b12      	ldr	r3, [pc, #72]	; (8025338 <__sinit+0x58>)
 80252f0:	4a12      	ldr	r2, [pc, #72]	; (802533c <__sinit+0x5c>)
 80252f2:	681b      	ldr	r3, [r3, #0]
 80252f4:	6282      	str	r2, [r0, #40]	; 0x28
 80252f6:	4298      	cmp	r0, r3
 80252f8:	bf04      	itt	eq
 80252fa:	2301      	moveq	r3, #1
 80252fc:	6183      	streq	r3, [r0, #24]
 80252fe:	f000 f81f 	bl	8025340 <__sfp>
 8025302:	6060      	str	r0, [r4, #4]
 8025304:	4620      	mov	r0, r4
 8025306:	f000 f81b 	bl	8025340 <__sfp>
 802530a:	60a0      	str	r0, [r4, #8]
 802530c:	4620      	mov	r0, r4
 802530e:	f000 f817 	bl	8025340 <__sfp>
 8025312:	2200      	movs	r2, #0
 8025314:	60e0      	str	r0, [r4, #12]
 8025316:	2104      	movs	r1, #4
 8025318:	6860      	ldr	r0, [r4, #4]
 802531a:	f7ff ffa1 	bl	8025260 <std>
 802531e:	2201      	movs	r2, #1
 8025320:	2109      	movs	r1, #9
 8025322:	68a0      	ldr	r0, [r4, #8]
 8025324:	f7ff ff9c 	bl	8025260 <std>
 8025328:	2202      	movs	r2, #2
 802532a:	2112      	movs	r1, #18
 802532c:	68e0      	ldr	r0, [r4, #12]
 802532e:	f7ff ff97 	bl	8025260 <std>
 8025332:	2301      	movs	r3, #1
 8025334:	61a3      	str	r3, [r4, #24]
 8025336:	bd10      	pop	{r4, pc}
 8025338:	08029898 	.word	0x08029898
 802533c:	080252a9 	.word	0x080252a9

08025340 <__sfp>:
 8025340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025342:	4b1b      	ldr	r3, [pc, #108]	; (80253b0 <__sfp+0x70>)
 8025344:	681e      	ldr	r6, [r3, #0]
 8025346:	69b3      	ldr	r3, [r6, #24]
 8025348:	4607      	mov	r7, r0
 802534a:	b913      	cbnz	r3, 8025352 <__sfp+0x12>
 802534c:	4630      	mov	r0, r6
 802534e:	f7ff ffc7 	bl	80252e0 <__sinit>
 8025352:	3648      	adds	r6, #72	; 0x48
 8025354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025358:	3b01      	subs	r3, #1
 802535a:	d503      	bpl.n	8025364 <__sfp+0x24>
 802535c:	6833      	ldr	r3, [r6, #0]
 802535e:	b133      	cbz	r3, 802536e <__sfp+0x2e>
 8025360:	6836      	ldr	r6, [r6, #0]
 8025362:	e7f7      	b.n	8025354 <__sfp+0x14>
 8025364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025368:	b16d      	cbz	r5, 8025386 <__sfp+0x46>
 802536a:	3468      	adds	r4, #104	; 0x68
 802536c:	e7f4      	b.n	8025358 <__sfp+0x18>
 802536e:	2104      	movs	r1, #4
 8025370:	4638      	mov	r0, r7
 8025372:	f7ff ff9f 	bl	80252b4 <__sfmoreglue>
 8025376:	6030      	str	r0, [r6, #0]
 8025378:	2800      	cmp	r0, #0
 802537a:	d1f1      	bne.n	8025360 <__sfp+0x20>
 802537c:	230c      	movs	r3, #12
 802537e:	603b      	str	r3, [r7, #0]
 8025380:	4604      	mov	r4, r0
 8025382:	4620      	mov	r0, r4
 8025384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025386:	4b0b      	ldr	r3, [pc, #44]	; (80253b4 <__sfp+0x74>)
 8025388:	6665      	str	r5, [r4, #100]	; 0x64
 802538a:	e9c4 5500 	strd	r5, r5, [r4]
 802538e:	60a5      	str	r5, [r4, #8]
 8025390:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025394:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025398:	2208      	movs	r2, #8
 802539a:	4629      	mov	r1, r5
 802539c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80253a0:	f7ff f9bd 	bl	802471e <memset>
 80253a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80253a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80253ac:	e7e9      	b.n	8025382 <__sfp+0x42>
 80253ae:	bf00      	nop
 80253b0:	08029898 	.word	0x08029898
 80253b4:	ffff0001 	.word	0xffff0001

080253b8 <_fwalk_reent>:
 80253b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253bc:	4680      	mov	r8, r0
 80253be:	4689      	mov	r9, r1
 80253c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80253c4:	2600      	movs	r6, #0
 80253c6:	b914      	cbnz	r4, 80253ce <_fwalk_reent+0x16>
 80253c8:	4630      	mov	r0, r6
 80253ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80253ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80253d2:	3f01      	subs	r7, #1
 80253d4:	d501      	bpl.n	80253da <_fwalk_reent+0x22>
 80253d6:	6824      	ldr	r4, [r4, #0]
 80253d8:	e7f5      	b.n	80253c6 <_fwalk_reent+0xe>
 80253da:	89ab      	ldrh	r3, [r5, #12]
 80253dc:	2b01      	cmp	r3, #1
 80253de:	d907      	bls.n	80253f0 <_fwalk_reent+0x38>
 80253e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80253e4:	3301      	adds	r3, #1
 80253e6:	d003      	beq.n	80253f0 <_fwalk_reent+0x38>
 80253e8:	4629      	mov	r1, r5
 80253ea:	4640      	mov	r0, r8
 80253ec:	47c8      	blx	r9
 80253ee:	4306      	orrs	r6, r0
 80253f0:	3568      	adds	r5, #104	; 0x68
 80253f2:	e7ee      	b.n	80253d2 <_fwalk_reent+0x1a>

080253f4 <__swhatbuf_r>:
 80253f4:	b570      	push	{r4, r5, r6, lr}
 80253f6:	460e      	mov	r6, r1
 80253f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253fc:	2900      	cmp	r1, #0
 80253fe:	b096      	sub	sp, #88	; 0x58
 8025400:	4614      	mov	r4, r2
 8025402:	461d      	mov	r5, r3
 8025404:	da07      	bge.n	8025416 <__swhatbuf_r+0x22>
 8025406:	2300      	movs	r3, #0
 8025408:	602b      	str	r3, [r5, #0]
 802540a:	89b3      	ldrh	r3, [r6, #12]
 802540c:	061a      	lsls	r2, r3, #24
 802540e:	d410      	bmi.n	8025432 <__swhatbuf_r+0x3e>
 8025410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025414:	e00e      	b.n	8025434 <__swhatbuf_r+0x40>
 8025416:	466a      	mov	r2, sp
 8025418:	f000 f8b8 	bl	802558c <_fstat_r>
 802541c:	2800      	cmp	r0, #0
 802541e:	dbf2      	blt.n	8025406 <__swhatbuf_r+0x12>
 8025420:	9a01      	ldr	r2, [sp, #4]
 8025422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802542a:	425a      	negs	r2, r3
 802542c:	415a      	adcs	r2, r3
 802542e:	602a      	str	r2, [r5, #0]
 8025430:	e7ee      	b.n	8025410 <__swhatbuf_r+0x1c>
 8025432:	2340      	movs	r3, #64	; 0x40
 8025434:	2000      	movs	r0, #0
 8025436:	6023      	str	r3, [r4, #0]
 8025438:	b016      	add	sp, #88	; 0x58
 802543a:	bd70      	pop	{r4, r5, r6, pc}

0802543c <__smakebuf_r>:
 802543c:	898b      	ldrh	r3, [r1, #12]
 802543e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025440:	079d      	lsls	r5, r3, #30
 8025442:	4606      	mov	r6, r0
 8025444:	460c      	mov	r4, r1
 8025446:	d507      	bpl.n	8025458 <__smakebuf_r+0x1c>
 8025448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802544c:	6023      	str	r3, [r4, #0]
 802544e:	6123      	str	r3, [r4, #16]
 8025450:	2301      	movs	r3, #1
 8025452:	6163      	str	r3, [r4, #20]
 8025454:	b002      	add	sp, #8
 8025456:	bd70      	pop	{r4, r5, r6, pc}
 8025458:	ab01      	add	r3, sp, #4
 802545a:	466a      	mov	r2, sp
 802545c:	f7ff ffca 	bl	80253f4 <__swhatbuf_r>
 8025460:	9900      	ldr	r1, [sp, #0]
 8025462:	4605      	mov	r5, r0
 8025464:	4630      	mov	r0, r6
 8025466:	f7ff f9b1 	bl	80247cc <_malloc_r>
 802546a:	b948      	cbnz	r0, 8025480 <__smakebuf_r+0x44>
 802546c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025470:	059a      	lsls	r2, r3, #22
 8025472:	d4ef      	bmi.n	8025454 <__smakebuf_r+0x18>
 8025474:	f023 0303 	bic.w	r3, r3, #3
 8025478:	f043 0302 	orr.w	r3, r3, #2
 802547c:	81a3      	strh	r3, [r4, #12]
 802547e:	e7e3      	b.n	8025448 <__smakebuf_r+0xc>
 8025480:	4b0d      	ldr	r3, [pc, #52]	; (80254b8 <__smakebuf_r+0x7c>)
 8025482:	62b3      	str	r3, [r6, #40]	; 0x28
 8025484:	89a3      	ldrh	r3, [r4, #12]
 8025486:	6020      	str	r0, [r4, #0]
 8025488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802548c:	81a3      	strh	r3, [r4, #12]
 802548e:	9b00      	ldr	r3, [sp, #0]
 8025490:	6163      	str	r3, [r4, #20]
 8025492:	9b01      	ldr	r3, [sp, #4]
 8025494:	6120      	str	r0, [r4, #16]
 8025496:	b15b      	cbz	r3, 80254b0 <__smakebuf_r+0x74>
 8025498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802549c:	4630      	mov	r0, r6
 802549e:	f000 f887 	bl	80255b0 <_isatty_r>
 80254a2:	b128      	cbz	r0, 80254b0 <__smakebuf_r+0x74>
 80254a4:	89a3      	ldrh	r3, [r4, #12]
 80254a6:	f023 0303 	bic.w	r3, r3, #3
 80254aa:	f043 0301 	orr.w	r3, r3, #1
 80254ae:	81a3      	strh	r3, [r4, #12]
 80254b0:	89a3      	ldrh	r3, [r4, #12]
 80254b2:	431d      	orrs	r5, r3
 80254b4:	81a5      	strh	r5, [r4, #12]
 80254b6:	e7cd      	b.n	8025454 <__smakebuf_r+0x18>
 80254b8:	080252a9 	.word	0x080252a9

080254bc <__malloc_lock>:
 80254bc:	4770      	bx	lr

080254be <__malloc_unlock>:
 80254be:	4770      	bx	lr

080254c0 <__sread>:
 80254c0:	b510      	push	{r4, lr}
 80254c2:	460c      	mov	r4, r1
 80254c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254c8:	f000 f894 	bl	80255f4 <_read_r>
 80254cc:	2800      	cmp	r0, #0
 80254ce:	bfab      	itete	ge
 80254d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80254d2:	89a3      	ldrhlt	r3, [r4, #12]
 80254d4:	181b      	addge	r3, r3, r0
 80254d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80254da:	bfac      	ite	ge
 80254dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80254de:	81a3      	strhlt	r3, [r4, #12]
 80254e0:	bd10      	pop	{r4, pc}

080254e2 <__swrite>:
 80254e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254e6:	461f      	mov	r7, r3
 80254e8:	898b      	ldrh	r3, [r1, #12]
 80254ea:	05db      	lsls	r3, r3, #23
 80254ec:	4605      	mov	r5, r0
 80254ee:	460c      	mov	r4, r1
 80254f0:	4616      	mov	r6, r2
 80254f2:	d505      	bpl.n	8025500 <__swrite+0x1e>
 80254f4:	2302      	movs	r3, #2
 80254f6:	2200      	movs	r2, #0
 80254f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254fc:	f000 f868 	bl	80255d0 <_lseek_r>
 8025500:	89a3      	ldrh	r3, [r4, #12]
 8025502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802550a:	81a3      	strh	r3, [r4, #12]
 802550c:	4632      	mov	r2, r6
 802550e:	463b      	mov	r3, r7
 8025510:	4628      	mov	r0, r5
 8025512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025516:	f000 b817 	b.w	8025548 <_write_r>

0802551a <__sseek>:
 802551a:	b510      	push	{r4, lr}
 802551c:	460c      	mov	r4, r1
 802551e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025522:	f000 f855 	bl	80255d0 <_lseek_r>
 8025526:	1c43      	adds	r3, r0, #1
 8025528:	89a3      	ldrh	r3, [r4, #12]
 802552a:	bf15      	itete	ne
 802552c:	6560      	strne	r0, [r4, #84]	; 0x54
 802552e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025536:	81a3      	strheq	r3, [r4, #12]
 8025538:	bf18      	it	ne
 802553a:	81a3      	strhne	r3, [r4, #12]
 802553c:	bd10      	pop	{r4, pc}

0802553e <__sclose>:
 802553e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025542:	f000 b813 	b.w	802556c <_close_r>
	...

08025548 <_write_r>:
 8025548:	b538      	push	{r3, r4, r5, lr}
 802554a:	4c07      	ldr	r4, [pc, #28]	; (8025568 <_write_r+0x20>)
 802554c:	4605      	mov	r5, r0
 802554e:	4608      	mov	r0, r1
 8025550:	4611      	mov	r1, r2
 8025552:	2200      	movs	r2, #0
 8025554:	6022      	str	r2, [r4, #0]
 8025556:	461a      	mov	r2, r3
 8025558:	f7de f881 	bl	800365e <_write>
 802555c:	1c43      	adds	r3, r0, #1
 802555e:	d102      	bne.n	8025566 <_write_r+0x1e>
 8025560:	6823      	ldr	r3, [r4, #0]
 8025562:	b103      	cbz	r3, 8025566 <_write_r+0x1e>
 8025564:	602b      	str	r3, [r5, #0]
 8025566:	bd38      	pop	{r3, r4, r5, pc}
 8025568:	2000cb30 	.word	0x2000cb30

0802556c <_close_r>:
 802556c:	b538      	push	{r3, r4, r5, lr}
 802556e:	4c06      	ldr	r4, [pc, #24]	; (8025588 <_close_r+0x1c>)
 8025570:	2300      	movs	r3, #0
 8025572:	4605      	mov	r5, r0
 8025574:	4608      	mov	r0, r1
 8025576:	6023      	str	r3, [r4, #0]
 8025578:	f7de f88d 	bl	8003696 <_close>
 802557c:	1c43      	adds	r3, r0, #1
 802557e:	d102      	bne.n	8025586 <_close_r+0x1a>
 8025580:	6823      	ldr	r3, [r4, #0]
 8025582:	b103      	cbz	r3, 8025586 <_close_r+0x1a>
 8025584:	602b      	str	r3, [r5, #0]
 8025586:	bd38      	pop	{r3, r4, r5, pc}
 8025588:	2000cb30 	.word	0x2000cb30

0802558c <_fstat_r>:
 802558c:	b538      	push	{r3, r4, r5, lr}
 802558e:	4c07      	ldr	r4, [pc, #28]	; (80255ac <_fstat_r+0x20>)
 8025590:	2300      	movs	r3, #0
 8025592:	4605      	mov	r5, r0
 8025594:	4608      	mov	r0, r1
 8025596:	4611      	mov	r1, r2
 8025598:	6023      	str	r3, [r4, #0]
 802559a:	f7de f888 	bl	80036ae <_fstat>
 802559e:	1c43      	adds	r3, r0, #1
 80255a0:	d102      	bne.n	80255a8 <_fstat_r+0x1c>
 80255a2:	6823      	ldr	r3, [r4, #0]
 80255a4:	b103      	cbz	r3, 80255a8 <_fstat_r+0x1c>
 80255a6:	602b      	str	r3, [r5, #0]
 80255a8:	bd38      	pop	{r3, r4, r5, pc}
 80255aa:	bf00      	nop
 80255ac:	2000cb30 	.word	0x2000cb30

080255b0 <_isatty_r>:
 80255b0:	b538      	push	{r3, r4, r5, lr}
 80255b2:	4c06      	ldr	r4, [pc, #24]	; (80255cc <_isatty_r+0x1c>)
 80255b4:	2300      	movs	r3, #0
 80255b6:	4605      	mov	r5, r0
 80255b8:	4608      	mov	r0, r1
 80255ba:	6023      	str	r3, [r4, #0]
 80255bc:	f7de f887 	bl	80036ce <_isatty>
 80255c0:	1c43      	adds	r3, r0, #1
 80255c2:	d102      	bne.n	80255ca <_isatty_r+0x1a>
 80255c4:	6823      	ldr	r3, [r4, #0]
 80255c6:	b103      	cbz	r3, 80255ca <_isatty_r+0x1a>
 80255c8:	602b      	str	r3, [r5, #0]
 80255ca:	bd38      	pop	{r3, r4, r5, pc}
 80255cc:	2000cb30 	.word	0x2000cb30

080255d0 <_lseek_r>:
 80255d0:	b538      	push	{r3, r4, r5, lr}
 80255d2:	4c07      	ldr	r4, [pc, #28]	; (80255f0 <_lseek_r+0x20>)
 80255d4:	4605      	mov	r5, r0
 80255d6:	4608      	mov	r0, r1
 80255d8:	4611      	mov	r1, r2
 80255da:	2200      	movs	r2, #0
 80255dc:	6022      	str	r2, [r4, #0]
 80255de:	461a      	mov	r2, r3
 80255e0:	f7de f880 	bl	80036e4 <_lseek>
 80255e4:	1c43      	adds	r3, r0, #1
 80255e6:	d102      	bne.n	80255ee <_lseek_r+0x1e>
 80255e8:	6823      	ldr	r3, [r4, #0]
 80255ea:	b103      	cbz	r3, 80255ee <_lseek_r+0x1e>
 80255ec:	602b      	str	r3, [r5, #0]
 80255ee:	bd38      	pop	{r3, r4, r5, pc}
 80255f0:	2000cb30 	.word	0x2000cb30

080255f4 <_read_r>:
 80255f4:	b538      	push	{r3, r4, r5, lr}
 80255f6:	4c07      	ldr	r4, [pc, #28]	; (8025614 <_read_r+0x20>)
 80255f8:	4605      	mov	r5, r0
 80255fa:	4608      	mov	r0, r1
 80255fc:	4611      	mov	r1, r2
 80255fe:	2200      	movs	r2, #0
 8025600:	6022      	str	r2, [r4, #0]
 8025602:	461a      	mov	r2, r3
 8025604:	f7de f80e 	bl	8003624 <_read>
 8025608:	1c43      	adds	r3, r0, #1
 802560a:	d102      	bne.n	8025612 <_read_r+0x1e>
 802560c:	6823      	ldr	r3, [r4, #0]
 802560e:	b103      	cbz	r3, 8025612 <_read_r+0x1e>
 8025610:	602b      	str	r3, [r5, #0]
 8025612:	bd38      	pop	{r3, r4, r5, pc}
 8025614:	2000cb30 	.word	0x2000cb30

08025618 <_init>:
 8025618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802561a:	bf00      	nop
 802561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802561e:	bc08      	pop	{r3}
 8025620:	469e      	mov	lr, r3
 8025622:	4770      	bx	lr

08025624 <_fini>:
 8025624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025626:	bf00      	nop
 8025628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802562a:	bc08      	pop	{r3}
 802562c:	469e      	mov	lr, r3
 802562e:	4770      	bx	lr
