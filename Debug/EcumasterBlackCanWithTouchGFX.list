
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050bc  08026810  08026810  00036810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003ce4  0802b8cc  0802b8cc  0003b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802f5b0  0802f5b0  0003f5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000234  08062aa8  08062aa8  00072aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08062cdc  08062cdc  00080110  2**0
                  CONTENTS
  7 .ARM          00000008  08062cdc  08062cdc  00072cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08062ce4  08062ce4  00080110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08062ce4  08062ce4  00072ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08062cf8  08062cf8  00072cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  08062d00  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c948  20000110  08062e10  00080110  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000ca58  08062e10  0008ca58  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b3b4  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000efc0  00000000  00000000  000db4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000041b0  00000000  00000000  000ea4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b90  00000000  00000000  000ee668  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f21f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041846  00000000  00000000  0012d101  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f249  00000000  00000000  0016e947  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029db90  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011a48  00000000  00000000  0029dc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080267f8 	.word	0x080267f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	080267f8 	.word	0x080267f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	20000184 	.word	0x20000184

08000b40 <updateDemoValues>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void updateDemoValues(void)
{
 8000b40:	b598      	push	{r3, r4, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b44:	4b8a      	ldr	r3, [pc, #552]	; (8000d70 <updateDemoValues+0x230>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b4c:	da03      	bge.n	8000b56 <updateDemoValues+0x16>
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <updateDemoValues+0x230>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3364      	adds	r3, #100	; 0x64
 8000b54:	e000      	b.n	8000b58 <updateDemoValues+0x18>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <updateDemoValues+0x230>)
 8000b5a:	6013      	str	r3, [r2, #0]
	clt = (clt >= 250) ? -40: clt + 3;
 8000b5c:	4b85      	ldr	r3, [pc, #532]	; (8000d74 <updateDemoValues+0x234>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2bf9      	cmp	r3, #249	; 0xf9
 8000b62:	dc03      	bgt.n	8000b6c <updateDemoValues+0x2c>
 8000b64:	4b83      	ldr	r3, [pc, #524]	; (8000d74 <updateDemoValues+0x234>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	e001      	b.n	8000b70 <updateDemoValues+0x30>
 8000b6c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000b70:	4a80      	ldr	r2, [pc, #512]	; (8000d74 <updateDemoValues+0x234>)
 8000b72:	6013      	str	r3, [r2, #0]
	map = (map >= 450) ? 1: map + 6;
 8000b74:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <updateDemoValues+0x238>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b7c:	da03      	bge.n	8000b86 <updateDemoValues+0x46>
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <updateDemoValues+0x238>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3306      	adds	r3, #6
 8000b84:	e000      	b.n	8000b88 <updateDemoValues+0x48>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <updateDemoValues+0x238>)
 8000b8a:	6013      	str	r3, [r2, #0]
	lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000b8c:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <updateDemoValues+0x23c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcf1 	bl	8000578 <__aeabi_f2d>
 8000b96:	a36c      	add	r3, pc, #432	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	f7ff fdb8 	bl	8000710 <__aeabi_dcmpge>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <updateDemoValues+0x6a>
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <updateDemoValues+0x240>)
 8000ba8:	e010      	b.n	8000bcc <updateDemoValues+0x8c>
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <updateDemoValues+0x23c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fce2 	bl	8000578 <__aeabi_f2d>
 8000bb4:	a366      	add	r3, pc, #408	; (adr r3, 8000d50 <updateDemoValues+0x210>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fb7f 	bl	80002bc <__adddf3>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	f7ff fdb7 	bl	8000738 <__aeabi_d2f>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a6b      	ldr	r2, [pc, #428]	; (8000d7c <updateDemoValues+0x23c>)
 8000bce:	6013      	str	r3, [r2, #0]
	lambdaTarget = (lambdaTarget >= 1.4) ? 0.65: lambdaTarget + 0.06;
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <updateDemoValues+0x244>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fccf 	bl	8000578 <__aeabi_f2d>
 8000bda:	a35b      	add	r3, pc, #364	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fd96 	bl	8000710 <__aeabi_dcmpge>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <updateDemoValues+0xae>
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <updateDemoValues+0x248>)
 8000bec:	e010      	b.n	8000c10 <updateDemoValues+0xd0>
 8000bee:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <updateDemoValues+0x244>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fcc0 	bl	8000578 <__aeabi_f2d>
 8000bf8:	a357      	add	r3, pc, #348	; (adr r3, 8000d58 <updateDemoValues+0x218>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fb5d 	bl	80002bc <__adddf3>
 8000c02:	4603      	mov	r3, r0
 8000c04:	460c      	mov	r4, r1
 8000c06:	4618      	mov	r0, r3
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f7ff fd95 	bl	8000738 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a5c      	ldr	r2, [pc, #368]	; (8000d84 <updateDemoValues+0x244>)
 8000c12:	6013      	str	r3, [r2, #0]
	vehicleSpeed = (vehicleSpeed >= 400) ? 0: vehicleSpeed + 6;
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <updateDemoValues+0x24c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c1c:	da03      	bge.n	8000c26 <updateDemoValues+0xe6>
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <updateDemoValues+0x24c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3306      	adds	r3, #6
 8000c24:	e000      	b.n	8000c28 <updateDemoValues+0xe8>
 8000c26:	2300      	movs	r3, #0
 8000c28:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <updateDemoValues+0x24c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	oilTemp = (oilTemp >= 160) ? 1: oilTemp + 2;
 8000c2c:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <updateDemoValues+0x250>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b9f      	cmp	r3, #159	; 0x9f
 8000c32:	dc03      	bgt.n	8000c3c <updateDemoValues+0xfc>
 8000c34:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <updateDemoValues+0x250>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	e000      	b.n	8000c3e <updateDemoValues+0xfe>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <updateDemoValues+0x250>)
 8000c40:	6013      	str	r3, [r2, #0]
	oilPress = (oilPress >= 12.0) ? 0.1: oilPress + 0.1;
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <updateDemoValues+0x254>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c54:	db01      	blt.n	8000c5a <updateDemoValues+0x11a>
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <updateDemoValues+0x258>)
 8000c58:	e010      	b.n	8000c7c <updateDemoValues+0x13c>
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <updateDemoValues+0x254>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc8a 	bl	8000578 <__aeabi_f2d>
 8000c64:	a33e      	add	r3, pc, #248	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fb27 	bl	80002bc <__adddf3>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460c      	mov	r4, r1
 8000c72:	4618      	mov	r0, r3
 8000c74:	4621      	mov	r1, r4
 8000c76:	f7ff fd5f 	bl	8000738 <__aeabi_d2f>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a45      	ldr	r2, [pc, #276]	; (8000d94 <updateDemoValues+0x254>)
 8000c7e:	6013      	str	r3, [r2, #0]
	fuelPress = (fuelPress >= 7.0) ? 0.1: fuelPress + 0.1;
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <updateDemoValues+0x25c>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8000c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	db01      	blt.n	8000c98 <updateDemoValues+0x158>
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <updateDemoValues+0x258>)
 8000c96:	e010      	b.n	8000cba <updateDemoValues+0x17a>
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <updateDemoValues+0x25c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc6b 	bl	8000578 <__aeabi_f2d>
 8000ca2:	a32f      	add	r3, pc, #188	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb08 	bl	80002bc <__adddf3>
 8000cac:	4603      	mov	r3, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	f7ff fd40 	bl	8000738 <__aeabi_d2f>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <updateDemoValues+0x25c>)
 8000cbc:	6013      	str	r3, [r2, #0]
	iat = (iat >= 100) ? 1: iat + 2;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <updateDemoValues+0x260>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b63      	cmp	r3, #99	; 0x63
 8000cc4:	dc03      	bgt.n	8000cce <updateDemoValues+0x18e>
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <updateDemoValues+0x260>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	e000      	b.n	8000cd0 <updateDemoValues+0x190>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <updateDemoValues+0x260>)
 8000cd2:	6013      	str	r3, [r2, #0]
	egt = (egt >= 760) ? 500: egt +12;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <updateDemoValues+0x264>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cdc:	da03      	bge.n	8000ce6 <updateDemoValues+0x1a6>
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <updateDemoValues+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	330c      	adds	r3, #12
 8000ce4:	e001      	b.n	8000cea <updateDemoValues+0x1aa>
 8000ce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <updateDemoValues+0x264>)
 8000cec:	6013      	str	r3, [r2, #0]
	tps = (tps >= 100) ? 0: tps + 4;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <updateDemoValues+0x268>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b63      	cmp	r3, #99	; 0x63
 8000cf4:	dc03      	bgt.n	8000cfe <updateDemoValues+0x1be>
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <updateDemoValues+0x268>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	e000      	b.n	8000d00 <updateDemoValues+0x1c0>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <updateDemoValues+0x268>)
 8000d02:	6013      	str	r3, [r2, #0]
	battVoltage = (battVoltage >= 20.0) ? 10.0: battVoltage + 0.6;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <updateDemoValues+0x26c>)
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	db01      	blt.n	8000d1c <updateDemoValues+0x1dc>
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <updateDemoValues+0x270>)
 8000d1a:	e010      	b.n	8000d3e <updateDemoValues+0x1fe>
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <updateDemoValues+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc29 	bl	8000578 <__aeabi_f2d>
 8000d26:	a310      	add	r3, pc, #64	; (adr r3, 8000d68 <updateDemoValues+0x228>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fac6 	bl	80002bc <__adddf3>
 8000d30:	4603      	mov	r3, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4618      	mov	r0, r3
 8000d36:	4621      	mov	r1, r4
 8000d38:	f7ff fcfe 	bl	8000738 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <updateDemoValues+0x26c>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	bd98      	pop	{r3, r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	66666666 	.word	0x66666666
 8000d4c:	3ff66666 	.word	0x3ff66666
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fa99999 	.word	0x3fa99999
 8000d58:	eb851eb8 	.word	0xeb851eb8
 8000d5c:	3faeb851 	.word	0x3faeb851
 8000d60:	9999999a 	.word	0x9999999a
 8000d64:	3fb99999 	.word	0x3fb99999
 8000d68:	33333333 	.word	0x33333333
 8000d6c:	3fe33333 	.word	0x3fe33333
 8000d70:	20000004 	.word	0x20000004
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	3f19999a 	.word	0x3f19999a
 8000d84:	20000014 	.word	0x20000014
 8000d88:	3f266666 	.word	0x3f266666
 8000d8c:	2000039c 	.word	0x2000039c
 8000d90:	200003a0 	.word	0x200003a0
 8000d94:	200003a4 	.word	0x200003a4
 8000d98:	3dcccccd 	.word	0x3dcccccd
 8000d9c:	200003a8 	.word	0x200003a8
 8000da0:	20000394 	.word	0x20000394
 8000da4:	200003b0 	.word	0x200003b0
 8000da8:	20000398 	.word	0x20000398
 8000dac:	200003ac 	.word	0x200003ac
 8000db0:	41200000 	.word	0x41200000

08000db4 <SecondTask>:


void SecondTask(void const* argument)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <SecondTask+0xa8>)
 8000dbe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd0:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SecondTask+0xac>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	f00b feb2 	bl	800cb48 <xQueueGenericSend>
	osDelay(150);
 8000de4:	2096      	movs	r0, #150	; 0x96
 8000de6:	f00b fbc1 	bl	800c56c <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <SecondTask+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SecondTask+0x42>
		{
			updateDemoValues();
 8000df2:	f7ff fea5 	bl	8000b40 <updateDemoValues>
		}

		display_values dispVals = {rpm, clt, map, lambda, lambdaTarget, vehicleSpeed, oilTemp, oilPress, fuelPress, iat, egt, tps, battVoltage};
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <SecondTask+0xb4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <SecondTask+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <SecondTask+0xbc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <SecondTask+0xc0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <SecondTask+0xc4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <SecondTask+0xc8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SecondTask+0xcc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <SecondTask+0xd0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <SecondTask+0xd4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SecondTask+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <SecondTask+0xdc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <SecondTask+0xe0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <SecondTask+0xe4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <SecondTask+0xe8>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f00b fe7a 	bl	800cb48 <xQueueGenericSend>
		osDelay(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f00b fb89 	bl	800c56c <osDelay>
	{
 8000e5a:	e7c6      	b.n	8000dea <SecondTask+0x36>
 8000e5c:	08026810 	.word	0x08026810
 8000e60:	200086c8 	.word	0x200086c8
 8000e64:	08026f80 	.word	0x08026f80
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000014 	.word	0x20000014
 8000e7c:	2000039c 	.word	0x2000039c
 8000e80:	200003a0 	.word	0x200003a0
 8000e84:	200003a4 	.word	0x200003a4
 8000e88:	200003a8 	.word	0x200003a8
 8000e8c:	20000394 	.word	0x20000394
 8000e90:	200003b0 	.word	0x200003b0
 8000e94:	20000398 	.word	0x20000398
 8000e98:	200003ac 	.word	0x200003ac
 8000e9c:	200086c4 	.word	0x200086c4

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f002 fdfc 	bl	8003aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f85f 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f001 facf 	bl	8002450 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000eb2:	f000 f917 	bl	80010e4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000eb6:	f000 fc07 	bl	80016c8 <MX_CRC_Init>
  MX_DCMI_Init();
 8000eba:	f000 fc27 	bl	800170c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000ebe:	f000 fc59 	bl	8001774 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ec2:	f001 fa19 	bl	80022f8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000ec6:	f000 fc87 	bl	80017d8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000eca:	f000 fd07 	bl	80018dc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ece:	f000 fd31 	bl	8001934 <MX_RTC_Init>
  MX_SAI2_Init();
 8000ed2:	f000 fdd7 	bl	8001a84 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000ed6:	f000 fe7d 	bl	8001bd4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eda:	f000 fe9b 	bl	8001c14 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000ede:	f000 fec9 	bl	8001c74 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ee2:	f000 ff05 	bl	8001cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ee6:	f000 ffaf 	bl	8001e48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eea:	f001 f823 	bl	8001f34 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000eee:	f001 f897 	bl	8002020 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ef2:	f001 f90b 	bl	800210c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ef6:	f001 f95b 	bl	80021b0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000efa:	f001 f99d 	bl	8002238 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000efe:	f001 f9cb 	bl	8002298 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000f02:	f00a ffef 	bl	800bee4 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000f06:	f000 f93f 	bl	8001188 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000f0a:	f00e f863 	bl	800efd4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <main+0xbc>)
 8000f10:	f107 041c 	add.w	r4, r7, #28
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00b fad3 	bl	800c4d4 <osThreadCreate>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <main+0xc0>)
 8000f32:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <main+0xc4>)
 8000f36:	463c      	mov	r4, r7
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f46:	463b      	mov	r3, r7
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00b fac2 	bl	800c4d4 <osThreadCreate>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <main+0xc8>)
 8000f54:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f56:	f00b fa9a 	bl	800c48e <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <main+0xba>
 8000f5c:	08026844 	.word	0x08026844
 8000f60:	2000bed8 	.word	0x2000bed8
 8000f64:	08026868 	.word	0x08026868
 8000f68:	2000bed4 	.word	0x2000bed4

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0b4      	sub	sp, #208	; 0xd0
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f024 fcbf 	bl	80258fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2284      	movs	r2, #132	; 0x84
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f024 fcb0 	bl	80258fe <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f9e:	f005 fa55 	bl	800644c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <SystemClock_Config+0x170>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <SystemClock_Config+0x170>)
 8000fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <SystemClock_Config+0x170>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fd2:	2309      	movs	r3, #9
 8000fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ff4:	2319      	movs	r3, #25
 8000ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ffa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001008:	2309      	movs	r3, #9
 800100a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fb3c 	bl	8006690 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800101e:	f001 fc4b 	bl	80028b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001022:	f005 fa23 	bl	800646c <HAL_PWREx_EnableOverDrive>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800102c:	f001 fc44 	bl	80028b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001052:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001056:	2106      	movs	r1, #6
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fdbd 	bl	8006bd8 <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001064:	f001 fc28 	bl	80028b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <SystemClock_Config+0x174>)
 800106a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800107c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001080:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001082:	2305      	movs	r3, #5
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800108a:	2303      	movs	r3, #3
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80010ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 ff8d 	bl	8006fe0 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010cc:	f001 fbf4 	bl	80028b8 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	37d0      	adds	r7, #208	; 0xd0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000
 80010e0:	01b00868 	.word	0x01b00868

080010e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_ADC3_Init+0x98>)
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_ADC3_Init+0x9c>)
 80010fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_ADC3_Init+0x98>)
 80010fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001102:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_ADC3_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_ADC3_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_ADC3_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_ADC3_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_ADC3_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_ADC3_Init+0x98>)
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <MX_ADC3_Init+0xa0>)
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_ADC3_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_ADC3_Init+0x98>)
 8001132:	2201      	movs	r2, #1
 8001134:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_ADC3_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ADC3_Init+0x98>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_ADC3_Init+0x98>)
 8001146:	f002 fcfb 	bl	8003b40 <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001150:	f001 fbb2 	bl	80028b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001154:	2304      	movs	r3, #4
 8001156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001158:	2301      	movs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_ADC3_Init+0x98>)
 8001166:	f002 fd2f 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001170:	f001 fba2 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000c220 	.word	0x2000c220
 8001180:	40012200 	.word	0x40012200
 8001184:	0f000001 	.word	0x0f000001

08001188 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <MX_CAN1_Init+0xcc>)
 8001192:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001196:	2214      	movs	r2, #20
 8001198:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_CAN1_Init+0xc8>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011da:	f002 ff39 	bl	8004050 <HAL_CAN_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011e4:	f001 fb68 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800120c:	230e      	movs	r3, #14
 800120e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001216:	f003 f817 	bl	8004248 <HAL_CAN_ConfigFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001220:	f001 fb4a 	bl	80028b8 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001226:	f003 f8ef 	bl	8004408 <HAL_CAN_Start>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001230:	f001 fb42 	bl	80028b8 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001234:	2102      	movs	r1, #2
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001238:	f003 fa3c 	bl	80046b4 <HAL_CAN_ActivateNotification>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8001242:	f001 fb39 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000c4a0 	.word	0x2000c4a0
 8001254:	40006400 	.word	0x40006400

08001258 <getLittleEndianIntegerFromByteArray>:

int getLittleEndianIntegerFromByteArray(uint8_t* data, int startIndex)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    return (data[startIndex + 3] << 24)	\
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3303      	adds	r3, #3
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	061a      	lsls	r2, r3, #24
         | (data[startIndex + 2] << 16)	\
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3302      	adds	r3, #2
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
         | (data[startIndex + 1] << 8)	\
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	440b      	add	r3, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4313      	orrs	r3, r2
         | data[startIndex];
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	440a      	add	r2, r1
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	4313      	orrs	r3, r2
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <getRpmFromCanData>:

int getRpmFromCanData(uint8_t* data, int startIndex)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	int rpm = (int)(data[startIndex] << 0) | (data[startIndex+1] << 8);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60fb      	str	r3, [r7, #12]
	return rpm;
 80012c4:	68fb      	ldr	r3, [r7, #12]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <getTpsFromCanData>:

int getTpsFromCanData(uint8_t* data, int startIndex)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	float tmpTps = (float)data[startIndex];
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpTps = tmpTps*0.5f;
 80012f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]

	return (int)tmpTps;
 8001300:	edd7 7a03 	vldr	s15, [r7, #12]
 8001304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001308:	ee17 3a90 	vmov	r3, s15
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <getOilTempFromCanData>:
	int vehicleSpd = (data[startIndex] << 0) | (data[startIndex+1] << 8);
	return vehicleSpd;
}

int getOilTempFromCanData(uint8_t* data, int startIndex)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	return data[startIndex];
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <getOilPressFromCanData>:

float getOilPressFromCanData(uint8_t* data, int startIndex)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	float tmpOilPress = data[startIndex];
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpOilPress = tmpOilPress * 0.0625f;
 8001356:	edd7 7a03 	vldr	s15, [r7, #12]
 800135a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800137c <getOilPressFromCanData+0x44>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpOilPress;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	3d800000 	.word	0x3d800000

08001380 <getFuelPressFromCanData>:

float getFuelPressFromCanData(uint8_t* data, int startIndex)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	float tmpFuelPress = data[startIndex];
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpFuelPress = tmpFuelPress * 0.03125f;
 800139e:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c4 <getFuelPressFromCanData+0x44>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpFuelPress;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ee07 3a90 	vmov	s15, r3
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	3d000000 	.word	0x3d000000

080013c8 <getCltFromCanData>:

int getCltFromCanData(uint8_t* data, int startIndex)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	int tmpClt = (data[6] << 0) | (data[7] << 8);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3306      	adds	r3, #6
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3307      	adds	r3, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
	return tmpClt;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <getBattVoltageFromCanData>:

float getBattVoltageFromCanData(uint8_t* data, int startIndex)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	 float tmpBattVoltage = (data[startIndex] << 0) | (data[startIndex+1] << 8);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	430b      	orrs	r3, r1
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpBattVoltage = tmpBattVoltage*0.027f;
 8001422:	edd7 7a03 	vldr	s15, [r7, #12]
 8001426:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001448 <getBattVoltageFromCanData+0x54>
 800142a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142e:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpBattVoltage;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	ee07 3a90 	vmov	s15, r3
}
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	3cdd2f1b 	.word	0x3cdd2f1b

0800144c <getLambdaFromCanData>:

float getLambdaFromCanData(uint8_t* data, int startIndex)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	 float tmpLambda = data[startIndex];
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001466:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpLambda = tmpLambda*0.0078125f;
 800146a:	edd7 7a03 	vldr	s15, [r7, #12]
 800146e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001490 <getLambdaFromCanData+0x44>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpLambda;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	ee07 3a90 	vmov	s15, r3
}
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	3c000000 	.word	0x3c000000

08001494 <getEgtFromCanData>:

float getEgtFromCanData(uint8_t* data, int startIndex)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
	 float tmpEgt = (data[startIndex] << 0) | (data[startIndex + 1] << 8);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	430b      	orrs	r3, r1
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpEgt;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	ee07 3a90 	vmov	s15, r3
}
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <getLambdaTargetFromCanData>:

float getLambdaTargetFromCanData(uint8_t* data, int startIndex)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	float tmpLambdaTarget = data[startIndex];
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpLambdaTarget = tmpLambdaTarget / 100.0f;
 80014f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014fa:	eddf 6a08 	vldr	s13, [pc, #32]	; 800151c <getLambdaTargetFromCanData+0x44>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpLambdaTarget;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	ee07 3a90 	vmov	s15, r3
}
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	42c80000 	.word	0x42c80000

08001520 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001528:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800152a:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f002 ffae 	bl	8004490 <HAL_CAN_GetRxMessage>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800153a:	f001 f9bd 	bl	80028b8 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800153e:	4b55      	ldr	r3, [pc, #340]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001546:	d121      	bne.n	800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11d      	bne.n	800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d119      	bne.n	800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
  {
	 rpm = getRpmFromCanData(RxData,0);
 8001558:	2100      	movs	r1, #0
 800155a:	484d      	ldr	r0, [pc, #308]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800155c:	f7ff fea0 	bl	80012a0 <getRpmFromCanData>
 8001560:	4602      	mov	r2, r0
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001564:	601a      	str	r2, [r3, #0]
	 tps = getTpsFromCanData(RxData,2);
 8001566:	2102      	movs	r1, #2
 8001568:	4849      	ldr	r0, [pc, #292]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800156a:	f7ff feb2 	bl	80012d2 <getTpsFromCanData>
 800156e:	4602      	mov	r2, r0
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001572:	601a      	str	r2, [r3, #0]
	 iat = (int)RxData[3];
 8001574:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001576:	78db      	ldrb	r3, [r3, #3]
 8001578:	461a      	mov	r2, r3
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800157c:	601a      	str	r2, [r3, #0]
	 map = getLittleEndianIntegerFromByteArray(RxData,4);
 800157e:	2104      	movs	r1, #4
 8001580:	4843      	ldr	r0, [pc, #268]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001582:	f7ff fe69 	bl	8001258 <getLittleEndianIntegerFromByteArray>
 8001586:	4602      	mov	r2, r0
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800158a:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f240 6202 	movw	r2, #1538	; 0x602
 8001594:	4293      	cmp	r3, r2
 8001596:	d127      	bne.n	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 8001598:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d123      	bne.n	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d11f      	bne.n	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
  {
	 oilTemp = getOilTempFromCanData(RxData,3);
 80015a8:	2103      	movs	r1, #3
 80015aa:	4839      	ldr	r0, [pc, #228]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015ac:	f7ff feb4 	bl	8001318 <getOilTempFromCanData>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80015b4:	601a      	str	r2, [r3, #0]
	 oilPress = getOilPressFromCanData(RxData,4);
 80015b6:	2104      	movs	r1, #4
 80015b8:	4835      	ldr	r0, [pc, #212]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015ba:	f7ff febd 	bl	8001338 <getOilPressFromCanData>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]
	 fuelPress = getFuelPressFromCanData(RxData,5);
 80015c8:	2105      	movs	r1, #5
 80015ca:	4831      	ldr	r0, [pc, #196]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015cc:	f7ff fed8 	bl	8001380 <getFuelPressFromCanData>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
	 clt = getCltFromCanData(RxData,6);
 80015da:	2106      	movs	r1, #6
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015de:	f7ff fef3 	bl	80013c8 <getCltFromCanData>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80015e6:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f240 6203 	movw	r2, #1539	; 0x603
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d11c      	bne.n	800162e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d118      	bne.n	800162e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d114      	bne.n	800162e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
  {
	 lambda = getLambdaFromCanData(RxData,2);
 8001604:	2102      	movs	r1, #2
 8001606:	4822      	ldr	r0, [pc, #136]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001608:	f7ff ff20 	bl	800144c <getLambdaFromCanData>
 800160c:	eef0 7a40 	vmov.f32	s15, s0
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
	 egt = getEgtFromCanData(RxData, 4);
 8001616:	2104      	movs	r1, #4
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800161a:	f7ff ff3b 	bl	8001494 <getEgtFromCanData>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001626:	ee17 2a90 	vmov	r2, s15
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f240 6204 	movw	r2, #1540	; 0x604
 8001636:	4293      	cmp	r3, r2
 8001638:	d110      	bne.n	800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b08      	cmp	r3, #8
 8001648:	d108      	bne.n	800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
  {
	 battVoltage = getBattVoltageFromCanData(RxData, 2);
 800164a:	2102      	movs	r1, #2
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800164e:	f7ff fed1 	bl	80013f4 <getBattVoltageFromCanData>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001664:	d110      	bne.n	8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d108      	bne.n	8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
  {
	 lambdaTarget = getLambdaTargetFromCanData(RxData,7);
 8001676:	2107      	movs	r1, #7
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800167a:	f7ff ff2d 	bl	80014d8 <getLambdaTargetFromCanData>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000c458 	.word	0x2000c458
 8001694:	2000c53c 	.word	0x2000c53c
 8001698:	20000004 	.word	0x20000004
 800169c:	20000398 	.word	0x20000398
 80016a0:	20000394 	.word	0x20000394
 80016a4:	20000008 	.word	0x20000008
 80016a8:	200003a0 	.word	0x200003a0
 80016ac:	200003a4 	.word	0x200003a4
 80016b0:	200003a8 	.word	0x200003a8
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000010 	.word	0x20000010
 80016bc:	200003b0 	.word	0x200003b0
 80016c0:	200003ac 	.word	0x200003ac
 80016c4:	20000014 	.word	0x20000014

080016c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_CRC_Init+0x3c>)
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <MX_CRC_Init+0x40>)
 80016d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_CRC_Init+0x3c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_CRC_Init+0x3c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_CRC_Init+0x3c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_CRC_Init+0x3c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_CRC_Init+0x3c>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_CRC_Init+0x3c>)
 80016f2:	f003 fb41 	bl	8004d78 <HAL_CRC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016fc:	f001 f8dc 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000c050 	.word	0x2000c050
 8001708:	40023000 	.word	0x40023000

0800170c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_DCMI_Init+0x60>)
 8001712:	4a17      	ldr	r2, [pc, #92]	; (8001770 <MX_DCMI_Init+0x64>)
 8001714:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_DCMI_Init+0x60>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_DCMI_Init+0x60>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_DCMI_Init+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_DCMI_Init+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_DCMI_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_DCMI_Init+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_DCMI_Init+0x60>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_DCMI_Init+0x60>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_DCMI_Init+0x60>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_DCMI_Init+0x60>)
 800174e:	2200      	movs	r2, #0
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_DCMI_Init+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_DCMI_Init+0x60>)
 800175a:	f003 fbf7 	bl	8004f4c <HAL_DCMI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001764:	f001 f8a8 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000c268 	.word	0x2000c268
 8001770:	50050000 	.word	0x50050000

08001774 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <MX_DMA2D_Init+0x60>)
 800177c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 80017aa:	f003 fce3 	bl	8005174 <HAL_DMA2D_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80017b4:	f001 f880 	bl	80028b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80017b8:	2101      	movs	r1, #1
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_DMA2D_Init+0x5c>)
 80017bc:	f003 ffa4 	bl	8005708 <HAL_DMA2D_ConfigLayer>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80017c6:	f001 f877 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000c418 	.word	0x2000c418
 80017d4:	4002b000 	.word	0x4002b000

080017d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	; 0x38
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2234      	movs	r2, #52	; 0x34
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f024 f88a 	bl	80258fe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_LTDC_Init+0xfc>)
 80017ec:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <MX_LTDC_Init+0x100>)
 80017ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <MX_LTDC_Init+0xfc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <MX_LTDC_Init+0xfc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <MX_LTDC_Init+0xfc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800180a:	2228      	movs	r2, #40	; 0x28
 800180c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001810:	2209      	movs	r2, #9
 8001812:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001816:	2235      	movs	r2, #53	; 0x35
 8001818:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800181c:	220b      	movs	r2, #11
 800181e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001822:	f240 2215 	movw	r2, #533	; 0x215
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800182a:	f240 121b 	movw	r2, #283	; 0x11b
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001832:	f240 2235 	movw	r2, #565	; 0x235
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800183a:	f240 121d 	movw	r2, #285	; 0x11d
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_LTDC_Init+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001858:	481e      	ldr	r0, [pc, #120]	; (80018d4 <MX_LTDC_Init+0xfc>)
 800185a:	f004 fa5f 	bl	8005d1c <HAL_LTDC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001864:	f001 f828 	bl	80028b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800186c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001870:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001876:	f44f 7388 	mov.w	r3, #272	; 0x110
 800187a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001880:	23ff      	movs	r3, #255	; 0xff
 8001882:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001892:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001898:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800189e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_LTDC_Init+0xfc>)
 80018be:	f004 fbb5 	bl	800602c <HAL_LTDC_ConfigLayer>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80018c8:	f000 fff6 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000c178 	.word	0x2000c178
 80018d8:	40016800 	.word	0x40016800

080018dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_QUADSPI_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_QUADSPI_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_QUADSPI_Init+0x50>)
 80018e8:	22ff      	movs	r2, #255	; 0xff
 80018ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_QUADSPI_Init+0x50>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_QUADSPI_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_QUADSPI_Init+0x50>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_QUADSPI_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_QUADSPI_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_QUADSPI_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_QUADSPI_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_QUADSPI_Init+0x50>)
 8001918:	f004 fdf8 	bl	800650c <HAL_QSPI_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001922:	f000 ffc9 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000c558 	.word	0x2000c558
 8001930:	a0001000 	.word	0xa0001000

08001934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b092      	sub	sp, #72	; 0x48
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800193a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	222c      	movs	r2, #44	; 0x2c
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f023 ffd1 	bl	80258fe <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800195c:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <MX_RTC_Init+0x148>)
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <MX_RTC_Init+0x14c>)
 8001960:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <MX_RTC_Init+0x148>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <MX_RTC_Init+0x148>)
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <MX_RTC_Init+0x148>)
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <MX_RTC_Init+0x148>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800197a:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <MX_RTC_Init+0x148>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001980:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <MX_RTC_Init+0x148>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001986:	483d      	ldr	r0, [pc, #244]	; (8001a7c <MX_RTC_Init+0x148>)
 8001988:	f006 f84c 	bl	8007a24 <HAL_RTC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001992:	f000 ff91 	bl	80028b8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	4830      	ldr	r0, [pc, #192]	; (8001a7c <MX_RTC_Init+0x148>)
 80019ba:	f006 f8af 	bl	8007b1c <HAL_RTC_SetTime>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80019c4:	f000 ff78 	bl	80028b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	4824      	ldr	r0, [pc, #144]	; (8001a7c <MX_RTC_Init+0x148>)
 80019ea:	f006 f955 	bl	8007c98 <HAL_RTC_SetDate>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019f4:	f000 ff60 	bl	80028b8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_RTC_Init+0x148>)
 8001a30:	f006 f9da 	bl	8007de8 <HAL_RTC_SetAlarm>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a3a:	f000 ff3d 	bl	80028b8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <MX_RTC_Init+0x148>)
 8001a52:	f006 f9c9 	bl	8007de8 <HAL_RTC_SetAlarm>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001a5c:	f000 ff2c 	bl	80028b8 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a60:	2202      	movs	r2, #2
 8001a62:	2100      	movs	r1, #0
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_RTC_Init+0x148>)
 8001a66:	f006 fb49 	bl	80080fc <HAL_RTCEx_SetTimeStamp>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001a70:	f000 ff22 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3748      	adds	r7, #72	; 0x48
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000c338 	.word	0x2000c338
 8001a80:	40002800 	.word	0x40002800

08001a84 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001a8a:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <MX_SAI2_Init+0x140>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001abe:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ac4:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ac6:	4a40      	ldr	r2, [pc, #256]	; (8001bc8 <MX_SAI2_Init+0x144>)
 8001ac8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b18:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <MX_SAI2_Init+0x13c>)
 8001b1a:	f006 fb45 	bl	80081a8 <HAL_SAI_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001b24:	f000 fec8 	bl	80028b8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <MX_SAI2_Init+0x14c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b36:	2203      	movs	r2, #3
 8001b38:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_SAI2_Init+0x148>)
 8001bae:	f006 fafb 	bl	80081a8 <HAL_SAI_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001bb8:	f000 fe7e 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000bfcc 	.word	0x2000bfcc
 8001bc4:	40015c04 	.word	0x40015c04
 8001bc8:	0002ee00 	.word	0x0002ee00
 8001bcc:	2000be50 	.word	0x2000be50
 8001bd0:	40015c24 	.word	0x40015c24

08001bd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001bda:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <MX_SDMMC1_SD_Init+0x3c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <MX_SDMMC1_SD_Init+0x38>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	2000c074 	.word	0x2000c074
 8001c10:	40012c00 	.word	0x40012c00

08001c14 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c1a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c1e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_SPDIFRX_Init+0x5c>)
 8001c5e:	f007 fd37 	bl	80096d0 <HAL_SPDIFRX_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c68:	f000 fe26 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000bf80 	.word	0x2000bf80

08001c74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <MX_SPI2_Init+0x78>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cce:	2208      	movs	r2, #8
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_SPI2_Init+0x74>)
 8001cd4:	f007 fd58 	bl	8009788 <HAL_SPI_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f000 fdeb 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000bedc 	.word	0x2000bedc
 8001cec:	40003800 	.word	0x40003800

08001cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b09a      	sub	sp, #104	; 0x68
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	222c      	movs	r2, #44	; 0x2c
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f023 fde7 	bl	80258fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d30:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d32:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5a:	4839      	ldr	r0, [pc, #228]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d5c:	f007 fda6 	bl	80098ac <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d66:	f000 fda7 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d74:	4619      	mov	r1, r3
 8001d76:	4832      	ldr	r0, [pc, #200]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d78:	f008 f850 	bl	8009e1c <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d82:	f000 fd99 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d86:	482e      	ldr	r0, [pc, #184]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001d88:	f007 fde6 	bl	8009958 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d92:	f000 fd91 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4825      	ldr	r0, [pc, #148]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001daa:	f008 fcb1 	bl	800a710 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001db4:	f000 fd80 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4818      	ldr	r0, [pc, #96]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001dde:	f007 ff05 	bl	8009bec <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001de8:	f000 fd66 	bl	80028b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001e22:	f008 fd03 	bl	800a82c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e2c:	f000 fd44 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_TIM1_Init+0x150>)
 8001e32:	f001 fa3b 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8001e36:	bf00      	nop
 8001e38:	3768      	adds	r7, #104	; 0x68
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000c358 	.word	0x2000c358
 8001e44:	40010000 	.word	0x40010000

08001e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	615a      	str	r2, [r3, #20]
 8001e78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea0:	4823      	ldr	r0, [pc, #140]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001ea2:	f007 fd03 	bl	80098ac <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001eac:	f000 fd04 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001ebe:	f007 ffad 	bl	8009e1c <HAL_TIM_ConfigClockSource>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ec8:	f000 fcf6 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ecc:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001ece:	f007 fd43 	bl	8009958 <HAL_TIM_PWM_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ed8:	f000 fcee 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4811      	ldr	r0, [pc, #68]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001eec:	f008 fc10 	bl	800a710 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ef6:	f000 fcdf 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efa:	2360      	movs	r3, #96	; 0x60
 8001efc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001f12:	f007 fe6b 	bl	8009bec <HAL_TIM_PWM_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f1c:	f000 fccc 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM2_Init+0xe8>)
 8001f22:	f001 f9c3 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8001f26:	bf00      	nop
 8001f28:	3738      	adds	r7, #56	; 0x38
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000c460 	.word	0x2000c460

08001f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08e      	sub	sp, #56	; 0x38
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f68:	4a2c      	ldr	r2, [pc, #176]	; (800201c <MX_TIM3_Init+0xe8>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f8a:	4823      	ldr	r0, [pc, #140]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f8c:	f007 fc8e 	bl	80098ac <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f96:	f000 fc8f 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481c      	ldr	r0, [pc, #112]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fa8:	f007 ff38 	bl	8009e1c <HAL_TIM_ConfigClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001fb2:	f000 fc81 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fb6:	4818      	ldr	r0, [pc, #96]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fb8:	f007 fcce 	bl	8009958 <HAL_TIM_PWM_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fc2:	f000 fc79 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4810      	ldr	r0, [pc, #64]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fd6:	f008 fb9b 	bl	800a710 <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fe0:	f000 fc6a 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe4:	2360      	movs	r3, #96	; 0x60
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001ffc:	f007 fdf6 	bl	8009bec <HAL_TIM_PWM_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002006:	f000 fc57 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM3_Init+0xe4>)
 800200c:	f001 f94e 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8002010:	bf00      	nop
 8002012:	3738      	adds	r7, #56	; 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000c138 	.word	0x2000c138
 800201c:	40000400 	.word	0x40000400

08002020 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	; 0x38
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	615a      	str	r2, [r3, #20]
 8002050:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002054:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <MX_TIM5_Init+0xe8>)
 8002056:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <MX_TIM5_Init+0xe4>)
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <MX_TIM5_Init+0xe4>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002076:	4823      	ldr	r0, [pc, #140]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002078:	f007 fc18 	bl	80098ac <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002082:	f000 fc19 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002090:	4619      	mov	r1, r3
 8002092:	481c      	ldr	r0, [pc, #112]	; (8002104 <MX_TIM5_Init+0xe4>)
 8002094:	f007 fec2 	bl	8009e1c <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800209e:	f000 fc0b 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020a2:	4818      	ldr	r0, [pc, #96]	; (8002104 <MX_TIM5_Init+0xe4>)
 80020a4:	f007 fc58 	bl	8009958 <HAL_TIM_PWM_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020ae:	f000 fc03 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	4810      	ldr	r0, [pc, #64]	; (8002104 <MX_TIM5_Init+0xe4>)
 80020c2:	f008 fb25 	bl	800a710 <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020cc:	f000 fbf4 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d0:	2360      	movs	r3, #96	; 0x60
 80020d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	220c      	movs	r2, #12
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <MX_TIM5_Init+0xe4>)
 80020e8:	f007 fd80 	bl	8009bec <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020f2:	f000 fbe1 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <MX_TIM5_Init+0xe4>)
 80020f8:	f001 f8d8 	bl	80032ac <HAL_TIM_MspPostInit>

}
 80020fc:	bf00      	nop
 80020fe:	3738      	adds	r7, #56	; 0x38
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000c0f8 	.word	0x2000c0f8
 8002108:	40000c00 	.word	0x40000c00

0800210c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_TIM8_Init+0x9c>)
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <MX_TIM8_Init+0xa0>)
 800212e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002132:	2200      	movs	r2, #0
 8002134:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_TIM8_Init+0x9c>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_TIM8_Init+0x9c>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002154:	4814      	ldr	r0, [pc, #80]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002156:	f007 fba9 	bl	80098ac <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002160:	f000 fbaa 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002168:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4619      	mov	r1, r3
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002172:	f007 fe53 	bl	8009e1c <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800217c:	f000 fb9c 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_TIM8_Init+0x9c>)
 8002192:	f008 fabd 	bl	800a710 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800219c:	f000 fb8c 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000bf40 	.word	0x2000bf40
 80021ac:	40010400 	.word	0x40010400

080021b0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	615a      	str	r2, [r3, #20]
 80021c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <MX_TIM12_Init+0x80>)
 80021ca:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <MX_TIM12_Init+0x84>)
 80021cc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <MX_TIM12_Init+0x80>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_TIM12_Init+0x80>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_TIM12_Init+0x80>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_TIM12_Init+0x80>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_TIM12_Init+0x80>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80021ec:	4810      	ldr	r0, [pc, #64]	; (8002230 <MX_TIM12_Init+0x80>)
 80021ee:	f007 fbb3 	bl	8009958 <HAL_TIM_PWM_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80021f8:	f000 fb5e 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fc:	2360      	movs	r3, #96	; 0x60
 80021fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM12_Init+0x80>)
 8002214:	f007 fcea 	bl	8009bec <HAL_TIM_PWM_ConfigChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800221e:	f000 fb4b 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM12_Init+0x80>)
 8002224:	f001 f842 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000c4c8 	.word	0x2000c4c8
 8002234:	40001800 	.word	0x40001800

08002238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_USART1_UART_Init+0x58>)
 800223e:	4a15      	ldr	r2, [pc, #84]	; (8002294 <MX_USART1_UART_Init+0x5c>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_USART1_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_USART1_UART_Init+0x58>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_USART1_UART_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_USART1_UART_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_USART1_UART_Init+0x58>)
 800227c:	f008 fb72 	bl	800a964 <HAL_UART_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002286:	f000 fb17 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000c2b8 	.word	0x2000c2b8
 8002294:	40011000 	.word	0x40011000

08002298 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <MX_USART6_UART_Init+0x5c>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_USART6_UART_Init+0x58>)
 80022dc:	f008 fb42 	bl	800a964 <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80022e6:	f000 fae7 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000c398 	.word	0x2000c398
 80022f4:	40011400 	.word	0x40011400

080022f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <MX_FMC_Init+0x14c>)
 8002312:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <MX_FMC_Init+0x150>)
 8002314:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <MX_FMC_Init+0x14c>)
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800231c:	4b49      	ldr	r3, [pc, #292]	; (8002444 <MX_FMC_Init+0x14c>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <MX_FMC_Init+0x14c>)
 8002324:	2204      	movs	r2, #4
 8002326:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <MX_FMC_Init+0x14c>)
 800232a:	2210      	movs	r2, #16
 800232c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <MX_FMC_Init+0x14c>)
 8002330:	2240      	movs	r2, #64	; 0x40
 8002332:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <MX_FMC_Init+0x14c>)
 8002336:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800233a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <MX_FMC_Init+0x14c>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002342:	4b40      	ldr	r3, [pc, #256]	; (8002444 <MX_FMC_Init+0x14c>)
 8002344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002348:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <MX_FMC_Init+0x14c>)
 800234c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002352:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <MX_FMC_Init+0x14c>)
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002358:	2302      	movs	r3, #2
 800235a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800235c:	2307      	movs	r3, #7
 800235e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002360:	2304      	movs	r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002364:	2307      	movs	r3, #7
 8002366:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002368:	2303      	movs	r3, #3
 800236a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002370:	2302      	movs	r3, #2
 8002372:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4832      	ldr	r0, [pc, #200]	; (8002444 <MX_FMC_Init+0x14c>)
 800237a:	f007 f929 	bl	80095d0 <HAL_SDRAM_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002384:	f000 fa98 	bl	80028b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <MX_FMC_Init+0x154>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <MX_FMC_Init+0x154>)
 8002394:	2210      	movs	r2, #16
 8002396:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <MX_FMC_Init+0x154>)
 800239a:	2201      	movs	r2, #1
 800239c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <MX_FMC_Init+0x154>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a8:	4928      	ldr	r1, [pc, #160]	; (800244c <MX_FMC_Init+0x154>)
 80023aa:	4826      	ldr	r0, [pc, #152]	; (8002444 <MX_FMC_Init+0x14c>)
 80023ac:	f007 f944 	bl	8009638 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f001 fba3 	bl	8003afc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <MX_FMC_Init+0x154>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <MX_FMC_Init+0x154>)
 80023be:	2210      	movs	r2, #16
 80023c0:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_FMC_Init+0x154>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_FMC_Init+0x154>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	491e      	ldr	r1, [pc, #120]	; (800244c <MX_FMC_Init+0x154>)
 80023d4:	481b      	ldr	r0, [pc, #108]	; (8002444 <MX_FMC_Init+0x14c>)
 80023d6:	f007 f92f 	bl	8009638 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_FMC_Init+0x154>)
 80023dc:	2203      	movs	r2, #3
 80023de:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_FMC_Init+0x154>)
 80023e2:	2210      	movs	r2, #16
 80023e4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_FMC_Init+0x154>)
 80023e8:	2208      	movs	r2, #8
 80023ea:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_FMC_Init+0x154>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f6:	4915      	ldr	r1, [pc, #84]	; (800244c <MX_FMC_Init+0x154>)
 80023f8:	4812      	ldr	r0, [pc, #72]	; (8002444 <MX_FMC_Init+0x14c>)
 80023fa:	f007 f91d 	bl	8009638 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80023fe:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002402:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_FMC_Init+0x154>)
 8002406:	2204      	movs	r2, #4
 8002408:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_FMC_Init+0x154>)
 800240c:	2210      	movs	r2, #16
 800240e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_FMC_Init+0x154>)
 8002412:	2201      	movs	r2, #1
 8002414:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <MX_FMC_Init+0x154>)
 800241a:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800241c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002420:	490a      	ldr	r1, [pc, #40]	; (800244c <MX_FMC_Init+0x154>)
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <MX_FMC_Init+0x14c>)
 8002424:	f007 f908 	bl	8009638 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002428:	f240 712b 	movw	r1, #1835	; 0x72b
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_FMC_Init+0x14c>)
 800242e:	f007 f92e 	bl	800968e <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002432:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002436:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800243a:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 800243c:	bf00      	nop
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000c508 	.word	0x2000c508
 8002448:	a0000140 	.word	0xa0000140
 800244c:	20000384 	.word	0x20000384

08002450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b090      	sub	sp, #64	; 0x40
 8002454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	4baf      	ldr	r3, [pc, #700]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4aae      	ldr	r2, [pc, #696]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4bac      	ldr	r3, [pc, #688]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800247e:	4ba9      	ldr	r3, [pc, #676]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4aa8      	ldr	r2, [pc, #672]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4ba6      	ldr	r3, [pc, #664]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4ba3      	ldr	r3, [pc, #652]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4aa2      	ldr	r2, [pc, #648]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a9c      	ldr	r2, [pc, #624]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b9a      	ldr	r3, [pc, #616]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b97      	ldr	r3, [pc, #604]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a96      	ldr	r2, [pc, #600]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b94      	ldr	r3, [pc, #592]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b91      	ldr	r3, [pc, #580]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a90      	ldr	r2, [pc, #576]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024f6:	4b8b      	ldr	r3, [pc, #556]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a8a      	ldr	r2, [pc, #552]	; (8002724 <MX_GPIO_Init+0x2d4>)
 80024fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b88      	ldr	r3, [pc, #544]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800250e:	4b85      	ldr	r3, [pc, #532]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a84      	ldr	r2, [pc, #528]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b82      	ldr	r3, [pc, #520]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800252c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a78      	ldr	r2, [pc, #480]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002544:	f043 0320 	orr.w	r3, r3, #32
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002556:	4b73      	ldr	r3, [pc, #460]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a72      	ldr	r2, [pc, #456]	; (8002724 <MX_GPIO_Init+0x2d4>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b70      	ldr	r3, [pc, #448]	; (8002724 <MX_GPIO_Init+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	2120      	movs	r1, #32
 8002572:	486d      	ldr	r0, [pc, #436]	; (8002728 <MX_GPIO_Init+0x2d8>)
 8002574:	f003 fbb8 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	210c      	movs	r1, #12
 800257c:	486b      	ldr	r0, [pc, #428]	; (800272c <MX_GPIO_Init+0x2dc>)
 800257e:	f003 fbb3 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002582:	2201      	movs	r2, #1
 8002584:	2108      	movs	r1, #8
 8002586:	486a      	ldr	r0, [pc, #424]	; (8002730 <MX_GPIO_Init+0x2e0>)
 8002588:	f003 fbae 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002592:	4866      	ldr	r0, [pc, #408]	; (800272c <MX_GPIO_Init+0x2dc>)
 8002594:	f003 fba8 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259e:	4865      	ldr	r0, [pc, #404]	; (8002734 <MX_GPIO_Init+0x2e4>)
 80025a0:	f003 fba2 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	21c8      	movs	r1, #200	; 0xc8
 80025a8:	4863      	ldr	r0, [pc, #396]	; (8002738 <MX_GPIO_Init+0x2e8>)
 80025aa:	f003 fb9d 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80025ae:	2308      	movs	r3, #8
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025be:	4619      	mov	r1, r3
 80025c0:	485e      	ldr	r0, [pc, #376]	; (800273c <MX_GPIO_Init+0x2ec>)
 80025c2:	f003 f9cf 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80025c6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d8:	230b      	movs	r3, #11
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4855      	ldr	r0, [pc, #340]	; (8002738 <MX_GPIO_Init+0x2e8>)
 80025e4:	f003 f9be 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80025e8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025fa:	230a      	movs	r3, #10
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002602:	4619      	mov	r1, r3
 8002604:	484e      	ldr	r0, [pc, #312]	; (8002740 <MX_GPIO_Init+0x2f0>)
 8002606:	f003 f9ad 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800260a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	2300      	movs	r3, #0
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261c:	4619      	mov	r1, r3
 800261e:	4849      	ldr	r0, [pc, #292]	; (8002744 <MX_GPIO_Init+0x2f4>)
 8002620:	f003 f9a0 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <MX_GPIO_Init+0x2f8>)
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	483c      	ldr	r0, [pc, #240]	; (8002728 <MX_GPIO_Init+0x2d8>)
 8002638:	f003 f994 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800263c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800264e:	230a      	movs	r3, #10
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002656:	4619      	mov	r1, r3
 8002658:	483c      	ldr	r0, [pc, #240]	; (800274c <MX_GPIO_Init+0x2fc>)
 800265a:	f003 f983 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800265e:	2320      	movs	r3, #32
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	4619      	mov	r1, r3
 8002674:	482c      	ldr	r0, [pc, #176]	; (8002728 <MX_GPIO_Init+0x2d8>)
 8002676:	f003 f975 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800267a:	f241 030c 	movw	r3, #4108	; 0x100c
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800268c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002690:	4619      	mov	r1, r3
 8002692:	4826      	ldr	r0, [pc, #152]	; (800272c <MX_GPIO_Init+0x2dc>)
 8002694:	f003 f966 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269e:	2300      	movs	r3, #0
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4828      	ldr	r0, [pc, #160]	; (8002750 <MX_GPIO_Init+0x300>)
 80026ae:	f003 f959 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80026b2:	2308      	movs	r3, #8
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c6:	4619      	mov	r1, r3
 80026c8:	4819      	ldr	r0, [pc, #100]	; (8002730 <MX_GPIO_Init+0x2e0>)
 80026ca:	f003 f94b 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80026ce:	2310      	movs	r3, #16
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026de:	4619      	mov	r1, r3
 80026e0:	4811      	ldr	r0, [pc, #68]	; (8002728 <MX_GPIO_Init+0x2d8>)
 80026e2:	f003 f93f 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80026e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f8:	4619      	mov	r1, r3
 80026fa:	480e      	ldr	r0, [pc, #56]	; (8002734 <MX_GPIO_Init+0x2e4>)
 80026fc:	f003 f932 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	4806      	ldr	r0, [pc, #24]	; (8002734 <MX_GPIO_Init+0x2e4>)
 800271a:	f003 f923 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	e017      	b.n	8002754 <MX_GPIO_Init+0x304>
 8002724:	40023800 	.word	0x40023800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40022000 	.word	0x40022000
 8002730:	40022800 	.word	0x40022800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40021800 	.word	0x40021800
 800273c:	40021000 	.word	0x40021000
 8002740:	40020400 	.word	0x40020400
 8002744:	40022400 	.word	0x40022400
 8002748:	10120000 	.word	0x10120000
 800274c:	40020000 	.word	0x40020000
 8002750:	40020800 	.word	0x40020800
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002756:	4b44      	ldr	r3, [pc, #272]	; (8002868 <MX_GPIO_Init+0x418>)
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800275e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002762:	4619      	mov	r1, r3
 8002764:	4841      	ldr	r0, [pc, #260]	; (800286c <MX_GPIO_Init+0x41c>)
 8002766:	f003 f8fd 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800276a:	2310      	movs	r3, #16
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800277a:	230a      	movs	r3, #10
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002782:	4619      	mov	r1, r3
 8002784:	483a      	ldr	r0, [pc, #232]	; (8002870 <MX_GPIO_Init+0x420>)
 8002786:	f003 f8ed 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800278a:	23c8      	movs	r3, #200	; 0xc8
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279e:	4619      	mov	r1, r3
 80027a0:	4834      	ldr	r0, [pc, #208]	; (8002874 <MX_GPIO_Init+0x424>)
 80027a2:	f003 f8df 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80027a6:	2305      	movs	r3, #5
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80027b6:	230a      	movs	r3, #10
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027be:	4619      	mov	r1, r3
 80027c0:	482d      	ldr	r0, [pc, #180]	; (8002878 <MX_GPIO_Init+0x428>)
 80027c2:	f003 f8cf 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027c6:	2332      	movs	r3, #50	; 0x32
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027d6:	230b      	movs	r3, #11
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027de:	4619      	mov	r1, r3
 80027e0:	4825      	ldr	r0, [pc, #148]	; (8002878 <MX_GPIO_Init+0x428>)
 80027e2:	f003 f8bf 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80027e6:	2304      	movs	r3, #4
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f6:	4619      	mov	r1, r3
 80027f8:	481e      	ldr	r0, [pc, #120]	; (8002874 <MX_GPIO_Init+0x424>)
 80027fa:	f003 f8b3 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027fe:	2386      	movs	r3, #134	; 0x86
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800280e:	230b      	movs	r3, #11
 8002810:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002816:	4619      	mov	r1, r3
 8002818:	4818      	ldr	r0, [pc, #96]	; (800287c <MX_GPIO_Init+0x42c>)
 800281a:	f003 f8a3 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800281e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002824:	2312      	movs	r3, #18
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002828:	2301      	movs	r3, #1
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002830:	2304      	movs	r3, #4
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_GPIO_Init+0x420>)
 800283c:	f003 f892 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002840:	2328      	movs	r3, #40	; 0x28
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002850:	230a      	movs	r3, #10
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002858:	4619      	mov	r1, r3
 800285a:	4808      	ldr	r0, [pc, #32]	; (800287c <MX_GPIO_Init+0x42c>)
 800285c:	f003 f882 	bl	8005964 <HAL_GPIO_Init>

}
 8002860:	bf00      	nop
 8002862:	3740      	adds	r7, #64	; 0x40
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	10120000 	.word	0x10120000
 800286c:	40022000 	.word	0x40022000
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40021800 	.word	0x40021800
 8002878:	40020800 	.word	0x40020800
 800287c:	40020000 	.word	0x40020000

08002880 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002888:	f00c fbaa 	bl	800efe0 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f009 fe6d 	bl	800c56c <osDelay>
 8002892:	e7fb      	b.n	800288c <StartDefaultTask+0xc>

08002894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028a6:	f001 f909 	bl	8003abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40001000 	.word	0x40001000

080028b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_MspInit+0x4c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_MspInit+0x4c>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_MspInit+0x4c>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_MspInit+0x4c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_MspInit+0x4c>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_MspInit+0x4c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	210f      	movs	r1, #15
 8002902:	f06f 0001 	mvn.w	r0, #1
 8002906:	f002 f9ff 	bl	8004d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_ADC_MspInit+0xa4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d13c      	bne.n	80029b4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_ADC_MspInit+0xa8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002982:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002986:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002988:	2303      	movs	r3, #3
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <HAL_ADC_MspInit+0xac>)
 8002998:	f002 ffe4 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800299c:	2301      	movs	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a0:	2303      	movs	r3, #3
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <HAL_ADC_MspInit+0xb0>)
 80029b0:	f002 ffd8 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40012200 	.word	0x40012200
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40021400 	.word	0x40021400
 80029c8:	40020000 	.word	0x40020000

080029cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_CAN_MspInit+0x8c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d130      	bne.n	8002a50 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 80029f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_CAN_MspInit+0x90>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a30:	2309      	movs	r3, #9
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4809      	ldr	r0, [pc, #36]	; (8002a60 <HAL_CAN_MspInit+0x94>)
 8002a3c:	f002 ff92 	bl	8005964 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2105      	movs	r1, #5
 8002a44:	2014      	movs	r0, #20
 8002a46:	f002 f95f 	bl	8004d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a4a:	2014      	movs	r0, #20
 8002a4c:	f002 f978 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40006400 	.word	0x40006400
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020400 	.word	0x40020400

08002a64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_CRC_MspInit+0x38>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10b      	bne.n	8002a8e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023000 	.word	0x40023000
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a50      	ldr	r2, [pc, #320]	; (8002c04 <HAL_DCMI_MspInit+0x160>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f040 809a 	bne.w	8002bfc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae0:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a48      	ldr	r2, [pc, #288]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002ae6:	f043 0310 	orr.w	r3, r3, #16
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b10:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a3c      	ldr	r2, [pc, #240]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_DCMI_MspInit+0x164>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b58:	2360      	movs	r3, #96	; 0x60
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b68:	230d      	movs	r3, #13
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b70:	4619      	mov	r1, r3
 8002b72:	4826      	ldr	r0, [pc, #152]	; (8002c0c <HAL_DCMI_MspInit+0x168>)
 8002b74:	f002 fef6 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b78:	2308      	movs	r3, #8
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b88:	230d      	movs	r3, #13
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	481f      	ldr	r0, [pc, #124]	; (8002c10 <HAL_DCMI_MspInit+0x16c>)
 8002b94:	f002 fee6 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002baa:	230d      	movs	r3, #13
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4817      	ldr	r0, [pc, #92]	; (8002c14 <HAL_DCMI_MspInit+0x170>)
 8002bb6:	f002 fed5 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002bba:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bcc:	230d      	movs	r3, #13
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4810      	ldr	r0, [pc, #64]	; (8002c18 <HAL_DCMI_MspInit+0x174>)
 8002bd8:	f002 fec4 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002bdc:	2350      	movs	r3, #80	; 0x50
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bec:	230d      	movs	r3, #13
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4809      	ldr	r0, [pc, #36]	; (8002c1c <HAL_DCMI_MspInit+0x178>)
 8002bf8:	f002 feb4 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	50050000 	.word	0x50050000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021800 	.word	0x40021800
 8002c18:	40021c00 	.word	0x40021c00
 8002c1c:	40020000 	.word	0x40020000

08002c20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_DMA2D_MspInit+0x44>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d113      	bne.n	8002c5a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_DMA2D_MspInit+0x48>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_DMA2D_MspInit+0x48>)
 8002c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_DMA2D_MspInit+0x48>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	205a      	movs	r0, #90	; 0x5a
 8002c50:	f002 f85a 	bl	8004d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c54:	205a      	movs	r0, #90	; 0x5a
 8002c56:	f002 f873 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	4002b000 	.word	0x4002b000
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_DMA2D_MspDeInit+0x2c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_DMA2D_MspDeInit+0x30>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_DMA2D_MspDeInit+0x30>)
 8002c84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002c8a:	205a      	movs	r0, #90	; 0x5a
 8002c8c:	f002 f866 	bl	8004d5c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	4002b000 	.word	0x4002b000
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_LTDC_MspInit+0x174>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f040 80a3 	bne.w	8002e0a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002cc4:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cce:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd0:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4a4d      	ldr	r2, [pc, #308]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002ce2:	f043 0310 	orr.w	r3, r3, #16
 8002ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d24:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_LTDC_MspInit+0x178>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002d54:	2310      	movs	r3, #16
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d64:	230e      	movs	r3, #14
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	482b      	ldr	r0, [pc, #172]	; (8002e1c <HAL_LTDC_MspInit+0x17c>)
 8002d70:	f002 fdf8 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002d74:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d86:	230e      	movs	r3, #14
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4823      	ldr	r0, [pc, #140]	; (8002e20 <HAL_LTDC_MspInit+0x180>)
 8002d92:	f002 fde7 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002d96:	23f7      	movs	r3, #247	; 0xf7
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002da6:	230e      	movs	r3, #14
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dae:	4619      	mov	r1, r3
 8002db0:	481c      	ldr	r0, [pc, #112]	; (8002e24 <HAL_LTDC_MspInit+0x184>)
 8002db2:	f002 fdd7 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002dc8:	2309      	movs	r3, #9
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4815      	ldr	r0, [pc, #84]	; (8002e28 <HAL_LTDC_MspInit+0x188>)
 8002dd4:	f002 fdc6 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002dd8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	2300      	movs	r3, #0
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dea:	230e      	movs	r3, #14
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <HAL_LTDC_MspInit+0x18c>)
 8002df6:	f002 fdb5 	bl	8005964 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2105      	movs	r1, #5
 8002dfe:	2058      	movs	r0, #88	; 0x58
 8002e00:	f001 ff82 	bl	8004d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002e04:	2058      	movs	r0, #88	; 0x58
 8002e06:	f001 ff9b 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3738      	adds	r7, #56	; 0x38
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40016800 	.word	0x40016800
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022400 	.word	0x40022400
 8002e24:	40022800 	.word	0x40022800
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	40022000 	.word	0x40022000

08002e30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <HAL_QSPI_MspInit+0x10c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d170      	bne.n	8002f34 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6393      	str	r3, [r2, #56]	; 0x38
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e6a:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_QSPI_MspInit+0x110>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ec2:	2309      	movs	r3, #9
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	481d      	ldr	r0, [pc, #116]	; (8002f44 <HAL_QSPI_MspInit+0x114>)
 8002ece:	f002 fd49 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ed2:	2340      	movs	r3, #64	; 0x40
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	4619      	mov	r1, r3
 8002eec:	4816      	ldr	r0, [pc, #88]	; (8002f48 <HAL_QSPI_MspInit+0x118>)
 8002eee:	f002 fd39 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f02:	2309      	movs	r3, #9
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480e      	ldr	r0, [pc, #56]	; (8002f48 <HAL_QSPI_MspInit+0x118>)
 8002f0e:	f002 fd29 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002f12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f24:	2309      	movs	r3, #9
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <HAL_QSPI_MspInit+0x11c>)
 8002f30:	f002 fd18 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002f34:	bf00      	nop
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	a0001000 	.word	0xa0001000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020c00 	.word	0x40020c00

08002f50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_RTC_MspInit+0x2c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d105      	bne.n	8002f6e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RTC_MspInit+0x30>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_RTC_MspInit+0x30>)
 8002f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40002800 	.word	0x40002800
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_SD_MspInit+0xb4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d144      	bne.n	8003030 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_SD_MspInit+0xb8>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002fee:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ff2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003000:	230c      	movs	r3, #12
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4619      	mov	r1, r3
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <HAL_SD_MspInit+0xbc>)
 800300c:	f002 fcaa 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003010:	2304      	movs	r3, #4
 8003012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003020:	230c      	movs	r3, #12
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	4806      	ldr	r0, [pc, #24]	; (8003044 <HAL_SD_MspInit+0xc0>)
 800302c:	f002 fc9a 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40023800 	.word	0x40023800
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00

08003048 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003068:	d127      	bne.n	80030ba <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80030aa:	2308      	movs	r3, #8
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <HAL_SPDIFRX_MspInit+0x80>)
 80030b6:	f002 fc55 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020c00 	.word	0x40020c00

080030cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <HAL_SPI_MspInit+0xb4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d144      	bne.n	8003178 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_SPI_MspInit+0xb8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003136:	2302      	movs	r3, #2
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003146:	2305      	movs	r3, #5
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <HAL_SPI_MspInit+0xbc>)
 8003152:	f002 fc07 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003156:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800315a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315c:	2302      	movs	r3, #2
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003168:	2305      	movs	r3, #5
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	; (800318c <HAL_SPI_MspInit+0xc0>)
 8003174:	f002 fbf6 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003178:	bf00      	nop
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40003800 	.word	0x40003800
 8003184:	40023800 	.word	0x40023800
 8003188:	40022000 	.word	0x40022000
 800318c:	40020400 	.word	0x40020400

08003190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_TIM_Base_MspInit+0xc8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10c      	bne.n	80031bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031a2:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a2d      	ldr	r2, [pc, #180]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031ba:	e046      	b.n	800324a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d10c      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a24      	ldr	r2, [pc, #144]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]
}
 80031de:	e034      	b.n	800324a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_TIM_Base_MspInit+0xd0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
}
 8003202:	e022      	b.n	800324a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <HAL_TIM_Base_MspInit+0xd4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10c      	bne.n	8003228 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
}
 8003226:	e010      	b.n	800324a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_TIM_Base_MspInit+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10b      	bne.n	800324a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_TIM_Base_MspInit+0xcc>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
}
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40023800 	.word	0x40023800
 8003260:	40000400 	.word	0x40000400
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400

0800326c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_TIM_PWM_MspInit+0x38>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10b      	bne.n	8003296 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40001800 	.word	0x40001800
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	; 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a56      	ldr	r2, [pc, #344]	; (8003424 <HAL_TIM_MspPostInit+0x178>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d11d      	bne.n	800330a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b56      	ldr	r3, [pc, #344]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a55      	ldr	r2, [pc, #340]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80032e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	4619      	mov	r1, r3
 8003302:	484a      	ldr	r0, [pc, #296]	; (800342c <HAL_TIM_MspPostInit+0x180>)
 8003304:	f002 fb2e 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003308:	e087      	b.n	800341a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d11d      	bne.n	8003350 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003314:	4b44      	ldr	r3, [pc, #272]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a43      	ldr	r2, [pc, #268]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800332c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800333e:	2301      	movs	r3, #1
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	4838      	ldr	r0, [pc, #224]	; (800342c <HAL_TIM_MspPostInit+0x180>)
 800334a:	f002 fb0b 	bl	8005964 <HAL_GPIO_Init>
}
 800334e:	e064      	b.n	800341a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_TIM_MspPostInit+0x184>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d11c      	bne.n	8003394 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003372:	2310      	movs	r3, #16
 8003374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003382:	2302      	movs	r3, #2
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003386:	f107 031c 	add.w	r3, r7, #28
 800338a:	4619      	mov	r1, r3
 800338c:	4829      	ldr	r0, [pc, #164]	; (8003434 <HAL_TIM_MspPostInit+0x188>)
 800338e:	f002 fae9 	bl	8005964 <HAL_GPIO_Init>
}
 8003392:	e042      	b.n	800341a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_TIM_MspPostInit+0x18c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11c      	bne.n	80033d8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033c6:	2302      	movs	r3, #2
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4619      	mov	r1, r3
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <HAL_TIM_MspPostInit+0x190>)
 80033d2:	f002 fac7 	bl	8005964 <HAL_GPIO_Init>
}
 80033d6:	e020      	b.n	800341a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_TIM_MspPostInit+0x194>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d11b      	bne.n	800341a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800340a:	2309      	movs	r3, #9
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	480b      	ldr	r0, [pc, #44]	; (8003444 <HAL_TIM_MspPostInit+0x198>)
 8003416:	f002 faa5 	bl	8005964 <HAL_GPIO_Init>
}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40023800 	.word	0x40023800
 800342c:	40020000 	.word	0x40020000
 8003430:	40000400 	.word	0x40000400
 8003434:	40020400 	.word	0x40020400
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40022000 	.word	0x40022000
 8003440:	40001800 	.word	0x40001800
 8003444:	40021c00 	.word	0x40021c00

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 031c 	add.w	r3, r7, #28
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_UART_MspInit+0x110>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d145      	bne.n	80034f6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800346a:	4b3c      	ldr	r3, [pc, #240]	; (800355c <HAL_UART_MspInit+0x114>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_UART_MspInit+0x114>)
 8003470:	f043 0310 	orr.w	r3, r3, #16
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_UART_MspInit+0x114>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_UART_MspInit+0x114>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a35      	ldr	r2, [pc, #212]	; (800355c <HAL_UART_MspInit+0x114>)
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_UART_MspInit+0x114>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_UART_MspInit+0x114>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a2f      	ldr	r2, [pc, #188]	; (800355c <HAL_UART_MspInit+0x114>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_UART_MspInit+0x114>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034c2:	2307      	movs	r3, #7
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 031c 	add.w	r3, r7, #28
 80034ca:	4619      	mov	r1, r3
 80034cc:	4824      	ldr	r0, [pc, #144]	; (8003560 <HAL_UART_MspInit+0x118>)
 80034ce:	f002 fa49 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034e4:	2307      	movs	r3, #7
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	481d      	ldr	r0, [pc, #116]	; (8003564 <HAL_UART_MspInit+0x11c>)
 80034f0:	f002 fa38 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034f4:	e02c      	b.n	8003550 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_UART_MspInit+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d127      	bne.n	8003550 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_UART_MspInit+0x114>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_UART_MspInit+0x114>)
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	6453      	str	r3, [r2, #68]	; 0x44
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_UART_MspInit+0x114>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_UART_MspInit+0x114>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_UART_MspInit+0x114>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_UART_MspInit+0x114>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003530:	23c0      	movs	r3, #192	; 0xc0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003540:	2308      	movs	r3, #8
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	4619      	mov	r1, r3
 800354a:	4808      	ldr	r0, [pc, #32]	; (800356c <HAL_UART_MspInit+0x124>)
 800354c:	f002 fa0a 	bl	8005964 <HAL_GPIO_Init>
}
 8003550:	bf00      	nop
 8003552:	3730      	adds	r7, #48	; 0x30
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40011000 	.word	0x40011000
 800355c:	40023800 	.word	0x40023800
 8003560:	40020400 	.word	0x40020400
 8003564:	40020000 	.word	0x40020000
 8003568:	40011400 	.word	0x40011400
 800356c:	40020800 	.word	0x40020800

08003570 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003584:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_FMC_MspInit+0x100>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d16d      	bne.n	8003668 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_FMC_MspInit+0x100>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_FMC_MspInit+0x104>)
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_FMC_MspInit+0x104>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6393      	str	r3, [r2, #56]	; 0x38
 800359e:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_FMC_MspInit+0x104>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80035aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035ae:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035bc:	230c      	movs	r3, #12
 80035be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	482c      	ldr	r0, [pc, #176]	; (8003678 <HAL_FMC_MspInit+0x108>)
 80035c6:	f002 f9cd 	bl	8005964 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80035ca:	f248 1333 	movw	r3, #33075	; 0x8133
 80035ce:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035dc:	230c      	movs	r3, #12
 80035de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4825      	ldr	r0, [pc, #148]	; (800367c <HAL_FMC_MspInit+0x10c>)
 80035e6:	f002 f9bd 	bl	8005964 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80035ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035ee:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035fc:	230c      	movs	r3, #12
 80035fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	4619      	mov	r1, r3
 8003604:	481e      	ldr	r0, [pc, #120]	; (8003680 <HAL_FMC_MspInit+0x110>)
 8003606:	f002 f9ad 	bl	8005964 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800360a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800360e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800361c:	230c      	movs	r3, #12
 800361e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4817      	ldr	r0, [pc, #92]	; (8003684 <HAL_FMC_MspInit+0x114>)
 8003626:	f002 f99d 	bl	8005964 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800362a:	2328      	movs	r3, #40	; 0x28
 800362c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800363a:	230c      	movs	r3, #12
 800363c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4811      	ldr	r0, [pc, #68]	; (8003688 <HAL_FMC_MspInit+0x118>)
 8003644:	f002 f98e 	bl	8005964 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003648:	2308      	movs	r3, #8
 800364a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003658:	230c      	movs	r3, #12
 800365a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	4619      	mov	r1, r3
 8003660:	480a      	ldr	r0, [pc, #40]	; (800368c <HAL_FMC_MspInit+0x11c>)
 8003662:	f002 f97f 	bl	8005964 <HAL_GPIO_Init>
 8003666:	e000      	b.n	800366a <HAL_FMC_MspInit+0xfa>
    return;
 8003668:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200003b4 	.word	0x200003b4
 8003674:	40023800 	.word	0x40023800
 8003678:	40021000 	.word	0x40021000
 800367c:	40021800 	.word	0x40021800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021400 	.word	0x40021400
 8003688:	40021c00 	.word	0x40021c00
 800368c:	40020800 	.word	0x40020800

08003690 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003698:	f7ff ff6a 	bl	8003570 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <HAL_SAI_MspInit+0xbc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d124      	bne.n	8003700 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 80036c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 80036de:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036e0:	23f0      	movs	r3, #240	; 0xf0
 80036e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036f0:	230a      	movs	r3, #10
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	481c      	ldr	r0, [pc, #112]	; (800376c <HAL_SAI_MspInit+0xc8>)
 80036fc:	f002 f932 	bl	8005964 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_SAI_MspInit+0xcc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d125      	bne.n	8003756 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 8003718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800371c:	6453      	str	r3, [r2, #68]	; 0x44
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_SAI_MspInit+0xc4>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_SAI_MspInit+0xc0>)
 8003732:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	2302      	movs	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003746:	230a      	movs	r3, #10
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	4808      	ldr	r0, [pc, #32]	; (8003774 <HAL_SAI_MspInit+0xd0>)
 8003752:	f002 f907 	bl	8005964 <HAL_GPIO_Init>

    }
}
 8003756:	bf00      	nop
 8003758:	3728      	adds	r7, #40	; 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40015c04 	.word	0x40015c04
 8003764:	200003b8 	.word	0x200003b8
 8003768:	40023800 	.word	0x40023800
 800376c:	40022000 	.word	0x40022000
 8003770:	40015c24 	.word	0x40015c24
 8003774:	40021800 	.word	0x40021800

08003778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003788:	2200      	movs	r2, #0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	2036      	movs	r0, #54	; 0x36
 800378e:	f001 fabb 	bl	8004d08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003792:	2036      	movs	r0, #54	; 0x36
 8003794:	f001 fad4 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_InitTick+0xa0>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_InitTick+0xa0>)
 800379e:	f043 0310 	orr.w	r3, r3, #16
 80037a2:	6413      	str	r3, [r2, #64]	; 0x40
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_InitTick+0xa0>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037b0:	f107 0210 	add.w	r2, r7, #16
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fbde 	bl	8006f7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037c0:	f003 fbb4 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 80037c4:	4603      	mov	r3, r0
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <HAL_InitTick+0xa4>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0c9b      	lsrs	r3, r3, #18
 80037d4:	3b01      	subs	r3, #1
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_InitTick+0xa8>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_InitTick+0xac>)
 80037dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_InitTick+0xa8>)
 80037e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_InitTick+0xa8>)
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_InitTick+0xa8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_InitTick+0xa8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037f8:	4809      	ldr	r0, [pc, #36]	; (8003820 <HAL_InitTick+0xa8>)
 80037fa:	f006 f857 	bl	80098ac <HAL_TIM_Base_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003804:	4806      	ldr	r0, [pc, #24]	; (8003820 <HAL_InitTick+0xa8>)
 8003806:	f006 f87d 	bl	8009904 <HAL_TIM_Base_Start_IT>
 800380a:	4603      	mov	r3, r0
 800380c:	e000      	b.n	8003810 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	431bde83 	.word	0x431bde83
 8003820:	2000c5a4 	.word	0x2000c5a4
 8003824:	40001000 	.word	0x40001000

08003828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <HardFault_Handler+0x4>

0800383c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <MemManage_Handler+0x4>

08003842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <BusFault_Handler+0x4>

08003848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <UsageFault_Handler+0x4>

0800384e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <CAN1_RX0_IRQHandler+0x10>)
 8003862:	f000 ff4d 	bl	8004700 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000c4a0 	.word	0x2000c4a0

08003870 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <TIM6_DAC_IRQHandler+0x10>)
 8003876:	f006 f89a 	bl	80099ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000c5a4 	.word	0x2000c5a4

08003884 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <LTDC_IRQHandler+0x10>)
 800388a:	f002 fb17 	bl	8005ebc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2000c178 	.word	0x2000c178

08003898 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <DMA2D_IRQHandler+0x10>)
 800389e:	f001 fe22 	bl	80054e6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000c418 	.word	0x2000c418

080038ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_kill>:

int _kill(int pid, int sig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038c6:	f021 ffc3 	bl	8025850 <__errno>
 80038ca:	4602      	mov	r2, r0
 80038cc:	2316      	movs	r3, #22
 80038ce:	6013      	str	r3, [r2, #0]
	return -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_exit>:

void _exit (int status)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ffe7 	bl	80038bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80038ee:	e7fe      	b.n	80038ee <_exit+0x12>

080038f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e00a      	b.n	8003918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003902:	f3af 8000 	nop.w
 8003906:	4601      	mov	r1, r0
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	60ba      	str	r2, [r7, #8]
 800390e:	b2ca      	uxtb	r2, r1
 8003910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3301      	adds	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	dbf0      	blt.n	8003902 <_read+0x12>
	}

return len;
 8003920:	687b      	ldr	r3, [r7, #4]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e009      	b.n	8003950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	60ba      	str	r2, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3301      	adds	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	dbf1      	blt.n	800393c <_write+0x12>
	}
	return len;
 8003958:	687b      	ldr	r3, [r7, #4]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_close>:

int _close(int file)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
	return -1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800398a:	605a      	str	r2, [r3, #4]
	return 0;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_isatty>:

int _isatty(int file)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return 1;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
	return 0;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <_sbrk+0x50>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <_sbrk+0x16>
		heap_end = &end;
 80039dc:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <_sbrk+0x50>)
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <_sbrk+0x54>)
 80039e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <_sbrk+0x50>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <_sbrk+0x50>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	466a      	mov	r2, sp
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d907      	bls.n	8003a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80039f6:	f021 ff2b 	bl	8025850 <__errno>
 80039fa:	4602      	mov	r2, r0
 80039fc:	230c      	movs	r3, #12
 80039fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e006      	b.n	8003a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <_sbrk+0x50>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <_sbrk+0x50>)
 8003a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	200003bc 	.word	0x200003bc
 8003a20:	2000ca58 	.word	0x2000ca58

08003a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <SystemInit+0x28>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <SystemInit+0x28>)
 8003a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <SystemInit+0x28>)
 8003a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a56:	e003      	b.n	8003a60 <LoopCopyDataInit>

08003a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a5e:	3104      	adds	r1, #4

08003a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a60:	480b      	ldr	r0, [pc, #44]	; (8003a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a68:	d3f6      	bcc.n	8003a58 <CopyDataInit>
  ldr  r2, =_sbss
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a6c:	e002      	b.n	8003a74 <LoopFillZerobss>

08003a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a70:	f842 3b04 	str.w	r3, [r2], #4

08003a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a78:	d3f9      	bcc.n	8003a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a7a:	f7ff ffd3 	bl	8003a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7e:	f021 feff 	bl	8025880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a82:	f7fd fa0d 	bl	8000ea0 <main>
  bx  lr    
 8003a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a88:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003a8c:	08062d00 	.word	0x08062d00
  ldr  r0, =_sdata
 8003a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a94:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8003a98:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8003a9c:	2000ca58 	.word	0x2000ca58

08003aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC_IRQHandler>

08003aa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	f001 f923 	bl	8004cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aac:	2000      	movs	r0, #0
 8003aae:	f7ff fe63 	bl	8003778 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ab2:	f7fe ff09 	bl	80028c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_IncTick+0x20>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_IncTick+0x24>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_IncTick+0x24>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000020 	.word	0x20000020
 8003ae0:	2000c5e4 	.word	0x2000c5e4

08003ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_GetTick+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000c5e4 	.word	0x2000c5e4

08003afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff ffee 	bl	8003ae4 <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d005      	beq.n	8003b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_Delay+0x40>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b22:	bf00      	nop
 8003b24:	f7ff ffde 	bl	8003ae4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d8f7      	bhi.n	8003b24 <HAL_Delay+0x28>
  {
  }
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000020 	.word	0x20000020

08003b40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e031      	b.n	8003bba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe feda 	bl	8002918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_ADC_Init+0x84>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f964 	bl	8003e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8003baa:	e001      	b.n	8003bb0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	ffffeefd 	.word	0xffffeefd

08003bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e12a      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x272>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d93a      	bls.n	8003c6a <HAL_ADC_ConfigChannel+0xa2>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bfc:	d035      	beq.n	8003c6a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	3b1e      	subs	r3, #30
 8003c14:	2207      	movs	r2, #7
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	400a      	ands	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a87      	ldr	r2, [pc, #540]	; (8003e48 <HAL_ADC_ConfigChannel+0x280>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10a      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68d9      	ldr	r1, [r3, #12]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	061a      	lsls	r2, r3, #24
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c42:	e035      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68d9      	ldr	r1, [r3, #12]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4403      	add	r3, r0
 8003c5c:	3b1e      	subs	r3, #30
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c68:	e022      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6919      	ldr	r1, [r3, #16]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	2207      	movs	r2, #7
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43da      	mvns	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6919      	ldr	r1, [r3, #16]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4403      	add	r3, r0
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d824      	bhi.n	8003d02 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b05      	subs	r3, #5
 8003cca:	221f      	movs	r2, #31
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b05      	subs	r3, #5
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8003d00:	e04c      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d824      	bhi.n	8003d54 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b23      	subs	r3, #35	; 0x23
 8003d1c:	221f      	movs	r2, #31
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43da      	mvns	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	400a      	ands	r2, r1
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	3b23      	subs	r3, #35	; 0x23
 8003d46:	fa00 f203 	lsl.w	r2, r0, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
 8003d52:	e023      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b41      	subs	r3, #65	; 0x41
 8003d66:	221f      	movs	r2, #31
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b41      	subs	r3, #65	; 0x41
 8003d90:	fa00 f203 	lsl.w	r2, r0, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <HAL_ADC_ConfigChannel+0x284>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10a      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x1f4>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dae:	d105      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003db6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003dba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_ADC_ConfigChannel+0x284>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d109      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x212>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b12      	cmp	r3, #18
 8003dcc:	d105      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_ADC_ConfigChannel+0x284>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x268>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_ADC_ConfigChannel+0x280>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <HAL_ADC_ConfigChannel+0x22e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b11      	cmp	r3, #17
 8003df4:	d11c      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <HAL_ADC_ConfigChannel+0x288>)
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e00:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_ADC_ConfigChannel+0x280>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_ADC_ConfigChannel+0x28c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_ADC_ConfigChannel+0x290>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0c9a      	lsrs	r2, r3, #18
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	10000012 	.word	0x10000012
 8003e4c:	40012000 	.word	0x40012000
 8003e50:	40012300 	.word	0x40012300
 8003e54:	20000018 	.word	0x20000018
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003e64:	4b78      	ldr	r3, [pc, #480]	; (8004048 <ADC_Init+0x1ec>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a77      	ldr	r2, [pc, #476]	; (8004048 <ADC_Init+0x1ec>)
 8003e6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e6e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003e70:	4b75      	ldr	r3, [pc, #468]	; (8004048 <ADC_Init+0x1ec>)
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4973      	ldr	r1, [pc, #460]	; (8004048 <ADC_Init+0x1ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	4a58      	ldr	r2, [pc, #352]	; (800404c <ADC_Init+0x1f0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003efe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	e00f      	b.n	8003f56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0202 	bic.w	r2, r2, #2
 8003f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	005a      	lsls	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	035a      	lsls	r2, r3, #13
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e007      	b.n	8003fcc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	051a      	lsls	r2, r3, #20
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800400e:	025a      	lsls	r2, r3, #9
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6899      	ldr	r1, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	029a      	lsls	r2, r3, #10
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40012300 	.word	0x40012300
 800404c:	0f000001 	.word	0x0f000001

08004050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0ed      	b.n	800423e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fe fcac 	bl	80029cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0202 	bic.w	r2, r2, #2
 8004082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004084:	f7ff fd2e 	bl	8003ae4 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800408a:	e012      	b.n	80040b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800408c:	f7ff fd2a 	bl	8003ae4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b0a      	cmp	r3, #10
 8004098:	d90b      	bls.n	80040b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2205      	movs	r2, #5
 80040aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0c5      	b.n	800423e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d0:	f7ff fd08 	bl	8003ae4 <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d6:	e012      	b.n	80040fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d8:	f7ff fd04 	bl	8003ae4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b0a      	cmp	r3, #10
 80040e4:	d90b      	bls.n	80040fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e09f      	b.n	800423e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0e5      	beq.n	80040d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7e1b      	ldrb	r3, [r3, #24]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d108      	bne.n	8004126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7e5b      	ldrb	r3, [r3, #25]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d108      	bne.n	8004150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e007      	b.n	8004160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7e9b      	ldrb	r3, [r3, #26]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d108      	bne.n	800417a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0220 	orr.w	r2, r2, #32
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0220 	bic.w	r2, r2, #32
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7edb      	ldrb	r3, [r3, #27]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0210 	bic.w	r2, r2, #16
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e007      	b.n	80041b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0210 	orr.w	r2, r2, #16
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7f1b      	ldrb	r3, [r3, #28]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d108      	bne.n	80041ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7f5b      	ldrb	r3, [r3, #29]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0204 	orr.w	r2, r2, #4
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d003      	beq.n	800426e <HAL_CAN_ConfigFilter+0x26>
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b02      	cmp	r3, #2
 800426a:	f040 80be 	bne.w	80043ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_CAN_ConfigFilter+0x1bc>)
 8004270:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004278:	f043 0201 	orr.w	r2, r3, #1
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004288:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	431a      	orrs	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2201      	movs	r2, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d123      	bne.n	8004318 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3248      	adds	r2, #72	; 0x48
 80042f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800430c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	3348      	adds	r3, #72	; 0x48
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d122      	bne.n	8004366 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	431a      	orrs	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004340:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3248      	adds	r2, #72	; 0x48
 8004346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800435a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	3348      	adds	r3, #72	; 0x48
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43db      	mvns	r3, r3
 8004378:	401a      	ands	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004380:	e007      	b.n	8004392 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	431a      	orrs	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	401a      	ands	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043ac:	e007      	b.n	80043be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043dc:	f023 0201 	bic.w	r2, r3, #1
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e006      	b.n	80043f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40006400 	.word	0x40006400

08004408 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d12e      	bne.n	800447a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004434:	f7ff fb56 	bl	8003ae4 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800443a:	e012      	b.n	8004462 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800443c:	f7ff fb52 	bl	8003ae4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b0a      	cmp	r3, #10
 8004448:	d90b      	bls.n	8004462 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e012      	b.n	8004488 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e006      	b.n	8004488 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d003      	beq.n	80044b4 <HAL_CAN_GetRxMessage+0x24>
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f040 80f3 	bne.w	800469a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10e      	bne.n	80044d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0e7      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0d8      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	331b      	adds	r3, #27
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0204 	and.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10c      	bne.n	800452e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	331b      	adds	r3, #27
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0d5b      	lsrs	r3, r3, #21
 8004524:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e00b      	b.n	8004546 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	331b      	adds	r3, #27
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	331b      	adds	r3, #27
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0202 	and.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331b      	adds	r3, #27
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	331b      	adds	r3, #27
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	3304      	adds	r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b2da      	uxtb	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	331b      	adds	r3, #27
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0a1a      	lsrs	r2, r3, #8
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4413      	add	r3, r2
 80045de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0c1a      	lsrs	r2, r3, #16
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3302      	adds	r3, #2
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e1a      	lsrs	r2, r3, #24
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3303      	adds	r3, #3
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	4413      	add	r3, r2
 800462a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0a1a      	lsrs	r2, r3, #8
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	3305      	adds	r3, #5
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	4413      	add	r3, r2
 8004644:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0c1a      	lsrs	r2, r3, #16
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3306      	adds	r3, #6
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4413      	add	r3, r2
 800465e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e1a      	lsrs	r2, r3, #24
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3307      	adds	r3, #7
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e007      	b.n	8004696 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0220 	orr.w	r2, r2, #32
 8004694:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e006      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d002      	beq.n	80046d2 <HAL_CAN_ActivateNotification+0x1e>
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d109      	bne.n	80046e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6959      	ldr	r1, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e006      	b.n	80046f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d07c      	beq.n	8004840 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d023      	beq.n	8004798 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f97d 	bl	8004a62 <HAL_CAN_TxMailbox0CompleteCallback>
 8004768:	e016      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
 800477c:	e00c      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	e002      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f983 	bl	8004a9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d024      	beq.n	80047ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f95d 	bl	8004a76 <HAL_CAN_TxMailbox1CompleteCallback>
 80047bc:	e016      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	e00c      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	e002      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f963 	bl	8004ab2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f93d 	bl	8004a8a <HAL_CAN_TxMailbox2CompleteCallback>
 8004810:	e016      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e00c      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	e002      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f943 	bl	8004ac6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f92a 	bl	8004ada <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fe3e 	bl	8001520 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f90c 	bl	8004b02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8f3 	bl	8004aee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8f6 	bl	8004b16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2208      	movs	r2, #8
 8004944:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8ef 	bl	8004b2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d075      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d06c      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03d      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d038      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	d017      	beq.n	8004a02 <HAL_CAN_IRQHandler+0x302>
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d804      	bhi.n	80049e0 <HAL_CAN_IRQHandler+0x2e0>
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d009      	beq.n	80049ee <HAL_CAN_IRQHandler+0x2ee>
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d00c      	beq.n	80049f8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049de:	e024      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d018      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x316>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d01b      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x320>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d00f      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x30c>
            break;
 80049ec:	e01d      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	f043 0308 	orr.w	r3, r3, #8
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f6:	e018      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f043 0310 	orr.w	r3, r3, #16
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a00:	e013      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0a:	e00e      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a14:	e009      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a1e:	e004      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a28:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a38:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f872 	bl	8004b3e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3728      	adds	r7, #40	; 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <__NVIC_SetPriorityGrouping+0x40>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <__NVIC_SetPriorityGrouping+0x40>)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	60d3      	str	r3, [r2, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00
 8004b98:	05fa0000 	.word	0x05fa0000

08004b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0307 	and.w	r3, r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db0b      	blt.n	8004be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4907      	ldr	r1, [pc, #28]	; (8004bf0 <__NVIC_EnableIRQ+0x38>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2001      	movs	r0, #1
 8004bda:	fa00 f202 	lsl.w	r2, r0, r2
 8004bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db10      	blt.n	8004c28 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4909      	ldr	r1, [pc, #36]	; (8004c34 <__NVIC_DisableIRQ+0x40>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2001      	movs	r0, #1
 8004c16:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1a:	3320      	adds	r3, #32
 8004c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c24:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100

08004c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	490c      	ldr	r1, [pc, #48]	; (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4908      	ldr	r1, [pc, #32]	; (8004c88 <__NVIC_SetPriority+0x50>)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf28      	it	cs
 8004caa:	2304      	movcs	r3, #4
 8004cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d902      	bls.n	8004cbc <NVIC_EncodePriority+0x30>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3b03      	subs	r3, #3
 8004cba:	e000      	b.n	8004cbe <NVIC_EncodePriority+0x32>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	401a      	ands	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce4:	4313      	orrs	r3, r2
         );
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff2a 	bl	8004b54 <__NVIC_SetPriorityGrouping>
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1a:	f7ff ff3f 	bl	8004b9c <__NVIC_GetPriorityGrouping>
 8004d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f7ff ffb1 	bl	8004c8c <NVIC_EncodePriority>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff ff80 	bl	8004c38 <__NVIC_SetPriority>
}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff32 	bl	8004bb8 <__NVIC_EnableIRQ>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff42 	bl	8004bf4 <__NVIC_DisableIRQ>
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e054      	b.n	8004e34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7f5b      	ldrb	r3, [r3, #29]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd fe62 	bl	8002a64 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <HAL_CRC_Init+0xc4>)
 8004db4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0218 	bic.w	r2, r2, #24
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	e00c      	b.n	8004de2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f834 	bl	8004e40 <HAL_CRCEx_Polynomial_Set>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e028      	b.n	8004e34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	795b      	ldrb	r3, [r3, #5]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	611a      	str	r2, [r3, #16]
 8004df4:	e004      	b.n	8004e00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6912      	ldr	r2, [r2, #16]
 8004dfe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	04c11db7 	.word	0x04c11db7

08004e40 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e50:	231f      	movs	r3, #31
 8004e52:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e54:	bf00      	nop
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	613a      	str	r2, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_CRCEx_Polynomial_Set+0x34>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b18      	cmp	r3, #24
 8004e78:	d846      	bhi.n	8004f08 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004f0f 	.word	0x08004f0f
 8004e84:	08004f09 	.word	0x08004f09
 8004e88:	08004f09 	.word	0x08004f09
 8004e8c:	08004f09 	.word	0x08004f09
 8004e90:	08004f09 	.word	0x08004f09
 8004e94:	08004f09 	.word	0x08004f09
 8004e98:	08004f09 	.word	0x08004f09
 8004e9c:	08004f09 	.word	0x08004f09
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004f09 	.word	0x08004f09
 8004eac:	08004f09 	.word	0x08004f09
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f09 	.word	0x08004f09
 8004eb8:	08004f09 	.word	0x08004f09
 8004ebc:	08004f09 	.word	0x08004f09
 8004ec0:	08004ef1 	.word	0x08004ef1
 8004ec4:	08004f09 	.word	0x08004f09
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004f09 	.word	0x08004f09
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f09 	.word	0x08004f09
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004ee5 	.word	0x08004ee5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d913      	bls.n	8004f12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004eee:	e010      	b.n	8004f12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	d90f      	bls.n	8004f16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004efa:	e00c      	b.n	8004f16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d90b      	bls.n	8004f1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f06:	e008      	b.n	8004f1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e006      	b.n	8004f1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 0118 	bic.w	r1, r3, #24
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e069      	b.n	8005032 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd fd9a 	bl	8002aa4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_DCMI_Init+0xf0>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004faa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fb6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fc2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fce:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fda:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d112      	bne.n	8005012 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7f1b      	ldrb	r3, [r3, #28]
 8004ff0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7f5b      	ldrb	r3, [r3, #29]
 8004ff6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ff8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7f9b      	ldrb	r3, [r3, #30]
 8004ffe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005000:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	7fdb      	ldrb	r3, [r3, #31]
 8005008:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800500e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005010:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 021e 	orr.w	r2, r2, #30
 8005020:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	ffe0f007 	.word	0xffe0f007

08005040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DMA_Start_IT+0x26>
 8005062:	2302      	movs	r3, #2
 8005064:	e048      	b.n	80050f8 <HAL_DMA_Start_IT+0xb8>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d137      	bne.n	80050ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f842 	bl	8005118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	223f      	movs	r2, #63	; 0x3f
 800509a:	409a      	lsls	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0216 	orr.w	r2, r2, #22
 80050ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e005      	b.n	80050f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
 80050f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d108      	bne.n	8005158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005156:	e007      	b.n	8005168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e039      	b.n	80051fa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd fd40 	bl	8002c20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	f023 0107 	bic.w	r1, r3, #7
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_DMA2D_Init+0x90>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68d1      	ldr	r1, [r2, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	ffffc000 	.word	0xffffc000

08005208 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e05f      	b.n	80052da <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800521a:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <HAL_DMA2D_DeInit+0xdc>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f8c1 	bl	80053bc <HAL_DMA2D_Abort>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d021      	beq.n	8005284 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e04a      	b.n	80052da <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b20      	cmp	r3, #32
 8005250:	d108      	bne.n	8005264 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f8f7 	bl	8005448 <HAL_DMA2D_CLUTLoading_Abort>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d011      	beq.n	8005284 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e03a      	b.n	80052da <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d108      	bne.n	8005284 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8005272:	2101      	movs	r1, #1
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8e7 	bl	8005448 <HAL_DMA2D_CLUTLoading_Abort>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e02a      	b.n	80052da <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	223f      	movs	r2, #63	; 0x3f
 8005292:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2200      	movs	r2, #0
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fd fcd5 	bl	8002c6c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800

080052e8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_DMA2D_Start_IT+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e020      	b.n	8005346 <HAL_DMA2D_Start_IT+0x5e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa84 	bl	800582c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005332:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af02      	add	r7, sp, #8
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8005366:	2302      	movs	r3, #2
 8005368:	e024      	b.n	80053b4 <HAL_DMA2D_BlendingStart_IT+0x66>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fa4d 	bl	800582c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80053a0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 0205 	bic.w	r2, r3, #5
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0204 	orr.w	r2, r2, #4
 80053d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d8:	f7fe fb84 	bl	8003ae4 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053de:	e017      	b.n	8005410 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80053e0:	f7fe fb80 	bl	8003ae4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ee:	d90f      	bls.n	8005410 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2203      	movs	r2, #3
 8005400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e017      	b.n	8005440 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e0      	bne.n	80053e0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800542c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0204 	orr.w	r2, r2, #4
 8005468:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d103      	bne.n	8005478 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	331c      	adds	r3, #28
 8005476:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005478:	f7fe fb34 	bl	8003ae4 <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800547e:	e017      	b.n	80054b0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005480:	f7fe fb30 	bl	8003ae4 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548e:	d90f      	bls.n	80054b0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2203      	movs	r2, #3
 80054a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e016      	b.n	80054de <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e1      	bne.n	8005480 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80054ca:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d026      	beq.n	8005556 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d021      	beq.n	8005556 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2201      	movs	r2, #1
 8005534:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d026      	beq.n	80055ae <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d021      	beq.n	80055ae <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005578:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2220      	movs	r2, #32
 8005580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	f043 0202 	orr.w	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d026      	beq.n	8005606 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d021      	beq.n	8005606 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2208      	movs	r2, #8
 80055d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	f043 0204 	orr.w	r2, r3, #4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2204      	movs	r2, #4
 8005630:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f853 	bl	80056de <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d024      	beq.n	800568c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01f      	beq.n	800568c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800565a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2202      	movs	r2, #2
 8005662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01f      	beq.n	80056d6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2210      	movs	r2, #16
 80056b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f80e 	bl	80056f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_DMA2D_ConfigLayer+0x20>
 8005724:	2302      	movs	r3, #2
 8005726:	e079      	b.n	800581c <HAL_DMA2D_ConfigLayer+0x114>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	3318      	adds	r3, #24
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005752:	4b35      	ldr	r3, [pc, #212]	; (8005828 <HAL_DMA2D_ConfigLayer+0x120>)
 8005754:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b0a      	cmp	r3, #10
 800575c:	d003      	beq.n	8005766 <HAL_DMA2D_ConfigLayer+0x5e>
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b09      	cmp	r3, #9
 8005764:	d107      	bne.n	8005776 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e005      	b.n	8005782 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d120      	bne.n	80057ca <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	43db      	mvns	r3, r3
 8005792:	ea02 0103 	and.w	r1, r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	430a      	orrs	r2, r1
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d003      	beq.n	80057ba <HAL_DMA2D_ConfigLayer+0xb2>
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	d127      	bne.n	800580a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
 80057c8:	e01f      	b.n	800580a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	43db      	mvns	r3, r3
 80057d4:	ea02 0103 	and.w	r1, r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b0a      	cmp	r3, #10
 80057f2:	d003      	beq.n	80057fc <HAL_DMA2D_ConfigLayer+0xf4>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b09      	cmp	r3, #9
 80057fa:	d106      	bne.n	800580a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005808:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	ff03000f 	.word	0xff03000f

0800582c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800582c:	b480      	push	{r7}
 800582e:	b08b      	sub	sp, #44	; 0x2c
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	041a      	lsls	r2, r3, #16
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	431a      	orrs	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005864:	d174      	bne.n	8005950 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800586c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005874:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800587c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	431a      	orrs	r2, r3
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	4313      	orrs	r3, r2
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
 800589c:	e053      	b.n	8005946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d106      	bne.n	80058b4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	e048      	b.n	8005946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d111      	bne.n	80058e0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	0cdb      	lsrs	r3, r3, #19
 80058c0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	0a9b      	lsrs	r3, r3, #10
 80058c6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	02db      	lsls	r3, r3, #11
 80058d6:	4313      	orrs	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	e032      	b.n	8005946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d117      	bne.n	8005918 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	0fdb      	lsrs	r3, r3, #31
 80058ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	0cdb      	lsrs	r3, r3, #19
 80058f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	0adb      	lsrs	r3, r3, #11
 80058f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	08db      	lsrs	r3, r3, #3
 80058fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	431a      	orrs	r2, r3
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	03db      	lsls	r3, r3, #15
 800590e:	4313      	orrs	r3, r2
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
 8005916:	e016      	b.n	8005946 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	0f1b      	lsrs	r3, r3, #28
 800591c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	0d1b      	lsrs	r3, r3, #20
 8005922:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	0b1b      	lsrs	r3, r3, #12
 8005928:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	431a      	orrs	r2, r3
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	4313      	orrs	r3, r2
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800594e:	e003      	b.n	8005958 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	60da      	str	r2, [r3, #12]
}
 8005958:	bf00      	nop
 800595a:	372c      	adds	r7, #44	; 0x2c
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	; 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e175      	b.n	8005c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005984:	2201      	movs	r2, #1
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4013      	ands	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	429a      	cmp	r2, r3
 800599e:	f040 8164 	bne.w	8005c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d00b      	beq.n	80059c2 <HAL_GPIO_Init+0x5e>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d007      	beq.n	80059c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059b6:	2b11      	cmp	r3, #17
 80059b8:	d003      	beq.n	80059c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b12      	cmp	r3, #18
 80059c0:	d130      	bne.n	8005a24 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f8:	2201      	movs	r2, #1
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 0201 	and.w	r2, r3, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	2203      	movs	r2, #3
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x100>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b12      	cmp	r3, #18
 8005a62:	d123      	bne.n	8005aac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	08da      	lsrs	r2, r3, #3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	220f      	movs	r2, #15
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	08da      	lsrs	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3208      	adds	r2, #8
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 0203 	and.w	r2, r3, #3
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80be 	beq.w	8005c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aee:	4b65      	ldr	r3, [pc, #404]	; (8005c84 <HAL_GPIO_Init+0x320>)
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	4a64      	ldr	r2, [pc, #400]	; (8005c84 <HAL_GPIO_Init+0x320>)
 8005af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af8:	6453      	str	r3, [r2, #68]	; 0x44
 8005afa:	4b62      	ldr	r3, [pc, #392]	; (8005c84 <HAL_GPIO_Init+0x320>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b06:	4a60      	ldr	r2, [pc, #384]	; (8005c88 <HAL_GPIO_Init+0x324>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a57      	ldr	r2, [pc, #348]	; (8005c8c <HAL_GPIO_Init+0x328>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d037      	beq.n	8005ba2 <HAL_GPIO_Init+0x23e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a56      	ldr	r2, [pc, #344]	; (8005c90 <HAL_GPIO_Init+0x32c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_GPIO_Init+0x23a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a55      	ldr	r2, [pc, #340]	; (8005c94 <HAL_GPIO_Init+0x330>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d02b      	beq.n	8005b9a <HAL_GPIO_Init+0x236>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a54      	ldr	r2, [pc, #336]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d025      	beq.n	8005b96 <HAL_GPIO_Init+0x232>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a53      	ldr	r2, [pc, #332]	; (8005c9c <HAL_GPIO_Init+0x338>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <HAL_GPIO_Init+0x22e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a52      	ldr	r2, [pc, #328]	; (8005ca0 <HAL_GPIO_Init+0x33c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d019      	beq.n	8005b8e <HAL_GPIO_Init+0x22a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a51      	ldr	r2, [pc, #324]	; (8005ca4 <HAL_GPIO_Init+0x340>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_GPIO_Init+0x226>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_GPIO_Init+0x344>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00d      	beq.n	8005b86 <HAL_GPIO_Init+0x222>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4f      	ldr	r2, [pc, #316]	; (8005cac <HAL_GPIO_Init+0x348>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <HAL_GPIO_Init+0x21e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a4e      	ldr	r2, [pc, #312]	; (8005cb0 <HAL_GPIO_Init+0x34c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_GPIO_Init+0x21a>
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	e012      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e010      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b82:	2308      	movs	r3, #8
 8005b84:	e00e      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b86:	2307      	movs	r3, #7
 8005b88:	e00c      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b8a:	2306      	movs	r3, #6
 8005b8c:	e00a      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b8e:	2305      	movs	r3, #5
 8005b90:	e008      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e006      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e004      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e002      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_GPIO_Init+0x240>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	f002 0203 	and.w	r2, r2, #3
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	4093      	lsls	r3, r2
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bb4:	4934      	ldr	r1, [pc, #208]	; (8005c88 <HAL_GPIO_Init+0x324>)
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	3302      	adds	r3, #2
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bc2:	4b3c      	ldr	r3, [pc, #240]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005be6:	4a33      	ldr	r2, [pc, #204]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bec:	4b31      	ldr	r3, [pc, #196]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c10:	4a28      	ldr	r2, [pc, #160]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c16:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c40:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <HAL_GPIO_Init+0x350>)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	f67f ae86 	bls.w	8005984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3724      	adds	r7, #36	; 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40013800 	.word	0x40013800
 8005c8c:	40020000 	.word	0x40020000
 8005c90:	40020400 	.word	0x40020400
 8005c94:	40020800 	.word	0x40020800
 8005c98:	40020c00 	.word	0x40020c00
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40021400 	.word	0x40021400
 8005ca4:	40021800 	.word	0x40021800
 8005ca8:	40021c00 	.word	0x40021c00
 8005cac:	40022000 	.word	0x40022000
 8005cb0:	40022400 	.word	0x40022400
 8005cb4:	40013c00 	.word	0x40013c00

08005cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	887b      	ldrh	r3, [r7, #2]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e001      	b.n	8005cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cf8:	787b      	ldrb	r3, [r7, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d04:	e003      	b.n	8005d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	041a      	lsls	r2, r3, #16
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e0bf      	b.n	8005eae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc ffac 	bl	8002ca0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6999      	ldr	r1, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_LTDC_Init+0x19c>)
 8005d90:	400b      	ands	r3, r1
 8005d92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68d9      	ldr	r1, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <HAL_LTDC_Init+0x19c>)
 8005dbe:	400b      	ands	r3, r1
 8005dc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68d9      	ldr	r1, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6919      	ldr	r1, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b33      	ldr	r3, [pc, #204]	; (8005eb8 <HAL_LTDC_Init+0x19c>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6919      	ldr	r1, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6959      	ldr	r1, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <HAL_LTDC_Init+0x19c>)
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6959      	ldr	r1, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0206 	orr.w	r2, r2, #6
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	f000f800 	.word	0xf000f800

08005ebc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d023      	beq.n	8005f26 <HAL_LTDC_IRQHandler+0x6a>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01e      	beq.n	8005f26 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0204 	bic.w	r2, r2, #4
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2204      	movs	r2, #4
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f06:	f043 0201 	orr.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f86f 	bl	8006004 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d023      	beq.n	8005f78 <HAL_LTDC_IRQHandler+0xbc>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01e      	beq.n	8005f78 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0202 	bic.w	r2, r2, #2
 8005f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f58:	f043 0202 	orr.w	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f846 	bl	8006004 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01b      	beq.n	8005fba <HAL_LTDC_IRQHandler+0xfe>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f00e fe7d 	bl	8014cb4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <HAL_LTDC_IRQHandler+0x140>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0208 	bic.w	r2, r2, #8
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f80e 	bl	8006018 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800602c:	b5b0      	push	{r4, r5, r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_LTDC_ConfigLayer+0x1a>
 8006042:	2302      	movs	r3, #2
 8006044:	e02c      	b.n	80060a0 <HAL_LTDC_ConfigLayer+0x74>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2134      	movs	r1, #52	; 0x34
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800606e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f849 	bl	8006118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}

080060a8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_LTDC_ProgramLineEvent+0x18>
 80060bc:	2302      	movs	r3, #2
 80060be:	e023      	b.n	8006108 <HAL_LTDC_ProgramLineEvent+0x60>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80060e0:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40016800 	.word	0x40016800

08006118 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006134:	4413      	add	r3, r2
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	01db      	lsls	r3, r3, #7
 8006144:	4413      	add	r3, r2
 8006146:	3384      	adds	r3, #132	; 0x84
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	4611      	mov	r1, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	01d2      	lsls	r2, r2, #7
 8006154:	440a      	add	r2, r1
 8006156:	3284      	adds	r2, #132	; 0x84
 8006158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800615c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616e:	4413      	add	r3, r2
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	01db      	lsls	r3, r3, #7
 800617c:	440b      	add	r3, r1
 800617e:	3384      	adds	r3, #132	; 0x84
 8006180:	4619      	mov	r1, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006196:	4413      	add	r3, r2
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	01db      	lsls	r3, r3, #7
 80061a6:	4413      	add	r3, r2
 80061a8:	3384      	adds	r3, #132	; 0x84
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	4611      	mov	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	01d2      	lsls	r2, r2, #7
 80061b6:	440a      	add	r2, r1
 80061b8:	3284      	adds	r2, #132	; 0x84
 80061ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ce:	4413      	add	r3, r2
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	440b      	add	r3, r1
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	4619      	mov	r1, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	01db      	lsls	r3, r3, #7
 80061f2:	4413      	add	r3, r2
 80061f4:	3384      	adds	r3, #132	; 0x84
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	4611      	mov	r1, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	01d2      	lsls	r2, r2, #7
 8006202:	440a      	add	r2, r1
 8006204:	3284      	adds	r2, #132	; 0x84
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	01db      	lsls	r3, r3, #7
 8006216:	4413      	add	r3, r2
 8006218:	3384      	adds	r3, #132	; 0x84
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	061b      	lsls	r3, r3, #24
 800623c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	4413      	add	r3, r2
 800624a:	3384      	adds	r3, #132	; 0x84
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	01db      	lsls	r3, r3, #7
 8006258:	4413      	add	r3, r2
 800625a:	3384      	adds	r3, #132	; 0x84
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006268:	461a      	mov	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	431a      	orrs	r2, r3
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	440b      	add	r3, r1
 800627e:	3384      	adds	r3, #132	; 0x84
 8006280:	4619      	mov	r1, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	01db      	lsls	r3, r3, #7
 8006292:	4413      	add	r3, r2
 8006294:	3384      	adds	r3, #132	; 0x84
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	4611      	mov	r1, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	01d2      	lsls	r2, r2, #7
 80062a2:	440a      	add	r2, r1
 80062a4:	3284      	adds	r2, #132	; 0x84
 80062a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	01db      	lsls	r3, r3, #7
 80062b6:	4413      	add	r3, r2
 80062b8:	3384      	adds	r3, #132	; 0x84
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	4413      	add	r3, r2
 80062ce:	3384      	adds	r3, #132	; 0x84
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	; 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	4b58      	ldr	r3, [pc, #352]	; (8006444 <LTDC_SetConfig+0x32c>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	6809      	ldr	r1, [r1, #0]
 80062f4:	4608      	mov	r0, r1
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	01c9      	lsls	r1, r1, #7
 80062fa:	4401      	add	r1, r0
 80062fc:	3184      	adds	r1, #132	; 0x84
 80062fe:	4313      	orrs	r3, r2
 8006300:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	01db      	lsls	r3, r3, #7
 800630c:	4413      	add	r3, r2
 800630e:	3384      	adds	r3, #132	; 0x84
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	4413      	add	r3, r2
 800631e:	3384      	adds	r3, #132	; 0x84
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006344:	2304      	movs	r3, #4
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e01b      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d102      	bne.n	8006358 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006352:	2303      	movs	r3, #3
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e014      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b04      	cmp	r3, #4
 800635e:	d00b      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006364:	2b02      	cmp	r3, #2
 8006366:	d007      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800636c:	2b03      	cmp	r3, #3
 800636e:	d003      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006374:	2b07      	cmp	r3, #7
 8006376:	d102      	bne.n	800637e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006378:	2302      	movs	r3, #2
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e001      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800637e:	2301      	movs	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	3384      	adds	r3, #132	; 0x84
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	4611      	mov	r1, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	01d2      	lsls	r2, r2, #7
 800639c:	440a      	add	r2, r1
 800639e:	3284      	adds	r2, #132	; 0x84
 80063a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
 80063b0:	041a      	lsls	r2, r3, #16
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1acb      	subs	r3, r1, r3
 80063bc:	69f9      	ldr	r1, [r7, #28]
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	3303      	adds	r3, #3
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	6809      	ldr	r1, [r1, #0]
 80063c8:	4608      	mov	r0, r1
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	01c9      	lsls	r1, r1, #7
 80063ce:	4401      	add	r1, r0
 80063d0:	3184      	adds	r1, #132	; 0x84
 80063d2:	4313      	orrs	r3, r2
 80063d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	01db      	lsls	r3, r3, #7
 80063e0:	4413      	add	r3, r2
 80063e2:	3384      	adds	r3, #132	; 0x84
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	440b      	add	r3, r1
 80063f2:	3384      	adds	r3, #132	; 0x84
 80063f4:	4619      	mov	r1, r3
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <LTDC_SetConfig+0x330>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	4413      	add	r3, r2
 8006408:	3384      	adds	r3, #132	; 0x84
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	3384      	adds	r3, #132	; 0x84
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4611      	mov	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	01d2      	lsls	r2, r2, #7
 800642c:	440a      	add	r2, r1
 800642e:	3284      	adds	r2, #132	; 0x84
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6013      	str	r3, [r2, #0]
}
 8006436:	bf00      	nop
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	fffff8f8 	.word	0xfffff8f8
 8006448:	fffff800 	.word	0xfffff800

0800644c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645a:	6013      	str	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40007000 	.word	0x40007000

0800646c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a22      	ldr	r2, [pc, #136]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800648e:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800649a:	f7fd fb23 	bl	8003ae4 <HAL_GetTick>
 800649e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064a0:	e009      	b.n	80064b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064a2:	f7fd fb1f 	bl	8003ae4 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d901      	bls.n	80064b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e022      	b.n	80064fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d1ee      	bne.n	80064a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064c4:	4b10      	ldr	r3, [pc, #64]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a0f      	ldr	r2, [pc, #60]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d0:	f7fd fb08 	bl	8003ae4 <HAL_GetTick>
 80064d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064d6:	e009      	b.n	80064ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064d8:	f7fd fb04 	bl	8003ae4 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e6:	d901      	bls.n	80064ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e007      	b.n	80064fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f8:	d1ee      	bne.n	80064d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	40007000 	.word	0x40007000

0800650c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006514:	f7fd fae6 	bl	8003ae4 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e067      	b.n	80065f4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fc fc79 	bl	8002e30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800653e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f85e 	bl	8006604 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	3b01      	subs	r3, #1
 8006558:	021a      	lsls	r2, r3, #8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	2120      	movs	r1, #32
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f856 	bl	8006620 <QSPI_WaitFlagStateUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006578:	7afb      	ldrb	r3, [r7, #11]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d135      	bne.n	80065ea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_QSPI_Init+0xf0>)
 8006586:	4013      	ands	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6852      	ldr	r2, [r2, #4]
 800658c:	0611      	lsls	r1, r2, #24
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68d2      	ldr	r2, [r2, #12]
 8006592:	4311      	orrs	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	69d2      	ldr	r2, [r2, #28]
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6a12      	ldr	r2, [r2, #32]
 800659e:	4311      	orrs	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <HAL_QSPI_Init+0xf4>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6912      	ldr	r2, [r2, #16]
 80065b6:	0411      	lsls	r1, r2, #16
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6952      	ldr	r2, [r2, #20]
 80065bc:	4311      	orrs	r1, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6992      	ldr	r2, [r2, #24]
 80065c2:	4311      	orrs	r1, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80065f2:	7afb      	ldrb	r3, [r7, #11]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	00ffff2f 	.word	0x00ffff2f
 8006600:	ffe0f8fe 	.word	0xffe0f8fe

08006604 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006630:	e01a      	b.n	8006668 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d016      	beq.n	8006668 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fd fa53 	bl	8003ae4 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10b      	bne.n	8006668 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2204      	movs	r2, #4
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665c:	f043 0201 	orr.w	r2, r3, #1
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e00e      	b.n	8006686 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf14      	ite	ne
 8006676:	2301      	movne	r3, #1
 8006678:	2300      	moveq	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d1d6      	bne.n	8006632 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006698:	2300      	movs	r3, #0
 800669a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e291      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8087 	beq.w	80067c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b4:	4b96      	ldr	r3, [pc, #600]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d00c      	beq.n	80066da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066c0:	4b93      	ldr	r3, [pc, #588]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 030c 	and.w	r3, r3, #12
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d112      	bne.n	80066f2 <HAL_RCC_OscConfig+0x62>
 80066cc:	4b90      	ldr	r3, [pc, #576]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	4b8d      	ldr	r3, [pc, #564]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <HAL_RCC_OscConfig+0x130>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d168      	bne.n	80067c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e26b      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x7a>
 80066fc:	4b84      	ldr	r3, [pc, #528]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a83      	ldr	r2, [pc, #524]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e02e      	b.n	8006768 <HAL_RCC_OscConfig+0xd8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x9c>
 8006712:	4b7f      	ldr	r3, [pc, #508]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a7e      	ldr	r2, [pc, #504]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b7c      	ldr	r3, [pc, #496]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a7b      	ldr	r2, [pc, #492]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xd8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0xc0>
 8006736:	4b76      	ldr	r3, [pc, #472]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a75      	ldr	r2, [pc, #468]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b73      	ldr	r3, [pc, #460]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a72      	ldr	r2, [pc, #456]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xd8>
 8006750:	4b6f      	ldr	r3, [pc, #444]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a6e      	ldr	r2, [pc, #440]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b6c      	ldr	r3, [pc, #432]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a6b      	ldr	r2, [pc, #428]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fd f9b8 	bl	8003ae4 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fd f9b4 	bl	8003ae4 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e21f      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b61      	ldr	r3, [pc, #388]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xe8>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fd f9a4 	bl	8003ae4 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fd f9a0 	bl	8003ae4 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	; 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e20b      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	4b57      	ldr	r3, [pc, #348]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x110>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d069      	beq.n	80068a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067ce:	4b50      	ldr	r3, [pc, #320]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067da:	4b4d      	ldr	r3, [pc, #308]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d11c      	bne.n	8006820 <HAL_RCC_OscConfig+0x190>
 80067e6:	4b4a      	ldr	r3, [pc, #296]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d116      	bne.n	8006820 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	4b47      	ldr	r3, [pc, #284]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_RCC_OscConfig+0x17a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e1df      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b41      	ldr	r3, [pc, #260]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	493d      	ldr	r1, [pc, #244]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681e:	e040      	b.n	80068a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d023      	beq.n	8006870 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006828:	4b39      	ldr	r3, [pc, #228]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a38      	ldr	r2, [pc, #224]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fd f956 	bl	8003ae4 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683c:	f7fd f952 	bl	8003ae4 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e1bd      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684e:	4b30      	ldr	r3, [pc, #192]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685a:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4929      	ldr	r1, [pc, #164]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]
 800686e:	e018      	b.n	80068a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006870:	4b27      	ldr	r3, [pc, #156]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687c:	f7fd f932 	bl	8003ae4 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006884:	f7fd f92e 	bl	8003ae4 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e199      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006896:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d038      	beq.n	8006920 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d019      	beq.n	80068ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b6:	4b16      	ldr	r3, [pc, #88]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	4a15      	ldr	r2, [pc, #84]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80068bc:	f043 0301 	orr.w	r3, r3, #1
 80068c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c2:	f7fd f90f 	bl	8003ae4 <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ca:	f7fd f90b 	bl	8003ae4 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e176      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80068de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x23a>
 80068e8:	e01a      	b.n	8006920 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	4a08      	ldr	r2, [pc, #32]	; (8006910 <HAL_RCC_OscConfig+0x280>)
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fd f8f5 	bl	8003ae4 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068fe:	f7fd f8f1 	bl	8003ae4 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d903      	bls.n	8006914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e15c      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
 8006910:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b91      	ldr	r3, [pc, #580]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ee      	bne.n	80068fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a4 	beq.w	8006a76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692e:	4b8b      	ldr	r3, [pc, #556]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800693a:	4b88      	ldr	r3, [pc, #544]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	4a87      	ldr	r2, [pc, #540]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006944:	6413      	str	r3, [r2, #64]	; 0x40
 8006946:	4b85      	ldr	r3, [pc, #532]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006952:	2301      	movs	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006956:	4b82      	ldr	r3, [pc, #520]	; (8006b60 <HAL_RCC_OscConfig+0x4d0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d118      	bne.n	8006994 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006962:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <HAL_RCC_OscConfig+0x4d0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7e      	ldr	r2, [pc, #504]	; (8006b60 <HAL_RCC_OscConfig+0x4d0>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696e:	f7fd f8b9 	bl	8003ae4 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006976:	f7fd f8b5 	bl	8003ae4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b64      	cmp	r3, #100	; 0x64
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e120      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006988:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x4d0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x31a>
 800699c:	4b6f      	ldr	r3, [pc, #444]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a6e      	ldr	r2, [pc, #440]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	e02d      	b.n	8006a06 <HAL_RCC_OscConfig+0x376>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x33c>
 80069b2:	4b6a      	ldr	r3, [pc, #424]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	4a69      	ldr	r2, [pc, #420]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	6713      	str	r3, [r2, #112]	; 0x70
 80069be:	4b67      	ldr	r3, [pc, #412]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a66      	ldr	r2, [pc, #408]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ca:	e01c      	b.n	8006a06 <HAL_RCC_OscConfig+0x376>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d10c      	bne.n	80069ee <HAL_RCC_OscConfig+0x35e>
 80069d4:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	4a60      	ldr	r2, [pc, #384]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069da:	f043 0304 	orr.w	r3, r3, #4
 80069de:	6713      	str	r3, [r2, #112]	; 0x70
 80069e0:	4b5e      	ldr	r3, [pc, #376]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
 80069ec:	e00b      	b.n	8006a06 <HAL_RCC_OscConfig+0x376>
 80069ee:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	4a5a      	ldr	r2, [pc, #360]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	6713      	str	r3, [r2, #112]	; 0x70
 80069fa:	4b58      	ldr	r3, [pc, #352]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	4a57      	ldr	r2, [pc, #348]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d015      	beq.n	8006a3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0e:	f7fd f869 	bl	8003ae4 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fd f865 	bl	8003ae4 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e0ce      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ee      	beq.n	8006a16 <HAL_RCC_OscConfig+0x386>
 8006a38:	e014      	b.n	8006a64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3a:	f7fd f853 	bl	8003ae4 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a40:	e00a      	b.n	8006a58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fd f84f 	bl	8003ae4 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0b8      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a58:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ee      	bne.n	8006a42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d105      	bne.n	8006a76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80a4 	beq.w	8006bc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a80:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d06b      	beq.n	8006b64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d149      	bne.n	8006b28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a94:	4b31      	ldr	r3, [pc, #196]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a30      	ldr	r2, [pc, #192]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fd f820 	bl	8003ae4 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa8:	f7fd f81c 	bl	8003ae4 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e087      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aba:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69da      	ldr	r2, [r3, #28]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	4313      	orrs	r3, r2
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006aee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af4:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fc fff0 	bl	8003ae4 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b08:	f7fc ffec 	bl	8003ae4 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e057      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x478>
 8006b26:	e04f      	b.n	8006bc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc ffd6 	bl	8003ae4 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fc ffd2 	bl	8003ae4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e03d      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <HAL_RCC_OscConfig+0x4cc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x4ac>
 8006b5a:	e035      	b.n	8006bc8 <HAL_RCC_OscConfig+0x538>
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b64:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <HAL_RCC_OscConfig+0x544>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d028      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d121      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d11a      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b94:	4013      	ands	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d111      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	3b01      	subs	r3, #1
 8006bae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40023800 	.word	0x40023800

08006bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e0d0      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf0:	4b6a      	ldr	r3, [pc, #424]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d910      	bls.n	8006c20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfe:	4b67      	ldr	r3, [pc, #412]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 020f 	bic.w	r2, r3, #15
 8006c06:	4965      	ldr	r1, [pc, #404]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0e:	4b63      	ldr	r3, [pc, #396]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0b8      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d020      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c38:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4a58      	ldr	r2, [pc, #352]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a52      	ldr	r2, [pc, #328]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c5c:	4b50      	ldr	r3, [pc, #320]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	494d      	ldr	r1, [pc, #308]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d040      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d107      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c82:	4b47      	ldr	r3, [pc, #284]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d115      	bne.n	8006cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e07f      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d107      	bne.n	8006caa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e073      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006caa:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e06b      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 0203 	bic.w	r2, r3, #3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4936      	ldr	r1, [pc, #216]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ccc:	f7fc ff0a 	bl	8003ae4 <HAL_GetTick>
 8006cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd2:	e00a      	b.n	8006cea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd4:	f7fc ff06 	bl	8003ae4 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e053      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 020c 	and.w	r2, r3, #12
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d1eb      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cfc:	4b27      	ldr	r3, [pc, #156]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d210      	bcs.n	8006d2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0a:	4b24      	ldr	r3, [pc, #144]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 020f 	bic.w	r2, r3, #15
 8006d12:	4922      	ldr	r1, [pc, #136]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1a:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d001      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e032      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d008      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d38:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4916      	ldr	r1, [pc, #88]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d56:	4b12      	ldr	r3, [pc, #72]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	490e      	ldr	r1, [pc, #56]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d6a:	f000 f821 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <HAL_RCC_ClockConfig+0x1cc>)
 8006d7c:	5cd3      	ldrb	r3, [r2, r3]
 8006d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <HAL_RCC_ClockConfig+0x1d0>)
 8006d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d86:	4b09      	ldr	r3, [pc, #36]	; (8006dac <HAL_RCC_ClockConfig+0x1d4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fc fcf4 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40023c00 	.word	0x40023c00
 8006da0:	40023800 	.word	0x40023800
 8006da4:	08026f84 	.word	0x08026f84
 8006da8:	20000018 	.word	0x20000018
 8006dac:	2000001c 	.word	0x2000001c

08006db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc6:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d007      	beq.n	8006de2 <HAL_RCC_GetSysClockFreq+0x32>
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d008      	beq.n	8006de8 <HAL_RCC_GetSysClockFreq+0x38>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 808d 	bne.w	8006ef6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ddc:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006dde:	60bb      	str	r3, [r7, #8]
      break;
 8006de0:	e08c      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006de4:	60bb      	str	r3, [r7, #8]
      break;
 8006de6:	e089      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006de8:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006df2:	4b45      	ldr	r3, [pc, #276]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d023      	beq.n	8006e46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	099b      	lsrs	r3, r3, #6
 8006e04:	f04f 0400 	mov.w	r4, #0
 8006e08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	ea03 0501 	and.w	r5, r3, r1
 8006e14:	ea04 0602 	and.w	r6, r4, r2
 8006e18:	4a3d      	ldr	r2, [pc, #244]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e1a:	fb02 f106 	mul.w	r1, r2, r6
 8006e1e:	2200      	movs	r2, #0
 8006e20:	fb02 f205 	mul.w	r2, r2, r5
 8006e24:	440a      	add	r2, r1
 8006e26:	493a      	ldr	r1, [pc, #232]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e28:	fba5 0101 	umull	r0, r1, r5, r1
 8006e2c:	1853      	adds	r3, r2, r1
 8006e2e:	4619      	mov	r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f04f 0400 	mov.w	r4, #0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4623      	mov	r3, r4
 8006e3a:	f7f9 fccd 	bl	80007d8 <__aeabi_uldivmod>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e049      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e46:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	ea03 0501 	and.w	r5, r3, r1
 8006e5c:	ea04 0602 	and.w	r6, r4, r2
 8006e60:	4629      	mov	r1, r5
 8006e62:	4632      	mov	r2, r6
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	0154      	lsls	r4, r2, #5
 8006e6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e72:	014b      	lsls	r3, r1, #5
 8006e74:	4619      	mov	r1, r3
 8006e76:	4622      	mov	r2, r4
 8006e78:	1b49      	subs	r1, r1, r5
 8006e7a:	eb62 0206 	sbc.w	r2, r2, r6
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	f04f 0400 	mov.w	r4, #0
 8006e86:	0194      	lsls	r4, r2, #6
 8006e88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e8c:	018b      	lsls	r3, r1, #6
 8006e8e:	1a5b      	subs	r3, r3, r1
 8006e90:	eb64 0402 	sbc.w	r4, r4, r2
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	00e2      	lsls	r2, r4, #3
 8006e9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ea2:	00d9      	lsls	r1, r3, #3
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	195b      	adds	r3, r3, r5
 8006eaa:	eb44 0406 	adc.w	r4, r4, r6
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	02a2      	lsls	r2, r4, #10
 8006eb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ebc:	0299      	lsls	r1, r3, #10
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f04f 0400 	mov.w	r4, #0
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f7f9 fc82 	bl	80007d8 <__aeabi_uldivmod>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	60bb      	str	r3, [r7, #8]
      break;
 8006ef4:	e002      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ef8:	60bb      	str	r3, [r7, #8]
      break;
 8006efa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006efc:	68bb      	ldr	r3, [r7, #8]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	017d7840 	.word	0x017d7840

08006f14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20000018 	.word	0x20000018

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f30:	f7ff fff0 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0a9b      	lsrs	r3, r3, #10
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4a03      	ldr	r2, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08026f94 	.word	0x08026f94

08006f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f58:	f7ff ffdc 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	0b5b      	lsrs	r3, r3, #13
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4a03      	ldr	r2, [pc, #12]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	08026f94 	.word	0x08026f94

08006f7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	220f      	movs	r2, #15
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f8c:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0203 	and.w	r2, r3, #3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_RCC_GetClockConfig+0x60>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	601a      	str	r2, [r3, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40023c00 	.word	0x40023c00

08006fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d012      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007008:	4b69      	ldr	r3, [pc, #420]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4a68      	ldr	r2, [pc, #416]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007012:	6093      	str	r3, [r2, #8]
 8007014:	4b66      	ldr	r3, [pc, #408]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	4964      	ldr	r1, [pc, #400]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d017      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800703a:	4b5d      	ldr	r3, [pc, #372]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	4959      	ldr	r1, [pc, #356]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007058:	d101      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800705a:	2301      	movs	r3, #1
 800705c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007066:	2301      	movs	r3, #1
 8007068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d017      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007076:	4b4e      	ldr	r3, [pc, #312]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	494a      	ldr	r1, [pc, #296]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007094:	d101      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007096:	2301      	movs	r3, #1
 8007098:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 808b 	beq.w	80071da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ce:	6413      	str	r3, [r2, #64]	; 0x40
 80070d0:	4b37      	ldr	r3, [pc, #220]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070dc:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a34      	ldr	r2, [pc, #208]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e8:	f7fc fcfc 	bl	8003ae4 <HAL_GetTick>
 80070ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f0:	f7fc fcf8 	bl	8003ae4 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b64      	cmp	r3, #100	; 0x64
 80070fc:	d901      	bls.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e355      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007102:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800710e:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007116:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d035      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d02e      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007134:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007136:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007140:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007142:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d114      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fcc0 	bl	8003ae4 <HAL_GetTick>
 8007164:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007166:	e00a      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007168:	f7fc fcbc 	bl	8003ae4 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	; 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e317      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ee      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	d111      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071a6:	400b      	ands	r3, r1
 80071a8:	4901      	ldr	r1, [pc, #4]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
 80071ae:	e00b      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80071b0:	40023800 	.word	0x40023800
 80071b4:	40007000 	.word	0x40007000
 80071b8:	0ffffcff 	.word	0x0ffffcff
 80071bc:	4bb0      	ldr	r3, [pc, #704]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	4aaf      	ldr	r2, [pc, #700]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071c6:	6093      	str	r3, [r2, #8]
 80071c8:	4bad      	ldr	r3, [pc, #692]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d4:	49aa      	ldr	r1, [pc, #680]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e6:	4ba6      	ldr	r3, [pc, #664]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ec:	4aa4      	ldr	r2, [pc, #656]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80071f6:	4ba2      	ldr	r3, [pc, #648]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	499f      	ldr	r1, [pc, #636]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007214:	4b9a      	ldr	r3, [pc, #616]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007222:	4997      	ldr	r1, [pc, #604]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007236:	4b92      	ldr	r3, [pc, #584]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	498e      	ldr	r1, [pc, #568]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007258:	4b89      	ldr	r3, [pc, #548]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007266:	4986      	ldr	r1, [pc, #536]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800727a:	4b81      	ldr	r3, [pc, #516]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800727c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	497d      	ldr	r1, [pc, #500]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800729c:	4b78      	ldr	r3, [pc, #480]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	4975      	ldr	r1, [pc, #468]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072be:	4b70      	ldr	r3, [pc, #448]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f023 020c 	bic.w	r2, r3, #12
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072cc:	496c      	ldr	r1, [pc, #432]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072e0:	4b67      	ldr	r3, [pc, #412]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ee:	4964      	ldr	r1, [pc, #400]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007302:	4b5f      	ldr	r3, [pc, #380]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007308:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007310:	495b      	ldr	r1, [pc, #364]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007324:	4b56      	ldr	r3, [pc, #344]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	4953      	ldr	r1, [pc, #332]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007346:	4b4e      	ldr	r3, [pc, #312]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007354:	494a      	ldr	r1, [pc, #296]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007368:	4b45      	ldr	r3, [pc, #276]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007376:	4942      	ldr	r1, [pc, #264]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800738a:	4b3d      	ldr	r3, [pc, #244]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007398:	4939      	ldr	r1, [pc, #228]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073ac:	4b34      	ldr	r3, [pc, #208]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ba:	4931      	ldr	r1, [pc, #196]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d011      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80073ce:	4b2c      	ldr	r3, [pc, #176]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073dc:	4928      	ldr	r1, [pc, #160]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ec:	d101      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800740e:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	4918      	ldr	r1, [pc, #96]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007436:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	490f      	ldr	r1, [pc, #60]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007442:	4313      	orrs	r3, r2
 8007444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d005      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007456:	f040 80d8 	bne.w	800760a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a08      	ldr	r2, [pc, #32]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007460:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007466:	f7fc fb3d 	bl	8003ae4 <HAL_GetTick>
 800746a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800746c:	e00a      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800746e:	f7fc fb39 	bl	8003ae4 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b64      	cmp	r3, #100	; 0x64
 800747a:	d903      	bls.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e196      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007480:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007484:	4b6c      	ldr	r3, [pc, #432]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1ee      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d021      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11d      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074a4:	4b64      	ldr	r3, [pc, #400]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074aa:	0c1b      	lsrs	r3, r3, #16
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074b2:	4b61      	ldr	r3, [pc, #388]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b8:	0e1b      	lsrs	r3, r3, #24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	019a      	lsls	r2, r3, #6
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	431a      	orrs	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	071b      	lsls	r3, r3, #28
 80074d8:	4957      	ldr	r1, [pc, #348]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f4:	d00a      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02e      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750a:	d129      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800750c:	4b4a      	ldr	r3, [pc, #296]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800750e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800751a:	4b47      	ldr	r3, [pc, #284]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800751c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007520:	0f1b      	lsrs	r3, r3, #28
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	061b      	lsls	r3, r3, #24
 800753a:	431a      	orrs	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	071b      	lsls	r3, r3, #28
 8007540:	493d      	ldr	r1, [pc, #244]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007548:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800754a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754e:	f023 021f 	bic.w	r2, r3, #31
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	3b01      	subs	r3, #1
 8007558:	4937      	ldr	r1, [pc, #220]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01d      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800756c:	4b32      	ldr	r3, [pc, #200]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007572:	0e1b      	lsrs	r3, r3, #24
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800757a:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800757c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007580:	0f1b      	lsrs	r3, r3, #28
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	019a      	lsls	r2, r3, #6
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	431a      	orrs	r2, r3
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	061b      	lsls	r3, r3, #24
 800759a:	431a      	orrs	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	071b      	lsls	r3, r3, #28
 80075a0:	4925      	ldr	r1, [pc, #148]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	019a      	lsls	r2, r3, #6
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	061b      	lsls	r3, r3, #24
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	071b      	lsls	r3, r3, #28
 80075d0:	4919      	ldr	r1, [pc, #100]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075d8:	4b17      	ldr	r3, [pc, #92]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fc fa7e 	bl	8003ae4 <HAL_GetTick>
 80075e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075ec:	f7fc fa7a 	bl	8003ae4 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	; 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e0d7      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b01      	cmp	r3, #1
 800760e:	f040 80cd 	bne.w	80077ac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a08      	ldr	r2, [pc, #32]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800761c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761e:	f7fc fa61 	bl	8003ae4 <HAL_GetTick>
 8007622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007624:	e00a      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007626:	f7fc fa5d 	bl	8003ae4 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b64      	cmp	r3, #100	; 0x64
 8007632:	d903      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e0ba      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007638:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800763c:	4b5e      	ldr	r3, [pc, #376]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007648:	d0ed      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02e      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d12a      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007672:	4b51      	ldr	r3, [pc, #324]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007680:	4b4d      	ldr	r3, [pc, #308]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	0f1b      	lsrs	r3, r3, #28
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	019a      	lsls	r2, r3, #6
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	071b      	lsls	r3, r3, #28
 80076a6:	4944      	ldr	r1, [pc, #272]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80076ae:	4b42      	ldr	r3, [pc, #264]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	493d      	ldr	r1, [pc, #244]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d022      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076dc:	d11d      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076de:	4b36      	ldr	r3, [pc, #216]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076ec:	4b32      	ldr	r3, [pc, #200]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	0f1b      	lsrs	r3, r3, #28
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	019a      	lsls	r2, r3, #6
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	431a      	orrs	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	061b      	lsls	r3, r3, #24
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	071b      	lsls	r3, r3, #28
 8007712:	4929      	ldr	r1, [pc, #164]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d028      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772c:	0e1b      	lsrs	r3, r3, #24
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007734:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	0c1b      	lsrs	r3, r3, #16
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	019a      	lsls	r2, r3, #6
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	431a      	orrs	r2, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	061b      	lsls	r3, r3, #24
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	071b      	lsls	r3, r3, #28
 800775a:	4917      	ldr	r1, [pc, #92]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4911      	ldr	r1, [pc, #68]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007784:	f7fc f9ae 	bl	8003ae4 <HAL_GetTick>
 8007788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800778a:	e008      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800778c:	f7fc f9aa 	bl	8003ae4 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b64      	cmp	r3, #100	; 0x64
 8007798:	d901      	bls.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e007      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800779e:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077aa:	d1ef      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3720      	adds	r7, #32
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40023800 	.word	0x40023800

080077bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077da:	f040 8086 	bne.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80077de:	4b8d      	ldr	r3, [pc, #564]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f4:	d03e      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80077f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077fa:	d073      	beq.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d000      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007800:	e074      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007802:	4b84      	ldr	r3, [pc, #528]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d108      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800780e:	4b81      	ldr	r3, [pc, #516]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007816:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	e007      	b.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007820:	4b7c      	ldr	r3, [pc, #496]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007828:	4a7c      	ldr	r2, [pc, #496]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007830:	4b78      	ldr	r3, [pc, #480]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007836:	0e1b      	lsrs	r3, r3, #24
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800783e:	4b75      	ldr	r3, [pc, #468]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007844:	099b      	lsrs	r3, r3, #6
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	fb02 f203 	mul.w	r2, r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007858:	4b6e      	ldr	r3, [pc, #440]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800785a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	617b      	str	r3, [r7, #20]
        break;
 8007872:	e03b      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007874:	4b67      	ldr	r3, [pc, #412]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d108      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007880:	4b64      	ldr	r3, [pc, #400]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007888:	4a63      	ldr	r2, [pc, #396]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800788a:	fbb2 f3f3 	udiv	r3, r2, r3
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e007      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007892:	4b60      	ldr	r3, [pc, #384]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800789a:	4a60      	ldr	r2, [pc, #384]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80078a2:	4b5c      	ldr	r3, [pc, #368]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a8:	0e1b      	lsrs	r3, r3, #24
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80078b0:	4b58      	ldr	r3, [pc, #352]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b6:	099b      	lsrs	r3, r3, #6
 80078b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	fb02 f203 	mul.w	r2, r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80078ca:	4b52      	ldr	r3, [pc, #328]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	617b      	str	r3, [r7, #20]
        break;
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80078e4:	4b4e      	ldr	r3, [pc, #312]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80078e6:	617b      	str	r3, [r7, #20]
        break;
 80078e8:	e000      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80078ea:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f2:	f040 8086 	bne.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80078f6:	4b47      	ldr	r3, [pc, #284]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007904:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790c:	d03e      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800790e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007912:	d073      	beq.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d000      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007918:	e074      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800791a:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007926:	4b3b      	ldr	r3, [pc, #236]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792e:	4a3a      	ldr	r2, [pc, #232]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	e007      	b.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007940:	4a36      	ldr	r2, [pc, #216]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	0e1b      	lsrs	r3, r3, #24
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007956:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795c:	099b      	lsrs	r3, r3, #6
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	fb02 f203 	mul.w	r2, r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	3301      	adds	r3, #1
 800797e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	617b      	str	r3, [r7, #20]
        break;
 800798a:	e03b      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800798c:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d108      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e007      	b.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079aa:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b2:	4a1a      	ldr	r2, [pc, #104]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c0:	0e1b      	lsrs	r3, r3, #24
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ce:	099b      	lsrs	r3, r3, #6
 80079d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	fb02 f203 	mul.w	r2, r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]
        break;
 80079fa:	e003      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80079fc:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80079fe:	617b      	str	r3, [r7, #20]
        break;
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007a02:	bf00      	nop

  return frequency;
 8007a04:	697b      	ldr	r3, [r7, #20]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	00f42400 	.word	0x00f42400
 8007a1c:	017d7840 	.word	0x017d7840
 8007a20:	00bb8000 	.word	0x00bb8000

08007a24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e06b      	b.n	8007b0e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7f5b      	ldrb	r3, [r3, #29]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fb fa82 	bl	8002f50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	22ca      	movs	r2, #202	; 0xca
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2253      	movs	r2, #83	; 0x53
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb00 	bl	8008068 <RTC_EnterInitMode>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	22ff      	movs	r2, #255	; 0xff
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e046      	b.n	8007b0e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6899      	ldr	r1, [r3, #8]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b23      	ldr	r3, [pc, #140]	; (8007b18 <HAL_RTC_Init+0xf4>)
 8007a8c:	400b      	ands	r3, r1
 8007a8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6899      	ldr	r1, [r3, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68d2      	ldr	r2, [r2, #12]
 8007ab6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6919      	ldr	r1, [r3, #16]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	041a      	lsls	r2, r3, #16
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ada:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0208 	bic.w	r2, r2, #8
 8007aea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	22ff      	movs	r2, #255	; 0xff
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	ff8fffbf 	.word	0xff8fffbf

08007b1c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	7f1b      	ldrb	r3, [r3, #28]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_RTC_SetTime+0x1c>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0a8      	b.n	8007c8a <HAL_RTC_SetTime+0x16e>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2202      	movs	r2, #2
 8007b42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d126      	bne.n	8007b98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 faac 	bl	80080c0 <RTC_ByteToBcd2>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 faa5 	bl	80080c0 <RTC_ByteToBcd2>
 8007b76:	4603      	mov	r3, r0
 8007b78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fa9d 	bl	80080c0 <RTC_ByteToBcd2>
 8007b86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	7b1b      	ldrb	r3, [r3, #12]
 8007b90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	e018      	b.n	8007bca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bb8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007bbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	7b1b      	ldrb	r3, [r3, #12]
 8007bc4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	22ca      	movs	r2, #202	; 0xca
 8007bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2253      	movs	r2, #83	; 0x53
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fa44 	bl	8008068 <RTC_EnterInitMode>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	22ff      	movs	r2, #255	; 0xff
 8007bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e045      	b.n	8007c8a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	6979      	ldr	r1, [r7, #20]
 8007c04:	4b23      	ldr	r3, [pc, #140]	; (8007c94 <HAL_RTC_SetTime+0x178>)
 8007c06:	400b      	ands	r3, r1
 8007c08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f9e1 	bl	8008018 <HAL_RTC_WaitForSynchro>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	22ff      	movs	r2, #255	; 0xff
 8007c62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2204      	movs	r2, #4
 8007c68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e00a      	b.n	8007c8a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	22ff      	movs	r2, #255	; 0xff
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c88:	2300      	movs	r3, #0
  }
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd90      	pop	{r4, r7, pc}
 8007c92:	bf00      	nop
 8007c94:	007f7f7f 	.word	0x007f7f7f

08007c98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	7f1b      	ldrb	r3, [r3, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_RTC_SetDate+0x1c>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e092      	b.n	8007dda <HAL_RTC_SetDate+0x142>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_RTC_SetDate+0x4c>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	330a      	adds	r3, #10
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d11c      	bne.n	8007d24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f9e6 	bl	80080c0 <RTC_ByteToBcd2>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f9df 	bl	80080c0 <RTC_ByteToBcd2>
 8007d02:	4603      	mov	r3, r0
 8007d04:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007d06:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	789b      	ldrb	r3, [r3, #2]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f9d7 	bl	80080c0 <RTC_ByteToBcd2>
 8007d12:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007d14:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e00e      	b.n	8007d42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	78db      	ldrb	r3, [r3, #3]
 8007d28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d30:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007d36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	22ca      	movs	r2, #202	; 0xca
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2253      	movs	r2, #83	; 0x53
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f988 	bl	8008068 <RTC_EnterInitMode>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	22ff      	movs	r2, #255	; 0xff
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e031      	b.n	8007dda <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	6979      	ldr	r1, [r7, #20]
 8007d7c:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <HAL_RTC_SetDate+0x14c>)
 8007d7e:	400b      	ands	r3, r1
 8007d80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d111      	bne.n	8007dc4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f939 	bl	8008018 <HAL_RTC_WaitForSynchro>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2204      	movs	r2, #4
 8007db8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e00a      	b.n	8007dda <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	22ff      	movs	r2, #255	; 0xff
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
  }
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	00ffff3f 	.word	0x00ffff3f

08007de8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b089      	sub	sp, #36	; 0x24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7f1b      	ldrb	r3, [r3, #28]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_RTC_SetAlarm+0x24>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e101      	b.n	8008010 <HAL_RTC_SetAlarm+0x228>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2202      	movs	r2, #2
 8007e16:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d137      	bne.n	8007e8e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f942 	bl	80080c0 <RTC_ByteToBcd2>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f93b 	bl	80080c0 <RTC_ByteToBcd2>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e4e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	789b      	ldrb	r3, [r3, #2]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f933 	bl	80080c0 <RTC_ByteToBcd2>
 8007e5a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	7b1b      	ldrb	r3, [r3, #12]
 8007e64:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e66:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f925 	bl	80080c0 <RTC_ByteToBcd2>
 8007e76:	4603      	mov	r3, r0
 8007e78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e023      	b.n	8007ed6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007eae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007eb4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	7b1b      	ldrb	r3, [r3, #12]
 8007eba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ebc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ec4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ec6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ecc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	22ca      	movs	r2, #202	; 0xca
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2253      	movs	r2, #83	; 0x53
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efa:	d13f      	bne.n	8007f7c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f0a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f1a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f1c:	f7fb fde2 	bl	8003ae4 <HAL_GetTick>
 8007f20:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007f22:	e013      	b.n	8007f4c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f24:	f7fb fdde 	bl	8003ae4 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f32:	d90b      	bls.n	8007f4c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	22ff      	movs	r2, #255	; 0xff
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e061      	b.n	8008010 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0e4      	beq.n	8007f24 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f78:	609a      	str	r2, [r3, #8]
 8007f7a:	e03e      	b.n	8007ffa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f9a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f9c:	f7fb fda2 	bl	8003ae4 <HAL_GetTick>
 8007fa0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007fa2:	e013      	b.n	8007fcc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fa4:	f7fb fd9e 	bl	8003ae4 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fb2:	d90b      	bls.n	8007fcc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	22ff      	movs	r2, #255	; 0xff
 8007fba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e021      	b.n	8008010 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0e4      	beq.n	8007fa4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3724      	adds	r7, #36	; 0x24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd90      	pop	{r4, r7, pc}

08008018 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008032:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008034:	f7fb fd56 	bl	8003ae4 <HAL_GetTick>
 8008038:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800803a:	e009      	b.n	8008050 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800803c:	f7fb fd52 	bl	8003ae4 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800804a:	d901      	bls.n	8008050 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e007      	b.n	8008060 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0ee      	beq.n	800803c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d119      	bne.n	80080b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800808c:	f7fb fd2a 	bl	8003ae4 <HAL_GetTick>
 8008090:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008092:	e009      	b.n	80080a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008094:	f7fb fd26 	bl	8003ae4 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080a2:	d901      	bls.n	80080a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e007      	b.n	80080b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0ee      	beq.n	8008094 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80080ce:	e005      	b.n	80080dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	3b0a      	subs	r3, #10
 80080da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d8f6      	bhi.n	80080d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	b2db      	uxtb	r3, r3
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7f1b      	ldrb	r3, [r3, #28]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008114:	2302      	movs	r3, #2
 8008116:	e03e      	b.n	8008196 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2202      	movs	r2, #2
 8008122:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800812c:	4013      	ands	r3, r2
 800812e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	22ca      	movs	r2, #202	; 0xca
 800813e:	625a      	str	r2, [r3, #36]	; 0x24
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2253      	movs	r2, #83	; 0x53
 8008146:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0206 	bic.w	r2, r2, #6
 8008156:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	430a      	orrs	r2, r1
 8008166:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800817e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	fffff7f7 	.word	0xfffff7f7

080081a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e149      	b.n	800845a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fb fa62 	bl	80036a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f94f 	bl	800848c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d007      	beq.n	8008206 <HAL_SAI_Init+0x5e>
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d302      	bcc.n	8008200 <HAL_SAI_Init+0x58>
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d006      	beq.n	800820c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80081fe:	e008      	b.n	8008212 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]
      break;
 8008204:	e005      	b.n	8008212 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008206:	2310      	movs	r3, #16
 8008208:	61fb      	str	r3, [r7, #28]
      break;
 800820a:	e002      	b.n	8008212 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800820c:	2320      	movs	r3, #32
 800820e:	61fb      	str	r3, [r7, #28]
      break;
 8008210:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d81d      	bhi.n	8008256 <HAL_SAI_Init+0xae>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <HAL_SAI_Init+0x78>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008231 	.word	0x08008231
 8008224:	08008237 	.word	0x08008237
 8008228:	0800823f 	.word	0x0800823f
 800822c:	08008247 	.word	0x08008247
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
      }
      break;
 8008234:	e010      	b.n	8008258 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823a:	617b      	str	r3, [r7, #20]
      }
      break;
 800823c:	e00c      	b.n	8008258 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800823e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008242:	617b      	str	r3, [r7, #20]
      }
      break;
 8008244:	e008      	b.n	8008258 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800824a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008254:	e000      	b.n	8008258 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008256:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a81      	ldr	r2, [pc, #516]	; (8008464 <HAL_SAI_Init+0x2bc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_SAI_Init+0xc4>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a80      	ldr	r2, [pc, #512]	; (8008468 <HAL_SAI_Init+0x2c0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d103      	bne.n	8008274 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800826c:	4a7f      	ldr	r2, [pc, #508]	; (800846c <HAL_SAI_Init+0x2c4>)
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	e002      	b.n	800827a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008274:	4a7e      	ldr	r2, [pc, #504]	; (8008470 <HAL_SAI_Init+0x2c8>)
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d043      	beq.n	800830a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a76      	ldr	r2, [pc, #472]	; (8008464 <HAL_SAI_Init+0x2bc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_SAI_Init+0xf2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a74      	ldr	r2, [pc, #464]	; (8008468 <HAL_SAI_Init+0x2c0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d104      	bne.n	80082a4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800829a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800829e:	f7ff fa8d 	bl	80077bc <HAL_RCCEx_GetPeriphCLKFreq>
 80082a2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a72      	ldr	r2, [pc, #456]	; (8008474 <HAL_SAI_Init+0x2cc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_SAI_Init+0x110>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a71      	ldr	r2, [pc, #452]	; (8008478 <HAL_SAI_Init+0x2d0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d104      	bne.n	80082c2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80082b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80082bc:	f7ff fa7e 	bl	80077bc <HAL_RCCEx_GetPeriphCLKFreq>
 80082c0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	025b      	lsls	r3, r3, #9
 80082d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a67      	ldr	r2, [pc, #412]	; (800847c <HAL_SAI_Init+0x2d4>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	08da      	lsrs	r2, r3, #3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	4b64      	ldr	r3, [pc, #400]	; (800847c <HAL_SAI_Init+0x2d4>)
 80082ec:	fba3 2301 	umull	r2, r3, r3, r1
 80082f0:	08da      	lsrs	r2, r3, #3
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	1aca      	subs	r2, r1, r3
 80082fc:	2a08      	cmp	r2, #8
 80082fe:	d904      	bls.n	800830a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_SAI_Init+0x172>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d109      	bne.n	800832e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_SAI_Init+0x17e>
 8008322:	2300      	movs	r3, #0
 8008324:	e001      	b.n	800832a <HAL_SAI_Init+0x182>
 8008326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	e008      	b.n	8008340 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d102      	bne.n	800833c <HAL_SAI_Init+0x194>
 8008336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800833a:	e000      	b.n	800833e <HAL_SAI_Init+0x196>
 800833c:	2300      	movs	r3, #0
 800833e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6819      	ldr	r1, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b4d      	ldr	r3, [pc, #308]	; (8008480 <HAL_SAI_Init+0x2d8>)
 800834c:	400b      	ands	r3, r1
 800834e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6819      	ldr	r1, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008364:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	431a      	orrs	r2, r3
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008378:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008384:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	051b      	lsls	r3, r3, #20
 800838c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	4b38      	ldr	r3, [pc, #224]	; (8008484 <HAL_SAI_Init+0x2dc>)
 80083a2:	400b      	ands	r3, r1
 80083a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6859      	ldr	r1, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6899      	ldr	r1, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b2e      	ldr	r3, [pc, #184]	; (8008488 <HAL_SAI_Init+0x2e0>)
 80083d0:	400b      	ands	r3, r1
 80083d2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6899      	ldr	r1, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083e4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80083ea:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80083f0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	3b01      	subs	r3, #1
 80083f8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80083fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68d9      	ldr	r1, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008412:	400b      	ands	r3, r1
 8008414:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68d9      	ldr	r1, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008424:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008432:	3b01      	subs	r3, #1
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40015804 	.word	0x40015804
 8008468:	40015824 	.word	0x40015824
 800846c:	40015800 	.word	0x40015800
 8008470:	40015c00 	.word	0x40015c00
 8008474:	40015c04 	.word	0x40015c04
 8008478:	40015c24 	.word	0x40015c24
 800847c:	cccccccd 	.word	0xcccccccd
 8008480:	ff05c010 	.word	0xff05c010
 8008484:	ffff1ff0 	.word	0xffff1ff0
 8008488:	fff88000 	.word	0xfff88000

0800848c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800848c:	b490      	push	{r4, r7}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008494:	4b16      	ldr	r3, [pc, #88]	; (80084f0 <SAI_Disable+0x64>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <SAI_Disable+0x68>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	0b1b      	lsrs	r3, r3, #12
 80084a0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084b4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80084b6:	4623      	mov	r3, r4
 80084b8:	1e5c      	subs	r4, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	73fb      	strb	r3, [r7, #15]
      break;
 80084d2:	e006      	b.n	80084e2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e9      	bne.n	80084b6 <SAI_Disable+0x2a>

  return status;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc90      	pop	{r4, r7}
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20000018 	.word	0x20000018
 80084f4:	95cbec1b 	.word	0x95cbec1b

080084f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e022      	b.n	8008550 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d105      	bne.n	8008522 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fa fd31 	bl	8002f84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2203      	movs	r2, #3
 8008526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f814 	bl	8008558 <HAL_SD_InitCard>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e00a      	b.n	8008550 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008558:	b5b0      	push	{r4, r5, r7, lr}
 800855a:	b08e      	sub	sp, #56	; 0x38
 800855c:	af04      	add	r7, sp, #16
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008574:	2376      	movs	r3, #118	; 0x76
 8008576:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	466c      	mov	r4, sp
 800857e:	f107 0314 	add.w	r3, r7, #20
 8008582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008590:	4628      	mov	r0, r5
 8008592:	f002 ff51 	bl	800b438 <SDMMC_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800859c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e03b      	b.n	8008620 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f002 ff74 	bl	800b4aa <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085d0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fde6 	bl	80091a4 <SD_PowerON>
 80085d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e013      	b.n	8008620 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fd05 	bl	8009008 <SD_InitCard>
 80085fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3728      	adds	r7, #40	; 0x28
 8008624:	46bd      	mov	sp, r7
 8008626:	bdb0      	pop	{r4, r5, r7, pc}

08008628 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08c      	sub	sp, #48	; 0x30
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d107      	bne.n	8008650 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0cc      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	f040 80c5 	bne.w	80087e8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	441a      	add	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866e:	429a      	cmp	r2, r3
 8008670:	d907      	bls.n	8008682 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0b3      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2203      	movs	r2, #3
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80086a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	4a53      	ldr	r2, [pc, #332]	; (80087f4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80086a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	4a52      	ldr	r2, [pc, #328]	; (80087f8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80086b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	2200      	movs	r2, #0
 80086b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3380      	adds	r3, #128	; 0x80
 80086c4:	4619      	mov	r1, r3
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	025b      	lsls	r3, r3, #9
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	f7fc fcb7 	bl	8005040 <HAL_DMA_Start_IT>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80086e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a43      	ldr	r2, [pc, #268]	; (80087fc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e070      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871c:	2b01      	cmp	r3, #1
 800871e:	d002      	beq.n	8008726 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	025b      	lsls	r3, r3, #9
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800872e:	4618      	mov	r0, r3
 8008730:	f002 ff4e 	bl	800b5d0 <SDMMC_CmdBlockLength>
 8008734:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00f      	beq.n	800875c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a2e      	ldr	r2, [pc, #184]	; (80087fc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	431a      	orrs	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e046      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008768:	2390      	movs	r3, #144	; 0x90
 800876a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800876c:	2302      	movs	r3, #2
 800876e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008770:	2300      	movs	r3, #0
 8008772:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008774:	2301      	movs	r3, #1
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f107 0210 	add.w	r2, r7, #16
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f002 fef8 	bl	800b578 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d90a      	bls.n	80087a4 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2282      	movs	r2, #130	; 0x82
 8008792:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879a:	4618      	mov	r0, r3
 800879c:	f002 ff5c 	bl	800b658 <SDMMC_CmdReadMultiBlock>
 80087a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087a2:	e009      	b.n	80087b8 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2281      	movs	r2, #129	; 0x81
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087b0:	4618      	mov	r0, r3
 80087b2:	f002 ff2f 	bl	800b614 <SDMMC_CmdReadSingleBlock>
 80087b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d012      	beq.n	80087e4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a0e      	ldr	r2, [pc, #56]	; (80087fc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	431a      	orrs	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e002      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	e000      	b.n	80087ea <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80087e8:	2302      	movs	r3, #2
  }
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3730      	adds	r7, #48	; 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	08008ef3 	.word	0x08008ef3
 80087f8:	08008f65 	.word	0x08008f65
 80087fc:	004005ff 	.word	0x004005ff

08008800 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d107      	bne.n	8008828 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e0cf      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b01      	cmp	r3, #1
 8008832:	f040 80c8 	bne.w	80089c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800883c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008846:	429a      	cmp	r2, r3
 8008848:	d907      	bls.n	800885a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e0b6      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2203      	movs	r2, #3
 800885e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 021a 	orr.w	r2, r2, #26
 8008878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887e:	4a54      	ldr	r2, [pc, #336]	; (80089d0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	4a53      	ldr	r2, [pc, #332]	; (80089d4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	2200      	movs	r2, #0
 8008890:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	2b01      	cmp	r3, #1
 8008898:	d002      	beq.n	80088a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	025b      	lsls	r3, r3, #9
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088a8:	4618      	mov	r0, r3
 80088aa:	f002 fe91 	bl	800b5d0 <SDMMC_CmdBlockLength>
 80088ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a47      	ldr	r2, [pc, #284]	; (80089d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e078      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d90a      	bls.n	80088f2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	22a0      	movs	r2, #160	; 0xa0
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fef9 	bl	800b6e0 <SDMMC_CmdWriteMultiBlock>
 80088ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088f0:	e009      	b.n	8008906 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2290      	movs	r2, #144	; 0x90
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088fe:	4618      	mov	r0, r3
 8008900:	f002 fecc 	bl	800b69c <SDMMC_CmdWriteSingleBlock>
 8008904:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d012      	beq.n	8008932 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a31      	ldr	r2, [pc, #196]	; (80089d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	431a      	orrs	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e04a      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0208 	orr.w	r2, r2, #8
 8008940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3380      	adds	r3, #128	; 0x80
 800894e:	461a      	mov	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	089b      	lsrs	r3, r3, #2
 8008956:	f7fc fb73 	bl	8005040 <HAL_DMA_Start_IT>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01a      	beq.n	8008996 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 021a 	bic.w	r2, r2, #26
 800896e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a18      	ldr	r2, [pc, #96]	; (80089d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e018      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	025b      	lsls	r3, r3, #9
 80089a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80089a2:	2390      	movs	r3, #144	; 0x90
 80089a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80089ae:	2301      	movs	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f107 0210 	add.w	r2, r7, #16
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 fddb 	bl	800b578 <SDMMC_ConfigData>

      return HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e000      	b.n	80089c8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80089c6:	2302      	movs	r3, #2
  }
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3730      	adds	r7, #48	; 0x30
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	08008ec9 	.word	0x08008ec9
 80089d4:	08008f65 	.word	0x08008f65
 80089d8:	004005ff 	.word	0x004005ff

080089dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089fe:	0f9b      	lsrs	r3, r3, #30
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	0e9b      	lsrs	r3, r3, #26
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1c:	0e1b      	lsrs	r3, r3, #24
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6e:	0bdb      	lsrs	r3, r3, #15
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	0b9b      	lsrs	r3, r3, #14
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a92:	0b5b      	lsrs	r3, r3, #13
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa4:	0b1b      	lsrs	r3, r3, #12
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d163      	bne.n	8008b88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac4:	009a      	lsls	r2, r3, #2
 8008ac6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008aca:	4013      	ands	r3, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008ad0:	0f92      	lsrs	r2, r2, #30
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008adc:	0edb      	lsrs	r3, r3, #27
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b00:	0d5b      	lsrs	r3, r3, #21
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b12:	0c9b      	lsrs	r3, r3, #18
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	0bdb      	lsrs	r3, r3, #15
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	7e1b      	ldrb	r3, [r3, #24]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	3302      	adds	r3, #2
 8008b48:	2201      	movs	r2, #1
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b52:	fb02 f203 	mul.w	r2, r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	7a1b      	ldrb	r3, [r3, #8]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2201      	movs	r2, #1
 8008b66:	409a      	lsls	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b74:	0a52      	lsrs	r2, r2, #9
 8008b76:	fb02 f203 	mul.w	r2, r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	661a      	str	r2, [r3, #96]	; 0x60
 8008b86:	e031      	b.n	8008bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d11d      	bne.n	8008bcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	3301      	adds	r3, #1
 8008bac:	029a      	lsls	r2, r3, #10
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	661a      	str	r2, [r3, #96]	; 0x60
 8008bca:	e00f      	b.n	8008bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a58      	ldr	r2, [pc, #352]	; (8008d34 <HAL_SD_GetCardCSD+0x344>)
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e09d      	b.n	8008d28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf0:	0b9b      	lsrs	r3, r3, #14
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c02:	09db      	lsrs	r3, r3, #7
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c24:	0fdb      	lsrs	r3, r3, #31
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	0f5b      	lsrs	r3, r3, #29
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	0e9b      	lsrs	r3, r3, #26
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	0d9b      	lsrs	r3, r3, #22
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	0d5b      	lsrs	r3, r3, #21
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	0bdb      	lsrs	r3, r3, #15
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	0b9b      	lsrs	r3, r3, #14
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	0b5b      	lsrs	r3, r3, #13
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	0b1b      	lsrs	r3, r3, #12
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	0a9b      	lsrs	r3, r3, #10
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	004005ff 	.word	0x004005ff

08008d38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d90:	b5b0      	push	{r4, r5, r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d02e      	beq.n	8008e08 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db0:	d106      	bne.n	8008dc0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8008dbe:	e029      	b.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc6:	d10a      	bne.n	8008dde <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 faa1 	bl	8009310 <SD_WideBus_Enable>
 8008dce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38
 8008ddc:	e01a      	b.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fade 	bl	80093a6 <SD_WideBus_Disable>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38
 8008df8:	e00c      	b.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
 8008e06:	e005      	b.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e024      	b.n	8008e7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681d      	ldr	r5, [r3, #0]
 8008e56:	466c      	mov	r4, sp
 8008e58:	f107 0318 	add.w	r3, r7, #24
 8008e5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e64:	f107 030c 	add.w	r3, r7, #12
 8008e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f002 fae4 	bl	800b438 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bdb0      	pop	{r4, r5, r7, pc}
 8008e82:	bf00      	nop
 8008e84:	004005ff 	.word	0x004005ff

08008e88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa10 	bl	80092c0 <SD_SendStatus>
 8008ea0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	0a5b      	lsrs	r3, r3, #9
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ebe:	693b      	ldr	r3, [r7, #16]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	2b82      	cmp	r3, #130	; 0x82
 8008f06:	d111      	bne.n	8008f2c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 fc09 	bl	800b724 <SDMMC_CmdStopTransfer>
 8008f12:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d008      	beq.n	8008f2c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff fd58 	bl	80089dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0208 	bic.w	r2, r2, #8
 8008f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f003 f84f 	bl	800bff8 <HAL_SD_RxCpltCallback>
#endif
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fc f8c4 	bl	8005100 <HAL_DMA_GetError>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d03e      	beq.n	8008ffc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d002      	beq.n	8008f9a <SD_DMAError+0x36>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d12d      	bne.n	8008ff6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a19      	ldr	r2, [pc, #100]	; (8009004 <SD_DMAError+0xa0>)
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008fb0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008fbe:	6978      	ldr	r0, [r7, #20]
 8008fc0:	f7ff ff62 	bl	8008e88 <HAL_SD_GetCardState>
 8008fc4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b06      	cmp	r3, #6
 8008fca:	d002      	beq.n	8008fd2 <SD_DMAError+0x6e>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d10a      	bne.n	8008fe8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 fba4 	bl	800b724 <SDMMC_CmdStopTransfer>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f7ff fcf0 	bl	80089dc <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	004005ff 	.word	0x004005ff

08009008 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009008:	b5b0      	push	{r4, r5, r7, lr}
 800900a:	b094      	sub	sp, #80	; 0x50
 800900c:	af04      	add	r7, sp, #16
 800900e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009010:	2301      	movs	r3, #1
 8009012:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f002 fa55 	bl	800b4c8 <SDMMC_GetPowerState>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009024:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009028:	e0b7      	b.n	800919a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	2b03      	cmp	r3, #3
 8009030:	d02f      	beq.n	8009092 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fc7f 	bl	800b93a <SDMMC_CmdSendCID>
 800903c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800903e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <SD_InitCard+0x40>
    {
      return errorstate;
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	e0a8      	b.n	800919a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f002 fa7f 	bl	800b552 <SDMMC_GetResponse>
 8009054:	4602      	mov	r2, r0
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2104      	movs	r1, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f002 fa76 	bl	800b552 <SDMMC_GetResponse>
 8009066:	4602      	mov	r2, r0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2108      	movs	r1, #8
 8009072:	4618      	mov	r0, r3
 8009074:	f002 fa6d 	bl	800b552 <SDMMC_GetResponse>
 8009078:	4602      	mov	r2, r0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	210c      	movs	r1, #12
 8009084:	4618      	mov	r0, r3
 8009086:	f002 fa64 	bl	800b552 <SDMMC_GetResponse>
 800908a:	4602      	mov	r2, r0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009096:	2b03      	cmp	r3, #3
 8009098:	d00d      	beq.n	80090b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f107 020e 	add.w	r2, r7, #14
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 fc85 	bl	800b9b4 <SDMMC_CmdSetRelAdd>
 80090aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	e071      	b.n	800919a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d036      	beq.n	800912c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090be:	89fb      	ldrh	r3, [r7, #14]
 80090c0:	461a      	mov	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	4619      	mov	r1, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f002 fc4f 	bl	800b976 <SDMMC_CmdSendCSD>
 80090d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	e05a      	b.n	800919a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 fa31 	bl	800b552 <SDMMC_GetResponse>
 80090f0:	4602      	mov	r2, r0
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2104      	movs	r1, #4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f002 fa28 	bl	800b552 <SDMMC_GetResponse>
 8009102:	4602      	mov	r2, r0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2108      	movs	r1, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f002 fa1f 	bl	800b552 <SDMMC_GetResponse>
 8009114:	4602      	mov	r2, r0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	210c      	movs	r1, #12
 8009120:	4618      	mov	r0, r3
 8009122:	f002 fa16 	bl	800b552 <SDMMC_GetResponse>
 8009126:	4602      	mov	r2, r0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2104      	movs	r1, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f002 fa0d 	bl	800b552 <SDMMC_GetResponse>
 8009138:	4603      	mov	r3, r0
 800913a:	0d1a      	lsrs	r2, r3, #20
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009140:	f107 0310 	add.w	r3, r7, #16
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fc52 	bl	80089f0 <HAL_SD_GetCardCSD>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009152:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009156:	e020      	b.n	800919a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	f04f 0400 	mov.w	r4, #0
 8009166:	461a      	mov	r2, r3
 8009168:	4623      	mov	r3, r4
 800916a:	4608      	mov	r0, r1
 800916c:	f002 fafc 	bl	800b768 <SDMMC_CmdSelDesel>
 8009170:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <SD_InitCard+0x174>
  {
    return errorstate;
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	e00e      	b.n	800919a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681d      	ldr	r5, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	466c      	mov	r4, sp
 8009184:	f103 0210 	add.w	r2, r3, #16
 8009188:	ca07      	ldmia	r2, {r0, r1, r2}
 800918a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800918e:	3304      	adds	r3, #4
 8009190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009192:	4628      	mov	r0, r5
 8009194:	f002 f950 	bl	800b438 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3740      	adds	r7, #64	; 0x40
 800919e:	46bd      	mov	sp, r7
 80091a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080091a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 faf6 	bl	800b7ae <SDMMC_CmdGoIdleState>
 80091c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	e072      	b.n	80092b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 fb09 	bl	800b7ea <SDMMC_CmdOperCond>
 80091d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00d      	beq.n	80091fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f002 fadf 	bl	800b7ae <SDMMC_CmdGoIdleState>
 80091f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <SD_PowerON+0x5e>
    {
      return errorstate;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	e05b      	b.n	80092b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009206:	2b01      	cmp	r3, #1
 8009208:	d137      	bne.n	800927a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2100      	movs	r1, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f002 fb09 	bl	800b828 <SDMMC_CmdAppCommand>
 8009216:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d02d      	beq.n	800927a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800921e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009222:	e047      	b.n	80092b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2100      	movs	r1, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f002 fafc 	bl	800b828 <SDMMC_CmdAppCommand>
 8009230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <SD_PowerON+0x98>
    {
      return errorstate;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e03b      	b.n	80092b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	491e      	ldr	r1, [pc, #120]	; (80092bc <SD_PowerON+0x118>)
 8009242:	4618      	mov	r0, r3
 8009244:	f002 fb12 	bl	800b86c <SDMMC_CmdAppOperCommand>
 8009248:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009254:	e02e      	b.n	80092b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2100      	movs	r1, #0
 800925c:	4618      	mov	r0, r3
 800925e:	f002 f978 	bl	800b552 <SDMMC_GetResponse>
 8009262:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	0fdb      	lsrs	r3, r3, #31
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <SD_PowerON+0xcc>
 800926c:	2301      	movs	r3, #1
 800926e:	e000      	b.n	8009272 <SD_PowerON+0xce>
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]

    count++;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3301      	adds	r3, #1
 8009278:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009280:	4293      	cmp	r3, r2
 8009282:	d802      	bhi.n	800928a <SD_PowerON+0xe6>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0cc      	beq.n	8009224 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009290:	4293      	cmp	r3, r2
 8009292:	d902      	bls.n	800929a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009298:	e00c      	b.n	80092b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	645a      	str	r2, [r3, #68]	; 0x44
 80092aa:	e002      	b.n	80092b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	c1100000 	.word	0xc1100000

080092c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092d4:	e018      	b.n	8009308 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092de:	041b      	lsls	r3, r3, #16
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f002 fb87 	bl	800b9f6 <SDMMC_CmdSendStatus>
 80092e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e009      	b.n	8009308 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2100      	movs	r1, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f002 f929 	bl	800b552 <SDMMC_GetResponse>
 8009300:	4602      	mov	r2, r0
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f002 f913 	bl	800b552 <SDMMC_GetResponse>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009336:	d102      	bne.n	800933e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800933c:	e02f      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f879 	bl	800943c <SD_FindSCR>
 800934a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	e023      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01c      	beq.n	800939a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009368:	041b      	lsls	r3, r3, #16
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f002 fa5b 	bl	800b828 <SDMMC_CmdAppCommand>
 8009372:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	e00f      	b.n	800939e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2102      	movs	r1, #2
 8009384:	4618      	mov	r0, r3
 8009386:	f002 fa95 	bl	800b8b4 <SDMMC_CmdBusWidth>
 800938a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	e003      	b.n	800939e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009396:	2300      	movs	r3, #0
 8009398:	e001      	b.n	800939e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800939a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	2300      	movs	r3, #0
 80093b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 f8c8 	bl	800b552 <SDMMC_GetResponse>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093cc:	d102      	bne.n	80093d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093d2:	e02f      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f82e 	bl	800943c <SD_FindSCR>
 80093e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e023      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01c      	beq.n	8009430 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f002 fa10 	bl	800b828 <SDMMC_CmdAppCommand>
 8009408:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	e00f      	b.n	8009434 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f002 fa4a 	bl	800b8b4 <SDMMC_CmdBusWidth>
 8009420:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e003      	b.n	8009434 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800942c:	2300      	movs	r3, #0
 800942e:	e001      	b.n	8009434 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800943c:	b590      	push	{r4, r7, lr}
 800943e:	b08f      	sub	sp, #60	; 0x3c
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009446:	f7fa fb4d 	bl	8003ae4 <HAL_GetTick>
 800944a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009450:	2300      	movs	r3, #0
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2108      	movs	r1, #8
 8009462:	4618      	mov	r0, r3
 8009464:	f002 f8b4 	bl	800b5d0 <SDMMC_CmdBlockLength>
 8009468:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	e0a9      	b.n	80095c8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947c:	041b      	lsls	r3, r3, #16
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f002 f9d1 	bl	800b828 <SDMMC_CmdAppCommand>
 8009486:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <SD_FindSCR+0x56>
  {
    return errorstate;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	e09a      	b.n	80095c8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295
 8009496:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009498:	2308      	movs	r3, #8
 800949a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800949c:	2330      	movs	r3, #48	; 0x30
 800949e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094a0:	2302      	movs	r3, #2
 80094a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f107 0210 	add.w	r2, r7, #16
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 f85e 	bl	800b578 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f002 fa19 	bl	800b8f8 <SDMMC_CmdSendSCR>
 80094c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d022      	beq.n	8009514 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	e07a      	b.n	80095c8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00e      	beq.n	80094fe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6819      	ldr	r1, [r3, #0]
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	f107 0208 	add.w	r2, r7, #8
 80094ec:	18d4      	adds	r4, r2, r3
 80094ee:	4608      	mov	r0, r1
 80094f0:	f001 ffce 	bl	800b490 <SDMMC_ReadFIFO>
 80094f4:	4603      	mov	r3, r0
 80094f6:	6023      	str	r3, [r4, #0]
      index++;
 80094f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fa:	3301      	adds	r3, #1
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094fe:	f7fa faf1 	bl	8003ae4 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d102      	bne.n	8009514 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800950e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009512:	e059      	b.n	80095c8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800951a:	f240 432a 	movw	r3, #1066	; 0x42a
 800951e:	4013      	ands	r3, r2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0d6      	beq.n	80094d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2208      	movs	r2, #8
 8009538:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800953a:	2308      	movs	r3, #8
 800953c:	e044      	b.n	80095c8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2202      	movs	r2, #2
 8009552:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009554:	2302      	movs	r3, #2
 8009556:	e037      	b.n	80095c8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2220      	movs	r2, #32
 800956c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800956e:	2320      	movs	r3, #32
 8009570:	e02a      	b.n	80095c8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f240 523a 	movw	r2, #1338	; 0x53a
 800957a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	061a      	lsls	r2, r3, #24
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009588:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	0a1b      	lsrs	r3, r3, #8
 800958e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009592:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	601a      	str	r2, [r3, #0]
    scr++;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	3304      	adds	r3, #4
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	061a      	lsls	r2, r3, #24
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	0e1b      	lsrs	r3, r3, #24
 80095c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	373c      	adds	r7, #60	; 0x3c
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd90      	pop	{r4, r7, pc}

080095d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e025      	b.n	8009630 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7fa f849 	bl	8003690 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f001 fdeb 	bl	800b1ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	461a      	mov	r2, r3
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	f001 fe55 	bl	800b2d0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b02      	cmp	r3, #2
 800964e:	d101      	bne.n	8009654 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009650:	2302      	movs	r3, #2
 8009652:	e018      	b.n	8009686 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f001 feb3 	bl	800b3d0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d104      	bne.n	800967c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2205      	movs	r2, #5
 8009676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800967a:	e003      	b.n	8009684 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d101      	bne.n	80096a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
 80096a6:	e00e      	b.n	80096c6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 feab 	bl	800b412 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e04c      	b.n	800977c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7f9 fca6 	bl	8003048 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0203 	bic.w	r2, r2, #3
 8009712:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4b19      	ldr	r3, [pc, #100]	; (8009784 <HAL_SPDIFRX_Init+0xb4>)
 8009720:	4013      	ands	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800972c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009732:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009738:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800973e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009744:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800974a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009750:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009756:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800975c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	fff88407 	.word	0xfff88407

08009788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e084      	b.n	80098a4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d106      	bne.n	80097ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7f9 fc89 	bl	80030cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097da:	d902      	bls.n	80097e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e002      	b.n	80097e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097f0:	d007      	beq.n	8009802 <HAL_SPI_Init+0x7a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097fa:	d002      	beq.n	8009802 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009812:	d903      	bls.n	800981c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
 800981a:	e002      	b.n	8009822 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009840:	431a      	orrs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	ea42 0103 	orr.w	r1, r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	0c1b      	lsrs	r3, r3, #16
 8009862:	f003 0204 	and.w	r2, r3, #4
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	ea42 0103 	orr.w	r1, r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	430a      	orrs	r2, r1
 8009882:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009892:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e01d      	b.n	80098fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f9 fc5c 	bl	8003190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f000 fb78 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <HAL_TIM_Base_Start_IT+0x50>)
 8009924:	4013      	ands	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b06      	cmp	r3, #6
 800992c:	d00b      	beq.n	8009946 <HAL_TIM_Base_Start_IT+0x42>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009934:	d007      	beq.n	8009946 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0201 	orr.w	r2, r2, #1
 8009944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	00010007 	.word	0x00010007

08009958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e01d      	b.n	80099a6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7f9 fc74 	bl	800326c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f000 fb22 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d122      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d11b      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f06f 0202 	mvn.w	r2, #2
 80099da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f003 0303 	and.w	r3, r3, #3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fad7 	bl	8009fa4 <HAL_TIM_IC_CaptureCallback>
 80099f6:	e005      	b.n	8009a04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fac9 	bl	8009f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fada 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d122      	bne.n	8009a5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0304 	and.w	r3, r3, #4
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d11b      	bne.n	8009a5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f06f 0204 	mvn.w	r2, #4
 8009a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 faad 	bl	8009fa4 <HAL_TIM_IC_CaptureCallback>
 8009a4a:	e005      	b.n	8009a58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fa9f 	bl	8009f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fab0 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d122      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f003 0308 	and.w	r3, r3, #8
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	d11b      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f06f 0208 	mvn.w	r2, #8
 8009a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2204      	movs	r2, #4
 8009a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	f003 0303 	and.w	r3, r3, #3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa83 	bl	8009fa4 <HAL_TIM_IC_CaptureCallback>
 8009a9e:	e005      	b.n	8009aac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa75 	bl	8009f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa86 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	f003 0310 	and.w	r3, r3, #16
 8009abc:	2b10      	cmp	r3, #16
 8009abe:	d122      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f003 0310 	and.w	r3, r3, #16
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	d11b      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f06f 0210 	mvn.w	r2, #16
 8009ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2208      	movs	r2, #8
 8009adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa59 	bl	8009fa4 <HAL_TIM_IC_CaptureCallback>
 8009af2:	e005      	b.n	8009b00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa4b 	bl	8009f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa5c 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d10e      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d107      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f06f 0201 	mvn.w	r2, #1
 8009b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7f8 feb1 	bl	8002894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3c:	2b80      	cmp	r3, #128	; 0x80
 8009b3e:	d10e      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b4a:	2b80      	cmp	r3, #128	; 0x80
 8009b4c:	d107      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 feef 	bl	800a93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	d10e      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d107      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fee2 	bl	800a950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d10e      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba4:	2b40      	cmp	r3, #64	; 0x40
 8009ba6:	d107      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa0a 	bl	8009fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0320 	and.w	r3, r3, #32
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d10e      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f003 0320 	and.w	r3, r3, #32
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d107      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f06f 0220 	mvn.w	r2, #32
 8009bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fea2 	bl	800a928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e105      	b.n	8009e12 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b14      	cmp	r3, #20
 8009c1a:	f200 80f0 	bhi.w	8009dfe <HAL_TIM_PWM_ConfigChannel+0x212>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009dff 	.word	0x08009dff
 8009c2c:	08009dff 	.word	0x08009dff
 8009c30:	08009dff 	.word	0x08009dff
 8009c34:	08009cb9 	.word	0x08009cb9
 8009c38:	08009dff 	.word	0x08009dff
 8009c3c:	08009dff 	.word	0x08009dff
 8009c40:	08009dff 	.word	0x08009dff
 8009c44:	08009cfb 	.word	0x08009cfb
 8009c48:	08009dff 	.word	0x08009dff
 8009c4c:	08009dff 	.word	0x08009dff
 8009c50:	08009dff 	.word	0x08009dff
 8009c54:	08009d3b 	.word	0x08009d3b
 8009c58:	08009dff 	.word	0x08009dff
 8009c5c:	08009dff 	.word	0x08009dff
 8009c60:	08009dff 	.word	0x08009dff
 8009c64:	08009d7d 	.word	0x08009d7d
 8009c68:	08009dff 	.word	0x08009dff
 8009c6c:	08009dff 	.word	0x08009dff
 8009c70:	08009dff 	.word	0x08009dff
 8009c74:	08009dbd 	.word	0x08009dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fa4e 	bl	800a120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0208 	orr.w	r2, r2, #8
 8009c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0204 	bic.w	r2, r2, #4
 8009ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6999      	ldr	r1, [r3, #24]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	619a      	str	r2, [r3, #24]
      break;
 8009cb6:	e0a3      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 faa0 	bl	800a204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699a      	ldr	r2, [r3, #24]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6999      	ldr	r1, [r3, #24]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	021a      	lsls	r2, r3, #8
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	619a      	str	r2, [r3, #24]
      break;
 8009cf8:	e082      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 faf7 	bl	800a2f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0208 	orr.w	r2, r2, #8
 8009d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69da      	ldr	r2, [r3, #28]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0204 	bic.w	r2, r2, #4
 8009d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69d9      	ldr	r1, [r3, #28]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	61da      	str	r2, [r3, #28]
      break;
 8009d38:	e062      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fb4d 	bl	800a3e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69da      	ldr	r2, [r3, #28]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69d9      	ldr	r1, [r3, #28]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	021a      	lsls	r2, r3, #8
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	61da      	str	r2, [r3, #28]
      break;
 8009d7a:	e041      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fb84 	bl	800a490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0208 	orr.w	r2, r2, #8
 8009d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 0204 	bic.w	r2, r2, #4
 8009da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691a      	ldr	r2, [r3, #16]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dba:	e021      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fbb6 	bl	800a534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	021a      	lsls	r2, r3, #8
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dfc:	e000      	b.n	8009e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009dfe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop

08009e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_TIM_ConfigClockSource+0x18>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e0a6      	b.n	8009f82 <HAL_TIM_ConfigClockSource+0x166>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4b4f      	ldr	r3, [pc, #316]	; (8009f8c <HAL_TIM_ConfigClockSource+0x170>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b40      	cmp	r3, #64	; 0x40
 8009e6a:	d067      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0x120>
 8009e6c:	2b40      	cmp	r3, #64	; 0x40
 8009e6e:	d80b      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x6c>
 8009e70:	2b10      	cmp	r3, #16
 8009e72:	d073      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x140>
 8009e74:	2b10      	cmp	r3, #16
 8009e76:	d802      	bhi.n	8009e7e <HAL_TIM_ConfigClockSource+0x62>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d06f      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e7c:	e078      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d06c      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x140>
 8009e82:	2b30      	cmp	r3, #48	; 0x30
 8009e84:	d06a      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009e86:	e073      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e88:	2b70      	cmp	r3, #112	; 0x70
 8009e8a:	d00d      	beq.n	8009ea8 <HAL_TIM_ConfigClockSource+0x8c>
 8009e8c:	2b70      	cmp	r3, #112	; 0x70
 8009e8e:	d804      	bhi.n	8009e9a <HAL_TIM_ConfigClockSource+0x7e>
 8009e90:	2b50      	cmp	r3, #80	; 0x50
 8009e92:	d033      	beq.n	8009efc <HAL_TIM_ConfigClockSource+0xe0>
 8009e94:	2b60      	cmp	r3, #96	; 0x60
 8009e96:	d041      	beq.n	8009f1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e98:	e06a      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9e:	d066      	beq.n	8009f6e <HAL_TIM_ConfigClockSource+0x152>
 8009ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea4:	d017      	beq.n	8009ed6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009ea6:	e063      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	6899      	ldr	r1, [r3, #8]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f000 fc0a 	bl	800a6d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	609a      	str	r2, [r3, #8]
      break;
 8009ed4:	e04c      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6899      	ldr	r1, [r3, #8]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f000 fbf3 	bl	800a6d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ef8:	609a      	str	r2, [r3, #8]
      break;
 8009efa:	e039      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f000 fb67 	bl	800a5dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2150      	movs	r1, #80	; 0x50
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fbc0 	bl	800a69a <TIM_ITRx_SetConfig>
      break;
 8009f1a:	e029      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6818      	ldr	r0, [r3, #0]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	6859      	ldr	r1, [r3, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f000 fb86 	bl	800a63a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2160      	movs	r1, #96	; 0x60
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fbb0 	bl	800a69a <TIM_ITRx_SetConfig>
      break;
 8009f3a:	e019      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f000 fb47 	bl	800a5dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2140      	movs	r1, #64	; 0x40
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fba0 	bl	800a69a <TIM_ITRx_SetConfig>
      break;
 8009f5a:	e009      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f000 fb97 	bl	800a69a <TIM_ITRx_SetConfig>
      break;
 8009f6c:	e000      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	fffeff88 	.word	0xfffeff88

08009f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a40      	ldr	r2, [pc, #256]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d013      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a3d      	ldr	r2, [pc, #244]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a3c      	ldr	r2, [pc, #240]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a3b      	ldr	r2, [pc, #236]	; (800a100 <TIM_Base_SetConfig+0x120>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a3a      	ldr	r2, [pc, #232]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d108      	bne.n	800a032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a2f      	ldr	r2, [pc, #188]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d02b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a040:	d027      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2c      	ldr	r2, [pc, #176]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d023      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a2b      	ldr	r2, [pc, #172]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d01f      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2a      	ldr	r2, [pc, #168]	; (800a100 <TIM_Base_SetConfig+0x120>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d01b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a29      	ldr	r2, [pc, #164]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d017      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a28      	ldr	r2, [pc, #160]	; (800a108 <TIM_Base_SetConfig+0x128>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d013      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a27      	ldr	r2, [pc, #156]	; (800a10c <TIM_Base_SetConfig+0x12c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00f      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a26      	ldr	r2, [pc, #152]	; (800a110 <TIM_Base_SetConfig+0x130>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a25      	ldr	r2, [pc, #148]	; (800a114 <TIM_Base_SetConfig+0x134>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a24      	ldr	r2, [pc, #144]	; (800a118 <TIM_Base_SetConfig+0x138>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d003      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a23      	ldr	r2, [pc, #140]	; (800a11c <TIM_Base_SetConfig+0x13c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d108      	bne.n	800a0a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a0a      	ldr	r2, [pc, #40]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a0c      	ldr	r2, [pc, #48]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d103      	bne.n	800a0e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	615a      	str	r2, [r3, #20]
}
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	40010000 	.word	0x40010000
 800a0f8:	40000400 	.word	0x40000400
 800a0fc:	40000800 	.word	0x40000800
 800a100:	40000c00 	.word	0x40000c00
 800a104:	40010400 	.word	0x40010400
 800a108:	40014000 	.word	0x40014000
 800a10c:	40014400 	.word	0x40014400
 800a110:	40014800 	.word	0x40014800
 800a114:	40001800 	.word	0x40001800
 800a118:	40001c00 	.word	0x40001c00
 800a11c:	40002000 	.word	0x40002000

0800a120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <TIM_OC1_SetConfig+0xd8>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f023 0302 	bic.w	r3, r3, #2
 800a168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4313      	orrs	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a21      	ldr	r2, [pc, #132]	; (800a1fc <TIM_OC1_SetConfig+0xdc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_OC1_SetConfig+0x64>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a20      	ldr	r2, [pc, #128]	; (800a200 <TIM_OC1_SetConfig+0xe0>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d10c      	bne.n	800a19e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f023 0308 	bic.w	r3, r3, #8
 800a18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f023 0304 	bic.w	r3, r3, #4
 800a19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <TIM_OC1_SetConfig+0xdc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d003      	beq.n	800a1ae <TIM_OC1_SetConfig+0x8e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a15      	ldr	r2, [pc, #84]	; (800a200 <TIM_OC1_SetConfig+0xe0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d111      	bne.n	800a1d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	621a      	str	r2, [r3, #32]
}
 800a1ec:	bf00      	nop
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	fffeff8f 	.word	0xfffeff8f
 800a1fc:	40010000 	.word	0x40010000
 800a200:	40010400 	.word	0x40010400

0800a204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0210 	bic.w	r2, r3, #16
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4b2e      	ldr	r3, [pc, #184]	; (800a2e8 <TIM_OC2_SetConfig+0xe4>)
 800a230:	4013      	ands	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f023 0320 	bic.w	r3, r3, #32
 800a24e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a23      	ldr	r2, [pc, #140]	; (800a2ec <TIM_OC2_SetConfig+0xe8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d003      	beq.n	800a26c <TIM_OC2_SetConfig+0x68>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a22      	ldr	r2, [pc, #136]	; (800a2f0 <TIM_OC2_SetConfig+0xec>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d10d      	bne.n	800a288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a18      	ldr	r2, [pc, #96]	; (800a2ec <TIM_OC2_SetConfig+0xe8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC2_SetConfig+0x94>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <TIM_OC2_SetConfig+0xec>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d113      	bne.n	800a2c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a29e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	621a      	str	r2, [r3, #32]
}
 800a2da:	bf00      	nop
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	feff8fff 	.word	0xfeff8fff
 800a2ec:	40010000 	.word	0x40010000
 800a2f0:	40010400 	.word	0x40010400

0800a2f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4b2d      	ldr	r3, [pc, #180]	; (800a3d4 <TIM_OC3_SetConfig+0xe0>)
 800a320:	4013      	ands	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a33c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a22      	ldr	r2, [pc, #136]	; (800a3d8 <TIM_OC3_SetConfig+0xe4>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d003      	beq.n	800a35a <TIM_OC3_SetConfig+0x66>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a21      	ldr	r2, [pc, #132]	; (800a3dc <TIM_OC3_SetConfig+0xe8>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d10d      	bne.n	800a376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <TIM_OC3_SetConfig+0xe4>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d003      	beq.n	800a386 <TIM_OC3_SetConfig+0x92>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a16      	ldr	r2, [pc, #88]	; (800a3dc <TIM_OC3_SetConfig+0xe8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d113      	bne.n	800a3ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a38c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	621a      	str	r2, [r3, #32]
}
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	fffeff8f 	.word	0xfffeff8f
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40010400 	.word	0x40010400

0800a3e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4b1e      	ldr	r3, [pc, #120]	; (800a484 <TIM_OC4_SetConfig+0xa4>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4313      	orrs	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a42a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	031b      	lsls	r3, r3, #12
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a13      	ldr	r2, [pc, #76]	; (800a488 <TIM_OC4_SetConfig+0xa8>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d003      	beq.n	800a448 <TIM_OC4_SetConfig+0x68>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a12      	ldr	r2, [pc, #72]	; (800a48c <TIM_OC4_SetConfig+0xac>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d109      	bne.n	800a45c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	019b      	lsls	r3, r3, #6
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	621a      	str	r2, [r3, #32]
}
 800a476:	bf00      	nop
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	feff8fff 	.word	0xfeff8fff
 800a488:	40010000 	.word	0x40010000
 800a48c:	40010400 	.word	0x40010400

0800a490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <TIM_OC5_SetConfig+0x98>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a12      	ldr	r2, [pc, #72]	; (800a52c <TIM_OC5_SetConfig+0x9c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d003      	beq.n	800a4ee <TIM_OC5_SetConfig+0x5e>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a11      	ldr	r2, [pc, #68]	; (800a530 <TIM_OC5_SetConfig+0xa0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d109      	bne.n	800a502 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	621a      	str	r2, [r3, #32]
}
 800a51c:	bf00      	nop
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	fffeff8f 	.word	0xfffeff8f
 800a52c:	40010000 	.word	0x40010000
 800a530:	40010400 	.word	0x40010400

0800a534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4b1c      	ldr	r3, [pc, #112]	; (800a5d0 <TIM_OC6_SetConfig+0x9c>)
 800a560:	4013      	ands	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	051b      	lsls	r3, r3, #20
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	4313      	orrs	r3, r2
 800a582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a13      	ldr	r2, [pc, #76]	; (800a5d4 <TIM_OC6_SetConfig+0xa0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d003      	beq.n	800a594 <TIM_OC6_SetConfig+0x60>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a12      	ldr	r2, [pc, #72]	; (800a5d8 <TIM_OC6_SetConfig+0xa4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d109      	bne.n	800a5a8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a59a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	029b      	lsls	r3, r3, #10
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	feff8fff 	.word	0xfeff8fff
 800a5d4:	40010000 	.word	0x40010000
 800a5d8:	40010400 	.word	0x40010400

0800a5dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	f023 0201 	bic.w	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4313      	orrs	r3, r2
 800a610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f023 030a 	bic.w	r3, r3, #10
 800a618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b087      	sub	sp, #28
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f023 0210 	bic.w	r2, r3, #16
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	031b      	lsls	r3, r3, #12
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	621a      	str	r2, [r3, #32]
}
 800a68e:	bf00      	nop
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f043 0307 	orr.w	r3, r3, #7
 800a6bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	609a      	str	r2, [r3, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	021a      	lsls	r2, r3, #8
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	609a      	str	r2, [r3, #8]
}
 800a704:	bf00      	nop
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a724:	2302      	movs	r3, #2
 800a726:	e06d      	b.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a30      	ldr	r2, [pc, #192]	; (800a810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d004      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a2f      	ldr	r2, [pc, #188]	; (800a814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d108      	bne.n	800a76e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a20      	ldr	r2, [pc, #128]	; (800a810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d022      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79a:	d01d      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a1d      	ldr	r2, [pc, #116]	; (800a818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d018      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1c      	ldr	r2, [pc, #112]	; (800a81c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d013      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1a      	ldr	r2, [pc, #104]	; (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00e      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a15      	ldr	r2, [pc, #84]	; (800a814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d009      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a16      	ldr	r2, [pc, #88]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d004      	beq.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a15      	ldr	r2, [pc, #84]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d10c      	bne.n	800a7f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	40010000 	.word	0x40010000
 800a814:	40010400 	.word	0x40010400
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00
 800a824:	40014000 	.word	0x40014000
 800a828:	40001800 	.word	0x40001800

0800a82c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a844:	2302      	movs	r3, #2
 800a846:	e065      	b.n	800a914 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	041b      	lsls	r3, r3, #16
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a16      	ldr	r2, [pc, #88]	; (800a920 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d004      	beq.n	800a8d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a14      	ldr	r2, [pc, #80]	; (800a924 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d115      	bne.n	800a902 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	051b      	lsls	r3, r3, #20
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	40010000 	.word	0x40010000
 800a924:	40010400 	.word	0x40010400

0800a928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e040      	b.n	800a9f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f8 fd5e 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2224      	movs	r2, #36	; 0x24
 800a990:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f82c 	bl	800aa00 <UART_SetConfig>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e022      	b.n	800a9f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 faca 	bl	800af54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689a      	ldr	r2, [r3, #8]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0201 	orr.w	r2, r2, #1
 800a9ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fb51 	bl	800b098 <UART_CheckIdleState>
 800a9f6:	4603      	mov	r3, r0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4bb1      	ldr	r3, [pc, #708]	; (800acf4 <UART_SetConfig+0x2f4>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	6939      	ldr	r1, [r7, #16]
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a9f      	ldr	r2, [pc, #636]	; (800acf8 <UART_SetConfig+0x2f8>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d121      	bne.n	800aac4 <UART_SetConfig+0xc4>
 800aa80:	4b9e      	ldr	r3, [pc, #632]	; (800acfc <UART_SetConfig+0x2fc>)
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa86:	f003 0303 	and.w	r3, r3, #3
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d816      	bhi.n	800aabc <UART_SetConfig+0xbc>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <UART_SetConfig+0x94>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aab1 	.word	0x0800aab1
 800aa9c:	0800aaab 	.word	0x0800aaab
 800aaa0:	0800aab7 	.word	0x0800aab7
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	77fb      	strb	r3, [r7, #31]
 800aaa8:	e151      	b.n	800ad4e <UART_SetConfig+0x34e>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	77fb      	strb	r3, [r7, #31]
 800aaae:	e14e      	b.n	800ad4e <UART_SetConfig+0x34e>
 800aab0:	2304      	movs	r3, #4
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	e14b      	b.n	800ad4e <UART_SetConfig+0x34e>
 800aab6:	2308      	movs	r3, #8
 800aab8:	77fb      	strb	r3, [r7, #31]
 800aaba:	e148      	b.n	800ad4e <UART_SetConfig+0x34e>
 800aabc:	2310      	movs	r3, #16
 800aabe:	77fb      	strb	r3, [r7, #31]
 800aac0:	bf00      	nop
 800aac2:	e144      	b.n	800ad4e <UART_SetConfig+0x34e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a8d      	ldr	r2, [pc, #564]	; (800ad00 <UART_SetConfig+0x300>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d134      	bne.n	800ab38 <UART_SetConfig+0x138>
 800aace:	4b8b      	ldr	r3, [pc, #556]	; (800acfc <UART_SetConfig+0x2fc>)
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad4:	f003 030c 	and.w	r3, r3, #12
 800aad8:	2b0c      	cmp	r3, #12
 800aada:	d829      	bhi.n	800ab30 <UART_SetConfig+0x130>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <UART_SetConfig+0xe4>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab19 	.word	0x0800ab19
 800aae8:	0800ab31 	.word	0x0800ab31
 800aaec:	0800ab31 	.word	0x0800ab31
 800aaf0:	0800ab31 	.word	0x0800ab31
 800aaf4:	0800ab25 	.word	0x0800ab25
 800aaf8:	0800ab31 	.word	0x0800ab31
 800aafc:	0800ab31 	.word	0x0800ab31
 800ab00:	0800ab31 	.word	0x0800ab31
 800ab04:	0800ab1f 	.word	0x0800ab1f
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab31 	.word	0x0800ab31
 800ab14:	0800ab2b 	.word	0x0800ab2b
 800ab18:	2300      	movs	r3, #0
 800ab1a:	77fb      	strb	r3, [r7, #31]
 800ab1c:	e117      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab1e:	2302      	movs	r3, #2
 800ab20:	77fb      	strb	r3, [r7, #31]
 800ab22:	e114      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab24:	2304      	movs	r3, #4
 800ab26:	77fb      	strb	r3, [r7, #31]
 800ab28:	e111      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab2a:	2308      	movs	r3, #8
 800ab2c:	77fb      	strb	r3, [r7, #31]
 800ab2e:	e10e      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab30:	2310      	movs	r3, #16
 800ab32:	77fb      	strb	r3, [r7, #31]
 800ab34:	bf00      	nop
 800ab36:	e10a      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a71      	ldr	r2, [pc, #452]	; (800ad04 <UART_SetConfig+0x304>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d120      	bne.n	800ab84 <UART_SetConfig+0x184>
 800ab42:	4b6e      	ldr	r3, [pc, #440]	; (800acfc <UART_SetConfig+0x2fc>)
 800ab44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab4c:	2b10      	cmp	r3, #16
 800ab4e:	d00f      	beq.n	800ab70 <UART_SetConfig+0x170>
 800ab50:	2b10      	cmp	r3, #16
 800ab52:	d802      	bhi.n	800ab5a <UART_SetConfig+0x15a>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <UART_SetConfig+0x164>
 800ab58:	e010      	b.n	800ab7c <UART_SetConfig+0x17c>
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d005      	beq.n	800ab6a <UART_SetConfig+0x16a>
 800ab5e:	2b30      	cmp	r3, #48	; 0x30
 800ab60:	d009      	beq.n	800ab76 <UART_SetConfig+0x176>
 800ab62:	e00b      	b.n	800ab7c <UART_SetConfig+0x17c>
 800ab64:	2300      	movs	r3, #0
 800ab66:	77fb      	strb	r3, [r7, #31]
 800ab68:	e0f1      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	77fb      	strb	r3, [r7, #31]
 800ab6e:	e0ee      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab70:	2304      	movs	r3, #4
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	e0eb      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab76:	2308      	movs	r3, #8
 800ab78:	77fb      	strb	r3, [r7, #31]
 800ab7a:	e0e8      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	77fb      	strb	r3, [r7, #31]
 800ab80:	bf00      	nop
 800ab82:	e0e4      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a5f      	ldr	r2, [pc, #380]	; (800ad08 <UART_SetConfig+0x308>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d120      	bne.n	800abd0 <UART_SetConfig+0x1d0>
 800ab8e:	4b5b      	ldr	r3, [pc, #364]	; (800acfc <UART_SetConfig+0x2fc>)
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	d00f      	beq.n	800abbc <UART_SetConfig+0x1bc>
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	d802      	bhi.n	800aba6 <UART_SetConfig+0x1a6>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <UART_SetConfig+0x1b0>
 800aba4:	e010      	b.n	800abc8 <UART_SetConfig+0x1c8>
 800aba6:	2b80      	cmp	r3, #128	; 0x80
 800aba8:	d005      	beq.n	800abb6 <UART_SetConfig+0x1b6>
 800abaa:	2bc0      	cmp	r3, #192	; 0xc0
 800abac:	d009      	beq.n	800abc2 <UART_SetConfig+0x1c2>
 800abae:	e00b      	b.n	800abc8 <UART_SetConfig+0x1c8>
 800abb0:	2300      	movs	r3, #0
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e0cb      	b.n	800ad4e <UART_SetConfig+0x34e>
 800abb6:	2302      	movs	r3, #2
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e0c8      	b.n	800ad4e <UART_SetConfig+0x34e>
 800abbc:	2304      	movs	r3, #4
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e0c5      	b.n	800ad4e <UART_SetConfig+0x34e>
 800abc2:	2308      	movs	r3, #8
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e0c2      	b.n	800ad4e <UART_SetConfig+0x34e>
 800abc8:	2310      	movs	r3, #16
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	bf00      	nop
 800abce:	e0be      	b.n	800ad4e <UART_SetConfig+0x34e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a4d      	ldr	r2, [pc, #308]	; (800ad0c <UART_SetConfig+0x30c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d124      	bne.n	800ac24 <UART_SetConfig+0x224>
 800abda:	4b48      	ldr	r3, [pc, #288]	; (800acfc <UART_SetConfig+0x2fc>)
 800abdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe8:	d012      	beq.n	800ac10 <UART_SetConfig+0x210>
 800abea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abee:	d802      	bhi.n	800abf6 <UART_SetConfig+0x1f6>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <UART_SetConfig+0x204>
 800abf4:	e012      	b.n	800ac1c <UART_SetConfig+0x21c>
 800abf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abfa:	d006      	beq.n	800ac0a <UART_SetConfig+0x20a>
 800abfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac00:	d009      	beq.n	800ac16 <UART_SetConfig+0x216>
 800ac02:	e00b      	b.n	800ac1c <UART_SetConfig+0x21c>
 800ac04:	2300      	movs	r3, #0
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e0a1      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	77fb      	strb	r3, [r7, #31]
 800ac0e:	e09e      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac10:	2304      	movs	r3, #4
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	e09b      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac16:	2308      	movs	r3, #8
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e098      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	bf00      	nop
 800ac22:	e094      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a39      	ldr	r2, [pc, #228]	; (800ad10 <UART_SetConfig+0x310>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d124      	bne.n	800ac78 <UART_SetConfig+0x278>
 800ac2e:	4b33      	ldr	r3, [pc, #204]	; (800acfc <UART_SetConfig+0x2fc>)
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac3c:	d012      	beq.n	800ac64 <UART_SetConfig+0x264>
 800ac3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac42:	d802      	bhi.n	800ac4a <UART_SetConfig+0x24a>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <UART_SetConfig+0x258>
 800ac48:	e012      	b.n	800ac70 <UART_SetConfig+0x270>
 800ac4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac4e:	d006      	beq.n	800ac5e <UART_SetConfig+0x25e>
 800ac50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac54:	d009      	beq.n	800ac6a <UART_SetConfig+0x26a>
 800ac56:	e00b      	b.n	800ac70 <UART_SetConfig+0x270>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e077      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e074      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac64:	2304      	movs	r3, #4
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e071      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e06e      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac70:	2310      	movs	r3, #16
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	bf00      	nop
 800ac76:	e06a      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a25      	ldr	r2, [pc, #148]	; (800ad14 <UART_SetConfig+0x314>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d124      	bne.n	800accc <UART_SetConfig+0x2cc>
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <UART_SetConfig+0x2fc>)
 800ac84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac90:	d012      	beq.n	800acb8 <UART_SetConfig+0x2b8>
 800ac92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac96:	d802      	bhi.n	800ac9e <UART_SetConfig+0x29e>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d007      	beq.n	800acac <UART_SetConfig+0x2ac>
 800ac9c:	e012      	b.n	800acc4 <UART_SetConfig+0x2c4>
 800ac9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca2:	d006      	beq.n	800acb2 <UART_SetConfig+0x2b2>
 800aca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aca8:	d009      	beq.n	800acbe <UART_SetConfig+0x2be>
 800acaa:	e00b      	b.n	800acc4 <UART_SetConfig+0x2c4>
 800acac:	2300      	movs	r3, #0
 800acae:	77fb      	strb	r3, [r7, #31]
 800acb0:	e04d      	b.n	800ad4e <UART_SetConfig+0x34e>
 800acb2:	2302      	movs	r3, #2
 800acb4:	77fb      	strb	r3, [r7, #31]
 800acb6:	e04a      	b.n	800ad4e <UART_SetConfig+0x34e>
 800acb8:	2304      	movs	r3, #4
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e047      	b.n	800ad4e <UART_SetConfig+0x34e>
 800acbe:	2308      	movs	r3, #8
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e044      	b.n	800ad4e <UART_SetConfig+0x34e>
 800acc4:	2310      	movs	r3, #16
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	bf00      	nop
 800acca:	e040      	b.n	800ad4e <UART_SetConfig+0x34e>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a11      	ldr	r2, [pc, #68]	; (800ad18 <UART_SetConfig+0x318>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d139      	bne.n	800ad4a <UART_SetConfig+0x34a>
 800acd6:	4b09      	ldr	r3, [pc, #36]	; (800acfc <UART_SetConfig+0x2fc>)
 800acd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ace0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ace4:	d027      	beq.n	800ad36 <UART_SetConfig+0x336>
 800ace6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acea:	d817      	bhi.n	800ad1c <UART_SetConfig+0x31c>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01c      	beq.n	800ad2a <UART_SetConfig+0x32a>
 800acf0:	e027      	b.n	800ad42 <UART_SetConfig+0x342>
 800acf2:	bf00      	nop
 800acf4:	efff69f3 	.word	0xefff69f3
 800acf8:	40011000 	.word	0x40011000
 800acfc:	40023800 	.word	0x40023800
 800ad00:	40004400 	.word	0x40004400
 800ad04:	40004800 	.word	0x40004800
 800ad08:	40004c00 	.word	0x40004c00
 800ad0c:	40005000 	.word	0x40005000
 800ad10:	40011400 	.word	0x40011400
 800ad14:	40007800 	.word	0x40007800
 800ad18:	40007c00 	.word	0x40007c00
 800ad1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad20:	d006      	beq.n	800ad30 <UART_SetConfig+0x330>
 800ad22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad26:	d009      	beq.n	800ad3c <UART_SetConfig+0x33c>
 800ad28:	e00b      	b.n	800ad42 <UART_SetConfig+0x342>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	77fb      	strb	r3, [r7, #31]
 800ad2e:	e00e      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ad30:	2302      	movs	r3, #2
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e00b      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ad36:	2304      	movs	r3, #4
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	e008      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ad3c:	2308      	movs	r3, #8
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	e005      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ad42:	2310      	movs	r3, #16
 800ad44:	77fb      	strb	r3, [r7, #31]
 800ad46:	bf00      	nop
 800ad48:	e001      	b.n	800ad4e <UART_SetConfig+0x34e>
 800ad4a:	2310      	movs	r3, #16
 800ad4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad56:	d17f      	bne.n	800ae58 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ad58:	7ffb      	ldrb	r3, [r7, #31]
 800ad5a:	2b08      	cmp	r3, #8
 800ad5c:	d85c      	bhi.n	800ae18 <UART_SetConfig+0x418>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <UART_SetConfig+0x364>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ada9 	.word	0x0800ada9
 800ad6c:	0800adc9 	.word	0x0800adc9
 800ad70:	0800ae19 	.word	0x0800ae19
 800ad74:	0800ade1 	.word	0x0800ade1
 800ad78:	0800ae19 	.word	0x0800ae19
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800ae19 	.word	0x0800ae19
 800ad84:	0800ae01 	.word	0x0800ae01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad88:	f7fc f8d0 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 800ad8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	005a      	lsls	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	441a      	add	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	61bb      	str	r3, [r7, #24]
        break;
 800ada6:	e03a      	b.n	800ae1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada8:	f7fc f8d4 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 800adac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	005a      	lsls	r2, r3, #1
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	085b      	lsrs	r3, r3, #1
 800adb8:	441a      	add	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	61bb      	str	r3, [r7, #24]
        break;
 800adc6:	e02a      	b.n	800ae1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	085a      	lsrs	r2, r3, #1
 800adce:	4b5f      	ldr	r3, [pc, #380]	; (800af4c <UART_SetConfig+0x54c>)
 800add0:	4413      	add	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	6852      	ldr	r2, [r2, #4]
 800add6:	fbb3 f3f2 	udiv	r3, r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	61bb      	str	r3, [r7, #24]
        break;
 800adde:	e01e      	b.n	800ae1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ade0:	f7fb ffe6 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 800ade4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	005a      	lsls	r2, r3, #1
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	085b      	lsrs	r3, r3, #1
 800adf0:	441a      	add	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	61bb      	str	r3, [r7, #24]
        break;
 800adfe:	e00e      	b.n	800ae1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	61bb      	str	r3, [r7, #24]
        break;
 800ae16:	e002      	b.n	800ae1e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75fb      	strb	r3, [r7, #23]
        break;
 800ae1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d916      	bls.n	800ae52 <UART_SetConfig+0x452>
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae2a:	d212      	bcs.n	800ae52 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f023 030f 	bic.w	r3, r3, #15
 800ae34:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	897b      	ldrh	r3, [r7, #10]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	897a      	ldrh	r2, [r7, #10]
 800ae4e:	60da      	str	r2, [r3, #12]
 800ae50:	e070      	b.n	800af34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	75fb      	strb	r3, [r7, #23]
 800ae56:	e06d      	b.n	800af34 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ae58:	7ffb      	ldrb	r3, [r7, #31]
 800ae5a:	2b08      	cmp	r3, #8
 800ae5c:	d859      	bhi.n	800af12 <UART_SetConfig+0x512>
 800ae5e:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <UART_SetConfig+0x464>)
 800ae60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae64:	0800ae89 	.word	0x0800ae89
 800ae68:	0800aea7 	.word	0x0800aea7
 800ae6c:	0800aec5 	.word	0x0800aec5
 800ae70:	0800af13 	.word	0x0800af13
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800af13 	.word	0x0800af13
 800ae7c:	0800af13 	.word	0x0800af13
 800ae80:	0800af13 	.word	0x0800af13
 800ae84:	0800aefb 	.word	0x0800aefb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae88:	f7fc f850 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 800ae8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	085a      	lsrs	r2, r3, #1
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	61bb      	str	r3, [r7, #24]
        break;
 800aea4:	e038      	b.n	800af18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aea6:	f7fc f855 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 800aeaa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	085a      	lsrs	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	61bb      	str	r3, [r7, #24]
        break;
 800aec2:	e029      	b.n	800af18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	085a      	lsrs	r2, r3, #1
 800aeca:	4b21      	ldr	r3, [pc, #132]	; (800af50 <UART_SetConfig+0x550>)
 800aecc:	4413      	add	r3, r2
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6852      	ldr	r2, [r2, #4]
 800aed2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	61bb      	str	r3, [r7, #24]
        break;
 800aeda:	e01d      	b.n	800af18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aedc:	f7fb ff68 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 800aee0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	085a      	lsrs	r2, r3, #1
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	441a      	add	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	61bb      	str	r3, [r7, #24]
        break;
 800aef8:	e00e      	b.n	800af18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	61bb      	str	r3, [r7, #24]
        break;
 800af10:	e002      	b.n	800af18 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
        break;
 800af16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b0f      	cmp	r3, #15
 800af1c:	d908      	bls.n	800af30 <UART_SetConfig+0x530>
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af24:	d204      	bcs.n	800af30 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	60da      	str	r2, [r3, #12]
 800af2e:	e001      	b.n	800af34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	01e84800 	.word	0x01e84800
 800af50:	00f42400 	.word	0x00f42400

0800af54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00a      	beq.n	800af7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	f003 0310 	and.w	r3, r3, #16
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01a      	beq.n	800b06a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b052:	d10a      	bne.n	800b06a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	605a      	str	r2, [r3, #4]
  }
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b0a6:	f7f8 fd1d 	bl	8003ae4 <HAL_GetTick>
 800b0aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d10e      	bne.n	800b0d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f814 	bl	800b0f6 <UART_WaitOnFlagUntilTimeout>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e00a      	b.n	800b0ee <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	4613      	mov	r3, r2
 800b104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b106:	e05d      	b.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10e:	d059      	beq.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b110:	f7f8 fce8 	bl	8003ae4 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <UART_WaitOnFlagUntilTimeout+0x30>
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d11b      	bne.n	800b15e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b134:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f022 0201 	bic.w	r2, r2, #1
 800b144:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2220      	movs	r2, #32
 800b14a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2220      	movs	r2, #32
 800b150:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e042      	b.n	800b1e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d02b      	beq.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b17a:	d123      	bne.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b184:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b194:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0201 	bic.w	r2, r2, #1
 800b1a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e00f      	b.n	800b1e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	69da      	ldr	r2, [r3, #28]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bf0c      	ite	eq
 800b1d4:	2301      	moveq	r3, #1
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	461a      	mov	r2, r3
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d092      	beq.n	800b108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d027      	beq.n	800b256 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4b2f      	ldr	r3, [pc, #188]	; (800b2cc <FMC_SDRAM_Init+0xe0>)
 800b210:	4013      	ands	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b21c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b222:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b228:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b22e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b234:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b23a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b240:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b246:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e032      	b.n	800b2bc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b262:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b26c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b272:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <FMC_SDRAM_Init+0xe0>)
 800b284:	4013      	ands	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b290:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b296:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b29c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b2a2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b2a8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	ffff8000 	.word	0xffff8000

0800b2d0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d02e      	beq.n	800b348 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2f6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	3b01      	subs	r3, #1
 800b304:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b306:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b310:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	3b01      	subs	r3, #1
 800b318:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b31a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	3b01      	subs	r3, #1
 800b322:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b324:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b32e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	3b01      	subs	r3, #1
 800b336:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b338:	4313      	orrs	r3, r2
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	609a      	str	r2, [r3, #8]
 800b346:	e039      	b.n	800b3bc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4b1e      	ldr	r3, [pc, #120]	; (800b3cc <FMC_SDRAM_Timing_Init+0xfc>)
 800b352:	4013      	ands	r3, r2
 800b354:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	3b01      	subs	r3, #1
 800b364:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b366:	4313      	orrs	r3, r2
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b37a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	3b01      	subs	r3, #1
 800b388:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b38a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b394:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b39e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	ff0f0fff 	.word	0xff0f0fff

0800b3d0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3e8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b3f2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695a      	ldr	r2, [r3, #20]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b438:	b084      	sub	sp, #16
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	f107 001c 	add.w	r0, r7, #28
 800b446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b44e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b450:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b452:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b456:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b458:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b45a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b45e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b462:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	4b07      	ldr	r3, [pc, #28]	; (800b48c <SDMMC_Init+0x54>)
 800b470:	4013      	ands	r3, r2
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	431a      	orrs	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	b004      	add	sp, #16
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	ffff8100 	.word	0xffff8100

0800b490 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b4b8:	2002      	movs	r0, #2
 800b4ba:	f7f8 fb1f 	bl	8003afc <HAL_Delay>
  
  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0303 	and.w	r3, r3, #3
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b502:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b508:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b50e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4313      	orrs	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	4b06      	ldr	r3, [pc, #24]	; (800b534 <SDMMC_SendCommand+0x50>)
 800b51c:	4013      	ands	r3, r2
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	fffff000 	.word	0xfffff000

0800b538 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	b2db      	uxtb	r3, r3
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b552:	b480      	push	{r7}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3314      	adds	r3, #20
 800b560:	461a      	mov	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	4413      	add	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
}  
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b59e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b5a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b5aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0

}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5de:	2310      	movs	r3, #16
 800b5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e2:	2340      	movs	r3, #64	; 0x40
 800b5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f0:	f107 0308 	add.w	r3, r7, #8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff ff74 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b600:	2110      	movs	r1, #16
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa42 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60a:	69fb      	ldr	r3, [r7, #28]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b622:	2311      	movs	r3, #17
 800b624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b626:	2340      	movs	r3, #64	; 0x40
 800b628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b62a:	2300      	movs	r3, #0
 800b62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b634:	f107 0308 	add.w	r3, r7, #8
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff ff52 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b640:	f241 3288 	movw	r2, #5000	; 0x1388
 800b644:	2111      	movs	r1, #17
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa20 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64e:	69fb      	ldr	r3, [r7, #28]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b666:	2312      	movs	r3, #18
 800b668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66a:	2340      	movs	r3, #64	; 0x40
 800b66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff ff30 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	2112      	movs	r1, #18
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f9fe 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b692:	69fb      	ldr	r3, [r7, #28]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6aa:	2318      	movs	r3, #24
 800b6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ae:	2340      	movs	r3, #64	; 0x40
 800b6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6bc:	f107 0308 	add.w	r3, r7, #8
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff ff0e 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6cc:	2118      	movs	r1, #24
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f9dc 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6ee:	2319      	movs	r3, #25
 800b6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f2:	2340      	movs	r3, #64	; 0x40
 800b6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff feec 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b710:	2119      	movs	r1, #25
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9ba 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b71a:	69fb      	ldr	r3, [r7, #28]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b730:	230c      	movs	r3, #12
 800b732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b734:	2340      	movs	r3, #64	; 0x40
 800b736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fecb 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b74e:	4a05      	ldr	r2, [pc, #20]	; (800b764 <SDMMC_CmdStopTransfer+0x40>)
 800b750:	210c      	movs	r1, #12
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f99a 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75a:	69fb      	ldr	r3, [r7, #28]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3720      	adds	r7, #32
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	05f5e100 	.word	0x05f5e100

0800b768 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	; 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b778:	2307      	movs	r3, #7
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b788:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b78a:	f107 0310 	add.w	r3, r7, #16
 800b78e:	4619      	mov	r1, r3
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff fea7 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b796:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79a:	2107      	movs	r1, #7
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f975 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b7a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b088      	sub	sp, #32
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fe86 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f92f 	bl	800ba3c <SDMMC_GetCmdError>
 800b7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b088      	sub	sp, #32
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff fe67 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fb18 	bl	800be4c <SDMMC_GetCmdResp7>
 800b81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b81e:	69fb      	ldr	r3, [r7, #28]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b836:	2337      	movs	r3, #55	; 0x37
 800b838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b83a:	2340      	movs	r3, #64	; 0x40
 800b83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b848:	f107 0308 	add.w	r3, r7, #8
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fe48 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b854:	f241 3288 	movw	r2, #5000	; 0x1388
 800b858:	2137      	movs	r1, #55	; 0x37
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f916 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b862:	69fb      	ldr	r3, [r7, #28]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <SDMMC_CmdAppOperCommand+0x44>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b87e:	2329      	movs	r3, #41	; 0x29
 800b880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b882:	2340      	movs	r3, #64	; 0x40
 800b884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b890:	f107 0308 	add.w	r3, r7, #8
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fe24 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fa27 	bl	800bcf0 <SDMMC_GetCmdResp3>
 800b8a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	80100000 	.word	0x80100000

0800b8b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8c2:	2306      	movs	r3, #6
 800b8c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8c6:	2340      	movs	r3, #64	; 0x40
 800b8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d4:	f107 0308 	add.w	r3, r7, #8
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fe02 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e4:	2106      	movs	r1, #6
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f8d0 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ee:	69fb      	ldr	r3, [r7, #28]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3720      	adds	r7, #32
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b900:	2300      	movs	r3, #0
 800b902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b904:	2333      	movs	r3, #51	; 0x33
 800b906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b908:	2340      	movs	r3, #64	; 0x40
 800b90a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b90c:	2300      	movs	r3, #0
 800b90e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b916:	f107 0308 	add.w	r3, r7, #8
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff fde1 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b922:	f241 3288 	movw	r2, #5000	; 0x1388
 800b926:	2133      	movs	r1, #51	; 0x33
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f8af 	bl	800ba8c <SDMMC_GetCmdResp1>
 800b92e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b930:	69fb      	ldr	r3, [r7, #28]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3720      	adds	r7, #32
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b088      	sub	sp, #32
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b946:	2302      	movs	r3, #2
 800b948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b94a:	23c0      	movs	r3, #192	; 0xc0
 800b94c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b958:	f107 0308 	add.w	r3, r7, #8
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fdc0 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f97d 	bl	800bc64 <SDMMC_GetCmdResp2>
 800b96a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96c:	69fb      	ldr	r3, [r7, #28]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b088      	sub	sp, #32
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b984:	2309      	movs	r3, #9
 800b986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b988:	23c0      	movs	r3, #192	; 0xc0
 800b98a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b996:	f107 0308 	add.w	r3, r7, #8
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff fda1 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f95e 	bl	800bc64 <SDMMC_GetCmdResp2>
 800b9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff fd82 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	2103      	movs	r1, #3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f9bd 	bl	800bd64 <SDMMC_GetCmdResp6>
 800b9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ec:	69fb      	ldr	r3, [r7, #28]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3720      	adds	r7, #32
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b088      	sub	sp, #32
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba04:	230d      	movs	r3, #13
 800ba06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba08:	2340      	movs	r3, #64	; 0x40
 800ba0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba16:	f107 0308 	add.w	r3, r7, #8
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fd61 	bl	800b4e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba26:	210d      	movs	r1, #13
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f82f 	bl	800ba8c <SDMMC_GetCmdResp1>
 800ba2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba30:	69fb      	ldr	r3, [r7, #28]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba3c:	b490      	push	{r4, r7}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba44:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <SDMMC_GetCmdError+0x48>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a0f      	ldr	r2, [pc, #60]	; (800ba88 <SDMMC_GetCmdError+0x4c>)
 800ba4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba4e:	0a5b      	lsrs	r3, r3, #9
 800ba50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba58:	4623      	mov	r3, r4
 800ba5a:	1e5c      	subs	r4, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba64:	e009      	b.n	800ba7a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0f2      	beq.n	800ba58 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	22c5      	movs	r2, #197	; 0xc5
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc90      	pop	{r4, r7}
 800ba82:	4770      	bx	lr
 800ba84:	20000018 	.word	0x20000018
 800ba88:	10624dd3 	.word	0x10624dd3

0800ba8c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	460b      	mov	r3, r1
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba9a:	4b6f      	ldr	r3, [pc, #444]	; (800bc58 <SDMMC_GetCmdResp1+0x1cc>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a6f      	ldr	r2, [pc, #444]	; (800bc5c <SDMMC_GetCmdResp1+0x1d0>)
 800baa0:	fba2 2303 	umull	r2, r3, r2, r3
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800baac:	4623      	mov	r3, r4
 800baae:	1e5c      	subs	r4, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bab8:	e0c9      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0f0      	beq.n	800baac <SDMMC_GetCmdResp1+0x20>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1eb      	bne.n	800baac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2204      	movs	r2, #4
 800bae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bae6:	2304      	movs	r3, #4
 800bae8:	e0b1      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d004      	beq.n	800bb00 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e0a6      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	22c5      	movs	r2, #197	; 0xc5
 800bb04:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff fd16 	bl	800b538 <SDMMC_GetCommandResponse>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	461a      	mov	r2, r3
 800bb10:	7afb      	ldrb	r3, [r7, #11]
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d001      	beq.n	800bb1a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e099      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7ff fd18 	bl	800b552 <SDMMC_GetResponse>
 800bb22:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	4b4e      	ldr	r3, [pc, #312]	; (800bc60 <SDMMC_GetCmdResp1+0x1d4>)
 800bb28:	4013      	ands	r3, r2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e08d      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	da02      	bge.n	800bb3e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb3c:	e087      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb48:	2340      	movs	r3, #64	; 0x40
 800bb4a:	e080      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb56:	2380      	movs	r3, #128	; 0x80
 800bb58:	e079      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb68:	e071      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb78:	e069      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb88:	e061      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb98:	e059      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bba8:	e051      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbb8:	e049      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbc8:	e041      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd8:	e039      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbe8:	e031      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbf8:	e029      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc08:	e021      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc18:	e019      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc28:	e011      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc38:	e009      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	f003 0308 	and.w	r3, r3, #8
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc48:	e001      	b.n	800bc4e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	371c      	adds	r7, #28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd90      	pop	{r4, r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20000018 	.word	0x20000018
 800bc5c:	10624dd3 	.word	0x10624dd3
 800bc60:	fdffe008 	.word	0xfdffe008

0800bc64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc64:	b490      	push	{r4, r7}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <SDMMC_GetCmdResp2+0x84>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a1e      	ldr	r2, [pc, #120]	; (800bcec <SDMMC_GetCmdResp2+0x88>)
 800bc72:	fba2 2303 	umull	r2, r3, r2, r3
 800bc76:	0a5b      	lsrs	r3, r3, #9
 800bc78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc80:	4623      	mov	r3, r4
 800bc82:	1e5c      	subs	r4, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc8c:	e026      	b.n	800bcdc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0f0      	beq.n	800bc80 <SDMMC_GetCmdResp2+0x1c>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1eb      	bne.n	800bc80 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2204      	movs	r2, #4
 800bcb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcba:	2304      	movs	r3, #4
 800bcbc:	e00e      	b.n	800bcdc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d004      	beq.n	800bcd4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e003      	b.n	800bcdc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	22c5      	movs	r2, #197	; 0xc5
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bc90      	pop	{r4, r7}
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20000018 	.word	0x20000018
 800bcec:	10624dd3 	.word	0x10624dd3

0800bcf0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcf0:	b490      	push	{r4, r7}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcf8:	4b18      	ldr	r3, [pc, #96]	; (800bd5c <SDMMC_GetCmdResp3+0x6c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a18      	ldr	r2, [pc, #96]	; (800bd60 <SDMMC_GetCmdResp3+0x70>)
 800bcfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bd02:	0a5b      	lsrs	r3, r3, #9
 800bd04:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd0c:	4623      	mov	r3, r4
 800bd0e:	1e5c      	subs	r4, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd18:	e01b      	b.n	800bd52 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0f0      	beq.n	800bd0c <SDMMC_GetCmdResp3+0x1c>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1eb      	bne.n	800bd0c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd38:	f003 0304 	and.w	r3, r3, #4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2204      	movs	r2, #4
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd46:	2304      	movs	r3, #4
 800bd48:	e003      	b.n	800bd52 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	22c5      	movs	r2, #197	; 0xc5
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bc90      	pop	{r4, r7}
 800bd5a:	4770      	bx	lr
 800bd5c:	20000018 	.word	0x20000018
 800bd60:	10624dd3 	.word	0x10624dd3

0800bd64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd72:	4b34      	ldr	r3, [pc, #208]	; (800be44 <SDMMC_GetCmdResp6+0xe0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a34      	ldr	r2, [pc, #208]	; (800be48 <SDMMC_GetCmdResp6+0xe4>)
 800bd78:	fba2 2303 	umull	r2, r3, r2, r3
 800bd7c:	0a5b      	lsrs	r3, r3, #9
 800bd7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd82:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd86:	4623      	mov	r3, r4
 800bd88:	1e5c      	subs	r4, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd92:	e052      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd98:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0f0      	beq.n	800bd86 <SDMMC_GetCmdResp6+0x22>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1eb      	bne.n	800bd86 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d004      	beq.n	800bdc4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdc0:	2304      	movs	r3, #4
 800bdc2:	e03a      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d004      	beq.n	800bdda <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e02f      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff fbac 	bl	800b538 <SDMMC_GetCommandResponse>
 800bde0:	4603      	mov	r3, r0
 800bde2:	461a      	mov	r2, r3
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d001      	beq.n	800bdee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e025      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	22c5      	movs	r2, #197	; 0xc5
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff fbab 	bl	800b552 <SDMMC_GetResponse>
 800bdfc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	0c1b      	lsrs	r3, r3, #16
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800be12:	2300      	movs	r3, #0
 800be14:	e011      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be24:	e009      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be34:	e001      	b.n	800be3a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd90      	pop	{r4, r7, pc}
 800be42:	bf00      	nop
 800be44:	20000018 	.word	0x20000018
 800be48:	10624dd3 	.word	0x10624dd3

0800be4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be4c:	b490      	push	{r4, r7}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be54:	4b21      	ldr	r3, [pc, #132]	; (800bedc <SDMMC_GetCmdResp7+0x90>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a21      	ldr	r2, [pc, #132]	; (800bee0 <SDMMC_GetCmdResp7+0x94>)
 800be5a:	fba2 2303 	umull	r2, r3, r2, r3
 800be5e:	0a5b      	lsrs	r3, r3, #9
 800be60:	f241 3288 	movw	r2, #5000	; 0x1388
 800be64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be68:	4623      	mov	r3, r4
 800be6a:	1e5c      	subs	r4, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be74:	e02c      	b.n	800bed0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0f0      	beq.n	800be68 <SDMMC_GetCmdResp7+0x1c>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1eb      	bne.n	800be68 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2204      	movs	r2, #4
 800bea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bea2:	2304      	movs	r3, #4
 800bea4:	e014      	b.n	800bed0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d004      	beq.n	800bebc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beb8:	2301      	movs	r3, #1
 800beba:	e009      	b.n	800bed0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2240      	movs	r2, #64	; 0x40
 800becc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bece:	2300      	movs	r3, #0
  
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bc90      	pop	{r4, r7}
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	20000018 	.word	0x20000018
 800bee0:	10624dd3 	.word	0x10624dd3

0800bee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bee8:	4904      	ldr	r1, [pc, #16]	; (800befc <MX_FATFS_Init+0x18>)
 800beea:	4805      	ldr	r0, [pc, #20]	; (800bf00 <MX_FATFS_Init+0x1c>)
 800beec:	f000 fa96 	bl	800c41c <FATFS_LinkDriver>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	4b03      	ldr	r3, [pc, #12]	; (800bf04 <MX_FATFS_Init+0x20>)
 800bef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bef8:	bf00      	nop
 800befa:	bd80      	pop	{r7, pc}
 800befc:	2000c5ec 	.word	0x2000c5ec
 800bf00:	08026f9c 	.word	0x08026f9c
 800bf04:	2000c5e8 	.word	0x2000c5e8

0800bf08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf12:	f000 f87b 	bl	800c00c <BSP_SD_IsDetected>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d001      	beq.n	800bf20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e012      	b.n	800bf46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bf20:	480b      	ldr	r0, [pc, #44]	; (800bf50 <BSP_SD_Init+0x48>)
 800bf22:	f7fc fae9 	bl	80084f8 <HAL_SD_Init>
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bf30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bf34:	4806      	ldr	r0, [pc, #24]	; (800bf50 <BSP_SD_Init+0x48>)
 800bf36:	f7fc ff2b 	bl	8008d90 <HAL_SD_ConfigWideBusOperation>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bf44:	79fb      	ldrb	r3, [r7, #7]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	2000c074 	.word	0x2000c074

0800bf54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	68f9      	ldr	r1, [r7, #12]
 800bf6a:	4806      	ldr	r0, [pc, #24]	; (800bf84 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bf6c:	f7fc fb5c 	bl	8008628 <HAL_SD_ReadBlocks_DMA>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	2000c074 	.word	0x2000c074

0800bf88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	68f9      	ldr	r1, [r7, #12]
 800bf9e:	4806      	ldr	r0, [pc, #24]	; (800bfb8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bfa0:	f7fc fc2e 	bl	8008800 <HAL_SD_WriteBlocks_DMA>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	2000c074 	.word	0x2000c074

0800bfbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bfc0:	4805      	ldr	r0, [pc, #20]	; (800bfd8 <BSP_SD_GetCardState+0x1c>)
 800bfc2:	f7fc ff61 	bl	8008e88 <HAL_SD_GetCardState>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	bf14      	ite	ne
 800bfcc:	2301      	movne	r3, #1
 800bfce:	2300      	moveq	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000c074 	.word	0x2000c074

0800bfdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	4803      	ldr	r0, [pc, #12]	; (800bff4 <BSP_SD_GetCardInfo+0x18>)
 800bfe8:	f7fc fea6 	bl	8008d38 <HAL_SD_GetCardInfo>
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	2000c074 	.word	0x2000c074

0800bff8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c000:	f000 f9b2 	bl	800c368 <BSP_SD_ReadCpltCallback>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c012:	2301      	movs	r3, #1
 800c014:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c016:	f000 f80b 	bl	800c030 <BSP_PlatformIsDetected>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c020:	2300      	movs	r3, #0
 800c022:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	b2db      	uxtb	r3, r3
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c036:	2301      	movs	r3, #1
 800c038:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c03a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c03e:	4806      	ldr	r0, [pc, #24]	; (800c058 <BSP_PlatformIsDetected+0x28>)
 800c040:	f7f9 fe3a 	bl	8005cb8 <HAL_GPIO_ReadPin>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c04a:	2300      	movs	r3, #0
 800c04c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c04e:	79fb      	ldrb	r3, [r7, #7]
}  
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	40020800 	.word	0x40020800

0800c05c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c064:	f000 fa26 	bl	800c4b4 <osKernelSysTick>
 800c068:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c06a:	e006      	b.n	800c07a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c06c:	f7ff ffa6 	bl	800bfbc <BSP_SD_GetCardState>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c076:	2300      	movs	r3, #0
 800c078:	e009      	b.n	800c08e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c07a:	f000 fa1b 	bl	800c4b4 <osKernelSysTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	429a      	cmp	r2, r3
 800c088:	d8f0      	bhi.n	800c06c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c08a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c0a2:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <SD_CheckStatus+0x38>)
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0a8:	f7ff ff88 	bl	800bfbc <BSP_SD_GetCardState>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d107      	bne.n	800c0c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <SD_CheckStatus+0x38>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f023 0301 	bic.w	r3, r3, #1
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	4b04      	ldr	r3, [pc, #16]	; (800c0d0 <SD_CheckStatus+0x38>)
 800c0c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c0c2:	4b03      	ldr	r3, [pc, #12]	; (800c0d0 <SD_CheckStatus+0x38>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b2db      	uxtb	r3, r3
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	20000021 	.word	0x20000021

0800c0d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0d4:	b590      	push	{r4, r7, lr}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c0de:	4b20      	ldr	r3, [pc, #128]	; (800c160 <SD_initialize+0x8c>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c0e4:	f000 f9da 	bl	800c49c <osKernelRunning>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d030      	beq.n	800c150 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c0ee:	f7ff ff0b 	bl	800bf08 <BSP_SD_Init>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d107      	bne.n	800c108 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff ffcc 	bl	800c098 <SD_CheckStatus>
 800c100:	4603      	mov	r3, r0
 800c102:	461a      	mov	r2, r3
 800c104:	4b16      	ldr	r3, [pc, #88]	; (800c160 <SD_initialize+0x8c>)
 800c106:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c108:	4b15      	ldr	r3, [pc, #84]	; (800c160 <SD_initialize+0x8c>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d01e      	beq.n	800c150 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c112:	4b14      	ldr	r3, [pc, #80]	; (800c164 <SD_initialize+0x90>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10e      	bne.n	800c138 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <SD_initialize+0x94>)
 800c11c:	f107 0408 	add.w	r4, r7, #8
 800c120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c126:	f107 0308 	add.w	r3, r7, #8
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 fa31 	bl	800c594 <osMessageCreate>
 800c132:	4602      	mov	r2, r0
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <SD_initialize+0x90>)
 800c136:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <SD_initialize+0x90>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d107      	bne.n	800c150 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <SD_initialize+0x8c>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	b2db      	uxtb	r3, r3
 800c146:	f043 0301 	orr.w	r3, r3, #1
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	4b04      	ldr	r3, [pc, #16]	; (800c160 <SD_initialize+0x8c>)
 800c14e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c150:	4b03      	ldr	r3, [pc, #12]	; (800c160 <SD_initialize+0x8c>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	b2db      	uxtb	r3, r3
}
 800c156:	4618      	mov	r0, r3
 800c158:	371c      	adds	r7, #28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd90      	pop	{r4, r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000021 	.word	0x20000021
 800c164:	200003c0 	.word	0x200003c0
 800c168:	08026884 	.word	0x08026884

0800c16c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff ff8d 	bl	800c098 <SD_CheckStatus>
 800c17e:	4603      	mov	r3, r0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c19e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c1a2:	f7ff ff5b 	bl	800c05c <SD_CheckStatusWithTimeout>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	da02      	bge.n	800c1b2 <SD_read+0x2a>
  {
    return res;
 800c1ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1b0:	e032      	b.n	800c218 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	68b8      	ldr	r0, [r7, #8]
 800c1b8:	f7ff fecc 	bl	800bf54 <BSP_SD_ReadBlocks_DMA>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d124      	bne.n	800c214 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <SD_read+0x98>)
 800c1cc:	6819      	ldr	r1, [r3, #0]
 800c1ce:	f107 0314 	add.w	r3, r7, #20
 800c1d2:	f247 5230 	movw	r2, #30000	; 0x7530
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 fa46 	bl	800c668 <osMessageGet>

    if (event.status == osEventMessage)
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	2b10      	cmp	r3, #16
 800c1e0:	d118      	bne.n	800c214 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d115      	bne.n	800c214 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c1e8:	f000 f964 	bl	800c4b4 <osKernelSysTick>
 800c1ec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c1ee:	e008      	b.n	800c202 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c1f0:	f7ff fee4 	bl	800bfbc <BSP_SD_GetCardState>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <SD_read+0x7a>
              {
                res = RES_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c200:	e008      	b.n	800c214 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c202:	f000 f957 	bl	800c4b4 <osKernelSysTick>
 800c206:	4602      	mov	r2, r0
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c210:	4293      	cmp	r3, r2
 800c212:	d9ed      	bls.n	800c1f0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3728      	adds	r7, #40	; 0x28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	200003c0 	.word	0x200003c0

0800c224 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60b9      	str	r1, [r7, #8]
 800c22c:	607a      	str	r2, [r7, #4]
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c23a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c23e:	f7ff ff0d 	bl	800c05c <SD_CheckStatusWithTimeout>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	da02      	bge.n	800c24e <SD_write+0x2a>
  {
    return res;
 800c248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c24c:	e02e      	b.n	800c2ac <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	68b8      	ldr	r0, [r7, #8]
 800c254:	f7ff fe98 	bl	800bf88 <BSP_SD_WriteBlocks_DMA>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d124      	bne.n	800c2a8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <SD_write+0x90>)
 800c260:	6819      	ldr	r1, [r3, #0]
 800c262:	f107 0314 	add.w	r3, r7, #20
 800c266:	f247 5230 	movw	r2, #30000	; 0x7530
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f9fc 	bl	800c668 <osMessageGet>

    if (event.status == osEventMessage)
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b10      	cmp	r3, #16
 800c274:	d118      	bne.n	800c2a8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d115      	bne.n	800c2a8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c27c:	f000 f91a 	bl	800c4b4 <osKernelSysTick>
 800c280:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c282:	e008      	b.n	800c296 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c284:	f7ff fe9a 	bl	800bfbc <BSP_SD_GetCardState>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d103      	bne.n	800c296 <SD_write+0x72>
          {
            res = RES_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c294:	e008      	b.n	800c2a8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c296:	f000 f90d 	bl	800c4b4 <osKernelSysTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d9ed      	bls.n	800c284 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3728      	adds	r7, #40	; 0x28
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	200003c0 	.word	0x200003c0

0800c2b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	; 0x30
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	603a      	str	r2, [r7, #0]
 800c2c2:	71fb      	strb	r3, [r7, #7]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c2ce:	4b25      	ldr	r3, [pc, #148]	; (800c364 <SD_ioctl+0xac>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <SD_ioctl+0x28>
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e03c      	b.n	800c35a <SD_ioctl+0xa2>

  switch (cmd)
 800c2e0:	79bb      	ldrb	r3, [r7, #6]
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d834      	bhi.n	800c350 <SD_ioctl+0x98>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <SD_ioctl+0x34>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c305 	.word	0x0800c305
 800c2f4:	0800c31d 	.word	0x0800c31d
 800c2f8:	0800c337 	.word	0x0800c337
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c302:	e028      	b.n	800c356 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c304:	f107 030c 	add.w	r3, r7, #12
 800c308:	4618      	mov	r0, r3
 800c30a:	f7ff fe67 	bl	800bfdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c30e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c31a:	e01c      	b.n	800c356 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff fe5b 	bl	800bfdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	b29a      	uxth	r2, r3
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c334:	e00f      	b.n	800c356 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fe4e 	bl	800bfdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	0a5a      	lsrs	r2, r3, #9
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c34e:	e002      	b.n	800c356 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c350:	2304      	movs	r3, #4
 800c352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3730      	adds	r7, #48	; 0x30
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20000021 	.word	0x20000021

0800c368 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c36c:	4b04      	ldr	r3, [pc, #16]	; (800c380 <BSP_SD_ReadCpltCallback+0x18>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2200      	movs	r2, #0
 800c372:	2101      	movs	r1, #1
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f937 	bl	800c5e8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c37a:	bf00      	nop
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	200003c0 	.word	0x200003c0

0800c384 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	4613      	mov	r3, r2
 800c390:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c392:	2301      	movs	r3, #1
 800c394:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c39a:	4b1f      	ldr	r3, [pc, #124]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c39c:	7a5b      	ldrb	r3, [r3, #9]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d131      	bne.n	800c408 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c3a4:	4b1c      	ldr	r3, [pc, #112]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3a6:	7a5b      	ldrb	r3, [r3, #9]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c3b2:	4b19      	ldr	r3, [pc, #100]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3b4:	7a5b      	ldrb	r3, [r3, #9]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	4a17      	ldr	r2, [pc, #92]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3c4:	7a5b      	ldrb	r3, [r3, #9]
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4b13      	ldr	r3, [pc, #76]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3cc:	4413      	add	r3, r2
 800c3ce:	79fa      	ldrb	r2, [r7, #7]
 800c3d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3d2:	4b11      	ldr	r3, [pc, #68]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3d4:	7a5b      	ldrb	r3, [r3, #9]
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	b2d1      	uxtb	r1, r2
 800c3dc:	4a0e      	ldr	r2, [pc, #56]	; (800c418 <FATFS_LinkDriverEx+0x94>)
 800c3de:	7251      	strb	r1, [r2, #9]
 800c3e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3e2:	7dbb      	ldrb	r3, [r7, #22]
 800c3e4:	3330      	adds	r3, #48	; 0x30
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	223a      	movs	r2, #58	; 0x3a
 800c3f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	3302      	adds	r3, #2
 800c3f8:	222f      	movs	r2, #47	; 0x2f
 800c3fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	3303      	adds	r3, #3
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	200003c4 	.word	0x200003c4

0800c41c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c426:	2200      	movs	r2, #0
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff ffaa 	bl	800c384 <FATFS_LinkDriverEx>
 800c430:	4603      	mov	r3, r0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	4603      	mov	r3, r0
 800c442:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c44c:	2b84      	cmp	r3, #132	; 0x84
 800c44e:	d005      	beq.n	800c45c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c450:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	4413      	add	r3, r2
 800c458:	3303      	adds	r3, #3
 800c45a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c45c:	68fb      	ldr	r3, [r7, #12]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c470:	f3ef 8305 	mrs	r3, IPSR
 800c474:	607b      	str	r3, [r7, #4]
  return(result);
 800c476:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bf14      	ite	ne
 800c47c:	2301      	movne	r3, #1
 800c47e:	2300      	moveq	r3, #0
 800c480:	b2db      	uxtb	r3, r3
}
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c492:	f001 faff 	bl	800da94 <vTaskStartScheduler>
  
  return osOK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c4a0:	f001 ff4a 	bl	800e338 <xTaskGetSchedulerState>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d101      	bne.n	800c4ae <osKernelRunning+0x12>
    return 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e000      	b.n	800c4b0 <osKernelRunning+0x14>
  else
    return 1;
 800c4ae:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c4b8:	f7ff ffd7 	bl	800c46a <inHandlerMode>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c4c2:	f001 fc05 	bl	800dcd0 <xTaskGetTickCountFromISR>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	e002      	b.n	800c4d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c4ca:	f001 fbf1 	bl	800dcb0 <xTaskGetTickCount>
 800c4ce:	4603      	mov	r3, r0
  }
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d6:	b089      	sub	sp, #36	; 0x24
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d020      	beq.n	800c528 <osThreadCreate+0x54>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d01c      	beq.n	800c528 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685c      	ldr	r4, [r3, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681d      	ldr	r5, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691e      	ldr	r6, [r3, #16]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff ff9a 	bl	800c43a <makeFreeRtosPriority>
 800c506:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c510:	9202      	str	r2, [sp, #8]
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	9100      	str	r1, [sp, #0]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	4632      	mov	r2, r6
 800c51a:	4629      	mov	r1, r5
 800c51c:	4620      	mov	r0, r4
 800c51e:	f001 f8e0 	bl	800d6e2 <xTaskCreateStatic>
 800c522:	4603      	mov	r3, r0
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e01c      	b.n	800c562 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685c      	ldr	r4, [r3, #4]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c534:	b29e      	uxth	r6, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff ff7c 	bl	800c43a <makeFreeRtosPriority>
 800c542:	4602      	mov	r2, r0
 800c544:	f107 030c 	add.w	r3, r7, #12
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	9200      	str	r2, [sp, #0]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	4632      	mov	r2, r6
 800c550:	4629      	mov	r1, r5
 800c552:	4620      	mov	r0, r4
 800c554:	f001 f925 	bl	800d7a2 <xTaskCreate>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d001      	beq.n	800c562 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	e000      	b.n	800c564 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c562:	68fb      	ldr	r3, [r7, #12]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c56c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <osDelay+0x16>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	e000      	b.n	800c584 <osDelay+0x18>
 800c582:	2301      	movs	r3, #1
 800c584:	4618      	mov	r0, r3
 800c586:	f001 fa4f 	bl	800da28 <vTaskDelay>
  
  return osOK;
 800c58a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c594:	b590      	push	{r4, r7, lr}
 800c596:	b085      	sub	sp, #20
 800c598:	af02      	add	r7, sp, #8
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d012      	beq.n	800c5cc <osMessageCreate+0x38>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6859      	ldr	r1, [r3, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68dc      	ldr	r4, [r3, #12]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4623      	mov	r3, r4
 800c5c4:	f000 f9e2 	bl	800c98c <xQueueGenericCreateStatic>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	e008      	b.n	800c5de <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f000 fa55 	bl	800ca86 <xQueueGenericCreate>
 800c5dc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd90      	pop	{r4, r7, pc}
	...

0800c5e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <osMessagePut+0x1e>
    ticks = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c606:	f7ff ff30 	bl	800c46a <inHandlerMode>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d018      	beq.n	800c642 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c610:	f107 0210 	add.w	r2, r7, #16
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	2300      	movs	r3, #0
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 fb96 	bl	800cd4c <xQueueGenericSendFromISR>
 800c620:	4603      	mov	r3, r0
 800c622:	2b01      	cmp	r3, #1
 800c624:	d001      	beq.n	800c62a <osMessagePut+0x42>
      return osErrorOS;
 800c626:	23ff      	movs	r3, #255	; 0xff
 800c628:	e018      	b.n	800c65c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d014      	beq.n	800c65a <osMessagePut+0x72>
 800c630:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <osMessagePut+0x7c>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	e00b      	b.n	800c65a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c642:	f107 0108 	add.w	r1, r7, #8
 800c646:	2300      	movs	r3, #0
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 fa7c 	bl	800cb48 <xQueueGenericSend>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d001      	beq.n	800c65a <osMessagePut+0x72>
      return osErrorOS;
 800c656:	23ff      	movs	r3, #255	; 0xff
 800c658:	e000      	b.n	800c65c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b08b      	sub	sp, #44	; 0x2c
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c682:	2380      	movs	r3, #128	; 0x80
 800c684:	617b      	str	r3, [r7, #20]
    return event;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	461c      	mov	r4, r3
 800c68a:	f107 0314 	add.w	r3, r7, #20
 800c68e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c696:	e054      	b.n	800c742 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c698:	2300      	movs	r3, #0
 800c69a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d103      	bne.n	800c6b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ae:	e009      	b.n	800c6c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <osMessageGet+0x5c>
      ticks = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c6c4:	f7ff fed1 	bl	800c46a <inHandlerMode>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01c      	beq.n	800c708 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c6ce:	f107 0220 	add.w	r2, r7, #32
 800c6d2:	f107 0314 	add.w	r3, r7, #20
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	68b8      	ldr	r0, [r7, #8]
 800c6dc:	f000 fe56 	bl	800d38c <xQueueReceiveFromISR>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d102      	bne.n	800c6ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c6e6:	2310      	movs	r3, #16
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	e001      	b.n	800c6f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d01d      	beq.n	800c732 <osMessageGet+0xca>
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <osMessageGet+0xe4>)
 800c6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	e014      	b.n	800c732 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c708:	f107 0314 	add.w	r3, r7, #20
 800c70c:	3304      	adds	r3, #4
 800c70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c710:	4619      	mov	r1, r3
 800c712:	68b8      	ldr	r0, [r7, #8]
 800c714:	f000 fc48 	bl	800cfa8 <xQueueReceive>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d102      	bne.n	800c724 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c71e:	2310      	movs	r3, #16
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e006      	b.n	800c732 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <osMessageGet+0xc6>
 800c72a:	2300      	movs	r3, #0
 800c72c:	e000      	b.n	800c730 <osMessageGet+0xc8>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	461c      	mov	r4, r3
 800c736:	f107 0314 	add.w	r3, r7, #20
 800c73a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c73e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	372c      	adds	r7, #44	; 0x2c
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}
 800c74a:	bf00      	nop
 800c74c:	e000ed04 	.word	0xe000ed04

0800c750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0208 	add.w	r2, r3, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f103 0208 	add.w	r2, r3, #8
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f103 0208 	add.w	r2, r3, #8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b085      	sub	sp, #20
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d103      	bne.n	800c812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	e00c      	b.n	800c82c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3308      	adds	r3, #8
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	e002      	b.n	800c820 <vListInsert+0x2e>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d2f6      	bcs.n	800c81a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	601a      	str	r2, [r3, #0]
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6892      	ldr	r2, [r2, #8]
 800c87a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6852      	ldr	r2, [r2, #4]
 800c884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d103      	bne.n	800c898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10b      	bne.n	800c8e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	b672      	cpsid	i
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	b662      	cpsie	i
 800c8e0:	60bb      	str	r3, [r7, #8]
 800c8e2:	e7fe      	b.n	800c8e2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c8e4:	f002 f870 	bl	800e9c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f0:	68f9      	ldr	r1, [r7, #12]
 800c8f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8f4:	fb01 f303 	mul.w	r3, r1, r3
 800c8f8:	441a      	add	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c914:	3b01      	subs	r3, #1
 800c916:	68f9      	ldr	r1, [r7, #12]
 800c918:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c91a:	fb01 f303 	mul.w	r3, r1, r3
 800c91e:	441a      	add	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	22ff      	movs	r2, #255	; 0xff
 800c928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	22ff      	movs	r2, #255	; 0xff
 800c930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d114      	bne.n	800c964 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d01a      	beq.n	800c978 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3310      	adds	r3, #16
 800c946:	4618      	mov	r0, r3
 800c948:	f001 fb36 	bl	800dfb8 <xTaskRemoveFromEventList>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d012      	beq.n	800c978 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c952:	4b0d      	ldr	r3, [pc, #52]	; (800c988 <xQueueGenericReset+0xd0>)
 800c954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	e009      	b.n	800c978 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3310      	adds	r3, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff fef1 	bl	800c750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3324      	adds	r3, #36	; 0x24
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff feec 	bl	800c750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c978:	f002 f858 	bl	800ea2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c97c:	2301      	movs	r3, #1
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08e      	sub	sp, #56	; 0x38
 800c990:	af02      	add	r7, sp, #8
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10b      	bne.n	800c9b8 <xQueueGenericCreateStatic+0x2c>
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b6:	e7fe      	b.n	800c9b6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10b      	bne.n	800c9d6 <xQueueGenericCreateStatic+0x4a>
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	b672      	cpsid	i
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	b662      	cpsie	i
 800c9d2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9d4:	e7fe      	b.n	800c9d4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <xQueueGenericCreateStatic+0x56>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <xQueueGenericCreateStatic+0x5a>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e000      	b.n	800c9e8 <xQueueGenericCreateStatic+0x5c>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10b      	bne.n	800ca04 <xQueueGenericCreateStatic+0x78>
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	b672      	cpsid	i
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	b662      	cpsie	i
 800ca00:	623b      	str	r3, [r7, #32]
 800ca02:	e7fe      	b.n	800ca02 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <xQueueGenericCreateStatic+0x84>
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <xQueueGenericCreateStatic+0x88>
 800ca10:	2301      	movs	r3, #1
 800ca12:	e000      	b.n	800ca16 <xQueueGenericCreateStatic+0x8a>
 800ca14:	2300      	movs	r3, #0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10b      	bne.n	800ca32 <xQueueGenericCreateStatic+0xa6>
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	b672      	cpsid	i
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	b662      	cpsie	i
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	e7fe      	b.n	800ca30 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca32:	2348      	movs	r3, #72	; 0x48
 800ca34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b48      	cmp	r3, #72	; 0x48
 800ca3a:	d00b      	beq.n	800ca54 <xQueueGenericCreateStatic+0xc8>
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	b672      	cpsid	i
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	b662      	cpsie	i
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	e7fe      	b.n	800ca52 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00d      	beq.n	800ca7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	4613      	mov	r3, r2
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 f846 	bl	800cb08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3730      	adds	r7, #48	; 0x30
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b08a      	sub	sp, #40	; 0x28
 800ca8a:	af02      	add	r7, sp, #8
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	4613      	mov	r3, r2
 800ca92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10b      	bne.n	800cab2 <xQueueGenericCreate+0x2c>
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	b672      	cpsid	i
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	b662      	cpsie	i
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	e7fe      	b.n	800cab0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d102      	bne.n	800cabe <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	61fb      	str	r3, [r7, #28]
 800cabc:	e004      	b.n	800cac8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	fb02 f303 	mul.w	r3, r2, r3
 800cac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	3348      	adds	r3, #72	; 0x48
 800cacc:	4618      	mov	r0, r3
 800cace:	f002 f89d 	bl	800ec0c <pvPortMalloc>
 800cad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d011      	beq.n	800cafe <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	3348      	adds	r3, #72	; 0x48
 800cae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caec:	79fa      	ldrb	r2, [r7, #7]
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	4613      	mov	r3, r2
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 f805 	bl	800cb08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cafe:	69bb      	ldr	r3, [r7, #24]
	}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	69ba      	ldr	r2, [r7, #24]
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	e002      	b.n	800cb2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb36:	2101      	movs	r1, #1
 800cb38:	69b8      	ldr	r0, [r7, #24]
 800cb3a:	f7ff febd 	bl	800c8b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08e      	sub	sp, #56	; 0x38
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb56:	2300      	movs	r3, #0
 800cb58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <xQueueGenericSend+0x34>
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	b672      	cpsid	i
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	b662      	cpsie	i
 800cb78:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb7a:	e7fe      	b.n	800cb7a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d103      	bne.n	800cb8a <xQueueGenericSend+0x42>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <xQueueGenericSend+0x46>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e000      	b.n	800cb90 <xQueueGenericSend+0x48>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10b      	bne.n	800cbac <xQueueGenericSend+0x64>
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	b672      	cpsid	i
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	b662      	cpsie	i
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbaa:	e7fe      	b.n	800cbaa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d103      	bne.n	800cbba <xQueueGenericSend+0x72>
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d101      	bne.n	800cbbe <xQueueGenericSend+0x76>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGenericSend+0x78>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10b      	bne.n	800cbdc <xQueueGenericSend+0x94>
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	b672      	cpsid	i
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	b662      	cpsie	i
 800cbd8:	623b      	str	r3, [r7, #32]
 800cbda:	e7fe      	b.n	800cbda <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbdc:	f001 fbac 	bl	800e338 <xTaskGetSchedulerState>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d102      	bne.n	800cbec <xQueueGenericSend+0xa4>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <xQueueGenericSend+0xa8>
 800cbec:	2301      	movs	r3, #1
 800cbee:	e000      	b.n	800cbf2 <xQueueGenericSend+0xaa>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <xQueueGenericSend+0xc6>
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	b672      	cpsid	i
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	b662      	cpsie	i
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc0e:	f001 fedb 	bl	800e9c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d302      	bcc.n	800cc24 <xQueueGenericSend+0xdc>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d129      	bne.n	800cc78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	68b9      	ldr	r1, [r7, #8]
 800cc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2a:	f000 fc4a 	bl	800d4c2 <prvCopyDataToQueue>
 800cc2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d010      	beq.n	800cc5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	3324      	adds	r3, #36	; 0x24
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f001 f9bb 	bl	800dfb8 <xTaskRemoveFromEventList>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d013      	beq.n	800cc70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc48:	4b3f      	ldr	r3, [pc, #252]	; (800cd48 <xQueueGenericSend+0x200>)
 800cc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	e00a      	b.n	800cc70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d007      	beq.n	800cc70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc60:	4b39      	ldr	r3, [pc, #228]	; (800cd48 <xQueueGenericSend+0x200>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc70:	f001 fedc 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e063      	b.n	800cd40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d103      	bne.n	800cc86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc7e:	f001 fed5 	bl	800ea2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e05c      	b.n	800cd40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc8c:	f107 0314 	add.w	r3, r7, #20
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 f9f5 	bl	800e080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc96:	2301      	movs	r3, #1
 800cc98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc9a:	f001 fec7 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc9e:	f000 ff5b 	bl	800db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cca2:	f001 fe91 	bl	800e9c8 <vPortEnterCritical>
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccac:	b25b      	sxtb	r3, r3
 800ccae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb2:	d103      	bne.n	800ccbc <xQueueGenericSend+0x174>
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc8:	d103      	bne.n	800ccd2 <xQueueGenericSend+0x18a>
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccd2:	f001 feab 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccd6:	1d3a      	adds	r2, r7, #4
 800ccd8:	f107 0314 	add.w	r3, r7, #20
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 f9e4 	bl	800e0ac <xTaskCheckForTimeOut>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d124      	bne.n	800cd34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccec:	f000 fce1 	bl	800d6b2 <prvIsQueueFull>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d018      	beq.n	800cd28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	3310      	adds	r3, #16
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f001 f934 	bl	800df6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd06:	f000 fc6c 	bl	800d5e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd0a:	f000 ff33 	bl	800db74 <xTaskResumeAll>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f47f af7c 	bne.w	800cc0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd16:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <xQueueGenericSend+0x200>)
 800cd18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	e772      	b.n	800cc0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2a:	f000 fc5a 	bl	800d5e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd2e:	f000 ff21 	bl	800db74 <xTaskResumeAll>
 800cd32:	e76c      	b.n	800cc0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd36:	f000 fc54 	bl	800d5e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd3a:	f000 ff1b 	bl	800db74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3738      	adds	r7, #56	; 0x38
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	e000ed04 	.word	0xe000ed04

0800cd4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10b      	bne.n	800cd7c <xQueueGenericSendFromISR+0x30>
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	b672      	cpsid	i
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	b662      	cpsie	i
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24
 800cd7a:	e7fe      	b.n	800cd7a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <xQueueGenericSendFromISR+0x3e>
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <xQueueGenericSendFromISR+0x42>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <xQueueGenericSendFromISR+0x44>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10b      	bne.n	800cdac <xQueueGenericSendFromISR+0x60>
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	b672      	cpsid	i
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	b662      	cpsie	i
 800cda8:	623b      	str	r3, [r7, #32]
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d103      	bne.n	800cdba <xQueueGenericSendFromISR+0x6e>
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <xQueueGenericSendFromISR+0x72>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e000      	b.n	800cdc0 <xQueueGenericSendFromISR+0x74>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10b      	bne.n	800cddc <xQueueGenericSendFromISR+0x90>
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	b672      	cpsid	i
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	b662      	cpsie	i
 800cdd8:	61fb      	str	r3, [r7, #28]
 800cdda:	e7fe      	b.n	800cdda <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cddc:	f001 fed4 	bl	800eb88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cde0:	f3ef 8211 	mrs	r2, BASEPRI
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	b672      	cpsid	i
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	b662      	cpsie	i
 800cdf8:	61ba      	str	r2, [r7, #24]
 800cdfa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdfc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d302      	bcc.n	800ce12 <xQueueGenericSendFromISR+0xc6>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d12c      	bne.n	800ce6c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce22:	f000 fb4e 	bl	800d4c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d112      	bne.n	800ce56 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d016      	beq.n	800ce66 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f001 f8bb 	bl	800dfb8 <xTaskRemoveFromEventList>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00b      	beq.n	800ce66 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e007      	b.n	800ce66 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	b25a      	sxtb	r2, r3
 800ce60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce66:	2301      	movs	r3, #1
 800ce68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ce6a:	e001      	b.n	800ce70 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3738      	adds	r7, #56	; 0x38
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08e      	sub	sp, #56	; 0x38
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10b      	bne.n	800ceb0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	b672      	cpsid	i
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	b662      	cpsie	i
 800ceac:	623b      	str	r3, [r7, #32]
 800ceae:	e7fe      	b.n	800ceae <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00b      	beq.n	800ced0 <xQueueGiveFromISR+0x4c>
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	b672      	cpsid	i
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	b662      	cpsie	i
 800cecc:	61fb      	str	r3, [r7, #28]
 800cece:	e7fe      	b.n	800cece <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d103      	bne.n	800cee0 <xQueueGiveFromISR+0x5c>
 800ced8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <xQueueGiveFromISR+0x60>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e000      	b.n	800cee6 <xQueueGiveFromISR+0x62>
 800cee4:	2300      	movs	r3, #0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10b      	bne.n	800cf02 <xQueueGiveFromISR+0x7e>
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	b672      	cpsid	i
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	b662      	cpsie	i
 800cefe:	61bb      	str	r3, [r7, #24]
 800cf00:	e7fe      	b.n	800cf00 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf02:	f001 fe41 	bl	800eb88 <vPortValidateInterruptPriority>
	__asm volatile
 800cf06:	f3ef 8211 	mrs	r2, BASEPRI
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	b672      	cpsid	i
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	b662      	cpsie	i
 800cf1e:	617a      	str	r2, [r7, #20]
 800cf20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d22b      	bcs.n	800cf8e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	1c5a      	adds	r2, r3, #1
 800cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf50:	d112      	bne.n	800cf78 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d016      	beq.n	800cf88 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	3324      	adds	r3, #36	; 0x24
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f001 f82a 	bl	800dfb8 <xTaskRemoveFromEventList>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00e      	beq.n	800cf88 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2201      	movs	r2, #1
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	e007      	b.n	800cf88 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	b25a      	sxtb	r2, r3
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8c:	e001      	b.n	800cf92 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	637b      	str	r3, [r7, #52]	; 0x34
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3738      	adds	r7, #56	; 0x38
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08c      	sub	sp, #48	; 0x30
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10b      	bne.n	800cfda <xQueueReceive+0x32>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	b672      	cpsid	i
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	b662      	cpsie	i
 800cfd6:	623b      	str	r3, [r7, #32]
 800cfd8:	e7fe      	b.n	800cfd8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d103      	bne.n	800cfe8 <xQueueReceive+0x40>
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <xQueueReceive+0x44>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e000      	b.n	800cfee <xQueueReceive+0x46>
 800cfec:	2300      	movs	r3, #0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <xQueueReceive+0x62>
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e7fe      	b.n	800d008 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d00a:	f001 f995 	bl	800e338 <xTaskGetSchedulerState>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d102      	bne.n	800d01a <xQueueReceive+0x72>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <xQueueReceive+0x76>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <xQueueReceive+0x78>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <xQueueReceive+0x94>
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	b672      	cpsid	i
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	b662      	cpsie	i
 800d038:	61bb      	str	r3, [r7, #24]
 800d03a:	e7fe      	b.n	800d03a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d03c:	f001 fcc4 	bl	800e9c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d044:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01f      	beq.n	800d08c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d050:	f000 faa1 	bl	800d596 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	1e5a      	subs	r2, r3, #1
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00f      	beq.n	800d084 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	3310      	adds	r3, #16
 800d068:	4618      	mov	r0, r3
 800d06a:	f000 ffa5 	bl	800dfb8 <xTaskRemoveFromEventList>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d074:	4b3c      	ldr	r3, [pc, #240]	; (800d168 <xQueueReceive+0x1c0>)
 800d076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d084:	f001 fcd2 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800d088:	2301      	movs	r3, #1
 800d08a:	e069      	b.n	800d160 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d092:	f001 fccb 	bl	800ea2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d096:	2300      	movs	r3, #0
 800d098:	e062      	b.n	800d160 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d106      	bne.n	800d0ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0a0:	f107 0310 	add.w	r3, r7, #16
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f000 ffeb 	bl	800e080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0ae:	f001 fcbd 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0b2:	f000 fd51 	bl	800db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0b6:	f001 fc87 	bl	800e9c8 <vPortEnterCritical>
 800d0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0c0:	b25b      	sxtb	r3, r3
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c6:	d103      	bne.n	800d0d0 <xQueueReceive+0x128>
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0d6:	b25b      	sxtb	r3, r3
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d103      	bne.n	800d0e6 <xQueueReceive+0x13e>
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0e6:	f001 fca1 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0ea:	1d3a      	adds	r2, r7, #4
 800d0ec:	f107 0310 	add.w	r3, r7, #16
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 ffda 	bl	800e0ac <xTaskCheckForTimeOut>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d123      	bne.n	800d146 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d100:	f000 fac1 	bl	800d686 <prvIsQueueEmpty>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d017      	beq.n	800d13a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	3324      	adds	r3, #36	; 0x24
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	4611      	mov	r1, r2
 800d112:	4618      	mov	r0, r3
 800d114:	f000 ff2a 	bl	800df6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d11a:	f000 fa62 	bl	800d5e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d11e:	f000 fd29 	bl	800db74 <xTaskResumeAll>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d189      	bne.n	800d03c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d128:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <xQueueReceive+0x1c0>)
 800d12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	e780      	b.n	800d03c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d13c:	f000 fa51 	bl	800d5e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d140:	f000 fd18 	bl	800db74 <xTaskResumeAll>
 800d144:	e77a      	b.n	800d03c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d148:	f000 fa4b 	bl	800d5e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d14c:	f000 fd12 	bl	800db74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d152:	f000 fa98 	bl	800d686 <prvIsQueueEmpty>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f43f af6f 	beq.w	800d03c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d15e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d160:	4618      	mov	r0, r3
 800d162:	3730      	adds	r7, #48	; 0x30
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	e000ed04 	.word	0xe000ed04

0800d16c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08e      	sub	sp, #56	; 0x38
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d176:	2300      	movs	r3, #0
 800d178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d17e:	2300      	movs	r3, #0
 800d180:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <xQueueSemaphoreTake+0x34>
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	b672      	cpsid	i
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	b662      	cpsie	i
 800d19c:	623b      	str	r3, [r7, #32]
 800d19e:	e7fe      	b.n	800d19e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <xQueueSemaphoreTake+0x54>
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	b672      	cpsid	i
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	b662      	cpsie	i
 800d1bc:	61fb      	str	r3, [r7, #28]
 800d1be:	e7fe      	b.n	800d1be <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1c0:	f001 f8ba 	bl	800e338 <xTaskGetSchedulerState>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d102      	bne.n	800d1d0 <xQueueSemaphoreTake+0x64>
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <xQueueSemaphoreTake+0x68>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e000      	b.n	800d1d6 <xQueueSemaphoreTake+0x6a>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10b      	bne.n	800d1f2 <xQueueSemaphoreTake+0x86>
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	b672      	cpsid	i
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	b662      	cpsie	i
 800d1ee:	61bb      	str	r3, [r7, #24]
 800d1f0:	e7fe      	b.n	800d1f0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1f2:	f001 fbe9 	bl	800e9c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d024      	beq.n	800d24c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	1e5a      	subs	r2, r3, #1
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d104      	bne.n	800d21c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d212:	f001 fa53 	bl	800e6bc <pvTaskIncrementMutexHeldCount>
 800d216:	4602      	mov	r2, r0
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00f      	beq.n	800d244 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	3310      	adds	r3, #16
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 fec5 	bl	800dfb8 <xTaskRemoveFromEventList>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d234:	4b54      	ldr	r3, [pc, #336]	; (800d388 <xQueueSemaphoreTake+0x21c>)
 800d236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d244:	f001 fbf2 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800d248:	2301      	movs	r3, #1
 800d24a:	e098      	b.n	800d37e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d112      	bne.n	800d278 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <xQueueSemaphoreTake+0x104>
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	b672      	cpsid	i
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	b662      	cpsie	i
 800d26c:	617b      	str	r3, [r7, #20]
 800d26e:	e7fe      	b.n	800d26e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d270:	f001 fbdc 	bl	800ea2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d274:	2300      	movs	r3, #0
 800d276:	e082      	b.n	800d37e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d27e:	f107 030c 	add.w	r3, r7, #12
 800d282:	4618      	mov	r0, r3
 800d284:	f000 fefc 	bl	800e080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d288:	2301      	movs	r3, #1
 800d28a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d28c:	f001 fbce 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d290:	f000 fc62 	bl	800db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d294:	f001 fb98 	bl	800e9c8 <vPortEnterCritical>
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d29e:	b25b      	sxtb	r3, r3
 800d2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a4:	d103      	bne.n	800d2ae <xQueueSemaphoreTake+0x142>
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b4:	b25b      	sxtb	r3, r3
 800d2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ba:	d103      	bne.n	800d2c4 <xQueueSemaphoreTake+0x158>
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c4:	f001 fbb2 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2c8:	463a      	mov	r2, r7
 800d2ca:	f107 030c 	add.w	r3, r7, #12
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 feeb 	bl	800e0ac <xTaskCheckForTimeOut>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d132      	bne.n	800d342 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2de:	f000 f9d2 	bl	800d686 <prvIsQueueEmpty>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d026      	beq.n	800d336 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d2f0:	f001 fb6a 	bl	800e9c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f001 f83b 	bl	800e374 <xTaskPriorityInherit>
 800d2fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d300:	f001 fb94 	bl	800ea2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	3324      	adds	r3, #36	; 0x24
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fe2d 	bl	800df6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d314:	f000 f965 	bl	800d5e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d318:	f000 fc2c 	bl	800db74 <xTaskResumeAll>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f47f af67 	bne.w	800d1f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d324:	4b18      	ldr	r3, [pc, #96]	; (800d388 <xQueueSemaphoreTake+0x21c>)
 800d326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	e75d      	b.n	800d1f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d338:	f000 f953 	bl	800d5e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d33c:	f000 fc1a 	bl	800db74 <xTaskResumeAll>
 800d340:	e757      	b.n	800d1f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d344:	f000 f94d 	bl	800d5e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d348:	f000 fc14 	bl	800db74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d34c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d34e:	f000 f99a 	bl	800d686 <prvIsQueueEmpty>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	f43f af4c 	beq.w	800d1f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00d      	beq.n	800d37c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d360:	f001 fb32 	bl	800e9c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d366:	f000 f894 	bl	800d492 <prvGetDisinheritPriorityAfterTimeout>
 800d36a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d372:	4618      	mov	r0, r3
 800d374:	f001 f906 	bl	800e584 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d378:	f001 fb58 	bl	800ea2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d37c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3738      	adds	r7, #56	; 0x38
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08e      	sub	sp, #56	; 0x38
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10b      	bne.n	800d3ba <xQueueReceiveFromISR+0x2e>
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	b672      	cpsid	i
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	b662      	cpsie	i
 800d3b6:	623b      	str	r3, [r7, #32]
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d103      	bne.n	800d3c8 <xQueueReceiveFromISR+0x3c>
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <xQueueReceiveFromISR+0x40>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e000      	b.n	800d3ce <xQueueReceiveFromISR+0x42>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10b      	bne.n	800d3ea <xQueueReceiveFromISR+0x5e>
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	b672      	cpsid	i
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	b662      	cpsie	i
 800d3e6:	61fb      	str	r3, [r7, #28]
 800d3e8:	e7fe      	b.n	800d3e8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ea:	f001 fbcd 	bl	800eb88 <vPortValidateInterruptPriority>
	__asm volatile
 800d3ee:	f3ef 8211 	mrs	r2, BASEPRI
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	b672      	cpsid	i
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	b662      	cpsie	i
 800d406:	61ba      	str	r2, [r7, #24]
 800d408:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d40a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d40c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	2b00      	cmp	r3, #0
 800d418:	d02f      	beq.n	800d47a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d428:	f000 f8b5 	bl	800d596 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	1e5a      	subs	r2, r3, #1
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43c:	d112      	bne.n	800d464 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d016      	beq.n	800d474 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	3310      	adds	r3, #16
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fdb4 	bl	800dfb8 <xTaskRemoveFromEventList>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00e      	beq.n	800d474 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00b      	beq.n	800d474 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	e007      	b.n	800d474 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d468:	3301      	adds	r3, #1
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	b25a      	sxtb	r2, r3
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d474:	2301      	movs	r3, #1
 800d476:	637b      	str	r3, [r7, #52]	; 0x34
 800d478:	e001      	b.n	800d47e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d47a:	2300      	movs	r3, #0
 800d47c:	637b      	str	r3, [r7, #52]	; 0x34
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3738      	adds	r7, #56	; 0x38
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d006      	beq.n	800d4b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f1c3 0307 	rsb	r3, r3, #7
 800d4ac:	60fb      	str	r3, [r7, #12]
 800d4ae:	e001      	b.n	800d4b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
	}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b086      	sub	sp, #24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10d      	bne.n	800d4fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d14d      	bne.n	800d584 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f000 ffc1 	bl	800e474 <xTaskPriorityDisinherit>
 800d4f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	609a      	str	r2, [r3, #8]
 800d4fa:	e043      	b.n	800d584 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d119      	bne.n	800d536 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6858      	ldr	r0, [r3, #4]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50a:	461a      	mov	r2, r3
 800d50c:	68b9      	ldr	r1, [r7, #8]
 800d50e:	f018 f9eb 	bl	80258e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51a:	441a      	add	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d32b      	bcc.n	800d584 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	605a      	str	r2, [r3, #4]
 800d534:	e026      	b.n	800d584 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68d8      	ldr	r0, [r3, #12]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d53e:	461a      	mov	r2, r3
 800d540:	68b9      	ldr	r1, [r7, #8]
 800d542:	f018 f9d1 	bl	80258e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	68da      	ldr	r2, [r3, #12]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54e:	425b      	negs	r3, r3
 800d550:	441a      	add	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d207      	bcs.n	800d572 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	689a      	ldr	r2, [r3, #8]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56a:	425b      	negs	r3, r3
 800d56c:	441a      	add	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b02      	cmp	r3, #2
 800d576:	d105      	bne.n	800d584 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	3b01      	subs	r3, #1
 800d582:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d58c:	697b      	ldr	r3, [r7, #20]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d018      	beq.n	800d5da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	68da      	ldr	r2, [r3, #12]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	441a      	add	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d303      	bcc.n	800d5ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68d9      	ldr	r1, [r3, #12]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	6838      	ldr	r0, [r7, #0]
 800d5d6:	f018 f987 	bl	80258e8 <memcpy>
	}
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5ea:	f001 f9ed 	bl	800e9c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5f6:	e011      	b.n	800d61c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d012      	beq.n	800d626 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3324      	adds	r3, #36	; 0x24
 800d604:	4618      	mov	r0, r3
 800d606:	f000 fcd7 	bl	800dfb8 <xTaskRemoveFromEventList>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d610:	f000 fdb0 	bl	800e174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	3b01      	subs	r3, #1
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dce9      	bgt.n	800d5f8 <prvUnlockQueue+0x16>
 800d624:	e000      	b.n	800d628 <prvUnlockQueue+0x46>
					break;
 800d626:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	22ff      	movs	r2, #255	; 0xff
 800d62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d630:	f001 f9fc 	bl	800ea2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d634:	f001 f9c8 	bl	800e9c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d63e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d640:	e011      	b.n	800d666 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d012      	beq.n	800d670 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	3310      	adds	r3, #16
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fcb2 	bl	800dfb8 <xTaskRemoveFromEventList>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d65a:	f000 fd8b 	bl	800e174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	3b01      	subs	r3, #1
 800d662:	b2db      	uxtb	r3, r3
 800d664:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dce9      	bgt.n	800d642 <prvUnlockQueue+0x60>
 800d66e:	e000      	b.n	800d672 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d670:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d67a:	f001 f9d7 	bl	800ea2c <vPortExitCritical>
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d68e:	f001 f99b 	bl	800e9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d69a:	2301      	movs	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e001      	b.n	800d6a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6a4:	f001 f9c2 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b084      	sub	sp, #16
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6ba:	f001 f985 	bl	800e9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d102      	bne.n	800d6d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	e001      	b.n	800d6d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6d4:	f001 f9aa 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b08e      	sub	sp, #56	; 0x38
 800d6e6:	af04      	add	r7, sp, #16
 800d6e8:	60f8      	str	r0, [r7, #12]
 800d6ea:	60b9      	str	r1, [r7, #8]
 800d6ec:	607a      	str	r2, [r7, #4]
 800d6ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10b      	bne.n	800d70e <xTaskCreateStatic+0x2c>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	b672      	cpsid	i
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	b662      	cpsie	i
 800d70a:	623b      	str	r3, [r7, #32]
 800d70c:	e7fe      	b.n	800d70c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10b      	bne.n	800d72c <xTaskCreateStatic+0x4a>
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	b672      	cpsid	i
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	b662      	cpsie	i
 800d728:	61fb      	str	r3, [r7, #28]
 800d72a:	e7fe      	b.n	800d72a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d72c:	2358      	movs	r3, #88	; 0x58
 800d72e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	2b58      	cmp	r3, #88	; 0x58
 800d734:	d00b      	beq.n	800d74e <xTaskCreateStatic+0x6c>
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	b672      	cpsid	i
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	b662      	cpsie	i
 800d74a:	61bb      	str	r3, [r7, #24]
 800d74c:	e7fe      	b.n	800d74c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d74e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	2b00      	cmp	r3, #0
 800d754:	d01e      	beq.n	800d794 <xTaskCreateStatic+0xb2>
 800d756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01b      	beq.n	800d794 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d764:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	2202      	movs	r2, #2
 800d76a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d76e:	2300      	movs	r3, #0
 800d770:	9303      	str	r3, [sp, #12]
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	9302      	str	r3, [sp, #8]
 800d776:	f107 0314 	add.w	r3, r7, #20
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f850 	bl	800d82c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d78c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d78e:	f000 f8e1 	bl	800d954 <prvAddNewTaskToReadyList>
 800d792:	e001      	b.n	800d798 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d798:	697b      	ldr	r3, [r7, #20]
	}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3728      	adds	r7, #40	; 0x28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b08c      	sub	sp, #48	; 0x30
 800d7a6:	af04      	add	r7, sp, #16
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	603b      	str	r3, [r7, #0]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7b2:	88fb      	ldrh	r3, [r7, #6]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fa28 	bl	800ec0c <pvPortMalloc>
 800d7bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00e      	beq.n	800d7e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7c4:	2058      	movs	r0, #88	; 0x58
 800d7c6:	f001 fa21 	bl	800ec0c <pvPortMalloc>
 800d7ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	631a      	str	r2, [r3, #48]	; 0x30
 800d7d8:	e005      	b.n	800d7e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7da:	6978      	ldr	r0, [r7, #20]
 800d7dc:	f001 fae2 	bl	800eda4 <vPortFree>
 800d7e0:	e001      	b.n	800d7e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d017      	beq.n	800d81c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7f4:	88fa      	ldrh	r2, [r7, #6]
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	9303      	str	r3, [sp, #12]
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f80e 	bl	800d82c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d810:	69f8      	ldr	r0, [r7, #28]
 800d812:	f000 f89f 	bl	800d954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d816:	2301      	movs	r3, #1
 800d818:	61bb      	str	r3, [r7, #24]
 800d81a:	e002      	b.n	800d822 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295
 800d820:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d822:	69bb      	ldr	r3, [r7, #24]
	}
 800d824:	4618      	mov	r0, r3
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	461a      	mov	r2, r3
 800d844:	21a5      	movs	r1, #165	; 0xa5
 800d846:	f018 f85a 	bl	80258fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d854:	440b      	add	r3, r1
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	f023 0307 	bic.w	r3, r3, #7
 800d862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00b      	beq.n	800d886 <prvInitialiseNewTask+0x5a>
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	b672      	cpsid	i
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	b662      	cpsie	i
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e7fe      	b.n	800d884 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01f      	beq.n	800d8cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d88c:	2300      	movs	r3, #0
 800d88e:	61fb      	str	r3, [r7, #28]
 800d890:	e012      	b.n	800d8b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	4413      	add	r3, r2
 800d898:	7819      	ldrb	r1, [r3, #0]
 800d89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	4413      	add	r3, r2
 800d8a0:	3334      	adds	r3, #52	; 0x34
 800d8a2:	460a      	mov	r2, r1
 800d8a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d006      	beq.n	800d8c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	2b0f      	cmp	r3, #15
 800d8bc:	d9e9      	bls.n	800d892 <prvInitialiseNewTask+0x66>
 800d8be:	e000      	b.n	800d8c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800d8c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8ca:	e003      	b.n	800d8d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	2b06      	cmp	r3, #6
 800d8d8:	d901      	bls.n	800d8de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8da:	2306      	movs	r3, #6
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fe ff4b 	bl	800c790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	3318      	adds	r3, #24
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe ff46 	bl	800c790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d908:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	f1c3 0207 	rsb	r2, r3, #7
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d918:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	2200      	movs	r2, #0
 800d91e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	2200      	movs	r2, #0
 800d924:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	68f9      	ldr	r1, [r7, #12]
 800d932:	69b8      	ldr	r0, [r7, #24]
 800d934:	f000 ff3c 	bl	800e7b0 <pxPortInitialiseStack>
 800d938:	4602      	mov	r2, r0
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d94a:	bf00      	nop
 800d94c:	3720      	adds	r7, #32
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
	...

0800d954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d95c:	f001 f834 	bl	800e9c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d960:	4b2a      	ldr	r3, [pc, #168]	; (800da0c <prvAddNewTaskToReadyList+0xb8>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3301      	adds	r3, #1
 800d966:	4a29      	ldr	r2, [pc, #164]	; (800da0c <prvAddNewTaskToReadyList+0xb8>)
 800d968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d96a:	4b29      	ldr	r3, [pc, #164]	; (800da10 <prvAddNewTaskToReadyList+0xbc>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d109      	bne.n	800d986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d972:	4a27      	ldr	r2, [pc, #156]	; (800da10 <prvAddNewTaskToReadyList+0xbc>)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d978:	4b24      	ldr	r3, [pc, #144]	; (800da0c <prvAddNewTaskToReadyList+0xb8>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d110      	bne.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d980:	f000 fc1e 	bl	800e1c0 <prvInitialiseTaskLists>
 800d984:	e00d      	b.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d986:	4b23      	ldr	r3, [pc, #140]	; (800da14 <prvAddNewTaskToReadyList+0xc0>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d98e:	4b20      	ldr	r3, [pc, #128]	; (800da10 <prvAddNewTaskToReadyList+0xbc>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d998:	429a      	cmp	r2, r3
 800d99a:	d802      	bhi.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d99c:	4a1c      	ldr	r2, [pc, #112]	; (800da10 <prvAddNewTaskToReadyList+0xbc>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9a2:	4b1d      	ldr	r3, [pc, #116]	; (800da18 <prvAddNewTaskToReadyList+0xc4>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	4a1b      	ldr	r2, [pc, #108]	; (800da18 <prvAddNewTaskToReadyList+0xc4>)
 800d9aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	409a      	lsls	r2, r3
 800d9b4:	4b19      	ldr	r3, [pc, #100]	; (800da1c <prvAddNewTaskToReadyList+0xc8>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	4a18      	ldr	r2, [pc, #96]	; (800da1c <prvAddNewTaskToReadyList+0xc8>)
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4a15      	ldr	r2, [pc, #84]	; (800da20 <prvAddNewTaskToReadyList+0xcc>)
 800d9cc:	441a      	add	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f7fe fee8 	bl	800c7aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9da:	f001 f827 	bl	800ea2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9de:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <prvAddNewTaskToReadyList+0xc0>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00e      	beq.n	800da04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9e6:	4b0a      	ldr	r3, [pc, #40]	; (800da10 <prvAddNewTaskToReadyList+0xbc>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d207      	bcs.n	800da04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9f4:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <prvAddNewTaskToReadyList+0xd0>)
 800d9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	200004d0 	.word	0x200004d0
 800da10:	200003d0 	.word	0x200003d0
 800da14:	200004dc 	.word	0x200004dc
 800da18:	200004ec 	.word	0x200004ec
 800da1c:	200004d8 	.word	0x200004d8
 800da20:	200003d4 	.word	0x200003d4
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d018      	beq.n	800da6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da3a:	4b14      	ldr	r3, [pc, #80]	; (800da8c <vTaskDelay+0x64>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00b      	beq.n	800da5a <vTaskDelay+0x32>
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	b672      	cpsid	i
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	b662      	cpsie	i
 800da56:	60bb      	str	r3, [r7, #8]
 800da58:	e7fe      	b.n	800da58 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800da5a:	f000 f87d 	bl	800db58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da5e:	2100      	movs	r1, #0
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fe3f 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da66:	f000 f885 	bl	800db74 <xTaskResumeAll>
 800da6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d107      	bne.n	800da82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <vTaskDelay+0x68>)
 800da74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	200004f8 	.word	0x200004f8
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daa2:	463a      	mov	r2, r7
 800daa4:	1d39      	adds	r1, r7, #4
 800daa6:	f107 0308 	add.w	r3, r7, #8
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f3 f82e 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	9202      	str	r2, [sp, #8]
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	2300      	movs	r3, #0
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	2300      	movs	r3, #0
 800dac0:	460a      	mov	r2, r1
 800dac2:	491f      	ldr	r1, [pc, #124]	; (800db40 <vTaskStartScheduler+0xac>)
 800dac4:	481f      	ldr	r0, [pc, #124]	; (800db44 <vTaskStartScheduler+0xb0>)
 800dac6:	f7ff fe0c 	bl	800d6e2 <xTaskCreateStatic>
 800daca:	4602      	mov	r2, r0
 800dacc:	4b1e      	ldr	r3, [pc, #120]	; (800db48 <vTaskStartScheduler+0xb4>)
 800dace:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dad0:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <vTaskStartScheduler+0xb4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dad8:	2301      	movs	r3, #1
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	e001      	b.n	800dae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d117      	bne.n	800db18 <vTaskStartScheduler+0x84>
 800dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daec:	b672      	cpsid	i
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	b662      	cpsie	i
 800dafc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dafe:	4b13      	ldr	r3, [pc, #76]	; (800db4c <vTaskStartScheduler+0xb8>)
 800db00:	f04f 32ff 	mov.w	r2, #4294967295
 800db04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db06:	4b12      	ldr	r3, [pc, #72]	; (800db50 <vTaskStartScheduler+0xbc>)
 800db08:	2201      	movs	r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db0c:	4b11      	ldr	r3, [pc, #68]	; (800db54 <vTaskStartScheduler+0xc0>)
 800db0e:	2200      	movs	r2, #0
 800db10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db12:	f000 fedd 	bl	800e8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db16:	e00f      	b.n	800db38 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d10b      	bne.n	800db38 <vTaskStartScheduler+0xa4>
 800db20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db24:	b672      	cpsid	i
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	b662      	cpsie	i
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	e7fe      	b.n	800db36 <vTaskStartScheduler+0xa2>
}
 800db38:	bf00      	nop
 800db3a:	3718      	adds	r7, #24
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	08026894 	.word	0x08026894
 800db44:	0800e18d 	.word	0x0800e18d
 800db48:	200004f4 	.word	0x200004f4
 800db4c:	200004f0 	.word	0x200004f0
 800db50:	200004dc 	.word	0x200004dc
 800db54:	200004d4 	.word	0x200004d4

0800db58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db58:	b480      	push	{r7}
 800db5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800db5c:	4b04      	ldr	r3, [pc, #16]	; (800db70 <vTaskSuspendAll+0x18>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	4a03      	ldr	r2, [pc, #12]	; (800db70 <vTaskSuspendAll+0x18>)
 800db64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800db66:	bf00      	nop
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	200004f8 	.word	0x200004f8

0800db74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db7e:	2300      	movs	r3, #0
 800db80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db82:	4b42      	ldr	r3, [pc, #264]	; (800dc8c <xTaskResumeAll+0x118>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10b      	bne.n	800dba2 <xTaskResumeAll+0x2e>
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	b672      	cpsid	i
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	b662      	cpsie	i
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	e7fe      	b.n	800dba0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dba2:	f000 ff11 	bl	800e9c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dba6:	4b39      	ldr	r3, [pc, #228]	; (800dc8c <xTaskResumeAll+0x118>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	4a37      	ldr	r2, [pc, #220]	; (800dc8c <xTaskResumeAll+0x118>)
 800dbae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbb0:	4b36      	ldr	r3, [pc, #216]	; (800dc8c <xTaskResumeAll+0x118>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d161      	bne.n	800dc7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbb8:	4b35      	ldr	r3, [pc, #212]	; (800dc90 <xTaskResumeAll+0x11c>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d05d      	beq.n	800dc7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbc0:	e02e      	b.n	800dc20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc2:	4b34      	ldr	r3, [pc, #208]	; (800dc94 <xTaskResumeAll+0x120>)
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3318      	adds	r3, #24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fe48 	bl	800c864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fe43 	bl	800c864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	409a      	lsls	r2, r3
 800dbe6:	4b2c      	ldr	r3, [pc, #176]	; (800dc98 <xTaskResumeAll+0x124>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	4a2a      	ldr	r2, [pc, #168]	; (800dc98 <xTaskResumeAll+0x124>)
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4a27      	ldr	r2, [pc, #156]	; (800dc9c <xTaskResumeAll+0x128>)
 800dbfe:	441a      	add	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	3304      	adds	r3, #4
 800dc04:	4619      	mov	r1, r3
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7fe fdcf 	bl	800c7aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc10:	4b23      	ldr	r3, [pc, #140]	; (800dca0 <xTaskResumeAll+0x12c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d302      	bcc.n	800dc20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc1a:	4b22      	ldr	r3, [pc, #136]	; (800dca4 <xTaskResumeAll+0x130>)
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc20:	4b1c      	ldr	r3, [pc, #112]	; (800dc94 <xTaskResumeAll+0x120>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1cc      	bne.n	800dbc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc2e:	f000 fb63 	bl	800e2f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dc32:	4b1d      	ldr	r3, [pc, #116]	; (800dca8 <xTaskResumeAll+0x134>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d010      	beq.n	800dc60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc3e:	f000 f859 	bl	800dcf4 <xTaskIncrementTick>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc48:	4b16      	ldr	r3, [pc, #88]	; (800dca4 <xTaskResumeAll+0x130>)
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1f1      	bne.n	800dc3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dc5a:	4b13      	ldr	r3, [pc, #76]	; (800dca8 <xTaskResumeAll+0x134>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc60:	4b10      	ldr	r3, [pc, #64]	; (800dca4 <xTaskResumeAll+0x130>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d009      	beq.n	800dc7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc6c:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <xTaskResumeAll+0x138>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc7c:	f000 fed6 	bl	800ea2c <vPortExitCritical>

	return xAlreadyYielded;
 800dc80:	68bb      	ldr	r3, [r7, #8]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	200004f8 	.word	0x200004f8
 800dc90:	200004d0 	.word	0x200004d0
 800dc94:	20000490 	.word	0x20000490
 800dc98:	200004d8 	.word	0x200004d8
 800dc9c:	200003d4 	.word	0x200003d4
 800dca0:	200003d0 	.word	0x200003d0
 800dca4:	200004e4 	.word	0x200004e4
 800dca8:	200004e0 	.word	0x200004e0
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcb6:	4b05      	ldr	r3, [pc, #20]	; (800dccc <xTaskGetTickCount+0x1c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcbc:	687b      	ldr	r3, [r7, #4]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	200004d4 	.word	0x200004d4

0800dcd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcd6:	f000 ff57 	bl	800eb88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dcda:	2300      	movs	r3, #0
 800dcdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dcde:	4b04      	ldr	r3, [pc, #16]	; (800dcf0 <xTaskGetTickCountFromISR+0x20>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dce4:	683b      	ldr	r3, [r7, #0]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	200004d4 	.word	0x200004d4

0800dcf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcfe:	4b4f      	ldr	r3, [pc, #316]	; (800de3c <xTaskIncrementTick+0x148>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f040 8089 	bne.w	800de1a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd08:	4b4d      	ldr	r3, [pc, #308]	; (800de40 <xTaskIncrementTick+0x14c>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd10:	4a4b      	ldr	r2, [pc, #300]	; (800de40 <xTaskIncrementTick+0x14c>)
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d121      	bne.n	800dd60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd1c:	4b49      	ldr	r3, [pc, #292]	; (800de44 <xTaskIncrementTick+0x150>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00b      	beq.n	800dd3e <xTaskIncrementTick+0x4a>
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	b672      	cpsid	i
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	b662      	cpsie	i
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	e7fe      	b.n	800dd3c <xTaskIncrementTick+0x48>
 800dd3e:	4b41      	ldr	r3, [pc, #260]	; (800de44 <xTaskIncrementTick+0x150>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	4b40      	ldr	r3, [pc, #256]	; (800de48 <xTaskIncrementTick+0x154>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a3e      	ldr	r2, [pc, #248]	; (800de44 <xTaskIncrementTick+0x150>)
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	4a3e      	ldr	r2, [pc, #248]	; (800de48 <xTaskIncrementTick+0x154>)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	4b3e      	ldr	r3, [pc, #248]	; (800de4c <xTaskIncrementTick+0x158>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3301      	adds	r3, #1
 800dd58:	4a3c      	ldr	r2, [pc, #240]	; (800de4c <xTaskIncrementTick+0x158>)
 800dd5a:	6013      	str	r3, [r2, #0]
 800dd5c:	f000 facc 	bl	800e2f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd60:	4b3b      	ldr	r3, [pc, #236]	; (800de50 <xTaskIncrementTick+0x15c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d348      	bcc.n	800ddfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd6a:	4b36      	ldr	r3, [pc, #216]	; (800de44 <xTaskIncrementTick+0x150>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d104      	bne.n	800dd7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd74:	4b36      	ldr	r3, [pc, #216]	; (800de50 <xTaskIncrementTick+0x15c>)
 800dd76:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7a:	601a      	str	r2, [r3, #0]
					break;
 800dd7c:	e03e      	b.n	800ddfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7e:	4b31      	ldr	r3, [pc, #196]	; (800de44 <xTaskIncrementTick+0x150>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d203      	bcs.n	800dd9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd96:	4a2e      	ldr	r2, [pc, #184]	; (800de50 <xTaskIncrementTick+0x15c>)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd9c:	e02e      	b.n	800ddfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	3304      	adds	r3, #4
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fe fd5e 	bl	800c864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d004      	beq.n	800ddba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fe fd55 	bl	800c864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	409a      	lsls	r2, r3
 800ddc2:	4b24      	ldr	r3, [pc, #144]	; (800de54 <xTaskIncrementTick+0x160>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	4a22      	ldr	r2, [pc, #136]	; (800de54 <xTaskIncrementTick+0x160>)
 800ddca:	6013      	str	r3, [r2, #0]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4a1f      	ldr	r2, [pc, #124]	; (800de58 <xTaskIncrementTick+0x164>)
 800ddda:	441a      	add	r2, r3
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7fe fce1 	bl	800c7aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddec:	4b1b      	ldr	r3, [pc, #108]	; (800de5c <xTaskIncrementTick+0x168>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d3b9      	bcc.n	800dd6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddfa:	e7b6      	b.n	800dd6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddfc:	4b17      	ldr	r3, [pc, #92]	; (800de5c <xTaskIncrementTick+0x168>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de02:	4915      	ldr	r1, [pc, #84]	; (800de58 <xTaskIncrementTick+0x164>)
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d907      	bls.n	800de24 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800de14:	2301      	movs	r3, #1
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	e004      	b.n	800de24 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800de1a:	4b11      	ldr	r3, [pc, #68]	; (800de60 <xTaskIncrementTick+0x16c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3301      	adds	r3, #1
 800de20:	4a0f      	ldr	r2, [pc, #60]	; (800de60 <xTaskIncrementTick+0x16c>)
 800de22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800de24:	4b0f      	ldr	r3, [pc, #60]	; (800de64 <xTaskIncrementTick+0x170>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800de2c:	2301      	movs	r3, #1
 800de2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800de30:	697b      	ldr	r3, [r7, #20]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	200004f8 	.word	0x200004f8
 800de40:	200004d4 	.word	0x200004d4
 800de44:	20000488 	.word	0x20000488
 800de48:	2000048c 	.word	0x2000048c
 800de4c:	200004e8 	.word	0x200004e8
 800de50:	200004f0 	.word	0x200004f0
 800de54:	200004d8 	.word	0x200004d8
 800de58:	200003d4 	.word	0x200003d4
 800de5c:	200003d0 	.word	0x200003d0
 800de60:	200004e0 	.word	0x200004e0
 800de64:	200004e4 	.word	0x200004e4

0800de68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de6e:	4b3a      	ldr	r3, [pc, #232]	; (800df58 <vTaskSwitchContext+0xf0>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de76:	4b39      	ldr	r3, [pc, #228]	; (800df5c <vTaskSwitchContext+0xf4>)
 800de78:	2201      	movs	r2, #1
 800de7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de7c:	e067      	b.n	800df4e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800de7e:	4b37      	ldr	r3, [pc, #220]	; (800df5c <vTaskSwitchContext+0xf4>)
 800de80:	2200      	movs	r2, #0
 800de82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800de84:	4b36      	ldr	r3, [pc, #216]	; (800df60 <vTaskSwitchContext+0xf8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8a:	61fb      	str	r3, [r7, #28]
 800de8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d111      	bne.n	800dec0 <vTaskSwitchContext+0x58>
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	3304      	adds	r3, #4
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d10b      	bne.n	800dec0 <vTaskSwitchContext+0x58>
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	3308      	adds	r3, #8
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69ba      	ldr	r2, [r7, #24]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d105      	bne.n	800dec0 <vTaskSwitchContext+0x58>
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	330c      	adds	r3, #12
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	429a      	cmp	r2, r3
 800debe:	d008      	beq.n	800ded2 <vTaskSwitchContext+0x6a>
 800dec0:	4b27      	ldr	r3, [pc, #156]	; (800df60 <vTaskSwitchContext+0xf8>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	4b26      	ldr	r3, [pc, #152]	; (800df60 <vTaskSwitchContext+0xf8>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3334      	adds	r3, #52	; 0x34
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7f2 fe0a 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <vTaskSwitchContext+0xfc>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	fab3 f383 	clz	r3, r3
 800dede:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dee0:	7afb      	ldrb	r3, [r7, #11]
 800dee2:	f1c3 031f 	rsb	r3, r3, #31
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	491f      	ldr	r1, [pc, #124]	; (800df68 <vTaskSwitchContext+0x100>)
 800deea:	697a      	ldr	r2, [r7, #20]
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	440b      	add	r3, r1
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10b      	bne.n	800df14 <vTaskSwitchContext+0xac>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	b672      	cpsid	i
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	b662      	cpsie	i
 800df10:	607b      	str	r3, [r7, #4]
 800df12:	e7fe      	b.n	800df12 <vTaskSwitchContext+0xaa>
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4a12      	ldr	r2, [pc, #72]	; (800df68 <vTaskSwitchContext+0x100>)
 800df20:	4413      	add	r3, r2
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	605a      	str	r2, [r3, #4]
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	3308      	adds	r3, #8
 800df36:	429a      	cmp	r2, r3
 800df38:	d104      	bne.n	800df44 <vTaskSwitchContext+0xdc>
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	605a      	str	r2, [r3, #4]
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	4a05      	ldr	r2, [pc, #20]	; (800df60 <vTaskSwitchContext+0xf8>)
 800df4c:	6013      	str	r3, [r2, #0]
}
 800df4e:	bf00      	nop
 800df50:	3720      	adds	r7, #32
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	200004f8 	.word	0x200004f8
 800df5c:	200004e4 	.word	0x200004e4
 800df60:	200003d0 	.word	0x200003d0
 800df64:	200004d8 	.word	0x200004d8
 800df68:	200003d4 	.word	0x200003d4

0800df6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10b      	bne.n	800df94 <vTaskPlaceOnEventList+0x28>
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	b672      	cpsid	i
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	b662      	cpsie	i
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	e7fe      	b.n	800df92 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df94:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <vTaskPlaceOnEventList+0x48>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3318      	adds	r3, #24
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7fe fc28 	bl	800c7f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	6838      	ldr	r0, [r7, #0]
 800dfa6:	f000 fb9d 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>
}
 800dfaa:	bf00      	nop
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	200003d0 	.word	0x200003d0

0800dfb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10b      	bne.n	800dfe6 <xTaskRemoveFromEventList+0x2e>
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	b672      	cpsid	i
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	b662      	cpsie	i
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	e7fe      	b.n	800dfe4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3318      	adds	r3, #24
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe fc3a 	bl	800c864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dff0:	4b1d      	ldr	r3, [pc, #116]	; (800e068 <xTaskRemoveFromEventList+0xb0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d11c      	bne.n	800e032 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	3304      	adds	r3, #4
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fc31 	bl	800c864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e006:	2201      	movs	r2, #1
 800e008:	409a      	lsls	r2, r3
 800e00a:	4b18      	ldr	r3, [pc, #96]	; (800e06c <xTaskRemoveFromEventList+0xb4>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4313      	orrs	r3, r2
 800e010:	4a16      	ldr	r2, [pc, #88]	; (800e06c <xTaskRemoveFromEventList+0xb4>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4a13      	ldr	r2, [pc, #76]	; (800e070 <xTaskRemoveFromEventList+0xb8>)
 800e022:	441a      	add	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	3304      	adds	r3, #4
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f7fe fbbd 	bl	800c7aa <vListInsertEnd>
 800e030:	e005      	b.n	800e03e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	3318      	adds	r3, #24
 800e036:	4619      	mov	r1, r3
 800e038:	480e      	ldr	r0, [pc, #56]	; (800e074 <xTaskRemoveFromEventList+0xbc>)
 800e03a:	f7fe fbb6 	bl	800c7aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e042:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <xTaskRemoveFromEventList+0xc0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d905      	bls.n	800e058 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <xTaskRemoveFromEventList+0xc4>)
 800e052:	2201      	movs	r2, #1
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	e001      	b.n	800e05c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e058:	2300      	movs	r3, #0
 800e05a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e05c:	697b      	ldr	r3, [r7, #20]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	200004f8 	.word	0x200004f8
 800e06c:	200004d8 	.word	0x200004d8
 800e070:	200003d4 	.word	0x200003d4
 800e074:	20000490 	.word	0x20000490
 800e078:	200003d0 	.word	0x200003d0
 800e07c:	200004e4 	.word	0x200004e4

0800e080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e088:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <vTaskInternalSetTimeOutState+0x24>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e090:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <vTaskInternalSetTimeOutState+0x28>)
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	605a      	str	r2, [r3, #4]
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	200004e8 	.word	0x200004e8
 800e0a8:	200004d4 	.word	0x200004d4

0800e0ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10b      	bne.n	800e0d4 <xTaskCheckForTimeOut+0x28>
 800e0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c0:	b672      	cpsid	i
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	b662      	cpsie	i
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	e7fe      	b.n	800e0d2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d10b      	bne.n	800e0f2 <xTaskCheckForTimeOut+0x46>
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	b672      	cpsid	i
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	b662      	cpsie	i
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	e7fe      	b.n	800e0f0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e0f2:	f000 fc69 	bl	800e9c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0f6:	4b1d      	ldr	r3, [pc, #116]	; (800e16c <xTaskCheckForTimeOut+0xc0>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10e:	d102      	bne.n	800e116 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e110:	2300      	movs	r3, #0
 800e112:	61fb      	str	r3, [r7, #28]
 800e114:	e023      	b.n	800e15e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b15      	ldr	r3, [pc, #84]	; (800e170 <xTaskCheckForTimeOut+0xc4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d007      	beq.n	800e132 <xTaskCheckForTimeOut+0x86>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d302      	bcc.n	800e132 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e12c:	2301      	movs	r3, #1
 800e12e:	61fb      	str	r3, [r7, #28]
 800e130:	e015      	b.n	800e15e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d20b      	bcs.n	800e154 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	1ad2      	subs	r2, r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff ff99 	bl	800e080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e14e:	2300      	movs	r3, #0
 800e150:	61fb      	str	r3, [r7, #28]
 800e152:	e004      	b.n	800e15e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e15e:	f000 fc65 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800e162:	69fb      	ldr	r3, [r7, #28]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3720      	adds	r7, #32
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	200004d4 	.word	0x200004d4
 800e170:	200004e8 	.word	0x200004e8

0800e174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e178:	4b03      	ldr	r3, [pc, #12]	; (800e188 <vTaskMissedYield+0x14>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	601a      	str	r2, [r3, #0]
}
 800e17e:	bf00      	nop
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	200004e4 	.word	0x200004e4

0800e18c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e194:	f000 f854 	bl	800e240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e198:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <prvIdleTask+0x2c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d907      	bls.n	800e1b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e1a0:	4b06      	ldr	r3, [pc, #24]	; (800e1bc <prvIdleTask+0x30>)
 800e1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e1b0:	f7f2 fc92 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e1b4:	e7ee      	b.n	800e194 <prvIdleTask+0x8>
 800e1b6:	bf00      	nop
 800e1b8:	200003d4 	.word	0x200003d4
 800e1bc:	e000ed04 	.word	0xe000ed04

0800e1c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	607b      	str	r3, [r7, #4]
 800e1ca:	e00c      	b.n	800e1e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4a12      	ldr	r2, [pc, #72]	; (800e220 <prvInitialiseTaskLists+0x60>)
 800e1d8:	4413      	add	r3, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe fab8 	bl	800c750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b06      	cmp	r3, #6
 800e1ea:	d9ef      	bls.n	800e1cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1ec:	480d      	ldr	r0, [pc, #52]	; (800e224 <prvInitialiseTaskLists+0x64>)
 800e1ee:	f7fe faaf 	bl	800c750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1f2:	480d      	ldr	r0, [pc, #52]	; (800e228 <prvInitialiseTaskLists+0x68>)
 800e1f4:	f7fe faac 	bl	800c750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1f8:	480c      	ldr	r0, [pc, #48]	; (800e22c <prvInitialiseTaskLists+0x6c>)
 800e1fa:	f7fe faa9 	bl	800c750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1fe:	480c      	ldr	r0, [pc, #48]	; (800e230 <prvInitialiseTaskLists+0x70>)
 800e200:	f7fe faa6 	bl	800c750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e204:	480b      	ldr	r0, [pc, #44]	; (800e234 <prvInitialiseTaskLists+0x74>)
 800e206:	f7fe faa3 	bl	800c750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e20a:	4b0b      	ldr	r3, [pc, #44]	; (800e238 <prvInitialiseTaskLists+0x78>)
 800e20c:	4a05      	ldr	r2, [pc, #20]	; (800e224 <prvInitialiseTaskLists+0x64>)
 800e20e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e210:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <prvInitialiseTaskLists+0x7c>)
 800e212:	4a05      	ldr	r2, [pc, #20]	; (800e228 <prvInitialiseTaskLists+0x68>)
 800e214:	601a      	str	r2, [r3, #0]
}
 800e216:	bf00      	nop
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	200003d4 	.word	0x200003d4
 800e224:	20000460 	.word	0x20000460
 800e228:	20000474 	.word	0x20000474
 800e22c:	20000490 	.word	0x20000490
 800e230:	200004a4 	.word	0x200004a4
 800e234:	200004bc 	.word	0x200004bc
 800e238:	20000488 	.word	0x20000488
 800e23c:	2000048c 	.word	0x2000048c

0800e240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e246:	e019      	b.n	800e27c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e248:	f000 fbbe 	bl	800e9c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e24c:	4b0f      	ldr	r3, [pc, #60]	; (800e28c <prvCheckTasksWaitingTermination+0x4c>)
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3304      	adds	r3, #4
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fb03 	bl	800c864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e25e:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <prvCheckTasksWaitingTermination+0x50>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3b01      	subs	r3, #1
 800e264:	4a0a      	ldr	r2, [pc, #40]	; (800e290 <prvCheckTasksWaitingTermination+0x50>)
 800e266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e268:	4b0a      	ldr	r3, [pc, #40]	; (800e294 <prvCheckTasksWaitingTermination+0x54>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3b01      	subs	r3, #1
 800e26e:	4a09      	ldr	r2, [pc, #36]	; (800e294 <prvCheckTasksWaitingTermination+0x54>)
 800e270:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e272:	f000 fbdb 	bl	800ea2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f80e 	bl	800e298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <prvCheckTasksWaitingTermination+0x54>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1e1      	bne.n	800e248 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	200004a4 	.word	0x200004a4
 800e290:	200004d0 	.word	0x200004d0
 800e294:	200004b8 	.word	0x200004b8

0800e298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d108      	bne.n	800e2bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 fd78 	bl	800eda4 <vPortFree>
				vPortFree( pxTCB );
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fd75 	bl	800eda4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2ba:	e019      	b.n	800e2f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d103      	bne.n	800e2ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fd6c 	bl	800eda4 <vPortFree>
	}
 800e2cc:	e010      	b.n	800e2f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d00b      	beq.n	800e2f0 <prvDeleteTCB+0x58>
 800e2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2dc:	b672      	cpsid	i
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	b662      	cpsie	i
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	e7fe      	b.n	800e2ee <prvDeleteTCB+0x56>
	}
 800e2f0:	bf00      	nop
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2fe:	4b0c      	ldr	r3, [pc, #48]	; (800e330 <prvResetNextTaskUnblockTime+0x38>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d104      	bne.n	800e312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e308:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <prvResetNextTaskUnblockTime+0x3c>)
 800e30a:	f04f 32ff 	mov.w	r2, #4294967295
 800e30e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e310:	e008      	b.n	800e324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e312:	4b07      	ldr	r3, [pc, #28]	; (800e330 <prvResetNextTaskUnblockTime+0x38>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	4a04      	ldr	r2, [pc, #16]	; (800e334 <prvResetNextTaskUnblockTime+0x3c>)
 800e322:	6013      	str	r3, [r2, #0]
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	20000488 	.word	0x20000488
 800e334:	200004f0 	.word	0x200004f0

0800e338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <xTaskGetSchedulerState+0x34>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d102      	bne.n	800e34c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e346:	2301      	movs	r3, #1
 800e348:	607b      	str	r3, [r7, #4]
 800e34a:	e008      	b.n	800e35e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e34c:	4b08      	ldr	r3, [pc, #32]	; (800e370 <xTaskGetSchedulerState+0x38>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e354:	2302      	movs	r3, #2
 800e356:	607b      	str	r3, [r7, #4]
 800e358:	e001      	b.n	800e35e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e35a:	2300      	movs	r3, #0
 800e35c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e35e:	687b      	ldr	r3, [r7, #4]
	}
 800e360:	4618      	mov	r0, r3
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	200004dc 	.word	0x200004dc
 800e370:	200004f8 	.word	0x200004f8

0800e374 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d069      	beq.n	800e45e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38e:	4b36      	ldr	r3, [pc, #216]	; (800e468 <xTaskPriorityInherit+0xf4>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e394:	429a      	cmp	r2, r3
 800e396:	d259      	bcs.n	800e44c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	db06      	blt.n	800e3ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a0:	4b31      	ldr	r3, [pc, #196]	; (800e468 <xTaskPriorityInherit+0xf4>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a6:	f1c3 0207 	rsb	r2, r3, #7
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	6959      	ldr	r1, [r3, #20]
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4a2b      	ldr	r2, [pc, #172]	; (800e46c <xTaskPriorityInherit+0xf8>)
 800e3c0:	4413      	add	r3, r2
 800e3c2:	4299      	cmp	r1, r3
 800e3c4:	d13a      	bne.n	800e43c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fa4a 	bl	800c864 <uxListRemove>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d115      	bne.n	800e402 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3da:	4924      	ldr	r1, [pc, #144]	; (800e46c <xTaskPriorityInherit+0xf8>)
 800e3dc:	4613      	mov	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	440b      	add	r3, r1
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10a      	bne.n	800e402 <xTaskPriorityInherit+0x8e>
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f6:	43da      	mvns	r2, r3
 800e3f8:	4b1d      	ldr	r3, [pc, #116]	; (800e470 <xTaskPriorityInherit+0xfc>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	4a1c      	ldr	r2, [pc, #112]	; (800e470 <xTaskPriorityInherit+0xfc>)
 800e400:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e402:	4b19      	ldr	r3, [pc, #100]	; (800e468 <xTaskPriorityInherit+0xf4>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e410:	2201      	movs	r2, #1
 800e412:	409a      	lsls	r2, r3
 800e414:	4b16      	ldr	r3, [pc, #88]	; (800e470 <xTaskPriorityInherit+0xfc>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4313      	orrs	r3, r2
 800e41a:	4a15      	ldr	r2, [pc, #84]	; (800e470 <xTaskPriorityInherit+0xfc>)
 800e41c:	6013      	str	r3, [r2, #0]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4a10      	ldr	r2, [pc, #64]	; (800e46c <xTaskPriorityInherit+0xf8>)
 800e42c:	441a      	add	r2, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	3304      	adds	r3, #4
 800e432:	4619      	mov	r1, r3
 800e434:	4610      	mov	r0, r2
 800e436:	f7fe f9b8 	bl	800c7aa <vListInsertEnd>
 800e43a:	e004      	b.n	800e446 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e43c:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <xTaskPriorityInherit+0xf4>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e446:	2301      	movs	r3, #1
 800e448:	60fb      	str	r3, [r7, #12]
 800e44a:	e008      	b.n	800e45e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <xTaskPriorityInherit+0xf4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e456:	429a      	cmp	r2, r3
 800e458:	d201      	bcs.n	800e45e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e45a:	2301      	movs	r3, #1
 800e45c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e45e:	68fb      	ldr	r3, [r7, #12]
	}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	200003d0 	.word	0x200003d0
 800e46c:	200003d4 	.word	0x200003d4
 800e470:	200004d8 	.word	0x200004d8

0800e474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d070      	beq.n	800e56c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e48a:	4b3b      	ldr	r3, [pc, #236]	; (800e578 <xTaskPriorityDisinherit+0x104>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	429a      	cmp	r2, r3
 800e492:	d00b      	beq.n	800e4ac <xTaskPriorityDisinherit+0x38>
 800e494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e498:	b672      	cpsid	i
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	b662      	cpsie	i
 800e4a8:	60fb      	str	r3, [r7, #12]
 800e4aa:	e7fe      	b.n	800e4aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10b      	bne.n	800e4cc <xTaskPriorityDisinherit+0x58>
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	b672      	cpsid	i
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	b662      	cpsie	i
 800e4c8:	60bb      	str	r3, [r7, #8]
 800e4ca:	e7fe      	b.n	800e4ca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d044      	beq.n	800e56c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d140      	bne.n	800e56c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe f9b8 	bl	800c864 <uxListRemove>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d115      	bne.n	800e526 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	491f      	ldr	r1, [pc, #124]	; (800e57c <xTaskPriorityDisinherit+0x108>)
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	440b      	add	r3, r1
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10a      	bne.n	800e526 <xTaskPriorityDisinherit+0xb2>
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e514:	2201      	movs	r2, #1
 800e516:	fa02 f303 	lsl.w	r3, r2, r3
 800e51a:	43da      	mvns	r2, r3
 800e51c:	4b18      	ldr	r3, [pc, #96]	; (800e580 <xTaskPriorityDisinherit+0x10c>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4013      	ands	r3, r2
 800e522:	4a17      	ldr	r2, [pc, #92]	; (800e580 <xTaskPriorityDisinherit+0x10c>)
 800e524:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e532:	f1c3 0207 	rsb	r2, r3, #7
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	2201      	movs	r2, #1
 800e540:	409a      	lsls	r2, r3
 800e542:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <xTaskPriorityDisinherit+0x10c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4313      	orrs	r3, r2
 800e548:	4a0d      	ldr	r2, [pc, #52]	; (800e580 <xTaskPriorityDisinherit+0x10c>)
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4a08      	ldr	r2, [pc, #32]	; (800e57c <xTaskPriorityDisinherit+0x108>)
 800e55a:	441a      	add	r2, r3
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f7fe f921 	bl	800c7aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e56c:	697b      	ldr	r3, [r7, #20]
	}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	200003d0 	.word	0x200003d0
 800e57c:	200003d4 	.word	0x200003d4
 800e580:	200004d8 	.word	0x200004d8

0800e584 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e584:	b580      	push	{r7, lr}
 800e586:	b088      	sub	sp, #32
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e592:	2301      	movs	r3, #1
 800e594:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8085 	beq.w	800e6a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d10b      	bne.n	800e5be <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5aa:	b672      	cpsid	i
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	b662      	cpsie	i
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	e7fe      	b.n	800e5bc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d902      	bls.n	800e5ce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	e002      	b.n	800e5d4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d8:	69fa      	ldr	r2, [r7, #28]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d064      	beq.n	800e6a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d15f      	bne.n	800e6a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5e8:	4b31      	ldr	r3, [pc, #196]	; (800e6b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d10b      	bne.n	800e60a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	b672      	cpsid	i
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	b662      	cpsie	i
 800e606:	60bb      	str	r3, [r7, #8]
 800e608:	e7fe      	b.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	db04      	blt.n	800e628 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	f1c3 0207 	rsb	r2, r3, #7
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	6959      	ldr	r1, [r3, #20]
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	4613      	mov	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4413      	add	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4a1f      	ldr	r2, [pc, #124]	; (800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e638:	4413      	add	r3, r2
 800e63a:	4299      	cmp	r1, r3
 800e63c:	d134      	bne.n	800e6a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	3304      	adds	r3, #4
 800e642:	4618      	mov	r0, r3
 800e644:	f7fe f90e 	bl	800c864 <uxListRemove>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d115      	bne.n	800e67a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	4918      	ldr	r1, [pc, #96]	; (800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	440b      	add	r3, r1
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10a      	bne.n	800e67a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	2201      	movs	r2, #1
 800e66a:	fa02 f303 	lsl.w	r3, r2, r3
 800e66e:	43da      	mvns	r2, r3
 800e670:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4013      	ands	r3, r2
 800e676:	4a10      	ldr	r2, [pc, #64]	; (800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e678:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67e:	2201      	movs	r2, #1
 800e680:	409a      	lsls	r2, r3
 800e682:	4b0d      	ldr	r3, [pc, #52]	; (800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4313      	orrs	r3, r2
 800e688:	4a0b      	ldr	r2, [pc, #44]	; (800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4a06      	ldr	r2, [pc, #24]	; (800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e69a:	441a      	add	r2, r3
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4610      	mov	r0, r2
 800e6a4:	f7fe f881 	bl	800c7aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6a8:	bf00      	nop
 800e6aa:	3720      	adds	r7, #32
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	200003d0 	.word	0x200003d0
 800e6b4:	200003d4 	.word	0x200003d4
 800e6b8:	200004d8 	.word	0x200004d8

0800e6bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6bc:	b480      	push	{r7}
 800e6be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d004      	beq.n	800e6d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6c8:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6ce:	3201      	adds	r2, #1
 800e6d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6d2:	4b03      	ldr	r3, [pc, #12]	; (800e6e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
	}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	200003d0 	.word	0x200003d0

0800e6e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6ee:	4b29      	ldr	r3, [pc, #164]	; (800e794 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f4:	4b28      	ldr	r3, [pc, #160]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe f8b2 	bl	800c864 <uxListRemove>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10b      	bne.n	800e71e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e706:	4b24      	ldr	r3, [pc, #144]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	2201      	movs	r2, #1
 800e70e:	fa02 f303 	lsl.w	r3, r2, r3
 800e712:	43da      	mvns	r2, r3
 800e714:	4b21      	ldr	r3, [pc, #132]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4013      	ands	r3, r2
 800e71a:	4a20      	ldr	r2, [pc, #128]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e71c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e724:	d10a      	bne.n	800e73c <prvAddCurrentTaskToDelayedList+0x58>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d007      	beq.n	800e73c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72c:	4b1a      	ldr	r3, [pc, #104]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3304      	adds	r3, #4
 800e732:	4619      	mov	r1, r3
 800e734:	481a      	ldr	r0, [pc, #104]	; (800e7a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e736:	f7fe f838 	bl	800c7aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e73a:	e026      	b.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4413      	add	r3, r2
 800e742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e744:	4b14      	ldr	r3, [pc, #80]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d209      	bcs.n	800e768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e754:	4b13      	ldr	r3, [pc, #76]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3304      	adds	r3, #4
 800e75e:	4619      	mov	r1, r3
 800e760:	4610      	mov	r0, r2
 800e762:	f7fe f846 	bl	800c7f2 <vListInsert>
}
 800e766:	e010      	b.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3304      	adds	r3, #4
 800e772:	4619      	mov	r1, r3
 800e774:	4610      	mov	r0, r2
 800e776:	f7fe f83c 	bl	800c7f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e77a:	4b0c      	ldr	r3, [pc, #48]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d202      	bcs.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e784:	4a09      	ldr	r2, [pc, #36]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	6013      	str	r3, [r2, #0]
}
 800e78a:	bf00      	nop
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	200004d4 	.word	0x200004d4
 800e798:	200003d0 	.word	0x200003d0
 800e79c:	200004d8 	.word	0x200004d8
 800e7a0:	200004bc 	.word	0x200004bc
 800e7a4:	2000048c 	.word	0x2000048c
 800e7a8:	20000488 	.word	0x20000488
 800e7ac:	200004f0 	.word	0x200004f0

0800e7b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3b04      	subs	r3, #4
 800e7c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3b04      	subs	r3, #4
 800e7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f023 0201 	bic.w	r2, r3, #1
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	3b04      	subs	r3, #4
 800e7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7e0:	4a0c      	ldr	r2, [pc, #48]	; (800e814 <pxPortInitialiseStack+0x64>)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3b14      	subs	r3, #20
 800e7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3b04      	subs	r3, #4
 800e7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f06f 0202 	mvn.w	r2, #2
 800e7fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3b20      	subs	r3, #32
 800e804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e806:	68fb      	ldr	r3, [r7, #12]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	0800e819 	.word	0x0800e819

0800e818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e822:	4b13      	ldr	r3, [pc, #76]	; (800e870 <prvTaskExitError+0x58>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82a:	d00b      	beq.n	800e844 <prvTaskExitError+0x2c>
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	b672      	cpsid	i
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	b662      	cpsie	i
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	e7fe      	b.n	800e842 <prvTaskExitError+0x2a>
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	b672      	cpsid	i
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	b662      	cpsie	i
 800e858:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e85a:	bf00      	nop
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d0fc      	beq.n	800e85c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e862:	bf00      	nop
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000024 	.word	0x20000024
	...

0800e880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <pxCurrentTCBConst2>)
 800e882:	6819      	ldr	r1, [r3, #0]
 800e884:	6808      	ldr	r0, [r1, #0]
 800e886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88a:	f380 8809 	msr	PSP, r0
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f04f 0000 	mov.w	r0, #0
 800e896:	f380 8811 	msr	BASEPRI, r0
 800e89a:	4770      	bx	lr
 800e89c:	f3af 8000 	nop.w

0800e8a0 <pxCurrentTCBConst2>:
 800e8a0:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop

0800e8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8a8:	4808      	ldr	r0, [pc, #32]	; (800e8cc <prvPortStartFirstTask+0x24>)
 800e8aa:	6800      	ldr	r0, [r0, #0]
 800e8ac:	6800      	ldr	r0, [r0, #0]
 800e8ae:	f380 8808 	msr	MSP, r0
 800e8b2:	f04f 0000 	mov.w	r0, #0
 800e8b6:	f380 8814 	msr	CONTROL, r0
 800e8ba:	b662      	cpsie	i
 800e8bc:	b661      	cpsie	f
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	df00      	svc	0
 800e8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8ca:	bf00      	nop
 800e8cc:	e000ed08 	.word	0xe000ed08

0800e8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8d6:	4b36      	ldr	r3, [pc, #216]	; (800e9b0 <xPortStartScheduler+0xe0>)
 800e8d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	22ff      	movs	r2, #255	; 0xff
 800e8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	4b2e      	ldr	r3, [pc, #184]	; (800e9b4 <xPortStartScheduler+0xe4>)
 800e8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8fe:	4b2e      	ldr	r3, [pc, #184]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e900:	2207      	movs	r2, #7
 800e902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e904:	e009      	b.n	800e91a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e906:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	4a2a      	ldr	r2, [pc, #168]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e910:	78fb      	ldrb	r3, [r7, #3]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	b2db      	uxtb	r3, r3
 800e918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e91a:	78fb      	ldrb	r3, [r7, #3]
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e922:	2b80      	cmp	r3, #128	; 0x80
 800e924:	d0ef      	beq.n	800e906 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e926:	4b24      	ldr	r3, [pc, #144]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f1c3 0307 	rsb	r3, r3, #7
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d00b      	beq.n	800e94a <xPortStartScheduler+0x7a>
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	b672      	cpsid	i
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	b662      	cpsie	i
 800e946:	60bb      	str	r3, [r7, #8]
 800e948:	e7fe      	b.n	800e948 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e94a:	4b1b      	ldr	r3, [pc, #108]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	021b      	lsls	r3, r3, #8
 800e950:	4a19      	ldr	r2, [pc, #100]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e952:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e954:	4b18      	ldr	r3, [pc, #96]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e95c:	4a16      	ldr	r2, [pc, #88]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e95e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	b2da      	uxtb	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e968:	4b14      	ldr	r3, [pc, #80]	; (800e9bc <xPortStartScheduler+0xec>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a13      	ldr	r2, [pc, #76]	; (800e9bc <xPortStartScheduler+0xec>)
 800e96e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e972:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e974:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <xPortStartScheduler+0xec>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a10      	ldr	r2, [pc, #64]	; (800e9bc <xPortStartScheduler+0xec>)
 800e97a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e97e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e980:	f000 f8d4 	bl	800eb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e984:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <xPortStartScheduler+0xf0>)
 800e986:	2200      	movs	r2, #0
 800e988:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e98a:	f000 f8f3 	bl	800eb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <xPortStartScheduler+0xf4>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a0c      	ldr	r2, [pc, #48]	; (800e9c4 <xPortStartScheduler+0xf4>)
 800e994:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e998:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e99a:	f7ff ff85 	bl	800e8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e99e:	f7ff fa63 	bl	800de68 <vTaskSwitchContext>
	prvTaskExitError();
 800e9a2:	f7ff ff39 	bl	800e818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	e000e400 	.word	0xe000e400
 800e9b4:	200004fc 	.word	0x200004fc
 800e9b8:	20000500 	.word	0x20000500
 800e9bc:	e000ed20 	.word	0xe000ed20
 800e9c0:	20000024 	.word	0x20000024
 800e9c4:	e000ef34 	.word	0xe000ef34

0800e9c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	b672      	cpsid	i
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	b662      	cpsie	i
 800e9e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d110      	bne.n	800ea18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <vPortEnterCritical+0x60>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00b      	beq.n	800ea18 <vPortEnterCritical+0x50>
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	b672      	cpsid	i
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	b662      	cpsie	i
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	e7fe      	b.n	800ea16 <vPortEnterCritical+0x4e>
	}
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	20000024 	.word	0x20000024
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <vPortExitCritical+0x50>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <vPortExitCritical+0x26>
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	b672      	cpsid	i
 800ea40:	f383 8811 	msr	BASEPRI, r3
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	b662      	cpsie	i
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	e7fe      	b.n	800ea50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ea52:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <vPortExitCritical+0x50>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	3b01      	subs	r3, #1
 800ea58:	4a08      	ldr	r2, [pc, #32]	; (800ea7c <vPortExitCritical+0x50>)
 800ea5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <vPortExitCritical+0x50>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d104      	bne.n	800ea6e <vPortExitCritical+0x42>
 800ea64:	2300      	movs	r3, #0
 800ea66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	20000024 	.word	0x20000024

0800ea80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea80:	f3ef 8009 	mrs	r0, PSP
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	4b15      	ldr	r3, [pc, #84]	; (800eae0 <pxCurrentTCBConst>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	f01e 0f10 	tst.w	lr, #16
 800ea90:	bf08      	it	eq
 800ea92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	6010      	str	r0, [r2, #0]
 800ea9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eaa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eaa4:	b672      	cpsid	i
 800eaa6:	f380 8811 	msr	BASEPRI, r0
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	b662      	cpsie	i
 800eab4:	f7ff f9d8 	bl	800de68 <vTaskSwitchContext>
 800eab8:	f04f 0000 	mov.w	r0, #0
 800eabc:	f380 8811 	msr	BASEPRI, r0
 800eac0:	bc09      	pop	{r0, r3}
 800eac2:	6819      	ldr	r1, [r3, #0]
 800eac4:	6808      	ldr	r0, [r1, #0]
 800eac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaca:	f01e 0f10 	tst.w	lr, #16
 800eace:	bf08      	it	eq
 800ead0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ead4:	f380 8809 	msr	PSP, r0
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <pxCurrentTCBConst>:
 800eae0:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop

0800eae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	b672      	cpsid	i
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	b662      	cpsie	i
 800eb02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb04:	f7ff f8f6 	bl	800dcf4 <xTaskIncrementTick>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb0e:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <SysTick_Handler+0x40>)
 800eb10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	2300      	movs	r3, #0
 800eb18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	e000ed04 	.word	0xe000ed04

0800eb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb30:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <vPortSetupTimerInterrupt+0x34>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb36:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <vPortSetupTimerInterrupt+0x38>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <vPortSetupTimerInterrupt+0x3c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a0a      	ldr	r2, [pc, #40]	; (800eb6c <vPortSetupTimerInterrupt+0x40>)
 800eb42:	fba2 2303 	umull	r2, r3, r2, r3
 800eb46:	099b      	lsrs	r3, r3, #6
 800eb48:	4a09      	ldr	r2, [pc, #36]	; (800eb70 <vPortSetupTimerInterrupt+0x44>)
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb4e:	4b04      	ldr	r3, [pc, #16]	; (800eb60 <vPortSetupTimerInterrupt+0x34>)
 800eb50:	2207      	movs	r2, #7
 800eb52:	601a      	str	r2, [r3, #0]
}
 800eb54:	bf00      	nop
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	e000e010 	.word	0xe000e010
 800eb64:	e000e018 	.word	0xe000e018
 800eb68:	20000018 	.word	0x20000018
 800eb6c:	10624dd3 	.word	0x10624dd3
 800eb70:	e000e014 	.word	0xe000e014

0800eb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb84 <vPortEnableVFP+0x10>
 800eb78:	6801      	ldr	r1, [r0, #0]
 800eb7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb7e:	6001      	str	r1, [r0, #0]
 800eb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb82:	bf00      	nop
 800eb84:	e000ed88 	.word	0xe000ed88

0800eb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb8e:	f3ef 8305 	mrs	r3, IPSR
 800eb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b0f      	cmp	r3, #15
 800eb98:	d915      	bls.n	800ebc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb9a:	4a18      	ldr	r2, [pc, #96]	; (800ebfc <vPortValidateInterruptPriority+0x74>)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eba4:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <vPortValidateInterruptPriority+0x78>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	7afa      	ldrb	r2, [r7, #11]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d20b      	bcs.n	800ebc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	b672      	cpsid	i
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	b662      	cpsie	i
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	e7fe      	b.n	800ebc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ebc6:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <vPortValidateInterruptPriority+0x7c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ebce:	4b0e      	ldr	r3, [pc, #56]	; (800ec08 <vPortValidateInterruptPriority+0x80>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d90b      	bls.n	800ebee <vPortValidateInterruptPriority+0x66>
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	b672      	cpsid	i
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	b662      	cpsie	i
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	e7fe      	b.n	800ebec <vPortValidateInterruptPriority+0x64>
	}
 800ebee:	bf00      	nop
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	e000e3f0 	.word	0xe000e3f0
 800ec00:	200004fc 	.word	0x200004fc
 800ec04:	e000ed0c 	.word	0xe000ed0c
 800ec08:	20000500 	.word	0x20000500

0800ec0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b08a      	sub	sp, #40	; 0x28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec14:	2300      	movs	r3, #0
 800ec16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec18:	f7fe ff9e 	bl	800db58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec1c:	4b5c      	ldr	r3, [pc, #368]	; (800ed90 <pvPortMalloc+0x184>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec24:	f000 f91a 	bl	800ee5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec28:	4b5a      	ldr	r3, [pc, #360]	; (800ed94 <pvPortMalloc+0x188>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4013      	ands	r3, r2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f040 8090 	bne.w	800ed56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d01e      	beq.n	800ec7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ec3c:	2208      	movs	r2, #8
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4413      	add	r3, r2
 800ec42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f003 0307 	and.w	r3, r3, #7
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d015      	beq.n	800ec7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f023 0307 	bic.w	r3, r3, #7
 800ec54:	3308      	adds	r3, #8
 800ec56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f003 0307 	and.w	r3, r3, #7
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00b      	beq.n	800ec7a <pvPortMalloc+0x6e>
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	b672      	cpsid	i
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	b662      	cpsie	i
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	e7fe      	b.n	800ec78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d06a      	beq.n	800ed56 <pvPortMalloc+0x14a>
 800ec80:	4b45      	ldr	r3, [pc, #276]	; (800ed98 <pvPortMalloc+0x18c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d865      	bhi.n	800ed56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec8a:	4b44      	ldr	r3, [pc, #272]	; (800ed9c <pvPortMalloc+0x190>)
 800ec8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec8e:	4b43      	ldr	r3, [pc, #268]	; (800ed9c <pvPortMalloc+0x190>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec94:	e004      	b.n	800eca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d903      	bls.n	800ecb2 <pvPortMalloc+0xa6>
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1f1      	bne.n	800ec96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ecb2:	4b37      	ldr	r3, [pc, #220]	; (800ed90 <pvPortMalloc+0x184>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d04c      	beq.n	800ed56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	4413      	add	r3, r2
 800ecc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	1ad2      	subs	r2, r2, r3
 800ecd6:	2308      	movs	r3, #8
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d920      	bls.n	800ed20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ecde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4413      	add	r3, r2
 800ece4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	f003 0307 	and.w	r3, r3, #7
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00b      	beq.n	800ed08 <pvPortMalloc+0xfc>
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	b672      	cpsid	i
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	b662      	cpsie	i
 800ed04:	613b      	str	r3, [r7, #16]
 800ed06:	e7fe      	b.n	800ed06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	685a      	ldr	r2, [r3, #4]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	1ad2      	subs	r2, r2, r3
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed1a:	69b8      	ldr	r0, [r7, #24]
 800ed1c:	f000 f900 	bl	800ef20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed20:	4b1d      	ldr	r3, [pc, #116]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	4a1b      	ldr	r2, [pc, #108]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed2e:	4b1a      	ldr	r3, [pc, #104]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <pvPortMalloc+0x194>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d203      	bcs.n	800ed42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed3a:	4b17      	ldr	r3, [pc, #92]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a18      	ldr	r2, [pc, #96]	; (800eda0 <pvPortMalloc+0x194>)
 800ed40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <pvPortMalloc+0x188>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed56:	f7fe ff0d 	bl	800db74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d101      	bne.n	800ed64 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ed60:	f7f1 fecc 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	f003 0307 	and.w	r3, r3, #7
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00b      	beq.n	800ed86 <pvPortMalloc+0x17a>
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	b672      	cpsid	i
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	b662      	cpsie	i
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e7fe      	b.n	800ed84 <pvPortMalloc+0x178>
	return pvReturn;
 800ed86:	69fb      	ldr	r3, [r7, #28]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3728      	adds	r7, #40	; 0x28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	2000850c 	.word	0x2000850c
 800ed94:	20008518 	.word	0x20008518
 800ed98:	20008510 	.word	0x20008510
 800ed9c:	20008504 	.word	0x20008504
 800eda0:	20008514 	.word	0x20008514

0800eda4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d04a      	beq.n	800ee4c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800edb6:	2308      	movs	r3, #8
 800edb8:	425b      	negs	r3, r3
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	4413      	add	r3, r2
 800edbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	4b22      	ldr	r3, [pc, #136]	; (800ee54 <vPortFree+0xb0>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4013      	ands	r3, r2
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10b      	bne.n	800edea <vPortFree+0x46>
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	b672      	cpsid	i
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	b662      	cpsie	i
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	e7fe      	b.n	800ede8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <vPortFree+0x66>
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	b672      	cpsid	i
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	b662      	cpsie	i
 800ee06:	60bb      	str	r3, [r7, #8]
 800ee08:	e7fe      	b.n	800ee08 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	4b11      	ldr	r3, [pc, #68]	; (800ee54 <vPortFree+0xb0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4013      	ands	r3, r2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d019      	beq.n	800ee4c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d115      	bne.n	800ee4c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	4b0b      	ldr	r3, [pc, #44]	; (800ee54 <vPortFree+0xb0>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	43db      	mvns	r3, r3
 800ee2a:	401a      	ands	r2, r3
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee30:	f7fe fe92 	bl	800db58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	4b07      	ldr	r3, [pc, #28]	; (800ee58 <vPortFree+0xb4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	4a06      	ldr	r2, [pc, #24]	; (800ee58 <vPortFree+0xb4>)
 800ee40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee42:	6938      	ldr	r0, [r7, #16]
 800ee44:	f000 f86c 	bl	800ef20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ee48:	f7fe fe94 	bl	800db74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee4c:	bf00      	nop
 800ee4e:	3718      	adds	r7, #24
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20008518 	.word	0x20008518
 800ee58:	20008510 	.word	0x20008510

0800ee5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee68:	4b27      	ldr	r3, [pc, #156]	; (800ef08 <prvHeapInit+0xac>)
 800ee6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00c      	beq.n	800ee90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3307      	adds	r3, #7
 800ee7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f023 0307 	bic.w	r3, r3, #7
 800ee82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <prvHeapInit+0xac>)
 800ee8c:	4413      	add	r3, r2
 800ee8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee94:	4a1d      	ldr	r2, [pc, #116]	; (800ef0c <prvHeapInit+0xb0>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee9a:	4b1c      	ldr	r3, [pc, #112]	; (800ef0c <prvHeapInit+0xb0>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eea8:	2208      	movs	r2, #8
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	1a9b      	subs	r3, r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f023 0307 	bic.w	r3, r3, #7
 800eeb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4a15      	ldr	r2, [pc, #84]	; (800ef10 <prvHeapInit+0xb4>)
 800eebc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eebe:	4b14      	ldr	r3, [pc, #80]	; (800ef10 <prvHeapInit+0xb4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2200      	movs	r2, #0
 800eec4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eec6:	4b12      	ldr	r3, [pc, #72]	; (800ef10 <prvHeapInit+0xb4>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	1ad2      	subs	r2, r2, r3
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eedc:	4b0c      	ldr	r3, [pc, #48]	; (800ef10 <prvHeapInit+0xb4>)
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	4a0a      	ldr	r2, [pc, #40]	; (800ef14 <prvHeapInit+0xb8>)
 800eeea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	4a09      	ldr	r2, [pc, #36]	; (800ef18 <prvHeapInit+0xbc>)
 800eef2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eef4:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <prvHeapInit+0xc0>)
 800eef6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eefa:	601a      	str	r2, [r3, #0]
}
 800eefc:	bf00      	nop
 800eefe:	3714      	adds	r7, #20
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	20000504 	.word	0x20000504
 800ef0c:	20008504 	.word	0x20008504
 800ef10:	2000850c 	.word	0x2000850c
 800ef14:	20008514 	.word	0x20008514
 800ef18:	20008510 	.word	0x20008510
 800ef1c:	20008518 	.word	0x20008518

0800ef20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef28:	4b28      	ldr	r3, [pc, #160]	; (800efcc <prvInsertBlockIntoFreeList+0xac>)
 800ef2a:	60fb      	str	r3, [r7, #12]
 800ef2c:	e002      	b.n	800ef34 <prvInsertBlockIntoFreeList+0x14>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d8f7      	bhi.n	800ef2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	4413      	add	r3, r2
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d108      	bne.n	800ef62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	685a      	ldr	r2, [r3, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	441a      	add	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	441a      	add	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d118      	bne.n	800efa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	4b15      	ldr	r3, [pc, #84]	; (800efd0 <prvInsertBlockIntoFreeList+0xb0>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d00d      	beq.n	800ef9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	441a      	add	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	e008      	b.n	800efb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	; (800efd0 <prvInsertBlockIntoFreeList+0xb0>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	e003      	b.n	800efb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d002      	beq.n	800efbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efbe:	bf00      	nop
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	20008504 	.word	0x20008504
 800efd0:	2000850c 	.word	0x2000850c

0800efd4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800efd8:	f005 fa80 	bl	80144dc <touchgfx_init>
}
 800efdc:	bf00      	nop
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800efe4:	f005 faa4 	bl	8014530 <touchgfx_taskEntry>
}
 800efe8:	bf00      	nop
 800efea:	bd80      	pop	{r7, pc}

0800efec <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
    {
 800eff4:	4a04      	ldr	r2, [pc, #16]	; (800f008 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	601a      	str	r2, [r3, #0]
    }
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	08026fcc 	.word	0x08026fcc

0800f00c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    }
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ffe9 	bl	800efec <_ZN8touchgfx12FontProviderD1Ev>
 800f01a:	2104      	movs	r1, #4
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f016 fbba 	bl	8025796 <_ZdlPvj>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	460b      	mov	r3, r1
 800f036:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f038:	887b      	ldrh	r3, [r7, #2]
 800f03a:	2b07      	cmp	r3, #7
 800f03c:	d83a      	bhi.n	800f0b4 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f03e:	a201      	add	r2, pc, #4	; (adr r2, 800f044 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f06f 	.word	0x0800f06f
 800f04c:	0800f079 	.word	0x0800f079
 800f050:	0800f083 	.word	0x0800f083
 800f054:	0800f08d 	.word	0x0800f08d
 800f058:	0800f097 	.word	0x0800f097
 800f05c:	0800f0a1 	.word	0x0800f0a1
 800f060:	0800f0ab 	.word	0x0800f0ab
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f064:	f003 fae8 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f068:	4603      	mov	r3, r0
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	e023      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f06e:	f003 fae3 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f072:	4603      	mov	r3, r0
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	e01e      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f078:	f003 fade 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f07c:	4603      	mov	r3, r0
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	e019      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f082:	f003 fad9 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f086:	4603      	mov	r3, r0
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	e014      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f08c:	f003 fad4 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f090:	4603      	mov	r3, r0
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	e00f      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f096:	f003 facf 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f09a:	4603      	mov	r3, r0
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	e00a      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f0a0:	f003 faca 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	e005      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f0aa:	f003 fac5 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	e000      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f0b4:	2300      	movs	r3, #0
    }
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop

0800f0c0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff8b 	bl	800efec <_ZN8touchgfx12FontProviderD1Ev>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	08026fb8 	.word	0x08026fb8

0800f0e4 <_ZN23ApplicationFontProviderD0Ev>:
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ffe7 	bl	800f0c0 <_ZN23ApplicationFontProviderD1Ev>
 800f0f2:	2104      	movs	r1, #4
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f016 fb4e 	bl	8025796 <_ZdlPvj>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	4a04      	ldr	r2, [pc, #16]	; (800f120 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4618      	mov	r0, r3
 800f116:	370c      	adds	r7, #12
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	08029258 	.word	0x08029258

0800f124 <_ZN8touchgfx4FontD0Ev>:
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ffe9 	bl	800f104 <_ZN8touchgfx4FontD1Ev>
 800f132:	2110      	movs	r1, #16
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f016 fb2e 	bl	8025796 <_ZdlPvj>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f144:	b590      	push	{r4, r7, lr}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3308      	adds	r3, #8
 800f15e:	681c      	ldr	r4, [r3, #0]
 800f160:	f107 030f 	add.w	r3, r7, #15
 800f164:	f107 0210 	add.w	r2, r7, #16
 800f168:	8879      	ldrh	r1, [r7, #2]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	47a0      	blx	r4
 800f16e:	6178      	str	r0, [r7, #20]
        return glyph;
 800f170:	697b      	ldr	r3, [r7, #20]
    }
 800f172:	4618      	mov	r0, r3
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd90      	pop	{r4, r7, pc}

0800f17a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	895b      	ldrh	r3, [r3, #10]
    }
 800f186:	4618      	mov	r0, r3
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f192:	b480      	push	{r7}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	899b      	ldrh	r3, [r3, #12]
    }
 800f19e:	4618      	mov	r0, r3
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f1aa:	b480      	push	{r7}
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	889b      	ldrh	r3, [r3, #4]
    }
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f1c2:	b480      	push	{r7}
 800f1c4:	b083      	sub	sp, #12
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	889a      	ldrh	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	799b      	ldrb	r3, [r3, #6]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	4413      	add	r3, r2
 800f1d6:	b29b      	uxth	r3, r3
    }
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	79db      	ldrb	r3, [r3, #7]
 800f1f0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f1f4:	b2db      	uxtb	r3, r3
    }
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	370c      	adds	r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f202:	b480      	push	{r7}
 800f204:	b083      	sub	sp, #12
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	79db      	ldrb	r3, [r3, #7]
 800f20e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f212:	b2db      	uxtb	r3, r3
    }
 800f214:	4618      	mov	r0, r3
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	4a05      	ldr	r2, [pc, #20]	; (800f240 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ff67 	bl	800f104 <_ZN8touchgfx4FontD1Ev>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	08029310 	.word	0x08029310

0800f244 <_ZN8touchgfx9ConstFontD0Ev>:
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff ffe7 	bl	800f220 <_ZN8touchgfx9ConstFontD1Ev>
 800f252:	2118      	movs	r1, #24
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f016 fa9e 	bl	8025796 <_ZdlPvj>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	4a05      	ldr	r2, [pc, #20]	; (800f284 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	f7ff ffd3 	bl	800f220 <_ZN8touchgfx9ConstFontD1Ev>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	08027010 	.word	0x08027010

0800f288 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ffe7 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f296:	2124      	movs	r1, #36	; 0x24
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f016 fa7c 	bl	8025796 <_ZdlPvj>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f82d 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f2b6:	4b08      	ldr	r3, [pc, #32]	; (800f2d8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4b08      	ldr	r3, [pc, #32]	; (800f2dc <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f2bc:	6819      	ldr	r1, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	440b      	add	r3, r1
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	681b      	ldr	r3, [r3, #0]
    }
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	2000bc2c 	.word	0x2000bc2c
 800f2dc:	2000bc24 	.word	0x2000bc24

0800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f811 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f2ee:	4b07      	ldr	r3, [pc, #28]	; (800f30c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	4413      	add	r3, r2
 800f2fa:	785b      	ldrb	r3, [r3, #1]
 800f2fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f300:	b2db      	uxtb	r3, r3
    }
 800f302:	4618      	mov	r0, r3
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	2000bc24 	.word	0x2000bc24

0800f310 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f318:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d105      	bne.n	800f32c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f320:	4b0b      	ldr	r3, [pc, #44]	; (800f350 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f322:	4a0c      	ldr	r2, [pc, #48]	; (800f354 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f324:	21de      	movs	r1, #222	; 0xde
 800f326:	480c      	ldr	r0, [pc, #48]	; (800f358 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f328:	f016 fa60 	bl	80257ec <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	881a      	ldrh	r2, [r3, #0]
 800f330:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	429a      	cmp	r2, r3
 800f336:	d305      	bcc.n	800f344 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f338:	4b09      	ldr	r3, [pc, #36]	; (800f360 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f33a:	4a06      	ldr	r2, [pc, #24]	; (800f354 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f33c:	21df      	movs	r1, #223	; 0xdf
 800f33e:	4806      	ldr	r0, [pc, #24]	; (800f358 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f340:	f016 fa54 	bl	80257ec <__assert_func>
    }
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	2000bc24 	.word	0x2000bc24
 800f350:	0802689c 	.word	0x0802689c
 800f354:	08026fd8 	.word	0x08026fd8
 800f358:	080268e0 	.word	0x080268e0
 800f35c:	2000bc28 	.word	0x2000bc28
 800f360:	08026924 	.word	0x08026924

0800f364 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7b5b      	ldrb	r3, [r3, #13]
 800f370:	021b      	lsls	r3, r3, #8
 800f372:	b21b      	sxth	r3, r3
 800f374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f378:	b21a      	sxth	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7adb      	ldrb	r3, [r3, #11]
 800f37e:	b21b      	sxth	r3, r3
 800f380:	4313      	orrs	r3, r2
 800f382:	b21b      	sxth	r3, r3
 800f384:	b29b      	uxth	r3, r3
    }
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f392:	b480      	push	{r7}
 800f394:	b083      	sub	sp, #12
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
    }
 800f39e:	4618      	mov	r0, r3
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
	...

0800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08c      	sub	sp, #48	; 0x30
 800f3b0:	af08      	add	r7, sp, #32
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	80fb      	strh	r3, [r7, #6]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	88b9      	ldrh	r1, [r7, #4]
 800f3c6:	88fa      	ldrh	r2, [r7, #6]
 800f3c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3ca:	9306      	str	r3, [sp, #24]
 800f3cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3ce:	9305      	str	r3, [sp, #20]
 800f3d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3d4:	9304      	str	r3, [sp, #16]
 800f3d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3da:	9303      	str	r3, [sp, #12]
 800f3dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3e0:	9302      	str	r3, [sp, #8]
 800f3e2:	7f3b      	ldrb	r3, [r7, #28]
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	7e3b      	ldrb	r3, [r7, #24]
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	f00a fc4d 	bl	8019c8c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f3f2:	4a08      	ldr	r2, [pc, #32]	; (800f414 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3fc:	619a      	str	r2, [r3, #24]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f402:	61da      	str	r2, [r3, #28]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f408:	621a      	str	r2, [r3, #32]
{
}
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	08027010 	.word	0x08027010

0800f418 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	889b      	ldrh	r3, [r3, #4]
 800f42c:	0adb      	lsrs	r3, r3, #11
 800f42e:	b29b      	uxth	r3, r3
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	4413      	add	r3, r2
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4413      	add	r3, r2
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3714      	adds	r7, #20
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	460b      	mov	r3, r1
 800f454:	607a      	str	r2, [r7, #4]
 800f456:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7b1b      	ldrb	r3, [r3, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f466:	2300      	movs	r3, #0
 800f468:	e023      	b.n	800f4b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7ff ff7a 	bl	800f364 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f470:	4603      	mov	r3, r0
 800f472:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f474:	8abb      	ldrh	r3, [r7, #20]
 800f476:	82fb      	strh	r3, [r7, #22]
 800f478:	8afa      	ldrh	r2, [r7, #22]
 800f47a:	8abb      	ldrh	r3, [r7, #20]
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	7b09      	ldrb	r1, [r1, #12]
 800f480:	440b      	add	r3, r1
 800f482:	429a      	cmp	r2, r3
 800f484:	da14      	bge.n	800f4b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	69da      	ldr	r2, [r3, #28]
 800f48a:	8afb      	ldrh	r3, [r7, #22]
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4413      	add	r3, r2
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	897a      	ldrh	r2, [r7, #10]
 800f494:	429a      	cmp	r2, r3
 800f496:	d107      	bne.n	800f4a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	69da      	ldr	r2, [r3, #28]
 800f49c:	8afb      	ldrh	r3, [r7, #22]
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f4a6:	e004      	b.n	800f4b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f4a8:	8afb      	ldrh	r3, [r7, #22]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	82fb      	strh	r3, [r7, #22]
 800f4ae:	e7e3      	b.n	800f478 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	4801      	ldr	r0, [pc, #4]	; (800f4c8 <__tcf_0+0xc>)
 800f4c2:	f7ff fecf 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	2000851c 	.word	0x2000851c

0800f4cc <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b08a      	sub	sp, #40	; 0x28
 800f4d0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f4d2:	4b15      	ldr	r3, [pc, #84]	; (800f528 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d11f      	bne.n	800f51e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	9308      	str	r3, [sp, #32]
 800f4e6:	233f      	movs	r3, #63	; 0x3f
 800f4e8:	9307      	str	r3, [sp, #28]
 800f4ea:	4b10      	ldr	r3, [pc, #64]	; (800f52c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f4ec:	9306      	str	r3, [sp, #24]
 800f4ee:	4b10      	ldr	r3, [pc, #64]	; (800f530 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f4f0:	9305      	str	r3, [sp, #20]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9303      	str	r3, [sp, #12]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	9302      	str	r3, [sp, #8]
 800f4fe:	2304      	movs	r3, #4
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	2300      	movs	r3, #0
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	230a      	movs	r3, #10
 800f508:	2204      	movs	r2, #4
 800f50a:	490a      	ldr	r1, [pc, #40]	; (800f534 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f50c:	480a      	ldr	r0, [pc, #40]	; (800f538 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f50e:	f7ff ff4d 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f512:	4b05      	ldr	r3, [pc, #20]	; (800f528 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f514:	2201      	movs	r2, #1
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	4808      	ldr	r0, [pc, #32]	; (800f53c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f51a:	f016 f985 	bl	8025828 <atexit>
    return Asap_Bold_10_4bpp;
 800f51e:	4b06      	ldr	r3, [pc, #24]	; (800f538 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f520:	4618      	mov	r0, r3
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	20008540 	.word	0x20008540
 800f52c:	0802f068 	.word	0x0802f068
 800f530:	0802705c 	.word	0x0802705c
 800f534:	0802f084 	.word	0x0802f084
 800f538:	2000851c 	.word	0x2000851c
 800f53c:	0800f4bd 	.word	0x0800f4bd

0800f540 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__tcf_0+0xc>)
 800f546:	f7ff fe8d 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20008544 	.word	0x20008544

0800f550 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08a      	sub	sp, #40	; 0x28
 800f554:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d11f      	bne.n	800f5a2 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f562:	2300      	movs	r3, #0
 800f564:	9309      	str	r3, [sp, #36]	; 0x24
 800f566:	2300      	movs	r3, #0
 800f568:	9308      	str	r3, [sp, #32]
 800f56a:	233f      	movs	r3, #63	; 0x3f
 800f56c:	9307      	str	r3, [sp, #28]
 800f56e:	4b10      	ldr	r3, [pc, #64]	; (800f5b0 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f570:	9306      	str	r3, [sp, #24]
 800f572:	4b10      	ldr	r3, [pc, #64]	; (800f5b4 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f574:	9305      	str	r3, [sp, #20]
 800f576:	2301      	movs	r3, #1
 800f578:	9304      	str	r3, [sp, #16]
 800f57a:	2300      	movs	r3, #0
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	2301      	movs	r3, #1
 800f580:	9302      	str	r3, [sp, #8]
 800f582:	2304      	movs	r3, #4
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	2300      	movs	r3, #0
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	230c      	movs	r3, #12
 800f58c:	221b      	movs	r2, #27
 800f58e:	490a      	ldr	r1, [pc, #40]	; (800f5b8 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f590:	480a      	ldr	r0, [pc, #40]	; (800f5bc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f592:	f7ff ff0b 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f596:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f598:	2201      	movs	r2, #1
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	4808      	ldr	r0, [pc, #32]	; (800f5c0 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f59e:	f016 f943 	bl	8025828 <atexit>
    return Asap_Bold_12_4bpp;
 800f5a2:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20008568 	.word	0x20008568
 800f5b0:	0802f06c 	.word	0x0802f06c
 800f5b4:	08027060 	.word	0x08027060
 800f5b8:	0802f0bc 	.word	0x0802f0bc
 800f5bc:	20008544 	.word	0x20008544
 800f5c0:	0800f541 	.word	0x0800f541

0800f5c4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	4801      	ldr	r0, [pc, #4]	; (800f5d0 <__tcf_0+0xc>)
 800f5ca:	f7ff fe4b 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	2000856c 	.word	0x2000856c

0800f5d4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08a      	sub	sp, #40	; 0x28
 800f5d8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f5da:	4b15      	ldr	r3, [pc, #84]	; (800f630 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d11f      	bne.n	800f626 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9308      	str	r3, [sp, #32]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9307      	str	r3, [sp, #28]
 800f5f2:	4b10      	ldr	r3, [pc, #64]	; (800f634 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f5f4:	9306      	str	r3, [sp, #24]
 800f5f6:	4b10      	ldr	r3, [pc, #64]	; (800f638 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f5f8:	9305      	str	r3, [sp, #20]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9304      	str	r3, [sp, #16]
 800f5fe:	2300      	movs	r3, #0
 800f600:	9303      	str	r3, [sp, #12]
 800f602:	2301      	movs	r3, #1
 800f604:	9302      	str	r3, [sp, #8]
 800f606:	2304      	movs	r3, #4
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	2312      	movs	r3, #18
 800f610:	220d      	movs	r2, #13
 800f612:	490a      	ldr	r1, [pc, #40]	; (800f63c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f614:	480a      	ldr	r0, [pc, #40]	; (800f640 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f616:	f7ff fec9 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f61a:	4b05      	ldr	r3, [pc, #20]	; (800f630 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	601a      	str	r2, [r3, #0]
 800f620:	4808      	ldr	r0, [pc, #32]	; (800f644 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f622:	f016 f901 	bl	8025828 <atexit>
    return Asap_Bold_18_4bpp;
 800f626:	4b06      	ldr	r3, [pc, #24]	; (800f640 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f628:	4618      	mov	r0, r3
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20008590 	.word	0x20008590
 800f634:	0802f070 	.word	0x0802f070
 800f638:	08027064 	.word	0x08027064
 800f63c:	0802f238 	.word	0x0802f238
 800f640:	2000856c 	.word	0x2000856c
 800f644:	0800f5c5 	.word	0x0800f5c5

0800f648 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	4801      	ldr	r0, [pc, #4]	; (800f654 <__tcf_0+0xc>)
 800f64e:	f7ff fe09 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20008594 	.word	0x20008594

0800f658 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f65e:	4b15      	ldr	r3, [pc, #84]	; (800f6b4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 0301 	and.w	r3, r3, #1
 800f666:	2b00      	cmp	r3, #0
 800f668:	d11f      	bne.n	800f6aa <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f66a:	2300      	movs	r3, #0
 800f66c:	9309      	str	r3, [sp, #36]	; 0x24
 800f66e:	2300      	movs	r3, #0
 800f670:	9308      	str	r3, [sp, #32]
 800f672:	233f      	movs	r3, #63	; 0x3f
 800f674:	9307      	str	r3, [sp, #28]
 800f676:	4b10      	ldr	r3, [pc, #64]	; (800f6b8 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f678:	9306      	str	r3, [sp, #24]
 800f67a:	4b10      	ldr	r3, [pc, #64]	; (800f6bc <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f67c:	9305      	str	r3, [sp, #20]
 800f67e:	2301      	movs	r3, #1
 800f680:	9304      	str	r3, [sp, #16]
 800f682:	2300      	movs	r3, #0
 800f684:	9303      	str	r3, [sp, #12]
 800f686:	2301      	movs	r3, #1
 800f688:	9302      	str	r3, [sp, #8]
 800f68a:	2304      	movs	r3, #4
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	2300      	movs	r3, #0
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	2315      	movs	r3, #21
 800f694:	220d      	movs	r2, #13
 800f696:	490a      	ldr	r1, [pc, #40]	; (800f6c0 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f698:	480a      	ldr	r0, [pc, #40]	; (800f6c4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f69a:	f7ff fe87 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	4808      	ldr	r0, [pc, #32]	; (800f6c8 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f6a6:	f016 f8bf 	bl	8025828 <atexit>
    return Asap_Bold_21_4bpp;
 800f6aa:	4b06      	ldr	r3, [pc, #24]	; (800f6c4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	200085b8 	.word	0x200085b8
 800f6b8:	0802f074 	.word	0x0802f074
 800f6bc:	08027068 	.word	0x08027068
 800f6c0:	0802f2f0 	.word	0x0802f2f0
 800f6c4:	20008594 	.word	0x20008594
 800f6c8:	0800f649 	.word	0x0800f649

0800f6cc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	4801      	ldr	r0, [pc, #4]	; (800f6d8 <__tcf_0+0xc>)
 800f6d2:	f7ff fdc7 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	200085bc 	.word	0x200085bc

0800f6dc <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	; 0x28
 800f6e0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d11f      	bne.n	800f72e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9308      	str	r3, [sp, #32]
 800f6f6:	233f      	movs	r3, #63	; 0x3f
 800f6f8:	9307      	str	r3, [sp, #28]
 800f6fa:	4b10      	ldr	r3, [pc, #64]	; (800f73c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f6fc:	9306      	str	r3, [sp, #24]
 800f6fe:	4b10      	ldr	r3, [pc, #64]	; (800f740 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	2301      	movs	r3, #1
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	2300      	movs	r3, #0
 800f708:	9303      	str	r3, [sp, #12]
 800f70a:	2301      	movs	r3, #1
 800f70c:	9302      	str	r3, [sp, #8]
 800f70e:	2304      	movs	r3, #4
 800f710:	9301      	str	r3, [sp, #4]
 800f712:	2300      	movs	r3, #0
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	231e      	movs	r3, #30
 800f718:	220c      	movs	r2, #12
 800f71a:	490a      	ldr	r1, [pc, #40]	; (800f744 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f71c:	480a      	ldr	r0, [pc, #40]	; (800f748 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f71e:	f7ff fe45 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f722:	4b05      	ldr	r3, [pc, #20]	; (800f738 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f724:	2201      	movs	r2, #1
 800f726:	601a      	str	r2, [r3, #0]
 800f728:	4808      	ldr	r0, [pc, #32]	; (800f74c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f72a:	f016 f87d 	bl	8025828 <atexit>
    return Asap_Bold_30_4bpp;
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f730:	4618      	mov	r0, r3
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200085e0 	.word	0x200085e0
 800f73c:	0802f078 	.word	0x0802f078
 800f740:	0802706c 	.word	0x0802706c
 800f744:	0802f3a8 	.word	0x0802f3a8
 800f748:	200085bc 	.word	0x200085bc
 800f74c:	0800f6cd 	.word	0x0800f6cd

0800f750 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f750:	b580      	push	{r7, lr}
 800f752:	af00      	add	r7, sp, #0
 800f754:	4801      	ldr	r0, [pc, #4]	; (800f75c <__tcf_0+0xc>)
 800f756:	f7ff fd85 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	200085e4 	.word	0x200085e4

0800f760 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	; 0x28
 800f764:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f766:	4b15      	ldr	r3, [pc, #84]	; (800f7bc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d11f      	bne.n	800f7b2 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f772:	2300      	movs	r3, #0
 800f774:	9309      	str	r3, [sp, #36]	; 0x24
 800f776:	2300      	movs	r3, #0
 800f778:	9308      	str	r3, [sp, #32]
 800f77a:	233f      	movs	r3, #63	; 0x3f
 800f77c:	9307      	str	r3, [sp, #28]
 800f77e:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f780:	9306      	str	r3, [sp, #24]
 800f782:	4b10      	ldr	r3, [pc, #64]	; (800f7c4 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	2301      	movs	r3, #1
 800f788:	9304      	str	r3, [sp, #16]
 800f78a:	2300      	movs	r3, #0
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	2301      	movs	r3, #1
 800f790:	9302      	str	r3, [sp, #8]
 800f792:	2304      	movs	r3, #4
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	2300      	movs	r3, #0
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	2328      	movs	r3, #40	; 0x28
 800f79c:	220d      	movs	r2, #13
 800f79e:	490a      	ldr	r1, [pc, #40]	; (800f7c8 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f7a0:	480a      	ldr	r0, [pc, #40]	; (800f7cc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f7a2:	f7ff fe03 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f7a6:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	601a      	str	r2, [r3, #0]
 800f7ac:	4808      	ldr	r0, [pc, #32]	; (800f7d0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f7ae:	f016 f83b 	bl	8025828 <atexit>
    return Asap_Bold_40_4bpp;
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	20008608 	.word	0x20008608
 800f7c0:	0802f07c 	.word	0x0802f07c
 800f7c4:	08027070 	.word	0x08027070
 800f7c8:	0802f450 	.word	0x0802f450
 800f7cc:	200085e4 	.word	0x200085e4
 800f7d0:	0800f751 	.word	0x0800f751

0800f7d4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	4801      	ldr	r0, [pc, #4]	; (800f7e0 <__tcf_0+0xc>)
 800f7da:	f7ff fd43 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	2000860c 	.word	0x2000860c

0800f7e4 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b08a      	sub	sp, #40	; 0x28
 800f7e8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7ea:	4b15      	ldr	r3, [pc, #84]	; (800f840 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d11f      	bne.n	800f836 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	9308      	str	r3, [sp, #32]
 800f7fe:	233f      	movs	r3, #63	; 0x3f
 800f800:	9307      	str	r3, [sp, #28]
 800f802:	4b10      	ldr	r3, [pc, #64]	; (800f844 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f804:	9306      	str	r3, [sp, #24]
 800f806:	4b10      	ldr	r3, [pc, #64]	; (800f848 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f808:	9305      	str	r3, [sp, #20]
 800f80a:	2300      	movs	r3, #0
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	2300      	movs	r3, #0
 800f810:	9303      	str	r3, [sp, #12]
 800f812:	2301      	movs	r3, #1
 800f814:	9302      	str	r3, [sp, #8]
 800f816:	2304      	movs	r3, #4
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	2300      	movs	r3, #0
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	233c      	movs	r3, #60	; 0x3c
 800f820:	220c      	movs	r2, #12
 800f822:	490a      	ldr	r1, [pc, #40]	; (800f84c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f824:	480a      	ldr	r0, [pc, #40]	; (800f850 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f826:	f7ff fdc1 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f82a:	4b05      	ldr	r3, [pc, #20]	; (800f840 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f82c:	2201      	movs	r2, #1
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	4808      	ldr	r0, [pc, #32]	; (800f854 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f832:	f015 fff9 	bl	8025828 <atexit>
    return Asap_Bold_60_4bpp;
 800f836:	4b06      	ldr	r3, [pc, #24]	; (800f850 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f838:	4618      	mov	r0, r3
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	20008630 	.word	0x20008630
 800f844:	0802f080 	.word	0x0802f080
 800f848:	08027074 	.word	0x08027074
 800f84c:	0802f508 	.word	0x0802f508
 800f850:	2000860c 	.word	0x2000860c
 800f854:	0800f7d5 	.word	0x0800f7d5

0800f858 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
    {
    }
 800f87a:	bf00      	nop
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f886:	b480      	push	{r7}
 800f888:	b083      	sub	sp, #12
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]
    {
    }
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
    {
    }
 800f8a6:	bf00      	nop
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f8b2:	b480      	push	{r7}
 800f8b4:	b083      	sub	sp, #12
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f8be:	bf00      	nop
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f8ca:	b480      	push	{r7}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
    {
    }
 800f8d2:	bf00      	nop
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
    {
    }
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
	...

0800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    {
 800f8fc:	4a04      	ldr	r2, [pc, #16]	; (800f910 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	601a      	str	r2, [r3, #0]
    }
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4618      	mov	r0, r3
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	08027168 	.word	0x08027168

0800f914 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
    }
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7ff ffe9 	bl	800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f922:	2104      	movs	r1, #4
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f015 ff36 	bl	8025796 <_ZdlPvj>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f93c:	4a07      	ldr	r2, [pc, #28]	; (800f95c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	605a      	str	r2, [r3, #4]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	08027148 	.word	0x08027148

0800f960 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
    {
 800f968:	4a04      	ldr	r2, [pc, #16]	; (800f97c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	601a      	str	r2, [r3, #0]
    }
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	08027148 	.word	0x08027148

0800f980 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
    }
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7ff ffe9 	bl	800f960 <_ZN8touchgfx10TransitionD1Ev>
 800f98e:	210c      	movs	r1, #12
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f015 ff00 	bl	8025796 <_ZdlPvj>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	605a      	str	r2, [r3, #4]
    }
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
    {
 800fa18:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	601a      	str	r2, [r3, #0]
    }
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	08027130 	.word	0x08027130

0800fa30 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
    }
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff ffe9 	bl	800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa3e:	2104      	movs	r1, #4
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f015 fea8 	bl	8025796 <_ZdlPvj>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fa50:	b480      	push	{r7}
 800fa52:	af00      	add	r7, sp, #0
    {
        return instance;
 800fa54:	4b03      	ldr	r3, [pc, #12]	; (800fa64 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fa56:	681b      	ldr	r3, [r3, #0]
    }
 800fa58:	4618      	mov	r0, r3
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	2000bb94 	.word	0x2000bb94

0800fa68 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa68:	b480      	push	{r7}
 800fa6a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa6c:	4b0b      	ldr	r3, [pc, #44]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d008      	beq.n	800fa8a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa78:	4b08      	ldr	r3, [pc, #32]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa82:	4b06      	ldr	r3, [pc, #24]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa88:	e002      	b.n	800fa90 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fa8a:	4b04      	ldr	r3, [pc, #16]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fa90:	4618      	mov	r0, r3
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	2000bb94 	.word	0x2000bb94

0800faa0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	4a05      	ldr	r2, [pc, #20]	; (800fac0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff ff1f 	bl	800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	08029170 	.word	0x08029170

0800fac4 <_ZN8touchgfx11ApplicationD0Ev>:
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7ff ffe7 	bl	800faa0 <_ZN8touchgfx11ApplicationD1Ev>
 800fad2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f015 fe5d 	bl	8025796 <_ZdlPvj>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f009 fbdc 	bl	80192b0 <_ZN8touchgfx11ApplicationC1Ev>
 800faf8:	4a09      	ldr	r2, [pc, #36]	; (800fb20 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a04      	ldr	r2, [pc, #16]	; (800fb24 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fb12:	6013      	str	r3, [r2, #0]
    }
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	080270f4 	.word	0x080270f4
 800fb24:	2000bc20 	.word	0x2000bc20

0800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	4a05      	ldr	r2, [pc, #20]	; (800fb48 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff ffb1 	bl	800faa0 <_ZN8touchgfx11ApplicationD1Ev>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	080270f4 	.word	0x080270f4

0800fb4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7ff ffe7 	bl	800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fb5a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f015 fe19 	bl	8025796 <_ZdlPvj>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f804 	bl	800fb84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00f      	beq.n	800fbb6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	330c      	adds	r3, #12
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4610      	mov	r0, r2
 800fbaa:	4798      	blx	r3
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00e      	beq.n	800fbda <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4610      	mov	r0, r2
 800fbd0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800fbda:	bf00      	nop
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	60f8      	str	r0, [r7, #12]
 800fbea:	60b9      	str	r1, [r7, #8]
 800fbec:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800fbee:	f009 fb3d 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f009 fb3f 	bl	8019278 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d008      	beq.n	800fc14 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4610      	mov	r0, r2
 800fc12:	4798      	blx	r3
    }
    if (*currentTrans)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d007      	beq.n	800fc2c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
    }
    if (*currentScreen)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3314      	adds	r3, #20
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4610      	mov	r0, r2
 800fc44:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d008      	beq.n	800fc60 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	4798      	blx	r3
    }
    if (*currentScreen)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d007      	beq.n	800fc78 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4610      	mov	r0, r2
 800fc76:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d008      	beq.n	800fc92 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4610      	mov	r0, r2
 800fc90:	4798      	blx	r3
    }
}
 800fc92:	bf00      	nop
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	60f8      	str	r0, [r7, #12]
 800fca2:	60b9      	str	r1, [r7, #8]
 800fca4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	330c      	adds	r3, #12
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	4798      	blx	r3
    newPresenter->activate();
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68b8      	ldr	r0, [r7, #8]
 800fcba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fcbc:	6879      	ldr	r1, [r7, #4]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f00a fc0c 	bl	801a4dc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3310      	adds	r3, #16
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	4798      	blx	r3

    Application::getInstance()->draw();
 800fcd0:	f009 facc 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	6813      	ldr	r3, [r2, #0]
 800fcd8:	3328      	adds	r3, #40	; 0x28
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4798      	blx	r3
}
 800fce0:	bf00      	nop
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	601a      	str	r2, [r3, #0]
    }
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	4a08      	ldr	r2, [pc, #32]	; (800fd30 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f000 fa5f 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff ff01 	bl	800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	080270a0 	.word	0x080270a0

0800fd34 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ffe1 	bl	800fd04 <_ZN23FrontendApplicationBaseD1Ev>
 800fd42:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f015 fd25 	bl	8025796 <_ZdlPvj>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7ff fde6 	bl	800f934 <_ZN8touchgfx10TransitionC1Ev>
 800fd68:	4a03      	ldr	r2, [pc, #12]	; (800fd78 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	08027080 	.word	0x08027080

0800fd7c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fde7 	bl	800f960 <_ZN8touchgfx10TransitionD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	08027080 	.word	0x08027080

0800fda0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe7 	bl	800fd7c <_ZN8touchgfx12NoTransitionD1Ev>
 800fdae:	210c      	movs	r1, #12
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f015 fcf0 	bl	8025796 <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fdc0:	b480      	push	{r7}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	721a      	strb	r2, [r3, #8]
    }
 800fdce:	bf00      	nop
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fdda:	b480      	push	{r7}
 800fddc:	b083      	sub	sp, #12
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
 800fde2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	605a      	str	r2, [r3, #4]
    }
 800fdea:	bf00      	nop
 800fdec:	370c      	adds	r7, #12
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
	...

0800fdf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7ff fe6e 	bl	800fae8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fe0c:	4a13      	ldr	r2, [pc, #76]	; (800fe5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 f89f 	bl	800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fe2e:	f7ff fe0f 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe32:	4602      	mov	r2, r0
 800fe34:	6813      	ldr	r3, [r2, #0]
 800fe36:	3308      	adds	r3, #8
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fe40:	2000      	movs	r0, #0
 800fe42:	f002 fb81 	bl	8012548 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fe46:	f7ff fe0f 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f00f f9b0 	bl	801f1b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	080270a0 	.word	0x080270a0

0800fe60 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	4611      	mov	r1, r2
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff ffe9 	bl	800fe60 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	605a      	str	r2, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	683a      	ldr	r2, [r7, #0]
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	3208      	adds	r2, #8
 800fe9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800feb0:	b590      	push	{r4, r7, lr}
 800feb2:	b089      	sub	sp, #36	; 0x24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800febe:	4b10      	ldr	r3, [pc, #64]	; (800ff00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	2300      	movs	r3, #0
 800fec4:	61fb      	str	r3, [r7, #28]
 800fec6:	f107 0008 	add.w	r0, r7, #8
 800feca:	f107 0318 	add.w	r3, r7, #24
 800fece:	cb0c      	ldmia	r3, {r2, r3}
 800fed0:	6879      	ldr	r1, [r7, #4]
 800fed2:	f000 f85f 	bl	800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fed6:	f107 0308 	add.w	r3, r7, #8
 800feda:	4619      	mov	r1, r3
 800fedc:	4620      	mov	r0, r4
 800fede:	f7ff ffcb 	bl	800fe78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fee2:	f107 0308 	add.w	r3, r7, #8
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 f978 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fef8:	bf00      	nop
 800fefa:	3724      	adds	r7, #36	; 0x24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd90      	pop	{r4, r7, pc}
 800ff00:	0800ff05 	.word	0x0800ff05

0800ff04 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af02      	add	r7, sp, #8
 800ff0a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ff18:	461a      	mov	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800ff24:	4804      	ldr	r0, [pc, #16]	; (800ff38 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800ff26:	f000 f855 	bl	800ffd4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	2000bc14 	.word	0x2000bc14
 800ff38:	2000bc10 	.word	0x2000bc10

0800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	4a04      	ldr	r2, [pc, #16]	; (800ff58 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	08027130 	.word	0x08027130

0800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff ffe8 	bl	800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff6c:	4a08      	ldr	r2, [pc, #32]	; (800ff90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	605a      	str	r2, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	609a      	str	r2, [r3, #8]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	60da      	str	r2, [r3, #12]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	080270dc 	.word	0x080270dc

0800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff ffc8 	bl	800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ffac:	4a08      	ldr	r2, [pc, #32]	; (800ffd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	3308      	adds	r3, #8
 800ffbc:	463a      	mov	r2, r7
 800ffbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffc2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	080270dc 	.word	0x080270dc

0800ffd4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffd4:	b590      	push	{r4, r7, lr}
 800ffd6:	b089      	sub	sp, #36	; 0x24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
 800ffe0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	689a      	ldr	r2, [r3, #8]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3320      	adds	r3, #32
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4610      	mov	r0, r2
 800fff2:	4798      	blx	r3
 800fff4:	4602      	mov	r2, r0
 800fff6:	f242 6317 	movw	r3, #9751	; 0x2617
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d805      	bhi.n	801000a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fffe:	4b4e      	ldr	r3, [pc, #312]	; (8010138 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8010000:	4a4e      	ldr	r2, [pc, #312]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010002:	21c2      	movs	r1, #194	; 0xc2
 8010004:	484e      	ldr	r0, [pc, #312]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010006:	f015 fbf1 	bl	80257ec <__assert_func>
 801000a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685a      	ldr	r2, [r3, #4]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	3320      	adds	r3, #32
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4610      	mov	r0, r2
 801001c:	4798      	blx	r3
 801001e:	4603      	mov	r3, r0
 8010020:	2b0f      	cmp	r3, #15
 8010022:	d805      	bhi.n	8010030 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010024:	4b47      	ldr	r3, [pc, #284]	; (8010144 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8010026:	4a45      	ldr	r2, [pc, #276]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010028:	21c3      	movs	r1, #195	; 0xc3
 801002a:	4845      	ldr	r0, [pc, #276]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801002c:	f015 fbde 	bl	80257ec <__assert_func>
 8010030:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3320      	adds	r3, #32
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4610      	mov	r0, r2
 8010042:	4798      	blx	r3
 8010044:	4603      	mov	r3, r0
 8010046:	2b0b      	cmp	r3, #11
 8010048:	d805      	bhi.n	8010056 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801004a:	4b3f      	ldr	r3, [pc, #252]	; (8010148 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801004c:	4a3b      	ldr	r2, [pc, #236]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801004e:	21c4      	movs	r1, #196	; 0xc4
 8010050:	483b      	ldr	r0, [pc, #236]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010052:	f015 fbcb 	bl	80257ec <__assert_func>
 8010056:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff fdc0 	bl	800fbe2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	2100      	movs	r1, #0
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f86f 	bl	801014c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801006e:	4603      	mov	r3, r0
 8010070:	4619      	mov	r1, r3
 8010072:	200c      	movs	r0, #12
 8010074:	f7ff fbf0 	bl	800f858 <_ZnwjPv>
 8010078:	4604      	mov	r4, r0
 801007a:	2c00      	cmp	r4, #0
 801007c:	d004      	beq.n	8010088 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801007e:	4620      	mov	r0, r4
 8010080:	f7ff fe6a 	bl	800fd58 <_ZN8touchgfx12NoTransitionC1Ev>
 8010084:	4623      	mov	r3, r4
 8010086:	e000      	b.n	801008a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8010088:	4623      	mov	r3, r4
 801008a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	2100      	movs	r1, #0
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f86d 	bl	8010172 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8010098:	4603      	mov	r3, r0
 801009a:	4619      	mov	r1, r3
 801009c:	f242 6018 	movw	r0, #9752	; 0x2618
 80100a0:	f7ff fbda 	bl	800f858 <_ZnwjPv>
 80100a4:	4604      	mov	r4, r0
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	d004      	beq.n	80100b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 80100aa:	4620      	mov	r0, r4
 80100ac:	f002 fcd4 	bl	8012a58 <_ZN8MainViewC1Ev>
 80100b0:	4623      	mov	r3, r4
 80100b2:	e000      	b.n	80100b6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80100b4:	4623      	mov	r3, r4
 80100b6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	2100      	movs	r1, #0
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 f86a 	bl	8010198 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4619      	mov	r1, r3
 80100c8:	2010      	movs	r0, #16
 80100ca:	f7ff fbc5 	bl	800f858 <_ZnwjPv>
 80100ce:	4604      	mov	r4, r0
 80100d0:	2c00      	cmp	r4, #0
 80100d2:	d005      	beq.n	80100e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80100d4:	69b9      	ldr	r1, [r7, #24]
 80100d6:	4620      	mov	r0, r4
 80100d8:	f002 fc04 	bl	80128e4 <_ZN13MainPresenterC1ER8MainView>
 80100dc:	4623      	mov	r3, r4
 80100de:	e000      	b.n	80100e2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80100e0:	4623      	mov	r3, r4
 80100e2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	69fa      	ldr	r2, [r7, #28]
 80100e8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	69ba      	ldr	r2, [r7, #24]
 80100f4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	3304      	adds	r3, #4
 8010100:	e000      	b.n	8010104 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8010102:	2300      	movs	r3, #0
 8010104:	4619      	mov	r1, r3
 8010106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010108:	f7ff fdee 	bl	800fce8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	3304      	adds	r3, #4
 8010110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fe61 	bl	800fdda <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	6979      	ldr	r1, [r7, #20]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f84e 	bl	80101be <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8010122:	69fa      	ldr	r2, [r7, #28]
 8010124:	6979      	ldr	r1, [r7, #20]
 8010126:	69b8      	ldr	r0, [r7, #24]
 8010128:	f7ff fdb7 	bl	800fc9a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801012c:	697b      	ldr	r3, [r7, #20]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3724      	adds	r7, #36	; 0x24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd90      	pop	{r4, r7, pc}
 8010136:	bf00      	nop
 8010138:	08026978 	.word	0x08026978
 801013c:	08027188 	.word	0x08027188
 8010140:	08026a08 	.word	0x08026a08
 8010144:	08026a4c 	.word	0x08026a4c
 8010148:	08026af0 	.word	0x08026af0

0801014c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	460b      	mov	r3, r1
 8010156:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3324      	adds	r3, #36	; 0x24
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	887a      	ldrh	r2, [r7, #2]
 8010162:	4611      	mov	r1, r2
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	4798      	blx	r3
 8010168:	4603      	mov	r3, r0
    }
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3324      	adds	r3, #36	; 0x24
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	887a      	ldrh	r2, [r7, #2]
 8010188:	4611      	mov	r1, r2
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	4798      	blx	r3
 801018e:	4603      	mov	r3, r0
    }
 8010190:	4618      	mov	r0, r3
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3324      	adds	r3, #36	; 0x24
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	887a      	ldrh	r2, [r7, #2]
 80101ae:	4611      	mov	r1, r2
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	4798      	blx	r3
 80101b4:	4603      	mov	r3, r0
    }
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
	...

080101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	4a05      	ldr	r2, [pc, #20]	; (80101fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fc0f 	bl	800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	080270dc 	.word	0x080270dc

08010200 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff ffe7 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801020e:	2110      	movs	r1, #16
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f015 fac0 	bl	8025796 <_ZdlPvj>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	68d2      	ldr	r2, [r2, #12]
 8010230:	1052      	asrs	r2, r2, #1
 8010232:	1899      	adds	r1, r3, r2
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	689b      	ldr	r3, [r3, #8]
 8010244:	e00a      	b.n	801025c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	68d2      	ldr	r2, [r2, #12]
 801024e:	1052      	asrs	r2, r2, #1
 8010250:	4413      	add	r3, r2
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	6892      	ldr	r2, [r2, #8]
 8010258:	4413      	add	r3, r2
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4608      	mov	r0, r1
 801025e:	4798      	blx	r3
    }
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d010      	beq.n	801029a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d107      	bne.n	8010290 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801028c:	2301      	movs	r3, #1
 801028e:	e000      	b.n	8010292 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010290:	2300      	movs	r3, #0
 8010292:	2b01      	cmp	r3, #1
 8010294:	d001      	beq.n	801029a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010296:	2301      	movs	r3, #1
 8010298:	e000      	b.n	801029c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801029a:	2300      	movs	r3, #0
    }
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	601a      	str	r2, [r3, #0]
    }
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4618      	mov	r0, r3
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80102c6:	b480      	push	{r7}
 80102c8:	b083      	sub	sp, #12
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	80da      	strh	r2, [r3, #6]
    }
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	4608      	mov	r0, r1
 80102fe:	4611      	mov	r1, r2
 8010300:	461a      	mov	r2, r3
 8010302:	4603      	mov	r3, r0
 8010304:	817b      	strh	r3, [r7, #10]
 8010306:	460b      	mov	r3, r1
 8010308:	813b      	strh	r3, [r7, #8]
 801030a:	4613      	mov	r3, r2
 801030c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	897a      	ldrh	r2, [r7, #10]
 8010312:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	893a      	ldrh	r2, [r7, #8]
 8010318:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	88fa      	ldrh	r2, [r7, #6]
 801031e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	8b3a      	ldrh	r2, [r7, #24]
 8010324:	80da      	strh	r2, [r3, #6]
    }
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	460b      	mov	r3, r1
 801033e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	887a      	ldrh	r2, [r7, #2]
 8010344:	801a      	strh	r2, [r3, #0]
    {
    }
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af02      	add	r7, sp, #8
 801035a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 801035c:	4a13      	ldr	r2, [pc, #76]	; (80103ac <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	1d18      	adds	r0, r3, #4
 8010366:	2300      	movs	r3, #0
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	2300      	movs	r3, #0
 801036c:	2200      	movs	r2, #0
 801036e:	2100      	movs	r1, #0
 8010370:	f7ff ffc0 	bl	80102f4 <_ZN8touchgfx4RectC1Essss>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	330c      	adds	r3, #12
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff ffa4 	bl	80102c6 <_ZN8touchgfx4RectC1Ev>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	615a      	str	r2, [r3, #20]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	619a      	str	r2, [r3, #24]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	61da      	str	r2, [r3, #28]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	080292a8 	.word	0x080292a8

080103b0 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	4a04      	ldr	r2, [pc, #16]	; (80103cc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	601a      	str	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr
 80103cc:	080292a8 	.word	0x080292a8

080103d0 <_ZN8touchgfx8DrawableD0Ev>:
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff ffe9 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 80103de:	2128      	movs	r1, #40	; 0x28
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f015 f9d8 	bl	8025796 <_ZdlPvj>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	4608      	mov	r0, r1
 80103fa:	4611      	mov	r1, r2
 80103fc:	461a      	mov	r2, r3
 80103fe:	4603      	mov	r3, r0
 8010400:	817b      	strh	r3, [r7, #10]
 8010402:	460b      	mov	r3, r1
 8010404:	813b      	strh	r3, [r7, #8]
 8010406:	4613      	mov	r3, r2
 8010408:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3334      	adds	r3, #52	; 0x34
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010416:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	4798      	blx	r3
        setWidth(width);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	3338      	adds	r3, #56	; 0x38
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801042a:	4611      	mov	r1, r2
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	4798      	blx	r3
        setHeight(height);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	333c      	adds	r3, #60	; 0x3c
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801043c:	4611      	mov	r1, r2
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	4798      	blx	r3
    }
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801044a:	b480      	push	{r7}
 801044c:	b083      	sub	sp, #12
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	460b      	mov	r3, r1
 8010454:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	887a      	ldrh	r2, [r7, #2]
 801045a:	809a      	strh	r2, [r3, #4]
    }
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	460b      	mov	r3, r1
 8010472:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	887a      	ldrh	r2, [r7, #2]
 8010478:	80da      	strh	r2, [r3, #6]
    }
 801047a:	bf00      	nop
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	460b      	mov	r3, r1
 8010490:	807b      	strh	r3, [r7, #2]
 8010492:	4613      	mov	r3, r2
 8010494:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	332c      	adds	r3, #44	; 0x2c
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80104a2:	4611      	mov	r1, r2
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	4798      	blx	r3
        setY(y);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3330      	adds	r3, #48	; 0x30
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80104b4:	4611      	mov	r1, r2
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	4798      	blx	r3
    }
 80104ba:	bf00      	nop
 80104bc:	3708      	adds	r7, #8
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80104c2:	b480      	push	{r7}
 80104c4:	b083      	sub	sp, #12
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	460b      	mov	r3, r1
 80104cc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	887a      	ldrh	r2, [r7, #2]
 80104d2:	811a      	strh	r2, [r3, #8]
    }
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	460b      	mov	r3, r1
 80104ea:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	887a      	ldrh	r2, [r7, #2]
 80104f0:	815a      	strh	r2, [r3, #10]
    }
 80104f2:	bf00      	nop
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80104fe:	b480      	push	{r7}
 8010500:	b083      	sub	sp, #12
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	bf00      	nop
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]
 801051c:	bf00      	nop
 801051e:	370c      	adds	r7, #12
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr

08010528 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
 8010532:	bf00      	nop
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr

0801053e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	6039      	str	r1, [r7, #0]
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	78fa      	ldrb	r2, [r7, #3]
 8010578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801057c:	bf00      	nop
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010596:	4618      	mov	r0, r3
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr

080105a2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80105a2:	b480      	push	{r7}
 80105a4:	b083      	sub	sp, #12
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	807b      	strh	r3, [r7, #2]
 80105c8:	4613      	mov	r3, r2
 80105ca:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3354      	adds	r3, #84	; 0x54
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	8879      	ldrh	r1, [r7, #2]
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80105dc:	b292      	uxth	r2, r2
 80105de:	1a8a      	subs	r2, r1, r2
 80105e0:	b292      	uxth	r2, r2
 80105e2:	b210      	sxth	r0, r2
 80105e4:	8839      	ldrh	r1, [r7, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80105ec:	b292      	uxth	r2, r2
 80105ee:	1a8a      	subs	r2, r1, r2
 80105f0:	b292      	uxth	r2, r2
 80105f2:	b212      	sxth	r2, r2
 80105f4:	4601      	mov	r1, r0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	4798      	blx	r3
    }
 80105fa:	bf00      	nop
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010602:	b480      	push	{r7}
 8010604:	b083      	sub	sp, #12
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010610:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010618:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010620:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010622:	bf00      	nop
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801062e:	b580      	push	{r7, lr}
 8010630:	b084      	sub	sp, #16
 8010632:	af00      	add	r7, sp, #0
 8010634:	60f8      	str	r0, [r7, #12]
 8010636:	60b9      	str	r1, [r7, #8]
 8010638:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7ff ffe1 	bl	8010602 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	601a      	str	r2, [r3, #0]
    }
 801064e:	bf00      	nop
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
	...

08010658 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	4a05      	ldr	r2, [pc, #20]	; (8010678 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fea1 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	08028074 	.word	0x08028074

0801067c <_ZN8touchgfx9ContainerD0Ev>:
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7ff ffe7 	bl	8010658 <_ZN8touchgfx9ContainerD1Ev>
 801068a:	212c      	movs	r1, #44	; 0x2c
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f015 f882 	bl	8025796 <_ZdlPvj>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	601a      	str	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	3304      	adds	r3, #4
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff ffd2 	bl	8010658 <_ZN8touchgfx9ContainerD1Ev>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	080293a0 	.word	0x080293a0

080106c4 <_ZN8touchgfx6ScreenD0Ev>:
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff ffe5 	bl	801069c <_ZN8touchgfx6ScreenD1Ev>
 80106d2:	213c      	movs	r1, #60	; 0x3c
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f015 f85e 	bl	8025796 <_ZdlPvj>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	bf00      	nop
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
    {
    }
 8010728:	bf00      	nop
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	460b      	mov	r3, r1
 801073e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3304      	adds	r3, #4
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f004 ff7f 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010762:	bf00      	nop
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f7ff fdec 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 801077c:	4a03      	ldr	r2, [pc, #12]	; (801078c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	08027374 	.word	0x08027374

08010790 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	4a05      	ldr	r2, [pc, #20]	; (80107b0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff fe05 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	08027374 	.word	0x08027374

080107b4 <_ZN8touchgfx6WidgetD0Ev>:
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7ff ffe7 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 80107c2:	2128      	movs	r1, #40	; 0x28
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f014 ffe6 	bl	8025796 <_ZdlPvj>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	607b      	str	r3, [r7, #4]
 80107de:	460b      	mov	r3, r1
 80107e0:	817b      	strh	r3, [r7, #10]
 80107e2:	4613      	mov	r3, r2
 80107e4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7ff fecd 	bl	8010588 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d008      	beq.n	8010806 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff fed3 	bl	80105a2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
        }
    }
 8010812:	bf00      	nop
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
	...

0801081c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4618      	mov	r0, r3
 8010828:	f7ff ffa0 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 801082c:	4a0a      	ldr	r2, [pc, #40]	; (8010858 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	22ff      	movs	r2, #255	; 0xff
 8010836:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3328      	adds	r3, #40	; 0x28
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff fd31 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	08028dac 	.word	0x08028dac

0801085c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	4a05      	ldr	r2, [pc, #20]	; (801087c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff ff8f 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	08028dac 	.word	0x08028dac

08010880 <_ZN8touchgfx3BoxD0Ev>:
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff ffe7 	bl	801085c <_ZN8touchgfx3BoxD1Ev>
 801088e:	2130      	movs	r1, #48	; 0x30
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f014 ff80 	bl	8025796 <_ZdlPvj>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80108b0:	bf00      	nop
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	807b      	strh	r3, [r7, #2]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	887a      	ldrh	r2, [r7, #2]
 80108cc:	801a      	strh	r2, [r3, #0]
    }
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
        assertValid();
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7fe fd13 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	4619      	mov	r1, r3
 80108f4:	4610      	mov	r0, r2
 80108f6:	f001 fe7d 	bl	80125f4 <_ZNK8touchgfx5Texts7getTextEt>
 80108fa:	4603      	mov	r3, r0
    }
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	2000bc30 	.word	0x2000bc30

08010908 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ff2a 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 8010918:	4a13      	ldr	r2, [pc, #76]	; (8010968 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3326      	adds	r3, #38	; 0x26
 8010922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff ffc8 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	3328      	adds	r3, #40	; 0x28
 8010930:	2100      	movs	r1, #0
 8010932:	4618      	mov	r0, r3
 8010934:	f7ff fcb8 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	22ff      	movs	r2, #255	; 0xff
 8010942:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	08028d30 	.word	0x08028d30

0801096c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af02      	add	r7, sp, #8
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010976:	2300      	movs	r3, #0
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	2300      	movs	r3, #0
 801097c:	2200      	movs	r2, #0
 801097e:	2100      	movs	r1, #0
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff fcb7 	bl	80102f4 <_ZN8touchgfx4RectC1Essss>
    }
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801099e:	bf00      	nop
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80109aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ac:	b085      	sub	sp, #20
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	460b      	mov	r3, r1
 80109b4:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80109b6:	687e      	ldr	r6, [r7, #4]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3330      	adds	r3, #48	; 0x30
 80109be:	681c      	ldr	r4, [r3, #0]
 80109c0:	887d      	ldrh	r5, [r7, #2]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f845 	bl	8010a52 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80109c8:	4603      	mov	r3, r0
 80109ca:	81bb      	strh	r3, [r7, #12]
 80109cc:	f107 030c 	add.w	r3, r7, #12
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fe fc69 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80109d6:	4602      	mov	r2, r0
 80109d8:	6813      	ldr	r3, [r2, #0]
 80109da:	332c      	adds	r3, #44	; 0x2c
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4610      	mov	r0, r2
 80109e0:	4798      	blx	r3
 80109e2:	4603      	mov	r3, r0
 80109e4:	1aeb      	subs	r3, r5, r3
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	b21b      	sxth	r3, r3
 80109ea:	4619      	mov	r1, r3
 80109ec:	4630      	mov	r0, r6
 80109ee:	47a0      	blx	r4
    }
 80109f0:	bf00      	nop
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109f8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	460b      	mov	r3, r1
 8010a02:	807b      	strh	r3, [r7, #2]
 8010a04:	4613      	mov	r3, r2
 8010a06:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	332c      	adds	r3, #44	; 0x2c
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010a16:	4610      	mov	r0, r2
 8010a18:	4798      	blx	r3
        setBaselineY(baselineY);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3360      	adds	r3, #96	; 0x60
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010a26:	4611      	mov	r1, r2
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	4798      	blx	r3
    }
 8010a2c:	bf00      	nop
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	887a      	ldrh	r2, [r7, #2]
 8010a44:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010a46:	bf00      	nop
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010a5e:	4618      	mov	r0, r3
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
	...

08010a6c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	4a05      	ldr	r2, [pc, #20]	; (8010a8c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff fe87 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4618      	mov	r0, r3
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	08028d30 	.word	0x08028d30

08010a90 <_ZN8touchgfx8TextAreaD0Ev>:
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ffe7 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010a9e:	2134      	movs	r1, #52	; 0x34
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f014 fe78 	bl	8025796 <_ZdlPvj>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff ff24 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010ac0:	4a03      	ldr	r2, [pc, #12]	; (8010ad0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	601a      	str	r2, [r3, #0]
    {
    }
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	080272f8 	.word	0x080272f8

08010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	4a05      	ldr	r2, [pc, #20]	; (8010af4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff ffc1 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	080272f8 	.word	0x080272f8

08010af8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7ff ffe7 	bl	8010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010b06:	2134      	movs	r1, #52	; 0x34
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f014 fe44 	bl	8025796 <_ZdlPvj>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff ffc4 	bl	8010ab0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010b28:	4a05      	ldr	r2, [pc, #20]	; (8010b40 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	08028e98 	.word	0x08028e98

08010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010b54:	bf00      	nop
 8010b56:	370c      	adds	r7, #12
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr

08010b60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff fdfd 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 8010b72:	4a0b      	ldr	r2, [pc, #44]	; (8010ba0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3326      	adds	r3, #38	; 0x26
 8010b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7ff fbd7 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	22ff      	movs	r2, #255	; 0xff
 8010b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010b8e:	6839      	ldr	r1, [r7, #0]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f006 fe53 	bl	801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	08028f14 	.word	0x08028f14

08010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
        }
 8010bce:	4618      	mov	r0, r3
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010bda:	b590      	push	{r4, r7, lr}
 8010bdc:	b083      	sub	sp, #12
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
 8010be2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3340      	adds	r3, #64	; 0x40
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff ffea 	bl	8010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bee:	4604      	mov	r4, r0
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff ffe5 	bl	8010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	429c      	cmp	r4, r3
 8010bfc:	bf0c      	ite	eq
 8010bfe:	2301      	moveq	r3, #1
 8010c00:	2300      	movne	r3, #0
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d106      	bne.n	8010c16 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f006 f88e 	bl	8016d30 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010c14:	e000      	b.n	8010c18 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010c16:	bf00      	nop
    }
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd90      	pop	{r4, r7, pc}
	...

08010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	4a05      	ldr	r2, [pc, #20]	; (8010c40 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f005 fe91 	bl	8016958 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	08028884 	.word	0x08028884

08010c44 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ffe7 	bl	8010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010c52:	2114      	movs	r1, #20
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f014 fd9e 	bl	8025796 <_ZdlPvj>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	4a05      	ldr	r2, [pc, #20]	; (8010c84 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fd8b 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	08028f14 	.word	0x08028f14

08010c88 <_ZN8touchgfx5ImageD0Ev>:
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ffe7 	bl	8010c64 <_ZN8touchgfx5ImageD1Ev>
 8010c96:	212c      	movs	r1, #44	; 0x2c
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f014 fd7c 	bl	8025796 <_ZdlPvj>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	4a05      	ldr	r2, [pc, #20]	; (8010cc8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	601a      	str	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fcef 	bl	801069c <_ZN8touchgfx6ScreenD1Ev>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	080272c4 	.word	0x080272c4

08010ccc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff ffe7 	bl	8010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010cda:	2140      	movs	r1, #64	; 0x40
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f014 fd5a 	bl	8025796 <_ZdlPvj>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	4a6f      	ldr	r2, [pc, #444]	; (8010eb4 <_ZN12MainViewBaseD1Ev+0x1c8>)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010d00:	4618      	mov	r0, r3
 8010d02:	f001 fb8d 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f001 fb87 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fea7 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8010d24:	4618      	mov	r0, r3
 8010d26:	f001 fb7b 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8010d30:	4618      	mov	r0, r3
 8010d32:	f004 f999 	bl	8015068 <_ZN8touchgfx13ImageProgressD1Ev>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f001 fb6f 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f001 fbad 	bl	80124a8 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8010d54:	4618      	mov	r0, r3
 8010d56:	f001 fb85 	bl	8012464 <_ZN8touchgfx4LineD1Ev>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8010d60:	4618      	mov	r0, r3
 8010d62:	f001 fba1 	bl	80124a8 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f001 fb79 	bl	8012464 <_ZN8touchgfx4LineD1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f004 f875 	bl	8014e68 <_ZN8touchgfx11BoxProgressD1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7ff fe71 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010d90:	4618      	mov	r0, r3
 8010d92:	f001 fb45 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f001 fb3f 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fe5f 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fe59 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f001 fb2d 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7ff fe4d 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f001 fb65 	bl	80124a8 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010de4:	4618      	mov	r0, r3
 8010de6:	f001 fb3d 	bl	8012464 <_ZN8touchgfx4LineD1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010df0:	4618      	mov	r0, r3
 8010df2:	f001 fb15 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 fb0f 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f001 fb09 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 fb03 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010e20:	4618      	mov	r0, r3
 8010e22:	f001 fafd 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 faf7 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 faf1 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 faeb 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff ff07 	bl	8010c64 <_ZN8touchgfx5ImageD1Ev>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f001 fadf 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 fad9 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff fdf9 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	33d8      	adds	r3, #216	; 0xd8
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff fdf4 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	33a4      	adds	r3, #164	; 0xa4
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fdef 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	3370      	adds	r3, #112	; 0x70
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7ff fdea 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3340      	adds	r3, #64	; 0x40
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff fcdd 	bl	801085c <_ZN8touchgfx3BoxD1Ev>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff feff 	bl	8010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	08027290 	.word	0x08027290

08010eb8 <_ZN12MainViewBaseD0Ev>:
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f7ff ff13 	bl	8010cec <_ZN12MainViewBaseD1Ev>
 8010ec6:	f242 6118 	movw	r1, #9752	; 0x2618
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f014 fc63 	bl	8025796 <_ZdlPvj>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
	...

08010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010edc:	b590      	push	{r4, r7, lr}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	71bb      	strb	r3, [r7, #6]
 8010eea:	4613      	mov	r3, r2
 8010eec:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010eee:	f7fe fdaf 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d105      	bne.n	8010f04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010ef8:	4b0a      	ldr	r3, [pc, #40]	; (8010f24 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010efa:	4a0b      	ldr	r2, [pc, #44]	; (8010f28 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010efc:	2138      	movs	r1, #56	; 0x38
 8010efe:	480b      	ldr	r0, [pc, #44]	; (8010f2c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010f00:	f014 fc74 	bl	80257ec <__assert_func>
 8010f04:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010f06:	f7fe fdaf 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8010f0a:	6803      	ldr	r3, [r0, #0]
 8010f0c:	332c      	adds	r3, #44	; 0x2c
 8010f0e:	681c      	ldr	r4, [r3, #0]
 8010f10:	797b      	ldrb	r3, [r7, #5]
 8010f12:	79ba      	ldrb	r2, [r7, #6]
 8010f14:	79f9      	ldrb	r1, [r7, #7]
 8010f16:	47a0      	blx	r4
 8010f18:	4603      	mov	r3, r0
    }
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	370c      	adds	r7, #12
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd90      	pop	{r4, r7, pc}
 8010f22:	bf00      	nop
 8010f24:	08026c70 	.word	0x08026c70
 8010f28:	080273d4 	.word	0x080273d4
 8010f2c:	08026cb4 	.word	0x08026cb4

08010f30 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b0b5      	sub	sp, #212	; 0xd4
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f001 f9f6 	bl	801232c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010f40:	4adc      	ldr	r2, [pc, #880]	; (80112b4 <_ZN12MainViewBaseC1Ev+0x384>)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	3340      	adds	r3, #64	; 0x40
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7ff fc66 	bl	801081c <_ZN8touchgfx3BoxC1Ev>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	3370      	adds	r3, #112	; 0x70
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff fcd7 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	33a4      	adds	r3, #164	; 0xa4
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fcd2 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	33d8      	adds	r3, #216	; 0xd8
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fccd 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fcc7 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7ff fdc9 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff fdc3 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8010f98:	f107 0308 	add.w	r3, r7, #8
 8010f9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff f9c7 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8010fa6:	f107 0308 	add.w	r3, r7, #8
 8010faa:	4619      	mov	r1, r3
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ff fdd7 	bl	8010b60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fdad 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fda7 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff fda1 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff fd9b 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7ff fd95 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fd8f 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8011000:	4618      	mov	r0, r3
 8011002:	f7ff fd89 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff fd83 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011018:	4618      	mov	r0, r3
 801101a:	f005 fe69 	bl	8016cf0 <_ZN8touchgfx4LineC1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8011024:	f107 030c 	add.w	r3, r7, #12
 8011028:	2100      	movs	r1, #0
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff f93c 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8011030:	22ff      	movs	r2, #255	; 0xff
 8011032:	68f9      	ldr	r1, [r7, #12]
 8011034:	4620      	mov	r0, r4
 8011036:	f005 fc4d 	bl	80168d4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011040:	4618      	mov	r0, r3
 8011042:	f7ff fc61 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff fd63 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fc55 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff fc4f 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fd51 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff fd4b 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff fc3d 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011094:	4618      	mov	r0, r3
 8011096:	f003 fefb 	bl	8014e90 <_ZN8touchgfx11BoxProgressC1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80110a0:	4618      	mov	r0, r3
 80110a2:	f005 fe25 	bl	8016cf0 <_ZN8touchgfx4LineC1Ev>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 80110ac:	f107 0310 	add.w	r3, r7, #16
 80110b0:	2100      	movs	r1, #0
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff f8f8 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 80110b8:	22ff      	movs	r2, #255	; 0xff
 80110ba:	6939      	ldr	r1, [r7, #16]
 80110bc:	4620      	mov	r0, r4
 80110be:	f005 fc09 	bl	80168d4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80110c8:	4618      	mov	r0, r3
 80110ca:	f005 fe11 	bl	8016cf0 <_ZN8touchgfx4LineC1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 80110d4:	f107 0314 	add.w	r3, r7, #20
 80110d8:	2100      	movs	r1, #0
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff f8e4 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 80110e0:	22ff      	movs	r2, #255	; 0xff
 80110e2:	6979      	ldr	r1, [r7, #20]
 80110e4:	4620      	mov	r0, r4
 80110e6:	f005 fbf5 	bl	80168d4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff fd11 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 80110fc:	4618      	mov	r0, r3
 80110fe:	f003 ffdd 	bl	80150bc <_ZN8touchgfx13ImageProgressC1Ev>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8011108:	4618      	mov	r0, r3
 801110a:	f7ff fd05 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011114:	4618      	mov	r0, r3
 8011116:	f7ff fbf7 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fcf9 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff fcf3 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 8011138:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801113c:	4618      	mov	r0, r3
 801113e:	f006 fbeb 	bl	8017918 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 1, 800, 480);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011148:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011152:	2201      	movs	r2, #1
 8011154:	2100      	movs	r1, #0
 8011156:	f7ff f94b 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011160:	2200      	movs	r2, #0
 8011162:	2100      	movs	r1, #0
 8011164:	2000      	movs	r0, #0
 8011166:	f7ff feb9 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801116a:	4603      	mov	r3, r0
 801116c:	4619      	mov	r1, r3
 801116e:	4620      	mov	r0, r4
 8011170:	f7ff fb96 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(292, 129);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	3370      	adds	r3, #112	; 0x70
 8011178:	2281      	movs	r2, #129	; 0x81
 801117a:	f44f 7192 	mov.w	r1, #292	; 0x124
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff f981 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801118a:	22a9      	movs	r2, #169	; 0xa9
 801118c:	2100      	movs	r1, #0
 801118e:	20ff      	movs	r0, #255	; 0xff
 8011190:	f7ff fea4 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011194:	4603      	mov	r3, r0
 8011196:	4619      	mov	r1, r3
 8011198:	4620      	mov	r0, r4
 801119a:	f7ff fbf8 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3370      	adds	r3, #112	; 0x70
 80111a2:	2100      	movs	r1, #0
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff fc45 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80111b0:	f107 0318 	add.w	r3, r7, #24
 80111b4:	2115      	movs	r1, #21
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7ff fb80 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80111bc:	8b39      	ldrh	r1, [r7, #24]
 80111be:	4620      	mov	r0, r4
 80111c0:	f006 f89c 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(174, 129);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	33a4      	adds	r3, #164	; 0xa4
 80111c8:	2281      	movs	r2, #129	; 0x81
 80111ca:	21ae      	movs	r1, #174	; 0xae
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7ff f95a 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111d8:	22a9      	movs	r2, #169	; 0xa9
 80111da:	2100      	movs	r1, #0
 80111dc:	20ff      	movs	r0, #255	; 0xff
 80111de:	f7ff fe7d 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111e2:	4603      	mov	r3, r0
 80111e4:	4619      	mov	r1, r3
 80111e6:	4620      	mov	r0, r4
 80111e8:	f7ff fbd1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	33a4      	adds	r3, #164	; 0xa4
 80111f0:	2100      	movs	r1, #0
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7ff fc1e 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111fe:	f107 031c 	add.w	r3, r7, #28
 8011202:	2114      	movs	r1, #20
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff fb59 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801120a:	8bb9      	ldrh	r1, [r7, #28]
 801120c:	4620      	mov	r0, r4
 801120e:	f006 f875 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(49, 129);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	33d8      	adds	r3, #216	; 0xd8
 8011216:	2281      	movs	r2, #129	; 0x81
 8011218:	2131      	movs	r1, #49	; 0x31
 801121a:	4618      	mov	r0, r3
 801121c:	f7ff f933 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011226:	22a9      	movs	r2, #169	; 0xa9
 8011228:	2100      	movs	r1, #0
 801122a:	20ff      	movs	r0, #255	; 0xff
 801122c:	f7ff fe56 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011230:	4603      	mov	r3, r0
 8011232:	4619      	mov	r1, r3
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fbaa 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	33d8      	adds	r3, #216	; 0xd8
 801123e:	2100      	movs	r1, #0
 8011240:	4618      	mov	r0, r3
 8011242:	f7ff fbf7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801124c:	f107 0320 	add.w	r3, r7, #32
 8011250:	2110      	movs	r1, #16
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff fb32 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011258:	8c39      	ldrh	r1, [r7, #32]
 801125a:	4620      	mov	r0, r4
 801125c:	f006 f84e 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(50, 219);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011266:	22db      	movs	r2, #219	; 0xdb
 8011268:	2132      	movs	r1, #50	; 0x32
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff f90b 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011276:	22a9      	movs	r2, #169	; 0xa9
 8011278:	2100      	movs	r1, #0
 801127a:	20ff      	movs	r0, #255	; 0xff
 801127c:	f7ff fe2e 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011280:	4603      	mov	r3, r0
 8011282:	4619      	mov	r1, r3
 8011284:	4620      	mov	r0, r4
 8011286:	f7ff fb82 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011290:	2100      	movs	r1, #0
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff fbce 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112a2:	210f      	movs	r1, #15
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fb09 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80112aa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80112ac:	4620      	mov	r0, r4
 80112ae:	f006 f825 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80112b2:	e001      	b.n	80112b8 <_ZN12MainViewBaseC1Ev+0x388>
 80112b4:	08027290 	.word	0x08027290

    LambdaValue.setPosition(15, 77, 100, 47);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80112be:	232f      	movs	r3, #47	; 0x2f
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	2364      	movs	r3, #100	; 0x64
 80112c4:	224d      	movs	r2, #77	; 0x4d
 80112c6:	210f      	movs	r1, #15
 80112c8:	f7ff f892 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80112d2:	22ff      	movs	r2, #255	; 0xff
 80112d4:	21ff      	movs	r1, #255	; 0xff
 80112d6:	20ff      	movs	r0, #255	; 0xff
 80112d8:	f7ff fe00 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112dc:	4603      	mov	r3, r0
 80112de:	4619      	mov	r1, r3
 80112e0:	4620      	mov	r0, r4
 80112e2:	f7ff fb54 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112ec:	2100      	movs	r1, #0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff fba0 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 80112fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112fe:	2103      	movs	r1, #3
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fadb 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff fae6 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011310:	4603      	mov	r3, r0
 8011312:	4ae1      	ldr	r2, [pc, #900]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 8011314:	2105      	movs	r1, #5
 8011316:	4620      	mov	r0, r4
 8011318:	f00a fad0 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011328:	4619      	mov	r1, r3
 801132a:	4610      	mov	r0, r2
 801132c:	f7ff fc0a 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801133a:	2102      	movs	r1, #2
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fabd 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011342:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8011344:	4620      	mov	r0, r4
 8011346:	f005 ffd9 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(15, 170, 100, 47);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8011350:	232f      	movs	r3, #47	; 0x2f
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	2364      	movs	r3, #100	; 0x64
 8011356:	22aa      	movs	r2, #170	; 0xaa
 8011358:	210f      	movs	r1, #15
 801135a:	f7ff f849 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011364:	22ff      	movs	r2, #255	; 0xff
 8011366:	21ff      	movs	r1, #255	; 0xff
 8011368:	20ff      	movs	r0, #255	; 0xff
 801136a:	f7ff fdb7 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801136e:	4603      	mov	r3, r0
 8011370:	4619      	mov	r1, r3
 8011372:	4620      	mov	r0, r4
 8011374:	f7ff fb0b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801137e:	2100      	movs	r1, #0
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fb57 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f603 1486 	addw	r4, r3, #2438	; 0x986
 801138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011390:	2101      	movs	r1, #1
 8011392:	4618      	mov	r0, r3
 8011394:	f7ff fa92 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fa9d 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80113a2:	4603      	mov	r3, r0
 80113a4:	4abc      	ldr	r2, [pc, #752]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 80113a6:	2105      	movs	r1, #5
 80113a8:	4620      	mov	r0, r4
 80113aa:	f00a fa87 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f603 1386 	addw	r3, r3, #2438	; 0x986
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7ff fbc1 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80113c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80113cc:	2100      	movs	r1, #0
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fa74 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80113d4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80113d6:	4620      	mov	r0, r4
 80113d8:	f005 ff90 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113e2:	223f      	movs	r2, #63	; 0x3f
 80113e4:	21b3      	movs	r1, #179	; 0xb3
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff f84d 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113f2:	2100      	movs	r1, #0
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff f8b7 	bl	8010568 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8011400:	230e      	movs	r3, #14
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	2312      	movs	r3, #18
 8011406:	223f      	movs	r2, #63	; 0x3f
 8011408:	2136      	movs	r1, #54	; 0x36
 801140a:	f7fe fff1 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8011414:	22ff      	movs	r2, #255	; 0xff
 8011416:	21ff      	movs	r1, #255	; 0xff
 8011418:	20ff      	movs	r0, #255	; 0xff
 801141a:	f7ff fd5f 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801141e:	4603      	mov	r3, r0
 8011420:	4619      	mov	r1, r3
 8011422:	4620      	mov	r0, r4
 8011424:	f7ff fab3 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801142e:	2100      	movs	r1, #0
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff faff 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 801143c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011440:	211e      	movs	r1, #30
 8011442:	4618      	mov	r0, r3
 8011444:	f7ff fa3a 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801144c:	4618      	mov	r0, r3
 801144e:	f7ff fa45 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011452:	4603      	mov	r3, r0
 8011454:	4a90      	ldr	r2, [pc, #576]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 8011456:	2102      	movs	r1, #2
 8011458:	4620      	mov	r0, r4
 801145a:	f00a fa2f 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 801146a:	4619      	mov	r1, r3
 801146c:	4610      	mov	r0, r2
 801146e:	f7ff fb69 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8011478:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801147c:	2104      	movs	r1, #4
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fa1c 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011484:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8011486:	4620      	mov	r0, r4
 8011488:	f005 ff38 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8011492:	230e      	movs	r3, #14
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	2312      	movs	r3, #18
 8011498:	223f      	movs	r2, #63	; 0x3f
 801149a:	2173      	movs	r1, #115	; 0x73
 801149c:	f7fe ffa8 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80114a6:	22ff      	movs	r2, #255	; 0xff
 80114a8:	21ff      	movs	r1, #255	; 0xff
 80114aa:	20ff      	movs	r0, #255	; 0xff
 80114ac:	f7ff fd16 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114b0:	4603      	mov	r3, r0
 80114b2:	4619      	mov	r1, r3
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7ff fa6a 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80114c0:	2100      	movs	r1, #0
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7ff fab6 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f603 1494 	addw	r4, r3, #2452	; 0x994
 80114ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114d2:	211f      	movs	r1, #31
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7ff f9f1 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80114da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff f9fc 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80114e4:	4603      	mov	r3, r0
 80114e6:	4a6c      	ldr	r2, [pc, #432]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 80114e8:	2102      	movs	r1, #2
 80114ea:	4620      	mov	r0, r4
 80114ec:	f00a f9e6 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f603 1394 	addw	r3, r3, #2452	; 0x994
 80114fc:	4619      	mov	r1, r3
 80114fe:	4610      	mov	r0, r2
 8011500:	f7ff fb20 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801150a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801150e:	2105      	movs	r1, #5
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff f9d3 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011516:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801151a:	4620      	mov	r0, r4
 801151c:	f005 feee 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8011526:	230e      	movs	r3, #14
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	2312      	movs	r3, #18
 801152c:	223e      	movs	r2, #62	; 0x3e
 801152e:	21ad      	movs	r1, #173	; 0xad
 8011530:	f7fe ff5e 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801153a:	22ff      	movs	r2, #255	; 0xff
 801153c:	21ff      	movs	r1, #255	; 0xff
 801153e:	20ff      	movs	r0, #255	; 0xff
 8011540:	f7ff fccc 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011544:	4603      	mov	r3, r0
 8011546:	4619      	mov	r1, r3
 8011548:	4620      	mov	r0, r4
 801154a:	f7ff fa20 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011554:	2100      	movs	r1, #0
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff fa6c 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f603 1498 	addw	r4, r3, #2456	; 0x998
 8011562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011566:	2120      	movs	r1, #32
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff f9a7 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801156e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011572:	4618      	mov	r0, r3
 8011574:	f7ff f9b2 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011578:	4603      	mov	r3, r0
 801157a:	4a47      	ldr	r2, [pc, #284]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 801157c:	2102      	movs	r1, #2
 801157e:	4620      	mov	r0, r4
 8011580:	f00a f99c 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8011590:	4619      	mov	r1, r3
 8011592:	4610      	mov	r0, r2
 8011594:	f7ff fad6 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801159e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80115a2:	2106      	movs	r1, #6
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff f989 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80115aa:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80115ae:	4620      	mov	r0, r4
 80115b0:	f005 fea4 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f503 7021 	add.w	r0, r3, #644	; 0x284
 80115ba:	230e      	movs	r3, #14
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	2312      	movs	r3, #18
 80115c0:	223e      	movs	r2, #62	; 0x3e
 80115c2:	21e7      	movs	r1, #231	; 0xe7
 80115c4:	f7fe ff14 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80115ce:	22ff      	movs	r2, #255	; 0xff
 80115d0:	21ff      	movs	r1, #255	; 0xff
 80115d2:	20ff      	movs	r0, #255	; 0xff
 80115d4:	f7ff fc82 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115d8:	4603      	mov	r3, r0
 80115da:	4619      	mov	r1, r3
 80115dc:	4620      	mov	r0, r4
 80115de:	f7ff f9d6 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80115e8:	2100      	movs	r1, #0
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7ff fa22 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 80115f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80115fa:	2121      	movs	r1, #33	; 0x21
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff f95d 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011606:	4618      	mov	r0, r3
 8011608:	f7ff f968 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801160c:	4603      	mov	r3, r0
 801160e:	4a22      	ldr	r2, [pc, #136]	; (8011698 <_ZN12MainViewBaseC1Ev+0x768>)
 8011610:	2102      	movs	r1, #2
 8011612:	4620      	mov	r0, r4
 8011614:	f00a f952 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f503 7221 	add.w	r2, r3, #644	; 0x284
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8011624:	4619      	mov	r1, r3
 8011626:	4610      	mov	r0, r2
 8011628:	f7ff fa8c 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8011632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011636:	2107      	movs	r1, #7
 8011638:	4618      	mov	r0, r3
 801163a:	f7ff f93f 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801163e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8011642:	4620      	mov	r0, r4
 8011644:	f005 fe5a 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 801164e:	230e      	movs	r3, #14
 8011650:	9300      	str	r3, [sp, #0]
 8011652:	2312      	movs	r3, #18
 8011654:	223f      	movs	r2, #63	; 0x3f
 8011656:	f44f 7192 	mov.w	r1, #292	; 0x124
 801165a:	f7fe fec9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011664:	22ff      	movs	r2, #255	; 0xff
 8011666:	21ff      	movs	r1, #255	; 0xff
 8011668:	20ff      	movs	r0, #255	; 0xff
 801166a:	f7ff fc37 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801166e:	4603      	mov	r3, r0
 8011670:	4619      	mov	r1, r3
 8011672:	4620      	mov	r0, r4
 8011674:	f7ff f98b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801167e:	2100      	movs	r1, #0
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff f9d7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f503 641a 	add.w	r4, r3, #2464	; 0x9a0
 801168c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011690:	2122      	movs	r1, #34	; 0x22
 8011692:	4618      	mov	r0, r3
 8011694:	e002      	b.n	801169c <_ZN12MainViewBaseC1Ev+0x76c>
 8011696:	bf00      	nop
 8011698:	08026cf4 	.word	0x08026cf4
 801169c:	f7ff f90e 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80116a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7ff f919 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80116aa:	4603      	mov	r3, r0
 80116ac:	4ae2      	ldr	r2, [pc, #904]	; (8011a38 <_ZN12MainViewBaseC1Ev+0xb08>)
 80116ae:	2102      	movs	r1, #2
 80116b0:	4620      	mov	r0, r4
 80116b2:	f00a f903 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 80116c2:	4619      	mov	r1, r3
 80116c4:	4610      	mov	r0, r2
 80116c6:	f7ff fa3d 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80116d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80116d4:	2108      	movs	r1, #8
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ff f8f0 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80116dc:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80116e0:	4620      	mov	r0, r4
 80116e2:	f005 fe0b 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80116ec:	230e      	movs	r3, #14
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	2312      	movs	r3, #18
 80116f2:	223f      	movs	r2, #63	; 0x3f
 80116f4:	f240 115d 	movw	r1, #349	; 0x15d
 80116f8:	f7fe fe7a 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8011702:	22ff      	movs	r2, #255	; 0xff
 8011704:	21ff      	movs	r1, #255	; 0xff
 8011706:	20ff      	movs	r0, #255	; 0xff
 8011708:	f7ff fbe8 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801170c:	4603      	mov	r3, r0
 801170e:	4619      	mov	r1, r3
 8011710:	4620      	mov	r0, r4
 8011712:	f7ff f93c 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801171c:	2100      	movs	r1, #0
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff f988 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f603 14a4 	addw	r4, r3, #2468	; 0x9a4
 801172a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801172e:	2123      	movs	r1, #35	; 0x23
 8011730:	4618      	mov	r0, r3
 8011732:	f7ff f8c3 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011736:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801173a:	4618      	mov	r0, r3
 801173c:	f7ff f8ce 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011740:	4603      	mov	r3, r0
 8011742:	4abd      	ldr	r2, [pc, #756]	; (8011a38 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011744:	2102      	movs	r1, #2
 8011746:	4620      	mov	r0, r4
 8011748:	f00a f8b8 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f603 13a4 	addw	r3, r3, #2468	; 0x9a4
 8011758:	4619      	mov	r1, r3
 801175a:	4610      	mov	r0, r2
 801175c:	f7ff f9f2 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8011766:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801176a:	2109      	movs	r1, #9
 801176c:	4618      	mov	r0, r3
 801176e:	f7ff f8a5 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011772:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8011776:	4620      	mov	r0, r4
 8011778:	f005 fdc0 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8011782:	230f      	movs	r3, #15
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	2312      	movs	r3, #18
 8011788:	223e      	movs	r2, #62	; 0x3e
 801178a:	f240 119b 	movw	r1, #411	; 0x19b
 801178e:	f7fe fe2f 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8011798:	22ff      	movs	r2, #255	; 0xff
 801179a:	21ff      	movs	r1, #255	; 0xff
 801179c:	20ff      	movs	r0, #255	; 0xff
 801179e:	f7ff fb9d 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117a2:	4603      	mov	r3, r0
 80117a4:	4619      	mov	r1, r3
 80117a6:	4620      	mov	r0, r4
 80117a8:	f7ff f8f1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80117b2:	2100      	movs	r1, #0
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff f93d 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f603 14a8 	addw	r4, r3, #2472	; 0x9a8
 80117c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117c4:	2124      	movs	r1, #36	; 0x24
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7ff f878 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80117cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7ff f883 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80117d6:	4603      	mov	r3, r0
 80117d8:	4a97      	ldr	r2, [pc, #604]	; (8011a38 <_ZN12MainViewBaseC1Ev+0xb08>)
 80117da:	2102      	movs	r1, #2
 80117dc:	4620      	mov	r0, r4
 80117de:	f00a f86d 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 80117ee:	4619      	mov	r1, r3
 80117f0:	4610      	mov	r0, r2
 80117f2:	f7ff f9a7 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80117fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011800:	210a      	movs	r1, #10
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff f85a 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011808:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 801180c:	4620      	mov	r0, r4
 801180e:	f005 fd75 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8011818:	230e      	movs	r3, #14
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	2312      	movs	r3, #18
 801181e:	223e      	movs	r2, #62	; 0x3e
 8011820:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8011824:	f7fe fde4 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 7459 	add.w	r4, r3, #868	; 0x364
 801182e:	22ff      	movs	r2, #255	; 0xff
 8011830:	21ff      	movs	r1, #255	; 0xff
 8011832:	20ff      	movs	r0, #255	; 0xff
 8011834:	f7ff fb52 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011838:	4603      	mov	r3, r0
 801183a:	4619      	mov	r1, r3
 801183c:	4620      	mov	r0, r4
 801183e:	f7ff f8a6 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8011848:	2100      	movs	r1, #0
 801184a:	4618      	mov	r0, r3
 801184c:	f7ff f8f2 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 8011856:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801185a:	2125      	movs	r1, #37	; 0x25
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff f82d 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011862:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011866:	4618      	mov	r0, r3
 8011868:	f7ff f838 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801186c:	4603      	mov	r3, r0
 801186e:	4a72      	ldr	r2, [pc, #456]	; (8011a38 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011870:	2102      	movs	r1, #2
 8011872:	4620      	mov	r0, r4
 8011874:	f00a f822 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f503 7259 	add.w	r2, r3, #868	; 0x364
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7ff f95c 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8011892:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011896:	210b      	movs	r1, #11
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff f80f 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801189e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80118a2:	4620      	mov	r0, r4
 80118a4:	f005 fd2a 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80118ae:	2305      	movs	r3, #5
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 80118b6:	223a      	movs	r2, #58	; 0x3a
 80118b8:	f06f 0101 	mvn.w	r1, #1
 80118bc:	f7fe fd98 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80118c6:	22ff      	movs	r2, #255	; 0xff
 80118c8:	21ff      	movs	r1, #255	; 0xff
 80118ca:	20ff      	movs	r0, #255	; 0xff
 80118cc:	f7ff fb06 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118d0:	4603      	mov	r3, r0
 80118d2:	22ff      	movs	r2, #255	; 0xff
 80118d4:	4619      	mov	r1, r3
 80118d6:	4620      	mov	r0, r4
 80118d8:	f004 ffe1 	bl	801689e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80118e8:	4619      	mov	r1, r3
 80118ea:	4610      	mov	r0, r2
 80118ec:	f005 f840 	bl	8016970 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118f6:	2203      	movs	r2, #3
 80118f8:	2100      	movs	r1, #0
 80118fa:	4618      	mov	r0, r3
 80118fc:	f000 fd2c 	bl	8012358 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011906:	2203      	movs	r2, #3
 8011908:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 801190c:	4618      	mov	r0, r3
 801190e:	f000 fd49 	bl	80123a4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011918:	2102      	movs	r1, #2
 801191a:	4618      	mov	r0, r3
 801191c:	f000 fd68 	bl	80123f0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011926:	2101      	movs	r1, #1
 8011928:	4618      	mov	r0, r3
 801192a:	f005 fb3b 	bl	8016fa4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(413, 129);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011934:	2281      	movs	r2, #129	; 0x81
 8011936:	f240 119d 	movw	r1, #413	; 0x19d
 801193a:	4618      	mov	r0, r3
 801193c:	f7fe fda3 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011946:	22a9      	movs	r2, #169	; 0xa9
 8011948:	2100      	movs	r1, #0
 801194a:	20ff      	movs	r0, #255	; 0xff
 801194c:	f7ff fac6 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011950:	4603      	mov	r3, r0
 8011952:	4619      	mov	r1, r3
 8011954:	4620      	mov	r0, r4
 8011956:	f7ff f81a 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011960:	2100      	movs	r1, #0
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff f866 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 801196e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011972:	210e      	movs	r1, #14
 8011974:	4618      	mov	r0, r3
 8011976:	f7fe ffa1 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801197a:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 801197e:	4620      	mov	r0, r4
 8011980:	f005 fcbc 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(371, 77, 100, 47);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f203 405c 	addw	r0, r3, #1116	; 0x45c
 801198a:	232f      	movs	r3, #47	; 0x2f
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	2364      	movs	r3, #100	; 0x64
 8011990:	224d      	movs	r2, #77	; 0x4d
 8011992:	f240 1173 	movw	r1, #371	; 0x173
 8011996:	f7fe fd2b 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80119a0:	22ff      	movs	r2, #255	; 0xff
 80119a2:	21ff      	movs	r1, #255	; 0xff
 80119a4:	20ff      	movs	r0, #255	; 0xff
 80119a6:	f7ff fa99 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119aa:	4603      	mov	r3, r0
 80119ac:	4619      	mov	r1, r3
 80119ae:	4620      	mov	r0, r4
 80119b0:	f7fe ffed 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80119ba:	2100      	movs	r1, #0
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff f839 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 80119c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80119cc:	210d      	movs	r1, #13
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe ff74 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80119d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe ff7f 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80119de:	4603      	mov	r3, r0
 80119e0:	4a15      	ldr	r2, [pc, #84]	; (8011a38 <_ZN12MainViewBaseC1Ev+0xb08>)
 80119e2:	2105      	movs	r1, #5
 80119e4:	4620      	mov	r0, r4
 80119e6:	f009 ff69 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80119f6:	4619      	mov	r1, r3
 80119f8:	4610      	mov	r0, r2
 80119fa:	f7ff f8a3 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011a04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a08:	210c      	movs	r1, #12
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fe ff56 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011a10:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011a14:	4620      	mov	r0, r4
 8011a16:	f005 fc71 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureDescriptor.setXY(287, 217);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011a20:	22d9      	movs	r2, #217	; 0xd9
 8011a22:	f240 111f 	movw	r1, #287	; 0x11f
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fe fd2d 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPressureDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011a32:	22a9      	movs	r2, #169	; 0xa9
 8011a34:	2100      	movs	r1, #0
 8011a36:	e001      	b.n	8011a3c <_ZN12MainViewBaseC1Ev+0xb0c>
 8011a38:	08026cf4 	.word	0x08026cf4
 8011a3c:	20ff      	movs	r0, #255	; 0xff
 8011a3e:	f7ff fa4d 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a42:	4603      	mov	r3, r0
 8011a44:	4619      	mov	r1, r3
 8011a46:	4620      	mov	r0, r4
 8011a48:	f7fe ffa1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureDescriptor.setLinespacing(0);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011a52:	2100      	movs	r1, #0
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe ffed 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPressureDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011a60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011a64:	2111      	movs	r1, #17
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe ff28 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011a6c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8011a70:	4620      	mov	r0, r4
 8011a72:	f005 fc43 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(168, 219);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011a7c:	22db      	movs	r2, #219	; 0xdb
 8011a7e:	21a8      	movs	r1, #168	; 0xa8
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fe fd00 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011a8c:	22a9      	movs	r2, #169	; 0xa9
 8011a8e:	2100      	movs	r1, #0
 8011a90:	20ff      	movs	r0, #255	; 0xff
 8011a92:	f7ff fa23 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f7fe ff77 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fe ffc3 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011ab4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011ab8:	2112      	movs	r1, #18
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fe fefe 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011ac0:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f005 fc19 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OilPressureValue.setPosition(133, 170, 100, 47);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f203 40fc 	addw	r0, r3, #1276	; 0x4fc
 8011ad0:	232f      	movs	r3, #47	; 0x2f
 8011ad2:	9300      	str	r3, [sp, #0]
 8011ad4:	2364      	movs	r3, #100	; 0x64
 8011ad6:	22aa      	movs	r2, #170	; 0xaa
 8011ad8:	2185      	movs	r1, #133	; 0x85
 8011ada:	f7fe fc89 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OilPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011ae4:	22ff      	movs	r2, #255	; 0xff
 8011ae6:	21ff      	movs	r1, #255	; 0xff
 8011ae8:	20ff      	movs	r0, #255	; 0xff
 8011aea:	f7ff f9f7 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aee:	4603      	mov	r3, r0
 8011af0:	4619      	mov	r1, r3
 8011af2:	4620      	mov	r0, r4
 8011af4:	f7fe ff4b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OilPressureValue.setLinespacing(0);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011afe:	2100      	movs	r1, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fe ff97 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID68).getText());
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f603 14ba 	addw	r4, r3, #2490	; 0x9ba
 8011b0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b10:	2127      	movs	r1, #39	; 0x27
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fe fed2 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe fedd 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011b22:	4603      	mov	r3, r0
 8011b24:	4ae1      	ldr	r2, [pc, #900]	; (8011eac <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011b26:	2105      	movs	r1, #5
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f009 fec7 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OilPressureValue.setWildcard(OilPressureValueBuffer);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	f7ff f801 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OilPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011b48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011b4c:	2113      	movs	r1, #19
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fe feb4 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011b54:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f005 fbcf 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureValue.setPosition(252, 170, 100, 47);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f203 5034 	addw	r0, r3, #1332	; 0x534
 8011b64:	232f      	movs	r3, #47	; 0x2f
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	2364      	movs	r3, #100	; 0x64
 8011b6a:	22aa      	movs	r2, #170	; 0xaa
 8011b6c:	21fc      	movs	r1, #252	; 0xfc
 8011b6e:	f7fe fc3f 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011b78:	22ff      	movs	r2, #255	; 0xff
 8011b7a:	21ff      	movs	r1, #255	; 0xff
 8011b7c:	20ff      	movs	r0, #255	; 0xff
 8011b7e:	f7ff f9ad 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b82:	4603      	mov	r3, r0
 8011b84:	4619      	mov	r1, r3
 8011b86:	4620      	mov	r0, r4
 8011b88:	f7fe ff01 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureValue.setLinespacing(0);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011b92:	2100      	movs	r1, #0
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fe ff4d 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID71).getText());
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f603 14c4 	addw	r4, r3, #2500	; 0x9c4
 8011ba0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011ba4:	212a      	movs	r1, #42	; 0x2a
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fe fe88 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011bac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fe fe93 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	4abc      	ldr	r2, [pc, #752]	; (8011eac <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011bba:	2105      	movs	r1, #5
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f009 fe7d 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPressureValue.setWildcard(FuelPressureValueBuffer);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f203 5234 	addw	r2, r3, #1332	; 0x534
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8011bce:	4619      	mov	r1, r3
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	f7fe ffb7 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011bdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011be0:	2126      	movs	r1, #38	; 0x26
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fe fe6a 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011be8:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011bec:	4620      	mov	r0, r4
 8011bee:	f005 fb85 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011bf8:	22f0      	movs	r2, #240	; 0xf0
 8011bfa:	f240 1197 	movw	r1, #407	; 0x197
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fe fc41 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011c0a:	22a9      	movs	r2, #169	; 0xa9
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	20ff      	movs	r0, #255	; 0xff
 8011c10:	f7ff f964 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c14:	4603      	mov	r3, r0
 8011c16:	4619      	mov	r1, r3
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f7fe feb8 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011c24:	2100      	movs	r1, #0
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7fe ff04 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011c32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011c36:	2116      	movs	r1, #22
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7fe fe3f 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011c3e:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8011c42:	4620      	mov	r0, r4
 8011c44:	f005 fb5a 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c4e:	22e2      	movs	r2, #226	; 0xe2
 8011c50:	f240 116d 	movw	r1, #365	; 0x16d
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe fc16 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011c60:	230a      	movs	r3, #10
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	2364      	movs	r3, #100	; 0x64
 8011c66:	2202      	movs	r2, #2
 8011c68:	2102      	movs	r1, #2
 8011c6a:	f003 f947 	bl	8014efc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011c74:	2300      	movs	r3, #0
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2300      	movs	r3, #0
 8011c7a:	2264      	movs	r2, #100	; 0x64
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	f003 fbbb 	bl	80153f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c88:	2100      	movs	r1, #0
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f003 f996 	bl	8014fbc <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011c96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fe fb49 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8011ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f003 fb9a 	bl	80153e2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011cb4:	22a9      	movs	r2, #169	; 0xa9
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	20ff      	movs	r0, #255	; 0xff
 8011cba:	f7ff f90f 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f003 f8c4 	bl	8014e50 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011cce:	213c      	movs	r1, #60	; 0x3c
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f003 f92b 	bl	8014f2c <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f503 60cc 	add.w	r0, r3, #1632	; 0x660
 8011cdc:	230a      	movs	r3, #10
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	23b4      	movs	r3, #180	; 0xb4
 8011ce2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011ce6:	210e      	movs	r1, #14
 8011ce8:	f7fe fb82 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 8011cf2:	22ff      	movs	r2, #255	; 0xff
 8011cf4:	21ff      	movs	r1, #255	; 0xff
 8011cf6:	20ff      	movs	r0, #255	; 0xff
 8011cf8:	f7ff f8f0 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	22ff      	movs	r2, #255	; 0xff
 8011d00:	4619      	mov	r1, r3
 8011d02:	4620      	mov	r0, r4
 8011d04:	f004 fdcb 	bl	801689e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8011d14:	4619      	mov	r1, r3
 8011d16:	4610      	mov	r0, r2
 8011d18:	f004 fe2a 	bl	8016970 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d22:	2205      	movs	r2, #5
 8011d24:	2100      	movs	r1, #0
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fb16 	bl	8012358 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d32:	2205      	movs	r2, #5
 8011d34:	21b4      	movs	r1, #180	; 0xb4
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 fb34 	bl	80123a4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d42:	2102      	movs	r1, #2
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 fb53 	bl	80123f0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d50:	2100      	movs	r1, #0
 8011d52:	4618      	mov	r0, r3
 8011d54:	f005 f926 	bl	8016fa4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8011d5e:	230a      	movs	r3, #10
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	23b4      	movs	r3, #180	; 0xb4
 8011d64:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011d68:	f240 111f 	movw	r1, #287	; 0x11f
 8011d6c:	f7fe fb40 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 8011d76:	22ff      	movs	r2, #255	; 0xff
 8011d78:	21ff      	movs	r1, #255	; 0xff
 8011d7a:	20ff      	movs	r0, #255	; 0xff
 8011d7c:	f7ff f8ae 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d80:	4603      	mov	r3, r0
 8011d82:	22ff      	movs	r2, #255	; 0xff
 8011d84:	4619      	mov	r1, r3
 8011d86:	4620      	mov	r0, r4
 8011d88:	f004 fd89 	bl	801689e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8011d98:	4619      	mov	r1, r3
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	f004 fde8 	bl	8016970 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011da6:	2205      	movs	r2, #5
 8011da8:	2100      	movs	r1, #0
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fad4 	bl	8012358 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011db6:	2205      	movs	r2, #5
 8011db8:	21b4      	movs	r1, #180	; 0xb4
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f000 faf2 	bl	80123a4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011dc6:	2102      	movs	r1, #2
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f000 fb11 	bl	80123f0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f005 f8e4 	bl	8016fa4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f503 60ef 	add.w	r0, r3, #1912	; 0x778
 8011de2:	2315      	movs	r3, #21
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	233c      	movs	r3, #60	; 0x3c
 8011de8:	22f7      	movs	r2, #247	; 0xf7
 8011dea:	21d2      	movs	r1, #210	; 0xd2
 8011dec:	f7fe fb00 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011df6:	22ff      	movs	r2, #255	; 0xff
 8011df8:	21ff      	movs	r1, #255	; 0xff
 8011dfa:	20ff      	movs	r0, #255	; 0xff
 8011dfc:	f7ff f86e 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e00:	4603      	mov	r3, r0
 8011e02:	4619      	mov	r1, r3
 8011e04:	4620      	mov	r0, r4
 8011e06:	f7fe fdc2 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8011e10:	2100      	movs	r1, #0
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fe fe0e 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f603 14ce 	addw	r4, r3, #2510	; 0x9ce
 8011e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011e22:	2118      	movs	r1, #24
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fe fd49 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011e2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fe fd54 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011e34:	4603      	mov	r3, r0
 8011e36:	4a1d      	ldr	r2, [pc, #116]	; (8011eac <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011e38:	2105      	movs	r1, #5
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f009 fd3e 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f603 13ce 	addw	r3, r3, #2510	; 0x9ce
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	4610      	mov	r0, r2
 8011e50:	f7fe fe78 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011e5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011e5e:	2117      	movs	r1, #23
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fe fd2b 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011e66:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f005 fa46 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011e76:	2201      	movs	r2, #1
 8011e78:	2101      	movs	r1, #1
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe fb03 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011e86:	2337      	movs	r3, #55	; 0x37
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011e8e:	2202      	movs	r2, #2
 8011e90:	2102      	movs	r1, #2
 8011e92:	f003 f983 	bl	801519c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	e002      	b.n	8011eb0 <_ZN12MainViewBaseC1Ev+0xf80>
 8011eaa:	bf00      	nop
 8011eac:	08026cf4 	.word	0x08026cf4
 8011eb0:	f003 faa2 	bl	80153f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011eba:	2100      	movs	r1, #0
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f003 f87d 	bl	8014fbc <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_GREEN_PINK_FADEPINKPURPLE_SMALL_TRANSPARENT_ID);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011ec8:	2101      	movs	r1, #1
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f003 f8c1 	bl	8015052 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011ed6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011eda:	4618      	mov	r0, r3
 8011edc:	f003 f976 	bl	80151cc <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011ee6:	2101      	movs	r1, #1
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f003 f89b 	bl	8015024 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f503 600a 	add.w	r0, r3, #2208	; 0x8a0
 8011ef4:	2316      	movs	r3, #22
 8011ef6:	9300      	str	r3, [sp, #0]
 8011ef8:	2337      	movs	r3, #55	; 0x37
 8011efa:	2204      	movs	r2, #4
 8011efc:	2119      	movs	r1, #25
 8011efe:	f7fe fa77 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011f08:	22ff      	movs	r2, #255	; 0xff
 8011f0a:	21ff      	movs	r1, #255	; 0xff
 8011f0c:	20ff      	movs	r0, #255	; 0xff
 8011f0e:	f7fe ffe5 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f12:	4603      	mov	r3, r0
 8011f14:	4619      	mov	r1, r3
 8011f16:	4620      	mov	r0, r4
 8011f18:	f7fe fd39 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8011f22:	2100      	movs	r1, #0
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fe fd85 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f603 14d8 	addw	r4, r3, #2520	; 0x9d8
 8011f30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011f34:	211a      	movs	r1, #26
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fe fcc0 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011f3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fe fccb 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011f46:	4603      	mov	r3, r0
 8011f48:	4ad6      	ldr	r2, [pc, #856]	; (80122a4 <_ZN12MainViewBaseC1Ev+0x1374>)
 8011f4a:	2105      	movs	r1, #5
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f009 fcb5 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8011f5e:	4619      	mov	r1, r3
 8011f60:	4610      	mov	r0, r2
 8011f62:	f7fe fdef 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011f6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011f70:	2119      	movs	r1, #25
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fe fca2 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011f78:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f005 f9bd 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011f88:	220f      	movs	r2, #15
 8011f8a:	2152      	movs	r1, #82	; 0x52
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fe fa7a 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011f98:	22ff      	movs	r2, #255	; 0xff
 8011f9a:	21ff      	movs	r1, #255	; 0xff
 8011f9c:	20ff      	movs	r0, #255	; 0xff
 8011f9e:	f7fe ff9d 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f7fe fcf1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fe fd3d 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011fc0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011fc4:	211b      	movs	r1, #27
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fe fc78 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011fcc:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f005 f993 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(133, 79, 100, 47);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8011fdc:	232f      	movs	r3, #47	; 0x2f
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	2364      	movs	r3, #100	; 0x64
 8011fe2:	224f      	movs	r2, #79	; 0x4f
 8011fe4:	2185      	movs	r1, #133	; 0x85
 8011fe6:	f7fe fa03 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011ff0:	22ff      	movs	r2, #255	; 0xff
 8011ff2:	21ff      	movs	r1, #255	; 0xff
 8011ff4:	20ff      	movs	r0, #255	; 0xff
 8011ff6:	f7fe ff71 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7fe fcc5 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801200a:	2100      	movs	r1, #0
 801200c:	4618      	mov	r0, r3
 801200e:	f7fe fd11 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f603 14e2 	addw	r4, r3, #2530	; 0x9e2
 8012018:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801201c:	2128      	movs	r1, #40	; 0x28
 801201e:	4618      	mov	r0, r3
 8012020:	f7fe fc4c 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012024:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe fc57 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801202e:	4603      	mov	r3, r0
 8012030:	4a9c      	ldr	r2, [pc, #624]	; (80122a4 <_ZN12MainViewBaseC1Ev+0x1374>)
 8012032:	2105      	movs	r1, #5
 8012034:	4620      	mov	r0, r4
 8012036:	f009 fc41 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f603 13e2 	addw	r3, r3, #2530	; 0x9e2
 8012046:	4619      	mov	r1, r3
 8012048:	4610      	mov	r0, r2
 801204a:	f7fe fd7b 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8012054:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012058:	211c      	movs	r1, #28
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe fc2e 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012060:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8012064:	4620      	mov	r0, r4
 8012066:	f005 f949 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(252, 79, 100, 47);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f603 1044 	addw	r0, r3, #2372	; 0x944
 8012070:	232f      	movs	r3, #47	; 0x2f
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	2364      	movs	r3, #100	; 0x64
 8012076:	224f      	movs	r2, #79	; 0x4f
 8012078:	21fc      	movs	r1, #252	; 0xfc
 801207a:	f7fe f9b9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8012084:	22ff      	movs	r2, #255	; 0xff
 8012086:	21ff      	movs	r1, #255	; 0xff
 8012088:	20ff      	movs	r0, #255	; 0xff
 801208a:	f7fe ff27 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801208e:	4603      	mov	r3, r0
 8012090:	4619      	mov	r1, r3
 8012092:	4620      	mov	r0, r4
 8012094:	f7fe fc7b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801209e:	2100      	movs	r1, #0
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fe fcc7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID70).getText());
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 80120ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80120b0:	2129      	movs	r1, #41	; 0x29
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fe fc02 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80120b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80120bc:	4618      	mov	r0, r3
 80120be:	f7fe fc0d 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80120c2:	4603      	mov	r3, r0
 80120c4:	4a77      	ldr	r2, [pc, #476]	; (80122a4 <_ZN12MainViewBaseC1Ev+0x1374>)
 80120c6:	2105      	movs	r1, #5
 80120c8:	4620      	mov	r0, r4
 80120ca:	f009 fbf7 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f603 1244 	addw	r2, r3, #2372	; 0x944
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80120da:	4619      	mov	r1, r3
 80120dc:	4610      	mov	r0, r2
 80120de:	f7fe fd31 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f603 1444 	addw	r4, r3, #2372	; 0x944
 80120e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80120ec:	211d      	movs	r1, #29
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fe fbe4 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80120f4:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 80120f8:	4620      	mov	r0, r4
 80120fa:	f005 f8ff 	bl	80172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	3340      	adds	r3, #64	; 0x40
 8012104:	4619      	mov	r1, r3
 8012106:	4610      	mov	r0, r2
 8012108:	f7fe fb20 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	3370      	adds	r3, #112	; 0x70
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fe fb19 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	33a4      	adds	r3, #164	; 0xa4
 8012120:	4619      	mov	r1, r3
 8012122:	4610      	mov	r0, r2
 8012124:	f7fe fb12 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	33d8      	adds	r3, #216	; 0xd8
 801212e:	4619      	mov	r1, r3
 8012130:	4610      	mov	r0, r2
 8012132:	f7fe fb0b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801213e:	4619      	mov	r1, r3
 8012140:	4610      	mov	r0, r2
 8012142:	f7fe fb03 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801214e:	4619      	mov	r1, r3
 8012150:	4610      	mov	r0, r2
 8012152:	f7fe fafb 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801215e:	4619      	mov	r1, r3
 8012160:	4610      	mov	r0, r2
 8012162:	f7fe faf3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801216e:	4619      	mov	r1, r3
 8012170:	4610      	mov	r0, r2
 8012172:	f7fe faeb 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801217e:	4619      	mov	r1, r3
 8012180:	4610      	mov	r0, r2
 8012182:	f7fe fae3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801218e:	4619      	mov	r1, r3
 8012190:	4610      	mov	r0, r2
 8012192:	f7fe fadb 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801219e:	4619      	mov	r1, r3
 80121a0:	4610      	mov	r0, r2
 80121a2:	f7fe fad3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80121ae:	4619      	mov	r1, r3
 80121b0:	4610      	mov	r0, r2
 80121b2:	f7fe facb 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80121be:	4619      	mov	r1, r3
 80121c0:	4610      	mov	r0, r2
 80121c2:	f7fe fac3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fe fabb 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80121de:	4619      	mov	r1, r3
 80121e0:	4610      	mov	r0, r2
 80121e2:	f7fe fab3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80121ee:	4619      	mov	r1, r3
 80121f0:	4610      	mov	r0, r2
 80121f2:	f7fe faab 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80121fe:	4619      	mov	r1, r3
 8012200:	4610      	mov	r0, r2
 8012202:	f7fe faa3 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801220e:	4619      	mov	r1, r3
 8012210:	4610      	mov	r0, r2
 8012212:	f7fe fa9b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801221e:	4619      	mov	r1, r3
 8012220:	4610      	mov	r0, r2
 8012222:	f7fe fa93 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureDescriptor);
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801222e:	4619      	mov	r1, r3
 8012230:	4610      	mov	r0, r2
 8012232:	f7fe fa8b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801223e:	4619      	mov	r1, r3
 8012240:	4610      	mov	r0, r2
 8012242:	f7fe fa83 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OilPressureValue);
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801224e:	4619      	mov	r1, r3
 8012250:	4610      	mov	r0, r2
 8012252:	f7fe fa7b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureValue);
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801225e:	4619      	mov	r1, r3
 8012260:	4610      	mov	r0, r2
 8012262:	f7fe fa73 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801226e:	4619      	mov	r1, r3
 8012270:	4610      	mov	r0, r2
 8012272:	f7fe fa6b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801227e:	4619      	mov	r1, r3
 8012280:	4610      	mov	r0, r2
 8012282:	f7fe fa63 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 801228e:	4619      	mov	r1, r3
 8012290:	4610      	mov	r0, r2
 8012292:	f7fe fa5b 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801229e:	4619      	mov	r1, r3
 80122a0:	e002      	b.n	80122a8 <_ZN12MainViewBaseC1Ev+0x1378>
 80122a2:	bf00      	nop
 80122a4:	08026cf4 	.word	0x08026cf4
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fe fa4f 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80122b6:	4619      	mov	r1, r3
 80122b8:	4610      	mov	r0, r2
 80122ba:	f7fe fa47 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 80122c6:	4619      	mov	r1, r3
 80122c8:	4610      	mov	r0, r2
 80122ca:	f7fe fa3f 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fe fa37 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80122e6:	4619      	mov	r1, r3
 80122e8:	4610      	mov	r0, r2
 80122ea:	f7fe fa2f 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80122f6:	4619      	mov	r1, r3
 80122f8:	4610      	mov	r0, r2
 80122fa:	f7fe fa27 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012306:	4619      	mov	r1, r3
 8012308:	4610      	mov	r0, r2
 801230a:	f7fe fa1f 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	37cc      	adds	r7, #204	; 0xcc
 8012314:	46bd      	mov	sp, r7
 8012316:	bd90      	pop	{r4, r7, pc}

08012318 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]

}
 8012320:	bf00      	nop
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4618      	mov	r0, r3
 8012338:	f007 ff56 	bl	801a1e8 <_ZN8touchgfx6ScreenC1Ev>
 801233c:	4a05      	ldr	r2, [pc, #20]	; (8012354 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	601a      	str	r2, [r3, #0]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	080272c4 	.word	0x080272c4

08012358 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8012358:	b590      	push	{r4, r7, lr}
 801235a:	b089      	sub	sp, #36	; 0x24
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	015a      	lsls	r2, r3, #5
 801236c:	f107 0314 	add.w	r3, r7, #20
 8012370:	4611      	mov	r1, r2
 8012372:	4618      	mov	r0, r3
 8012374:	f7fe fc16 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	461c      	mov	r4, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	61fb      	str	r3, [r7, #28]
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	015a      	lsls	r2, r3, #5
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f7fe fc0a 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012390:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012392:	461a      	mov	r2, r3
 8012394:	4621      	mov	r1, r4
 8012396:	68f8      	ldr	r0, [r7, #12]
 8012398:	f004 fdee 	bl	8016f78 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 801239c:	bf00      	nop
 801239e:	3724      	adds	r7, #36	; 0x24
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd90      	pop	{r4, r7, pc}

080123a4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80123a4:	b590      	push	{r4, r7, lr}
 80123a6:	b089      	sub	sp, #36	; 0x24
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	61bb      	str	r3, [r7, #24]
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	015a      	lsls	r2, r3, #5
 80123b8:	f107 0314 	add.w	r3, r7, #20
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fe fbf0 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	461c      	mov	r4, r3
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	015a      	lsls	r2, r3, #5
 80123d0:	f107 0310 	add.w	r3, r7, #16
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe fbe4 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80123dc:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80123de:	461a      	mov	r2, r3
 80123e0:	4621      	mov	r1, r4
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f004 fdd3 	bl	8016f8e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80123e8:	bf00      	nop
 80123ea:	3724      	adds	r7, #36	; 0x24
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd90      	pop	{r4, r7, pc}

080123f0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	60fb      	str	r3, [r7, #12]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	015a      	lsls	r2, r3, #5
 8012402:	f107 0308 	add.w	r3, r7, #8
 8012406:	4611      	mov	r1, r2
 8012408:	4618      	mov	r0, r3
 801240a:	f7fe fbcb 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801240e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012410:	4619      	mov	r1, r3
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7fe fbe1 	bl	8010bda <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8012418:	bf00      	nop
 801241a:	3710      	adds	r7, #16
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	4a05      	ldr	r2, [pc, #20]	; (8012440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	4618      	mov	r0, r3
 8012432:	f7fe fb4f 	bl	8010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	4618      	mov	r0, r3
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	08028e98 	.word	0x08028e98

08012444 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff ffe7 	bl	8012420 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012452:	2138      	movs	r1, #56	; 0x38
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f013 f99e 	bl	8025796 <_ZdlPvj>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	4a05      	ldr	r2, [pc, #20]	; (8012484 <_ZN8touchgfx4LineD1Ev+0x20>)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4618      	mov	r0, r3
 8012476:	f004 fb59 	bl	8016b2c <_ZN8touchgfx12CanvasWidgetD1Ev>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	08028c44 	.word	0x08028c44

08012488 <_ZN8touchgfx4LineD0Ev>:
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7ff ffe7 	bl	8012464 <_ZN8touchgfx4LineD1Ev>
 8012496:	2174      	movs	r1, #116	; 0x74
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f013 f97c 	bl	8025796 <_ZdlPvj>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4618      	mov	r0, r3
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	4a05      	ldr	r2, [pc, #20]	; (80124c8 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fe fbb1 	bl	8010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	08028948 	.word	0x08028948

080124cc <_ZN8touchgfx13PainterRGB888D0Ev>:
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7ff ffe7 	bl	80124a8 <_ZN8touchgfx13PainterRGB888D1Ev>
 80124da:	2118      	movs	r1, #24
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f013 f95a 	bl	8025796 <_ZdlPvj>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
    return bitmap_database;
 80124f0:	4b02      	ldr	r3, [pc, #8]	; (80124fc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	08027430 	.word	0x08027430

08012500 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012500:	b480      	push	{r7}
 8012502:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012504:	2303      	movs	r3, #3
}
 8012506:	4618      	mov	r0, r3
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012510:	b480      	push	{r7}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	4613      	mov	r3, r2
 801251c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801251e:	4a07      	ldr	r2, [pc, #28]	; (801253c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012524:	4a06      	ldr	r2, [pc, #24]	; (8012540 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801252a:	4a06      	ldr	r2, [pc, #24]	; (8012544 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801252c:	88fb      	ldrh	r3, [r7, #6]
 801252e:	8013      	strh	r3, [r2, #0]
    }
 8012530:	bf00      	nop
 8012532:	3714      	adds	r7, #20
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	2000bc24 	.word	0x2000bc24
 8012540:	2000bc2c 	.word	0x2000bc2c
 8012544:	2000bc28 	.word	0x2000bc28

08012548 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012548:	b590      	push	{r4, r7, lr}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	4603      	mov	r3, r0
 8012550:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012556:	88fb      	ldrh	r3, [r7, #6]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d127      	bne.n	80125ac <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801255c:	88fb      	ldrh	r3, [r7, #6]
 801255e:	4a1e      	ldr	r2, [pc, #120]	; (80125d8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d016      	beq.n	8012596 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012568:	88fb      	ldrh	r3, [r7, #6]
 801256a:	4a1b      	ldr	r2, [pc, #108]	; (80125d8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012570:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	4413      	add	r3, r2
 801257a:	4a18      	ldr	r2, [pc, #96]	; (80125dc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801257c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	4413      	add	r3, r2
 8012586:	4a16      	ldr	r2, [pc, #88]	; (80125e0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012588:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	689b      	ldr	r3, [r3, #8]
 801258e:	68ba      	ldr	r2, [r7, #8]
 8012590:	4413      	add	r3, r2
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	e00a      	b.n	80125ac <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012596:	4b11      	ldr	r3, [pc, #68]	; (80125dc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012598:	4a12      	ldr	r2, [pc, #72]	; (80125e4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801259a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801259c:	4a12      	ldr	r2, [pc, #72]	; (80125e8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801259e:	4b10      	ldr	r3, [pc, #64]	; (80125e0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80125a0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80125a2:	88fb      	ldrh	r3, [r7, #6]
 80125a4:	4a11      	ldr	r2, [pc, #68]	; (80125ec <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80125a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125aa:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d00d      	beq.n	80125ce <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80125b2:	4a0f      	ldr	r2, [pc, #60]	; (80125f0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80125b4:	88fb      	ldrh	r3, [r7, #6]
 80125b6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80125b8:	f000 f83e 	bl	8012638 <_ZN17TypedTextDatabase8getFontsEv>
 80125bc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80125be:	f000 f833 	bl	8012628 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80125c2:	4603      	mov	r3, r0
 80125c4:	461a      	mov	r2, r3
 80125c6:	4621      	mov	r1, r4
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff ffa1 	bl	8012510 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80125ce:	bf00      	nop
 80125d0:	3714      	adds	r7, #20
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd90      	pop	{r4, r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20008634 	.word	0x20008634
 80125dc:	2000863c 	.word	0x2000863c
 80125e0:	20008640 	.word	0x20008640
 80125e4:	08062b54 	.word	0x08062b54
 80125e8:	08062aa8 	.word	0x08062aa8
 80125ec:	08062cd8 	.word	0x08062cd8
 80125f0:	20008638 	.word	0x20008638

080125f4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012600:	4b07      	ldr	r3, [pc, #28]	; (8012620 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	4b07      	ldr	r3, [pc, #28]	; (8012624 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012606:	6819      	ldr	r1, [r3, #0]
 8012608:	887b      	ldrh	r3, [r7, #2]
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	440b      	add	r3, r1
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	4413      	add	r3, r2
}
 8012614:	4618      	mov	r0, r3
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr
 8012620:	2000863c 	.word	0x2000863c
 8012624:	20008640 	.word	0x20008640

08012628 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012628:	b480      	push	{r7}
 801262a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801262c:	232b      	movs	r3, #43	; 0x2b
}
 801262e:	4618      	mov	r0, r3
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
    return _fonts;
 801263c:	4b02      	ldr	r3, [pc, #8]	; (8012648 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801263e:	4618      	mov	r0, r3
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr
 8012648:	20008644 	.word	0x20008644

0801264c <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d127      	bne.n	80126ac <_Z41__static_initialization_and_destruction_0ii+0x60>
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012662:	4293      	cmp	r3, r2
 8012664:	d122      	bne.n	80126ac <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8012666:	f7fc ffb5 	bl	800f5d4 <_Z25getFont_Asap_Bold_18_4bppv>
 801266a:	4602      	mov	r2, r0
};
 801266c:	4b11      	ldr	r3, [pc, #68]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801266e:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012670:	f7fd f876 	bl	800f760 <_Z25getFont_Asap_Bold_40_4bppv>
 8012674:	4602      	mov	r2, r0
};
 8012676:	4b0f      	ldr	r3, [pc, #60]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012678:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801267a:	f7fd f82f 	bl	800f6dc <_Z25getFont_Asap_Bold_30_4bppv>
 801267e:	4602      	mov	r2, r0
};
 8012680:	4b0c      	ldr	r3, [pc, #48]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012682:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012684:	f7fc ff64 	bl	800f550 <_Z25getFont_Asap_Bold_12_4bppv>
 8012688:	4602      	mov	r2, r0
};
 801268a:	4b0a      	ldr	r3, [pc, #40]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801268c:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 801268e:	f7fd f8a9 	bl	800f7e4 <_Z25getFont_Asap_Bold_60_4bppv>
 8012692:	4602      	mov	r2, r0
};
 8012694:	4b07      	ldr	r3, [pc, #28]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012696:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012698:	f7fc ffde 	bl	800f658 <_Z25getFont_Asap_Bold_21_4bppv>
 801269c:	4602      	mov	r2, r0
};
 801269e:	4b05      	ldr	r3, [pc, #20]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80126a0:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80126a2:	f7fc ff13 	bl	800f4cc <_Z25getFont_Asap_Bold_10_4bppv>
 80126a6:	4602      	mov	r2, r0
};
 80126a8:	4b02      	ldr	r3, [pc, #8]	; (80126b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80126aa:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 80126ac:	bf00      	nop
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	20008644 	.word	0x20008644

080126b8 <_GLOBAL__sub_I__fonts>:
 80126b8:	b580      	push	{r7, lr}
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126c0:	2001      	movs	r0, #1
 80126c2:	f7ff ffc3 	bl	801264c <_Z41__static_initialization_and_destruction_0ii>
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	4a05      	ldr	r2, [pc, #20]	; (80126e8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fd fb13 	bl	800fd04 <_ZN23FrontendApplicationBaseD1Ev>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	08027474 	.word	0x08027474

080126ec <_ZN19FrontendApplicationD0Ev>:
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff ffe7 	bl	80126c8 <_ZN19FrontendApplicationD1Ev>
 80126fa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f013 f849 	bl	8025796 <_ZdlPvj>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	4618      	mov	r0, r3
 8012708:	3708      	adds	r7, #8
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801270e:	b580      	push	{r7, lr}
 8012710:	b082      	sub	sp, #8
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801271c:	4618      	mov	r0, r3
 801271e:	f000 fc39 	bl	8012f94 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4618      	mov	r0, r3
 8012726:	f006 fcbb 	bl	80190a0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801272a:	bf00      	nop
 801272c:	3708      	adds	r7, #8
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
	...

08012734 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	68b9      	ldr	r1, [r7, #8]
 8012746:	4618      	mov	r0, r3
 8012748:	f7fd fb56 	bl	800fdf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801274c:	4a03      	ldr	r2, [pc, #12]	; (801275c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	601a      	str	r2, [r3, #0]
{
}
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	08027474 	.word	0x08027474

08012760 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
    {
    }
 8012768:	bf00      	nop
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr

08012774 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
    {
    }
 801277c:	bf00      	nop
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    {
 8012790:	4a04      	ldr	r2, [pc, #16]	; (80127a4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	601a      	str	r2, [r3, #0]
    }
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	08027500 	.word	0x08027500

080127a8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
    }
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff ffe9 	bl	8012788 <_ZN8touchgfx9PresenterD1Ev>
 80127b6:	2104      	movs	r1, #4
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f012 ffec 	bl	8025796 <_ZdlPvj>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4618      	mov	r0, r3
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
    {
 80127d0:	4a04      	ldr	r2, [pc, #16]	; (80127e4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	601a      	str	r2, [r3, #0]
    }
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr
 80127e4:	08027500 	.word	0x08027500

080127e8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	4a06      	ldr	r2, [pc, #24]	; (801280c <_ZN13ModelListenerC1Ev+0x24>)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	601a      	str	r2, [r3, #0]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	605a      	str	r2, [r3, #4]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	4618      	mov	r0, r3
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	080274e8 	.word	0x080274e8

08012810 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	4a04      	ldr	r2, [pc, #16]	; (801282c <_ZN13ModelListenerD1Ev+0x1c>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr
 801282c:	080274e8 	.word	0x080274e8

08012830 <_ZN13ModelListenerD0Ev>:
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7ff ffe9 	bl	8012810 <_ZN13ModelListenerD1Ev>
 801283e:	2108      	movs	r1, #8
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f012 ffa8 	bl	8025796 <_ZdlPvj>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
 801285a:	bf00      	nop
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr

08012866 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8012866:	b480      	push	{r7}
 8012868:	b083      	sub	sp, #12
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
 801286e:	6039      	str	r1, [r7, #0]
 8012870:	bf00      	nop
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr

0801287c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	4a09      	ldr	r2, [pc, #36]	; (80128ac <_ZN13MainPresenterD1Ev+0x30>)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	4a09      	ldr	r2, [pc, #36]	; (80128b0 <_ZN13MainPresenterD1Ev+0x34>)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	605a      	str	r2, [r3, #4]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	3304      	adds	r3, #4
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff ffbb 	bl	8012810 <_ZN13ModelListenerD1Ev>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff ff73 	bl	8012788 <_ZN8touchgfx9PresenterD1Ev>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	080274b0 	.word	0x080274b0
 80128b0:	080274d0 	.word	0x080274d0

080128b4 <_ZThn4_N13MainPresenterD1Ev>:
 80128b4:	f1a0 0004 	sub.w	r0, r0, #4
 80128b8:	e7e0      	b.n	801287c <_ZN13MainPresenterD1Ev>
 80128ba:	bf00      	nop

080128bc <_ZN13MainPresenterD0Ev>:
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff ffd9 	bl	801287c <_ZN13MainPresenterD1Ev>
 80128ca:	2110      	movs	r1, #16
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f012 ff62 	bl	8025796 <_ZdlPvj>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <_ZThn4_N13MainPresenterD0Ev>:
 80128dc:	f1a0 0004 	sub.w	r0, r0, #4
 80128e0:	e7ec      	b.n	80128bc <_ZN13MainPresenterD0Ev>
	...

080128e4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
    : view(v)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ff ff69 	bl	80127c8 <_ZN8touchgfx9PresenterC1Ev>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	3304      	adds	r3, #4
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff ff74 	bl	80127e8 <_ZN13ModelListenerC1Ev>
 8012900:	4a06      	ldr	r2, [pc, #24]	; (801291c <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	4a06      	ldr	r2, [pc, #24]	; (8012920 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	605a      	str	r2, [r3, #4]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	60da      	str	r2, [r3, #12]
{
}
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	080274b0 	.word	0x080274b0
 8012920:	080274d0 	.word	0x080274d0

08012924 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
}
 8012940:	bf00      	nop
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	6839      	ldr	r1, [r7, #0]
 801295c:	4618      	mov	r0, r3
 801295e:	f000 f9f7 	bl	8012d50 <_ZN8MainView9updateValEPh>
}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801296a:	f1a0 0004 	sub.w	r0, r0, #4
 801296e:	f7ff bfed 	b.w	801294c <_ZN13MainPresenter11setNewValueEPh>

08012972 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b082      	sub	sp, #8
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	6839      	ldr	r1, [r7, #0]
 8012982:	4618      	mov	r0, r3
 8012984:	f000 f908 	bl	8012b98 <_ZN8MainView14updateSettingsEPh>
}
 8012988:	bf00      	nop
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012990:	f1a0 0004 	sub.w	r0, r0, #4
 8012994:	f7ff bfed 	b.w	8012972 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012998 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2200      	movs	r2, #0
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4618      	mov	r0, r3
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	460b      	mov	r3, r1
 80129be:	607a      	str	r2, [r7, #4]
 80129c0:	ed87 0a00 	vstr	s0, [r7]
 80129c4:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80129c6:	463b      	mov	r3, r7
 80129c8:	8979      	ldrh	r1, [r7, #10]
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f009 f8cf 	bl	801bb70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80129d2:	4603      	mov	r3, r0
    }
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
        return rect.width;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80129ea:	4618      	mov	r0, r3
 80129ec:	370c      	adds	r7, #12
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr

080129f6 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80129f6:	b480      	push	{r7}
 80129f8:	b083      	sub	sp, #12
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
        return rect.height;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	4a05      	ldr	r2, [pc, #20]	; (8012a30 <_ZN8MainViewD1Ev+0x20>)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7fe f963 	bl	8010cec <_ZN12MainViewBaseD1Ev>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	08027518 	.word	0x08027518

08012a34 <_ZN8MainViewD0Ev>:
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7ff ffe7 	bl	8012a10 <_ZN8MainViewD1Ev>
 8012a42:	f242 6118 	movw	r1, #9752	; 0x2618
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f012 fea5 	bl	8025796 <_ZdlPvj>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
	...

08012a58 <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 8012a58:	b590      	push	{r4, r7, lr}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe fa64 	bl	8010f30 <_ZN12MainViewBaseC1Ev>
 8012a68:	4a15      	ldr	r2, [pc, #84]	; (8012ac0 <_ZN8MainViewC1Ev+0x68>)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012a6e:	4b15      	ldr	r3, [pc, #84]	; (8012ac4 <_ZN8MainViewC1Ev+0x6c>)
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	461c      	mov	r4, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7ff ffae 	bl	80129dc <_ZNK8touchgfx8Drawable8getWidthEv>
 8012a80:	4603      	mov	r3, r0
 8012a82:	429c      	cmp	r4, r3
 8012a84:	dc0b      	bgt.n	8012a9e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012a86:	4b10      	ldr	r3, [pc, #64]	; (8012ac8 <_ZN8MainViewC1Ev+0x70>)
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	461c      	mov	r4, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff ffaf 	bl	80129f6 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012a98:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012a9a:	429c      	cmp	r4, r3
 8012a9c:	dd01      	ble.n	8012aa2 <_ZN8MainViewC1Ev+0x4a>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e000      	b.n	8012aa4 <_ZN8MainViewC1Ev+0x4c>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d005      	beq.n	8012ab4 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3340      	adds	r3, #64	; 0x40
 8012aac:	2101      	movs	r1, #1
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fd fd5a 	bl	8010568 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd90      	pop	{r4, r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	08027518 	.word	0x08027518
 8012ac4:	2000bb88 	.word	0x2000bb88
 8012ac8:	2000bb8a 	.word	0x2000bb8a

08012acc <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
}
 8012ae8:	bf00      	nop
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012afa:	2200      	movs	r2, #0
 8012afc:	2100      	movs	r1, #0
 8012afe:	2000      	movs	r0, #0
 8012b00:	f7fe f9ec 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b04:	4603      	mov	r3, r0
 8012b06:	607b      	str	r3, [r7, #4]
	return black_color;
 8012b08:	687b      	ldr	r3, [r7, #4]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
	...

08012b14 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0

	color_index ++;
 8012b1a:	4b1e      	ldr	r3, [pc, #120]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	4a1c      	ldr	r2, [pc, #112]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b22:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012b24:	4b1b      	ldr	r3, [pc, #108]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	dd02      	ble.n	8012b32 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012b2c:	4b19      	ldr	r3, [pc, #100]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b2e:	2200      	movs	r2, #0
 8012b30:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012b32:	2200      	movs	r2, #0
 8012b34:	2100      	movs	r1, #0
 8012b36:	20ff      	movs	r0, #255	; 0xff
 8012b38:	f7fe f9d0 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012b40:	2200      	movs	r2, #0
 8012b42:	2100      	movs	r1, #0
 8012b44:	2000      	movs	r0, #0
 8012b46:	f7fe f9c9 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012b4e:	22ff      	movs	r2, #255	; 0xff
 8012b50:	21ff      	movs	r1, #255	; 0xff
 8012b52:	20ff      	movs	r0, #255	; 0xff
 8012b54:	f7fe f9c2 	bl	8010edc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012b5c:	463b      	mov	r3, r7
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7ff ff1a 	bl	8012998 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012b64:	4b0b      	ldr	r3, [pc, #44]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d101      	bne.n	8012b70 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012b70:	4b08      	ldr	r3, [pc, #32]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d101      	bne.n	8012b7c <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012b7c:	4b05      	ldr	r3, [pc, #20]	; (8012b94 <_ZL20getColorFromRevLimitv+0x80>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	d101      	bne.n	8012b88 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012b88:	683b      	ldr	r3, [r7, #0]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	20008660 	.word	0x20008660

08012b98 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b086      	sub	sp, #24
 8012b9c:	af02      	add	r7, sp, #8
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpmLimit;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a66      	ldr	r2, [pc, #408]	; (8012d44 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012bac:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	6a1b      	ldr	r3, [r3, #32]
 8012bb8:	ee07 3a90 	vmov	s15, r3
 8012bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bc0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012d48 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bcc:	ee17 3a90 	vmov	r3, s15
 8012bd0:	b21a      	sxth	r2, r3
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	9300      	str	r3, [sp, #0]
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	2100      	movs	r1, #0
 8012bda:	f002 fc0d 	bl	80153f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012be4:	4618      	mov	r0, r3
 8012be6:	f006 ff97 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f503 6019 	add.w	r0, r3, #2448	; 0x990
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	4a55      	ldr	r2, [pc, #340]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012bf6:	2102      	movs	r1, #2
 8012bf8:	f008 fe60 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012c02:	4618      	mov	r0, r3
 8012c04:	f004 fb50 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f006 ff82 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f603 1094 	addw	r0, r3, #2452	; 0x994
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	4a4b      	ldr	r2, [pc, #300]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c20:	2102      	movs	r1, #2
 8012c22:	f008 fe4b 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f004 fb3b 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f006 ff6d 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f603 1098 	addw	r0, r3, #2456	; 0x998
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	4a40      	ldr	r2, [pc, #256]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c4a:	2102      	movs	r1, #2
 8012c4c:	f008 fe36 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012c56:	4618      	mov	r0, r3
 8012c58:	f004 fb26 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012c62:	4618      	mov	r0, r3
 8012c64:	f006 ff58 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f603 109c 	addw	r0, r3, #2460	; 0x99c
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	4a36      	ldr	r2, [pc, #216]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c74:	2102      	movs	r1, #2
 8012c76:	f008 fe21 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012c80:	4618      	mov	r0, r3
 8012c82:	f004 fb11 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f006 ff43 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	695b      	ldr	r3, [r3, #20]
 8012c9c:	4a2b      	ldr	r2, [pc, #172]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c9e:	2102      	movs	r1, #2
 8012ca0:	f008 fe0c 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012caa:	4618      	mov	r0, r3
 8012cac:	f004 fafc 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f006 ff2e 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f603 10a4 	addw	r0, r3, #2468	; 0x9a4
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	699b      	ldr	r3, [r3, #24]
 8012cc6:	4a21      	ldr	r2, [pc, #132]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012cc8:	2102      	movs	r1, #2
 8012cca:	f008 fdf7 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f004 fae7 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f006 ff19 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f603 10a8 	addw	r0, r3, #2472	; 0x9a8
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	69db      	ldr	r3, [r3, #28]
 8012cf0:	4a16      	ldr	r2, [pc, #88]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012cf2:	2102      	movs	r1, #2
 8012cf4:	f008 fde2 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f004 fad2 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f006 ff04 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f603 10ac 	addw	r0, r3, #2476	; 0x9ac
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6a1b      	ldr	r3, [r3, #32]
 8012d1a:	4a0c      	ldr	r2, [pc, #48]	; (8012d4c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012d1c:	2102      	movs	r1, #2
 8012d1e:	f008 fdcd 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f004 fabd 	bl	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012d34:	4618      	mov	r0, r3
 8012d36:	f006 feef 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8012d3a:	bf00      	nop
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	20000048 	.word	0x20000048
 8012d48:	447a0000 	.word	0x447a0000
 8012d4c:	08026e58 	.word	0x08026e58

08012d50 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8012d50:	b590      	push	{r4, r7, lr}
 8012d52:	b085      	sub	sp, #20
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681a      	ldr	r2, [r3, #0]
 8012d62:	4b77      	ldr	r3, [pc, #476]	; (8012f40 <_ZN8MainView9updateValEPh+0x1f0>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	bfac      	ite	ge
 8012d6a:	2301      	movge	r3, #1
 8012d6c:	2300      	movlt	r3, #0
 8012d6e:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012d70:	7afb      	ldrb	r3, [r7, #11]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d012      	beq.n	8012d9c <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8012d76:	4b73      	ldr	r3, [pc, #460]	; (8012f44 <_ZN8MainView9updateValEPh+0x1f4>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012d82:	f7ff fec7 	bl	8012b14 <_ZL20getColorFromRevLimitv>
 8012d86:	4603      	mov	r3, r0
 8012d88:	4619      	mov	r1, r3
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f7fd fd88 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	3340      	adds	r3, #64	; 0x40
 8012d94:	4618      	mov	r0, r3
 8012d96:	f006 febf 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012d9a:	e018      	b.n	8012dce <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8012d9c:	4b69      	ldr	r3, [pc, #420]	; (8012f44 <_ZN8MainView9updateValEPh+0x1f4>)
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	f083 0301 	eor.w	r3, r3, #1
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d011      	beq.n	8012dce <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012db0:	f7ff fea0 	bl	8012af4 <_ZL13getBlackColorv>
 8012db4:	4603      	mov	r3, r0
 8012db6:	4619      	mov	r1, r3
 8012db8:	4620      	mov	r0, r4
 8012dba:	f7fd fd71 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	3340      	adds	r3, #64	; 0x40
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f006 fea8 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8012dc8:	4b5e      	ldr	r3, [pc, #376]	; (8012f44 <_ZN8MainView9updateValEPh+0x1f4>)
 8012dca:	2201      	movs	r2, #1
 8012dcc:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f503 62f6 	add.w	r2, r3, #1968	; 0x7b0
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4619      	mov	r1, r3
 8012dda:	4610      	mov	r0, r2
 8012ddc:	f002 f9f6 	bl	80151cc <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012de6:	4618      	mov	r0, r3
 8012de8:	f006 fe96 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f603 10d8 	addw	r0, r3, #2520	; 0x9d8
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a54      	ldr	r2, [pc, #336]	; (8012f48 <_ZN8MainView9updateValEPh+0x1f8>)
 8012df8:	2105      	movs	r1, #5
 8012dfa:	f008 fd5f 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8012e04:	4618      	mov	r0, r3
 8012e06:	f006 fe87 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	4a4c      	ldr	r2, [pc, #304]	; (8012f48 <_ZN8MainView9updateValEPh+0x1f8>)
 8012e16:	2105      	movs	r1, #5
 8012e18:	f008 fd50 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012e22:	4618      	mov	r0, r3
 8012e24:	f006 fe78 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f603 10e2 	addw	r0, r3, #2530	; 0x9e2
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	4a45      	ldr	r2, [pc, #276]	; (8012f48 <_ZN8MainView9updateValEPh+0x1f8>)
 8012e34:	2105      	movs	r1, #5
 8012e36:	f008 fd41 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012e40:	4618      	mov	r0, r3
 8012e42:	f006 fe69 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e52:	eeb0 0a67 	vmov.f32	s0, s15
 8012e56:	4a3d      	ldr	r2, [pc, #244]	; (8012f4c <_ZN8MainView9updateValEPh+0x1fc>)
 8012e58:	2105      	movs	r1, #5
 8012e5a:	f7ff fdab 	bl	80129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e64:	4618      	mov	r0, r3
 8012e66:	f006 fe57 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambdaTarget);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f603 1086 	addw	r0, r3, #2438	; 0x986
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	edd3 7a04 	vldr	s15, [r3, #16]
 8012e76:	eeb0 0a67 	vmov.f32	s0, s15
 8012e7a:	4a34      	ldr	r2, [pc, #208]	; (8012f4c <_ZN8MainView9updateValEPh+0x1fc>)
 8012e7c:	2105      	movs	r1, #5
 8012e7e:	f7ff fd99 	bl	80129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f006 fe45 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oilPressure);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f603 10ba 	addw	r0, r3, #2490	; 0x9ba
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	edd3 7a07 	vldr	s15, [r3, #28]
 8012e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8012e9e:	4a2c      	ldr	r2, [pc, #176]	; (8012f50 <_ZN8MainView9updateValEPh+0x200>)
 8012ea0:	2105      	movs	r1, #5
 8012ea2:	f7ff fd87 	bl	80129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OilPressureValue.invalidate();
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012eac:	4618      	mov	r0, r3
 8012eae:	f006 fe33 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%.1f",values->fuelPressure);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f603 10c4 	addw	r0, r3, #2500	; 0x9c4
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	edd3 7a08 	vldr	s15, [r3, #32]
 8012ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8012ec2:	4a23      	ldr	r2, [pc, #140]	; (8012f50 <_ZN8MainView9updateValEPh+0x200>)
 8012ec4:	2105      	movs	r1, #5
 8012ec6:	f7ff fd75 	bl	80129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	FuelPressureValue.invalidate();
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f006 fe21 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee0:	4a19      	ldr	r2, [pc, #100]	; (8012f48 <_ZN8MainView9updateValEPh+0x1f8>)
 8012ee2:	2105      	movs	r1, #5
 8012ee4:	f008 fcea 	bl	801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f006 fe12 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	4619      	mov	r1, r3
 8012f00:	4610      	mov	r0, r2
 8012f02:	f002 f813 	bl	8014f2c <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f006 fe03 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->battVoltage);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f603 10ce 	addw	r0, r3, #2510	; 0x9ce
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8012f22:	4a0a      	ldr	r2, [pc, #40]	; (8012f4c <_ZN8MainView9updateValEPh+0x1fc>)
 8012f24:	2105      	movs	r1, #5
 8012f26:	f7ff fd45 	bl	80129b4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8012f30:	4618      	mov	r0, r3
 8012f32:	f006 fdf1 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012f36:	bf00      	nop
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd90      	pop	{r4, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20000048 	.word	0x20000048
 8012f44:	20008664 	.word	0x20008664
 8012f48:	08026e58 	.word	0x08026e58
 8012f4c:	08026e5c 	.word	0x08026e5c
 8012f50:	08026e64 	.word	0x08026e64

08012f54 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8012f62:	2200      	movs	r2, #0
 8012f64:	2134      	movs	r1, #52	; 0x34
 8012f66:	2001      	movs	r0, #1
 8012f68:	f7f9 fd8d 	bl	800ca86 <xQueueGenericCreate>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	4b07      	ldr	r3, [pc, #28]	; (8012f8c <_ZN5ModelC1Ev+0x38>)
 8012f70:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8012f72:	2200      	movs	r2, #0
 8012f74:	2128      	movs	r1, #40	; 0x28
 8012f76:	2001      	movs	r0, #1
 8012f78:	f7f9 fd85 	bl	800ca86 <xQueueGenericCreate>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	4b04      	ldr	r3, [pc, #16]	; (8012f90 <_ZN5ModelC1Ev+0x3c>)
 8012f80:	601a      	str	r2, [r3, #0]
}
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	200086c4 	.word	0x200086c4
 8012f90:	200086c8 	.word	0x200086c8

08012f94 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012f9c:	4b1a      	ldr	r3, [pc, #104]	; (8013008 <_ZN5Model4tickEv+0x74>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	491a      	ldr	r1, [pc, #104]	; (801300c <_ZN5Model4tickEv+0x78>)
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f9 ffff 	bl	800cfa8 <xQueueReceive>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	bf0c      	ite	eq
 8012fb0:	2301      	moveq	r3, #1
 8012fb2:	2300      	movne	r3, #0
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d009      	beq.n	8012fce <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	3308      	adds	r3, #8
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4910      	ldr	r1, [pc, #64]	; (801300c <_ZN5Model4tickEv+0x78>)
 8012fca:	4610      	mov	r0, r2
 8012fcc:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8012fce:	4b10      	ldr	r3, [pc, #64]	; (8013010 <_ZN5Model4tickEv+0x7c>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	490f      	ldr	r1, [pc, #60]	; (8013014 <_ZN5Model4tickEv+0x80>)
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f9 ffe6 	bl	800cfa8 <xQueueReceive>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	bf0c      	ite	eq
 8012fe2:	2301      	moveq	r3, #1
 8012fe4:	2300      	movne	r3, #0
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d009      	beq.n	8013000 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	330c      	adds	r3, #12
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	4906      	ldr	r1, [pc, #24]	; (8013014 <_ZN5Model4tickEv+0x80>)
 8012ffc:	4610      	mov	r0, r2
 8012ffe:	4798      	blx	r3
	}
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	200086c4 	.word	0x200086c4
 801300c:	20008668 	.word	0x20008668
 8013010:	200086c8 	.word	0x200086c8
 8013014:	2000869c 	.word	0x2000869c

08013018 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
    {
 8013020:	4a04      	ldr	r2, [pc, #16]	; (8013034 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	601a      	str	r2, [r3, #0]
    }
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	4618      	mov	r0, r3
 801302a:	370c      	adds	r7, #12
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr
 8013034:	08027564 	.word	0x08027564

08013038 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
    }
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7ff ffe9 	bl	8013018 <_ZN8touchgfx15TouchControllerD1Ev>
 8013046:	2104      	movs	r1, #4
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f012 fba4 	bl	8025796 <_ZdlPvj>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013060:	bf00      	nop
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306a:	4770      	bx	lr

0801306c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801306c:	b480      	push	{r7}
 801306e:	b085      	sub	sp, #20
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
	...

08013088 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	4a05      	ldr	r2, [pc, #20]	; (80130a8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff ffbd 	bl	8013018 <_ZN8touchgfx15TouchControllerD1Ev>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4618      	mov	r0, r3
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	0802754c 	.word	0x0802754c

080130ac <_ZN20STM32TouchControllerD0Ev>:
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7ff ffe7 	bl	8013088 <_ZN20STM32TouchControllerD1Ev>
 80130ba:	2104      	movs	r1, #4
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f012 fb6a 	bl	8025796 <_ZdlPvj>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4618      	mov	r0, r3
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	4603      	mov	r3, r0
 80130d4:	71fb      	strb	r3, [r7, #7]

}
 80130d6:	bf00      	nop
 80130d8:	370c      	adds	r7, #12
 80130da:	46bd      	mov	sp, r7
 80130dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e0:	4770      	bx	lr

080130e2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80130e2:	b480      	push	{r7}
 80130e4:	b083      	sub	sp, #12
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	4603      	mov	r3, r0
 80130ea:	71fb      	strb	r3, [r7, #7]

}
 80130ec:	bf00      	nop
 80130ee:	370c      	adds	r7, #12
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr

080130f8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	4603      	mov	r3, r0
 8013100:	71fb      	strb	r3, [r7, #7]

}
 8013102:	bf00      	nop
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
	...

08013110 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
    {
 8013118:	4a04      	ldr	r2, [pc, #16]	; (801312c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	601a      	str	r2, [r3, #0]
    }
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	0802831c 	.word	0x0802831c

08013130 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
    }
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff ffe9 	bl	8013110 <_ZN8touchgfx3HALD1Ev>
 801313e:	2178      	movs	r1, #120	; 0x78
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f012 fb28 	bl	8025796 <_ZdlPvj>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	460b      	mov	r3, r1
 801315a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	78fa      	ldrb	r2, [r7, #3]
 8013160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2201      	movs	r2, #1
 8013168:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801316c:	bf00      	nop
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr

08013178 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685a      	ldr	r2, [r3, #4]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4610      	mov	r0, r2
 801318e:	4798      	blx	r3
 8013190:	4603      	mov	r3, r0
    }
 8013192:	4618      	mov	r0, r3
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801319a:	b580      	push	{r7, lr}
 801319c:	b082      	sub	sp, #8
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f003 f91c 	bl	80163e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	3390      	adds	r3, #144	; 0x90
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	4798      	blx	r3
    }
 80131b4:	bf00      	nop
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
    {
        return false;
 80131c6:	2300      	movs	r3, #0
    }
 80131c8:	4618      	mov	r0, r3
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80131d4:	b590      	push	{r4, r7, lr}
 80131d6:	b08b      	sub	sp, #44	; 0x2c
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	4611      	mov	r1, r2
 80131e0:	461a      	mov	r2, r3
 80131e2:	460b      	mov	r3, r1
 80131e4:	80fb      	strh	r3, [r7, #6]
 80131e6:	4613      	mov	r3, r2
 80131e8:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80131ea:	f7fc fc3d 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80131ee:	4602      	mov	r2, r0
 80131f0:	6813      	ldr	r3, [r2, #0]
 80131f2:	3328      	adds	r3, #40	; 0x28
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4610      	mov	r0, r2
 80131f8:	4798      	blx	r3
 80131fa:	4603      	mov	r3, r0
 80131fc:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80131fe:	8b7b      	ldrh	r3, [r7, #26]
 8013200:	4a3d      	ldr	r2, [pc, #244]	; (80132f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013202:	8812      	ldrh	r2, [r2, #0]
 8013204:	fb02 f303 	mul.w	r3, r2, r3
 8013208:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013216:	797b      	ldrb	r3, [r7, #5]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d005      	beq.n	8013228 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 801321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	4413      	add	r3, r2
 8013222:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013226:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8013228:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801322c:	2b00      	cmp	r3, #0
 801322e:	d005      	beq.n	801323c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	4413      	add	r3, r2
 8013236:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 801323c:	88fb      	ldrh	r3, [r7, #6]
 801323e:	3b01      	subs	r3, #1
 8013240:	2b1f      	cmp	r3, #31
 8013242:	d84d      	bhi.n	80132e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013244:	a201      	add	r2, pc, #4	; (adr r2, 801324c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801324a:	bf00      	nop
 801324c:	080132cd 	.word	0x080132cd
 8013250:	080132cd 	.word	0x080132cd
 8013254:	080132e1 	.word	0x080132e1
 8013258:	080132cd 	.word	0x080132cd
 801325c:	080132e1 	.word	0x080132e1
 8013260:	080132e1 	.word	0x080132e1
 8013264:	080132e1 	.word	0x080132e1
 8013268:	080132cd 	.word	0x080132cd
 801326c:	080132e1 	.word	0x080132e1
 8013270:	080132e1 	.word	0x080132e1
 8013274:	080132e1 	.word	0x080132e1
 8013278:	080132e1 	.word	0x080132e1
 801327c:	080132e1 	.word	0x080132e1
 8013280:	080132e1 	.word	0x080132e1
 8013284:	080132e1 	.word	0x080132e1
 8013288:	080132cd 	.word	0x080132cd
 801328c:	080132e1 	.word	0x080132e1
 8013290:	080132e1 	.word	0x080132e1
 8013294:	080132e1 	.word	0x080132e1
 8013298:	080132e1 	.word	0x080132e1
 801329c:	080132e1 	.word	0x080132e1
 80132a0:	080132e1 	.word	0x080132e1
 80132a4:	080132e1 	.word	0x080132e1
 80132a8:	080132cd 	.word	0x080132cd
 80132ac:	080132e1 	.word	0x080132e1
 80132b0:	080132e1 	.word	0x080132e1
 80132b4:	080132e1 	.word	0x080132e1
 80132b8:	080132e1 	.word	0x080132e1
 80132bc:	080132e1 	.word	0x080132e1
 80132c0:	080132e1 	.word	0x080132e1
 80132c4:	080132e1 	.word	0x080132e1
 80132c8:	080132cd 	.word	0x080132cd
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	3374      	adds	r3, #116	; 0x74
 80132d2:	681c      	ldr	r4, [r3, #0]
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	6a3a      	ldr	r2, [r7, #32]
 80132d8:	68b9      	ldr	r1, [r7, #8]
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	47a0      	blx	r4
            break;
 80132de:	e006      	b.n	80132ee <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80132e0:	4b06      	ldr	r3, [pc, #24]	; (80132fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80132e2:	4a07      	ldr	r2, [pc, #28]	; (8013300 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80132e4:	f240 3125 	movw	r1, #805	; 0x325
 80132e8:	4806      	ldr	r0, [pc, #24]	; (8013304 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80132ea:	f012 fa7f 	bl	80257ec <__assert_func>
            break;
        }
    }
 80132ee:	bf00      	nop
 80132f0:	372c      	adds	r7, #44	; 0x2c
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd90      	pop	{r4, r7, pc}
 80132f6:	bf00      	nop
 80132f8:	2000bb90 	.word	0x2000bb90
 80132fc:	08026e6c 	.word	0x08026e6c
 8013300:	08027678 	.word	0x08027678
 8013304:	08026e8c 	.word	0x08026e8c

08013308 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d106      	bne.n	801332a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801331c:	4b11      	ldr	r3, [pc, #68]	; (8013364 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801331e:	4a12      	ldr	r2, [pc, #72]	; (8013368 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013320:	f240 3137 	movw	r1, #823	; 0x337
 8013324:	4811      	ldr	r0, [pc, #68]	; (801336c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013326:	f012 fa61 	bl	80257ec <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	bf14      	ite	ne
 8013342:	2301      	movne	r3, #1
 8013344:	2300      	moveq	r3, #0
 8013346:	b2da      	uxtb	r2, r3
 8013348:	4b09      	ldr	r3, [pc, #36]	; (8013370 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801334a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	bf14      	ite	ne
 8013352:	2301      	movne	r3, #1
 8013354:	2300      	moveq	r3, #0
 8013356:	b2da      	uxtb	r2, r3
 8013358:	4b06      	ldr	r3, [pc, #24]	; (8013374 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801335a:	701a      	strb	r2, [r3, #0]
    }
 801335c:	bf00      	nop
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	08026ed0 	.word	0x08026ed0
 8013368:	08027628 	.word	0x08027628
 801336c:	08026e8c 	.word	0x08026e8c
 8013370:	2000bb92 	.word	0x2000bb92
 8013374:	2000bb93 	.word	0x2000bb93

08013378 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	460b      	mov	r3, r1
 8013382:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013388:	2b00      	cmp	r3, #0
 801338a:	d004      	beq.n	8013396 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013390:	887a      	ldrh	r2, [r7, #2]
 8013392:	4610      	mov	r0, r2
 8013394:	4798      	blx	r3
        }
    }
 8013396:	bf00      	nop
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801339e:	b580      	push	{r7, lr}
 80133a0:	b082      	sub	sp, #8
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685a      	ldr	r2, [r3, #4]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	3318      	adds	r3, #24
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4610      	mov	r0, r2
 80133b6:	4798      	blx	r3
 80133b8:	4603      	mov	r3, r0
    }
 80133ba:	4618      	mov	r0, r3
 80133bc:	3708      	adds	r7, #8
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
	...

080133c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80133d8:	429a      	cmp	r2, r3
 80133da:	d017      	beq.n	801340c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80133dc:	4b1a      	ldr	r3, [pc, #104]	; (8013448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d12a      	bne.n	801343a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80133e4:	4b19      	ldr	r3, [pc, #100]	; (801344c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80133e6:	881a      	ldrh	r2, [r3, #0]
 80133e8:	4b19      	ldr	r3, [pc, #100]	; (8013450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133ea:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80133ec:	4b19      	ldr	r3, [pc, #100]	; (8013454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133ee:	881a      	ldrh	r2, [r3, #0]
 80133f0:	4b19      	ldr	r3, [pc, #100]	; (8013458 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133f2:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80133f4:	4b16      	ldr	r3, [pc, #88]	; (8013450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133f6:	881a      	ldrh	r2, [r3, #0]
 80133f8:	4b16      	ldr	r3, [pc, #88]	; (8013454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133fa:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80133fc:	4b16      	ldr	r3, [pc, #88]	; (8013458 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133fe:	881a      	ldrh	r2, [r3, #0]
 8013400:	4b12      	ldr	r3, [pc, #72]	; (801344c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013402:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013404:	4b10      	ldr	r3, [pc, #64]	; (8013448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013406:	2201      	movs	r2, #1
 8013408:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801340a:	e016      	b.n	801343a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801340c:	4b0e      	ldr	r3, [pc, #56]	; (8013448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d012      	beq.n	801343a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013414:	4b0f      	ldr	r3, [pc, #60]	; (8013454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013416:	881a      	ldrh	r2, [r3, #0]
 8013418:	4b0d      	ldr	r3, [pc, #52]	; (8013450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801341a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801341c:	4b0b      	ldr	r3, [pc, #44]	; (801344c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801341e:	881a      	ldrh	r2, [r3, #0]
 8013420:	4b0d      	ldr	r3, [pc, #52]	; (8013458 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013422:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013424:	4b0c      	ldr	r3, [pc, #48]	; (8013458 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013426:	881a      	ldrh	r2, [r3, #0]
 8013428:	4b0a      	ldr	r3, [pc, #40]	; (8013454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801342a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801342c:	4b08      	ldr	r3, [pc, #32]	; (8013450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801342e:	881a      	ldrh	r2, [r3, #0]
 8013430:	4b06      	ldr	r3, [pc, #24]	; (801344c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013432:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013434:	4b04      	ldr	r3, [pc, #16]	; (8013448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013436:	2200      	movs	r2, #0
 8013438:	701a      	strb	r2, [r3, #0]
    }
 801343a:	bf00      	nop
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr
 8013446:	bf00      	nop
 8013448:	2000bb8c 	.word	0x2000bb8c
 801344c:	2000bb88 	.word	0x2000bb88
 8013450:	2000bb8e 	.word	0x2000bb8e
 8013454:	2000bb8a 	.word	0x2000bb8a
 8013458:	2000bb90 	.word	0x2000bb90

0801345c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	4618      	mov	r0, r3
 8013468:	f002 fa3c 	bl	80158e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801346c:	bf00      	nop
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	4a05      	ldr	r2, [pc, #20]	; (8013494 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	601a      	str	r2, [r3, #0]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff fe43 	bl	8013110 <_ZN8touchgfx3HALD1Ev>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	08027850 	.word	0x08027850

08013498 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f7ff ffe7 	bl	8013474 <_ZN20TouchGFXGeneratedHALD1Ev>
 80134a6:	2178      	movs	r1, #120	; 0x78
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f012 f974 	bl	8025796 <_ZdlPvj>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff ffca 	bl	801345c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80134c8:	bf00      	nop
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4618      	mov	r0, r3
 80134dc:	f001 fb0a 	bl	8014af4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80134e0:	bf00      	nop
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f001 fb8a 	bl	8014c0c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80134f8:	4603      	mov	r3, r0
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3708      	adds	r7, #8
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013502:	b580      	push	{r7, lr}
 8013504:	b082      	sub	sp, #8
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
 801350a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6839      	ldr	r1, [r7, #0]
 8013510:	4618      	mov	r0, r3
 8013512:	f001 fb89 	bl	8014c28 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013516:	bf00      	nop
 8013518:	3708      	adds	r7, #8
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}

0801351e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b082      	sub	sp, #8
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
 8013526:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6839      	ldr	r1, [r7, #0]
 801352c:	4618      	mov	r0, r3
 801352e:	f001 fb91 	bl	8014c54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013532:	bf00      	nop
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801353a:	b580      	push	{r7, lr}
 801353c:	b082      	sub	sp, #8
 801353e:	af00      	add	r7, sp, #0
 8013540:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	f001 fb07 	bl	8014b58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801354a:	bf00      	nop
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b082      	sub	sp, #8
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	f001 fb0b 	bl	8014b78 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013562:	bf00      	nop
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b082      	sub	sp, #8
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4618      	mov	r0, r3
 8013576:	f001 fb0d 	bl	8014b94 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801357a:	bf00      	nop
 801357c:	3708      	adds	r7, #8
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}

08013582 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	f001 fb0f 	bl	8014bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013592:	bf00      	nop
 8013594:	3708      	adds	r7, #8
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
	...

0801359c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	4a05      	ldr	r2, [pc, #20]	; (80135bc <_ZN11TouchGFXHALD1Ev+0x20>)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff ff61 	bl	8013474 <_ZN20TouchGFXGeneratedHALD1Ev>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	0802757c 	.word	0x0802757c

080135c0 <_ZN11TouchGFXHALD0Ev>:
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff ffe7 	bl	801359c <_ZN11TouchGFXHALD1Ev>
 80135ce:	2178      	movs	r1, #120	; 0x78
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f012 f8e0 	bl	8025796 <_ZdlPvj>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 80135e4:	2203      	movs	r2, #3
 80135e6:	2100      	movs	r1, #0
 80135e8:	2001      	movs	r0, #1
 80135ea:	f7f9 fa4c 	bl	800ca86 <xQueueGenericCreate>
 80135ee:	4602      	mov	r2, r0
 80135f0:	4b0b      	ldr	r3, [pc, #44]	; (8013620 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	4b0a      	ldr	r3, [pc, #40]	; (8013620 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d006      	beq.n	801360a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80135fc:	4b08      	ldr	r3, [pc, #32]	; (8013620 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135fe:	6818      	ldr	r0, [r3, #0]
 8013600:	2300      	movs	r3, #0
 8013602:	2200      	movs	r2, #0
 8013604:	2100      	movs	r1, #0
 8013606:	f7f9 fa9f 	bl	800cb48 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801360a:	2200      	movs	r2, #0
 801360c:	2101      	movs	r1, #1
 801360e:	2001      	movs	r0, #1
 8013610:	f7f9 fa39 	bl	800ca86 <xQueueGenericCreate>
 8013614:	4602      	mov	r2, r0
 8013616:	4b03      	ldr	r3, [pc, #12]	; (8013624 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8013618:	601a      	str	r2, [r3, #0]
}
 801361a:	bf00      	nop
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	200086cc 	.word	0x200086cc
 8013624:	200086d0 	.word	0x200086d0

08013628 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013628:	b580      	push	{r7, lr}
 801362a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 801362c:	4b04      	ldr	r3, [pc, #16]	; (8013640 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	f04f 31ff 	mov.w	r1, #4294967295
 8013634:	4618      	mov	r0, r3
 8013636:	f7f9 fd99 	bl	800d16c <xQueueSemaphoreTake>
}
 801363a:	bf00      	nop
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	200086cc 	.word	0x200086cc

08013644 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013644:	b580      	push	{r7, lr}
 8013646:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8013648:	4b04      	ldr	r3, [pc, #16]	; (801365c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	2300      	movs	r3, #0
 801364e:	2200      	movs	r2, #0
 8013650:	2100      	movs	r1, #0
 8013652:	f7f9 fa79 	bl	800cb48 <xQueueGenericSend>
}
 8013656:	bf00      	nop
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	200086cc 	.word	0x200086cc

08013660 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013660:	b580      	push	{r7, lr}
 8013662:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8013664:	4b03      	ldr	r3, [pc, #12]	; (8013674 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2100      	movs	r1, #0
 801366a:	4618      	mov	r0, r3
 801366c:	f7f9 fd7e 	bl	800d16c <xQueueSemaphoreTake>
}
 8013670:	bf00      	nop
 8013672:	bd80      	pop	{r7, pc}
 8013674:	200086cc 	.word	0x200086cc

08013678 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801367e:	2300      	movs	r3, #0
 8013680:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8013682:	4b0b      	ldr	r3, [pc, #44]	; (80136b0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	1d3a      	adds	r2, r7, #4
 8013688:	4611      	mov	r1, r2
 801368a:	4618      	mov	r0, r3
 801368c:	f7f9 fbfa 	bl	800ce84 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d007      	beq.n	80136a6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013696:	4b07      	ldr	r3, [pc, #28]	; (80136b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801369c:	601a      	str	r2, [r3, #0]
 801369e:	f3bf 8f4f 	dsb	sy
 80136a2:	f3bf 8f6f 	isb	sy
}
 80136a6:	bf00      	nop
 80136a8:	3708      	adds	r7, #8
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	200086cc 	.word	0x200086cc
 80136b4:	e000ed04 	.word	0xe000ed04

080136b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
    if (vsync_q)
 80136be:	4b0e      	ldr	r3, [pc, #56]	; (80136f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d013      	beq.n	80136ee <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80136c6:	2300      	movs	r3, #0
 80136c8:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80136ca:	4b0b      	ldr	r3, [pc, #44]	; (80136f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80136cc:	6818      	ldr	r0, [r3, #0]
 80136ce:	1d3a      	adds	r2, r7, #4
 80136d0:	2300      	movs	r3, #0
 80136d2:	490a      	ldr	r1, [pc, #40]	; (80136fc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80136d4:	f7f9 fb3a 	bl	800cd4c <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d007      	beq.n	80136ee <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 80136de:	4b08      	ldr	r3, [pc, #32]	; (8013700 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 80136e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136e4:	601a      	str	r2, [r3, #0]
 80136e6:	f3bf 8f4f 	dsb	sy
 80136ea:	f3bf 8f6f 	isb	sy
    }
}
 80136ee:	bf00      	nop
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	200086d0 	.word	0x200086d0
 80136fc:	2000004c 	.word	0x2000004c
 8013700:	e000ed04 	.word	0xe000ed04

08013704 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013704:	b580      	push	{r7, lr}
 8013706:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013708:	4b08      	ldr	r3, [pc, #32]	; (801372c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2200      	movs	r2, #0
 801370e:	4908      	ldr	r1, [pc, #32]	; (8013730 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013710:	4618      	mov	r0, r3
 8013712:	f7f9 fc49 	bl	800cfa8 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013716:	4b05      	ldr	r3, [pc, #20]	; (801372c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f04f 32ff 	mov.w	r2, #4294967295
 801371e:	4904      	ldr	r1, [pc, #16]	; (8013730 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013720:	4618      	mov	r0, r3
 8013722:	f7f9 fc41 	bl	800cfa8 <xQueueReceive>
}
 8013726:	bf00      	nop
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	200086d0 	.word	0x200086d0
 8013730:	2000004c 	.word	0x2000004c

08013734 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	4603      	mov	r3, r0
 801373c:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 801373e:	88fb      	ldrh	r3, [r7, #6]
 8013740:	4618      	mov	r0, r3
 8013742:	f7fa f971 	bl	800da28 <vTaskDelay>
}
 8013746:	bf00      	nop
 8013748:	3708      	adds	r7, #8
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
	...

08013750 <__NVIC_EnableIRQ>:
{
 8013750:	b480      	push	{r7}
 8013752:	b083      	sub	sp, #12
 8013754:	af00      	add	r7, sp, #0
 8013756:	4603      	mov	r3, r0
 8013758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801375e:	2b00      	cmp	r3, #0
 8013760:	db0d      	blt.n	801377e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013766:	b2db      	uxtb	r3, r3
 8013768:	f003 021f 	and.w	r2, r3, #31
 801376c:	4907      	ldr	r1, [pc, #28]	; (801378c <__NVIC_EnableIRQ+0x3c>)
 801376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013772:	095b      	lsrs	r3, r3, #5
 8013774:	2001      	movs	r0, #1
 8013776:	fa00 f202 	lsl.w	r2, r0, r2
 801377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801377e:	bf00      	nop
 8013780:	370c      	adds	r7, #12
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	e000e100 	.word	0xe000e100

08013790 <__NVIC_DisableIRQ>:
{
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	4603      	mov	r3, r0
 8013798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	db12      	blt.n	80137c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80137a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	f003 021f 	and.w	r2, r3, #31
 80137ac:	4909      	ldr	r1, [pc, #36]	; (80137d4 <__NVIC_DisableIRQ+0x44>)
 80137ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137b2:	095b      	lsrs	r3, r3, #5
 80137b4:	2001      	movs	r0, #1
 80137b6:	fa00 f202 	lsl.w	r2, r0, r2
 80137ba:	3320      	adds	r3, #32
 80137bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80137c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80137c4:	f3bf 8f6f 	isb	sy
}
 80137c8:	bf00      	nop
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr
 80137d4:	e000e100 	.word	0xe000e100

080137d8 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
        return color;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
    }
 80137e4:	4618      	mov	r0, r3
 80137e6:	370c      	adds	r7, #12
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	b29b      	uxth	r3, r3
    }
 80137fe:	4618      	mov	r0, r3
 8013800:	370c      	adds	r7, #12
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr
	...

0801380c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
    {
 8013814:	4a04      	ldr	r2, [pc, #16]	; (8013828 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	601a      	str	r2, [r3, #0]
    }
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4618      	mov	r0, r3
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr
 8013828:	08027724 	.word	0x08027724

0801382c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
    }
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f7ff ffe9 	bl	801380c <_ZN8touchgfx9DMA_QueueD1Ev>
 801383a:	2104      	movs	r1, #4
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f011 ffaa 	bl	8025796 <_ZdlPvj>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	3344      	adds	r3, #68	; 0x44
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	4798      	blx	r3
    }
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013870:	2300      	movs	r3, #0
    }
 8013872:	4618      	mov	r0, r3
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
	...

08013880 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013880:	b480      	push	{r7}
 8013882:	b083      	sub	sp, #12
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
    {
 8013888:	4a04      	ldr	r2, [pc, #16]	; (801389c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	601a      	str	r2, [r3, #0]
    }
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	370c      	adds	r7, #12
 8013894:	46bd      	mov	sp, r7
 8013896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389a:	4770      	bx	lr
 801389c:	08028760 	.word	0x08028760

080138a0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
    }
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f7ff ffe9 	bl	8013880 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80138ae:	210c      	movs	r1, #12
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f011 ff70 	bl	8025796 <_ZdlPvj>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80138ca:	4a09      	ldr	r2, [pc, #36]	; (80138f0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	601a      	str	r2, [r3, #0]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	605a      	str	r2, [r3, #4]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	721a      	strb	r2, [r3, #8]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2200      	movs	r2, #0
 80138e0:	725a      	strb	r2, [r3, #9]
    {
    }
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	370c      	adds	r7, #12
 80138e8:	46bd      	mov	sp, r7
 80138ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ee:	4770      	bx	lr
 80138f0:	08028760 	.word	0x08028760

080138f4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	3314      	adds	r3, #20
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4610      	mov	r0, r2
 801390c:	4798      	blx	r3
    }
 801390e:	bf00      	nop
 8013910:	3708      	adds	r7, #8
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}

08013916 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013916:	b580      	push	{r7, lr}
 8013918:	b082      	sub	sp, #8
 801391a:	af00      	add	r7, sp, #0
 801391c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	3328      	adds	r3, #40	; 0x28
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4610      	mov	r0, r2
 801392a:	4798      	blx	r3
    }
 801392c:	bf00      	nop
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	430a      	orrs	r2, r1
 8013954:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801395c:	f023 0107 	bic.w	r1, r3, #7
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	430a      	orrs	r2, r1
 8013968:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013970:	4b06      	ldr	r3, [pc, #24]	; (801398c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013972:	4013      	ands	r3, r2
 8013974:	6839      	ldr	r1, [r7, #0]
 8013976:	68fa      	ldr	r2, [r7, #12]
 8013978:	6812      	ldr	r2, [r2, #0]
 801397a:	430b      	orrs	r3, r1
 801397c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801397e:	2300      	movs	r3, #0
}
 8013980:	4618      	mov	r0, r3
 8013982:	3714      	adds	r7, #20
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	ffffc000 	.word	0xffffc000

08013990 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013998:	f7fc f85a 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 801399c:	4603      	mov	r3, r0
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff ffa8 	bl	80138f4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80139a4:	bf00      	nop
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
    assert(0);
 80139b4:	4b02      	ldr	r3, [pc, #8]	; (80139c0 <DMA2D_XferErrorCallback+0x14>)
 80139b6:	4a03      	ldr	r2, [pc, #12]	; (80139c4 <DMA2D_XferErrorCallback+0x18>)
 80139b8:	213e      	movs	r1, #62	; 0x3e
 80139ba:	4803      	ldr	r0, [pc, #12]	; (80139c8 <DMA2D_XferErrorCallback+0x1c>)
 80139bc:	f011 ff16 	bl	80257ec <__assert_func>
 80139c0:	08026f08 	.word	0x08026f08
 80139c4:	08027740 	.word	0x08027740
 80139c8:	08026f0c 	.word	0x08026f0c

080139cc <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	3318      	adds	r3, #24
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fe ffdd 	bl	8012998 <_ZN8touchgfx9colortypeC1Ev>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4618      	mov	r0, r3
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80139e8:	b5b0      	push	{r4, r5, r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	330c      	adds	r3, #12
 80139f6:	4619      	mov	r1, r3
 80139f8:	4610      	mov	r0, r2
 80139fa:	f7ff ff61 	bl	80138c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80139fe:	4a0e      	ldr	r2, [pc, #56]	; (8013a38 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	601a      	str	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f103 000c 	add.w	r0, r3, #12
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	3320      	adds	r3, #32
 8013a0e:	2260      	movs	r2, #96	; 0x60
 8013a10:	4619      	mov	r1, r3
 8013a12:	f002 fe0b 	bl	801662c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	3320      	adds	r3, #32
 8013a1a:	245f      	movs	r4, #95	; 0x5f
 8013a1c:	461d      	mov	r5, r3
 8013a1e:	2c00      	cmp	r4, #0
 8013a20:	db05      	blt.n	8013a2e <_ZN10STM32F7DMAC1Ev+0x46>
 8013a22:	4628      	mov	r0, r5
 8013a24:	f7ff ffd2 	bl	80139cc <_ZN8touchgfx6BlitOpC1Ev>
 8013a28:	3520      	adds	r5, #32
 8013a2a:	3c01      	subs	r4, #1
 8013a2c:	e7f7      	b.n	8013a1e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	3708      	adds	r7, #8
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bdb0      	pop	{r4, r5, r7, pc}
 8013a38:	080276d4 	.word	0x080276d4

08013a3c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	4a0b      	ldr	r2, [pc, #44]	; (8013a74 <_ZN10STM32F7DMAD1Ev+0x38>)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013a4a:	480b      	ldr	r0, [pc, #44]	; (8013a78 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013a4c:	f7f1 fbdc 	bl	8005208 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013a50:	205a      	movs	r0, #90	; 0x5a
 8013a52:	f7ff fe9d 	bl	8013790 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	330c      	adds	r3, #12
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f000 faa0 	bl	8013fa0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7ff ff0c 	bl	8013880 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3708      	adds	r7, #8
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	080276d4 	.word	0x080276d4
 8013a78:	2000c418 	.word	0x2000c418

08013a7c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
}
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f7ff ffd9 	bl	8013a3c <_ZN10STM32F7DMAD1Ev>
 8013a8a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f011 fe81 	bl	8025796 <_ZdlPvj>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
	...

08013aa0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013aa8:	4b09      	ldr	r3, [pc, #36]	; (8013ad0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013aaa:	4a0a      	ldr	r2, [pc, #40]	; (8013ad4 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013aac:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013aae:	4808      	ldr	r0, [pc, #32]	; (8013ad0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013ab0:	f7f1 fb60 	bl	8005174 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013ab6:	4a08      	ldr	r2, [pc, #32]	; (8013ad8 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013ab8:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013aba:	4b05      	ldr	r3, [pc, #20]	; (8013ad0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013abc:	4a07      	ldr	r2, [pc, #28]	; (8013adc <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013abe:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013ac0:	205a      	movs	r0, #90	; 0x5a
 8013ac2:	f7ff fe45 	bl	8013750 <__NVIC_EnableIRQ>
}
 8013ac6:	bf00      	nop
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	2000c418 	.word	0x2000c418
 8013ad4:	4002b000 	.word	0x4002b000
 8013ad8:	08013991 	.word	0x08013991
 8013adc:	080139ad 	.word	0x080139ad

08013ae0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b083      	sub	sp, #12
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013ae8:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013af8:	b590      	push	{r4, r7, lr}
 8013afa:	b08d      	sub	sp, #52	; 0x34
 8013afc:	af02      	add	r7, sp, #8
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013b10:	2b20      	cmp	r3, #32
 8013b12:	d007      	beq.n	8013b24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b40      	cmp	r3, #64	; 0x40
 8013b1a:	d003      	beq.n	8013b24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b04      	cmp	r3, #4
 8013b22:	d101      	bne.n	8013b28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013b24:	2301      	movs	r3, #1
 8013b26:	e000      	b.n	8013b2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013b28:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013b2a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013b30:	2b80      	cmp	r3, #128	; 0x80
 8013b32:	d004      	beq.n	8013b3e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b3c:	d101      	bne.n	8013b42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013b3e:	2301      	movs	r3, #1
 8013b40:	e000      	b.n	8013b44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8013b42:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013b44:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013b46:	f7fb ff8f 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	6813      	ldr	r3, [r2, #0]
 8013b4e:	3320      	adds	r3, #32
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4610      	mov	r0, r2
 8013b54:	4798      	blx	r3
 8013b56:	4603      	mov	r3, r0
 8013b58:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b40      	cmp	r3, #64	; 0x40
 8013b60:	d01d      	beq.n	8013b9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013b62:	2b40      	cmp	r3, #64	; 0x40
 8013b64:	d804      	bhi.n	8013b70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8013b66:	2b04      	cmp	r3, #4
 8013b68:	d00e      	beq.n	8013b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013b6a:	2b20      	cmp	r3, #32
 8013b6c:	d017      	beq.n	8013b9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013b6e:	e019      	b.n	8013ba4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013b70:	2b80      	cmp	r3, #128	; 0x80
 8013b72:	d003      	beq.n	8013b7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b78:	d003      	beq.n	8013b82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013b7a:	e013      	b.n	8013ba4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013b7c:	230a      	movs	r3, #10
 8013b7e:	623b      	str	r3, [r7, #32]
        break;
 8013b80:	e01a      	b.n	8013bb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013b82:	2309      	movs	r3, #9
 8013b84:	623b      	str	r3, [r7, #32]
        break;
 8013b86:	e017      	b.n	8013bb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b8c:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b8e:	7f7b      	ldrb	r3, [r7, #29]
 8013b90:	2b10      	cmp	r3, #16
 8013b92:	d101      	bne.n	8013b98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013b94:	2302      	movs	r3, #2
 8013b96:	e000      	b.n	8013b9a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013b98:	2301      	movs	r3, #1
 8013b9a:	623b      	str	r3, [r7, #32]
        break;
 8013b9c:	e00c      	b.n	8013bb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	623b      	str	r3, [r7, #32]
        break;
 8013ba2:	e009      	b.n	8013bb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013ba8:	7f7b      	ldrb	r3, [r7, #29]
 8013baa:	2b10      	cmp	r3, #16
 8013bac:	d101      	bne.n	8013bb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013bae:	2302      	movs	r3, #2
 8013bb0:	e000      	b.n	8013bb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	623b      	str	r3, [r7, #32]
        break;
 8013bb6:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013bb8:	4a76      	ldr	r2, [pc, #472]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbc:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013bbe:	7f7b      	ldrb	r3, [r7, #29]
 8013bc0:	2b10      	cmp	r3, #16
 8013bc2:	d101      	bne.n	8013bc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013bc4:	2302      	movs	r3, #2
 8013bc6:	e000      	b.n	8013bca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013bc8:	2301      	movs	r3, #1
 8013bca:	4a72      	ldr	r2, [pc, #456]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bcc:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	8adb      	ldrh	r3, [r3, #22]
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	8a1b      	ldrh	r3, [r3, #16]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	461a      	mov	r2, r3
 8013bdc:	4b6d      	ldr	r3, [pc, #436]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bde:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013be0:	7f7b      	ldrb	r3, [r7, #29]
 8013be2:	2b10      	cmp	r3, #16
 8013be4:	d101      	bne.n	8013bea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013be6:	2202      	movs	r2, #2
 8013be8:	e000      	b.n	8013bec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8013bea:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	8adb      	ldrh	r3, [r3, #22]
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	8a1b      	ldrh	r3, [r3, #16]
 8013bf6:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bfa:	4866      	ldr	r0, [pc, #408]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bfc:	f7ff fe9a 	bl	8013934 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013c00:	4a64      	ldr	r2, [pc, #400]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	8a9b      	ldrh	r3, [r3, #20]
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	8a1b      	ldrh	r3, [r3, #16]
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	461a      	mov	r2, r3
 8013c14:	4b5f      	ldr	r3, [pc, #380]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c16:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013c18:	7ffb      	ldrb	r3, [r7, #31]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d103      	bne.n	8013c26 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8013c1e:	7fbb      	ldrb	r3, [r7, #30]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 8082 	beq.w	8013d2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	7f1b      	ldrb	r3, [r3, #28]
 8013c2a:	2bff      	cmp	r3, #255	; 0xff
 8013c2c:	d008      	beq.n	8013c40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8013c2e:	4b59      	ldr	r3, [pc, #356]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c30:	2202      	movs	r2, #2
 8013c32:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	7f1b      	ldrb	r3, [r3, #28]
 8013c38:	461a      	mov	r2, r3
 8013c3a:	4b56      	ldr	r3, [pc, #344]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8013c3e:	e002      	b.n	8013c46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013c40:	4b54      	ldr	r3, [pc, #336]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8013c46:	7fbb      	ldrb	r3, [r7, #30]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d059      	beq.n	8013d00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013c4c:	7f7b      	ldrb	r3, [r7, #29]
 8013c4e:	2b10      	cmp	r3, #16
 8013c50:	d14a      	bne.n	8013ce8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	3318      	adds	r3, #24
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff fdca 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	12db      	asrs	r3, r3, #11
 8013c60:	f003 021f 	and.w	r2, r3, #31
 8013c64:	4613      	mov	r3, r2
 8013c66:	021b      	lsls	r3, r3, #8
 8013c68:	1a9b      	subs	r3, r3, r2
 8013c6a:	4a4b      	ldr	r2, [pc, #300]	; (8013d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8013c70:	441a      	add	r2, r3
 8013c72:	1112      	asrs	r2, r2, #4
 8013c74:	17db      	asrs	r3, r3, #31
 8013c76:	1ad3      	subs	r3, r2, r3
 8013c78:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	3318      	adds	r3, #24
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7ff fdb6 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013c84:	4603      	mov	r3, r0
 8013c86:	115b      	asrs	r3, r3, #5
 8013c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	021b      	lsls	r3, r3, #8
 8013c90:	1a9b      	subs	r3, r3, r2
 8013c92:	4a42      	ldr	r2, [pc, #264]	; (8013d9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013c94:	fb82 1203 	smull	r1, r2, r2, r3
 8013c98:	441a      	add	r2, r3
 8013c9a:	1152      	asrs	r2, r2, #5
 8013c9c:	17db      	asrs	r3, r3, #31
 8013c9e:	1ad3      	subs	r3, r2, r3
 8013ca0:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	3318      	adds	r3, #24
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7ff fda2 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013cac:	4603      	mov	r3, r0
 8013cae:	f003 021f 	and.w	r2, r3, #31
 8013cb2:	4613      	mov	r3, r2
 8013cb4:	021b      	lsls	r3, r3, #8
 8013cb6:	1a9b      	subs	r3, r3, r2
 8013cb8:	4a37      	ldr	r2, [pc, #220]	; (8013d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013cba:	fb82 1203 	smull	r1, r2, r2, r3
 8013cbe:	441a      	add	r2, r3
 8013cc0:	1112      	asrs	r2, r2, #4
 8013cc2:	17db      	asrs	r3, r3, #31
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	7f1b      	ldrb	r3, [r3, #28]
 8013ccc:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	061a      	lsls	r2, r3, #24
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	041b      	lsls	r3, r3, #16
 8013cd6:	431a      	orrs	r2, r3
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	021b      	lsls	r3, r3, #8
 8013cdc:	431a      	orrs	r2, r3
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	4313      	orrs	r3, r2
 8013ce2:	4a2c      	ldr	r2, [pc, #176]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ce4:	6353      	str	r3, [r2, #52]	; 0x34
 8013ce6:	e00b      	b.n	8013d00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	3318      	adds	r3, #24
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fd73 	bl	80137d8 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	7f1b      	ldrb	r3, [r3, #28]
 8013cf8:	061b      	lsls	r3, r3, #24
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	4a25      	ldr	r2, [pc, #148]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cfe:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	8adb      	ldrh	r3, [r3, #22]
 8013d04:	461a      	mov	r2, r3
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	8a1b      	ldrh	r3, [r3, #16]
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	4b21      	ldr	r3, [pc, #132]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d10:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013d12:	7f7b      	ldrb	r3, [r7, #29]
 8013d14:	2b10      	cmp	r3, #16
 8013d16:	d101      	bne.n	8013d1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013d18:	2302      	movs	r3, #2
 8013d1a:	e000      	b.n	8013d1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	4a1d      	ldr	r2, [pc, #116]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d20:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013d22:	2100      	movs	r1, #0
 8013d24:	481b      	ldr	r0, [pc, #108]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d26:	f7f1 fcef 	bl	8005708 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013d2a:	2101      	movs	r1, #1
 8013d2c:	4819      	ldr	r0, [pc, #100]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d2e:	f7f1 fceb 	bl	8005708 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8013d32:	7ffb      	ldrb	r3, [r7, #31]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d102      	bne.n	8013d3e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013d38:	7fbb      	ldrb	r3, [r7, #30]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d015      	beq.n	8013d6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d42:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d48:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d4e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d54:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d5a:	9301      	str	r3, [sp, #4]
 8013d5c:	9200      	str	r2, [sp, #0]
 8013d5e:	4623      	mov	r3, r4
 8013d60:	4602      	mov	r2, r0
 8013d62:	480c      	ldr	r0, [pc, #48]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d64:	f7f1 faf3 	bl	800534e <HAL_DMA2D_BlendingStart_IT>
 8013d68:	e00f      	b.n	8013d8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d6e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d74:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d7a:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d80:	9300      	str	r3, [sp, #0]
 8013d82:	4603      	mov	r3, r0
 8013d84:	4803      	ldr	r0, [pc, #12]	; (8013d94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d86:	f7f1 faaf 	bl	80052e8 <HAL_DMA2D_Start_IT>
    }
}
 8013d8a:	bf00      	nop
 8013d8c:	372c      	adds	r7, #44	; 0x2c
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd90      	pop	{r4, r7, pc}
 8013d92:	bf00      	nop
 8013d94:	2000c418 	.word	0x2000c418
 8013d98:	84210843 	.word	0x84210843
 8013d9c:	82082083 	.word	0x82082083

08013da0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b08d      	sub	sp, #52	; 0x34
 8013da4:	af02      	add	r7, sp, #8
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013daa:	f7fb fe5d 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8013dae:	4602      	mov	r2, r0
 8013db0:	6813      	ldr	r3, [r2, #0]
 8013db2:	3320      	adds	r3, #32
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	4610      	mov	r0, r2
 8013db8:	4798      	blx	r3
 8013dba:	4603      	mov	r3, r0
 8013dbc:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013dbe:	7ffb      	ldrb	r3, [r7, #31]
 8013dc0:	2b10      	cmp	r3, #16
 8013dc2:	d101      	bne.n	8013dc8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	e000      	b.n	8013dca <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013dd0:	7ffb      	ldrb	r3, [r7, #31]
 8013dd2:	2b10      	cmp	r3, #16
 8013dd4:	d149      	bne.n	8013e6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	3318      	adds	r3, #24
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7ff fd08 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013de0:	4603      	mov	r3, r0
 8013de2:	12db      	asrs	r3, r3, #11
 8013de4:	f003 021f 	and.w	r2, r3, #31
 8013de8:	4613      	mov	r3, r2
 8013dea:	021b      	lsls	r3, r3, #8
 8013dec:	1a9b      	subs	r3, r3, r2
 8013dee:	4a69      	ldr	r2, [pc, #420]	; (8013f94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013df0:	fb82 1203 	smull	r1, r2, r2, r3
 8013df4:	441a      	add	r2, r3
 8013df6:	1112      	asrs	r2, r2, #4
 8013df8:	17db      	asrs	r3, r3, #31
 8013dfa:	1ad3      	subs	r3, r2, r3
 8013dfc:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	3318      	adds	r3, #24
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff fcf4 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	115b      	asrs	r3, r3, #5
 8013e0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013e10:	4613      	mov	r3, r2
 8013e12:	021b      	lsls	r3, r3, #8
 8013e14:	1a9b      	subs	r3, r3, r2
 8013e16:	4a60      	ldr	r2, [pc, #384]	; (8013f98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013e18:	fb82 1203 	smull	r1, r2, r2, r3
 8013e1c:	441a      	add	r2, r3
 8013e1e:	1152      	asrs	r2, r2, #5
 8013e20:	17db      	asrs	r3, r3, #31
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	3318      	adds	r3, #24
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7ff fce0 	bl	80137f0 <_ZNK8touchgfx9colortypecvtEv>
 8013e30:	4603      	mov	r3, r0
 8013e32:	f003 021f 	and.w	r2, r3, #31
 8013e36:	4613      	mov	r3, r2
 8013e38:	021b      	lsls	r3, r3, #8
 8013e3a:	1a9b      	subs	r3, r3, r2
 8013e3c:	4a55      	ldr	r2, [pc, #340]	; (8013f94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8013e42:	441a      	add	r2, r3
 8013e44:	1112      	asrs	r2, r2, #4
 8013e46:	17db      	asrs	r3, r3, #31
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	7f1b      	ldrb	r3, [r3, #28]
 8013e50:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	061a      	lsls	r2, r3, #24
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	041b      	lsls	r3, r3, #16
 8013e5a:	431a      	orrs	r2, r3
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	021b      	lsls	r3, r3, #8
 8013e60:	4313      	orrs	r3, r2
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	623b      	str	r3, [r7, #32]
 8013e68:	e00b      	b.n	8013e82 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	7f1b      	ldrb	r3, [r3, #28]
 8013e6e:	061b      	lsls	r3, r3, #24
 8013e70:	461c      	mov	r4, r3
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	3318      	adds	r3, #24
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff fcae 	bl	80137d8 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	4323      	orrs	r3, r4
 8013e80:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	2b08      	cmp	r3, #8
 8013e88:	d103      	bne.n	8013e92 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013e90:	e003      	b.n	8013e9a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8013e92:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013e98:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013e9a:	4a40      	ldr	r2, [pc, #256]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013ea0:	7ffb      	ldrb	r3, [r7, #31]
 8013ea2:	2b10      	cmp	r3, #16
 8013ea4:	d101      	bne.n	8013eaa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	e000      	b.n	8013eac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	4a3b      	ldr	r2, [pc, #236]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013eae:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	8adb      	ldrh	r3, [r3, #22]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	8a1b      	ldrh	r3, [r3, #16]
 8013eba:	1ad3      	subs	r3, r2, r3
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	4b37      	ldr	r3, [pc, #220]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ec0:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013ec2:	7ffb      	ldrb	r3, [r7, #31]
 8013ec4:	2b10      	cmp	r3, #16
 8013ec6:	d101      	bne.n	8013ecc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013ec8:	2202      	movs	r2, #2
 8013eca:	e000      	b.n	8013ece <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013ecc:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	8adb      	ldrh	r3, [r3, #22]
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	8a1b      	ldrh	r3, [r3, #16]
 8013ed8:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013edc:	482f      	ldr	r0, [pc, #188]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ede:	f7ff fd29 	bl	8013934 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013ee8:	d11e      	bne.n	8013f28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8013eea:	4b2c      	ldr	r3, [pc, #176]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013eec:	2201      	movs	r2, #1
 8013eee:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8013ef0:	4a2a      	ldr	r2, [pc, #168]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8013ef6:	4b29      	ldr	r3, [pc, #164]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ef8:	2209      	movs	r2, #9
 8013efa:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	8adb      	ldrh	r3, [r3, #22]
 8013f00:	461a      	mov	r2, r3
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	8a1b      	ldrh	r3, [r3, #16]
 8013f06:	1ad3      	subs	r3, r2, r3
 8013f08:	461a      	mov	r2, r3
 8013f0a:	4b24      	ldr	r3, [pc, #144]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f0c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013f0e:	7ffb      	ldrb	r3, [r7, #31]
 8013f10:	2b10      	cmp	r3, #16
 8013f12:	d101      	bne.n	8013f18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8013f14:	2302      	movs	r3, #2
 8013f16:	e000      	b.n	8013f1a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4a20      	ldr	r2, [pc, #128]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f1c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013f1e:	2100      	movs	r1, #0
 8013f20:	481e      	ldr	r0, [pc, #120]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f22:	f7f1 fbf1 	bl	8005708 <HAL_DMA2D_ConfigLayer>
 8013f26:	e005      	b.n	8013f34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013f28:	4a1c      	ldr	r2, [pc, #112]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013f2e:	4b1b      	ldr	r3, [pc, #108]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f30:	2200      	movs	r2, #0
 8013f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013f34:	2101      	movs	r1, #1
 8013f36:	4819      	ldr	r0, [pc, #100]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f38:	f7f1 fbe6 	bl	8005708 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013f42:	d115      	bne.n	8013f70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f48:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f4e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f54:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f5a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f60:	9301      	str	r3, [sp, #4]
 8013f62:	9200      	str	r2, [sp, #0]
 8013f64:	4623      	mov	r3, r4
 8013f66:	4602      	mov	r2, r0
 8013f68:	480c      	ldr	r0, [pc, #48]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f6a:	f7f1 f9f0 	bl	800534e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013f6e:	e00d      	b.n	8013f8c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f7a:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	460b      	mov	r3, r1
 8013f84:	6a39      	ldr	r1, [r7, #32]
 8013f86:	4805      	ldr	r0, [pc, #20]	; (8013f9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f88:	f7f1 f9ae 	bl	80052e8 <HAL_DMA2D_Start_IT>
}
 8013f8c:	bf00      	nop
 8013f8e:	372c      	adds	r7, #44	; 0x2c
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd90      	pop	{r4, r7, pc}
 8013f94:	84210843 	.word	0x84210843
 8013f98:	82082083 	.word	0x82082083
 8013f9c:	2000c418 	.word	0x2000c418

08013fa0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	4a05      	ldr	r2, [pc, #20]	; (8013fc0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	601a      	str	r2, [r3, #0]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7ff fc2b 	bl	801380c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3708      	adds	r7, #8
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	080287b0 	.word	0x080287b0

08013fc4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f7ff ffe7 	bl	8013fa0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013fd2:	2114      	movs	r1, #20
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f011 fbde 	bl	8025796 <_ZdlPvj>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013fe4:	b480      	push	{r7}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
        texts = t;
 8013fec:	4a04      	ldr	r2, [pc, #16]	; (8014000 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6013      	str	r3, [r2, #0]
    }
 8013ff2:	bf00      	nop
 8013ff4:	370c      	adds	r7, #12
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr
 8013ffe:	bf00      	nop
 8014000:	2000bc30 	.word	0x2000bc30

08014004 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014004:	b480      	push	{r7}
 8014006:	b085      	sub	sp, #20
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014012:	4a0b      	ldr	r2, [pc, #44]	; (8014040 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	601a      	str	r2, [r3, #0]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	605a      	str	r2, [r3, #4]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	609a      	str	r2, [r3, #8]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	60da      	str	r2, [r3, #12]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	69ba      	ldr	r2, [r7, #24]
 801402e:	611a      	str	r2, [r3, #16]
    {
    }
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4618      	mov	r0, r3
 8014034:	3714      	adds	r7, #20
 8014036:	46bd      	mov	sp, r7
 8014038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop
 8014040:	08027840 	.word	0x08027840

08014044 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    {
 801404c:	4a04      	ldr	r2, [pc, #16]	; (8014060 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	601a      	str	r2, [r3, #0]
    }
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	4618      	mov	r0, r3
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr
 8014060:	08027840 	.word	0x08027840

08014064 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
    }
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7ff ffe9 	bl	8014044 <_ZN8touchgfx7MVPHeapD1Ev>
 8014072:	2114      	movs	r1, #20
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f011 fb8e 	bl	8025796 <_ZdlPvj>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	3708      	adds	r7, #8
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    {
 801408c:	4a04      	ldr	r2, [pc, #16]	; (80140a0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	601a      	str	r2, [r3, #0]
    }
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr
 80140a0:	08029094 	.word	0x08029094

080140a4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
    }
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ffe9 	bl	8014084 <_ZN8touchgfx3LCDD1Ev>
 80140b2:	2108      	movs	r1, #8
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f011 fb6e 	bl	8025796 <_ZdlPvj>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80140c4:	b480      	push	{r7}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	801a      	strh	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	805a      	strh	r2, [r3, #2]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	809a      	strh	r2, [r3, #4]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2200      	movs	r2, #0
 80140e2:	80da      	strh	r2, [r3, #6]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2200      	movs	r2, #0
 80140e8:	811a      	strh	r2, [r3, #8]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2200      	movs	r2, #0
 80140ee:	815a      	strh	r2, [r3, #10]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2200      	movs	r2, #0
 80140f4:	819a      	strh	r2, [r3, #12]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	739a      	strb	r2, [r3, #14]
        {
        }
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4618      	mov	r0, r3
 8014100:	370c      	adds	r7, #12
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr

0801410a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801410a:	b580      	push	{r7, lr}
 801410c:	b082      	sub	sp, #8
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	4618      	mov	r0, r3
 8014116:	f7ff ffd5 	bl	80140c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2200      	movs	r2, #0
 801411e:	611a      	str	r2, [r3, #16]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2200      	movs	r2, #0
 8014124:	829a      	strh	r2, [r3, #20]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	4618      	mov	r0, r3
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801413e:	4a44      	ldr	r2, [pc, #272]	; (8014250 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	601a      	str	r2, [r3, #0]
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	605a      	str	r2, [r3, #4]
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	609a      	str	r2, [r3, #8]
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	60da      	str	r2, [r3, #12]
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2200      	movs	r2, #0
 801415a:	611a      	str	r2, [r3, #16]
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2200      	movs	r2, #0
 8014160:	615a      	str	r2, [r3, #20]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	619a      	str	r2, [r3, #24]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	331c      	adds	r3, #28
 801416c:	4618      	mov	r0, r3
 801416e:	f7ff ffcc 	bl	801410a <_ZN8touchgfx8GesturesC1Ev>
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2200      	movs	r2, #0
 8014176:	639a      	str	r2, [r3, #56]	; 0x38
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	2200      	movs	r2, #0
 801417c:	63da      	str	r2, [r3, #60]	; 0x3c
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2200      	movs	r2, #0
 8014182:	641a      	str	r2, [r3, #64]	; 0x40
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2200      	movs	r2, #0
 8014188:	645a      	str	r2, [r3, #68]	; 0x44
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2201      	movs	r2, #1
 8014196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2201      	movs	r2, #1
 801419e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2200      	movs	r2, #0
 80141a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3350      	adds	r3, #80	; 0x50
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fc f88a 	bl	80102c6 <_ZN8touchgfx4RectC1Ev>
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2201      	movs	r2, #1
 80141b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2200      	movs	r2, #0
 80141be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2201      	movs	r2, #1
 80141ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	2200      	movs	r2, #0
 80141d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2200      	movs	r2, #0
 80141de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2200      	movs	r2, #0
 80141ee:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2200      	movs	r2, #0
 80141f6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	2200      	movs	r2, #0
 80141fe:	671a      	str	r2, [r3, #112]	; 0x70
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	2200      	movs	r2, #0
 8014204:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014208:	4a12      	ldr	r2, [pc, #72]	; (8014254 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801420e:	4a12      	ldr	r2, [pc, #72]	; (8014258 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014210:	8b3b      	ldrh	r3, [r7, #24]
 8014212:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014214:	4a11      	ldr	r2, [pc, #68]	; (801425c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014216:	8bbb      	ldrh	r3, [r7, #28]
 8014218:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801421a:	4b11      	ldr	r3, [pc, #68]	; (8014260 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014220:	4b0d      	ldr	r3, [pc, #52]	; (8014258 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014222:	881a      	ldrh	r2, [r3, #0]
 8014224:	4b0f      	ldr	r3, [pc, #60]	; (8014264 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014226:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014228:	4b0c      	ldr	r3, [pc, #48]	; (801425c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801422a:	881a      	ldrh	r2, [r3, #0]
 801422c:	4b0e      	ldr	r3, [pc, #56]	; (8014268 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801422e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014230:	8b3a      	ldrh	r2, [r7, #24]
 8014232:	8bbb      	ldrh	r3, [r7, #28]
 8014234:	429a      	cmp	r2, r3
 8014236:	d301      	bcc.n	801423c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014238:	2200      	movs	r2, #0
 801423a:	e000      	b.n	801423e <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 801423c:	2201      	movs	r2, #1
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	4618      	mov	r0, r3
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	0802831c 	.word	0x0802831c
 8014254:	2000bb94 	.word	0x2000bb94
 8014258:	2000bb88 	.word	0x2000bb88
 801425c:	2000bb8a 	.word	0x2000bb8a
 8014260:	2000bb8c 	.word	0x2000bb8c
 8014264:	2000bb8e 	.word	0x2000bb8e
 8014268:	2000bb90 	.word	0x2000bb90

0801426c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	4618      	mov	r0, r3
 801427a:	f7fb fe19 	bl	800feb0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801427e:	bf00      	nop
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
	...

08014288 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014288:	b580      	push	{r7, lr}
 801428a:	b086      	sub	sp, #24
 801428c:	af02      	add	r7, sp, #8
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
 8014294:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	69bb      	ldr	r3, [r7, #24]
 801429a:	9300      	str	r3, [sp, #0]
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	68b9      	ldr	r1, [r7, #8]
 80142a2:	f7ff feaf 	bl	8014004 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80142a6:	4a04      	ldr	r2, [pc, #16]	; (80142b8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	601a      	str	r2, [r3, #0]
    {

    }
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4618      	mov	r0, r3
 80142b0:	3710      	adds	r7, #16
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	0802782c 	.word	0x0802782c

080142bc <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80142bc:	b580      	push	{r7, lr}
 80142be:	af00      	add	r7, sp, #0
 80142c0:	4801      	ldr	r0, [pc, #4]	; (80142c8 <__tcf_0+0xc>)
 80142c2:	f000 f9dd 	bl	8014680 <_ZN12FrontendHeapD1Ev>
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	200086d4 	.word	0x200086d4

080142cc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80142cc:	b580      	push	{r7, lr}
 80142ce:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80142d0:	4b08      	ldr	r3, [pc, #32]	; (80142f4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f003 0301 	and.w	r3, r3, #1
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d108      	bne.n	80142ee <_ZN12FrontendHeap11getInstanceEv+0x22>
 80142dc:	4806      	ldr	r0, [pc, #24]	; (80142f8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80142de:	f000 f831 	bl	8014344 <_ZN12FrontendHeapC1Ev>
 80142e2:	4b04      	ldr	r3, [pc, #16]	; (80142f4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80142e4:	2201      	movs	r2, #1
 80142e6:	601a      	str	r2, [r3, #0]
 80142e8:	4804      	ldr	r0, [pc, #16]	; (80142fc <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80142ea:	f011 fa9d 	bl	8025828 <atexit>
        return instance;
 80142ee:	4b02      	ldr	r3, [pc, #8]	; (80142f8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80142f0:	4618      	mov	r0, r3
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	2000ae88 	.word	0x2000ae88
 80142f8:	200086d4 	.word	0x200086d4
 80142fc:	080142bd 	.word	0x080142bd

08014300 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	4a05      	ldr	r2, [pc, #20]	; (8014320 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fe97 	bl	8014044 <_ZN8touchgfx7MVPHeapD1Ev>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	4618      	mov	r0, r3
 801431a:	3708      	adds	r7, #8
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}
 8014320:	0802782c 	.word	0x0802782c

08014324 <_ZN16FrontendHeapBaseD0Ev>:
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f7ff ffe7 	bl	8014300 <_ZN16FrontendHeapBaseD1Ev>
 8014332:	2114      	movs	r1, #20
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f011 fa2e 	bl	8025796 <_ZdlPvj>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	4618      	mov	r0, r3
 801433e:	3708      	adds	r7, #8
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014344:	b5b0      	push	{r4, r5, r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af02      	add	r7, sp, #8
 801434a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f103 0414 	add.w	r4, r3, #20
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f242 624c 	movw	r2, #9804	; 0x264c
 8014360:	441a      	add	r2, r3
 8014362:	6879      	ldr	r1, [r7, #4]
 8014364:	f242 6360 	movw	r3, #9824	; 0x2660
 8014368:	440b      	add	r3, r1
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	4613      	mov	r3, r2
 801436e:	462a      	mov	r2, r5
 8014370:	4621      	mov	r1, r4
 8014372:	f7ff ff89 	bl	8014288 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014376:	4a1a      	ldr	r2, [pc, #104]	; (80143e0 <_ZN12FrontendHeapC1Ev+0x9c>)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	601a      	str	r2, [r3, #0]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	3314      	adds	r3, #20
 8014380:	4618      	mov	r0, r3
 8014382:	f000 f8df 	bl	8014544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	332c      	adds	r3, #44	; 0x2c
 801438a:	4618      	mov	r0, r3
 801438c:	f000 f90e 	bl	80145ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	f242 634c 	movw	r3, #9804	; 0x264c
 8014396:	4413      	add	r3, r2
 8014398:	4618      	mov	r0, r3
 801439a:	f000 f93d 	bl	8014618 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	f242 6360 	movw	r3, #9824	; 0x2660
 80143a4:	4413      	add	r3, r2
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	f242 71b0 	movw	r1, #10160	; 0x27b0
 80143ac:	4411      	add	r1, r2
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fe f9bf 	bl	8012734 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	f242 73b0 	movw	r3, #10160	; 0x27b0
 80143bc:	4413      	add	r3, r2
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fe fdc8 	bl	8012f54 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	f242 6360 	movw	r3, #9824	; 0x2660
 80143cc:	4413      	add	r3, r2
 80143ce:	4619      	mov	r1, r3
 80143d0:	f7ff ff4c 	bl	801426c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	4618      	mov	r0, r3
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bdb0      	pop	{r4, r5, r7, pc}
 80143de:	bf00      	nop
 80143e0:	0802777c 	.word	0x0802777c

080143e4 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
    {
 80143ec:	4a05      	ldr	r2, [pc, #20]	; (8014404 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7ff fe45 	bl	8014084 <_ZN8touchgfx3LCDD1Ev>
    }
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4618      	mov	r0, r3
 80143fe:	3708      	adds	r7, #8
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	0802b1f4 	.word	0x0802b1f4

08014408 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
    }
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f7ff ffe7 	bl	80143e4 <_ZN8touchgfx8LCD24bppD1Ev>
 8014416:	2158      	movs	r1, #88	; 0x58
 8014418:	6878      	ldr	r0, [r7, #4]
 801441a:	f011 f9bc 	bl	8025796 <_ZdlPvj>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	3708      	adds	r7, #8
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}

08014428 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014428:	b580      	push	{r7, lr}
 801442a:	b086      	sub	sp, #24
 801442c:	af02      	add	r7, sp, #8
 801442e:	60f8      	str	r0, [r7, #12]
 8014430:	60b9      	str	r1, [r7, #8]
 8014432:	607a      	str	r2, [r7, #4]
 8014434:	603b      	str	r3, [r7, #0]
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	8bbb      	ldrh	r3, [r7, #28]
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	8b3b      	ldrh	r3, [r7, #24]
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	68b9      	ldr	r1, [r7, #8]
 8014446:	f7ff fe73 	bl	8014130 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801444a:	4a04      	ldr	r2, [pc, #16]	; (801445c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	601a      	str	r2, [r3, #0]
    }
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	08027850 	.word	0x08027850

08014460 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014460:	b580      	push	{r7, lr}
 8014462:	b086      	sub	sp, #24
 8014464:	af02      	add	r7, sp, #8
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
 801446c:	603b      	str	r3, [r7, #0]
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	8bbb      	ldrh	r3, [r7, #28]
 8014472:	9301      	str	r3, [sp, #4]
 8014474:	8b3b      	ldrh	r3, [r7, #24]
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	68b9      	ldr	r1, [r7, #8]
 801447e:	f7ff ffd3 	bl	8014428 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014482:	4a04      	ldr	r2, [pc, #16]	; (8014494 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	601a      	str	r2, [r3, #0]
    }
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	4618      	mov	r0, r3
 801448c:	3710      	adds	r7, #16
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	0802757c 	.word	0x0802757c

08014498 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	4a04      	ldr	r2, [pc, #16]	; (80144b4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	4618      	mov	r0, r3
 80144aa:	370c      	adds	r7, #12
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr
 80144b4:	08027564 	.word	0x08027564

080144b8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff ffe8 	bl	8014498 <_ZN8touchgfx15TouchControllerC1Ev>
 80144c8:	4a03      	ldr	r2, [pc, #12]	; (80144d8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	0802754c 	.word	0x0802754c

080144dc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80144dc:	b590      	push	{r4, r7, lr}
 80144de:	b085      	sub	sp, #20
 80144e0:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80144e2:	f7fe f803 	bl	80124ec <_ZN14BitmapDatabase11getInstanceEv>
 80144e6:	4604      	mov	r4, r0
 80144e8:	f7fe f80a 	bl	8012500 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80144ec:	4603      	mov	r3, r0
 80144ee:	4619      	mov	r1, r3
 80144f0:	2300      	movs	r3, #0
 80144f2:	9300      	str	r3, [sp, #0]
 80144f4:	2300      	movs	r3, #0
 80144f6:	2200      	movs	r2, #0
 80144f8:	4620      	mov	r0, r4
 80144fa:	f007 fc11 	bl	801bd20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80144fe:	4809      	ldr	r0, [pc, #36]	; (8014524 <touchgfx_init+0x48>)
 8014500:	f7ff fd70 	bl	8013fe4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014504:	2000      	movs	r0, #0
 8014506:	f7fe f81f 	bl	8012548 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801450a:	4807      	ldr	r0, [pc, #28]	; (8014528 <touchgfx_init+0x4c>)
 801450c:	f007 fb56 	bl	801bbbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014510:	f7ff fedc 	bl	80142cc <_ZN12FrontendHeap11getInstanceEv>
 8014514:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014516:	4805      	ldr	r0, [pc, #20]	; (801452c <touchgfx_init+0x50>)
 8014518:	f7fe ffda 	bl	80134d0 <_ZN11TouchGFXHAL10initializeEv>
}
 801451c:	bf00      	nop
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	bd90      	pop	{r4, r7, pc}
 8014524:	2000bb08 	.word	0x2000bb08
 8014528:	20000050 	.word	0x20000050
 801452c:	2000bb0c 	.word	0x2000bb0c

08014530 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014530:	b580      	push	{r7, lr}
 8014532:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014534:	4802      	ldr	r0, [pc, #8]	; (8014540 <touchgfx_taskEntry+0x10>)
 8014536:	f001 fa06 	bl	8015946 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801453a:	bf00      	nop
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	2000bb0c 	.word	0x2000bb0c

08014544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4618      	mov	r0, r3
 8014550:	f000 fc76 	bl	8014e40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014554:	4a03      	ldr	r2, [pc, #12]	; (8014564 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	601a      	str	r2, [r3, #0]
    {
    }
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	4618      	mov	r0, r3
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	080277f8 	.word	0x080277f8

08014568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
    {
    }
 8014570:	4a05      	ldr	r2, [pc, #20]	; (8014588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4618      	mov	r0, r3
 801457a:	f000 fc5f 	bl	8014e3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	4618      	mov	r0, r3
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	080277f8 	.word	0x080277f8

0801458c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
    }
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7ff ffe7 	bl	8014568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801459a:	2118      	movs	r1, #24
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f011 f8fa 	bl	8025796 <_ZdlPvj>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	4618      	mov	r0, r3
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fc42 	bl	8014e40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80145bc:	4a03      	ldr	r2, [pc, #12]	; (80145cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	601a      	str	r2, [r3, #0]
    }
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	080277c4 	.word	0x080277c4

080145d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
    }
 80145d8:	4a05      	ldr	r2, [pc, #20]	; (80145f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	601a      	str	r2, [r3, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4618      	mov	r0, r3
 80145e2:	f000 fc2b 	bl	8014e3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	4618      	mov	r0, r3
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	080277c4 	.word	0x080277c4

080145f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
    }
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7ff ffe7 	bl	80145d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014602:	f242 6120 	movw	r1, #9760	; 0x2620
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f011 f8c5 	bl	8025796 <_ZdlPvj>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	4618      	mov	r0, r3
 8014610:	3708      	adds	r7, #8
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
	...

08014618 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	4618      	mov	r0, r3
 8014624:	f000 fc0c 	bl	8014e40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014628:	4a03      	ldr	r2, [pc, #12]	; (8014638 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	601a      	str	r2, [r3, #0]
    }
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	4618      	mov	r0, r3
 8014632:	3708      	adds	r7, #8
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	08027790 	.word	0x08027790

0801463c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
    }
 8014644:	4a05      	ldr	r2, [pc, #20]	; (801465c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	601a      	str	r2, [r3, #0]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4618      	mov	r0, r3
 801464e:	f000 fbf5 	bl	8014e3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	08027790 	.word	0x08027790

08014660 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
    }
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7ff ffe7 	bl	801463c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801466e:	2114      	movs	r1, #20
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f011 f890 	bl	8025796 <_ZdlPvj>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	4618      	mov	r0, r3
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	4a11      	ldr	r2, [pc, #68]	; (80146d0 <_ZN12FrontendHeapD1Ev+0x50>)
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	f242 6360 	movw	r3, #9824	; 0x2660
 8014694:	4413      	add	r3, r2
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe f816 	bl	80126c8 <_ZN19FrontendApplicationD1Ev>
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	f242 634c 	movw	r3, #9804	; 0x264c
 80146a2:	4413      	add	r3, r2
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7ff ffc9 	bl	801463c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	332c      	adds	r3, #44	; 0x2c
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7ff ff8e 	bl	80145d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	3314      	adds	r3, #20
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7ff ff55 	bl	8014568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7ff fe1d 	bl	8014300 <_ZN16FrontendHeapBaseD1Ev>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0802777c 	.word	0x0802777c

080146d4 <_ZN12FrontendHeapD0Ev>:
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff ffcf 	bl	8014680 <_ZN12FrontendHeapD1Ev>
 80146e2:	f242 71b4 	movw	r1, #10164	; 0x27b4
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f011 f855 	bl	8025796 <_ZdlPvj>
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	4618      	mov	r0, r3
 80146f0:	3708      	adds	r7, #8
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
	...

080146f8 <_Z41__static_initialization_and_destruction_0ii>:
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af02      	add	r7, sp, #8
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d119      	bne.n	801473c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801470e:	4293      	cmp	r3, r2
 8014710:	d114      	bne.n	801473c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014712:	4818      	ldr	r0, [pc, #96]	; (8014774 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014714:	f7ff fed0 	bl	80144b8 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014718:	4817      	ldr	r0, [pc, #92]	; (8014778 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801471a:	f7ff f965 	bl	80139e8 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 801471e:	4817      	ldr	r0, [pc, #92]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014720:	f009 fd24 	bl	801e16c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8014724:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014728:	9301      	str	r3, [sp, #4]
 801472a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	4b10      	ldr	r3, [pc, #64]	; (8014774 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014732:	4a12      	ldr	r2, [pc, #72]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014734:	4910      	ldr	r1, [pc, #64]	; (8014778 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014736:	4812      	ldr	r0, [pc, #72]	; (8014780 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014738:	f7ff fe92 	bl	8014460 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d113      	bne.n	801476a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014748:	4293      	cmp	r3, r2
 801474a:	d10e      	bne.n	801476a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801474c:	480c      	ldr	r0, [pc, #48]	; (8014780 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801474e:	f7fe ff25 	bl	801359c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014752:	480c      	ldr	r0, [pc, #48]	; (8014784 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014754:	f7fa fcb4 	bl	800f0c0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014758:	4808      	ldr	r0, [pc, #32]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801475a:	f7ff fe43 	bl	80143e4 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 801475e:	4806      	ldr	r0, [pc, #24]	; (8014778 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014760:	f7ff f96c 	bl	8013a3c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014764:	4803      	ldr	r0, [pc, #12]	; (8014774 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014766:	f7fe fc8f 	bl	8013088 <_ZN20STM32TouchControllerD1Ev>
}
 801476a:	bf00      	nop
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	2000ae8c 	.word	0x2000ae8c
 8014778:	2000ae90 	.word	0x2000ae90
 801477c:	2000bab0 	.word	0x2000bab0
 8014780:	2000bb0c 	.word	0x2000bb0c
 8014784:	20000050 	.word	0x20000050

08014788 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014790:	2301      	movs	r3, #1
    }
 8014792:	4618      	mov	r0, r3
 8014794:	370c      	adds	r7, #12
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr

0801479e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801479e:	b480      	push	{r7}
 80147a0:	b083      	sub	sp, #12
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80147a6:	230c      	movs	r3, #12
    }
 80147a8:	4618      	mov	r0, r3
 80147aa:	370c      	adds	r7, #12
 80147ac:	46bd      	mov	sp, r7
 80147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b2:	4770      	bx	lr

080147b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80147b4:	b480      	push	{r7}
 80147b6:	b083      	sub	sp, #12
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	460b      	mov	r3, r1
 80147be:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80147c0:	887a      	ldrh	r2, [r7, #2]
 80147c2:	4613      	mov	r3, r2
 80147c4:	005b      	lsls	r3, r3, #1
 80147c6:	4413      	add	r3, r2
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	3308      	adds	r3, #8
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	4413      	add	r3, r2
    }
 80147d0:	4618      	mov	r0, r3
 80147d2:	370c      	adds	r7, #12
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	460b      	mov	r3, r1
 80147e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80147e8:	887a      	ldrh	r2, [r7, #2]
 80147ea:	4613      	mov	r3, r2
 80147ec:	005b      	lsls	r3, r3, #1
 80147ee:	4413      	add	r3, r2
 80147f0:	009b      	lsls	r3, r3, #2
 80147f2:	3308      	adds	r3, #8
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	4413      	add	r3, r2
    }
 80147f8:	4618      	mov	r0, r3
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014804:	b480      	push	{r7}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801480c:	2301      	movs	r3, #1
    }
 801480e:	4618      	mov	r0, r3
 8014810:	370c      	adds	r7, #12
 8014812:	46bd      	mov	sp, r7
 8014814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014818:	4770      	bx	lr

0801481a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801481a:	b480      	push	{r7}
 801481c:	b083      	sub	sp, #12
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014822:	f242 6318 	movw	r3, #9752	; 0x2618
    }
 8014826:	4618      	mov	r0, r3
 8014828:	370c      	adds	r7, #12
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr

08014832 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014832:	b480      	push	{r7}
 8014834:	b083      	sub	sp, #12
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	460b      	mov	r3, r1
 801483c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801483e:	887b      	ldrh	r3, [r7, #2]
 8014840:	f242 6218 	movw	r2, #9752	; 0x2618
 8014844:	fb02 f303 	mul.w	r3, r2, r3
 8014848:	3308      	adds	r3, #8
 801484a:	687a      	ldr	r2, [r7, #4]
 801484c:	4413      	add	r3, r2
    }
 801484e:	4618      	mov	r0, r3
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr

0801485a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801485a:	b480      	push	{r7}
 801485c:	b083      	sub	sp, #12
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	460b      	mov	r3, r1
 8014864:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014866:	887b      	ldrh	r3, [r7, #2]
 8014868:	f242 6218 	movw	r2, #9752	; 0x2618
 801486c:	fb02 f303 	mul.w	r3, r2, r3
 8014870:	3308      	adds	r3, #8
 8014872:	687a      	ldr	r2, [r7, #4]
 8014874:	4413      	add	r3, r2
    }
 8014876:	4618      	mov	r0, r3
 8014878:	370c      	adds	r7, #12
 801487a:	46bd      	mov	sp, r7
 801487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014880:	4770      	bx	lr

08014882 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014882:	b480      	push	{r7}
 8014884:	b083      	sub	sp, #12
 8014886:	af00      	add	r7, sp, #0
 8014888:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801488a:	2301      	movs	r3, #1
    }
 801488c:	4618      	mov	r0, r3
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr

08014898 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80148a0:	2310      	movs	r3, #16
    }
 80148a2:	4618      	mov	r0, r3
 80148a4:	370c      	adds	r7, #12
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr

080148ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80148ae:	b480      	push	{r7}
 80148b0:	b083      	sub	sp, #12
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
 80148b6:	460b      	mov	r3, r1
 80148b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148ba:	887b      	ldrh	r3, [r7, #2]
 80148bc:	011b      	lsls	r3, r3, #4
 80148be:	3308      	adds	r3, #8
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	4413      	add	r3, r2
    }
 80148c4:	4618      	mov	r0, r3
 80148c6:	370c      	adds	r7, #12
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	460b      	mov	r3, r1
 80148da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148dc:	887b      	ldrh	r3, [r7, #2]
 80148de:	011b      	lsls	r3, r3, #4
 80148e0:	3308      	adds	r3, #8
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	4413      	add	r3, r2
    }
 80148e6:	4618      	mov	r0, r3
 80148e8:	370c      	adds	r7, #12
 80148ea:	46bd      	mov	sp, r7
 80148ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f0:	4770      	bx	lr

080148f2 <_GLOBAL__sub_I_touchgfx_init>:
 80148f2:	b580      	push	{r7, lr}
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148fa:	2001      	movs	r0, #1
 80148fc:	f7ff fefc 	bl	80146f8 <_Z41__static_initialization_and_destruction_0ii>
 8014900:	bd80      	pop	{r7, pc}

08014902 <_GLOBAL__sub_D_touchgfx_init>:
 8014902:	b580      	push	{r7, lr}
 8014904:	af00      	add	r7, sp, #0
 8014906:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801490a:	2000      	movs	r0, #0
 801490c:	f7ff fef4 	bl	80146f8 <_Z41__static_initialization_and_destruction_0ii>
 8014910:	bd80      	pop	{r7, pc}

08014912 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014912:	b580      	push	{r7, lr}
 8014914:	b082      	sub	sp, #8
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	3318      	adds	r3, #24
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	4798      	blx	r3
    }
 8014926:	bf00      	nop
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801492e:	b480      	push	{r7}
 8014930:	b083      	sub	sp, #12
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	460b      	mov	r3, r1
 8014938:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	78fa      	ldrb	r2, [r7, #3]
 801493e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014942:	bf00      	nop
 8014944:	370c      	adds	r7, #12
 8014946:	46bd      	mov	sp, r7
 8014948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494c:	4770      	bx	lr

0801494e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801494e:	b480      	push	{r7}
 8014950:	b083      	sub	sp, #12
 8014952:	af00      	add	r7, sp, #0
 8014954:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801495c:	3301      	adds	r3, #1
 801495e:	b2da      	uxtb	r2, r3
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014966:	bf00      	nop
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr
	...

08014974 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	460b      	mov	r3, r1
 801497e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d002      	beq.n	801498c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014986:	78fb      	ldrb	r3, [r7, #3]
 8014988:	2b02      	cmp	r3, #2
 801498a:	d105      	bne.n	8014998 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	78fa      	ldrb	r2, [r7, #3]
 8014990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014994:	2301      	movs	r3, #1
 8014996:	e027      	b.n	80149e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014998:	78fb      	ldrb	r3, [r7, #3]
 801499a:	2b01      	cmp	r3, #1
 801499c:	d123      	bne.n	80149e6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d014      	beq.n	80149d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3380      	adds	r3, #128	; 0x80
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	4798      	blx	r3
 80149b2:	4603      	mov	r3, r0
 80149b4:	461a      	mov	r2, r3
 80149b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d008      	beq.n	80149d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80149be:	4b0c      	ldr	r3, [pc, #48]	; (80149f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	f083 0301 	eor.w	r3, r3, #1
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d001      	beq.n	80149d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80149cc:	2301      	movs	r3, #1
 80149ce:	e000      	b.n	80149d2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80149d0:	2300      	movs	r3, #0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d005      	beq.n	80149e2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	78fa      	ldrb	r2, [r7, #3]
 80149da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80149de:	2301      	movs	r3, #1
 80149e0:	e002      	b.n	80149e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e000      	b.n	80149e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80149e6:	2300      	movs	r3, #0
    }
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	2000bb92 	.word	0x2000bb92

080149f4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	683a      	ldr	r2, [r7, #0]
 8014a02:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014a04:	bf00      	nop
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <__NVIC_EnableIRQ>:
{
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	db0d      	blt.n	8014a3e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	f003 021f 	and.w	r2, r3, #31
 8014a2c:	4907      	ldr	r1, [pc, #28]	; (8014a4c <__NVIC_EnableIRQ+0x3c>)
 8014a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a32:	095b      	lsrs	r3, r3, #5
 8014a34:	2001      	movs	r0, #1
 8014a36:	fa00 f202 	lsl.w	r2, r0, r2
 8014a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014a3e:	bf00      	nop
 8014a40:	370c      	adds	r7, #12
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	e000e100 	.word	0xe000e100

08014a50 <__NVIC_DisableIRQ>:
{
 8014a50:	b480      	push	{r7}
 8014a52:	b083      	sub	sp, #12
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	4603      	mov	r3, r0
 8014a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	db12      	blt.n	8014a88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	f003 021f 	and.w	r2, r3, #31
 8014a6c:	4909      	ldr	r1, [pc, #36]	; (8014a94 <__NVIC_DisableIRQ+0x44>)
 8014a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a72:	095b      	lsrs	r3, r3, #5
 8014a74:	2001      	movs	r0, #1
 8014a76:	fa00 f202 	lsl.w	r2, r0, r2
 8014a7a:	3320      	adds	r3, #32
 8014a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014a80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014a84:	f3bf 8f6f 	isb	sy
}
 8014a88:	bf00      	nop
 8014a8a:	370c      	adds	r7, #12
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr
 8014a94:	e000e100 	.word	0xe000e100

08014a98 <__NVIC_SetPriority>:
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b083      	sub	sp, #12
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	6039      	str	r1, [r7, #0]
 8014aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	db0c      	blt.n	8014ac6 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	4a0e      	ldr	r2, [pc, #56]	; (8014aec <__NVIC_SetPriority+0x54>)
 8014ab2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014ab6:	4608      	mov	r0, r1
 8014ab8:	011b      	lsls	r3, r3, #4
 8014aba:	b2d9      	uxtb	r1, r3
 8014abc:	1813      	adds	r3, r2, r0
 8014abe:	460a      	mov	r2, r1
 8014ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014ac4:	e00c      	b.n	8014ae0 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	b2da      	uxtb	r2, r3
 8014aca:	4909      	ldr	r1, [pc, #36]	; (8014af0 <__NVIC_SetPriority+0x58>)
 8014acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	f003 030f 	and.w	r3, r3, #15
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	0112      	lsls	r2, r2, #4
 8014ada:	b2d2      	uxtb	r2, r2
 8014adc:	440b      	add	r3, r1
 8014ade:	761a      	strb	r2, [r3, #24]
}
 8014ae0:	bf00      	nop
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr
 8014aec:	e000e100 	.word	0xe000e100
 8014af0:	e000ed00 	.word	0xe000ed00

08014af4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014af4:	b5b0      	push	{r4, r5, r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f001 f9e6 	bl	8015ed0 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014b04:	687d      	ldr	r5, [r7, #4]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	334c      	adds	r3, #76	; 0x4c
 8014b0c:	681c      	ldr	r4, [r3, #0]
 8014b0e:	f004 fbad 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 8014b12:	4603      	mov	r3, r0
 8014b14:	4619      	mov	r1, r3
 8014b16:	4628      	mov	r0, r5
 8014b18:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	490d      	ldr	r1, [pc, #52]	; (8014b54 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff ff68 	bl	80149f4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2101      	movs	r1, #1
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7ff ff23 	bl	8014974 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	3374      	adds	r3, #116	; 0x74
 8014b36:	681c      	ldr	r4, [r3, #0]
 8014b38:	2300      	movs	r3, #0
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014b40:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2101      	movs	r1, #1
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fef1 	bl	801492e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014b4c:	bf00      	nop
 8014b4e:	3708      	adds	r7, #8
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bdb0      	pop	{r4, r5, r7, pc}
 8014b54:	08013735 	.word	0x08013735

08014b58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014b60:	2109      	movs	r1, #9
 8014b62:	205a      	movs	r0, #90	; 0x5a
 8014b64:	f7ff ff98 	bl	8014a98 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014b68:	2109      	movs	r1, #9
 8014b6a:	2058      	movs	r0, #88	; 0x58
 8014b6c:	f7ff ff94 	bl	8014a98 <__NVIC_SetPriority>
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b082      	sub	sp, #8
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014b80:	205a      	movs	r0, #90	; 0x5a
 8014b82:	f7ff ff45 	bl	8014a10 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014b86:	2058      	movs	r0, #88	; 0x58
 8014b88:	f7ff ff42 	bl	8014a10 <__NVIC_EnableIRQ>
}
 8014b8c:	bf00      	nop
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}

08014b94 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014b9c:	205a      	movs	r0, #90	; 0x5a
 8014b9e:	f7ff ff57 	bl	8014a50 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014ba2:	2058      	movs	r0, #88	; 0x58
 8014ba4:	f7ff ff54 	bl	8014a50 <__NVIC_DisableIRQ>
}
 8014ba8:	bf00      	nop
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}

08014bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014bb0:	b480      	push	{r7}
 8014bb2:	b083      	sub	sp, #12
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014bb8:	4b11      	ldr	r3, [pc, #68]	; (8014c00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	3b01      	subs	r3, #1
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	4b0e      	ldr	r3, [pc, #56]	; (8014c04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014bca:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014bcc:	4b0c      	ldr	r3, [pc, #48]	; (8014c00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	3b01      	subs	r3, #1
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	4b0a      	ldr	r3, [pc, #40]	; (8014c08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014bde:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014be0:	4b08      	ldr	r3, [pc, #32]	; (8014c04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014be2:	881a      	ldrh	r2, [r3, #0]
 8014be4:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014be6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014be8:	4b05      	ldr	r3, [pc, #20]	; (8014c00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bec:	4a04      	ldr	r2, [pc, #16]	; (8014c00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bee:	f043 0301 	orr.w	r3, r3, #1
 8014bf2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014bf4:	bf00      	nop
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr
 8014c00:	40016800 	.word	0x40016800
 8014c04:	2000bb84 	.word	0x2000bb84
 8014c08:	2000bb86 	.word	0x2000bb86

08014c0c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b083      	sub	sp, #12
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014c14:	4b03      	ldr	r3, [pc, #12]	; (8014c24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	370c      	adds	r7, #12
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr
 8014c24:	40016884 	.word	0x40016884

08014c28 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014c28:	b480      	push	{r7}
 8014c2a:	b083      	sub	sp, #12
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014c32:	4a06      	ldr	r2, [pc, #24]	; (8014c4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014c38:	4b05      	ldr	r3, [pc, #20]	; (8014c50 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014c3e:	bf00      	nop
 8014c40:	370c      	adds	r7, #12
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop
 8014c4c:	40016884 	.word	0x40016884
 8014c50:	40016800 	.word	0x40016800

08014c54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6839      	ldr	r1, [r7, #0]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 fe44 	bl	80158f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014c68:	bf00      	nop
 8014c6a:	3708      	adds	r7, #8
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014c70:	b480      	push	{r7}
 8014c72:	b085      	sub	sp, #20
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014c78:	4b0d      	ldr	r3, [pc, #52]	; (8014cb0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c7c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014c7e:	4b0c      	ldr	r3, [pc, #48]	; (8014cb0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014c8e:	89fa      	ldrh	r2, [r7, #14]
 8014c90:	89bb      	ldrh	r3, [r7, #12]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d201      	bcs.n	8014c9a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014c96:	2300      	movs	r3, #0
 8014c98:	e003      	b.n	8014ca2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014c9a:	89fa      	ldrh	r2, [r7, #14]
 8014c9c:	89bb      	ldrh	r3, [r7, #12]
 8014c9e:	1ad3      	subs	r3, r2, r3
 8014ca0:	b29b      	uxth	r3, r3
    }
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3714      	adds	r7, #20
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	40016800 	.word	0x40016800

08014cb4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014cbc:	4b1a      	ldr	r3, [pc, #104]	; (8014d28 <HAL_LTDC_LineEventCallback+0x74>)
 8014cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cc0:	4a1a      	ldr	r2, [pc, #104]	; (8014d2c <HAL_LTDC_LineEventCallback+0x78>)
 8014cc2:	8812      	ldrh	r2, [r2, #0]
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	bf0c      	ite	eq
 8014cc8:	2301      	moveq	r3, #1
 8014cca:	2300      	movne	r3, #0
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d017      	beq.n	8014d02 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014cd2:	4b17      	ldr	r3, [pc, #92]	; (8014d30 <HAL_LTDC_LineEventCallback+0x7c>)
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f7f1 f9e5 	bl	80060a8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8014cde:	f7fa feb7 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7ff fe32 	bl	801494e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014cea:	f7fe fce5 	bl	80136b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8014cee:	f7fa feaf 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f001 fb73 	bl	80163e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	f7fe f9e6 	bl	80130cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014d00:	e00e      	b.n	8014d20 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014d02:	4b0a      	ldr	r3, [pc, #40]	; (8014d2c <HAL_LTDC_LineEventCallback+0x78>)
 8014d04:	881b      	ldrh	r3, [r3, #0]
 8014d06:	4619      	mov	r1, r3
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f7f1 f9cd 	bl	80060a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014d0e:	2000      	movs	r0, #0
 8014d10:	f7fe f9e7 	bl	80130e2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8014d14:	f7fa fe9c 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7ff fdf9 	bl	8014912 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014d20:	bf00      	nop
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	40016800 	.word	0x40016800
 8014d2c:	2000bb84 	.word	0x2000bb84
 8014d30:	2000bb86 	.word	0x2000bb86

08014d34 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014d34:	8880      	ldrh	r0, [r0, #4]
 8014d36:	4770      	bx	lr

08014d38 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014d38:	2300      	movs	r3, #0
 8014d3a:	8083      	strh	r3, [r0, #4]
 8014d3c:	4770      	bx	lr
	...

08014d40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d42:	6803      	ldr	r3, [r0, #0]
 8014d44:	460e      	mov	r6, r1
 8014d46:	2100      	movs	r1, #0
 8014d48:	4605      	mov	r5, r0
 8014d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4c:	4798      	blx	r3
 8014d4e:	4604      	mov	r4, r0
 8014d50:	682b      	ldr	r3, [r5, #0]
 8014d52:	4628      	mov	r0, r5
 8014d54:	1b34      	subs	r4, r6, r4
 8014d56:	6a1b      	ldr	r3, [r3, #32]
 8014d58:	b2a4      	uxth	r4, r4
 8014d5a:	4798      	blx	r3
 8014d5c:	88ab      	ldrh	r3, [r5, #4]
 8014d5e:	fbb4 f4f0 	udiv	r4, r4, r0
 8014d62:	42a3      	cmp	r3, r4
 8014d64:	d805      	bhi.n	8014d72 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014d66:	4b0e      	ldr	r3, [pc, #56]	; (8014da0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014d68:	211e      	movs	r1, #30
 8014d6a:	4a0e      	ldr	r2, [pc, #56]	; (8014da4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014d6c:	480e      	ldr	r0, [pc, #56]	; (8014da8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014d6e:	f010 fd3d 	bl	80257ec <__assert_func>
 8014d72:	682b      	ldr	r3, [r5, #0]
 8014d74:	2100      	movs	r1, #0
 8014d76:	4628      	mov	r0, r5
 8014d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7a:	4798      	blx	r3
 8014d7c:	682b      	ldr	r3, [r5, #0]
 8014d7e:	4607      	mov	r7, r0
 8014d80:	4628      	mov	r0, r5
 8014d82:	6a1b      	ldr	r3, [r3, #32]
 8014d84:	4798      	blx	r3
 8014d86:	1bf3      	subs	r3, r6, r7
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	fbb3 f2f0 	udiv	r2, r3, r0
 8014d8e:	fb02 3010 	mls	r0, r2, r0, r3
 8014d92:	b118      	cbz	r0, 8014d9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014d94:	4b05      	ldr	r3, [pc, #20]	; (8014dac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014d96:	211f      	movs	r1, #31
 8014d98:	4a02      	ldr	r2, [pc, #8]	; (8014da4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014d9a:	e7e7      	b.n	8014d6c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da0:	080278fc 	.word	0x080278fc
 8014da4:	08027a6a 	.word	0x08027a6a
 8014da8:	08027911 	.word	0x08027911
 8014dac:	0802793f 	.word	0x0802793f

08014db0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014db0:	b538      	push	{r3, r4, r5, lr}
 8014db2:	6803      	ldr	r3, [r0, #0]
 8014db4:	460d      	mov	r5, r1
 8014db6:	4604      	mov	r4, r0
 8014db8:	6a1b      	ldr	r3, [r3, #32]
 8014dba:	4798      	blx	r3
 8014dbc:	4285      	cmp	r5, r0
 8014dbe:	d905      	bls.n	8014dcc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014dc0:	4b0c      	ldr	r3, [pc, #48]	; (8014df4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014dc2:	212f      	movs	r1, #47	; 0x2f
 8014dc4:	4a0c      	ldr	r2, [pc, #48]	; (8014df8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014dc6:	480d      	ldr	r0, [pc, #52]	; (8014dfc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014dc8:	f010 fd10 	bl	80257ec <__assert_func>
 8014dcc:	6823      	ldr	r3, [r4, #0]
 8014dce:	4620      	mov	r0, r4
 8014dd0:	88a5      	ldrh	r5, [r4, #4]
 8014dd2:	69db      	ldr	r3, [r3, #28]
 8014dd4:	4798      	blx	r3
 8014dd6:	4285      	cmp	r5, r0
 8014dd8:	d303      	bcc.n	8014de2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014dda:	4b09      	ldr	r3, [pc, #36]	; (8014e00 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014ddc:	2130      	movs	r1, #48	; 0x30
 8014dde:	4a06      	ldr	r2, [pc, #24]	; (8014df8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014de0:	e7f1      	b.n	8014dc6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	4620      	mov	r0, r4
 8014de6:	88a1      	ldrh	r1, [r4, #4]
 8014de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dea:	4798      	blx	r3
 8014dec:	88a3      	ldrh	r3, [r4, #4]
 8014dee:	3301      	adds	r3, #1
 8014df0:	80a3      	strh	r3, [r4, #4]
 8014df2:	bd38      	pop	{r3, r4, r5, pc}
 8014df4:	080279b9 	.word	0x080279b9
 8014df8:	08027aad 	.word	0x08027aad
 8014dfc:	08027911 	.word	0x08027911
 8014e00:	080279d0 	.word	0x080279d0

08014e04 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	6803      	ldr	r3, [r0, #0]
 8014e08:	4616      	mov	r6, r2
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	460d      	mov	r5, r1
 8014e0e:	6a1b      	ldr	r3, [r3, #32]
 8014e10:	4798      	blx	r3
 8014e12:	4286      	cmp	r6, r0
 8014e14:	d905      	bls.n	8014e22 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014e16:	4b06      	ldr	r3, [pc, #24]	; (8014e30 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014e18:	2139      	movs	r1, #57	; 0x39
 8014e1a:	4a06      	ldr	r2, [pc, #24]	; (8014e34 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014e1c:	4806      	ldr	r0, [pc, #24]	; (8014e38 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014e1e:	f010 fce5 	bl	80257ec <__assert_func>
 8014e22:	6823      	ldr	r3, [r4, #0]
 8014e24:	4629      	mov	r1, r5
 8014e26:	4620      	mov	r0, r4
 8014e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e2e:	4718      	bx	r3
 8014e30:	080279b9 	.word	0x080279b9
 8014e34:	08027a20 	.word	0x08027a20
 8014e38:	08027911 	.word	0x08027911

08014e3c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014e3c:	4770      	bx	lr
	...

08014e40 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014e40:	4a02      	ldr	r2, [pc, #8]	; (8014e4c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014e42:	6002      	str	r2, [r0, #0]
 8014e44:	2200      	movs	r2, #0
 8014e46:	8082      	strh	r2, [r0, #4]
 8014e48:	4770      	bx	lr
 8014e4a:	bf00      	nop
 8014e4c:	080279f4 	.word	0x080279f4

08014e50 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014e50:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8014e54:	4770      	bx	lr

08014e56 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8014e56:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014e5a:	4770      	bx	lr

08014e5c <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014e5c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014e60:	4770      	bx	lr

08014e62 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8014e62:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8014e66:	4770      	bx	lr

08014e68 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014e68:	4b03      	ldr	r3, [pc, #12]	; (8014e78 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014e6a:	b510      	push	{r4, lr}
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	6003      	str	r3, [r0, #0]
 8014e70:	f000 f8b6 	bl	8014fe0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014e74:	4620      	mov	r0, r4
 8014e76:	bd10      	pop	{r4, pc}
 8014e78:	08027af4 	.word	0x08027af4

08014e7c <_ZN8touchgfx11BoxProgressD0Ev>:
 8014e7c:	b510      	push	{r4, lr}
 8014e7e:	4604      	mov	r4, r0
 8014e80:	f7ff fff2 	bl	8014e68 <_ZN8touchgfx11BoxProgressD1Ev>
 8014e84:	21c0      	movs	r1, #192	; 0xc0
 8014e86:	4620      	mov	r0, r4
 8014e88:	f010 fc85 	bl	8025796 <_ZdlPvj>
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	bd10      	pop	{r4, pc}

08014e90 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014e90:	b510      	push	{r4, lr}
 8014e92:	4604      	mov	r4, r0
 8014e94:	f000 f8b8 	bl	8015008 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014e98:	2201      	movs	r2, #1
 8014e9a:	4b16      	ldr	r3, [pc, #88]	; (8014ef4 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ea0:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8014ea4:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014ea8:	4a13      	ldr	r2, [pc, #76]	; (8014ef8 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014eaa:	6023      	str	r3, [r4, #0]
 8014eac:	2300      	movs	r3, #0
 8014eae:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014eb2:	22ff      	movs	r2, #255	; 0xff
 8014eb4:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014eb8:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014ebc:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014ec0:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8014ec4:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014ec8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014ecc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014ed0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8014ed4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8014ed8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014edc:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8014ee0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8014ee4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8014ee8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8014eec:	f000 fbb8 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	bd10      	pop	{r4, pc}
 8014ef4:	08027af4 	.word	0x08027af4
 8014ef8:	08028dac 	.word	0x08028dac

08014efc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f00:	4617      	mov	r7, r2
 8014f02:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014f06:	2200      	movs	r2, #0
 8014f08:	4604      	mov	r4, r0
 8014f0a:	460e      	mov	r6, r1
 8014f0c:	4698      	mov	r8, r3
 8014f0e:	4611      	mov	r1, r2
 8014f10:	9500      	str	r5, [sp, #0]
 8014f12:	3090      	adds	r0, #144	; 0x90
 8014f14:	f7fb fa6c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f18:	4643      	mov	r3, r8
 8014f1a:	463a      	mov	r2, r7
 8014f1c:	4631      	mov	r1, r6
 8014f1e:	4620      	mov	r0, r4
 8014f20:	9508      	str	r5, [sp, #32]
 8014f22:	b002      	add	sp, #8
 8014f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f28:	f000 b9fa 	b.w	8015320 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014f2c <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f2e:	4604      	mov	r4, r0
 8014f30:	f000 fa40 	bl	80153b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014f34:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014f38:	4628      	mov	r0, r5
 8014f3a:	f004 fded 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f3e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f42:	2b03      	cmp	r3, #3
 8014f44:	d814      	bhi.n	8014f70 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8014f46:	e8df f003 	tbb	[pc, r3]
 8014f4a:	0202      	.short	0x0202
 8014f4c:	1010      	.short	0x1010
 8014f4e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014f52:	4620      	mov	r0, r4
 8014f54:	f000 fa88 	bl	8015468 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014f58:	b200      	sxth	r0, r0
 8014f5a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f5e:	2b03      	cmp	r3, #3
 8014f60:	d81a      	bhi.n	8014f98 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8014f62:	e8df f003 	tbb	[pc, r3]
 8014f66:	0e07      	.short	0x0e07
 8014f68:	231f      	.short	0x231f
 8014f6a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014f6e:	e7f0      	b.n	8014f52 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014f70:	2000      	movs	r0, #0
 8014f72:	e7f2      	b.n	8014f5a <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8014f74:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f78:	9300      	str	r3, [sp, #0]
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	2100      	movs	r1, #0
 8014f80:	e007      	b.n	8014f92 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8014f82:	8921      	ldrh	r1, [r4, #8]
 8014f84:	2200      	movs	r2, #0
 8014f86:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f8a:	1a09      	subs	r1, r1, r0
 8014f8c:	9300      	str	r3, [sp, #0]
 8014f8e:	4603      	mov	r3, r0
 8014f90:	b209      	sxth	r1, r1
 8014f92:	4628      	mov	r0, r5
 8014f94:	f7fb fa2c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f98:	4628      	mov	r0, r5
 8014f9a:	b003      	add	sp, #12
 8014f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fa0:	f004 bdba 	b.w	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014fa4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014fa8:	9000      	str	r0, [sp, #0]
 8014faa:	e7e7      	b.n	8014f7c <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014fac:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014fb0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014fb4:	1a12      	subs	r2, r2, r0
 8014fb6:	9000      	str	r0, [sp, #0]
 8014fb8:	b212      	sxth	r2, r2
 8014fba:	e7e0      	b.n	8014f7e <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014fbc <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014fbc:	b570      	push	{r4, r5, r6, lr}
 8014fbe:	6803      	ldr	r3, [r0, #0]
 8014fc0:	4604      	mov	r4, r0
 8014fc2:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8014fc6:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014fca:	4798      	blx	r3
 8014fcc:	4601      	mov	r1, r0
 8014fce:	462b      	mov	r3, r5
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fd6:	4718      	bx	r3

08014fd8 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014fd8:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014fdc:	4770      	bx	lr
	...

08014fe0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014fe0:	4b03      	ldr	r3, [pc, #12]	; (8014ff0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	6003      	str	r3, [r0, #0]
 8014fe8:	f000 f999 	bl	801531e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014fec:	4620      	mov	r0, r4
 8014fee:	bd10      	pop	{r4, pc}
 8014ff0:	08027bcc 	.word	0x08027bcc

08014ff4 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014ff4:	b510      	push	{r4, lr}
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	f7ff fff2 	bl	8014fe0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014ffc:	2190      	movs	r1, #144	; 0x90
 8014ffe:	4620      	mov	r0, r4
 8015000:	f010 fbc9 	bl	8025796 <_ZdlPvj>
 8015004:	4620      	mov	r0, r4
 8015006:	bd10      	pop	{r4, pc}

08015008 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8015008:	b510      	push	{r4, lr}
 801500a:	4604      	mov	r4, r0
 801500c:	f000 fa4c 	bl	80154a8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8015010:	4b03      	ldr	r3, [pc, #12]	; (8015020 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8015012:	2100      	movs	r1, #0
 8015014:	4620      	mov	r0, r4
 8015016:	6023      	str	r3, [r4, #0]
 8015018:	f7ff ffd0 	bl	8014fbc <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 801501c:	4620      	mov	r0, r4
 801501e:	bd10      	pop	{r4, pc}
 8015020:	08027bcc 	.word	0x08027bcc

08015024 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	6803      	ldr	r3, [r0, #0]
 8015028:	4604      	mov	r4, r0
 801502a:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801502e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015032:	4798      	blx	r3
 8015034:	4601      	mov	r1, r0
 8015036:	462b      	mov	r3, r5
 8015038:	4620      	mov	r0, r4
 801503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801503e:	4718      	bx	r3

08015040 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8015040:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8015044:	4770      	bx	lr

08015046 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8015046:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801504a:	4770      	bx	lr

0801504c <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801504c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8015050:	4770      	bx	lr

08015052 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8015052:	b507      	push	{r0, r1, r2, lr}
 8015054:	ab02      	add	r3, sp, #8
 8015056:	30bc      	adds	r0, #188	; 0xbc
 8015058:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801505c:	4619      	mov	r1, r3
 801505e:	f002 f9a9 	bl	80173b4 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8015062:	b003      	add	sp, #12
 8015064:	f85d fb04 	ldr.w	pc, [sp], #4

08015068 <_ZN8touchgfx13ImageProgressD1Ev>:
 8015068:	4b03      	ldr	r3, [pc, #12]	; (8015078 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801506a:	b510      	push	{r4, lr}
 801506c:	4604      	mov	r4, r0
 801506e:	6003      	str	r3, [r0, #0]
 8015070:	f7ff ffb6 	bl	8014fe0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015074:	4620      	mov	r0, r4
 8015076:	bd10      	pop	{r4, pc}
 8015078:	08027cf8 	.word	0x08027cf8

0801507c <_ZN8touchgfx13ImageProgressD0Ev>:
 801507c:	b510      	push	{r4, lr}
 801507e:	4604      	mov	r4, r0
 8015080:	f7ff fff2 	bl	8015068 <_ZN8touchgfx13ImageProgressD1Ev>
 8015084:	21f0      	movs	r1, #240	; 0xf0
 8015086:	4620      	mov	r0, r4
 8015088:	f010 fb85 	bl	8025796 <_ZdlPvj>
 801508c:	4620      	mov	r0, r4
 801508e:	bd10      	pop	{r4, pc}

08015090 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8015090:	b508      	push	{r3, lr}
 8015092:	4b06      	ldr	r3, [pc, #24]	; (80150ac <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	b92b      	cbnz	r3, 80150a4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8015098:	4b05      	ldr	r3, [pc, #20]	; (80150b0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801509a:	21b8      	movs	r1, #184	; 0xb8
 801509c:	4a05      	ldr	r2, [pc, #20]	; (80150b4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801509e:	4806      	ldr	r0, [pc, #24]	; (80150b8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80150a0:	f010 fba4 	bl	80257ec <__assert_func>
 80150a4:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 80150a8:	bd08      	pop	{r3, pc}
 80150aa:	bf00      	nop
 80150ac:	2000bc5c 	.word	0x2000bc5c
 80150b0:	08027c8c 	.word	0x08027c8c
 80150b4:	08027dd0 	.word	0x08027dd0
 80150b8:	08027cc8 	.word	0x08027cc8

080150bc <_ZN8touchgfx13ImageProgressC1Ev>:
 80150bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80150c0:	4604      	mov	r4, r0
 80150c2:	f7ff ffa1 	bl	8015008 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80150c6:	4b31      	ldr	r3, [pc, #196]	; (801518c <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 80150c8:	a902      	add	r1, sp, #8
 80150ca:	4626      	mov	r6, r4
 80150cc:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 80150d0:	2500      	movs	r5, #0
 80150d2:	4a2f      	ldr	r2, [pc, #188]	; (8015190 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 80150d4:	f846 3b90 	str.w	r3, [r6], #144
 80150d8:	2701      	movs	r7, #1
 80150da:	4b2e      	ldr	r3, [pc, #184]	; (8015194 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 80150dc:	4640      	mov	r0, r8
 80150de:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80150e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80150e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150ea:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 80150ee:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80150f2:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80150f6:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80150fa:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80150fe:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8015102:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8015106:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 801510a:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801510e:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8015112:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015116:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 801511a:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801511e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8015122:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8015126:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 801512a:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801512e:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8015132:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8015136:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 801513a:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801513e:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8015142:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8015146:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 801514a:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801514e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015152:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8015156:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801515a:	f002 fb6f 	bl	801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801515e:	4b0e      	ldr	r3, [pc, #56]	; (8015198 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8015160:	4641      	mov	r1, r8
 8015162:	4630      	mov	r0, r6
 8015164:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8015168:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801516c:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8015170:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8015174:	f000 fa74 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801517c:	4631      	mov	r1, r6
 801517e:	f000 fa6f 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015182:	4620      	mov	r0, r4
 8015184:	b002      	add	sp, #8
 8015186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801518a:	bf00      	nop
 801518c:	08027cf8 	.word	0x08027cf8
 8015190:	08028f14 	.word	0x08028f14
 8015194:	08028074 	.word	0x08028074
 8015198:	08028e14 	.word	0x08028e14

0801519c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801519c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80151a0:	4617      	mov	r7, r2
 80151a2:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80151a6:	2200      	movs	r2, #0
 80151a8:	4604      	mov	r4, r0
 80151aa:	460e      	mov	r6, r1
 80151ac:	4698      	mov	r8, r3
 80151ae:	4611      	mov	r1, r2
 80151b0:	9500      	str	r5, [sp, #0]
 80151b2:	3090      	adds	r0, #144	; 0x90
 80151b4:	f7fb f91c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80151b8:	4643      	mov	r3, r8
 80151ba:	463a      	mov	r2, r7
 80151bc:	4631      	mov	r1, r6
 80151be:	4620      	mov	r0, r4
 80151c0:	9508      	str	r5, [sp, #32]
 80151c2:	b002      	add	sp, #8
 80151c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151c8:	f000 b8aa 	b.w	8015320 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080151cc <_ZN8touchgfx13ImageProgress8setValueEi>:
 80151cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151ce:	4604      	mov	r4, r0
 80151d0:	f000 f8f0 	bl	80153b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80151d4:	f104 0790 	add.w	r7, r4, #144	; 0x90
 80151d8:	4638      	mov	r0, r7
 80151da:	f004 fc9d 	bl	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
 80151de:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80151e2:	4620      	mov	r0, r4
 80151e4:	2b01      	cmp	r3, #1
 80151e6:	bf94      	ite	ls
 80151e8:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80151ec:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80151f0:	f000 f93a 	bl	8015468 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80151f4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80151f8:	4606      	mov	r6, r0
 80151fa:	b205      	sxth	r5, r0
 80151fc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015200:	2a00      	cmp	r2, #0
 8015202:	d056      	beq.n	80152b2 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8015204:	2b03      	cmp	r3, #3
 8015206:	d82c      	bhi.n	8015262 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015208:	e8df f003 	tbb	[pc, r3]
 801520c:	3d311202 	.word	0x3d311202
 8015210:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015214:	2200      	movs	r2, #0
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	4611      	mov	r1, r2
 801521a:	462b      	mov	r3, r5
 801521c:	4638      	mov	r0, r7
 801521e:	f7fb f8e7 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015222:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015226:	9300      	str	r3, [sp, #0]
 8015228:	462b      	mov	r3, r5
 801522a:	2200      	movs	r2, #0
 801522c:	4611      	mov	r1, r2
 801522e:	e014      	b.n	801525a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015230:	8921      	ldrh	r1, [r4, #8]
 8015232:	2200      	movs	r2, #0
 8015234:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015238:	1a09      	subs	r1, r1, r0
 801523a:	4638      	mov	r0, r7
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	462b      	mov	r3, r5
 8015240:	b209      	sxth	r1, r1
 8015242:	f7fb f8d5 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015246:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801524a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801524e:	4249      	negs	r1, r1
 8015250:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8015254:	9200      	str	r2, [sp, #0]
 8015256:	b209      	sxth	r1, r1
 8015258:	2200      	movs	r2, #0
 801525a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801525e:	f7fb f8c7 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015262:	4638      	mov	r0, r7
 8015264:	b003      	add	sp, #12
 8015266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801526a:	f004 bc55 	b.w	8019b18 <_ZNK8touchgfx8Drawable10invalidateEv>
 801526e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015272:	2200      	movs	r2, #0
 8015274:	9500      	str	r5, [sp, #0]
 8015276:	2100      	movs	r1, #0
 8015278:	4638      	mov	r0, r7
 801527a:	f7fb f8b9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801527e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015282:	9500      	str	r5, [sp, #0]
 8015284:	e7d1      	b.n	801522a <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8015286:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801528a:	2100      	movs	r1, #0
 801528c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015290:	1a12      	subs	r2, r2, r0
 8015292:	9500      	str	r5, [sp, #0]
 8015294:	4638      	mov	r0, r7
 8015296:	b212      	sxth	r2, r2
 8015298:	f7fb f8aa 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801529c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 80152a0:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 80152a4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152a8:	4252      	negs	r2, r2
 80152aa:	9100      	str	r1, [sp, #0]
 80152ac:	b212      	sxth	r2, r2
 80152ae:	2100      	movs	r1, #0
 80152b0:	e7d3      	b.n	801525a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80152b2:	2b03      	cmp	r3, #3
 80152b4:	d8d5      	bhi.n	8015262 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80152b6:	e8df f003 	tbb	[pc, r3]
 80152ba:	1102      	.short	0x1102
 80152bc:	2a1b      	.short	0x2a1b
 80152be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80152c2:	2200      	movs	r2, #0
 80152c4:	4638      	mov	r0, r7
 80152c6:	4611      	mov	r1, r2
 80152c8:	9300      	str	r3, [sp, #0]
 80152ca:	462b      	mov	r3, r5
 80152cc:	f7fb f890 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80152d0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152d4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80152d8:	1af1      	subs	r1, r6, r3
 80152da:	e7bb      	b.n	8015254 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 80152dc:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80152e0:	2200      	movs	r2, #0
 80152e2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80152e6:	1a09      	subs	r1, r1, r0
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	462b      	mov	r3, r5
 80152ec:	b209      	sxth	r1, r1
 80152ee:	e795      	b.n	801521c <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 80152f0:	2200      	movs	r2, #0
 80152f2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152f6:	4638      	mov	r0, r7
 80152f8:	9500      	str	r5, [sp, #0]
 80152fa:	4611      	mov	r1, r2
 80152fc:	f7fb f878 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015300:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8015304:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015308:	1a32      	subs	r2, r6, r0
 801530a:	9000      	str	r0, [sp, #0]
 801530c:	e7ce      	b.n	80152ac <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801530e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015312:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015316:	1a12      	subs	r2, r2, r0
 8015318:	9500      	str	r5, [sp, #0]
 801531a:	b212      	sxth	r2, r2
 801531c:	e7ab      	b.n	8015276 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801531e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801531e:	4770      	bx	lr

08015320 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015324:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8015328:	4604      	mov	r4, r0
 801532a:	460e      	mov	r6, r1
 801532c:	4698      	mov	r8, r3
 801532e:	9700      	str	r7, [sp, #0]
 8015330:	3058      	adds	r0, #88	; 0x58
 8015332:	4615      	mov	r5, r2
 8015334:	f7fb f85c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015338:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801533c:	eb06 0308 	add.w	r3, r6, r8
 8015340:	429a      	cmp	r2, r3
 8015342:	eb05 0207 	add.w	r2, r5, r7
 8015346:	bfb8      	it	lt
 8015348:	8123      	strhlt	r3, [r4, #8]
 801534a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801534e:	4293      	cmp	r3, r2
 8015350:	bfb8      	it	lt
 8015352:	8162      	strhlt	r2, [r4, #10]
 8015354:	b002      	add	sp, #8
 8015356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801535a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801535a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801535e:	4770      	bx	lr

08015360 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015360:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8015364:	4770      	bx	lr

08015366 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8015366:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801536a:	4770      	bx	lr

0801536c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801536c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015370:	4770      	bx	lr

08015372 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8015372:	b510      	push	{r4, lr}
 8015374:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015378:	800c      	strh	r4, [r1, #0]
 801537a:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801537e:	8011      	strh	r1, [r2, #0]
 8015380:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015384:	801a      	strh	r2, [r3, #0]
 8015386:	9b02      	ldr	r3, [sp, #8]
 8015388:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801538c:	801a      	strh	r2, [r3, #0]
 801538e:	bd10      	pop	{r4, pc}

08015390 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015390:	b510      	push	{r4, lr}
 8015392:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015396:	800c      	strh	r4, [r1, #0]
 8015398:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801539c:	8011      	strh	r1, [r2, #0]
 801539e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80153a2:	801a      	strh	r2, [r3, #0]
 80153a4:	bd10      	pop	{r4, pc}

080153a6 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80153a6:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80153aa:	800b      	strh	r3, [r1, #0]
 80153ac:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80153b0:	8013      	strh	r3, [r2, #0]
 80153b2:	4770      	bx	lr

080153b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80153b4:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80153b8:	4299      	cmp	r1, r3
 80153ba:	bfb8      	it	lt
 80153bc:	4619      	movlt	r1, r3
 80153be:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80153c2:	4299      	cmp	r1, r3
 80153c4:	bfa8      	it	ge
 80153c6:	4619      	movge	r1, r3
 80153c8:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 80153cc:	4770      	bx	lr

080153ce <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80153ce:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 80153d2:	4770      	bx	lr

080153d4 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80153d4:	b510      	push	{r4, lr}
 80153d6:	4604      	mov	r4, r0
 80153d8:	2190      	movs	r1, #144	; 0x90
 80153da:	f010 f9dc 	bl	8025796 <_ZdlPvj>
 80153de:	4620      	mov	r0, r4
 80153e0:	bd10      	pop	{r4, pc}

080153e2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80153e2:	b510      	push	{r4, lr}
 80153e4:	4604      	mov	r4, r0
 80153e6:	302c      	adds	r0, #44	; 0x2c
 80153e8:	f002 fa28 	bl	801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80153ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80153ee:	8123      	strh	r3, [r4, #8]
 80153f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80153f2:	8163      	strh	r3, [r4, #10]
 80153f4:	bd10      	pop	{r4, pc}
	...

080153f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 80153f8:	4291      	cmp	r1, r2
 80153fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fe:	4604      	mov	r4, r0
 8015400:	460e      	mov	r6, r1
 8015402:	4615      	mov	r5, r2
 8015404:	4698      	mov	r8, r3
 8015406:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801540a:	db05      	blt.n	8015418 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801540c:	4b12      	ldr	r3, [pc, #72]	; (8015458 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801540e:	214d      	movs	r1, #77	; 0x4d
 8015410:	4a12      	ldr	r2, [pc, #72]	; (801545c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015412:	4813      	ldr	r0, [pc, #76]	; (8015460 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015414:	f010 f9ea 	bl	80257ec <__assert_func>
 8015418:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801541c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8015420:	6803      	ldr	r3, [r0, #0]
 8015422:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8015426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801542a:	4798      	blx	r3
 801542c:	f1b8 0f00 	cmp.w	r8, #0
 8015430:	d10c      	bne.n	801544c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8015432:	1bad      	subs	r5, r5, r6
 8015434:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8015438:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801543c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8015440:	42bb      	cmp	r3, r7
 8015442:	d806      	bhi.n	8015452 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8015444:	4b07      	ldr	r3, [pc, #28]	; (8015464 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8015446:	215a      	movs	r1, #90	; 0x5a
 8015448:	4a04      	ldr	r2, [pc, #16]	; (801545c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801544a:	e7e2      	b.n	8015412 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801544c:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8015450:	e7f2      	b.n	8015438 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8015452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015456:	bf00      	nop
 8015458:	08027e03 	.word	0x08027e03
 801545c:	08027f40 	.word	0x08027f40
 8015460:	08027e0d 	.word	0x08027e0d
 8015464:	08027e64 	.word	0x08027e64

08015468 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801546a:	4604      	mov	r4, r0
 801546c:	460d      	mov	r5, r1
 801546e:	b1b9      	cbz	r1, 80154a0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8015470:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8015474:	ab01      	add	r3, sp, #4
 8015476:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801547a:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801547e:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8015482:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8015486:	1a12      	subs	r2, r2, r0
 8015488:	1b89      	subs	r1, r1, r6
 801548a:	1a38      	subs	r0, r7, r0
 801548c:	f004 fc85 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 8015490:	4629      	mov	r1, r5
 8015492:	ab01      	add	r3, sp, #4
 8015494:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015498:	4430      	add	r0, r6
 801549a:	f004 fc7e 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 801549e:	b285      	uxth	r5, r0
 80154a0:	4628      	mov	r0, r5
 80154a2:	b003      	add	sp, #12
 80154a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080154a8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80154a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80154ac:	4604      	mov	r4, r0
 80154ae:	2600      	movs	r6, #0
 80154b0:	f7fa ff50 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 80154b4:	4b1b      	ldr	r3, [pc, #108]	; (8015524 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 80154b6:	4625      	mov	r5, r4
 80154b8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80154bc:	af02      	add	r7, sp, #8
 80154be:	62a6      	str	r6, [r4, #40]	; 0x28
 80154c0:	f845 3b2c 	str.w	r3, [r5], #44
 80154c4:	4628      	mov	r0, r5
 80154c6:	f827 8d04 	strh.w	r8, [r7, #-4]!
 80154ca:	f7fa ff43 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 80154ce:	4b16      	ldr	r3, [pc, #88]	; (8015528 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 80154d0:	4639      	mov	r1, r7
 80154d2:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80154d6:	4628      	mov	r0, r5
 80154d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154da:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 80154de:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 80154e2:	f002 f9ab 	bl	801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154e6:	4638      	mov	r0, r7
 80154e8:	f7fa ff34 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 80154ec:	4b0f      	ldr	r3, [pc, #60]	; (801552c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 80154ee:	4632      	mov	r2, r6
 80154f0:	4631      	mov	r1, r6
 80154f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80154f4:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80154f8:	4628      	mov	r0, r5
 80154fa:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80154fe:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015502:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015506:	f7fa ffbe 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
 801550a:	4629      	mov	r1, r5
 801550c:	4620      	mov	r0, r4
 801550e:	f000 f8a7 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015512:	4620      	mov	r0, r4
 8015514:	4639      	mov	r1, r7
 8015516:	f000 f8a3 	bl	8015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801551a:	4620      	mov	r0, r4
 801551c:	b002      	add	sp, #8
 801551e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015522:	bf00      	nop
 8015524:	08027e88 	.word	0x08027e88
 8015528:	08028f14 	.word	0x08028f14
 801552c:	08028074 	.word	0x08028074

08015530 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015530:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015532:	2000      	movs	r0, #0
 8015534:	b12b      	cbz	r3, 8015542 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015536:	b920      	cbnz	r0, 8015542 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015538:	1a5a      	subs	r2, r3, r1
 801553a:	699b      	ldr	r3, [r3, #24]
 801553c:	4250      	negs	r0, r2
 801553e:	4150      	adcs	r0, r2
 8015540:	e7f8      	b.n	8015534 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015542:	4770      	bx	lr

08015544 <_ZN8touchgfx9Container9removeAllEv>:
 8015544:	2200      	movs	r2, #0
 8015546:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015548:	b123      	cbz	r3, 8015554 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801554a:	6999      	ldr	r1, [r3, #24]
 801554c:	6281      	str	r1, [r0, #40]	; 0x28
 801554e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015552:	e7f8      	b.n	8015546 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015554:	4770      	bx	lr

08015556 <_ZN8touchgfx9Container6unlinkEv>:
 8015556:	2300      	movs	r3, #0
 8015558:	6283      	str	r3, [r0, #40]	; 0x28
 801555a:	4770      	bx	lr

0801555c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	461f      	mov	r7, r3
 8015562:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015566:	460d      	mov	r5, r1
 8015568:	4616      	mov	r6, r2
 801556a:	b103      	cbz	r3, 801556e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801556c:	6038      	str	r0, [r7, #0]
 801556e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015570:	b314      	cbz	r4, 80155b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015572:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015576:	b1eb      	cbz	r3, 80155b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015578:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801557c:	428d      	cmp	r5, r1
 801557e:	db19      	blt.n	80155b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015580:	b289      	uxth	r1, r1
 8015582:	8923      	ldrh	r3, [r4, #8]
 8015584:	440b      	add	r3, r1
 8015586:	b21b      	sxth	r3, r3
 8015588:	429d      	cmp	r5, r3
 801558a:	da13      	bge.n	80155b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801558c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015590:	4296      	cmp	r6, r2
 8015592:	db0f      	blt.n	80155b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015594:	b292      	uxth	r2, r2
 8015596:	8963      	ldrh	r3, [r4, #10]
 8015598:	4413      	add	r3, r2
 801559a:	b21b      	sxth	r3, r3
 801559c:	429e      	cmp	r6, r3
 801559e:	da09      	bge.n	80155b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80155a0:	6823      	ldr	r3, [r4, #0]
 80155a2:	1ab2      	subs	r2, r6, r2
 80155a4:	1a69      	subs	r1, r5, r1
 80155a6:	4620      	mov	r0, r4
 80155a8:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80155ac:	b212      	sxth	r2, r2
 80155ae:	463b      	mov	r3, r7
 80155b0:	b209      	sxth	r1, r1
 80155b2:	47c0      	blx	r8
 80155b4:	69a4      	ldr	r4, [r4, #24]
 80155b6:	e7db      	b.n	8015570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80155b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155bc <_ZNK8touchgfx9Container12getSolidRectEv>:
 80155bc:	2200      	movs	r2, #0
 80155be:	8002      	strh	r2, [r0, #0]
 80155c0:	8042      	strh	r2, [r0, #2]
 80155c2:	8082      	strh	r2, [r0, #4]
 80155c4:	80c2      	strh	r2, [r0, #6]
 80155c6:	4770      	bx	lr

080155c8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	460d      	mov	r5, r1
 80155cc:	4616      	mov	r6, r2
 80155ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155d0:	b13c      	cbz	r4, 80155e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80155d2:	6823      	ldr	r3, [r4, #0]
 80155d4:	4620      	mov	r0, r4
 80155d6:	4632      	mov	r2, r6
 80155d8:	4629      	mov	r1, r5
 80155da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155dc:	4798      	blx	r3
 80155de:	69a4      	ldr	r4, [r4, #24]
 80155e0:	e7f6      	b.n	80155d0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80155e2:	bd70      	pop	{r4, r5, r6, pc}

080155e4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80155e4:	b538      	push	{r3, r4, r5, lr}
 80155e6:	460d      	mov	r5, r1
 80155e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155ea:	b134      	cbz	r4, 80155fa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80155ec:	682b      	ldr	r3, [r5, #0]
 80155ee:	4621      	mov	r1, r4
 80155f0:	4628      	mov	r0, r5
 80155f2:	689b      	ldr	r3, [r3, #8]
 80155f4:	4798      	blx	r3
 80155f6:	69a4      	ldr	r4, [r4, #24]
 80155f8:	e7f7      	b.n	80155ea <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80155fa:	bd38      	pop	{r3, r4, r5, pc}

080155fc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80155fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155fe:	b19b      	cbz	r3, 8015628 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015600:	428b      	cmp	r3, r1
 8015602:	d109      	bne.n	8015618 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015604:	699a      	ldr	r2, [r3, #24]
 8015606:	2100      	movs	r1, #0
 8015608:	6159      	str	r1, [r3, #20]
 801560a:	6282      	str	r2, [r0, #40]	; 0x28
 801560c:	b902      	cbnz	r2, 8015610 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801560e:	4770      	bx	lr
 8015610:	6199      	str	r1, [r3, #24]
 8015612:	4770      	bx	lr
 8015614:	4613      	mov	r3, r2
 8015616:	b13a      	cbz	r2, 8015628 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015618:	699a      	ldr	r2, [r3, #24]
 801561a:	428a      	cmp	r2, r1
 801561c:	d1fa      	bne.n	8015614 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801561e:	698a      	ldr	r2, [r1, #24]
 8015620:	619a      	str	r2, [r3, #24]
 8015622:	2300      	movs	r3, #0
 8015624:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015628:	4770      	bx	lr

0801562a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801562a:	b410      	push	{r4}
 801562c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801562e:	4604      	mov	r4, r0
 8015630:	b92b      	cbnz	r3, 801563e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	4611      	mov	r1, r2
 8015636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801563c:	4718      	bx	r3
 801563e:	b941      	cbnz	r1, 8015652 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015640:	6193      	str	r3, [r2, #24]
 8015642:	6282      	str	r2, [r0, #40]	; 0x28
 8015644:	6154      	str	r4, [r2, #20]
 8015646:	f85d 4b04 	ldr.w	r4, [sp], #4
 801564a:	4770      	bx	lr
 801564c:	4603      	mov	r3, r0
 801564e:	2800      	cmp	r0, #0
 8015650:	d0f9      	beq.n	8015646 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015652:	4299      	cmp	r1, r3
 8015654:	6998      	ldr	r0, [r3, #24]
 8015656:	d1f9      	bne.n	801564c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015658:	6190      	str	r0, [r2, #24]
 801565a:	618a      	str	r2, [r1, #24]
 801565c:	e7f2      	b.n	8015644 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015660 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015660:	4288      	cmp	r0, r1
 8015662:	b508      	push	{r3, lr}
 8015664:	d105      	bne.n	8015672 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015666:	4b11      	ldr	r3, [pc, #68]	; (80156ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015668:	2123      	movs	r1, #35	; 0x23
 801566a:	4a11      	ldr	r2, [pc, #68]	; (80156b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801566c:	4811      	ldr	r0, [pc, #68]	; (80156b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801566e:	f010 f8bd 	bl	80257ec <__assert_func>
 8015672:	694b      	ldr	r3, [r1, #20]
 8015674:	b11b      	cbz	r3, 801567e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015676:	4b10      	ldr	r3, [pc, #64]	; (80156b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015678:	2124      	movs	r1, #36	; 0x24
 801567a:	4a0d      	ldr	r2, [pc, #52]	; (80156b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801567c:	e7f6      	b.n	801566c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801567e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015682:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015684:	b913      	cbnz	r3, 801568c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015686:	6281      	str	r1, [r0, #40]	; 0x28
 8015688:	bd08      	pop	{r3, pc}
 801568a:	4613      	mov	r3, r2
 801568c:	699a      	ldr	r2, [r3, #24]
 801568e:	b12a      	cbz	r2, 801569c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015690:	428b      	cmp	r3, r1
 8015692:	d1fa      	bne.n	801568a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015694:	4b09      	ldr	r3, [pc, #36]	; (80156bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015696:	2135      	movs	r1, #53	; 0x35
 8015698:	4a05      	ldr	r2, [pc, #20]	; (80156b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801569a:	e7e7      	b.n	801566c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801569c:	428b      	cmp	r3, r1
 801569e:	d103      	bne.n	80156a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80156a0:	4b06      	ldr	r3, [pc, #24]	; (80156bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80156a2:	2138      	movs	r1, #56	; 0x38
 80156a4:	4a02      	ldr	r2, [pc, #8]	; (80156b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80156a6:	e7e1      	b.n	801566c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80156a8:	6199      	str	r1, [r3, #24]
 80156aa:	e7ed      	b.n	8015688 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80156ac:	08027fa1 	.word	0x08027fa1
 80156b0:	080280f8 	.word	0x080280f8
 80156b4:	08027fcd 	.word	0x08027fcd
 80156b8:	08028000 	.word	0x08028000
 80156bc:	08028036 	.word	0x08028036

080156c0 <_ZN8touchgfx4RectaNERKS0_>:
 80156c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156c4:	888b      	ldrh	r3, [r1, #4]
 80156c6:	f9b1 9000 	ldrsh.w	r9, [r1]
 80156ca:	f9b0 a000 	ldrsh.w	sl, [r0]
 80156ce:	444b      	add	r3, r9
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	fa0f f883 	sxth.w	r8, r3
 80156d6:	45c2      	cmp	sl, r8
 80156d8:	da30      	bge.n	801573c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156da:	8882      	ldrh	r2, [r0, #4]
 80156dc:	4452      	add	r2, sl
 80156de:	b292      	uxth	r2, r2
 80156e0:	fa0f fe82 	sxth.w	lr, r2
 80156e4:	45f1      	cmp	r9, lr
 80156e6:	da29      	bge.n	801573c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156e8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80156ec:	88cc      	ldrh	r4, [r1, #6]
 80156ee:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80156f2:	442c      	add	r4, r5
 80156f4:	b224      	sxth	r4, r4
 80156f6:	42a6      	cmp	r6, r4
 80156f8:	da20      	bge.n	801573c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156fa:	88c7      	ldrh	r7, [r0, #6]
 80156fc:	4437      	add	r7, r6
 80156fe:	b2bf      	uxth	r7, r7
 8015700:	fa0f fc87 	sxth.w	ip, r7
 8015704:	4565      	cmp	r5, ip
 8015706:	da19      	bge.n	801573c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015708:	45ca      	cmp	sl, r9
 801570a:	4654      	mov	r4, sl
 801570c:	bfb8      	it	lt
 801570e:	464c      	movlt	r4, r9
 8015710:	42b5      	cmp	r5, r6
 8015712:	bfb8      	it	lt
 8015714:	4635      	movlt	r5, r6
 8015716:	45f0      	cmp	r8, lr
 8015718:	bfc8      	it	gt
 801571a:	4613      	movgt	r3, r2
 801571c:	1b1b      	subs	r3, r3, r4
 801571e:	8083      	strh	r3, [r0, #4]
 8015720:	88ca      	ldrh	r2, [r1, #6]
 8015722:	884b      	ldrh	r3, [r1, #2]
 8015724:	8004      	strh	r4, [r0, #0]
 8015726:	4413      	add	r3, r2
 8015728:	8045      	strh	r5, [r0, #2]
 801572a:	b29b      	uxth	r3, r3
 801572c:	b21a      	sxth	r2, r3
 801572e:	4594      	cmp	ip, r2
 8015730:	bfb8      	it	lt
 8015732:	463b      	movlt	r3, r7
 8015734:	1b5b      	subs	r3, r3, r5
 8015736:	80c3      	strh	r3, [r0, #6]
 8015738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801573c:	2300      	movs	r3, #0
 801573e:	8003      	strh	r3, [r0, #0]
 8015740:	8043      	strh	r3, [r0, #2]
 8015742:	8083      	strh	r3, [r0, #4]
 8015744:	80c3      	strh	r3, [r0, #6]
 8015746:	e7f7      	b.n	8015738 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015748 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015748:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801574c:	b12b      	cbz	r3, 801575a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801574e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015752:	fab0 f080 	clz	r0, r0
 8015756:	0940      	lsrs	r0, r0, #5
 8015758:	4770      	bx	lr
 801575a:	2001      	movs	r0, #1
 801575c:	4770      	bx	lr

0801575e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801575e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015762:	2300      	movs	r3, #0
 8015764:	4604      	mov	r4, r0
 8015766:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015768:	8003      	strh	r3, [r0, #0]
 801576a:	8043      	strh	r3, [r0, #2]
 801576c:	8083      	strh	r3, [r0, #4]
 801576e:	80c3      	strh	r3, [r0, #6]
 8015770:	2d00      	cmp	r5, #0
 8015772:	d040      	beq.n	80157f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015774:	1d28      	adds	r0, r5, #4
 8015776:	f7ff ffe7 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 801577a:	b988      	cbnz	r0, 80157a0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801577c:	4620      	mov	r0, r4
 801577e:	f7ff ffe3 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015782:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015786:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801578a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801578e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015792:	b138      	cbz	r0, 80157a4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015794:	8022      	strh	r2, [r4, #0]
 8015796:	8063      	strh	r3, [r4, #2]
 8015798:	f8a4 e004 	strh.w	lr, [r4, #4]
 801579c:	f8a4 c006 	strh.w	ip, [r4, #6]
 80157a0:	69ad      	ldr	r5, [r5, #24]
 80157a2:	e7e5      	b.n	8015770 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80157a4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80157a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80157ac:	4290      	cmp	r0, r2
 80157ae:	4607      	mov	r7, r0
 80157b0:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80157b4:	460e      	mov	r6, r1
 80157b6:	bfa8      	it	ge
 80157b8:	4617      	movge	r7, r2
 80157ba:	4299      	cmp	r1, r3
 80157bc:	4472      	add	r2, lr
 80157be:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80157c2:	bfa8      	it	ge
 80157c4:	461e      	movge	r6, r3
 80157c6:	4440      	add	r0, r8
 80157c8:	4471      	add	r1, lr
 80157ca:	4463      	add	r3, ip
 80157cc:	b200      	sxth	r0, r0
 80157ce:	8027      	strh	r7, [r4, #0]
 80157d0:	b212      	sxth	r2, r2
 80157d2:	8066      	strh	r6, [r4, #2]
 80157d4:	b209      	sxth	r1, r1
 80157d6:	b21b      	sxth	r3, r3
 80157d8:	4290      	cmp	r0, r2
 80157da:	bfac      	ite	ge
 80157dc:	ebc7 0200 	rsbge	r2, r7, r0
 80157e0:	ebc7 0202 	rsblt	r2, r7, r2
 80157e4:	4299      	cmp	r1, r3
 80157e6:	bfac      	ite	ge
 80157e8:	ebc6 0301 	rsbge	r3, r6, r1
 80157ec:	ebc6 0303 	rsblt	r3, r6, r3
 80157f0:	80a2      	strh	r2, [r4, #4]
 80157f2:	80e3      	strh	r3, [r4, #6]
 80157f4:	e7d4      	b.n	80157a0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80157f6:	4620      	mov	r0, r4
 80157f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157fc <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80157fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015800:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015804:	b383      	cbz	r3, 8015868 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015806:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015808:	b374      	cbz	r4, 8015868 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801580a:	f9b1 5000 	ldrsh.w	r5, [r1]
 801580e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015812:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015816:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801581a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801581e:	b303      	cbz	r3, 8015862 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015820:	4668      	mov	r0, sp
 8015822:	1d21      	adds	r1, r4, #4
 8015824:	f8ad 5000 	strh.w	r5, [sp]
 8015828:	f8ad 6002 	strh.w	r6, [sp, #2]
 801582c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015830:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015834:	f7ff ff44 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 8015838:	4668      	mov	r0, sp
 801583a:	f7ff ff85 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 801583e:	b980      	cbnz	r0, 8015862 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015840:	f8bd 3000 	ldrh.w	r3, [sp]
 8015844:	4669      	mov	r1, sp
 8015846:	88a2      	ldrh	r2, [r4, #4]
 8015848:	4620      	mov	r0, r4
 801584a:	1a9b      	subs	r3, r3, r2
 801584c:	88e2      	ldrh	r2, [r4, #6]
 801584e:	f8ad 3000 	strh.w	r3, [sp]
 8015852:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015856:	1a9b      	subs	r3, r3, r2
 8015858:	f8ad 3002 	strh.w	r3, [sp, #2]
 801585c:	6823      	ldr	r3, [r4, #0]
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	4798      	blx	r3
 8015862:	69a4      	ldr	r4, [r4, #24]
 8015864:	2c00      	cmp	r4, #0
 8015866:	d1d8      	bne.n	801581a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015868:	b002      	add	sp, #8
 801586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801586e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801586e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015870:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015874:	460d      	mov	r5, r1
 8015876:	4616      	mov	r6, r2
 8015878:	b323      	cbz	r3, 80158c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801587a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801587c:	b314      	cbz	r4, 80158c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801587e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015882:	b1eb      	cbz	r3, 80158c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015884:	6828      	ldr	r0, [r5, #0]
 8015886:	466b      	mov	r3, sp
 8015888:	6869      	ldr	r1, [r5, #4]
 801588a:	c303      	stmia	r3!, {r0, r1}
 801588c:	4668      	mov	r0, sp
 801588e:	1d21      	adds	r1, r4, #4
 8015890:	f7ff ff16 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 8015894:	4668      	mov	r0, sp
 8015896:	f7ff ff57 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 801589a:	b988      	cbnz	r0, 80158c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801589c:	f8bd 3000 	ldrh.w	r3, [sp]
 80158a0:	4669      	mov	r1, sp
 80158a2:	88a2      	ldrh	r2, [r4, #4]
 80158a4:	4620      	mov	r0, r4
 80158a6:	1a9b      	subs	r3, r3, r2
 80158a8:	88e2      	ldrh	r2, [r4, #6]
 80158aa:	f8ad 3000 	strh.w	r3, [sp]
 80158ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80158b2:	1a9b      	subs	r3, r3, r2
 80158b4:	4632      	mov	r2, r6
 80158b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158be:	4798      	blx	r3
 80158c0:	69a4      	ldr	r4, [r4, #24]
 80158c2:	e7db      	b.n	801587c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80158c4:	b002      	add	sp, #8
 80158c6:	bd70      	pop	{r4, r5, r6, pc}

080158c8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80158c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158cc:	4770      	bx	lr

080158ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80158ce:	6803      	ldr	r3, [r0, #0]
 80158d0:	b513      	push	{r0, r1, r4, lr}
 80158d2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80158d6:	2300      	movs	r3, #0
 80158d8:	e9cd 3300 	strd	r3, r3, [sp]
 80158dc:	466b      	mov	r3, sp
 80158de:	47a0      	blx	r4
 80158e0:	b002      	add	sp, #8
 80158e2:	bd10      	pop	{r4, pc}

080158e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80158e4:	2301      	movs	r3, #1
 80158e6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158ea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158ee:	4770      	bx	lr

080158f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80158f0:	2301      	movs	r3, #1
 80158f2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158f6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158fa:	4770      	bx	lr

080158fc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80158fc:	6843      	ldr	r3, [r0, #4]
 80158fe:	2201      	movs	r2, #1
 8015900:	725a      	strb	r2, [r3, #9]
 8015902:	6840      	ldr	r0, [r0, #4]
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	691b      	ldr	r3, [r3, #16]
 8015908:	4718      	bx	r3

0801590a <_ZN8touchgfx3HAL8flushDMAEv>:
 801590a:	6840      	ldr	r0, [r0, #4]
 801590c:	6803      	ldr	r3, [r0, #0]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	4718      	bx	r3
	...

08015914 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015914:	4b04      	ldr	r3, [pc, #16]	; (8015928 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	b123      	cbz	r3, 8015924 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801591a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801591e:	f080 0001 	eor.w	r0, r0, #1
 8015922:	4770      	bx	lr
 8015924:	2001      	movs	r0, #1
 8015926:	4770      	bx	lr
 8015928:	2000bb92 	.word	0x2000bb92

0801592c <_ZN8touchgfx3HAL8endFrameEv>:
 801592c:	b510      	push	{r4, lr}
 801592e:	4604      	mov	r4, r0
 8015930:	6840      	ldr	r0, [r0, #4]
 8015932:	6803      	ldr	r3, [r0, #0]
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	4798      	blx	r3
 8015938:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801593c:	b113      	cbz	r3, 8015944 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801593e:	2301      	movs	r3, #1
 8015940:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015944:	bd10      	pop	{r4, pc}

08015946 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015946:	b508      	push	{r3, lr}
 8015948:	6803      	ldr	r3, [r0, #0]
 801594a:	4604      	mov	r4, r0
 801594c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801594e:	4798      	blx	r3
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015954:	4620      	mov	r0, r4
 8015956:	4798      	blx	r3
 8015958:	f7fd fed4 	bl	8013704 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801595c:	6823      	ldr	r3, [r4, #0]
 801595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015960:	e7f8      	b.n	8015954 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015964 <_ZN8touchgfx3HAL4tickEv>:
 8015964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	4604      	mov	r4, r0
 801596a:	4d5c      	ldr	r5, [pc, #368]	; (8015adc <_ZN8touchgfx3HAL4tickEv+0x178>)
 801596c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015970:	4798      	blx	r3
 8015972:	2800      	cmp	r0, #0
 8015974:	f000 8097 	beq.w	8015aa6 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015978:	2001      	movs	r0, #1
 801597a:	2600      	movs	r6, #0
 801597c:	f7fd fba6 	bl	80130cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015980:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015984:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015988:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801598c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015990:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015994:	b133      	cbz	r3, 80159a4 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	4620      	mov	r0, r4
 801599a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801599e:	4798      	blx	r3
 80159a0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80159a4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80159a8:	2601      	movs	r6, #1
 80159aa:	6862      	ldr	r2, [r4, #4]
 80159ac:	f083 0301 	eor.w	r3, r3, #1
 80159b0:	702e      	strb	r6, [r5, #0]
 80159b2:	7253      	strb	r3, [r2, #9]
 80159b4:	f003 fc5a 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 80159b8:	6803      	ldr	r3, [r0, #0]
 80159ba:	4631      	mov	r1, r6
 80159bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159be:	4798      	blx	r3
 80159c0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80159c4:	b90b      	cbnz	r3, 80159ca <_ZN8touchgfx3HAL4tickEv+0x66>
 80159c6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80159ca:	f003 fc4f 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 80159ce:	6803      	ldr	r3, [r0, #0]
 80159d0:	695b      	ldr	r3, [r3, #20]
 80159d2:	4798      	blx	r3
 80159d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159d6:	6803      	ldr	r3, [r0, #0]
 80159d8:	691b      	ldr	r3, [r3, #16]
 80159da:	4798      	blx	r3
 80159dc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80159e0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80159e4:	3b01      	subs	r3, #1
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80159ec:	b10a      	cbz	r2, 80159f2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d1eb      	bne.n	80159ca <_ZN8touchgfx3HAL4tickEv+0x66>
 80159f2:	4a3b      	ldr	r2, [pc, #236]	; (8015ae0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80159f4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80159f8:	7813      	ldrb	r3, [r2, #0]
 80159fa:	3301      	adds	r3, #1
 80159fc:	b25b      	sxtb	r3, r3
 80159fe:	4299      	cmp	r1, r3
 8015a00:	7013      	strb	r3, [r2, #0]
 8015a02:	dc10      	bgt.n	8015a26 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015a04:	2300      	movs	r3, #0
 8015a06:	68e0      	ldr	r0, [r4, #12]
 8015a08:	a902      	add	r1, sp, #8
 8015a0a:	7013      	strb	r3, [r2, #0]
 8015a0c:	aa03      	add	r2, sp, #12
 8015a0e:	6803      	ldr	r3, [r0, #0]
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	4798      	blx	r3
 8015a14:	6823      	ldr	r3, [r4, #0]
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d051      	beq.n	8015abe <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015a1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015a1e:	4620      	mov	r0, r4
 8015a20:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015a24:	4798      	blx	r3
 8015a26:	2300      	movs	r3, #0
 8015a28:	6960      	ldr	r0, [r4, #20]
 8015a2a:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a2e:	b158      	cbz	r0, 8015a48 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a30:	6803      	ldr	r3, [r0, #0]
 8015a32:	f10d 0107 	add.w	r1, sp, #7
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	4798      	blx	r3
 8015a3a:	b128      	cbz	r0, 8015a48 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a3e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015a42:	6803      	ldr	r3, [r0, #0]
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	4798      	blx	r3
 8015a48:	f104 001c 	add.w	r0, r4, #28
 8015a4c:	f00e fa02 	bl	8023e54 <_ZN8touchgfx8Gestures4tickEv>
 8015a50:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015a54:	b30b      	cbz	r3, 8015a9a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a56:	6920      	ldr	r0, [r4, #16]
 8015a58:	6803      	ldr	r3, [r0, #0]
 8015a5a:	691b      	ldr	r3, [r3, #16]
 8015a5c:	4798      	blx	r3
 8015a5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a60:	4606      	mov	r6, r0
 8015a62:	b903      	cbnz	r3, 8015a66 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015a64:	6720      	str	r0, [r4, #112]	; 0x70
 8015a66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a68:	4a1e      	ldr	r2, [pc, #120]	; (8015ae4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015a6a:	1af3      	subs	r3, r6, r3
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d914      	bls.n	8015a9a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a70:	6920      	ldr	r0, [r4, #16]
 8015a72:	6803      	ldr	r3, [r0, #0]
 8015a74:	699b      	ldr	r3, [r3, #24]
 8015a76:	4798      	blx	r3
 8015a78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a7a:	2264      	movs	r2, #100	; 0x64
 8015a7c:	1af3      	subs	r3, r6, r3
 8015a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a82:	fbb0 f0f3 	udiv	r0, r0, r3
 8015a86:	2800      	cmp	r0, #0
 8015a88:	dc1e      	bgt.n	8015ac8 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015a8a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015a8e:	6920      	ldr	r0, [r4, #16]
 8015a90:	2100      	movs	r1, #0
 8015a92:	6803      	ldr	r3, [r0, #0]
 8015a94:	69db      	ldr	r3, [r3, #28]
 8015a96:	4798      	blx	r3
 8015a98:	6726      	str	r6, [r4, #112]	; 0x70
 8015a9a:	f003 fbe7 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 8015a9e:	6803      	ldr	r3, [r0, #0]
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aa4:	4798      	blx	r3
 8015aa6:	6823      	ldr	r3, [r4, #0]
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015aae:	4798      	blx	r3
 8015ab0:	2001      	movs	r0, #1
 8015ab2:	f7fd fb16 	bl	80130e2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	702b      	strb	r3, [r5, #0]
 8015aba:	b004      	add	sp, #16
 8015abc:	bd70      	pop	{r4, r5, r6, pc}
 8015abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	4798      	blx	r3
 8015ac6:	e7ae      	b.n	8015a26 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015ac8:	2863      	cmp	r0, #99	; 0x63
 8015aca:	bfcb      	itete	gt
 8015acc:	2300      	movgt	r3, #0
 8015ace:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015ad2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015ad6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015ada:	e7d8      	b.n	8015a8e <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015adc:	2000bb98 	.word	0x2000bb98
 8015ae0:	2000bb99 	.word	0x2000bb99
 8015ae4:	05f5e100 	.word	0x05f5e100

08015ae8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015ae8:	f7fd bdac 	b.w	8013644 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015aec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015aec:	6581      	str	r1, [r0, #88]	; 0x58
 8015aee:	301c      	adds	r0, #28
 8015af0:	f00e b9ae 	b.w	8023e50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015af4 <_ZN8touchgfx3HAL5touchEll>:
 8015af4:	b530      	push	{r4, r5, lr}
 8015af6:	b087      	sub	sp, #28
 8015af8:	4604      	mov	r4, r0
 8015afa:	a804      	add	r0, sp, #16
 8015afc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015b00:	f003 f9b8 	bl	8018e74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015b04:	9b04      	ldr	r3, [sp, #16]
 8015b06:	a906      	add	r1, sp, #24
 8015b08:	a803      	add	r0, sp, #12
 8015b0a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015b0e:	9b05      	ldr	r3, [sp, #20]
 8015b10:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015b14:	f003 f9fc 	bl	8018f10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015b18:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015b1c:	f104 001c 	add.w	r0, r4, #28
 8015b20:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015b24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015b28:	b189      	cbz	r1, 8015b4e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015b2a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015b2e:	9300      	str	r3, [sp, #0]
 8015b30:	4613      	mov	r3, r2
 8015b32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015b36:	462a      	mov	r2, r5
 8015b38:	f00e f99a 	bl	8023e70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015b3c:	b128      	cbz	r0, 8015b4a <_ZN8touchgfx3HAL5touchEll+0x56>
 8015b3e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015b42:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015b44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015b48:	6623      	str	r3, [r4, #96]	; 0x60
 8015b4a:	b007      	add	sp, #28
 8015b4c:	bd30      	pop	{r4, r5, pc}
 8015b4e:	f00e f9d3 	bl	8023ef8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015b52:	2301      	movs	r3, #1
 8015b54:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015b58:	e7f1      	b.n	8015b3e <_ZN8touchgfx3HAL5touchEll+0x4a>

08015b5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015b5a:	b570      	push	{r4, r5, r6, lr}
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d050      	beq.n	8015c02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b60:	ea81 0002 	eor.w	r0, r1, r2
 8015b64:	07c6      	lsls	r6, r0, #31
 8015b66:	d508      	bpl.n	8015b7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015b68:	3a01      	subs	r2, #1
 8015b6a:	18cc      	adds	r4, r1, r3
 8015b6c:	42a1      	cmp	r1, r4
 8015b6e:	d048      	beq.n	8015c02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b70:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b74:	f801 0b01 	strb.w	r0, [r1], #1
 8015b78:	e7f8      	b.n	8015b6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015b7a:	07d5      	lsls	r5, r2, #31
 8015b7c:	bf42      	ittt	mi
 8015b7e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015b82:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015b86:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d915      	bls.n	8015bba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b8e:	ea82 0001 	eor.w	r0, r2, r1
 8015b92:	0784      	lsls	r4, r0, #30
 8015b94:	d02d      	beq.n	8015bf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015b96:	1e94      	subs	r4, r2, #2
 8015b98:	4608      	mov	r0, r1
 8015b9a:	18ce      	adds	r6, r1, r3
 8015b9c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015ba0:	f820 5b02 	strh.w	r5, [r0], #2
 8015ba4:	1a35      	subs	r5, r6, r0
 8015ba6:	2d01      	cmp	r5, #1
 8015ba8:	d8f8      	bhi.n	8015b9c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015baa:	1e98      	subs	r0, r3, #2
 8015bac:	f003 0301 	and.w	r3, r3, #1
 8015bb0:	f020 0001 	bic.w	r0, r0, #1
 8015bb4:	3002      	adds	r0, #2
 8015bb6:	4401      	add	r1, r0
 8015bb8:	4402      	add	r2, r0
 8015bba:	1f14      	subs	r4, r2, #4
 8015bbc:	4608      	mov	r0, r1
 8015bbe:	18ce      	adds	r6, r1, r3
 8015bc0:	1a35      	subs	r5, r6, r0
 8015bc2:	2d03      	cmp	r5, #3
 8015bc4:	d810      	bhi.n	8015be8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015bc6:	089c      	lsrs	r4, r3, #2
 8015bc8:	00a0      	lsls	r0, r4, #2
 8015bca:	4401      	add	r1, r0
 8015bcc:	3801      	subs	r0, #1
 8015bce:	4402      	add	r2, r0
 8015bd0:	f06f 0003 	mvn.w	r0, #3
 8015bd4:	fb00 3404 	mla	r4, r0, r4, r3
 8015bd8:	440c      	add	r4, r1
 8015bda:	42a1      	cmp	r1, r4
 8015bdc:	d011      	beq.n	8015c02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015bde:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015be2:	f801 3b01 	strb.w	r3, [r1], #1
 8015be6:	e7f8      	b.n	8015bda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015be8:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015bec:	f840 5b04 	str.w	r5, [r0], #4
 8015bf0:	e7e6      	b.n	8015bc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015bf2:	0790      	lsls	r0, r2, #30
 8015bf4:	d0e1      	beq.n	8015bba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015bf6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015bfa:	3b02      	subs	r3, #2
 8015bfc:	f821 0b02 	strh.w	r0, [r1], #2
 8015c00:	e7db      	b.n	8015bba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015c02:	2001      	movs	r0, #1
 8015c04:	bd70      	pop	{r4, r5, r6, pc}

08015c06 <_ZN8touchgfx3HAL7noTouchEv>:
 8015c06:	b510      	push	{r4, lr}
 8015c08:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	b153      	cbz	r3, 8015c26 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015c10:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015c14:	2101      	movs	r1, #1
 8015c16:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015c1a:	301c      	adds	r0, #28
 8015c1c:	f00e f96c 	bl	8023ef8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015c20:	2300      	movs	r3, #0
 8015c22:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015c26:	bd10      	pop	{r4, pc}

08015c28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c2c:	4605      	mov	r5, r0
 8015c2e:	6980      	ldr	r0, [r0, #24]
 8015c30:	b085      	sub	sp, #20
 8015c32:	460f      	mov	r7, r1
 8015c34:	4690      	mov	r8, r2
 8015c36:	4699      	mov	r9, r3
 8015c38:	b930      	cbnz	r0, 8015c48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015c3a:	4b1f      	ldr	r3, [pc, #124]	; (8015cb8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015c3c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015c40:	4a1e      	ldr	r2, [pc, #120]	; (8015cbc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015c42:	481f      	ldr	r0, [pc, #124]	; (8015cc0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015c44:	f00f fdd2 	bl	80257ec <__assert_func>
 8015c48:	ac04      	add	r4, sp, #16
 8015c4a:	2600      	movs	r6, #0
 8015c4c:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015c50:	6806      	ldr	r6, [r0, #0]
 8015c52:	9401      	str	r4, [sp, #4]
 8015c54:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015c58:	9400      	str	r4, [sp, #0]
 8015c5a:	6834      	ldr	r4, [r6, #0]
 8015c5c:	47a0      	blx	r4
 8015c5e:	4c19      	ldr	r4, [pc, #100]	; (8015cc4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015c60:	4606      	mov	r6, r0
 8015c62:	f8a4 9000 	strh.w	r9, [r4]
 8015c66:	f7f9 feff 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8015c6a:	6803      	ldr	r3, [r0, #0]
 8015c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6e:	4798      	blx	r3
 8015c70:	280c      	cmp	r0, #12
 8015c72:	d80f      	bhi.n	8015c94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015c74:	e8df f000 	tbb	[pc, r0]
 8015c78:	1b1b1207 	.word	0x1b1b1207
 8015c7c:	1b1b1b1b 	.word	0x1b1b1b1b
 8015c80:	1b1b1b1b 	.word	0x1b1b1b1b
 8015c84:	1b          	.byte	0x1b
 8015c85:	00          	.byte	0x00
 8015c86:	8823      	ldrh	r3, [r4, #0]
 8015c88:	fb08 7203 	mla	r2, r8, r3, r7
 8015c8c:	9b03      	ldr	r3, [sp, #12]
 8015c8e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015c92:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015c94:	4630      	mov	r0, r6
 8015c96:	b005      	add	sp, #20
 8015c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c9c:	8822      	ldrh	r2, [r4, #0]
 8015c9e:	9b03      	ldr	r3, [sp, #12]
 8015ca0:	fb08 7202 	mla	r2, r8, r2, r7
 8015ca4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015ca8:	1a9a      	subs	r2, r3, r2
 8015caa:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015cac:	e7f2      	b.n	8015c94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015cae:	4b06      	ldr	r3, [pc, #24]	; (8015cc8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015cb0:	f240 114d 	movw	r1, #333	; 0x14d
 8015cb4:	4a01      	ldr	r2, [pc, #4]	; (8015cbc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015cb6:	e7c4      	b.n	8015c42 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015cb8:	080281a1 	.word	0x080281a1
 8015cbc:	080284b2 	.word	0x080284b2
 8015cc0:	080281e6 	.word	0x080281e6
 8015cc4:	2000bb8e 	.word	0x2000bb8e
 8015cc8:	0802820c 	.word	0x0802820c

08015ccc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cd0:	4698      	mov	r8, r3
 8015cd2:	6803      	ldr	r3, [r0, #0]
 8015cd4:	b087      	sub	sp, #28
 8015cd6:	460e      	mov	r6, r1
 8015cd8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015cda:	4617      	mov	r7, r2
 8015cdc:	4b0d      	ldr	r3, [pc, #52]	; (8015d14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015cde:	4604      	mov	r4, r0
 8015ce0:	f8b3 9000 	ldrh.w	r9, [r3]
 8015ce4:	f7f9 fec0 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8015ce8:	6803      	ldr	r3, [r0, #0]
 8015cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cec:	4798      	blx	r3
 8015cee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015cf2:	463a      	mov	r2, r7
 8015cf4:	4631      	mov	r1, r6
 8015cf6:	9302      	str	r3, [sp, #8]
 8015cf8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015cfc:	9301      	str	r3, [sp, #4]
 8015cfe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015d02:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	4620      	mov	r0, r4
 8015d0a:	4643      	mov	r3, r8
 8015d0c:	47a8      	blx	r5
 8015d0e:	b007      	add	sp, #28
 8015d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d14:	2000bb8e 	.word	0x2000bb8e

08015d18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	4606      	mov	r6, r0
 8015d1e:	b089      	sub	sp, #36	; 0x24
 8015d20:	4610      	mov	r0, r2
 8015d22:	460c      	mov	r4, r1
 8015d24:	4691      	mov	r9, r2
 8015d26:	4698      	mov	r8, r3
 8015d28:	f005 ff4e 	bl	801bbc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	f000 8092 	beq.w	8015e56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8015d32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015e70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8015d36:	ad08      	add	r5, sp, #32
 8015d38:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015e74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015d3c:	f8da 0000 	ldr.w	r0, [sl]
 8015d40:	4f4a      	ldr	r7, [pc, #296]	; (8015e6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015d42:	6802      	ldr	r2, [r0, #0]
 8015d44:	6a12      	ldr	r2, [r2, #32]
 8015d46:	4790      	blx	r2
 8015d48:	f8da 0000 	ldr.w	r0, [sl]
 8015d4c:	6802      	ldr	r2, [r0, #0]
 8015d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015d50:	4790      	blx	r2
 8015d52:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d56:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	9300      	str	r3, [sp, #0]
 8015d5e:	883b      	ldrh	r3, [r7, #0]
 8015d60:	9301      	str	r3, [sp, #4]
 8015d62:	f005 fff1 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d66:	f8ab 0000 	strh.w	r0, [fp]
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f006 f826 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d70:	f8da b000 	ldr.w	fp, [sl]
 8015d74:	8038      	strh	r0, [r7, #0]
 8015d76:	4648      	mov	r0, r9
 8015d78:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015d7c:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015d80:	9302      	str	r3, [sp, #8]
 8015d82:	f005 ff21 	bl	801bbc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d86:	f8da 2000 	ldr.w	r2, [sl]
 8015d8a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015d8e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015d90:	4620      	mov	r0, r4
 8015d92:	6822      	ldr	r2, [r4, #0]
 8015d94:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015d98:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015da0:	4611      	mov	r1, r2
 8015da2:	4798      	blx	r3
 8015da4:	2201      	movs	r2, #1
 8015da6:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015daa:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015dae:	1d22      	adds	r2, r4, #4
 8015db0:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015db4:	2900      	cmp	r1, #0
 8015db6:	d051      	beq.n	8015e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015db8:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015dbc:	2900      	cmp	r1, #0
 8015dbe:	d04d      	beq.n	8015e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015dc0:	6810      	ldr	r0, [r2, #0]
 8015dc2:	f10d 0c18 	add.w	ip, sp, #24
 8015dc6:	6851      	ldr	r1, [r2, #4]
 8015dc8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015dcc:	4641      	mov	r1, r8
 8015dce:	a806      	add	r0, sp, #24
 8015dd0:	f7ff fc76 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	f006 f943 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015dda:	4680      	mov	r8, r0
 8015ddc:	f7f9 fe44 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8015de0:	6802      	ldr	r2, [r0, #0]
 8015de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015de4:	4790      	blx	r2
 8015de6:	4580      	cmp	r8, r0
 8015de8:	d03d      	beq.n	8015e66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015dea:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015dec:	b150      	cbz	r0, 8015e04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015dee:	4628      	mov	r0, r5
 8015df0:	f006 f936 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015df4:	4605      	mov	r5, r0
 8015df6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015df8:	6803      	ldr	r3, [r0, #0]
 8015dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfc:	4798      	blx	r3
 8015dfe:	1a2b      	subs	r3, r5, r0
 8015e00:	4258      	negs	r0, r3
 8015e02:	4158      	adcs	r0, r3
 8015e04:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015e08:	2500      	movs	r5, #0
 8015e0a:	6963      	ldr	r3, [r4, #20]
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	6822      	ldr	r2, [r4, #0]
 8015e10:	a906      	add	r1, sp, #24
 8015e12:	6165      	str	r5, [r4, #20]
 8015e14:	9303      	str	r3, [sp, #12]
 8015e16:	6892      	ldr	r2, [r2, #8]
 8015e18:	4790      	blx	r2
 8015e1a:	9b03      	ldr	r3, [sp, #12]
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	4652      	mov	r2, sl
 8015e20:	6163      	str	r3, [r4, #20]
 8015e22:	4649      	mov	r1, r9
 8015e24:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015e2e:	4c10      	ldr	r4, [pc, #64]	; (8015e70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e32:	4798      	blx	r3
 8015e34:	6820      	ldr	r0, [r4, #0]
 8015e36:	9b02      	ldr	r3, [sp, #8]
 8015e38:	9a00      	ldr	r2, [sp, #0]
 8015e3a:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015e3e:	4b0d      	ldr	r3, [pc, #52]	; (8015e74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015e40:	801a      	strh	r2, [r3, #0]
 8015e42:	4b0a      	ldr	r3, [pc, #40]	; (8015e6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015e44:	9a01      	ldr	r2, [sp, #4]
 8015e46:	801a      	strh	r2, [r3, #0]
 8015e48:	6803      	ldr	r3, [r0, #0]
 8015e4a:	6a1b      	ldr	r3, [r3, #32]
 8015e4c:	4798      	blx	r3
 8015e4e:	6820      	ldr	r0, [r4, #0]
 8015e50:	6803      	ldr	r3, [r0, #0]
 8015e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e54:	4798      	blx	r3
 8015e56:	b009      	add	sp, #36	; 0x24
 8015e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e5c:	ab06      	add	r3, sp, #24
 8015e5e:	6810      	ldr	r0, [r2, #0]
 8015e60:	6851      	ldr	r1, [r2, #4]
 8015e62:	c303      	stmia	r3!, {r0, r1}
 8015e64:	e7b6      	b.n	8015dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015e66:	2000      	movs	r0, #0
 8015e68:	e7cc      	b.n	8015e04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015e6a:	bf00      	nop
 8015e6c:	2000bb90 	.word	0x2000bb90
 8015e70:	2000bb94 	.word	0x2000bb94
 8015e74:	2000bb8e 	.word	0x2000bb8e

08015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015e78:	4b07      	ldr	r3, [pc, #28]	; (8015e98 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015e7a:	b510      	push	{r4, lr}
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	4604      	mov	r4, r0
 8015e80:	b13b      	cbz	r3, 8015e92 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e82:	6803      	ldr	r3, [r0, #0]
 8015e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e86:	4798      	blx	r3
 8015e88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015e8a:	4283      	cmp	r3, r0
 8015e8c:	d101      	bne.n	8015e92 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015e90:	bd10      	pop	{r4, pc}
 8015e92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015e94:	e7fc      	b.n	8015e90 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015e96:	bf00      	nop
 8015e98:	2000bb92 	.word	0x2000bb92

08015e9c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015e9c:	4b0b      	ldr	r3, [pc, #44]	; (8015ecc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015e9e:	b510      	push	{r4, lr}
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	b95b      	cbnz	r3, 8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ea6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d007      	beq.n	8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eae:	6840      	ldr	r0, [r0, #4]
 8015eb0:	f000 fbc8 	bl	8016644 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015eb4:	b118      	cbz	r0, 8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eb6:	6862      	ldr	r2, [r4, #4]
 8015eb8:	7a53      	ldrb	r3, [r2, #9]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d0fc      	beq.n	8015eb8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015ebe:	f7fd fbb3 	bl	8013628 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f7ff ffd8 	bl	8015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ec8:	bd10      	pop	{r4, pc}
 8015eca:	bf00      	nop
 8015ecc:	2000bb92 	.word	0x2000bb92

08015ed0 <_ZN8touchgfx3HAL10initializeEv>:
 8015ed0:	b510      	push	{r4, lr}
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	f7fd fb84 	bl	80135e0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015ed8:	6860      	ldr	r0, [r4, #4]
 8015eda:	6803      	ldr	r3, [r0, #0]
 8015edc:	68db      	ldr	r3, [r3, #12]
 8015ede:	4798      	blx	r3
 8015ee0:	68e0      	ldr	r0, [r4, #12]
 8015ee2:	6803      	ldr	r3, [r0, #0]
 8015ee4:	689b      	ldr	r3, [r3, #8]
 8015ee6:	4798      	blx	r3
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	4620      	mov	r0, r4
 8015eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ef2:	4718      	bx	r3

08015ef4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015ef4:	b508      	push	{r3, lr}
 8015ef6:	290c      	cmp	r1, #12
 8015ef8:	d817      	bhi.n	8015f2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015efa:	e8df f001 	tbb	[pc, r1]
 8015efe:	090b      	.short	0x090b
 8015f00:	0d0d0d07 	.word	0x0d0d0d07
 8015f04:	1414140d 	.word	0x1414140d
 8015f08:	1414      	.short	0x1414
 8015f0a:	0d          	.byte	0x0d
 8015f0b:	00          	.byte	0x00
 8015f0c:	2020      	movs	r0, #32
 8015f0e:	bd08      	pop	{r3, pc}
 8015f10:	2018      	movs	r0, #24
 8015f12:	e7fc      	b.n	8015f0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f14:	2010      	movs	r0, #16
 8015f16:	e7fa      	b.n	8015f0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f18:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015f1a:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015f1e:	4a05      	ldr	r2, [pc, #20]	; (8015f34 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015f20:	4805      	ldr	r0, [pc, #20]	; (8015f38 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015f22:	f00f fc63 	bl	80257ec <__assert_func>
 8015f26:	2008      	movs	r0, #8
 8015f28:	e7f1      	b.n	8015f0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f2a:	2000      	movs	r0, #0
 8015f2c:	e7ef      	b.n	8015f0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015f2e:	bf00      	nop
 8015f30:	080282df 	.word	0x080282df
 8015f34:	08028674 	.word	0x08028674
 8015f38:	080281e6 	.word	0x080281e6

08015f3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	460d      	mov	r5, r1
 8015f40:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015f44:	4616      	mov	r6, r2
 8015f46:	461c      	mov	r4, r3
 8015f48:	f7ff ffd4 	bl	8015ef4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015f4c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015f50:	10c0      	asrs	r0, r0, #3
 8015f52:	fb06 5101 	mla	r1, r6, r1, r5
 8015f56:	fb00 4001 	mla	r0, r0, r1, r4
 8015f5a:	bd70      	pop	{r4, r5, r6, pc}

08015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f60:	b08a      	sub	sp, #40	; 0x28
 8015f62:	f04f 0c00 	mov.w	ip, #0
 8015f66:	4604      	mov	r4, r0
 8015f68:	469a      	mov	sl, r3
 8015f6a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015f6e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015f72:	f1b8 0f02 	cmp.w	r8, #2
 8015f76:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015f7a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015f7e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015f82:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015f86:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015f8a:	f8cd c020 	str.w	ip, [sp, #32]
 8015f8e:	d030      	beq.n	8015ff2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015f90:	2bff      	cmp	r3, #255	; 0xff
 8015f92:	d12c      	bne.n	8015fee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015f94:	4560      	cmp	r0, ip
 8015f96:	bf14      	ite	ne
 8015f98:	2004      	movne	r0, #4
 8015f9a:	2001      	moveq	r0, #1
 8015f9c:	9204      	str	r2, [sp, #16]
 8015f9e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015fa2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015fa6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015faa:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015fae:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f7ff ff5e 	bl	8015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fbc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	4651      	mov	r1, sl
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	e9cd 9700 	strd	r9, r7, [sp]
 8015fca:	f7ff ffb7 	bl	8015f3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015fce:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015fd2:	9005      	str	r0, [sp, #20]
 8015fd4:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015fd8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015fdc:	b106      	cbz	r6, 8015fe0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015fde:	b98d      	cbnz	r5, 8016004 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015fe0:	4b12      	ldr	r3, [pc, #72]	; (801602c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015fe2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015fe6:	4a12      	ldr	r2, [pc, #72]	; (8016030 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015fe8:	4812      	ldr	r0, [pc, #72]	; (8016034 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015fea:	f00f fbff 	bl	80257ec <__assert_func>
 8015fee:	2004      	movs	r0, #4
 8015ff0:	e7d4      	b.n	8015f9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015ff2:	2bff      	cmp	r3, #255	; 0xff
 8015ff4:	d104      	bne.n	8016000 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	bf14      	ite	ne
 8015ffa:	2040      	movne	r0, #64	; 0x40
 8015ffc:	2020      	moveq	r0, #32
 8015ffe:	e7cd      	b.n	8015f9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016000:	2040      	movs	r0, #64	; 0x40
 8016002:	e7cb      	b.n	8015f9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	4620      	mov	r0, r4
 8016008:	9d02      	ldr	r5, [sp, #8]
 801600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801600c:	4798      	blx	r3
 801600e:	4228      	tst	r0, r5
 8016010:	d104      	bne.n	801601c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016012:	4b09      	ldr	r3, [pc, #36]	; (8016038 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016014:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016018:	4a05      	ldr	r2, [pc, #20]	; (8016030 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801601a:	e7e5      	b.n	8015fe8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801601c:	6860      	ldr	r0, [r4, #4]
 801601e:	a902      	add	r1, sp, #8
 8016020:	6803      	ldr	r3, [r0, #0]
 8016022:	685b      	ldr	r3, [r3, #4]
 8016024:	4798      	blx	r3
 8016026:	b00a      	add	sp, #40	; 0x28
 8016028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801602c:	08028262 	.word	0x08028262
 8016030:	08028516 	.word	0x08028516
 8016034:	080281e6 	.word	0x080281e6
 8016038:	0802829a 	.word	0x0802829a

0801603c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801603c:	b510      	push	{r4, lr}
 801603e:	b08a      	sub	sp, #40	; 0x28
 8016040:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016044:	9408      	str	r4, [sp, #32]
 8016046:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801604a:	9407      	str	r4, [sp, #28]
 801604c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016050:	9406      	str	r4, [sp, #24]
 8016052:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016056:	9405      	str	r4, [sp, #20]
 8016058:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801605c:	9404      	str	r4, [sp, #16]
 801605e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8016062:	9403      	str	r4, [sp, #12]
 8016064:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016068:	9402      	str	r4, [sp, #8]
 801606a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801606e:	e9cd 3400 	strd	r3, r4, [sp]
 8016072:	4613      	mov	r3, r2
 8016074:	2200      	movs	r2, #0
 8016076:	f7ff ff71 	bl	8015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801607a:	b00a      	add	sp, #40	; 0x28
 801607c:	bd10      	pop	{r4, pc}
	...

08016080 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016082:	b08b      	sub	sp, #44	; 0x2c
 8016084:	4616      	mov	r6, r2
 8016086:	460d      	mov	r5, r1
 8016088:	461f      	mov	r7, r3
 801608a:	4604      	mov	r4, r0
 801608c:	f7f9 fcec 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016090:	6803      	ldr	r3, [r0, #0]
 8016092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016094:	4798      	blx	r3
 8016096:	4b0e      	ldr	r3, [pc, #56]	; (80160d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016098:	2200      	movs	r2, #0
 801609a:	4629      	mov	r1, r5
 801609c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80160a0:	881b      	ldrh	r3, [r3, #0]
 80160a2:	4620      	mov	r0, r4
 80160a4:	9306      	str	r3, [sp, #24]
 80160a6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80160aa:	9305      	str	r3, [sp, #20]
 80160ac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80160b0:	9304      	str	r3, [sp, #16]
 80160b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80160b6:	9303      	str	r3, [sp, #12]
 80160b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80160bc:	9302      	str	r3, [sp, #8]
 80160be:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80160c2:	e9cd 7300 	strd	r7, r3, [sp]
 80160c6:	4633      	mov	r3, r6
 80160c8:	f7ff ff48 	bl	8015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80160cc:	b00b      	add	sp, #44	; 0x2c
 80160ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160d0:	2000bb8e 	.word	0x2000bb8e

080160d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80160d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160d8:	461f      	mov	r7, r3
 80160da:	4b14      	ldr	r3, [pc, #80]	; (801612c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80160dc:	b08a      	sub	sp, #40	; 0x28
 80160de:	4616      	mov	r6, r2
 80160e0:	f8b3 8000 	ldrh.w	r8, [r3]
 80160e4:	460d      	mov	r5, r1
 80160e6:	4604      	mov	r4, r0
 80160e8:	f7f9 fcbe 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80160ec:	6803      	ldr	r3, [r0, #0]
 80160ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f0:	4798      	blx	r3
 80160f2:	2302      	movs	r3, #2
 80160f4:	9008      	str	r0, [sp, #32]
 80160f6:	2200      	movs	r2, #0
 80160f8:	4629      	mov	r1, r5
 80160fa:	4620      	mov	r0, r4
 80160fc:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016100:	2301      	movs	r3, #1
 8016102:	9305      	str	r3, [sp, #20]
 8016104:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016108:	9304      	str	r3, [sp, #16]
 801610a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801610e:	9303      	str	r3, [sp, #12]
 8016110:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016114:	9302      	str	r3, [sp, #8]
 8016116:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801611a:	e9cd 7300 	strd	r7, r3, [sp]
 801611e:	4633      	mov	r3, r6
 8016120:	f7ff ff1c 	bl	8015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016124:	b00a      	add	sp, #40	; 0x28
 8016126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801612a:	bf00      	nop
 801612c:	2000bb8e 	.word	0x2000bb8e

08016130 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	b08b      	sub	sp, #44	; 0x2c
 8016136:	469b      	mov	fp, r3
 8016138:	4604      	mov	r4, r0
 801613a:	4692      	mov	sl, r2
 801613c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016140:	2600      	movs	r6, #0
 8016142:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016146:	4689      	mov	r9, r1
 8016148:	2fff      	cmp	r7, #255	; 0xff
 801614a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801614e:	9608      	str	r6, [sp, #32]
 8016150:	bf14      	ite	ne
 8016152:	2308      	movne	r3, #8
 8016154:	2302      	moveq	r3, #2
 8016156:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801615a:	f7ff fe8d 	bl	8015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801615e:	465a      	mov	r2, fp
 8016160:	4603      	mov	r3, r0
 8016162:	4651      	mov	r1, sl
 8016164:	4620      	mov	r0, r4
 8016166:	e9cd 8500 	strd	r8, r5, [sp]
 801616a:	f7ff fee7 	bl	8015f3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801616e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016172:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016176:	f8ad 3018 	strh.w	r3, [sp, #24]
 801617a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801617e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016182:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	9d02      	ldr	r5, [sp, #8]
 801618a:	9005      	str	r0, [sp, #20]
 801618c:	4620      	mov	r0, r4
 801618e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016192:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016196:	f8cd 9020 	str.w	r9, [sp, #32]
 801619a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161a0:	4798      	blx	r3
 80161a2:	4228      	tst	r0, r5
 80161a4:	d106      	bne.n	80161b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80161a6:	4b07      	ldr	r3, [pc, #28]	; (80161c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80161a8:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80161ac:	4a06      	ldr	r2, [pc, #24]	; (80161c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80161ae:	4807      	ldr	r0, [pc, #28]	; (80161cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80161b0:	f00f fb1c 	bl	80257ec <__assert_func>
 80161b4:	6860      	ldr	r0, [r4, #4]
 80161b6:	a902      	add	r1, sp, #8
 80161b8:	6803      	ldr	r3, [r0, #0]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	4798      	blx	r3
 80161be:	b00b      	add	sp, #44	; 0x2c
 80161c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c4:	0802829a 	.word	0x0802829a
 80161c8:	080285df 	.word	0x080285df
 80161cc:	080281e6 	.word	0x080281e6

080161d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80161d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80161d4:	461f      	mov	r7, r3
 80161d6:	4b0b      	ldr	r3, [pc, #44]	; (8016204 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80161d8:	460d      	mov	r5, r1
 80161da:	4616      	mov	r6, r2
 80161dc:	f8b3 8000 	ldrh.w	r8, [r3]
 80161e0:	4604      	mov	r4, r0
 80161e2:	f7f9 fc41 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80161e6:	6803      	ldr	r3, [r0, #0]
 80161e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ea:	4798      	blx	r3
 80161ec:	463b      	mov	r3, r7
 80161ee:	4632      	mov	r2, r6
 80161f0:	4629      	mov	r1, r5
 80161f2:	e9cd 8000 	strd	r8, r0, [sp]
 80161f6:	4620      	mov	r0, r4
 80161f8:	f7ff fea0 	bl	8015f3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80161fc:	b002      	add	sp, #8
 80161fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016202:	bf00      	nop
 8016204:	2000bb8e 	.word	0x2000bb8e

08016208 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801620c:	4698      	mov	r8, r3
 801620e:	b088      	sub	sp, #32
 8016210:	2300      	movs	r3, #0
 8016212:	4617      	mov	r7, r2
 8016214:	4604      	mov	r4, r0
 8016216:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801621a:	9306      	str	r3, [sp, #24]
 801621c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016220:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016224:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016228:	f8ad 5012 	strh.w	r5, [sp, #18]
 801622c:	e9cd 3100 	strd	r3, r1, [sp]
 8016230:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016234:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016238:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801623c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016240:	f7ff fe1a 	bl	8015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016244:	4642      	mov	r2, r8
 8016246:	4603      	mov	r3, r0
 8016248:	4639      	mov	r1, r7
 801624a:	4620      	mov	r0, r4
 801624c:	f7ff ffc0 	bl	80161d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016250:	4b16      	ldr	r3, [pc, #88]	; (80162ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016252:	9003      	str	r0, [sp, #12]
 8016254:	881b      	ldrh	r3, [r3, #0]
 8016256:	f8ad 3016 	strh.w	r3, [sp, #22]
 801625a:	f7f9 fc05 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 801625e:	6803      	ldr	r3, [r0, #0]
 8016260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016262:	4798      	blx	r3
 8016264:	f88d 001e 	strb.w	r0, [sp, #30]
 8016268:	f88d 001d 	strb.w	r0, [sp, #29]
 801626c:	b106      	cbz	r6, 8016270 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801626e:	b935      	cbnz	r5, 801627e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016270:	4b0f      	ldr	r3, [pc, #60]	; (80162b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016272:	f240 11cd 	movw	r1, #461	; 0x1cd
 8016276:	4a0f      	ldr	r2, [pc, #60]	; (80162b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016278:	480f      	ldr	r0, [pc, #60]	; (80162b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801627a:	f00f fab7 	bl	80257ec <__assert_func>
 801627e:	6823      	ldr	r3, [r4, #0]
 8016280:	4620      	mov	r0, r4
 8016282:	9d00      	ldr	r5, [sp, #0]
 8016284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016286:	4798      	blx	r3
 8016288:	4228      	tst	r0, r5
 801628a:	d104      	bne.n	8016296 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801628c:	4b0b      	ldr	r3, [pc, #44]	; (80162bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801628e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016292:	4a08      	ldr	r2, [pc, #32]	; (80162b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016294:	e7f0      	b.n	8016278 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016298:	4669      	mov	r1, sp
 801629a:	6860      	ldr	r0, [r4, #4]
 801629c:	9306      	str	r3, [sp, #24]
 801629e:	6803      	ldr	r3, [r0, #0]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	4798      	blx	r3
 80162a4:	b008      	add	sp, #32
 80162a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162aa:	bf00      	nop
 80162ac:	2000bb8e 	.word	0x2000bb8e
 80162b0:	08028262 	.word	0x08028262
 80162b4:	080283c8 	.word	0x080283c8
 80162b8:	080281e6 	.word	0x080281e6
 80162bc:	0802829a 	.word	0x0802829a

080162c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80162c0:	b570      	push	{r4, r5, r6, lr}
 80162c2:	b08a      	sub	sp, #40	; 0x28
 80162c4:	4604      	mov	r4, r0
 80162c6:	466b      	mov	r3, sp
 80162c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80162cc:	4b1f      	ldr	r3, [pc, #124]	; (801634c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	b933      	cbnz	r3, 80162e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80162d2:	4b1f      	ldr	r3, [pc, #124]	; (8016350 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80162d4:	f240 11f9 	movw	r1, #505	; 0x1f9
 80162d8:	4a1e      	ldr	r2, [pc, #120]	; (8016354 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80162da:	481f      	ldr	r0, [pc, #124]	; (8016358 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80162dc:	f00f fa86 	bl	80257ec <__assert_func>
 80162e0:	2300      	movs	r3, #0
 80162e2:	f8bd 5000 	ldrh.w	r5, [sp]
 80162e6:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80162ea:	9308      	str	r3, [sp, #32]
 80162ec:	2301      	movs	r3, #1
 80162ee:	9302      	str	r3, [sp, #8]
 80162f0:	6803      	ldr	r3, [r0, #0]
 80162f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162f4:	4798      	blx	r3
 80162f6:	4632      	mov	r2, r6
 80162f8:	4629      	mov	r1, r5
 80162fa:	4603      	mov	r3, r0
 80162fc:	4620      	mov	r0, r4
 80162fe:	f7ff ff67 	bl	80161d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016302:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016304:	9003      	str	r0, [sp, #12]
 8016306:	9305      	str	r3, [sp, #20]
 8016308:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801630c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016310:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016314:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016318:	4b10      	ldr	r3, [pc, #64]	; (801635c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801631a:	881b      	ldrh	r3, [r3, #0]
 801631c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016320:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016324:	f7f9 fba0 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016328:	6803      	ldr	r3, [r0, #0]
 801632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801632c:	4798      	blx	r3
 801632e:	23ff      	movs	r3, #255	; 0xff
 8016330:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016334:	a902      	add	r1, sp, #8
 8016336:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801633a:	6860      	ldr	r0, [r4, #4]
 801633c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016340:	6803      	ldr	r3, [r0, #0]
 8016342:	685b      	ldr	r3, [r3, #4]
 8016344:	4798      	blx	r3
 8016346:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016348:	b00a      	add	sp, #40	; 0x28
 801634a:	bd70      	pop	{r4, r5, r6, pc}
 801634c:	2000bb93 	.word	0x2000bb93
 8016350:	08028133 	.word	0x08028133
 8016354:	0802846c 	.word	0x0802846c
 8016358:	080281e6 	.word	0x080281e6
 801635c:	2000bb8e 	.word	0x2000bb8e

08016360 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016362:	b08b      	sub	sp, #44	; 0x2c
 8016364:	4604      	mov	r4, r0
 8016366:	466d      	mov	r5, sp
 8016368:	e885 0006 	stmia.w	r5, {r1, r2}
 801636c:	461d      	mov	r5, r3
 801636e:	2300      	movs	r3, #0
 8016370:	f8bd 6000 	ldrh.w	r6, [sp]
 8016374:	9308      	str	r3, [sp, #32]
 8016376:	2301      	movs	r3, #1
 8016378:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801637c:	9302      	str	r3, [sp, #8]
 801637e:	6803      	ldr	r3, [r0, #0]
 8016380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016382:	4798      	blx	r3
 8016384:	463a      	mov	r2, r7
 8016386:	4631      	mov	r1, r6
 8016388:	4603      	mov	r3, r0
 801638a:	4620      	mov	r0, r4
 801638c:	f7ff ff20 	bl	80161d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016390:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016394:	9003      	str	r0, [sp, #12]
 8016396:	f8ad 3018 	strh.w	r3, [sp, #24]
 801639a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801639e:	9505      	str	r5, [sp, #20]
 80163a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80163a4:	4b0d      	ldr	r3, [pc, #52]	; (80163dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80163a6:	881b      	ldrh	r3, [r3, #0]
 80163a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80163ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80163b2:	f7f9 fb59 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80163b6:	6803      	ldr	r3, [r0, #0]
 80163b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ba:	4798      	blx	r3
 80163bc:	23ff      	movs	r3, #255	; 0xff
 80163be:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80163c2:	a902      	add	r1, sp, #8
 80163c4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80163c8:	6860      	ldr	r0, [r4, #4]
 80163ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163ce:	6803      	ldr	r3, [r0, #0]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	4798      	blx	r3
 80163d4:	4628      	mov	r0, r5
 80163d6:	b00b      	add	sp, #44	; 0x2c
 80163d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163da:	bf00      	nop
 80163dc:	2000bb8e 	.word	0x2000bb8e

080163e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80163e6:	4604      	mov	r4, r0
 80163e8:	b19b      	cbz	r3, 8016412 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80163ea:	2002      	movs	r0, #2
 80163ec:	f7fc fe84 	bl	80130f8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80163f0:	2300      	movs	r3, #0
 80163f2:	4620      	mov	r0, r4
 80163f4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80163f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80163fc:	6823      	ldr	r3, [r4, #0]
 80163fe:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016402:	f7ff fd39 	bl	8015e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016406:	4601      	mov	r1, r0
 8016408:	4620      	mov	r0, r4
 801640a:	462b      	mov	r3, r5
 801640c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016410:	4718      	bx	r3
 8016412:	bd70      	pop	{r4, r5, r6, pc}

08016414 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016414:	4770      	bx	lr

08016416 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016416:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801641a:	1a13      	subs	r3, r2, r0
 801641c:	4258      	negs	r0, r3
 801641e:	4158      	adcs	r0, r3
 8016420:	4770      	bx	lr

08016422 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016422:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016426:	1a9b      	subs	r3, r3, r2
 8016428:	2b00      	cmp	r3, #0
 801642a:	bfdc      	itt	le
 801642c:	6882      	ldrle	r2, [r0, #8]
 801642e:	189b      	addle	r3, r3, r2
 8016430:	2b01      	cmp	r3, #1
 8016432:	bfcc      	ite	gt
 8016434:	2000      	movgt	r0, #0
 8016436:	2001      	movle	r0, #1
 8016438:	4770      	bx	lr

0801643a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801643a:	6902      	ldr	r2, [r0, #16]
 801643c:	6840      	ldr	r0, [r0, #4]
 801643e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016442:	4770      	bx	lr

08016444 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016444:	6803      	ldr	r3, [r0, #0]
 8016446:	691b      	ldr	r3, [r3, #16]
 8016448:	4718      	bx	r3

0801644a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801644a:	4770      	bx	lr

0801644c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801644c:	4770      	bx	lr
	...

08016450 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016450:	2301      	movs	r3, #1
 8016452:	b570      	push	{r4, r5, r6, lr}
 8016454:	7203      	strb	r3, [r0, #8]
 8016456:	4604      	mov	r4, r0
 8016458:	6840      	ldr	r0, [r0, #4]
 801645a:	6803      	ldr	r3, [r0, #0]
 801645c:	699b      	ldr	r3, [r3, #24]
 801645e:	4798      	blx	r3
 8016460:	6803      	ldr	r3, [r0, #0]
 8016462:	4605      	mov	r5, r0
 8016464:	2b08      	cmp	r3, #8
 8016466:	d01e      	beq.n	80164a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016468:	d80b      	bhi.n	8016482 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801646a:	2b02      	cmp	r3, #2
 801646c:	d027      	beq.n	80164be <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801646e:	2b04      	cmp	r3, #4
 8016470:	d011      	beq.n	8016496 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016472:	2b01      	cmp	r3, #1
 8016474:	d028      	beq.n	80164c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016476:	4b17      	ldr	r3, [pc, #92]	; (80164d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016478:	218b      	movs	r1, #139	; 0x8b
 801647a:	4a17      	ldr	r2, [pc, #92]	; (80164d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801647c:	4817      	ldr	r0, [pc, #92]	; (80164dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801647e:	f00f f9b5 	bl	80257ec <__assert_func>
 8016482:	2b40      	cmp	r3, #64	; 0x40
 8016484:	d020      	beq.n	80164c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016486:	d801      	bhi.n	801648c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016488:	2b20      	cmp	r3, #32
 801648a:	e7f3      	b.n	8016474 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801648c:	2b80      	cmp	r3, #128	; 0x80
 801648e:	d01b      	beq.n	80164c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016494:	e7ee      	b.n	8016474 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016496:	6823      	ldr	r3, [r4, #0]
 8016498:	7f01      	ldrb	r1, [r0, #28]
 801649a:	4620      	mov	r0, r4
 801649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801649e:	4798      	blx	r3
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164a4:	e006      	b.n	80164b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80164a6:	6823      	ldr	r3, [r4, #0]
 80164a8:	7f01      	ldrb	r1, [r0, #28]
 80164aa:	4620      	mov	r0, r4
 80164ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164ae:	4798      	blx	r3
 80164b0:	6823      	ldr	r3, [r4, #0]
 80164b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b4:	4629      	mov	r1, r5
 80164b6:	4620      	mov	r0, r4
 80164b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164bc:	4718      	bx	r3
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	4620      	mov	r0, r4
 80164c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164c4:	4798      	blx	r3
 80164c6:	e7f3      	b.n	80164b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80164c8:	6823      	ldr	r3, [r4, #0]
 80164ca:	4620      	mov	r0, r4
 80164cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164ce:	4798      	blx	r3
 80164d0:	e7e6      	b.n	80164a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80164d2:	bf00      	nop
 80164d4:	080286bd 	.word	0x080286bd
 80164d8:	080287cc 	.word	0x080287cc
 80164dc:	080286e2 	.word	0x080286e2

080164e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80164e0:	b570      	push	{r4, r5, r6, lr}
 80164e2:	4604      	mov	r4, r0
 80164e4:	460e      	mov	r6, r1
 80164e6:	6860      	ldr	r0, [r4, #4]
 80164e8:	6803      	ldr	r3, [r0, #0]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	4798      	blx	r3
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d1f9      	bne.n	80164e6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80164f2:	4d0b      	ldr	r5, [pc, #44]	; (8016520 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80164f4:	6828      	ldr	r0, [r5, #0]
 80164f6:	6803      	ldr	r3, [r0, #0]
 80164f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80164fa:	4798      	blx	r3
 80164fc:	f7fd f8b0 	bl	8013660 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016500:	6860      	ldr	r0, [r4, #4]
 8016502:	4631      	mov	r1, r6
 8016504:	6803      	ldr	r3, [r0, #0]
 8016506:	689b      	ldr	r3, [r3, #8]
 8016508:	4798      	blx	r3
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	4620      	mov	r0, r4
 801650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016510:	4798      	blx	r3
 8016512:	6828      	ldr	r0, [r5, #0]
 8016514:	6803      	ldr	r3, [r0, #0]
 8016516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801651a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801651c:	4718      	bx	r3
 801651e:	bf00      	nop
 8016520:	2000bb94 	.word	0x2000bb94

08016524 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016524:	b508      	push	{r3, lr}
 8016526:	f7fd f87f 	bl	8013628 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801652a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801652e:	f7fd b889 	b.w	8013644 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016532 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016532:	b510      	push	{r4, lr}
 8016534:	4604      	mov	r4, r0
 8016536:	6840      	ldr	r0, [r0, #4]
 8016538:	6803      	ldr	r3, [r0, #0]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4798      	blx	r3
 801653e:	b948      	cbnz	r0, 8016554 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016540:	7a63      	ldrb	r3, [r4, #9]
 8016542:	b13b      	cbz	r3, 8016554 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016544:	7a23      	ldrb	r3, [r4, #8]
 8016546:	b92b      	cbnz	r3, 8016554 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016548:	6823      	ldr	r3, [r4, #0]
 801654a:	4620      	mov	r0, r4
 801654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801654e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016552:	4718      	bx	r3
 8016554:	bd10      	pop	{r4, pc}
	...

08016558 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016558:	b510      	push	{r4, lr}
 801655a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801655e:	1b12      	subs	r2, r2, r4
 8016560:	2a00      	cmp	r2, #0
 8016562:	bfdc      	itt	le
 8016564:	6883      	ldrle	r3, [r0, #8]
 8016566:	18d2      	addle	r2, r2, r3
 8016568:	2a01      	cmp	r2, #1
 801656a:	dd18      	ble.n	801659e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801656c:	6843      	ldr	r3, [r0, #4]
 801656e:	f101 021c 	add.w	r2, r1, #28
 8016572:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016576:	f851 4b04 	ldr.w	r4, [r1], #4
 801657a:	4291      	cmp	r1, r2
 801657c:	f843 4b04 	str.w	r4, [r3], #4
 8016580:	d1f9      	bne.n	8016576 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016582:	880a      	ldrh	r2, [r1, #0]
 8016584:	801a      	strh	r2, [r3, #0]
 8016586:	788a      	ldrb	r2, [r1, #2]
 8016588:	709a      	strb	r2, [r3, #2]
 801658a:	68c3      	ldr	r3, [r0, #12]
 801658c:	6882      	ldr	r2, [r0, #8]
 801658e:	f3bf 8f5b 	dmb	ish
 8016592:	3301      	adds	r3, #1
 8016594:	429a      	cmp	r2, r3
 8016596:	bfd8      	it	le
 8016598:	1a9b      	suble	r3, r3, r2
 801659a:	60c3      	str	r3, [r0, #12]
 801659c:	bd10      	pop	{r4, pc}
 801659e:	4b03      	ldr	r3, [pc, #12]	; (80165ac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80165a0:	2139      	movs	r1, #57	; 0x39
 80165a2:	4a03      	ldr	r2, [pc, #12]	; (80165b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80165a4:	4803      	ldr	r0, [pc, #12]	; (80165b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80165a6:	f00f f921 	bl	80257ec <__assert_func>
 80165aa:	bf00      	nop
 80165ac:	08028708 	.word	0x08028708
 80165b0:	080287fc 	.word	0x080287fc
 80165b4:	080286e2 	.word	0x080286e2

080165b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80165b8:	b510      	push	{r4, lr}
 80165ba:	6803      	ldr	r3, [r0, #0]
 80165bc:	4604      	mov	r4, r0
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4798      	blx	r3
 80165c2:	b128      	cbz	r0, 80165d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80165c4:	4b07      	ldr	r3, [pc, #28]	; (80165e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80165c6:	213f      	movs	r1, #63	; 0x3f
 80165c8:	4a07      	ldr	r2, [pc, #28]	; (80165e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80165ca:	4808      	ldr	r0, [pc, #32]	; (80165ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80165cc:	f00f f90e 	bl	80257ec <__assert_func>
 80165d0:	6923      	ldr	r3, [r4, #16]
 80165d2:	68a2      	ldr	r2, [r4, #8]
 80165d4:	f3bf 8f5b 	dmb	ish
 80165d8:	3301      	adds	r3, #1
 80165da:	429a      	cmp	r2, r3
 80165dc:	bfd8      	it	le
 80165de:	1a9b      	suble	r3, r3, r2
 80165e0:	6123      	str	r3, [r4, #16]
 80165e2:	bd10      	pop	{r4, pc}
 80165e4:	0802872b 	.word	0x0802872b
 80165e8:	0802884a 	.word	0x0802884a
 80165ec:	080286e2 	.word	0x080286e2

080165f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80165f0:	b570      	push	{r4, r5, r6, lr}
 80165f2:	4604      	mov	r4, r0
 80165f4:	6840      	ldr	r0, [r0, #4]
 80165f6:	6803      	ldr	r3, [r0, #0]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	4798      	blx	r3
 80165fc:	4605      	mov	r5, r0
 80165fe:	b930      	cbnz	r0, 801660e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016600:	7a23      	ldrb	r3, [r4, #8]
 8016602:	b123      	cbz	r3, 801660e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016604:	6860      	ldr	r0, [r4, #4]
 8016606:	6803      	ldr	r3, [r0, #0]
 8016608:	695b      	ldr	r3, [r3, #20]
 801660a:	4798      	blx	r3
 801660c:	7225      	strb	r5, [r4, #8]
 801660e:	6860      	ldr	r0, [r4, #4]
 8016610:	6803      	ldr	r3, [r0, #0]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4798      	blx	r3
 8016616:	b928      	cbnz	r0, 8016624 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016618:	6823      	ldr	r3, [r4, #0]
 801661a:	4620      	mov	r0, r4
 801661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016622:	4718      	bx	r3
 8016624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016628:	f7fd b826 	b.w	8013678 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801662c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801662c:	b510      	push	{r4, lr}
 801662e:	6082      	str	r2, [r0, #8]
 8016630:	2200      	movs	r2, #0
 8016632:	4c03      	ldr	r4, [pc, #12]	; (8016640 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016634:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016638:	e9c0 4100 	strd	r4, r1, [r0]
 801663c:	bd10      	pop	{r4, pc}
 801663e:	bf00      	nop
 8016640:	080287b0 	.word	0x080287b0

08016644 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016644:	6840      	ldr	r0, [r0, #4]
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4718      	bx	r3

0801664c <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801664c:	2001      	movs	r0, #1
 801664e:	4770      	bx	lr

08016650 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016654:	460d      	mov	r5, r1
 8016656:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801665a:	b085      	sub	sp, #20
 801665c:	4690      	mov	r8, r2
 801665e:	4411      	add	r1, r2
 8016660:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016664:	4699      	mov	r9, r3
 8016666:	6803      	ldr	r3, [r0, #0]
 8016668:	60c1      	str	r1, [r0, #12]
 801666a:	4604      	mov	r4, r0
 801666c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801666e:	440a      	add	r2, r1
 8016670:	6102      	str	r2, [r0, #16]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016678:	4798      	blx	r3
 801667a:	2800      	cmp	r0, #0
 801667c:	d039      	beq.n	80166f2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801667e:	44c8      	add	r8, r9
 8016680:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016684:	4445      	add	r5, r8
 8016686:	6823      	ldr	r3, [r4, #0]
 8016688:	f10d 020f 	add.w	r2, sp, #15
 801668c:	a903      	add	r1, sp, #12
 801668e:	4620      	mov	r0, r4
 8016690:	9200      	str	r2, [sp, #0]
 8016692:	f10d 020d 	add.w	r2, sp, #13
 8016696:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801669a:	f10d 030e 	add.w	r3, sp, #14
 801669e:	47c0      	blx	r8
 80166a0:	b1f8      	cbz	r0, 80166e2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 80166a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80166a6:	7a20      	ldrb	r0, [r4, #8]
 80166a8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80166ac:	4358      	muls	r0, r3
 80166ae:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80166b2:	1c43      	adds	r3, r0, #1
 80166b4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80166b8:	f817 0b01 	ldrb.w	r0, [r7], #1
 80166bc:	121b      	asrs	r3, r3, #8
 80166be:	fb10 f003 	smulbb	r0, r0, r3
 80166c2:	b283      	uxth	r3, r0
 80166c4:	1c58      	adds	r0, r3, #1
 80166c6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80166ca:	6823      	ldr	r3, [r4, #0]
 80166cc:	1200      	asrs	r0, r0, #8
 80166ce:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80166d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80166d6:	28ff      	cmp	r0, #255	; 0xff
 80166d8:	d10e      	bne.n	80166f8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80166da:	9100      	str	r1, [sp, #0]
 80166dc:	4629      	mov	r1, r5
 80166de:	4620      	mov	r0, r4
 80166e0:	47c0      	blx	r8
 80166e2:	68e3      	ldr	r3, [r4, #12]
 80166e4:	3e01      	subs	r6, #1
 80166e6:	f105 0503 	add.w	r5, r5, #3
 80166ea:	f103 0301 	add.w	r3, r3, #1
 80166ee:	60e3      	str	r3, [r4, #12]
 80166f0:	d1c9      	bne.n	8016686 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80166f2:	b005      	add	sp, #20
 80166f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166f8:	fa1f fc80 	uxth.w	ip, r0
 80166fc:	43c0      	mvns	r0, r0
 80166fe:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016702:	fb12 f20c 	smulbb	r2, r2, ip
 8016706:	b2c0      	uxtb	r0, r0
 8016708:	fb13 f30c 	smulbb	r3, r3, ip
 801670c:	fb0e 2200 	mla	r2, lr, r0, r2
 8016710:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016714:	fb11 f10c 	smulbb	r1, r1, ip
 8016718:	fb0e 3300 	mla	r3, lr, r0, r3
 801671c:	f895 e000 	ldrb.w	lr, [r5]
 8016720:	b292      	uxth	r2, r2
 8016722:	b29b      	uxth	r3, r3
 8016724:	fb0e 1000 	mla	r0, lr, r0, r1
 8016728:	1c59      	adds	r1, r3, #1
 801672a:	b280      	uxth	r0, r0
 801672c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016730:	1c51      	adds	r1, r2, #1
 8016732:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016736:	1c41      	adds	r1, r0, #1
 8016738:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801673c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016740:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016744:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016748:	9000      	str	r0, [sp, #0]
 801674a:	e7c7      	b.n	80166dc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801674c <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801674c:	f89d 0000 	ldrb.w	r0, [sp]
 8016750:	704b      	strb	r3, [r1, #1]
 8016752:	7008      	strb	r0, [r1, #0]
 8016754:	708a      	strb	r2, [r1, #2]
 8016756:	4770      	bx	lr

08016758 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016758:	4413      	add	r3, r2
 801675a:	7dc2      	ldrb	r2, [r0, #23]
 801675c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016760:	4419      	add	r1, r3
 8016762:	7a03      	ldrb	r3, [r0, #8]
 8016764:	435a      	muls	r2, r3
 8016766:	1c53      	adds	r3, r2, #1
 8016768:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801676c:	121b      	asrs	r3, r3, #8
 801676e:	2bff      	cmp	r3, #255	; 0xff
 8016770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016772:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016776:	d13e      	bne.n	80167f6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016778:	4427      	add	r7, r4
 801677a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801677e:	3103      	adds	r1, #3
 8016780:	7d86      	ldrb	r6, [r0, #22]
 8016782:	2bff      	cmp	r3, #255	; 0xff
 8016784:	d10a      	bne.n	801679c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016786:	f801 6c03 	strb.w	r6, [r1, #-3]
 801678a:	7d43      	ldrb	r3, [r0, #21]
 801678c:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016790:	7d03      	ldrb	r3, [r0, #20]
 8016792:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016796:	42a7      	cmp	r7, r4
 8016798:	d1ef      	bne.n	801677a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801679a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801679c:	b29a      	uxth	r2, r3
 801679e:	43db      	mvns	r3, r3
 80167a0:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80167a4:	fb16 f602 	smulbb	r6, r6, r2
 80167a8:	b2db      	uxtb	r3, r3
 80167aa:	fb05 6503 	mla	r5, r5, r3, r6
 80167ae:	b2ad      	uxth	r5, r5
 80167b0:	1c6e      	adds	r6, r5, #1
 80167b2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80167b6:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80167ba:	fb16 f603 	smulbb	r6, r6, r3
 80167be:	122d      	asrs	r5, r5, #8
 80167c0:	f801 5c03 	strb.w	r5, [r1, #-3]
 80167c4:	7d45      	ldrb	r5, [r0, #21]
 80167c6:	fb05 6502 	mla	r5, r5, r2, r6
 80167ca:	b2ad      	uxth	r5, r5
 80167cc:	1c6e      	adds	r6, r5, #1
 80167ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80167d2:	122d      	asrs	r5, r5, #8
 80167d4:	f801 5c02 	strb.w	r5, [r1, #-2]
 80167d8:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80167dc:	7d06      	ldrb	r6, [r0, #20]
 80167de:	fb15 f303 	smulbb	r3, r5, r3
 80167e2:	fb06 3202 	mla	r2, r6, r2, r3
 80167e6:	b292      	uxth	r2, r2
 80167e8:	1c53      	adds	r3, r2, #1
 80167ea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80167ee:	1212      	asrs	r2, r2, #8
 80167f0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80167f4:	e7cf      	b.n	8016796 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 80167f6:	b2de      	uxtb	r6, r3
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d0ce      	beq.n	801679a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 80167fc:	3103      	adds	r1, #3
 80167fe:	4427      	add	r7, r4
 8016800:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016804:	3103      	adds	r1, #3
 8016806:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801680a:	fb02 f306 	mul.w	r3, r2, r6
 801680e:	42bc      	cmp	r4, r7
 8016810:	f103 0201 	add.w	r2, r3, #1
 8016814:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016818:	ea4f 2222 	mov.w	r2, r2, asr #8
 801681c:	b295      	uxth	r5, r2
 801681e:	ea6f 0202 	mvn.w	r2, r2
 8016822:	b2d3      	uxtb	r3, r2
 8016824:	7d82      	ldrb	r2, [r0, #22]
 8016826:	fb1c fc03 	smulbb	ip, ip, r3
 801682a:	fb02 c205 	mla	r2, r2, r5, ip
 801682e:	b292      	uxth	r2, r2
 8016830:	f102 0c01 	add.w	ip, r2, #1
 8016834:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016838:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801683c:	fb1c fc03 	smulbb	ip, ip, r3
 8016840:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016844:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016848:	7d42      	ldrb	r2, [r0, #21]
 801684a:	fb02 c205 	mla	r2, r2, r5, ip
 801684e:	b292      	uxth	r2, r2
 8016850:	f102 0c01 	add.w	ip, r2, #1
 8016854:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016858:	ea4f 2222 	mov.w	r2, r2, asr #8
 801685c:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016860:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016864:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016868:	fb12 f303 	smulbb	r3, r2, r3
 801686c:	fb0c 3305 	mla	r3, ip, r5, r3
 8016870:	b29b      	uxth	r3, r3
 8016872:	f103 0201 	add.w	r2, r3, #1
 8016876:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801687a:	ea4f 2323 	mov.w	r3, r3, asr #8
 801687e:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016882:	d1bd      	bne.n	8016800 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016884:	e789      	b.n	801679a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016886 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016886:	b510      	push	{r4, lr}
 8016888:	7d04      	ldrb	r4, [r0, #20]
 801688a:	700c      	strb	r4, [r1, #0]
 801688c:	7d41      	ldrb	r1, [r0, #21]
 801688e:	7011      	strb	r1, [r2, #0]
 8016890:	7d82      	ldrb	r2, [r0, #22]
 8016892:	701a      	strb	r2, [r3, #0]
 8016894:	9b02      	ldr	r3, [sp, #8]
 8016896:	7dc2      	ldrb	r2, [r0, #23]
 8016898:	2001      	movs	r0, #1
 801689a:	701a      	strb	r2, [r3, #0]
 801689c:	bd10      	pop	{r4, pc}

0801689e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801689e:	b570      	push	{r4, r5, r6, lr}
 80168a0:	4616      	mov	r6, r2
 80168a2:	4604      	mov	r4, r0
 80168a4:	460d      	mov	r5, r1
 80168a6:	f7f9 f8df 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80168aa:	6803      	ldr	r3, [r0, #0]
 80168ac:	4629      	mov	r1, r5
 80168ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b0:	4798      	blx	r3
 80168b2:	7520      	strb	r0, [r4, #20]
 80168b4:	f7f9 f8d8 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80168b8:	6803      	ldr	r3, [r0, #0]
 80168ba:	4629      	mov	r1, r5
 80168bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168be:	4798      	blx	r3
 80168c0:	7560      	strb	r0, [r4, #21]
 80168c2:	f7f9 f8d1 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80168c6:	6803      	ldr	r3, [r0, #0]
 80168c8:	4629      	mov	r1, r5
 80168ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168cc:	4798      	blx	r3
 80168ce:	75e6      	strb	r6, [r4, #23]
 80168d0:	75a0      	strb	r0, [r4, #22]
 80168d2:	bd70      	pop	{r4, r5, r6, pc}

080168d4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 80168d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d6:	460e      	mov	r6, r1
 80168d8:	4617      	mov	r7, r2
 80168da:	4604      	mov	r4, r0
 80168dc:	f000 f832 	bl	8016944 <_ZN8touchgfx15AbstractPainterC1Ev>
 80168e0:	4b12      	ldr	r3, [pc, #72]	; (801692c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 80168e2:	6023      	str	r3, [r4, #0]
 80168e4:	f7f9 f8c0 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80168e8:	6803      	ldr	r3, [r0, #0]
 80168ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ec:	4798      	blx	r3
 80168ee:	1e43      	subs	r3, r0, #1
 80168f0:	425d      	negs	r5, r3
 80168f2:	415d      	adcs	r5, r3
 80168f4:	4b0e      	ldr	r3, [pc, #56]	; (8016930 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80168fa:	b130      	cbz	r0, 801690a <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 80168fc:	6803      	ldr	r3, [r0, #0]
 80168fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016900:	4798      	blx	r3
 8016902:	2801      	cmp	r0, #1
 8016904:	bf08      	it	eq
 8016906:	f045 0501 	orreq.w	r5, r5, #1
 801690a:	b92d      	cbnz	r5, 8016918 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801690c:	4b09      	ldr	r3, [pc, #36]	; (8016934 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801690e:	2129      	movs	r1, #41	; 0x29
 8016910:	4a09      	ldr	r2, [pc, #36]	; (8016938 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016912:	480a      	ldr	r0, [pc, #40]	; (801693c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016914:	f00e ff6a 	bl	80257ec <__assert_func>
 8016918:	4b09      	ldr	r3, [pc, #36]	; (8016940 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801691a:	4620      	mov	r0, r4
 801691c:	463a      	mov	r2, r7
 801691e:	4631      	mov	r1, r6
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	f7ff ffbc 	bl	801689e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016926:	4620      	mov	r0, r4
 8016928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801692a:	bf00      	nop
 801692c:	08028884 	.word	0x08028884
 8016930:	2000bb94 	.word	0x2000bb94
 8016934:	0802889c 	.word	0x0802889c
 8016938:	08028960 	.word	0x08028960
 801693c:	080288fa 	.word	0x080288fa
 8016940:	08028948 	.word	0x08028948

08016944 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016944:	4a03      	ldr	r2, [pc, #12]	; (8016954 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016946:	6002      	str	r2, [r0, #0]
 8016948:	2200      	movs	r2, #0
 801694a:	6042      	str	r2, [r0, #4]
 801694c:	22ff      	movs	r2, #255	; 0xff
 801694e:	7202      	strb	r2, [r0, #8]
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	080289a4 	.word	0x080289a4

08016958 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016958:	4770      	bx	lr

0801695a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801695a:	8081      	strh	r1, [r0, #4]
 801695c:	80c2      	strh	r2, [r0, #6]
 801695e:	4770      	bx	lr

08016960 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016960:	7201      	strb	r1, [r0, #8]
 8016962:	4770      	bx	lr

08016964 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016964:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016968:	4770      	bx	lr

0801696a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801696a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801696e:	4770      	bx	lr

08016970 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016970:	6281      	str	r1, [r0, #40]	; 0x28
 8016972:	4770      	bx	lr

08016974 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016974:	b513      	push	{r0, r1, r4, lr}
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	4604      	mov	r4, r0
 801697a:	4601      	mov	r1, r0
 801697c:	4668      	mov	r0, sp
 801697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016980:	4798      	blx	r3
 8016982:	6823      	ldr	r3, [r4, #0]
 8016984:	4669      	mov	r1, sp
 8016986:	4620      	mov	r0, r4
 8016988:	691b      	ldr	r3, [r3, #16]
 801698a:	4798      	blx	r3
 801698c:	b002      	add	sp, #8
 801698e:	bd10      	pop	{r4, pc}

08016990 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016990:	b510      	push	{r4, lr}
 8016992:	2200      	movs	r2, #0
 8016994:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016998:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801699c:	8002      	strh	r2, [r0, #0]
 801699e:	8042      	strh	r2, [r0, #2]
 80169a0:	8084      	strh	r4, [r0, #4]
 80169a2:	80c1      	strh	r1, [r0, #6]
 80169a4:	bd10      	pop	{r4, pc}

080169a6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80169a6:	2200      	movs	r2, #0
 80169a8:	8002      	strh	r2, [r0, #0]
 80169aa:	8042      	strh	r2, [r0, #2]
 80169ac:	8082      	strh	r2, [r0, #4]
 80169ae:	80c2      	strh	r2, [r0, #6]
 80169b0:	4770      	bx	lr
	...

080169b4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80169b4:	b508      	push	{r3, lr}
 80169b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80169b8:	b928      	cbnz	r0, 80169c6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80169ba:	4b03      	ldr	r3, [pc, #12]	; (80169c8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80169bc:	2127      	movs	r1, #39	; 0x27
 80169be:	4a03      	ldr	r2, [pc, #12]	; (80169cc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80169c0:	4803      	ldr	r0, [pc, #12]	; (80169d0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80169c2:	f00e ff13 	bl	80257ec <__assert_func>
 80169c6:	bd08      	pop	{r3, pc}
 80169c8:	080289b0 	.word	0x080289b0
 80169cc:	08028a94 	.word	0x08028a94
 80169d0:	080289d7 	.word	0x080289d7

080169d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80169d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d8:	b089      	sub	sp, #36	; 0x24
 80169da:	4604      	mov	r4, r0
 80169dc:	6808      	ldr	r0, [r1, #0]
 80169de:	f04f 0a00 	mov.w	sl, #0
 80169e2:	6849      	ldr	r1, [r1, #4]
 80169e4:	ab02      	add	r3, sp, #8
 80169e6:	f04f 0b01 	mov.w	fp, #1
 80169ea:	c303      	stmia	r3!, {r0, r1}
 80169ec:	4b3f      	ldr	r3, [pc, #252]	; (8016aec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80169ee:	4621      	mov	r1, r4
 80169f0:	a804      	add	r0, sp, #16
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	2b01      	cmp	r3, #1
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169fa:	bf1f      	itttt	ne
 80169fc:	f10d 0906 	addne.w	r9, sp, #6
 8016a00:	ae03      	addne	r6, sp, #12
 8016a02:	f10d 050e 	addne.w	r5, sp, #14
 8016a06:	f10d 080a 	addne.w	r8, sp, #10
 8016a0a:	bf01      	itttt	eq
 8016a0c:	f10d 090e 	addeq.w	r9, sp, #14
 8016a10:	f10d 0606 	addeq.w	r6, sp, #6
 8016a14:	ad03      	addeq	r5, sp, #12
 8016a16:	f10d 0808 	addeq.w	r8, sp, #8
 8016a1a:	4798      	blx	r3
 8016a1c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016a20:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d056      	beq.n	8016ad6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	bfa8      	it	ge
 8016a2c:	4613      	movge	r3, r2
 8016a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a32:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016a36:	2f00      	cmp	r7, #0
 8016a38:	dd34      	ble.n	8016aa4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016a3a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016a3e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016a42:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016a46:	4484      	add	ip, r0
 8016a48:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016a4c:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016a50:	fa0f fc8c 	sxth.w	ip, ip
 8016a54:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016a58:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016a5c:	4562      	cmp	r2, ip
 8016a5e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016a62:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016a66:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016a6a:	da29      	bge.n	8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a6c:	4472      	add	r2, lr
 8016a6e:	b212      	sxth	r2, r2
 8016a70:	4290      	cmp	r0, r2
 8016a72:	da25      	bge.n	8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a74:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016a78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016a7c:	4402      	add	r2, r0
 8016a7e:	b212      	sxth	r2, r2
 8016a80:	4293      	cmp	r3, r2
 8016a82:	da1d      	bge.n	8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a84:	440b      	add	r3, r1
 8016a86:	b21b      	sxth	r3, r3
 8016a88:	4298      	cmp	r0, r3
 8016a8a:	da19      	bge.n	8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	a906      	add	r1, sp, #24
 8016a90:	4620      	mov	r0, r4
 8016a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a94:	4798      	blx	r3
 8016a96:	b998      	cbnz	r0, 8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a98:	107f      	asrs	r7, r7, #1
 8016a9a:	f04f 0a01 	mov.w	sl, #1
 8016a9e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016aa2:	e7c6      	b.n	8016a32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016aa4:	d10c      	bne.n	8016ac0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016aa6:	f8ad b006 	strh.w	fp, [sp, #6]
 8016aaa:	f8b8 2000 	ldrh.w	r2, [r8]
 8016aae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016ab2:	440a      	add	r2, r1
 8016ab4:	f8a8 2000 	strh.w	r2, [r8]
 8016ab8:	882b      	ldrh	r3, [r5, #0]
 8016aba:	1a5b      	subs	r3, r3, r1
 8016abc:	802b      	strh	r3, [r5, #0]
 8016abe:	e7ad      	b.n	8016a1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016ac0:	f1ba 0f00 	cmp.w	sl, #0
 8016ac4:	d0f1      	beq.n	8016aaa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016ac6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016aca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	bf08      	it	eq
 8016ad2:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016ad4:	e7e9      	b.n	8016aaa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016ad6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016ada:	429a      	cmp	r2, r3
 8016adc:	bf04      	itt	eq
 8016ade:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016ae2:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016ae4:	b009      	add	sp, #36	; 0x24
 8016ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aea:	bf00      	nop
 8016aec:	2000bb8c 	.word	0x2000bb8c

08016af0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016af0:	2200      	movs	r2, #0
 8016af2:	2101      	movs	r1, #1
 8016af4:	8082      	strh	r2, [r0, #4]
 8016af6:	80c2      	strh	r2, [r0, #6]
 8016af8:	8102      	strh	r2, [r0, #8]
 8016afa:	8142      	strh	r2, [r0, #10]
 8016afc:	8182      	strh	r2, [r0, #12]
 8016afe:	81c2      	strh	r2, [r0, #14]
 8016b00:	8202      	strh	r2, [r0, #16]
 8016b02:	8242      	strh	r2, [r0, #18]
 8016b04:	61c2      	str	r2, [r0, #28]
 8016b06:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016b0a:	6282      	str	r2, [r0, #40]	; 0x28
 8016b0c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016b10:	4905      	ldr	r1, [pc, #20]	; (8016b28 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016b12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016b16:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016b1a:	6001      	str	r1, [r0, #0]
 8016b1c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016b1e:	22ff      	movs	r2, #255	; 0xff
 8016b20:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016b24:	4770      	bx	lr
 8016b26:	bf00      	nop
 8016b28:	08028a1c 	.word	0x08028a1c

08016b2c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016b2c:	4770      	bx	lr

08016b2e <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016b2e:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016b32:	4602      	mov	r2, r0
 8016b34:	cb03      	ldmia	r3!, {r0, r1}
 8016b36:	6010      	str	r0, [r2, #0]
 8016b38:	4610      	mov	r0, r2
 8016b3a:	6051      	str	r1, [r2, #4]
 8016b3c:	4770      	bx	lr

08016b3e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b42:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016b46:	b395      	cbz	r5, 8016bae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016b48:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016b4c:	f1bc 0f00 	cmp.w	ip, #0
 8016b50:	d02d      	beq.n	8016bae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016b52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016b56:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016b5a:	b354      	cbz	r4, 8016bb2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016b5c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016b60:	b33f      	cbz	r7, 8016bb2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016b62:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016b66:	4475      	add	r5, lr
 8016b68:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016b6c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016b70:	45f0      	cmp	r8, lr
 8016b72:	4646      	mov	r6, r8
 8016b74:	4444      	add	r4, r8
 8016b76:	bfa8      	it	ge
 8016b78:	4676      	movge	r6, lr
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	443b      	add	r3, r7
 8016b80:	bfa8      	it	ge
 8016b82:	4611      	movge	r1, r2
 8016b84:	4462      	add	r2, ip
 8016b86:	b22d      	sxth	r5, r5
 8016b88:	8006      	strh	r6, [r0, #0]
 8016b8a:	b224      	sxth	r4, r4
 8016b8c:	8041      	strh	r1, [r0, #2]
 8016b8e:	b212      	sxth	r2, r2
 8016b90:	b21b      	sxth	r3, r3
 8016b92:	42a5      	cmp	r5, r4
 8016b94:	bfac      	ite	ge
 8016b96:	ebc6 0405 	rsbge	r4, r6, r5
 8016b9a:	ebc6 0404 	rsblt	r4, r6, r4
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	bfac      	ite	ge
 8016ba2:	ebc1 0302 	rsbge	r3, r1, r2
 8016ba6:	ebc1 0303 	rsblt	r3, r1, r3
 8016baa:	8084      	strh	r4, [r0, #4]
 8016bac:	80c3      	strh	r3, [r0, #6]
 8016bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bb2:	f8a0 e000 	strh.w	lr, [r0]
 8016bb6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016bba:	8043      	strh	r3, [r0, #2]
 8016bbc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016bc0:	8083      	strh	r3, [r0, #4]
 8016bc2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016bc6:	e7f1      	b.n	8016bac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016bc8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016bc8:	b507      	push	{r0, r1, r2, lr}
 8016bca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016bce:	ab01      	add	r3, sp, #4
 8016bd0:	6809      	ldr	r1, [r1, #0]
 8016bd2:	6800      	ldr	r0, [r0, #0]
 8016bd4:	f003 f8e1 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 8016bd8:	b003      	add	sp, #12
 8016bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016be0 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016be0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016be4:	fb90 f3f2 	sdiv	r3, r0, r2
 8016be8:	fb03 0312 	mls	r3, r3, r2, r0
 8016bec:	4413      	add	r3, r2
 8016bee:	fb93 f0f2 	sdiv	r0, r3, r2
 8016bf2:	fb02 3010 	mls	r0, r2, r0, r3
 8016bf6:	4b0a      	ldr	r3, [pc, #40]	; (8016c20 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016bf8:	285a      	cmp	r0, #90	; 0x5a
 8016bfa:	dc02      	bgt.n	8016c02 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016bfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c00:	4770      	bx	lr
 8016c02:	28b4      	cmp	r0, #180	; 0xb4
 8016c04:	dc02      	bgt.n	8016c0c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016c06:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016c0a:	e7f7      	b.n	8016bfc <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016c0c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016c10:	bfd4      	ite	le
 8016c12:	38b4      	suble	r0, #180	; 0xb4
 8016c14:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016c18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c1c:	4240      	negs	r0, r0
 8016c1e:	4770      	bx	lr
 8016c20:	08028b3e 	.word	0x08028b3e

08016c24 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016c24:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016c28:	f04f 0300 	mov.w	r3, #0
 8016c2c:	bf2c      	ite	cs
 8016c2e:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016c32:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016c36:	1899      	adds	r1, r3, r2
 8016c38:	4288      	cmp	r0, r1
 8016c3a:	bf24      	itt	cs
 8016c3c:	1853      	addcs	r3, r2, r1
 8016c3e:	1a40      	subcs	r0, r0, r1
 8016c40:	0892      	lsrs	r2, r2, #2
 8016c42:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016c46:	d1f6      	bne.n	8016c36 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016c48:	4618      	mov	r0, r3
 8016c4a:	4770      	bx	lr

08016c4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	b508      	push	{r3, lr}
 8016c50:	da05      	bge.n	8016c5e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016c52:	4240      	negs	r0, r0
 8016c54:	f7ff fffa 	bl	8016c4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016c58:	4240      	negs	r0, r0
 8016c5a:	b240      	sxtb	r0, r0
 8016c5c:	bd08      	pop	{r3, pc}
 8016c5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016c62:	dc11      	bgt.n	8016c88 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016c64:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016c68:	dd09      	ble.n	8016c7e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016c6a:	4340      	muls	r0, r0
 8016c6c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016c70:	f7ff ffd8 	bl	8016c24 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016c74:	f7ff ffea 	bl	8016c4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016c78:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016c7c:	e7ed      	b.n	8016c5a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016c7e:	3003      	adds	r0, #3
 8016c80:	4b02      	ldr	r3, [pc, #8]	; (8016c8c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016c82:	10c0      	asrs	r0, r0, #3
 8016c84:	5618      	ldrsb	r0, [r3, r0]
 8016c86:	e7e9      	b.n	8016c5c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016c88:	2000      	movs	r0, #0
 8016c8a:	e7e7      	b.n	8016c5c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016c8c:	08028ae2 	.word	0x08028ae2

08016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c92:	460c      	mov	r4, r1
 8016c94:	1e01      	subs	r1, r0, #0
 8016c96:	4615      	mov	r5, r2
 8016c98:	db01      	blt.n	8016c9e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016c9a:	2c00      	cmp	r4, #0
 8016c9c:	da06      	bge.n	8016cac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016c9e:	4b11      	ldr	r3, [pc, #68]	; (8016ce4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016ca0:	f240 3197 	movw	r1, #919	; 0x397
 8016ca4:	4a10      	ldr	r2, [pc, #64]	; (8016ce8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016ca6:	4811      	ldr	r0, [pc, #68]	; (8016cec <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016ca8:	f00e fda0 	bl	80257ec <__assert_func>
 8016cac:	428c      	cmp	r4, r1
 8016cae:	dd06      	ble.n	8016cbe <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	f7ff ffed 	bl	8016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016cb6:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016cba:	b003      	add	sp, #12
 8016cbc:	bd30      	pop	{r4, r5, pc}
 8016cbe:	4349      	muls	r1, r1
 8016cc0:	fb04 1004 	mla	r0, r4, r4, r1
 8016cc4:	f7ff ffae 	bl	8016c24 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016cc8:	6028      	str	r0, [r5, #0]
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d0f5      	beq.n	8016cba <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016cce:	4602      	mov	r2, r0
 8016cd0:	ab01      	add	r3, sp, #4
 8016cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f003 f85f 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 8016cdc:	f7ff ffb6 	bl	8016c4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016ce0:	e7eb      	b.n	8016cba <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016ce2:	bf00      	nop
 8016ce4:	08028bf4 	.word	0x08028bf4
 8016ce8:	08028cbc 	.word	0x08028cbc
 8016cec:	08028c05 	.word	0x08028c05

08016cf0 <_ZN8touchgfx4LineC1Ev>:
 8016cf0:	b510      	push	{r4, lr}
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	f7ff fefc 	bl	8016af0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016cf8:	4b0c      	ldr	r3, [pc, #48]	; (8016d2c <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016cfa:	2220      	movs	r2, #32
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	6023      	str	r3, [r4, #0]
 8016d00:	2300      	movs	r3, #0
 8016d02:	6422      	str	r2, [r4, #64]	; 0x40
 8016d04:	2212      	movs	r2, #18
 8016d06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016d0a:	6722      	str	r2, [r4, #112]	; 0x70
 8016d0c:	60a3      	str	r3, [r4, #8]
 8016d0e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016d12:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016d16:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d1a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016d1e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016d22:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016d26:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016d2a:	bd10      	pop	{r4, pc}
 8016d2c:	08028c44 	.word	0x08028c44

08016d30 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8016d36:	b085      	sub	sp, #20
 8016d38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016d3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016d40:	1af6      	subs	r6, r6, r3
 8016d42:	eba5 0502 	sub.w	r5, r5, r2
 8016d46:	f040 809b 	bne.w	8016e80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016d4a:	b955      	cbnz	r5, 8016d62 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016d4c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016d50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016d54:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016d58:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016d5c:	b005      	add	sp, #20
 8016d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d62:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8016d66:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016d6a:	f04f 0802 	mov.w	r8, #2
 8016d6e:	463a      	mov	r2, r7
 8016d70:	4629      	mov	r1, r5
 8016d72:	ab03      	add	r3, sp, #12
 8016d74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016d76:	f003 f810 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 8016d7a:	ab03      	add	r3, sp, #12
 8016d7c:	463a      	mov	r2, r7
 8016d7e:	4631      	mov	r1, r6
 8016d80:	fb90 f5f8 	sdiv	r5, r0, r8
 8016d84:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016d86:	f003 f808 	bl	8019d9a <_ZN8touchgfx6muldivElllRl>
 8016d8a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016d8e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8016d92:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8016d96:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016d98:	fb90 f0f8 	sdiv	r0, r0, r8
 8016d9c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016da0:	eba8 0305 	sub.w	r3, r8, r5
 8016da4:	f1ba 0f00 	cmp.w	sl, #0
 8016da8:	f040 80c3 	bne.w	8016f32 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016dac:	64a3      	str	r3, [r4, #72]	; 0x48
 8016dae:	19c3      	adds	r3, r0, r7
 8016db0:	65a3      	str	r3, [r4, #88]	; 0x58
 8016db2:	ebae 0305 	sub.w	r3, lr, r5
 8016db6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016db8:	eb00 030c 	add.w	r3, r0, ip
 8016dbc:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016dbe:	eb05 030e 	add.w	r3, r5, lr
 8016dc2:	6523      	str	r3, [r4, #80]	; 0x50
 8016dc4:	ebac 0300 	sub.w	r3, ip, r0
 8016dc8:	6623      	str	r3, [r4, #96]	; 0x60
 8016dca:	eb05 0308 	add.w	r3, r5, r8
 8016dce:	6563      	str	r3, [r4, #84]	; 0x54
 8016dd0:	1a3b      	subs	r3, r7, r0
 8016dd2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8016dd4:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016dd8:	6663      	str	r3, [r4, #100]	; 0x64
 8016dda:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016de0:	4632      	mov	r2, r6
 8016de2:	9301      	str	r3, [sp, #4]
 8016de4:	9100      	str	r1, [sp, #0]
 8016de6:	f859 bb04 	ldr.w	fp, [r9], #4
 8016dea:	9b00      	ldr	r3, [sp, #0]
 8016dec:	455e      	cmp	r6, fp
 8016dee:	bfa8      	it	ge
 8016df0:	465e      	movge	r6, fp
 8016df2:	455a      	cmp	r2, fp
 8016df4:	bfb8      	it	lt
 8016df6:	465a      	movlt	r2, fp
 8016df8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016dfc:	4559      	cmp	r1, fp
 8016dfe:	bfa8      	it	ge
 8016e00:	4659      	movge	r1, fp
 8016e02:	455b      	cmp	r3, fp
 8016e04:	bfb8      	it	lt
 8016e06:	465b      	movlt	r3, fp
 8016e08:	9300      	str	r3, [sp, #0]
 8016e0a:	9b01      	ldr	r3, [sp, #4]
 8016e0c:	454b      	cmp	r3, r9
 8016e0e:	d1ea      	bne.n	8016de6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8016e10:	f04f 0b20 	mov.w	fp, #32
 8016e14:	b209      	sxth	r1, r1
 8016e16:	b212      	sxth	r2, r2
 8016e18:	f1ba 0f01 	cmp.w	sl, #1
 8016e1c:	b236      	sxth	r6, r6
 8016e1e:	fb91 f9fb 	sdiv	r9, r1, fp
 8016e22:	f9bd 1000 	ldrsh.w	r1, [sp]
 8016e26:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016e2a:	fb92 f2fb 	sdiv	r2, r2, fp
 8016e2e:	fb91 f1fb 	sdiv	r1, r1, fp
 8016e32:	fb96 f6fb 	sdiv	r6, r6, fp
 8016e36:	f102 0201 	add.w	r2, r2, #1
 8016e3a:	f101 0101 	add.w	r1, r1, #1
 8016e3e:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8016e42:	eba1 0109 	sub.w	r1, r1, r9
 8016e46:	eba2 0606 	sub.w	r6, r2, r6
 8016e4a:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016e4e:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8016e52:	d183      	bne.n	8016d5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016e54:	eba8 0305 	sub.w	r3, r8, r5
 8016e58:	64a3      	str	r3, [r4, #72]	; 0x48
 8016e5a:	19c3      	adds	r3, r0, r7
 8016e5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8016e5e:	ebae 0305 	sub.w	r3, lr, r5
 8016e62:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016e64:	eb00 030c 	add.w	r3, r0, ip
 8016e68:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016e6a:	eb05 030e 	add.w	r3, r5, lr
 8016e6e:	4445      	add	r5, r8
 8016e70:	6523      	str	r3, [r4, #80]	; 0x50
 8016e72:	ebac 0300 	sub.w	r3, ip, r0
 8016e76:	1a38      	subs	r0, r7, r0
 8016e78:	6565      	str	r5, [r4, #84]	; 0x54
 8016e7a:	6623      	str	r3, [r4, #96]	; 0x60
 8016e7c:	6660      	str	r0, [r4, #100]	; 0x64
 8016e7e:	e76d      	b.n	8016d5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016e80:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016e84:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016e88:	2d00      	cmp	r5, #0
 8016e8a:	f43f af6e 	beq.w	8016d6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016e8e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016e92:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016e96:	fb93 f2f7 	sdiv	r2, r3, r7
 8016e9a:	fb07 3312 	mls	r3, r7, r2, r3
 8016e9e:	b34b      	cbz	r3, 8016ef4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016ea0:	fb97 f2f3 	sdiv	r2, r7, r3
 8016ea4:	fb03 7712 	mls	r7, r3, r2, r7
 8016ea8:	2f00      	cmp	r7, #0
 8016eaa:	d1f4      	bne.n	8016e96 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016eb2:	bf18      	it	ne
 8016eb4:	fb96 f6f3 	sdivne	r6, r6, r3
 8016eb8:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016ebc:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016ec0:	bf18      	it	ne
 8016ec2:	fb95 f5f3 	sdivne	r5, r5, r3
 8016ec6:	4291      	cmp	r1, r2
 8016ec8:	dd16      	ble.n	8016ef8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016eca:	2d00      	cmp	r5, #0
 8016ecc:	da4d      	bge.n	8016f6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016ece:	4b29      	ldr	r3, [pc, #164]	; (8016f74 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016ed0:	429d      	cmp	r5, r3
 8016ed2:	da27      	bge.n	8016f24 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8016ed4:	426a      	negs	r2, r5
 8016ed6:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016eda:	fb91 f1f3 	sdiv	r1, r1, r3
 8016ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	bfcc      	ite	gt
 8016ee6:	1c4b      	addgt	r3, r1, #1
 8016ee8:	3301      	addle	r3, #1
 8016eea:	fb96 f6f3 	sdiv	r6, r6, r3
 8016eee:	fb95 f5f3 	sdiv	r5, r5, r3
 8016ef2:	e00f      	b.n	8016f14 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8016ef4:	463b      	mov	r3, r7
 8016ef6:	e7d9      	b.n	8016eac <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8016ef8:	2d00      	cmp	r5, #0
 8016efa:	fb92 f2f1 	sdiv	r2, r2, r1
 8016efe:	da13      	bge.n	8016f28 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8016f00:	4269      	negs	r1, r5
 8016f02:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016f06:	fb93 f3f1 	sdiv	r3, r3, r1
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	bfa8      	it	ge
 8016f0e:	461a      	movge	r2, r3
 8016f10:	4356      	muls	r6, r2
 8016f12:	4355      	muls	r5, r2
 8016f14:	fb05 f005 	mul.w	r0, r5, r5
 8016f18:	fb06 0006 	mla	r0, r6, r6, r0
 8016f1c:	f7ff fe82 	bl	8016c24 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016f20:	4607      	mov	r7, r0
 8016f22:	e722      	b.n	8016d6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016f24:	2200      	movs	r2, #0
 8016f26:	e7eb      	b.n	8016f00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016f28:	4629      	mov	r1, r5
 8016f2a:	e7ea      	b.n	8016f02 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016f2c:	4629      	mov	r1, r5
 8016f2e:	2200      	movs	r2, #0
 8016f30:	e7e7      	b.n	8016f02 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016f32:	1a1b      	subs	r3, r3, r0
 8016f34:	64a3      	str	r3, [r4, #72]	; 0x48
 8016f36:	19c3      	adds	r3, r0, r7
 8016f38:	1b5b      	subs	r3, r3, r5
 8016f3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8016f3c:	ebae 0305 	sub.w	r3, lr, r5
 8016f40:	4403      	add	r3, r0
 8016f42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016f44:	eb00 030c 	add.w	r3, r0, ip
 8016f48:	442b      	add	r3, r5
 8016f4a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016f4c:	eb05 030e 	add.w	r3, r5, lr
 8016f50:	4403      	add	r3, r0
 8016f52:	6523      	str	r3, [r4, #80]	; 0x50
 8016f54:	ebac 0300 	sub.w	r3, ip, r0
 8016f58:	442b      	add	r3, r5
 8016f5a:	6623      	str	r3, [r4, #96]	; 0x60
 8016f5c:	eb05 0308 	add.w	r3, r5, r8
 8016f60:	1a1b      	subs	r3, r3, r0
 8016f62:	6563      	str	r3, [r4, #84]	; 0x54
 8016f64:	1a3b      	subs	r3, r7, r0
 8016f66:	1b5b      	subs	r3, r3, r5
 8016f68:	e733      	b.n	8016dd2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016f6a:	4295      	cmp	r5, r2
 8016f6c:	ddde      	ble.n	8016f2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016f6e:	462a      	mov	r2, r5
 8016f70:	e7b1      	b.n	8016ed6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8016f72:	bf00      	nop
 8016f74:	ffff4afc 	.word	0xffff4afc

08016f78 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016f78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016f7a:	428b      	cmp	r3, r1
 8016f7c:	d102      	bne.n	8016f84 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016f7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016f80:	4293      	cmp	r3, r2
 8016f82:	d003      	beq.n	8016f8c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016f84:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016f88:	f7ff bed2 	b.w	8016d30 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016f8c:	4770      	bx	lr

08016f8e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016f8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016f90:	428b      	cmp	r3, r1
 8016f92:	d102      	bne.n	8016f9a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016f94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d003      	beq.n	8016fa2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016f9a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016f9e:	f7ff bec7 	b.w	8016d30 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016fa2:	4770      	bx	lr

08016fa4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016fa4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016fa8:	f7ff bec2 	b.w	8016d30 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016fac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fb0:	b0b3      	sub	sp, #204	; 0xcc
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	460a      	mov	r2, r1
 8016fb6:	4601      	mov	r1, r0
 8016fb8:	a804      	add	r0, sp, #16
 8016fba:	ad32      	add	r5, sp, #200	; 0xc8
 8016fbc:	f00d f84a 	bl	8024054 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016fc4:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016fca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016fcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016fce:	1ac0      	subs	r0, r0, r3
 8016fd0:	eba1 0102 	sub.w	r1, r1, r2
 8016fd4:	d43c      	bmi.n	8017050 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016fd6:	2900      	cmp	r1, #0
 8016fd8:	462a      	mov	r2, r5
 8016fda:	db33      	blt.n	8017044 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016fdc:	f7ff fe58 	bl	8016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016fe0:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016fe4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016fe6:	a804      	add	r0, sp, #16
 8016fe8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016fea:	f00d f9fc 	bl	80243e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016fee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016ff0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016ff2:	a804      	add	r0, sp, #16
 8016ff4:	f00d f986 	bl	8024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016ff8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016ffc:	2b01      	cmp	r3, #1
 8016ffe:	d137      	bne.n	8017070 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017000:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017002:	2eb3      	cmp	r6, #179	; 0xb3
 8017004:	dc34      	bgt.n	8017070 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017006:	eba7 0906 	sub.w	r9, r7, r6
 801700a:	4648      	mov	r0, r9
 801700c:	f7ff fde8 	bl	8016be0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017010:	a902      	add	r1, sp, #8
 8017012:	9002      	str	r0, [sp, #8]
 8017014:	4628      	mov	r0, r5
 8017016:	f7ff fdd7 	bl	8016bc8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801701a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801701c:	eb00 0801 	add.w	r8, r0, r1
 8017020:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017024:	f7ff fddc 	bl	8016be0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017028:	a903      	add	r1, sp, #12
 801702a:	9003      	str	r0, [sp, #12]
 801702c:	4628      	mov	r0, r5
 801702e:	f7ff fdcb 	bl	8016bc8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017032:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017034:	4641      	mov	r1, r8
 8017036:	1a12      	subs	r2, r2, r0
 8017038:	a804      	add	r0, sp, #16
 801703a:	f00d f963 	bl	8024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801703e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017040:	441e      	add	r6, r3
 8017042:	e7de      	b.n	8017002 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8017044:	4249      	negs	r1, r1
 8017046:	f7ff fe23 	bl	8016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801704a:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801704e:	e7c9      	b.n	8016fe4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017050:	2900      	cmp	r1, #0
 8017052:	f1c0 0000 	rsb	r0, r0, #0
 8017056:	462a      	mov	r2, r5
 8017058:	db04      	blt.n	8017064 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801705a:	f7ff fe19 	bl	8016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801705e:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8017062:	e7bf      	b.n	8016fe4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017064:	4249      	negs	r1, r1
 8017066:	f7ff fe13 	bl	8016c90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801706a:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801706e:	e7b9      	b.n	8016fe4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017070:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017072:	a804      	add	r0, sp, #16
 8017074:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017076:	f00d f945 	bl	8024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801707a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801707c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801707e:	a804      	add	r0, sp, #16
 8017080:	f00d f940 	bl	8024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017084:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017088:	2b01      	cmp	r3, #1
 801708a:	d123      	bne.n	80170d4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801708c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801708e:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8017092:	2e00      	cmp	r6, #0
 8017094:	dd1e      	ble.n	80170d4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017096:	eb06 0907 	add.w	r9, r6, r7
 801709a:	4648      	mov	r0, r9
 801709c:	f7ff fda0 	bl	8016be0 <_ZN8touchgfx7CWRUtil4sineEi>
 80170a0:	a902      	add	r1, sp, #8
 80170a2:	9002      	str	r0, [sp, #8]
 80170a4:	4628      	mov	r0, r5
 80170a6:	f7ff fd8f 	bl	8016bc8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80170aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80170ac:	eb00 0801 	add.w	r8, r0, r1
 80170b0:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80170b4:	f7ff fd94 	bl	8016be0 <_ZN8touchgfx7CWRUtil4sineEi>
 80170b8:	a903      	add	r1, sp, #12
 80170ba:	9003      	str	r0, [sp, #12]
 80170bc:	4628      	mov	r0, r5
 80170be:	f7ff fd83 	bl	8016bc8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80170c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80170c4:	4641      	mov	r1, r8
 80170c6:	1a12      	subs	r2, r2, r0
 80170c8:	a804      	add	r0, sp, #16
 80170ca:	f00d f91b 	bl	8024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80170ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80170d0:	1af6      	subs	r6, r6, r3
 80170d2:	e7de      	b.n	8017092 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 80170d4:	a804      	add	r0, sp, #16
 80170d6:	f00d fa8a 	bl	80245ee <_ZN8touchgfx6Canvas6renderEv>
 80170da:	4604      	mov	r4, r0
 80170dc:	a804      	add	r0, sp, #16
 80170de:	f00d fac7 	bl	8024670 <_ZN8touchgfx6CanvasD1Ev>
 80170e2:	4620      	mov	r0, r4
 80170e4:	b033      	add	sp, #204	; 0xcc
 80170e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080170ea <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80170ea:	b570      	push	{r4, r5, r6, lr}
 80170ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80170f2:	4604      	mov	r4, r0
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d00c      	beq.n	8017112 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80170f8:	f850 3b26 	ldr.w	r3, [r0], #38
 80170fc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80170fe:	f7f9 fbed 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017102:	2300      	movs	r3, #0
 8017104:	4601      	mov	r1, r0
 8017106:	46ac      	mov	ip, r5
 8017108:	4620      	mov	r0, r4
 801710a:	461a      	mov	r2, r3
 801710c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017110:	4760      	bx	ip
 8017112:	2000      	movs	r0, #0
 8017114:	bd70      	pop	{r4, r5, r6, pc}

08017116 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801711c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801711e:	429a      	cmp	r2, r3
 8017120:	d016      	beq.n	8017150 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8017122:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8017126:	4620      	mov	r0, r4
 8017128:	f7f8 f8be 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 801712c:	6803      	ldr	r3, [r0, #0]
 801712e:	4605      	mov	r5, r0
 8017130:	4620      	mov	r0, r4
 8017132:	69de      	ldr	r6, [r3, #28]
 8017134:	f7f8 f8d4 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017138:	4607      	mov	r7, r0
 801713a:	4620      	mov	r0, r4
 801713c:	f7f9 fbce 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017140:	2300      	movs	r3, #0
 8017142:	4602      	mov	r2, r0
 8017144:	4639      	mov	r1, r7
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	4628      	mov	r0, r5
 801714a:	47b0      	blx	r6
 801714c:	b003      	add	sp, #12
 801714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017150:	2000      	movs	r0, #0
 8017152:	e7fb      	b.n	801714c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08017154 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017154:	b40e      	push	{r1, r2, r3}
 8017156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801715e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017160:	b09b      	sub	sp, #108	; 0x6c
 8017162:	4604      	mov	r4, r0
 8017164:	429a      	cmp	r2, r3
 8017166:	d03f      	beq.n	80171e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8017168:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801716c:	ab22      	add	r3, sp, #136	; 0x88
 801716e:	4638      	mov	r0, r7
 8017170:	9303      	str	r3, [sp, #12]
 8017172:	f7f8 f899 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017176:	6803      	ldr	r3, [r0, #0]
 8017178:	4680      	mov	r8, r0
 801717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801717c:	4798      	blx	r3
 801717e:	4606      	mov	r6, r0
 8017180:	b205      	sxth	r5, r0
 8017182:	a804      	add	r0, sp, #16
 8017184:	f003 feb4 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8017188:	f8d8 3000 	ldr.w	r3, [r8]
 801718c:	4640      	mov	r0, r8
 801718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017190:	4798      	blx	r3
 8017192:	9a03      	ldr	r2, [sp, #12]
 8017194:	4603      	mov	r3, r0
 8017196:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017198:	a804      	add	r0, sp, #16
 801719a:	f003 fec6 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801719e:	4638      	mov	r0, r7
 80171a0:	f7f8 f89e 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80171a4:	4680      	mov	r8, r0
 80171a6:	4638      	mov	r0, r7
 80171a8:	f7f8 f87e 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80171ac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80171b0:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80171b4:	4642      	mov	r2, r8
 80171b6:	9300      	str	r3, [sp, #0]
 80171b8:	4603      	mov	r3, r0
 80171ba:	a804      	add	r0, sp, #16
 80171bc:	f001 fbc8 	bl	8018950 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80171c0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80171c4:	b203      	sxth	r3, r0
 80171c6:	18a9      	adds	r1, r5, r2
 80171c8:	2900      	cmp	r1, #0
 80171ca:	dd0b      	ble.n	80171e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80171cc:	3b01      	subs	r3, #1
 80171ce:	fb13 f302 	smulbb	r3, r3, r2
 80171d2:	fb16 3300 	smlabb	r3, r6, r0, r3
 80171d6:	b21d      	sxth	r5, r3
 80171d8:	4628      	mov	r0, r5
 80171da:	b01b      	add	sp, #108	; 0x6c
 80171dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171e0:	b003      	add	sp, #12
 80171e2:	4770      	bx	lr
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	dcf7      	bgt.n	80171d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 80171e8:	2500      	movs	r5, #0
 80171ea:	e7f5      	b.n	80171d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

080171ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80171ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171f4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80171f6:	b08d      	sub	sp, #52	; 0x34
 80171f8:	4604      	mov	r4, r0
 80171fa:	429e      	cmp	r6, r3
 80171fc:	4688      	mov	r8, r1
 80171fe:	d04b      	beq.n	8017298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017200:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017204:	4628      	mov	r0, r5
 8017206:	f7f8 f84f 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 801720a:	4607      	mov	r7, r0
 801720c:	2800      	cmp	r0, #0
 801720e:	d043      	beq.n	8017298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017210:	4628      	mov	r0, r5
 8017212:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017216:	f7f8 f87b 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
 801721a:	4b21      	ldr	r3, [pc, #132]	; (80172a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801721c:	4628      	mov	r0, r5
 801721e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017228:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801722c:	785e      	ldrb	r6, [r3, #1]
 801722e:	f7f8 f857 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017234:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017238:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801723c:	9309      	str	r3, [sp, #36]	; 0x24
 801723e:	4b19      	ldr	r3, [pc, #100]	; (80172a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8017240:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801724a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801724e:	9707      	str	r7, [sp, #28]
 8017250:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017254:	f88d 6020 	strb.w	r6, [sp, #32]
 8017258:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801725c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017260:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017264:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017268:	b10a      	cbz	r2, 801726e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801726a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801726c:	b906      	cbnz	r6, 8017270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801726e:	689e      	ldr	r6, [r3, #8]
 8017270:	af05      	add	r7, sp, #20
 8017272:	4621      	mov	r1, r4
 8017274:	4638      	mov	r0, r7
 8017276:	f002 fcf6 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801727a:	4628      	mov	r0, r5
 801727c:	f7f9 fb2e 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017280:	2300      	movs	r3, #0
 8017282:	9001      	str	r0, [sp, #4]
 8017284:	4630      	mov	r0, r6
 8017286:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801728a:	ab07      	add	r3, sp, #28
 801728c:	9300      	str	r3, [sp, #0]
 801728e:	4643      	mov	r3, r8
 8017290:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017294:	f000 fd80 	bl	8017d98 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017298:	b00d      	add	sp, #52	; 0x34
 801729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729e:	bf00      	nop
 80172a0:	2000bc24 	.word	0x2000bc24
 80172a4:	2000bb94 	.word	0x2000bb94

080172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80172a8:	b570      	push	{r4, r5, r6, lr}
 80172aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172ae:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80172b0:	4604      	mov	r4, r0
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d021      	beq.n	80172fa <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80172b6:	6803      	ldr	r3, [r0, #0]
 80172b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172ba:	4798      	blx	r3
 80172bc:	6823      	ldr	r3, [r4, #0]
 80172be:	4605      	mov	r5, r0
 80172c0:	4620      	mov	r0, r4
 80172c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80172c4:	4798      	blx	r3
 80172c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80172ca:	4606      	mov	r6, r0
 80172cc:	b22d      	sxth	r5, r5
 80172ce:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80172d2:	6823      	ldr	r3, [r4, #0]
 80172d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172d6:	d109      	bne.n	80172ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 80172d8:	4629      	mov	r1, r5
 80172da:	4620      	mov	r0, r4
 80172dc:	4798      	blx	r3
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	4631      	mov	r1, r6
 80172e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172e4:	4620      	mov	r0, r4
 80172e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172ea:	4718      	bx	r3
 80172ec:	4601      	mov	r1, r0
 80172ee:	4620      	mov	r0, r4
 80172f0:	4798      	blx	r3
 80172f2:	6823      	ldr	r3, [r4, #0]
 80172f4:	4629      	mov	r1, r5
 80172f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172f8:	e7f4      	b.n	80172e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80172fa:	bd70      	pop	{r4, r5, r6, pc}

080172fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80172fc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017300:	84c1      	strh	r1, [r0, #38]	; 0x26
 8017302:	b922      	cbnz	r2, 801730e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017304:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017308:	b90b      	cbnz	r3, 801730e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801730a:	f7ff bfcd 	b.w	80172a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801730e:	4770      	bx	lr

08017310 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017310:	2300      	movs	r3, #0
 8017312:	8003      	strh	r3, [r0, #0]
 8017314:	8043      	strh	r3, [r0, #2]
 8017316:	8083      	strh	r3, [r0, #4]
 8017318:	80c3      	strh	r3, [r0, #6]
 801731a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801731e:	b91b      	cbnz	r3, 8017328 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017320:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017324:	2bff      	cmp	r3, #255	; 0xff
 8017326:	d103      	bne.n	8017330 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017328:	890b      	ldrh	r3, [r1, #8]
 801732a:	8083      	strh	r3, [r0, #4]
 801732c:	894b      	ldrh	r3, [r1, #10]
 801732e:	80c3      	strh	r3, [r0, #6]
 8017330:	4770      	bx	lr
	...

08017334 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017336:	4604      	mov	r4, r0
 8017338:	466b      	mov	r3, sp
 801733a:	6808      	ldr	r0, [r1, #0]
 801733c:	6849      	ldr	r1, [r1, #4]
 801733e:	c303      	stmia	r3!, {r0, r1}
 8017340:	6823      	ldr	r3, [r4, #0]
 8017342:	4669      	mov	r1, sp
 8017344:	4620      	mov	r0, r4
 8017346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017348:	4798      	blx	r3
 801734a:	4b08      	ldr	r3, [pc, #32]	; (801736c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017352:	b10a      	cbz	r2, 8017358 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017354:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017356:	b900      	cbnz	r0, 801735a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017358:	6898      	ldr	r0, [r3, #8]
 801735a:	6803      	ldr	r3, [r0, #0]
 801735c:	4669      	mov	r1, sp
 801735e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017360:	69dd      	ldr	r5, [r3, #28]
 8017362:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017366:	47a8      	blx	r5
 8017368:	b003      	add	sp, #12
 801736a:	bd30      	pop	{r4, r5, pc}
 801736c:	2000bb94 	.word	0x2000bb94

08017370 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017370:	b570      	push	{r4, r5, r6, lr}
 8017372:	6803      	ldr	r3, [r0, #0]
 8017374:	4604      	mov	r4, r0
 8017376:	4615      	mov	r5, r2
 8017378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801737a:	4798      	blx	r3
 801737c:	6823      	ldr	r3, [r4, #0]
 801737e:	4629      	mov	r1, r5
 8017380:	4620      	mov	r0, r4
 8017382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017388:	4718      	bx	r3

0801738a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801738a:	b570      	push	{r4, r5, r6, lr}
 801738c:	6803      	ldr	r3, [r0, #0]
 801738e:	4604      	mov	r4, r0
 8017390:	460e      	mov	r6, r1
 8017392:	4615      	mov	r5, r2
 8017394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017396:	4798      	blx	r3
 8017398:	8030      	strh	r0, [r6, #0]
 801739a:	6823      	ldr	r3, [r4, #0]
 801739c:	4620      	mov	r0, r4
 801739e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80173a0:	4798      	blx	r3
 80173a2:	8028      	strh	r0, [r5, #0]
 80173a4:	bd70      	pop	{r4, r5, r6, pc}

080173a6 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80173a6:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 80173aa:	4770      	bx	lr

080173ac <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 80173ac:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80173b0:	4770      	bx	lr

080173b2 <_ZN8touchgfx10TiledImageD1Ev>:
 80173b2:	4770      	bx	lr

080173b4 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	4604      	mov	r4, r0
 80173b8:	f000 fa40 	bl	801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	4620      	mov	r0, r4
 80173c0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80173c4:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 80173c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80173ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ce:	4718      	bx	r3

080173d0 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d2:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80173d6:	4605      	mov	r5, r0
 80173d8:	8541      	strh	r1, [r0, #42]	; 0x2a
 80173da:	4630      	mov	r0, r6
 80173dc:	f004 fcb4 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173e0:	b1a0      	cbz	r0, 801740c <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 80173e2:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 80173e6:	4630      	mov	r0, r6
 80173e8:	f004 fcae 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173ec:	fb97 f4f0 	sdiv	r4, r7, r0
 80173f0:	fb04 7410 	mls	r4, r4, r0, r7
 80173f4:	4630      	mov	r0, r6
 80173f6:	f004 fca7 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173fa:	4404      	add	r4, r0
 80173fc:	4630      	mov	r0, r6
 80173fe:	f004 fca3 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017402:	fb94 f3f0 	sdiv	r3, r4, r0
 8017406:	fb03 4010 	mls	r0, r3, r0, r4
 801740a:	8568      	strh	r0, [r5, #42]	; 0x2a
 801740c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801740e <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801740e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017410:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017414:	4605      	mov	r5, r0
 8017416:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017418:	4630      	mov	r0, r6
 801741a:	f004 fccf 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801741e:	b1a0      	cbz	r0, 801744a <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8017420:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8017424:	4630      	mov	r0, r6
 8017426:	f004 fcc9 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801742a:	fb97 f4f0 	sdiv	r4, r7, r0
 801742e:	fb04 7410 	mls	r4, r4, r0, r7
 8017432:	4630      	mov	r0, r6
 8017434:	f004 fcc2 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017438:	4404      	add	r4, r0
 801743a:	4630      	mov	r0, r6
 801743c:	f004 fcbe 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017440:	fb94 f3f0 	sdiv	r3, r4, r0
 8017444:	fb03 4010 	mls	r0, r3, r0, r4
 8017448:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801744c <_ZN8touchgfx10TiledImageD0Ev>:
 801744c:	b510      	push	{r4, lr}
 801744e:	4604      	mov	r4, r0
 8017450:	2130      	movs	r1, #48	; 0x30
 8017452:	f00e f9a0 	bl	8025796 <_ZdlPvj>
 8017456:	4620      	mov	r0, r4
 8017458:	bd10      	pop	{r4, pc}
	...

0801745c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8017464:	b093      	sub	sp, #76	; 0x4c
 8017466:	4607      	mov	r7, r0
 8017468:	460e      	mov	r6, r1
 801746a:	4658      	mov	r0, fp
 801746c:	f004 fc6c 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017470:	4605      	mov	r5, r0
 8017472:	4658      	mov	r0, fp
 8017474:	f004 fca2 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017478:	4680      	mov	r8, r0
 801747a:	2d00      	cmp	r5, #0
 801747c:	f000 80c5 	beq.w	801760a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017480:	2800      	cmp	r0, #0
 8017482:	f000 80c2 	beq.w	801760a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017486:	2300      	movs	r3, #0
 8017488:	a90e      	add	r1, sp, #56	; 0x38
 801748a:	4638      	mov	r0, r7
 801748c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017494:	4798      	blx	r3
 8017496:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801749a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801749e:	88b1      	ldrh	r1, [r6, #4]
 80174a0:	189c      	adds	r4, r3, r2
 80174a2:	440b      	add	r3, r1
 80174a4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80174a8:	fa02 f383 	sxtah	r3, r2, r3
 80174ac:	3b01      	subs	r3, #1
 80174ae:	fb93 f3f5 	sdiv	r3, r3, r5
 80174b2:	fb94 f4f5 	sdiv	r4, r4, r5
 80174b6:	fb13 f305 	smulbb	r3, r3, r5
 80174ba:	fb14 f405 	smulbb	r4, r4, r5
 80174be:	b21b      	sxth	r3, r3
 80174c0:	1aa4      	subs	r4, r4, r2
 80174c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80174c4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80174c8:	b2a4      	uxth	r4, r4
 80174ca:	185a      	adds	r2, r3, r1
 80174cc:	fb92 f2f8 	sdiv	r2, r2, r8
 80174d0:	fb12 f208 	smulbb	r2, r2, r8
 80174d4:	1a52      	subs	r2, r2, r1
 80174d6:	b212      	sxth	r2, r2
 80174d8:	920c      	str	r2, [sp, #48]	; 0x30
 80174da:	88f2      	ldrh	r2, [r6, #6]
 80174dc:	4413      	add	r3, r2
 80174de:	fa01 f383 	sxtah	r3, r1, r3
 80174e2:	3b01      	subs	r3, #1
 80174e4:	fb93 f3f8 	sdiv	r3, r3, r8
 80174e8:	fb13 f308 	smulbb	r3, r3, r8
 80174ec:	b21b      	sxth	r3, r3
 80174ee:	930d      	str	r3, [sp, #52]	; 0x34
 80174f0:	1963      	adds	r3, r4, r5
 80174f2:	fa1f fa83 	uxth.w	sl, r3
 80174f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174f8:	b223      	sxth	r3, r4
 80174fa:	4293      	cmp	r3, r2
 80174fc:	9305      	str	r3, [sp, #20]
 80174fe:	f300 8084 	bgt.w	801760a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017502:	fa0f f38a 	sxth.w	r3, sl
 8017506:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801750a:	9309      	str	r3, [sp, #36]	; 0x24
 801750c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801750e:	4599      	cmp	r9, r3
 8017510:	dd04      	ble.n	801751c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017512:	442c      	add	r4, r5
 8017514:	eb05 030a 	add.w	r3, r5, sl
 8017518:	b2a4      	uxth	r4, r4
 801751a:	e7ea      	b.n	80174f2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801751c:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017520:	88b2      	ldrh	r2, [r6, #4]
 8017522:	4462      	add	r2, ip
 8017524:	b292      	uxth	r2, r2
 8017526:	b213      	sxth	r3, r2
 8017528:	9308      	str	r3, [sp, #32]
 801752a:	fa1f f389 	uxth.w	r3, r9
 801752e:	eb08 0103 	add.w	r1, r8, r3
 8017532:	9307      	str	r3, [sp, #28]
 8017534:	b289      	uxth	r1, r1
 8017536:	b208      	sxth	r0, r1
 8017538:	9006      	str	r0, [sp, #24]
 801753a:	9805      	ldr	r0, [sp, #20]
 801753c:	4603      	mov	r3, r0
 801753e:	9808      	ldr	r0, [sp, #32]
 8017540:	4283      	cmp	r3, r0
 8017542:	da5e      	bge.n	8017602 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017546:	4584      	cmp	ip, r0
 8017548:	da5b      	bge.n	8017602 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801754a:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801754e:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017552:	4486      	add	lr, r0
 8017554:	fa1f fe8e 	uxth.w	lr, lr
 8017558:	fa0f f38e 	sxth.w	r3, lr
 801755c:	4599      	cmp	r9, r3
 801755e:	930a      	str	r3, [sp, #40]	; 0x28
 8017560:	da4f      	bge.n	8017602 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017562:	9b06      	ldr	r3, [sp, #24]
 8017564:	4298      	cmp	r0, r3
 8017566:	da4c      	bge.n	8017602 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017568:	9b05      	ldr	r3, [sp, #20]
 801756a:	459c      	cmp	ip, r3
 801756c:	bfb8      	it	lt
 801756e:	469c      	movlt	ip, r3
 8017570:	4548      	cmp	r0, r9
 8017572:	9b08      	ldr	r3, [sp, #32]
 8017574:	bfb8      	it	lt
 8017576:	4648      	movlt	r0, r9
 8017578:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801757c:	4699      	mov	r9, r3
 801757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017580:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8017584:	4599      	cmp	r9, r3
 8017586:	bfc8      	it	gt
 8017588:	4652      	movgt	r2, sl
 801758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801758c:	eba2 020c 	sub.w	r2, r2, ip
 8017590:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017594:	9a06      	ldr	r2, [sp, #24]
 8017596:	4293      	cmp	r3, r2
 8017598:	bfd8      	it	le
 801759a:	4671      	movle	r1, lr
 801759c:	1a09      	subs	r1, r1, r0
 801759e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80175a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80175a6:	9b07      	ldr	r3, [sp, #28]
 80175a8:	1b12      	subs	r2, r2, r4
 80175aa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80175ae:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80175b2:	1ad2      	subs	r2, r2, r3
 80175b4:	4b16      	ldr	r3, [pc, #88]	; (8017610 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80175b6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 80175c0:	b109      	cbz	r1, 80175c6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 80175c2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80175c4:	b900      	cbnz	r0, 80175c8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 80175c6:	6890      	ldr	r0, [r2, #8]
 80175c8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80175cc:	f04f 0c01 	mov.w	ip, #1
 80175d0:	9b07      	ldr	r3, [sp, #28]
 80175d2:	6801      	ldr	r1, [r0, #0]
 80175d4:	4413      	add	r3, r2
 80175d6:	f8cd c008 	str.w	ip, [sp, #8]
 80175da:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80175de:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80175e2:	b21b      	sxth	r3, r3
 80175e4:	4422      	add	r2, r4
 80175e6:	f8cd c004 	str.w	ip, [sp, #4]
 80175ea:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80175ee:	b212      	sxth	r2, r2
 80175f0:	f8cd c000 	str.w	ip, [sp]
 80175f4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80175f8:	4659      	mov	r1, fp
 80175fa:	47c8      	blx	r9
 80175fc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017600:	e784      	b.n	801750c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017602:	2300      	movs	r3, #0
 8017604:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017608:	e7cb      	b.n	80175a2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801760a:	b013      	add	sp, #76	; 0x4c
 801760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017610:	2000bb94 	.word	0x2000bb94

08017614 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017618:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801761c:	4606      	mov	r6, r0
 801761e:	4689      	mov	r9, r1
 8017620:	2bff      	cmp	r3, #255	; 0xff
 8017622:	d008      	beq.n	8017636 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017624:	2300      	movs	r3, #0
 8017626:	8003      	strh	r3, [r0, #0]
 8017628:	8043      	strh	r3, [r0, #2]
 801762a:	8083      	strh	r3, [r0, #4]
 801762c:	4630      	mov	r0, r6
 801762e:	80f3      	strh	r3, [r6, #6]
 8017630:	b003      	add	sp, #12
 8017632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017636:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801763a:	4668      	mov	r0, sp
 801763c:	4659      	mov	r1, fp
 801763e:	f004 fbf7 	bl	801be30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017642:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8017646:	4658      	mov	r0, fp
 8017648:	f9bd 7000 	ldrsh.w	r7, [sp]
 801764c:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8017650:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017654:	f004 fb78 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017658:	4284      	cmp	r4, r0
 801765a:	d10d      	bne.n	8017678 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801765c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017660:	4658      	mov	r0, fp
 8017662:	f004 fbab 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017666:	4580      	cmp	r8, r0
 8017668:	d12a      	bne.n	80176c0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801766a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801766e:	8037      	strh	r7, [r6, #0]
 8017670:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017674:	80b5      	strh	r5, [r6, #4]
 8017676:	e7d9      	b.n	801762c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017678:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801767c:	4658      	mov	r0, fp
 801767e:	f004 fb63 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017682:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017686:	1b7f      	subs	r7, r7, r5
 8017688:	b2a3      	uxth	r3, r4
 801768a:	b2bd      	uxth	r5, r7
 801768c:	b22f      	sxth	r7, r5
 801768e:	4428      	add	r0, r5
 8017690:	2f00      	cmp	r7, #0
 8017692:	b280      	uxth	r0, r0
 8017694:	bfb8      	it	lt
 8017696:	18ed      	addlt	r5, r5, r3
 8017698:	4403      	add	r3, r0
 801769a:	bfac      	ite	ge
 801769c:	4625      	movge	r5, r4
 801769e:	2700      	movlt	r7, #0
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	bfb8      	it	lt
 80176a4:	b22d      	sxthlt	r5, r5
 80176a6:	b219      	sxth	r1, r3
 80176a8:	bfb8      	it	lt
 80176aa:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 80176ae:	4291      	cmp	r1, r2
 80176b0:	bfc4      	itt	gt
 80176b2:	1a9c      	subgt	r4, r3, r2
 80176b4:	b224      	sxthgt	r4, r4
 80176b6:	42ac      	cmp	r4, r5
 80176b8:	bfc4      	itt	gt
 80176ba:	b207      	sxthgt	r7, r0
 80176bc:	4625      	movgt	r5, r4
 80176be:	e7cf      	b.n	8017660 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 80176c0:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 80176c4:	4658      	mov	r0, fp
 80176c6:	f004 fb79 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176ca:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80176ce:	ebaa 0404 	sub.w	r4, sl, r4
 80176d2:	fa1f f288 	uxth.w	r2, r8
 80176d6:	b2a4      	uxth	r4, r4
 80176d8:	fa0f fa84 	sxth.w	sl, r4
 80176dc:	4420      	add	r0, r4
 80176de:	f1ba 0f00 	cmp.w	sl, #0
 80176e2:	b280      	uxth	r0, r0
 80176e4:	bfb8      	it	lt
 80176e6:	18a3      	addlt	r3, r4, r2
 80176e8:	4402      	add	r2, r0
 80176ea:	bfac      	ite	ge
 80176ec:	4643      	movge	r3, r8
 80176ee:	f04f 0a00 	movlt.w	sl, #0
 80176f2:	b292      	uxth	r2, r2
 80176f4:	bfb8      	it	lt
 80176f6:	b21b      	sxthlt	r3, r3
 80176f8:	b214      	sxth	r4, r2
 80176fa:	bfb8      	it	lt
 80176fc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017700:	428c      	cmp	r4, r1
 8017702:	bfc4      	itt	gt
 8017704:	eba2 0801 	subgt.w	r8, r2, r1
 8017708:	fa0f f888 	sxthgt.w	r8, r8
 801770c:	4543      	cmp	r3, r8
 801770e:	bfbc      	itt	lt
 8017710:	fa0f fa80 	sxthlt.w	sl, r0
 8017714:	4643      	movlt	r3, r8
 8017716:	e7aa      	b.n	801766e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017718 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801771c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017720:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017722:	4604      	mov	r4, r0
 8017724:	429a      	cmp	r2, r3
 8017726:	d018      	beq.n	801775a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8017728:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801772c:	4628      	mov	r0, r5
 801772e:	f7f7 fdbb 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017732:	6803      	ldr	r3, [r0, #0]
 8017734:	4606      	mov	r6, r0
 8017736:	4628      	mov	r0, r5
 8017738:	69df      	ldr	r7, [r3, #28]
 801773a:	f7f7 fdd1 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801773e:	4680      	mov	r8, r0
 8017740:	4628      	mov	r0, r5
 8017742:	f7f9 f8cb 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017746:	2300      	movs	r3, #0
 8017748:	4602      	mov	r2, r0
 801774a:	4641      	mov	r1, r8
 801774c:	9300      	str	r3, [sp, #0]
 801774e:	4630      	mov	r0, r6
 8017750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017752:	47b8      	blx	r7
 8017754:	b002      	add	sp, #8
 8017756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801775a:	2000      	movs	r0, #0
 801775c:	e7fa      	b.n	8017754 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801775e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801775e:	b570      	push	{r4, r5, r6, lr}
 8017760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017764:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017766:	4604      	mov	r4, r0
 8017768:	429a      	cmp	r2, r3
 801776a:	d00c      	beq.n	8017786 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801776c:	f850 3b26 	ldr.w	r3, [r0], #38
 8017770:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017772:	f7f9 f8b3 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017776:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017778:	4601      	mov	r1, r0
 801777a:	46ac      	mov	ip, r5
 801777c:	4620      	mov	r0, r4
 801777e:	2300      	movs	r3, #0
 8017780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017784:	4760      	bx	ip
 8017786:	2000      	movs	r0, #0
 8017788:	bd70      	pop	{r4, r5, r6, pc}
	...

0801778c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017794:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017796:	b08d      	sub	sp, #52	; 0x34
 8017798:	4604      	mov	r4, r0
 801779a:	429e      	cmp	r6, r3
 801779c:	460f      	mov	r7, r1
 801779e:	d048      	beq.n	8017832 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80177a0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80177a4:	4628      	mov	r0, r5
 80177a6:	f7f7 fd7f 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80177aa:	4680      	mov	r8, r0
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d040      	beq.n	8017832 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80177b0:	4628      	mov	r0, r5
 80177b2:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80177b6:	f7f7 fdab 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
 80177ba:	4b1f      	ldr	r3, [pc, #124]	; (8017838 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 80177bc:	4628      	mov	r0, r5
 80177be:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80177c8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80177cc:	785e      	ldrb	r6, [r3, #1]
 80177ce:	f7f7 fd87 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80177d2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80177d6:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80177da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80177dc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80177e0:	f88d 6020 	strb.w	r6, [sp, #32]
 80177e4:	ae05      	add	r6, sp, #20
 80177e6:	9309      	str	r3, [sp, #36]	; 0x24
 80177e8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80177ec:	f8cd 801c 	str.w	r8, [sp, #28]
 80177f0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80177f4:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80177f8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80177fc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017800:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017804:	f7f8 f930 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8017808:	4621      	mov	r1, r4
 801780a:	4680      	mov	r8, r0
 801780c:	4630      	mov	r0, r6
 801780e:	f002 fa2a 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017812:	4628      	mov	r0, r5
 8017814:	f7f9 f862 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017818:	2300      	movs	r3, #0
 801781a:	9303      	str	r3, [sp, #12]
 801781c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801781e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017822:	ab07      	add	r3, sp, #28
 8017824:	4640      	mov	r0, r8
 8017826:	9300      	str	r3, [sp, #0]
 8017828:	463b      	mov	r3, r7
 801782a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801782e:	f000 fab3 	bl	8017d98 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017832:	b00d      	add	sp, #52	; 0x34
 8017834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017838:	2000bc24 	.word	0x2000bc24

0801783c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	4605      	mov	r5, r0
 8017840:	880b      	ldrh	r3, [r1, #0]
 8017842:	4604      	mov	r4, r0
 8017844:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017846:	f855 3b26 	ldr.w	r3, [r5], #38
 801784a:	4628      	mov	r0, r5
 801784c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801784e:	f004 fa7b 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017852:	b201      	sxth	r1, r0
 8017854:	4620      	mov	r0, r4
 8017856:	47b0      	blx	r6
 8017858:	6823      	ldr	r3, [r4, #0]
 801785a:	4628      	mov	r0, r5
 801785c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801785e:	f004 faad 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017862:	b201      	sxth	r1, r0
 8017864:	4620      	mov	r0, r4
 8017866:	47b0      	blx	r6
 8017868:	4628      	mov	r0, r5
 801786a:	f004 fb3b 	bl	801bee4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801786e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017872:	bd70      	pop	{r4, r5, r6, pc}

08017874 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017874:	b510      	push	{r4, lr}
 8017876:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801787a:	4604      	mov	r4, r0
 801787c:	2bff      	cmp	r3, #255	; 0xff
 801787e:	d006      	beq.n	801788e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017880:	2300      	movs	r3, #0
 8017882:	8003      	strh	r3, [r0, #0]
 8017884:	8043      	strh	r3, [r0, #2]
 8017886:	8083      	strh	r3, [r0, #4]
 8017888:	80c3      	strh	r3, [r0, #6]
 801788a:	4620      	mov	r0, r4
 801788c:	bd10      	pop	{r4, pc}
 801788e:	3126      	adds	r1, #38	; 0x26
 8017890:	f004 face 	bl	801be30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017894:	e7f9      	b.n	801788a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017898 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801789c:	4604      	mov	r4, r0
 801789e:	b088      	sub	sp, #32
 80178a0:	2500      	movs	r5, #0
 80178a2:	460f      	mov	r7, r1
 80178a4:	f854 3b26 	ldr.w	r3, [r4], #38
 80178a8:	a904      	add	r1, sp, #16
 80178aa:	4606      	mov	r6, r0
 80178ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80178b2:	4798      	blx	r3
 80178b4:	4620      	mov	r0, r4
 80178b6:	f004 fa47 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80178ba:	4680      	mov	r8, r0
 80178bc:	4620      	mov	r0, r4
 80178be:	f004 fa7d 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80178c2:	9506      	str	r5, [sp, #24]
 80178c4:	ad06      	add	r5, sp, #24
 80178c6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80178ca:	4639      	mov	r1, r7
 80178cc:	f8ad 801c 	strh.w	r8, [sp, #28]
 80178d0:	4628      	mov	r0, r5
 80178d2:	f7fd fef5 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 80178d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80178da:	b1c3      	cbz	r3, 801790e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80178dc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80178e0:	b1ab      	cbz	r3, 801790e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80178e2:	4b0c      	ldr	r3, [pc, #48]	; (8017914 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80178ea:	b10a      	cbz	r2, 80178f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80178ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80178ee:	b900      	cbnz	r0, 80178f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80178f0:	6898      	ldr	r0, [r3, #8]
 80178f2:	2701      	movs	r7, #1
 80178f4:	6801      	ldr	r1, [r0, #0]
 80178f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80178fa:	9702      	str	r7, [sp, #8]
 80178fc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017900:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017904:	e9cd 5600 	strd	r5, r6, [sp]
 8017908:	68cd      	ldr	r5, [r1, #12]
 801790a:	4621      	mov	r1, r4
 801790c:	47a8      	blx	r5
 801790e:	b008      	add	sp, #32
 8017910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017914:	2000bb94 	.word	0x2000bb94

08017918 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017918:	4b02      	ldr	r3, [pc, #8]	; (8017924 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801791a:	6018      	str	r0, [r3, #0]
 801791c:	4b02      	ldr	r3, [pc, #8]	; (8017928 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801791e:	6019      	str	r1, [r3, #0]
 8017920:	4770      	bx	lr
 8017922:	bf00      	nop
 8017924:	2000bb9c 	.word	0x2000bb9c
 8017928:	2000bbb0 	.word	0x2000bbb0

0801792c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801792c:	b538      	push	{r3, r4, r5, lr}
 801792e:	4c2b      	ldr	r4, [pc, #172]	; (80179dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017930:	4b2b      	ldr	r3, [pc, #172]	; (80179e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017932:	6821      	ldr	r1, [r4, #0]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	4281      	cmp	r1, r0
 8017938:	4d2a      	ldr	r5, [pc, #168]	; (80179e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801793a:	492b      	ldr	r1, [pc, #172]	; (80179e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801793c:	d108      	bne.n	8017950 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801793e:	682b      	ldr	r3, [r5, #0]
 8017940:	4293      	cmp	r3, r2
 8017942:	d105      	bne.n	8017950 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017944:	6808      	ldr	r0, [r1, #0]
 8017946:	280f      	cmp	r0, #15
 8017948:	bf94      	ite	ls
 801794a:	2000      	movls	r0, #0
 801794c:	2001      	movhi	r0, #1
 801794e:	bd38      	pop	{r3, r4, r5, pc}
 8017950:	4b26      	ldr	r3, [pc, #152]	; (80179ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017952:	6020      	str	r0, [r4, #0]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	602a      	str	r2, [r5, #0]
 8017958:	4298      	cmp	r0, r3
 801795a:	d905      	bls.n	8017968 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801795c:	4b24      	ldr	r3, [pc, #144]	; (80179f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801795e:	2137      	movs	r1, #55	; 0x37
 8017960:	4a24      	ldr	r2, [pc, #144]	; (80179f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017962:	4825      	ldr	r0, [pc, #148]	; (80179f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017964:	f00d ff42 	bl	80257ec <__assert_func>
 8017968:	f010 0403 	ands.w	r4, r0, #3
 801796c:	bf1f      	itttt	ne
 801796e:	f1c4 0504 	rsbne	r5, r4, #4
 8017972:	3b04      	subne	r3, #4
 8017974:	1952      	addne	r2, r2, r5
 8017976:	191b      	addne	r3, r3, r4
 8017978:	4d20      	ldr	r5, [pc, #128]	; (80179fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801797a:	4402      	add	r2, r0
 801797c:	1a1b      	subs	r3, r3, r0
 801797e:	3001      	adds	r0, #1
 8017980:	602a      	str	r2, [r5, #0]
 8017982:	f020 0401 	bic.w	r4, r0, #1
 8017986:	42a3      	cmp	r3, r4
 8017988:	d203      	bcs.n	8017992 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801798a:	4b19      	ldr	r3, [pc, #100]	; (80179f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801798c:	214a      	movs	r1, #74	; 0x4a
 801798e:	4a19      	ldr	r2, [pc, #100]	; (80179f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017990:	e7e7      	b.n	8017962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017992:	f010 0002 	ands.w	r0, r0, #2
 8017996:	bf1f      	itttt	ne
 8017998:	f1c0 0504 	rsbne	r5, r0, #4
 801799c:	1952      	addne	r2, r2, r5
 801799e:	1f05      	subne	r5, r0, #4
 80179a0:	195b      	addne	r3, r3, r5
 80179a2:	4422      	add	r2, r4
 80179a4:	4d16      	ldr	r5, [pc, #88]	; (8017a00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80179a6:	1b1b      	subs	r3, r3, r4
 80179a8:	602a      	str	r2, [r5, #0]
 80179aa:	429c      	cmp	r4, r3
 80179ac:	d903      	bls.n	80179b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80179ae:	4b10      	ldr	r3, [pc, #64]	; (80179f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80179b0:	215d      	movs	r1, #93	; 0x5d
 80179b2:	4a10      	ldr	r2, [pc, #64]	; (80179f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80179b4:	e7d5      	b.n	8017962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80179b6:	b120      	cbz	r0, 80179c2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80179b8:	f1c0 0504 	rsb	r5, r0, #4
 80179bc:	3804      	subs	r0, #4
 80179be:	442a      	add	r2, r5
 80179c0:	4403      	add	r3, r0
 80179c2:	1b1b      	subs	r3, r3, r4
 80179c4:	4422      	add	r2, r4
 80179c6:	480f      	ldr	r0, [pc, #60]	; (8017a04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80179c8:	2b0f      	cmp	r3, #15
 80179ca:	600b      	str	r3, [r1, #0]
 80179cc:	6002      	str	r2, [r0, #0]
 80179ce:	d803      	bhi.n	80179d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80179d0:	4b0d      	ldr	r3, [pc, #52]	; (8017a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80179d2:	2170      	movs	r1, #112	; 0x70
 80179d4:	4a07      	ldr	r2, [pc, #28]	; (80179f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80179d6:	e7c4      	b.n	8017962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80179d8:	2001      	movs	r0, #1
 80179da:	e7b8      	b.n	801794e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80179dc:	2000bba4 	.word	0x2000bba4
 80179e0:	2000bb9c 	.word	0x2000bb9c
 80179e4:	2000bbac 	.word	0x2000bbac
 80179e8:	2000bbb4 	.word	0x2000bbb4
 80179ec:	2000bbb0 	.word	0x2000bbb0
 80179f0:	08028f78 	.word	0x08028f78
 80179f4:	08029040 	.word	0x08029040
 80179f8:	08028fb1 	.word	0x08028fb1
 80179fc:	2000bbb8 	.word	0x2000bbb8
 8017a00:	2000bba8 	.word	0x2000bba8
 8017a04:	2000bba0 	.word	0x2000bba0
 8017a08:	08028ffb 	.word	0x08028ffb

08017a0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017a0c:	4b04      	ldr	r3, [pc, #16]	; (8017a20 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017a0e:	6818      	ldr	r0, [r3, #0]
 8017a10:	b120      	cbz	r0, 8017a1c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017a12:	4b04      	ldr	r3, [pc, #16]	; (8017a24 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017a14:	6818      	ldr	r0, [r3, #0]
 8017a16:	3000      	adds	r0, #0
 8017a18:	bf18      	it	ne
 8017a1a:	2001      	movne	r0, #1
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2000bb9c 	.word	0x2000bb9c
 8017a24:	2000bbb0 	.word	0x2000bbb0

08017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017a28:	4b01      	ldr	r3, [pc, #4]	; (8017a30 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017a2a:	6818      	ldr	r0, [r3, #0]
 8017a2c:	4770      	bx	lr
 8017a2e:	bf00      	nop
 8017a30:	2000bba4 	.word	0x2000bba4

08017a34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017a34:	4b01      	ldr	r3, [pc, #4]	; (8017a3c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017a36:	6818      	ldr	r0, [r3, #0]
 8017a38:	4770      	bx	lr
 8017a3a:	bf00      	nop
 8017a3c:	2000bbac 	.word	0x2000bbac

08017a40 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017a40:	4b01      	ldr	r3, [pc, #4]	; (8017a48 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017a42:	6818      	ldr	r0, [r3, #0]
 8017a44:	4770      	bx	lr
 8017a46:	bf00      	nop
 8017a48:	2000bbb8 	.word	0x2000bbb8

08017a4c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017a4c:	4b01      	ldr	r3, [pc, #4]	; (8017a54 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017a4e:	6818      	ldr	r0, [r3, #0]
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop
 8017a54:	2000bba8 	.word	0x2000bba8

08017a58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017a58:	4b01      	ldr	r3, [pc, #4]	; (8017a60 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017a5a:	6818      	ldr	r0, [r3, #0]
 8017a5c:	4770      	bx	lr
 8017a5e:	bf00      	nop
 8017a60:	2000bba0 	.word	0x2000bba0

08017a64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017a64:	4b01      	ldr	r3, [pc, #4]	; (8017a6c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017a66:	6818      	ldr	r0, [r3, #0]
 8017a68:	4770      	bx	lr
 8017a6a:	bf00      	nop
 8017a6c:	2000bbb4 	.word	0x2000bbb4

08017a70 <_ZN8touchgfx3LCD4initEv>:
 8017a70:	4770      	bx	lr

08017a72 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017a72:	2000      	movs	r0, #0
 8017a74:	4770      	bx	lr

08017a76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7a:	b091      	sub	sp, #68	; 0x44
 8017a7c:	4699      	mov	r9, r3
 8017a7e:	4617      	mov	r7, r2
 8017a80:	2500      	movs	r5, #0
 8017a82:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017a86:	4680      	mov	r8, r0
 8017a88:	a80e      	add	r0, sp, #56	; 0x38
 8017a8a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017a8c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017a90:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017a94:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017a98:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a9c:	910d      	str	r1, [sp, #52]	; 0x34
 8017a9e:	950e      	str	r5, [sp, #56]	; 0x38
 8017aa0:	f001 faa4 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017aa4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017aa6:	f8d9 6000 	ldr.w	r6, [r9]
 8017aaa:	6818      	ldr	r0, [r3, #0]
 8017aac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017aae:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017ab2:	1b80      	subs	r0, r0, r6
 8017ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ab8:	eb02 0c06 	add.w	ip, r2, r6
 8017abc:	ebab 0e0c 	sub.w	lr, fp, ip
 8017ac0:	4570      	cmp	r0, lr
 8017ac2:	f340 80bc 	ble.w	8017c3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017ac6:	88a1      	ldrh	r1, [r4, #4]
 8017ac8:	4459      	add	r1, fp
 8017aca:	b209      	sxth	r1, r1
 8017acc:	458c      	cmp	ip, r1
 8017ace:	f300 80b6 	bgt.w	8017c3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017ad2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017ad6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017ada:	4283      	cmp	r3, r0
 8017adc:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017ae0:	edd9 6a07 	vldr	s13, [r9, #28]
 8017ae4:	bfa8      	it	ge
 8017ae6:	4603      	movge	r3, r0
 8017ae8:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017aec:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017af0:	45e3      	cmp	fp, ip
 8017af2:	ee07 3a90 	vmov	s15, r3
 8017af6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017afa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017afe:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017b02:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017b06:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b0e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017b12:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017b16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017b1a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017b1e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b22:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b26:	f340 808d 	ble.w	8017c44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017b2a:	fb9e f5f3 	sdiv	r5, lr, r3
 8017b2e:	ee07 5a10 	vmov	s14, r5
 8017b32:	2d00      	cmp	r5, #0
 8017b34:	fb03 e415 	mls	r4, r3, r5, lr
 8017b38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b3c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017b40:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017b44:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017b48:	dd12      	ble.n	8017b70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017b4a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017b4e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017b52:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017b56:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5e:	bf14      	ite	ne
 8017b60:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017b64:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017b68:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b6c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b70:	fb05 f703 	mul.w	r7, r5, r3
 8017b74:	1bc0      	subs	r0, r0, r7
 8017b76:	443e      	add	r6, r7
 8017b78:	1997      	adds	r7, r2, r6
 8017b7a:	4407      	add	r7, r0
 8017b7c:	42b9      	cmp	r1, r7
 8017b7e:	bfbc      	itt	lt
 8017b80:	1a88      	sublt	r0, r1, r2
 8017b82:	1b80      	sublt	r0, r0, r6
 8017b84:	2800      	cmp	r0, #0
 8017b86:	dd5a      	ble.n	8017c3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017b88:	fb90 f1f3 	sdiv	r1, r0, r3
 8017b8c:	fb03 0211 	mls	r2, r3, r1, r0
 8017b90:	b90a      	cbnz	r2, 8017b96 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017b92:	3901      	subs	r1, #1
 8017b94:	461a      	mov	r2, r3
 8017b96:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017b9a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017b9e:	44a4      	add	ip, r4
 8017ba0:	2900      	cmp	r1, #0
 8017ba2:	bfcc      	ite	gt
 8017ba4:	469e      	movgt	lr, r3
 8017ba6:	4696      	movle	lr, r2
 8017ba8:	fb03 c505 	mla	r5, r3, r5, ip
 8017bac:	eef0 6a42 	vmov.f32	s13, s4
 8017bb0:	eeb0 7a61 	vmov.f32	s14, s3
 8017bb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bb8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017bbc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017bc0:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017bc4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017bc8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017bcc:	ee17 0a90 	vmov	r0, s15
 8017bd0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017bd4:	fb90 f6f3 	sdiv	r6, r0, r3
 8017bd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017bdc:	ee17 0a90 	vmov	r0, s15
 8017be0:	fb90 f7f3 	sdiv	r7, r0, r3
 8017be4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017be8:	f8d0 8000 	ldr.w	r8, [r0]
 8017bec:	900c      	str	r0, [sp, #48]	; 0x30
 8017bee:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017bf0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017bf4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017bf8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017bfc:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017c00:	f8cd a020 	str.w	sl, [sp, #32]
 8017c04:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017c08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017c0a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8017c0e:	9603      	str	r6, [sp, #12]
 8017c10:	44ca      	add	sl, r9
 8017c12:	9506      	str	r5, [sp, #24]
 8017c14:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017c18:	ee16 0a90 	vmov	r0, s13
 8017c1c:	f8cd a01c 	str.w	sl, [sp, #28]
 8017c20:	fb07 0704 	mla	r7, r7, r4, r0
 8017c24:	ee17 0a10 	vmov	r0, s14
 8017c28:	fb06 0604 	mla	r6, r6, r4, r0
 8017c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017c2e:	9702      	str	r7, [sp, #8]
 8017c30:	e9cd 3600 	strd	r3, r6, [sp]
 8017c34:	ebae 0304 	sub.w	r3, lr, r4
 8017c38:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017c3c:	47a8      	blx	r5
 8017c3e:	b011      	add	sp, #68	; 0x44
 8017c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c44:	462c      	mov	r4, r5
 8017c46:	e797      	b.n	8017b78 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017c48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	2500      	movs	r5, #0
 8017c4e:	9804      	ldr	r0, [sp, #16]
 8017c50:	7223      	strb	r3, [r4, #8]
 8017c52:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017c56:	8025      	strh	r5, [r4, #0]
 8017c58:	6061      	str	r1, [r4, #4]
 8017c5a:	7263      	strb	r3, [r4, #9]
 8017c5c:	60e0      	str	r0, [r4, #12]
 8017c5e:	8222      	strh	r2, [r4, #16]
 8017c60:	8265      	strh	r5, [r4, #18]
 8017c62:	82a5      	strh	r5, [r4, #20]
 8017c64:	82e5      	strh	r5, [r4, #22]
 8017c66:	8325      	strh	r5, [r4, #24]
 8017c68:	8365      	strh	r5, [r4, #26]
 8017c6a:	83a5      	strh	r5, [r4, #28]
 8017c6c:	77a5      	strb	r5, [r4, #30]
 8017c6e:	6803      	ldr	r3, [r0, #0]
 8017c70:	695b      	ldr	r3, [r3, #20]
 8017c72:	4798      	blx	r3
 8017c74:	4606      	mov	r6, r0
 8017c76:	b1f8      	cbz	r0, 8017cb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017c78:	68e0      	ldr	r0, [r4, #12]
 8017c7a:	4631      	mov	r1, r6
 8017c7c:	6803      	ldr	r3, [r0, #0]
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	4798      	blx	r3
 8017c82:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017c86:	4605      	mov	r5, r0
 8017c88:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c8c:	7a83      	ldrb	r3, [r0, #10]
 8017c8e:	4313      	orrs	r3, r2
 8017c90:	83a3      	strh	r3, [r4, #28]
 8017c92:	7a63      	ldrb	r3, [r4, #9]
 8017c94:	2b04      	cmp	r3, #4
 8017c96:	d10f      	bne.n	8017cb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017c98:	68e0      	ldr	r0, [r4, #12]
 8017c9a:	462a      	mov	r2, r5
 8017c9c:	4631      	mov	r1, r6
 8017c9e:	6803      	ldr	r3, [r0, #0]
 8017ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca2:	4798      	blx	r3
 8017ca4:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017ca8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017cac:	7aab      	ldrb	r3, [r5, #10]
 8017cae:	4313      	orrs	r3, r2
 8017cb0:	4418      	add	r0, r3
 8017cb2:	8ba3      	ldrh	r3, [r4, #28]
 8017cb4:	4418      	add	r0, r3
 8017cb6:	83a0      	strh	r0, [r4, #28]
 8017cb8:	4620      	mov	r0, r4
 8017cba:	bd70      	pop	{r4, r5, r6, pc}

08017cbc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc0:	2400      	movs	r4, #0
 8017cc2:	b085      	sub	sp, #20
 8017cc4:	4681      	mov	r9, r0
 8017cc6:	460f      	mov	r7, r1
 8017cc8:	4692      	mov	sl, r2
 8017cca:	469b      	mov	fp, r3
 8017ccc:	46a0      	mov	r8, r4
 8017cce:	4626      	mov	r6, r4
 8017cd0:	4554      	cmp	r4, sl
 8017cd2:	da21      	bge.n	8017d18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	463a      	mov	r2, r7
 8017cd8:	4659      	mov	r1, fp
 8017cda:	4648      	mov	r0, r9
 8017cdc:	9303      	str	r3, [sp, #12]
 8017cde:	ab03      	add	r3, sp, #12
 8017ce0:	f003 fa88 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017ce4:	4605      	mov	r5, r0
 8017ce6:	b1b8      	cbz	r0, 8017d18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017ce8:	280a      	cmp	r0, #10
 8017cea:	d015      	beq.n	8017d18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017cec:	9a03      	ldr	r2, [sp, #12]
 8017cee:	b182      	cbz	r2, 8017d12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017cf0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017cf4:	4641      	mov	r1, r8
 8017cf6:	7a93      	ldrb	r3, [r2, #10]
 8017cf8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017cfc:	8895      	ldrh	r5, [r2, #4]
 8017cfe:	4303      	orrs	r3, r0
 8017d00:	4638      	mov	r0, r7
 8017d02:	9301      	str	r3, [sp, #4]
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d08:	4798      	blx	r3
 8017d0a:	9b01      	ldr	r3, [sp, #4]
 8017d0c:	4418      	add	r0, r3
 8017d0e:	4406      	add	r6, r0
 8017d10:	b2b6      	uxth	r6, r6
 8017d12:	3401      	adds	r4, #1
 8017d14:	46a8      	mov	r8, r5
 8017d16:	e7db      	b.n	8017cd0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017d18:	4630      	mov	r0, r6
 8017d1a:	b005      	add	sp, #20
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d20 <_ZN8touchgfx3LCD23drawStringWidthInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8017d20:	b510      	push	{r4, lr}
 8017d22:	460c      	mov	r4, r1
 8017d24:	4611      	mov	r1, r2
 8017d26:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 8017d2a:	f7ff ffc7 	bl	8017cbc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017d2e:	8823      	ldrh	r3, [r4, #0]
 8017d30:	4418      	add	r0, r3
 8017d32:	8020      	strh	r0, [r4, #0]
 8017d34:	bd10      	pop	{r4, pc}

08017d36 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017d36:	2a02      	cmp	r2, #2
 8017d38:	b530      	push	{r4, r5, lr}
 8017d3a:	d011      	beq.n	8017d60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017d3c:	2a03      	cmp	r2, #3
 8017d3e:	d01c      	beq.n	8017d7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017d40:	2a01      	cmp	r2, #1
 8017d42:	d10c      	bne.n	8017d5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d44:	888b      	ldrh	r3, [r1, #4]
 8017d46:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017d4a:	8801      	ldrh	r1, [r0, #0]
 8017d4c:	1a9b      	subs	r3, r3, r2
 8017d4e:	8844      	ldrh	r4, [r0, #2]
 8017d50:	1a5b      	subs	r3, r3, r1
 8017d52:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017d56:	8004      	strh	r4, [r0, #0]
 8017d58:	8043      	strh	r3, [r0, #2]
 8017d5a:	8081      	strh	r1, [r0, #4]
 8017d5c:	80c2      	strh	r2, [r0, #6]
 8017d5e:	bd30      	pop	{r4, r5, pc}
 8017d60:	88cb      	ldrh	r3, [r1, #6]
 8017d62:	88c2      	ldrh	r2, [r0, #6]
 8017d64:	1a9b      	subs	r3, r3, r2
 8017d66:	8842      	ldrh	r2, [r0, #2]
 8017d68:	1a9b      	subs	r3, r3, r2
 8017d6a:	888a      	ldrh	r2, [r1, #4]
 8017d6c:	8881      	ldrh	r1, [r0, #4]
 8017d6e:	8043      	strh	r3, [r0, #2]
 8017d70:	1a52      	subs	r2, r2, r1
 8017d72:	8801      	ldrh	r1, [r0, #0]
 8017d74:	1a52      	subs	r2, r2, r1
 8017d76:	8002      	strh	r2, [r0, #0]
 8017d78:	e7f1      	b.n	8017d5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d7a:	88cb      	ldrh	r3, [r1, #6]
 8017d7c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017d80:	8841      	ldrh	r1, [r0, #2]
 8017d82:	1a9b      	subs	r3, r3, r2
 8017d84:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017d88:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017d8c:	1a5b      	subs	r3, r3, r1
 8017d8e:	8045      	strh	r5, [r0, #2]
 8017d90:	8082      	strh	r2, [r0, #4]
 8017d92:	8003      	strh	r3, [r0, #0]
 8017d94:	80c4      	strh	r4, [r0, #6]
 8017d96:	e7e2      	b.n	8017d5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017d98 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	ac02      	add	r4, sp, #8
 8017d9e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017da2:	461a      	mov	r2, r3
 8017da4:	ab0c      	add	r3, sp, #48	; 0x30
 8017da6:	9305      	str	r3, [sp, #20]
 8017da8:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8017daa:	685d      	ldr	r5, [r3, #4]
 8017dac:	1069      	asrs	r1, r5, #1
 8017dae:	07ed      	lsls	r5, r5, #31
 8017db0:	eb00 0601 	add.w	r6, r0, r1
 8017db4:	bf46      	itte	mi
 8017db6:	681b      	ldrmi	r3, [r3, #0]
 8017db8:	5841      	ldrmi	r1, [r0, r1]
 8017dba:	681d      	ldrpl	r5, [r3, #0]
 8017dbc:	4630      	mov	r0, r6
 8017dbe:	bf48      	it	mi
 8017dc0:	58cd      	ldrmi	r5, [r1, r3]
 8017dc2:	4621      	mov	r1, r4
 8017dc4:	9b05      	ldr	r3, [sp, #20]
 8017dc6:	9301      	str	r3, [sp, #4]
 8017dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dca:	9300      	str	r3, [sp, #0]
 8017dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dce:	47a8      	blx	r5
 8017dd0:	b006      	add	sp, #24
 8017dd2:	bd70      	pop	{r4, r5, r6, pc}
 8017dd4:	20000030 	.word	0x20000030

08017dd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>:
 8017dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ddc:	b08f      	sub	sp, #60	; 0x3c
 8017dde:	4617      	mov	r7, r2
 8017de0:	4680      	mov	r8, r0
 8017de2:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8017de6:	9105      	str	r1, [sp, #20]
 8017de8:	920c      	str	r2, [sp, #48]	; 0x30
 8017dea:	9308      	str	r3, [sp, #32]
 8017dec:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	; 0x6c
 8017df0:	ea4f 0b62 	mov.w	fp, r2, asr #1
 8017df4:	9206      	str	r2, [sp, #24]
 8017df6:	eb00 050b 	add.w	r5, r0, fp
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	f040 814e 	bne.w	801809c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c4>
 8017e00:	461a      	mov	r2, r3
 8017e02:	4699      	mov	r9, r3
 8017e04:	9307      	str	r3, [sp, #28]
 8017e06:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8017e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e0c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017e0e:	428b      	cmp	r3, r1
 8017e10:	f280 80b1 	bge.w	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017e14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017e16:	881b      	ldrh	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	f000 80ac 	beq.w	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017e1e:	2b0a      	cmp	r3, #10
 8017e20:	f000 80a9 	beq.w	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017e24:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8017e28:	f023 0c20 	bic.w	ip, r3, #32
 8017e2c:	2901      	cmp	r1, #1
 8017e2e:	fa1f fc8c 	uxth.w	ip, ip
 8017e32:	d92c      	bls.n	8017e8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e34:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8017e38:	d029      	beq.n	8017e8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e3a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8017e3e:	d026      	beq.n	8017e8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e40:	f023 0002 	bic.w	r0, r3, #2
 8017e44:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 8017e48:	4270      	negs	r0, r6
 8017e4a:	4170      	adcs	r0, r6
 8017e4c:	f5a3 61a0 	sub.w	r1, r3, #1280	; 0x500
 8017e50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e54:	d31d      	bcc.n	8017e92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xba>
 8017e56:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8017e5a:	f240 36af 	movw	r6, #943	; 0x3af
 8017e5e:	b289      	uxth	r1, r1
 8017e60:	42b1      	cmp	r1, r6
 8017e62:	bf8c      	ite	hi
 8017e64:	2100      	movhi	r1, #0
 8017e66:	2101      	movls	r1, #1
 8017e68:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017e6c:	f1bc 0f19 	cmp.w	ip, #25
 8017e70:	f240 82c4 	bls.w	80183fc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 8017e74:	2b7f      	cmp	r3, #127	; 0x7f
 8017e76:	f240 82ad 	bls.w	80183d4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017e7a:	2900      	cmp	r1, #0
 8017e7c:	f040 82aa 	bne.w	80183d4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017e80:	f1b9 0f03 	cmp.w	r9, #3
 8017e84:	d83f      	bhi.n	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017e86:	e8df f009 	tbb	[pc, r9]
 8017e8a:	2138      	.short	0x2138
 8017e8c:	5125      	.short	0x5125
 8017e8e:	2001      	movs	r0, #1
 8017e90:	e7dc      	b.n	8017e4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x74>
 8017e92:	2101      	movs	r1, #1
 8017e94:	e7e8      	b.n	8017e68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x90>
 8017e96:	2201      	movs	r2, #1
 8017e98:	2900      	cmp	r1, #0
 8017e9a:	d02f      	beq.n	8017efc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x124>
 8017e9c:	f04f 0902 	mov.w	r9, #2
 8017ea0:	e031      	b.n	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017ea2:	b199      	cbz	r1, 8017ecc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf4>
 8017ea4:	9b06      	ldr	r3, [sp, #24]
 8017ea6:	9905      	ldr	r1, [sp, #20]
 8017ea8:	07d8      	lsls	r0, r3, #31
 8017eaa:	4628      	mov	r0, r5
 8017eac:	bf4a      	itet	mi
 8017eae:	682b      	ldrmi	r3, [r5, #0]
 8017eb0:	46a1      	movpl	r9, r4
 8017eb2:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017eb8:	9303      	str	r3, [sp, #12]
 8017eba:	2300      	movs	r3, #0
 8017ebc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017ec0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017ec2:	9200      	str	r2, [sp, #0]
 8017ec4:	463a      	mov	r2, r7
 8017ec6:	47c8      	blx	r9
 8017ec8:	2201      	movs	r2, #1
 8017eca:	e7e7      	b.n	8017e9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017ecc:	3201      	adds	r2, #1
 8017ece:	f04f 0901 	mov.w	r9, #1
 8017ed2:	e018      	b.n	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017ed4:	9b06      	ldr	r3, [sp, #24]
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	07d9      	lsls	r1, r3, #31
 8017eda:	9905      	ldr	r1, [sp, #20]
 8017edc:	bf4a      	itet	mi
 8017ede:	682b      	ldrmi	r3, [r5, #0]
 8017ee0:	46a1      	movpl	r9, r4
 8017ee2:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017ee6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017ee8:	9303      	str	r3, [sp, #12]
 8017eea:	2300      	movs	r3, #0
 8017eec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017ef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ef2:	463a      	mov	r2, r7
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	47c8      	blx	r9
 8017efa:	2201      	movs	r2, #1
 8017efc:	4691      	mov	r9, r2
 8017efe:	e002      	b.n	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017f00:	2900      	cmp	r1, #0
 8017f02:	d030      	beq.n	8017f66 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x18e>
 8017f04:	3201      	adds	r2, #1
 8017f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f08:	2100      	movs	r1, #0
 8017f0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017f0c:	f1b9 0f01 	cmp.w	r9, #1
 8017f10:	bf08      	it	eq
 8017f12:	f043 0301 	orreq.w	r3, r3, #1
 8017f16:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f18:	930a      	str	r3, [sp, #40]	; 0x28
 8017f1a:	f003 f92b 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017f22:	8018      	strh	r0, [r3, #0]
 8017f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f26:	3301      	adds	r3, #1
 8017f28:	9309      	str	r3, [sp, #36]	; 0x24
 8017f2a:	e76e      	b.n	8017e0a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x32>
 8017f2c:	2001      	movs	r0, #1
 8017f2e:	9b07      	ldr	r3, [sp, #28]
 8017f30:	f103 0901 	add.w	r9, r3, #1
 8017f34:	b109      	cbz	r1, 8017f3a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x162>
 8017f36:	444a      	add	r2, r9
 8017f38:	e7b0      	b.n	8017e9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017f3a:	b1c8      	cbz	r0, 8017f70 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x198>
 8017f3c:	9b06      	ldr	r3, [sp, #24]
 8017f3e:	4628      	mov	r0, r5
 8017f40:	9905      	ldr	r1, [sp, #20]
 8017f42:	07db      	lsls	r3, r3, #31
 8017f44:	bf4a      	itet	mi
 8017f46:	682b      	ldrmi	r3, [r5, #0]
 8017f48:	46a2      	movpl	sl, r4
 8017f4a:	f853 a004 	ldrmi.w	sl, [r3, r4]
 8017f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f50:	9303      	str	r3, [sp, #12]
 8017f52:	2300      	movs	r3, #0
 8017f54:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017f58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017f5a:	463a      	mov	r2, r7
 8017f5c:	9300      	str	r3, [sp, #0]
 8017f5e:	2301      	movs	r3, #1
 8017f60:	47d0      	blx	sl
 8017f62:	464a      	mov	r2, r9
 8017f64:	e7b3      	b.n	8017ece <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf6>
 8017f66:	2301      	movs	r3, #1
 8017f68:	9307      	str	r3, [sp, #28]
 8017f6a:	f04f 0903 	mov.w	r9, #3
 8017f6e:	e7ca      	b.n	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017f70:	f8cd 901c 	str.w	r9, [sp, #28]
 8017f74:	e7f9      	b.n	8017f6a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x192>
 8017f76:	f1b9 0f01 	cmp.w	r9, #1
 8017f7a:	d10f      	bne.n	8017f9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1c4>
 8017f7c:	9b06      	ldr	r3, [sp, #24]
 8017f7e:	07d8      	lsls	r0, r3, #31
 8017f80:	bf4a      	itet	mi
 8017f82:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017f86:	46a1      	movpl	r9, r4
 8017f88:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f8e:	9303      	str	r3, [sp, #12]
 8017f90:	2300      	movs	r3, #0
 8017f92:	9302      	str	r3, [sp, #8]
 8017f94:	9201      	str	r2, [sp, #4]
 8017f96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017f98:	9200      	str	r2, [sp, #0]
 8017f9a:	e078      	b.n	801808e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2b6>
 8017f9c:	f1b9 0f02 	cmp.w	r9, #2
 8017fa0:	d10c      	bne.n	8017fbc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1e4>
 8017fa2:	9b06      	ldr	r3, [sp, #24]
 8017fa4:	07de      	lsls	r6, r3, #31
 8017fa6:	bf4a      	itet	mi
 8017fa8:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017fac:	46a1      	movpl	r9, r4
 8017fae:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017fb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017fb4:	9303      	str	r3, [sp, #12]
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	9302      	str	r3, [sp, #8]
 8017fba:	e064      	b.n	8018086 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2ae>
 8017fbc:	f1b9 0f03 	cmp.w	r9, #3
 8017fc0:	d12d      	bne.n	801801e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017fc2:	9b06      	ldr	r3, [sp, #24]
 8017fc4:	f003 0a01 	and.w	sl, r3, #1
 8017fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d04e      	beq.n	801806c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x294>
 8017fce:	f1ba 0f00 	cmp.w	sl, #0
 8017fd2:	d047      	beq.n	8018064 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x28c>
 8017fd4:	f858 300b 	ldr.w	r3, [r8, fp]
 8017fd8:	591b      	ldr	r3, [r3, r4]
 8017fda:	461e      	mov	r6, r3
 8017fdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017fde:	f04f 0900 	mov.w	r9, #0
 8017fe2:	9905      	ldr	r1, [sp, #20]
 8017fe4:	4628      	mov	r0, r5
 8017fe6:	9303      	str	r3, [sp, #12]
 8017fe8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017fea:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8017fee:	9300      	str	r3, [sp, #0]
 8017ff0:	463a      	mov	r2, r7
 8017ff2:	2301      	movs	r3, #1
 8017ff4:	47b0      	blx	r6
 8017ff6:	464b      	mov	r3, r9
 8017ff8:	f1ba 0f00 	cmp.w	sl, #0
 8017ffc:	d034      	beq.n	8018068 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x290>
 8017ffe:	f858 200b 	ldr.w	r2, [r8, fp]
 8018002:	f852 a004 	ldr.w	sl, [r2, r4]
 8018006:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018008:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801800c:	9b07      	ldr	r3, [sp, #28]
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018012:	9300      	str	r3, [sp, #0]
 8018014:	2300      	movs	r3, #0
 8018016:	463a      	mov	r2, r7
 8018018:	9905      	ldr	r1, [sp, #20]
 801801a:	4628      	mov	r0, r5
 801801c:	47d0      	blx	sl
 801801e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018020:	b18b      	cbz	r3, 8018046 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x26e>
 8018022:	9b06      	ldr	r3, [sp, #24]
 8018024:	2201      	movs	r2, #1
 8018026:	4628      	mov	r0, r5
 8018028:	07d9      	lsls	r1, r3, #31
 801802a:	9905      	ldr	r1, [sp, #20]
 801802c:	bf44      	itt	mi
 801802e:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8018032:	591c      	ldrmi	r4, [r3, r4]
 8018034:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018036:	9303      	str	r3, [sp, #12]
 8018038:	2300      	movs	r3, #0
 801803a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801803e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018040:	9200      	str	r2, [sp, #0]
 8018042:	463a      	mov	r2, r7
 8018044:	47a0      	blx	r4
 8018046:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018048:	881b      	ldrh	r3, [r3, #0]
 801804a:	2b0a      	cmp	r3, #10
 801804c:	f040 81c0 	bne.w	80183d0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f8>
 8018050:	9908      	ldr	r1, [sp, #32]
 8018052:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018054:	f003 f88e 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018058:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801805a:	8018      	strh	r0, [r3, #0]
 801805c:	2001      	movs	r0, #1
 801805e:	b00f      	add	sp, #60	; 0x3c
 8018060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018064:	4626      	mov	r6, r4
 8018066:	e7b9      	b.n	8017fdc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x204>
 8018068:	46a2      	mov	sl, r4
 801806a:	e7cc      	b.n	8018006 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x22e>
 801806c:	f1ba 0f00 	cmp.w	sl, #0
 8018070:	d012      	beq.n	8018098 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c0>
 8018072:	f858 300b 	ldr.w	r3, [r8, fp]
 8018076:	f853 9004 	ldr.w	r9, [r3, r4]
 801807a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801807c:	9303      	str	r3, [sp, #12]
 801807e:	2300      	movs	r3, #0
 8018080:	9302      	str	r3, [sp, #8]
 8018082:	9b07      	ldr	r3, [sp, #28]
 8018084:	441a      	add	r2, r3
 8018086:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018088:	9201      	str	r2, [sp, #4]
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	2301      	movs	r3, #1
 801808e:	463a      	mov	r2, r7
 8018090:	9905      	ldr	r1, [sp, #20]
 8018092:	4628      	mov	r0, r5
 8018094:	47c8      	blx	r9
 8018096:	e7c2      	b.n	801801e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8018098:	46a1      	mov	r9, r4
 801809a:	e7ee      	b.n	801807a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2a2>
 801809c:	2300      	movs	r3, #0
 801809e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80180a2:	9307      	str	r3, [sp, #28]
 80180a4:	461a      	mov	r2, r3
 80180a6:	469a      	mov	sl, r3
 80180a8:	9b06      	ldr	r3, [sp, #24]
 80180aa:	f003 0301 	and.w	r3, r3, #1
 80180ae:	9309      	str	r3, [sp, #36]	; 0x24
 80180b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180b2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80180b4:	428b      	cmp	r3, r1
 80180b6:	f280 813f 	bge.w	8018338 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 80180ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80180bc:	881b      	ldrh	r3, [r3, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	f000 813a 	beq.w	8018338 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 80180c4:	2b0a      	cmp	r3, #10
 80180c6:	f000 8137 	beq.w	8018338 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 80180ca:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80180ce:	f023 0c20 	bic.w	ip, r3, #32
 80180d2:	2901      	cmp	r1, #1
 80180d4:	fa1f fc8c 	uxth.w	ip, ip
 80180d8:	d934      	bls.n	8018144 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180da:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 80180de:	d031      	beq.n	8018144 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180e0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80180e4:	d02e      	beq.n	8018144 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180e6:	f023 0102 	bic.w	r1, r3, #2
 80180ea:	f1a1 0e3c 	sub.w	lr, r1, #60	; 0x3c
 80180ee:	f1de 0100 	rsbs	r1, lr, #0
 80180f2:	eb41 010e 	adc.w	r1, r1, lr
 80180f6:	f5a3 60a0 	sub.w	r0, r3, #1280	; 0x500
 80180fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80180fe:	d323      	bcc.n	8018148 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x370>
 8018100:	f503 6096 	add.w	r0, r3, #1200	; 0x4b0
 8018104:	b280      	uxth	r0, r0
 8018106:	f5b0 7f6c 	cmp.w	r0, #944	; 0x3b0
 801810a:	bf38      	it	cc
 801810c:	2101      	movcc	r1, #1
 801810e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8018112:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8018116:	f1bc 0f19 	cmp.w	ip, #25
 801811a:	b280      	uxth	r0, r0
 801811c:	d905      	bls.n	801812a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x352>
 801811e:	2b7f      	cmp	r3, #127	; 0x7f
 8018120:	f240 817c 	bls.w	801841c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 8018124:	2900      	cmp	r1, #0
 8018126:	f040 8179 	bne.w	801841c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 801812a:	f1ba 0f07 	cmp.w	sl, #7
 801812e:	d818      	bhi.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018130:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8018134:	0017002a 	.word	0x0017002a
 8018138:	00170044 	.word	0x00170044
 801813c:	007e0069 	.word	0x007e0069
 8018140:	00d90075 	.word	0x00d90075
 8018144:	2101      	movs	r1, #1
 8018146:	e7d6      	b.n	80180f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x31e>
 8018148:	2101      	movs	r1, #1
 801814a:	e7e0      	b.n	801810e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x336>
 801814c:	2300      	movs	r3, #0
 801814e:	2809      	cmp	r0, #9
 8018150:	f04f 0201 	mov.w	r2, #1
 8018154:	d92f      	bls.n	80181b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8018156:	2b00      	cmp	r3, #0
 8018158:	bf0c      	ite	eq
 801815a:	f04f 0a02 	moveq.w	sl, #2
 801815e:	f04f 0a06 	movne.w	sl, #6
 8018162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018164:	9908      	ldr	r1, [sp, #32]
 8018166:	f1ba 0f02 	cmp.w	sl, #2
 801816a:	bf08      	it	eq
 801816c:	f043 0301 	orreq.w	r3, r3, #1
 8018170:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018172:	920d      	str	r2, [sp, #52]	; 0x34
 8018174:	930b      	str	r3, [sp, #44]	; 0x2c
 8018176:	f002 fffd 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801817a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801817c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801817e:	8018      	strh	r0, [r3, #0]
 8018180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018182:	3301      	adds	r3, #1
 8018184:	930a      	str	r3, [sp, #40]	; 0x28
 8018186:	e793      	b.n	80180b0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2d8>
 8018188:	2301      	movs	r3, #1
 801818a:	e7e0      	b.n	801814e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x376>
 801818c:	2300      	movs	r3, #0
 801818e:	2809      	cmp	r0, #9
 8018190:	d818      	bhi.n	80181c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3ec>
 8018192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018194:	b1a3      	cbz	r3, 80181c0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3e8>
 8018196:	682b      	ldr	r3, [r5, #0]
 8018198:	f853 9004 	ldr.w	r9, [r3, r4]
 801819c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801819e:	4628      	mov	r0, r5
 80181a0:	9905      	ldr	r1, [sp, #20]
 80181a2:	9303      	str	r3, [sp, #12]
 80181a4:	2300      	movs	r3, #0
 80181a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80181aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80181ac:	463a      	mov	r2, r7
 80181ae:	9300      	str	r3, [sp, #0]
 80181b0:	2301      	movs	r3, #1
 80181b2:	47c8      	blx	r9
 80181b4:	2201      	movs	r2, #1
 80181b6:	f04f 0a04 	mov.w	sl, #4
 80181ba:	e7d2      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181bc:	2301      	movs	r3, #1
 80181be:	e7e6      	b.n	801818e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3b6>
 80181c0:	46a1      	mov	r9, r4
 80181c2:	e7eb      	b.n	801819c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3c4>
 80181c4:	b1b3      	cbz	r3, 80181f4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41c>
 80181c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181c8:	b193      	cbz	r3, 80181f0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x418>
 80181ca:	682b      	ldr	r3, [r5, #0]
 80181cc:	f853 9004 	ldr.w	r9, [r3, r4]
 80181d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80181d2:	4628      	mov	r0, r5
 80181d4:	9905      	ldr	r1, [sp, #20]
 80181d6:	9303      	str	r3, [sp, #12]
 80181d8:	2300      	movs	r3, #0
 80181da:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80181de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80181e0:	463a      	mov	r2, r7
 80181e2:	9300      	str	r3, [sp, #0]
 80181e4:	2301      	movs	r3, #1
 80181e6:	47c8      	blx	r9
 80181e8:	2201      	movs	r2, #1
 80181ea:	f04f 0a06 	mov.w	sl, #6
 80181ee:	e7b8      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181f0:	46a1      	mov	r9, r4
 80181f2:	e7ed      	b.n	80181d0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3f8>
 80181f4:	3201      	adds	r2, #1
 80181f6:	f04f 0a02 	mov.w	sl, #2
 80181fa:	e7b2      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181fc:	2100      	movs	r1, #0
 80181fe:	2809      	cmp	r0, #9
 8018200:	d803      	bhi.n	801820a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x432>
 8018202:	3201      	adds	r2, #1
 8018204:	e7d7      	b.n	80181b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8018206:	2101      	movs	r1, #1
 8018208:	e7f9      	b.n	80181fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x426>
 801820a:	f023 0002 	bic.w	r0, r3, #2
 801820e:	282c      	cmp	r0, #44	; 0x2c
 8018210:	f000 8085 	beq.w	801831e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 8018214:	2b3a      	cmp	r3, #58	; 0x3a
 8018216:	f000 8082 	beq.w	801831e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 801821a:	2900      	cmp	r1, #0
 801821c:	d04d      	beq.n	80182ba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4e2>
 801821e:	3201      	adds	r2, #1
 8018220:	e7e3      	b.n	80181ea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 8018222:	2300      	movs	r3, #0
 8018224:	2809      	cmp	r0, #9
 8018226:	d805      	bhi.n	8018234 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x45c>
 8018228:	9b07      	ldr	r3, [sp, #28]
 801822a:	3301      	adds	r3, #1
 801822c:	441a      	add	r2, r3
 801822e:	e7c2      	b.n	80181b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8018230:	2301      	movs	r3, #1
 8018232:	e7f7      	b.n	8018224 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x44c>
 8018234:	b343      	cbz	r3, 8018288 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4b0>
 8018236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018238:	b313      	cbz	r3, 8018280 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4a8>
 801823a:	682b      	ldr	r3, [r5, #0]
 801823c:	f853 a004 	ldr.w	sl, [r3, r4]
 8018240:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018242:	f04f 0900 	mov.w	r9, #0
 8018246:	9905      	ldr	r1, [sp, #20]
 8018248:	4628      	mov	r0, r5
 801824a:	9303      	str	r3, [sp, #12]
 801824c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801824e:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8018252:	9300      	str	r3, [sp, #0]
 8018254:	463a      	mov	r2, r7
 8018256:	464b      	mov	r3, r9
 8018258:	47d0      	blx	sl
 801825a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801825c:	464b      	mov	r3, r9
 801825e:	b18a      	cbz	r2, 8018284 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ac>
 8018260:	682a      	ldr	r2, [r5, #0]
 8018262:	f852 a004 	ldr.w	sl, [r2, r4]
 8018266:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018268:	4628      	mov	r0, r5
 801826a:	9905      	ldr	r1, [sp, #20]
 801826c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018270:	9b07      	ldr	r3, [sp, #28]
 8018272:	463a      	mov	r2, r7
 8018274:	9301      	str	r3, [sp, #4]
 8018276:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018278:	9300      	str	r3, [sp, #0]
 801827a:	2301      	movs	r3, #1
 801827c:	47d0      	blx	sl
 801827e:	e7b3      	b.n	80181e8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x410>
 8018280:	46a2      	mov	sl, r4
 8018282:	e7dd      	b.n	8018240 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x468>
 8018284:	46a2      	mov	sl, r4
 8018286:	e7ee      	b.n	8018266 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x48e>
 8018288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828a:	b183      	cbz	r3, 80182ae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4d6>
 801828c:	682b      	ldr	r3, [r5, #0]
 801828e:	f853 9004 	ldr.w	r9, [r3, r4]
 8018292:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018294:	4628      	mov	r0, r5
 8018296:	9905      	ldr	r1, [sp, #20]
 8018298:	9303      	str	r3, [sp, #12]
 801829a:	2300      	movs	r3, #0
 801829c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80182a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182a2:	9200      	str	r2, [sp, #0]
 80182a4:	463a      	mov	r2, r7
 80182a6:	47c8      	blx	r9
 80182a8:	9b07      	ldr	r3, [sp, #28]
 80182aa:	1c5a      	adds	r2, r3, #1
 80182ac:	e7a3      	b.n	80181f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 80182ae:	46a1      	mov	r9, r4
 80182b0:	e7ef      	b.n	8018292 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ba>
 80182b2:	2809      	cmp	r0, #9
 80182b4:	d9b3      	bls.n	801821e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x446>
 80182b6:	2900      	cmp	r1, #0
 80182b8:	d036      	beq.n	8018328 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x550>
 80182ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182bc:	b17b      	cbz	r3, 80182de <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x506>
 80182be:	682b      	ldr	r3, [r5, #0]
 80182c0:	f853 9004 	ldr.w	r9, [r3, r4]
 80182c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80182c6:	4628      	mov	r0, r5
 80182c8:	9905      	ldr	r1, [sp, #20]
 80182ca:	9303      	str	r3, [sp, #12]
 80182cc:	2300      	movs	r3, #0
 80182ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80182d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182d4:	9200      	str	r2, [sp, #0]
 80182d6:	463a      	mov	r2, r7
 80182d8:	47c8      	blx	r9
 80182da:	2201      	movs	r2, #1
 80182dc:	e78b      	b.n	80181f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 80182de:	46a1      	mov	r9, r4
 80182e0:	e7f0      	b.n	80182c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ec>
 80182e2:	2809      	cmp	r0, #9
 80182e4:	d803      	bhi.n	80182ee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x516>
 80182e6:	9b07      	ldr	r3, [sp, #28]
 80182e8:	3301      	adds	r3, #1
 80182ea:	441a      	add	r2, r3
 80182ec:	e77d      	b.n	80181ea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 80182ee:	9b07      	ldr	r3, [sp, #28]
 80182f0:	f103 0901 	add.w	r9, r3, #1
 80182f4:	b1e9      	cbz	r1, 8018332 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x55a>
 80182f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182f8:	b17b      	cbz	r3, 801831a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x542>
 80182fa:	682b      	ldr	r3, [r5, #0]
 80182fc:	f853 a004 	ldr.w	sl, [r3, r4]
 8018300:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018302:	4628      	mov	r0, r5
 8018304:	9905      	ldr	r1, [sp, #20]
 8018306:	9303      	str	r3, [sp, #12]
 8018308:	2300      	movs	r3, #0
 801830a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801830e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018310:	9200      	str	r2, [sp, #0]
 8018312:	463a      	mov	r2, r7
 8018314:	47d0      	blx	sl
 8018316:	464a      	mov	r2, r9
 8018318:	e76d      	b.n	80181f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801831a:	46a2      	mov	sl, r4
 801831c:	e7f0      	b.n	8018300 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x528>
 801831e:	2301      	movs	r3, #1
 8018320:	f04f 0a05 	mov.w	sl, #5
 8018324:	9307      	str	r3, [sp, #28]
 8018326:	e71c      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018328:	2301      	movs	r3, #1
 801832a:	f04f 0a07 	mov.w	sl, #7
 801832e:	9307      	str	r3, [sp, #28]
 8018330:	e717      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018332:	f8cd 901c 	str.w	r9, [sp, #28]
 8018336:	e714      	b.n	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018338:	f1ba 0f02 	cmp.w	sl, #2
 801833c:	f43f ae31 	beq.w	8017fa2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1ca>
 8018340:	f00a 0a05 	and.w	sl, sl, #5
 8018344:	f1ba 0f04 	cmp.w	sl, #4
 8018348:	f43f ae18 	beq.w	8017f7c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1a4>
 801834c:	f1ba 0f05 	cmp.w	sl, #5
 8018350:	f47f ae65 	bne.w	801801e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8018354:	9b06      	ldr	r3, [sp, #24]
 8018356:	f003 0a01 	and.w	sl, r3, #1
 801835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801835c:	b343      	cbz	r3, 80183b0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d8>
 801835e:	f1ba 0f00 	cmp.w	sl, #0
 8018362:	d021      	beq.n	80183a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d0>
 8018364:	f858 300b 	ldr.w	r3, [r8, fp]
 8018368:	591b      	ldr	r3, [r3, r4]
 801836a:	461e      	mov	r6, r3
 801836c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801836e:	f04f 0900 	mov.w	r9, #0
 8018372:	9905      	ldr	r1, [sp, #20]
 8018374:	4628      	mov	r0, r5
 8018376:	9303      	str	r3, [sp, #12]
 8018378:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801837a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 801837e:	9300      	str	r3, [sp, #0]
 8018380:	463a      	mov	r2, r7
 8018382:	464b      	mov	r3, r9
 8018384:	47b0      	blx	r6
 8018386:	464b      	mov	r3, r9
 8018388:	f1ba 0f00 	cmp.w	sl, #0
 801838c:	d00e      	beq.n	80183ac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d4>
 801838e:	f858 200b 	ldr.w	r2, [r8, fp]
 8018392:	f852 a004 	ldr.w	sl, [r2, r4]
 8018396:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018398:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801839c:	9b07      	ldr	r3, [sp, #28]
 801839e:	9301      	str	r3, [sp, #4]
 80183a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80183a2:	9300      	str	r3, [sp, #0]
 80183a4:	2301      	movs	r3, #1
 80183a6:	e636      	b.n	8018016 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x23e>
 80183a8:	4626      	mov	r6, r4
 80183aa:	e7df      	b.n	801836c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x594>
 80183ac:	46a2      	mov	sl, r4
 80183ae:	e7f2      	b.n	8018396 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5be>
 80183b0:	f1ba 0f00 	cmp.w	sl, #0
 80183b4:	d00a      	beq.n	80183cc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f4>
 80183b6:	f858 300b 	ldr.w	r3, [r8, fp]
 80183ba:	f853 9004 	ldr.w	r9, [r3, r4]
 80183be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80183c0:	9907      	ldr	r1, [sp, #28]
 80183c2:	9303      	str	r3, [sp, #12]
 80183c4:	2300      	movs	r3, #0
 80183c6:	440a      	add	r2, r1
 80183c8:	9302      	str	r3, [sp, #8]
 80183ca:	e5e3      	b.n	8017f94 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1bc>
 80183cc:	46a1      	mov	r9, r4
 80183ce:	e7f6      	b.n	80183be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5e6>
 80183d0:	2000      	movs	r0, #0
 80183d2:	e644      	b.n	801805e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x286>
 80183d4:	3b30      	subs	r3, #48	; 0x30
 80183d6:	2b09      	cmp	r3, #9
 80183d8:	d910      	bls.n	80183fc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 80183da:	b978      	cbnz	r0, 80183fc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 80183dc:	f1b9 0f03 	cmp.w	r9, #3
 80183e0:	f63f ad91 	bhi.w	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 80183e4:	a301      	add	r3, pc, #4	; (adr r3, 80183ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x614>)
 80183e6:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 80183ea:	bf00      	nop
 80183ec:	08017e97 	.word	0x08017e97
 80183f0:	08017ea3 	.word	0x08017ea3
 80183f4:	08017f01 	.word	0x08017f01
 80183f8:	08017f2f 	.word	0x08017f2f
 80183fc:	f1b9 0f03 	cmp.w	r9, #3
 8018400:	f63f ad81 	bhi.w	8017f06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8018404:	a301      	add	r3, pc, #4	; (adr r3, 801840c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x634>)
 8018406:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801840a:	bf00      	nop
 801840c:	08017e97 	.word	0x08017e97
 8018410:	08017ea3 	.word	0x08017ea3
 8018414:	08017ed5 	.word	0x08017ed5
 8018418:	08017f2d 	.word	0x08017f2d
 801841c:	f1ba 0f07 	cmp.w	sl, #7
 8018420:	f63f ae9f 	bhi.w	8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018424:	a601      	add	r6, pc, #4	; (adr r6, 801842c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x654>)
 8018426:	f856 f02a 	ldr.w	pc, [r6, sl, lsl #2]
 801842a:	bf00      	nop
 801842c:	0801814d 	.word	0x0801814d
 8018430:	08018163 	.word	0x08018163
 8018434:	0801818d 	.word	0x0801818d
 8018438:	08018163 	.word	0x08018163
 801843c:	080181fd 	.word	0x080181fd
 8018440:	08018223 	.word	0x08018223
 8018444:	080182b3 	.word	0x080182b3
 8018448:	080182e3 	.word	0x080182e3

0801844c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018450:	b09d      	sub	sp, #116	; 0x74
 8018452:	9114      	str	r1, [sp, #80]	; 0x50
 8018454:	9315      	str	r3, [sp, #84]	; 0x54
 8018456:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018458:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801845a:	8809      	ldrh	r1, [r1, #0]
 801845c:	889b      	ldrh	r3, [r3, #4]
 801845e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018460:	440b      	add	r3, r1
 8018462:	9210      	str	r2, [sp, #64]	; 0x40
 8018464:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018468:	b21b      	sxth	r3, r3
 801846a:	900f      	str	r0, [sp, #60]	; 0x3c
 801846c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018470:	930e      	str	r3, [sp, #56]	; 0x38
 8018472:	6833      	ldr	r3, [r6, #0]
 8018474:	7a59      	ldrb	r1, [r3, #9]
 8018476:	7a1b      	ldrb	r3, [r3, #8]
 8018478:	9113      	str	r1, [sp, #76]	; 0x4c
 801847a:	9312      	str	r3, [sp, #72]	; 0x48
 801847c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801847e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018482:	2a00      	cmp	r2, #0
 8018484:	d059      	beq.n	801853a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8018486:	7c33      	ldrb	r3, [r6, #16]
 8018488:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801848a:	2b04      	cmp	r3, #4
 801848c:	bf14      	ite	ne
 801848e:	2301      	movne	r3, #1
 8018490:	2302      	moveq	r3, #2
 8018492:	4413      	add	r3, r2
 8018494:	f04f 0800 	mov.w	r8, #0
 8018498:	930d      	str	r3, [sp, #52]	; 0x34
 801849a:	4645      	mov	r5, r8
 801849c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80184a0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80184a4:	4293      	cmp	r3, r2
 80184a6:	da75      	bge.n	8018594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80184a8:	2300      	movs	r3, #0
 80184aa:	992b      	ldr	r1, [sp, #172]	; 0xac
 80184ac:	6832      	ldr	r2, [r6, #0]
 80184ae:	931a      	str	r3, [sp, #104]	; 0x68
 80184b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184b2:	428b      	cmp	r3, r1
 80184b4:	db43      	blt.n	801853e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80184b6:	6813      	ldr	r3, [r2, #0]
 80184b8:	4610      	mov	r0, r2
 80184ba:	695b      	ldr	r3, [r3, #20]
 80184bc:	4798      	blx	r3
 80184be:	4681      	mov	r9, r0
 80184c0:	6830      	ldr	r0, [r6, #0]
 80184c2:	aa1b      	add	r2, sp, #108	; 0x6c
 80184c4:	4649      	mov	r1, r9
 80184c6:	6803      	ldr	r3, [r0, #0]
 80184c8:	689f      	ldr	r7, [r3, #8]
 80184ca:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80184ce:	47b8      	blx	r7
 80184d0:	901a      	str	r0, [sp, #104]	; 0x68
 80184d2:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80184d6:	45d1      	cmp	r9, sl
 80184d8:	d045      	beq.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184da:	f242 070b 	movw	r7, #8203	; 0x200b
 80184de:	45b9      	cmp	r9, r7
 80184e0:	d041      	beq.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184e2:	f1b9 0f00 	cmp.w	r9, #0
 80184e6:	f000 80ee 	beq.w	80186c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80184ea:	f1b9 0f0a 	cmp.w	r9, #10
 80184ee:	d057      	beq.n	80185a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80184f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80184f2:	b383      	cbz	r3, 8018556 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80184f4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80184f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80184fa:	2a00      	cmp	r2, #0
 80184fc:	f000 80d2 	beq.w	80186a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8018500:	f1bb 0f00 	cmp.w	fp, #0
 8018504:	d100      	bne.n	8018508 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8018506:	4444      	add	r4, r8
 8018508:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801850c:	f1bb 0f01 	cmp.w	fp, #1
 8018510:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8018514:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018518:	ea48 0803 	orr.w	r8, r8, r3
 801851c:	d128      	bne.n	8018570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801851e:	eba4 0408 	sub.w	r4, r4, r8
 8018522:	2d00      	cmp	r5, #0
 8018524:	d143      	bne.n	80185ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018526:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018528:	eb08 0304 	add.w	r3, r8, r4
 801852c:	4413      	add	r3, r2
 801852e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018534:	4293      	cmp	r3, r2
 8018536:	da44      	bge.n	80185c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018538:	e02b      	b.n	8018592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801853a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801853c:	e7aa      	b.n	8018494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801853e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018542:	4659      	mov	r1, fp
 8018544:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018546:	9301      	str	r3, [sp, #4]
 8018548:	ab1b      	add	r3, sp, #108	; 0x6c
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	ab1a      	add	r3, sp, #104	; 0x68
 801854e:	f002 fe85 	bl	801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018552:	4681      	mov	r9, r0
 8018554:	e7bd      	b.n	80184d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018556:	6830      	ldr	r0, [r6, #0]
 8018558:	6803      	ldr	r3, [r0, #0]
 801855a:	691b      	ldr	r3, [r3, #16]
 801855c:	4798      	blx	r3
 801855e:	4550      	cmp	r0, sl
 8018560:	d001      	beq.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018562:	42b8      	cmp	r0, r7
 8018564:	d1c8      	bne.n	80184f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018568:	464d      	mov	r5, r9
 801856a:	3301      	adds	r3, #1
 801856c:	930c      	str	r3, [sp, #48]	; 0x30
 801856e:	e797      	b.n	80184a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018570:	2d00      	cmp	r5, #0
 8018572:	f000 80aa 	beq.w	80186ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8018576:	f1bb 0f00 	cmp.w	fp, #0
 801857a:	d118      	bne.n	80185ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801857c:	6830      	ldr	r0, [r6, #0]
 801857e:	4629      	mov	r1, r5
 8018580:	6803      	ldr	r3, [r0, #0]
 8018582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018584:	4798      	blx	r3
 8018586:	4404      	add	r4, r0
 8018588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801858a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801858c:	1ae3      	subs	r3, r4, r3
 801858e:	4293      	cmp	r3, r2
 8018590:	dd17      	ble.n	80185c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018592:	464d      	mov	r5, r9
 8018594:	2d00      	cmp	r5, #0
 8018596:	f000 8096 	beq.w	80186c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801859a:	2d0a      	cmp	r5, #10
 801859c:	f040 8084 	bne.w	80186a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80185a0:	250a      	movs	r5, #10
 80185a2:	fab5 f085 	clz	r0, r5
 80185a6:	0940      	lsrs	r0, r0, #5
 80185a8:	b01d      	add	sp, #116	; 0x74
 80185aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ae:	6830      	ldr	r0, [r6, #0]
 80185b0:	4629      	mov	r1, r5
 80185b2:	6803      	ldr	r3, [r0, #0]
 80185b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185b6:	4798      	blx	r3
 80185b8:	f1bb 0f01 	cmp.w	fp, #1
 80185bc:	eba4 0400 	sub.w	r4, r4, r0
 80185c0:	d0b1      	beq.n	8018526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80185c2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80185c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80185c6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80185ca:	f9b3 5000 	ldrsh.w	r5, [r3]
 80185ce:	7b43      	ldrb	r3, [r0, #13]
 80185d0:	4421      	add	r1, r4
 80185d2:	015b      	lsls	r3, r3, #5
 80185d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80185d8:	7983      	ldrb	r3, [r0, #6]
 80185da:	4313      	orrs	r3, r2
 80185dc:	440b      	add	r3, r1
 80185de:	42ab      	cmp	r3, r5
 80185e0:	dbc1      	blt.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80185e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185e4:	4299      	cmp	r1, r3
 80185e6:	dabe      	bge.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80185e8:	6830      	ldr	r0, [r6, #0]
 80185ea:	42a5      	cmp	r5, r4
 80185ec:	6803      	ldr	r3, [r0, #0]
 80185ee:	bfcc      	ite	gt
 80185f0:	1b2d      	subgt	r5, r5, r4
 80185f2:	2500      	movle	r5, #0
 80185f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185f6:	bfc8      	it	gt
 80185f8:	b2ad      	uxthgt	r5, r5
 80185fa:	4798      	blx	r3
 80185fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80185fe:	4935      	ldr	r1, [pc, #212]	; (80186d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8018600:	7b5a      	ldrb	r2, [r3, #13]
 8018602:	f893 e008 	ldrb.w	lr, [r3, #8]
 8018606:	f012 0f40 	tst.w	r2, #64	; 0x40
 801860a:	bf18      	it	ne
 801860c:	468c      	movne	ip, r1
 801860e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018610:	bf08      	it	eq
 8018612:	f04f 0c00 	moveq.w	ip, #0
 8018616:	4408      	add	r0, r1
 8018618:	00d1      	lsls	r1, r2, #3
 801861a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801861e:	ea41 070e 	orr.w	r7, r1, lr
 8018622:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018624:	ea4c 0707 	orr.w	r7, ip, r7
 8018628:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801862c:	1bc7      	subs	r7, r0, r7
 801862e:	b2bf      	uxth	r7, r7
 8018630:	fa0f fa87 	sxth.w	sl, r7
 8018634:	4551      	cmp	r1, sl
 8018636:	dd33      	ble.n	80186a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018638:	0112      	lsls	r2, r2, #4
 801863a:	79d8      	ldrb	r0, [r3, #7]
 801863c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018640:	4302      	orrs	r2, r0
 8018642:	4492      	add	sl, r2
 8018644:	4551      	cmp	r1, sl
 8018646:	dc8e      	bgt.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018648:	1bcf      	subs	r7, r1, r7
 801864a:	468a      	mov	sl, r1
 801864c:	b2bf      	uxth	r7, r7
 801864e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018652:	6830      	ldr	r0, [r6, #0]
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	6801      	ldr	r1, [r0, #0]
 8018658:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801865a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801865c:	9311      	str	r3, [sp, #68]	; 0x44
 801865e:	9216      	str	r2, [sp, #88]	; 0x58
 8018660:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018662:	4788      	blx	r1
 8018664:	79b1      	ldrb	r1, [r6, #6]
 8018666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018668:	910b      	str	r1, [sp, #44]	; 0x2c
 801866a:	7bb1      	ldrb	r1, [r6, #14]
 801866c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801866e:	910a      	str	r1, [sp, #40]	; 0x28
 8018670:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018674:	9109      	str	r1, [sp, #36]	; 0x24
 8018676:	68b1      	ldr	r1, [r6, #8]
 8018678:	9305      	str	r3, [sp, #20]
 801867a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801867c:	9206      	str	r2, [sp, #24]
 801867e:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018682:	4425      	add	r5, r4
 8018684:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018688:	b22d      	sxth	r5, r5
 801868a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801868c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018690:	9500      	str	r5, [sp, #0]
 8018692:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018694:	681a      	ldr	r2, [r3, #0]
 8018696:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018698:	685b      	ldr	r3, [r3, #4]
 801869a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801869c:	47a8      	blx	r5
 801869e:	e762      	b.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80186a0:	2700      	movs	r7, #0
 80186a2:	e7d4      	b.n	801864e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 80186a4:	4690      	mov	r8, r2
 80186a6:	e75e      	b.n	8018566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80186a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80186aa:	3401      	adds	r4, #1
 80186ac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80186ae:	429c      	cmp	r4, r3
 80186b0:	f6bf af77 	bge.w	80185a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80186b4:	4659      	mov	r1, fp
 80186b6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80186b8:	f002 fd5c 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80186bc:	4605      	mov	r5, r0
 80186be:	b110      	cbz	r0, 80186c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80186c0:	280a      	cmp	r0, #10
 80186c2:	d1f2      	bne.n	80186aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80186c4:	e76c      	b.n	80185a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80186c6:	2500      	movs	r5, #0
 80186c8:	e76b      	b.n	80185a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80186ca:	f1bb 0f00 	cmp.w	fp, #0
 80186ce:	f43f af5b 	beq.w	8018588 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80186d2:	e776      	b.n	80185c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80186d4:	fffffe00 	.word	0xfffffe00

080186d8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 80186d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186dc:	b08b      	sub	sp, #44	; 0x2c
 80186de:	460e      	mov	r6, r1
 80186e0:	4690      	mov	r8, r2
 80186e2:	4699      	mov	r9, r3
 80186e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80186e6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80186ea:	6929      	ldr	r1, [r5, #16]
 80186ec:	9009      	str	r0, [sp, #36]	; 0x24
 80186ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80186f0:	6809      	ldr	r1, [r1, #0]
 80186f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80186f4:	f7ff fae2 	bl	8017cbc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80186f8:	4604      	mov	r4, r0
 80186fa:	f1bb 0f00 	cmp.w	fp, #0
 80186fe:	d022      	beq.n	8018746 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8018700:	f8d8 3000 	ldr.w	r3, [r8]
 8018704:	4640      	mov	r0, r8
 8018706:	695b      	ldr	r3, [r3, #20]
 8018708:	4798      	blx	r3
 801870a:	4682      	mov	sl, r0
 801870c:	b1d8      	cbz	r0, 8018746 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 801870e:	f8d8 3000 	ldr.w	r3, [r8]
 8018712:	4601      	mov	r1, r0
 8018714:	4640      	mov	r0, r8
 8018716:	68db      	ldr	r3, [r3, #12]
 8018718:	4798      	blx	r3
 801871a:	4602      	mov	r2, r0
 801871c:	f990 700d 	ldrsb.w	r7, [r0, #13]
 8018720:	692b      	ldr	r3, [r5, #16]
 8018722:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018726:	7a97      	ldrb	r7, [r2, #10]
 8018728:	7c1b      	ldrb	r3, [r3, #16]
 801872a:	4307      	orrs	r7, r0
 801872c:	2b04      	cmp	r3, #4
 801872e:	443c      	add	r4, r7
 8018730:	b2a4      	uxth	r4, r4
 8018732:	d108      	bne.n	8018746 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8018734:	f8d8 3000 	ldr.w	r3, [r8]
 8018738:	4651      	mov	r1, sl
 801873a:	4640      	mov	r0, r8
 801873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801873e:	4798      	blx	r3
 8018740:	4438      	add	r0, r7
 8018742:	4404      	add	r4, r0
 8018744:	b2a4      	uxth	r4, r4
 8018746:	692b      	ldr	r3, [r5, #16]
 8018748:	795b      	ldrb	r3, [r3, #5]
 801874a:	bb23      	cbnz	r3, 8018796 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xbe>
 801874c:	f1b9 0f01 	cmp.w	r9, #1
 8018750:	d102      	bne.n	8018758 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8018752:	8833      	ldrh	r3, [r6, #0]
 8018754:	4423      	add	r3, r4
 8018756:	8033      	strh	r3, [r6, #0]
 8018758:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801875a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801875e:	f8cd b018 	str.w	fp, [sp, #24]
 8018762:	9205      	str	r2, [sp, #20]
 8018764:	696a      	ldr	r2, [r5, #20]
 8018766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018768:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801876c:	692a      	ldr	r2, [r5, #16]
 801876e:	9202      	str	r2, [sp, #8]
 8018770:	68ea      	ldr	r2, [r5, #12]
 8018772:	e9cd 6200 	strd	r6, r2, [sp]
 8018776:	e9d5 1200 	ldrd	r1, r2, [r5]
 801877a:	f7ff fe67 	bl	801844c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801877e:	692b      	ldr	r3, [r5, #16]
 8018780:	795b      	ldrb	r3, [r3, #5]
 8018782:	b983      	cbnz	r3, 80187a6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xce>
 8018784:	f1b9 0f00 	cmp.w	r9, #0
 8018788:	d102      	bne.n	8018790 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 801878a:	8830      	ldrh	r0, [r6, #0]
 801878c:	4404      	add	r4, r0
 801878e:	8034      	strh	r4, [r6, #0]
 8018790:	b00b      	add	sp, #44	; 0x2c
 8018792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018796:	2b01      	cmp	r3, #1
 8018798:	d1de      	bne.n	8018758 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 801879a:	f1b9 0f00 	cmp.w	r9, #0
 801879e:	d1db      	bne.n	8018758 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 80187a0:	8833      	ldrh	r3, [r6, #0]
 80187a2:	1b1b      	subs	r3, r3, r4
 80187a4:	e7d7      	b.n	8018756 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x7e>
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d1f2      	bne.n	8018790 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 80187aa:	f1b9 0f01 	cmp.w	r9, #1
 80187ae:	d1ef      	bne.n	8018790 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 80187b0:	8830      	ldrh	r0, [r6, #0]
 80187b2:	1b04      	subs	r4, r0, r4
 80187b4:	e7eb      	b.n	801878e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb6>

080187b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80187b6:	b530      	push	{r4, r5, lr}
 80187b8:	8a44      	ldrh	r4, [r0, #18]
 80187ba:	8ac5      	ldrh	r5, [r0, #22]
 80187bc:	82c3      	strh	r3, [r0, #22]
 80187be:	442c      	add	r4, r5
 80187c0:	1ae4      	subs	r4, r4, r3
 80187c2:	8b03      	ldrh	r3, [r0, #24]
 80187c4:	8244      	strh	r4, [r0, #18]
 80187c6:	8a84      	ldrh	r4, [r0, #20]
 80187c8:	4422      	add	r2, r4
 80187ca:	440c      	add	r4, r1
 80187cc:	1a59      	subs	r1, r3, r1
 80187ce:	8342      	strh	r2, [r0, #26]
 80187d0:	8284      	strh	r4, [r0, #20]
 80187d2:	8301      	strh	r1, [r0, #24]
 80187d4:	bd30      	pop	{r4, r5, pc}

080187d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80187d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187da:	7a45      	ldrb	r5, [r0, #9]
 80187dc:	b085      	sub	sp, #20
 80187de:	4604      	mov	r4, r0
 80187e0:	4689      	mov	r9, r1
 80187e2:	1eeb      	subs	r3, r5, #3
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	b329      	cbz	r1, 8018834 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80187e8:	2b01      	cmp	r3, #1
 80187ea:	d921      	bls.n	8018830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 80187ec:	1e69      	subs	r1, r5, #1
 80187ee:	f1d1 0b00 	rsbs	fp, r1, #0
 80187f2:	eb4b 0b01 	adc.w	fp, fp, r1
 80187f6:	1eaa      	subs	r2, r5, #2
 80187f8:	2500      	movs	r5, #0
 80187fa:	4253      	negs	r3, r2
 80187fc:	9500      	str	r5, [sp, #0]
 80187fe:	4153      	adcs	r3, r2
 8018800:	9301      	str	r3, [sp, #4]
 8018802:	2600      	movs	r6, #0
 8018804:	f242 080b 	movw	r8, #8203	; 0x200b
 8018808:	8266      	strh	r6, [r4, #18]
 801880a:	82a6      	strh	r6, [r4, #20]
 801880c:	2300      	movs	r3, #0
 801880e:	68e2      	ldr	r2, [r4, #12]
 8018810:	7a21      	ldrb	r1, [r4, #8]
 8018812:	9303      	str	r3, [sp, #12]
 8018814:	ab03      	add	r3, sp, #12
 8018816:	6860      	ldr	r0, [r4, #4]
 8018818:	8827      	ldrh	r7, [r4, #0]
 801881a:	f002 fceb 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801881e:	8020      	strh	r0, [r4, #0]
 8018820:	b9b0      	cbnz	r0, 8018850 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8018822:	8b22      	ldrh	r2, [r4, #24]
 8018824:	2300      	movs	r3, #0
 8018826:	4611      	mov	r1, r2
 8018828:	4620      	mov	r0, r4
 801882a:	f7ff ffc4 	bl	80187b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801882e:	e062      	b.n	80188f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018830:	468b      	mov	fp, r1
 8018832:	e7e0      	b.n	80187f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8018834:	2b01      	cmp	r3, #1
 8018836:	f105 35ff 	add.w	r5, r5, #4294967295
 801883a:	9101      	str	r1, [sp, #4]
 801883c:	468b      	mov	fp, r1
 801883e:	bf8c      	ite	hi
 8018840:	2300      	movhi	r3, #0
 8018842:	2301      	movls	r3, #1
 8018844:	2d01      	cmp	r5, #1
 8018846:	9300      	str	r3, [sp, #0]
 8018848:	bf8c      	ite	hi
 801884a:	2500      	movhi	r5, #0
 801884c:	2501      	movls	r5, #1
 801884e:	e7d8      	b.n	8018802 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018850:	8ae3      	ldrh	r3, [r4, #22]
 8018852:	280a      	cmp	r0, #10
 8018854:	f103 0301 	add.w	r3, r3, #1
 8018858:	82e3      	strh	r3, [r4, #22]
 801885a:	d0e2      	beq.n	8018822 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801885c:	9a03      	ldr	r2, [sp, #12]
 801885e:	b972      	cbnz	r2, 801887e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018860:	4540      	cmp	r0, r8
 8018862:	d1d3      	bne.n	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018864:	8823      	ldrh	r3, [r4, #0]
 8018866:	8b21      	ldrh	r1, [r4, #24]
 8018868:	2b20      	cmp	r3, #32
 801886a:	d001      	beq.n	8018870 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801886c:	4543      	cmp	r3, r8
 801886e:	d11d      	bne.n	80188ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018870:	2f20      	cmp	r7, #32
 8018872:	d002      	beq.n	801887a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018874:	4547      	cmp	r7, r8
 8018876:	bf18      	it	ne
 8018878:	460e      	movne	r6, r1
 801887a:	2001      	movs	r0, #1
 801887c:	e017      	b.n	80188ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801887e:	4540      	cmp	r0, r8
 8018880:	d012      	beq.n	80188a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018882:	8893      	ldrh	r3, [r2, #4]
 8018884:	4639      	mov	r1, r7
 8018886:	8023      	strh	r3, [r4, #0]
 8018888:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801888c:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018890:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8018894:	ea4a 0a00 	orr.w	sl, sl, r0
 8018898:	68e0      	ldr	r0, [r4, #12]
 801889a:	6803      	ldr	r3, [r0, #0]
 801889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801889e:	4798      	blx	r3
 80188a0:	eb0a 0200 	add.w	r2, sl, r0
 80188a4:	b292      	uxth	r2, r2
 80188a6:	e7dd      	b.n	8018864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80188a8:	2200      	movs	r2, #0
 80188aa:	e7db      	b.n	8018864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80188ac:	2000      	movs	r0, #0
 80188ae:	440a      	add	r2, r1
 80188b0:	8aa3      	ldrh	r3, [r4, #20]
 80188b2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80188b6:	b292      	uxth	r2, r2
 80188b8:	8322      	strh	r2, [r4, #24]
 80188ba:	4413      	add	r3, r2
 80188bc:	f1b9 0f00 	cmp.w	r9, #0
 80188c0:	d022      	beq.n	8018908 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 80188c2:	f1bb 0f00 	cmp.w	fp, #0
 80188c6:	d102      	bne.n	80188ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 80188c8:	9901      	ldr	r1, [sp, #4]
 80188ca:	b149      	cbz	r1, 80188e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80188cc:	b140      	cbz	r0, 80188e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80188ce:	8ba1      	ldrh	r1, [r4, #28]
 80188d0:	4419      	add	r1, r3
 80188d2:	458c      	cmp	ip, r1
 80188d4:	da12      	bge.n	80188fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80188d6:	8a61      	ldrh	r1, [r4, #18]
 80188d8:	b181      	cbz	r1, 80188fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80188da:	4563      	cmp	r3, ip
 80188dc:	dd96      	ble.n	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188de:	e004      	b.n	80188ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 80188e0:	4563      	cmp	r3, ip
 80188e2:	dd93      	ble.n	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188e4:	8a63      	ldrh	r3, [r4, #18]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d090      	beq.n	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188ea:	2301      	movs	r3, #1
 80188ec:	8ba2      	ldrh	r2, [r4, #28]
 80188ee:	77a3      	strb	r3, [r4, #30]
 80188f0:	8b63      	ldrh	r3, [r4, #26]
 80188f2:	4413      	add	r3, r2
 80188f4:	8363      	strh	r3, [r4, #26]
 80188f6:	b005      	add	sp, #20
 80188f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188fc:	2300      	movs	r3, #0
 80188fe:	4611      	mov	r1, r2
 8018900:	4620      	mov	r0, r4
 8018902:	f7ff ff58 	bl	80187b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018906:	e781      	b.n	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018908:	4563      	cmp	r3, ip
 801890a:	dd16      	ble.n	801893a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801890c:	9b00      	ldr	r3, [sp, #0]
 801890e:	b113      	cbz	r3, 8018916 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018910:	2301      	movs	r3, #1
 8018912:	460a      	mov	r2, r1
 8018914:	e787      	b.n	8018826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018916:	2d00      	cmp	r5, #0
 8018918:	f43f af78 	beq.w	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801891c:	2800      	cmp	r0, #0
 801891e:	f47f af75 	bne.w	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018922:	2f20      	cmp	r7, #32
 8018924:	d001      	beq.n	801892a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8018926:	4547      	cmp	r7, r8
 8018928:	d102      	bne.n	8018930 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801892a:	2301      	movs	r3, #1
 801892c:	4632      	mov	r2, r6
 801892e:	e77b      	b.n	8018828 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018930:	8a63      	ldrh	r3, [r4, #18]
 8018932:	2b00      	cmp	r3, #0
 8018934:	f43f af6a 	beq.w	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018938:	e7dd      	b.n	80188f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801893a:	2800      	cmp	r0, #0
 801893c:	f47f af66 	bne.w	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018940:	2f20      	cmp	r7, #32
 8018942:	d002      	beq.n	801894a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8018944:	4547      	cmp	r7, r8
 8018946:	f47f af61 	bne.w	801880c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801894a:	2301      	movs	r3, #1
 801894c:	4632      	mov	r2, r6
 801894e:	e7d7      	b.n	8018900 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018950 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018950:	b570      	push	{r4, r5, r6, lr}
 8018952:	4606      	mov	r6, r0
 8018954:	b08a      	sub	sp, #40	; 0x28
 8018956:	4615      	mov	r5, r2
 8018958:	b191      	cbz	r1, 8018980 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801895a:	2401      	movs	r4, #1
 801895c:	e9cd 3100 	strd	r3, r1, [sp]
 8018960:	4613      	mov	r3, r2
 8018962:	4601      	mov	r1, r0
 8018964:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018968:	a802      	add	r0, sp, #8
 801896a:	f7ff f96d 	bl	8017c48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801896e:	2100      	movs	r1, #0
 8018970:	a802      	add	r0, sp, #8
 8018972:	f7ff ff30 	bl	80187d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018976:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801897a:	b173      	cbz	r3, 801899a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801897c:	3401      	adds	r4, #1
 801897e:	e7f6      	b.n	801896e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018980:	2401      	movs	r4, #1
 8018982:	4611      	mov	r1, r2
 8018984:	f002 fbf6 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018988:	280a      	cmp	r0, #10
 801898a:	4629      	mov	r1, r5
 801898c:	4630      	mov	r0, r6
 801898e:	bf08      	it	eq
 8018990:	3401      	addeq	r4, #1
 8018992:	f002 fbef 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018996:	2800      	cmp	r0, #0
 8018998:	d1f6      	bne.n	8018988 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801899a:	b2a0      	uxth	r0, r4
 801899c:	b00a      	add	sp, #40	; 0x28
 801899e:	bd70      	pop	{r4, r5, r6, pc}

080189a0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80189a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a4:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 80189a8:	4689      	mov	r9, r1
 80189aa:	461c      	mov	r4, r3
 80189ac:	f8dd a2c8 	ldr.w	sl, [sp, #712]	; 0x2c8
 80189b0:	900a      	str	r0, [sp, #40]	; 0x28
 80189b2:	f1ba 0f00 	cmp.w	sl, #0
 80189b6:	f000 80eb 	beq.w	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	f000 80e7 	beq.w	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80189c2:	7ba3      	ldrb	r3, [r4, #14]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	f000 80e3 	beq.w	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80189ca:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80189ce:	6810      	ldr	r0, [r2, #0]
 80189d0:	6851      	ldr	r1, [r2, #4]
 80189d2:	2600      	movs	r6, #0
 80189d4:	465b      	mov	r3, fp
 80189d6:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80189da:	7965      	ldrb	r5, [r4, #5]
 80189dc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80189e0:	79a2      	ldrb	r2, [r4, #6]
 80189e2:	9610      	str	r6, [sp, #64]	; 0x40
 80189e4:	c303      	stmia	r3!, {r0, r1}
 80189e6:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80189ea:	a910      	add	r1, sp, #64	; 0x40
 80189ec:	4658      	mov	r0, fp
 80189ee:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 80189f2:	f7ff f9a0 	bl	8017d36 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80189f6:	a910      	add	r1, sp, #64	; 0x40
 80189f8:	79a2      	ldrb	r2, [r4, #6]
 80189fa:	4608      	mov	r0, r1
 80189fc:	f7ff f99b 	bl	8017d36 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018a00:	2d00      	cmp	r5, #0
 8018a02:	f040 80a7 	bne.w	8018b54 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018a06:	7923      	ldrb	r3, [r4, #4]
 8018a08:	1b9b      	subs	r3, r3, r6
 8018a0a:	bf18      	it	ne
 8018a0c:	2301      	movne	r3, #1
 8018a0e:	461e      	mov	r6, r3
 8018a10:	9309      	str	r3, [sp, #36]	; 0x24
 8018a12:	a824      	add	r0, sp, #144	; 0x90
 8018a14:	f002 fa6c 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a18:	6820      	ldr	r0, [r4, #0]
 8018a1a:	6803      	ldr	r3, [r0, #0]
 8018a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a1e:	4798      	blx	r3
 8018a20:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a22:	4603      	mov	r3, r0
 8018a24:	4651      	mov	r1, sl
 8018a26:	a824      	add	r0, sp, #144	; 0x90
 8018a28:	f002 fa7f 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a2c:	a83a      	add	r0, sp, #232	; 0xe8
 8018a2e:	f002 fa5f 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a32:	6820      	ldr	r0, [r4, #0]
 8018a34:	6803      	ldr	r3, [r0, #0]
 8018a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a38:	4798      	blx	r3
 8018a3a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	4651      	mov	r1, sl
 8018a40:	a83a      	add	r0, sp, #232	; 0xe8
 8018a42:	f002 fa72 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a46:	a850      	add	r0, sp, #320	; 0x140
 8018a48:	f002 fa52 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a4c:	6820      	ldr	r0, [r4, #0]
 8018a4e:	6803      	ldr	r3, [r0, #0]
 8018a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a52:	4798      	blx	r3
 8018a54:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a56:	4603      	mov	r3, r0
 8018a58:	4651      	mov	r1, sl
 8018a5a:	a850      	add	r0, sp, #320	; 0x140
 8018a5c:	f002 fa65 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a60:	a866      	add	r0, sp, #408	; 0x198
 8018a62:	f002 fa45 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a66:	a87c      	add	r0, sp, #496	; 0x1f0
 8018a68:	f002 fa42 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a6c:	b19e      	cbz	r6, 8018a96 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8018a6e:	6820      	ldr	r0, [r4, #0]
 8018a70:	6803      	ldr	r3, [r0, #0]
 8018a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a74:	4798      	blx	r3
 8018a76:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a78:	4603      	mov	r3, r0
 8018a7a:	4651      	mov	r1, sl
 8018a7c:	a866      	add	r0, sp, #408	; 0x198
 8018a7e:	f002 fa54 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a82:	6820      	ldr	r0, [r4, #0]
 8018a84:	6803      	ldr	r3, [r0, #0]
 8018a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a88:	4798      	blx	r3
 8018a8a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	4651      	mov	r1, sl
 8018a90:	a87c      	add	r0, sp, #496	; 0x1f0
 8018a92:	f002 fa4a 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a96:	6820      	ldr	r0, [r4, #0]
 8018a98:	6803      	ldr	r3, [r0, #0]
 8018a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a9c:	4798      	blx	r3
 8018a9e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018aa2:	eb07 0800 	add.w	r8, r7, r0
 8018aa6:	f1b8 0f00 	cmp.w	r8, #0
 8018aaa:	dd5e      	ble.n	8018b6a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8018aac:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8018ab0:	4283      	cmp	r3, r0
 8018ab2:	db5a      	blt.n	8018b6a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8018ab4:	441f      	add	r7, r3
 8018ab6:	fb97 f7f8 	sdiv	r7, r7, r8
 8018aba:	a892      	add	r0, sp, #584	; 0x248
 8018abc:	f002 fa18 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8018ac0:	7c23      	ldrb	r3, [r4, #16]
 8018ac2:	b14b      	cbz	r3, 8018ad8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018ac4:	6820      	ldr	r0, [r4, #0]
 8018ac6:	6803      	ldr	r3, [r0, #0]
 8018ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aca:	4798      	blx	r3
 8018acc:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018ace:	4603      	mov	r3, r0
 8018ad0:	4651      	mov	r1, sl
 8018ad2:	a892      	add	r0, sp, #584	; 0x248
 8018ad4:	f002 fa29 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018ad8:	7c21      	ldrb	r1, [r4, #16]
 8018ada:	a81c      	add	r0, sp, #112	; 0x70
 8018adc:	7963      	ldrb	r3, [r4, #5]
 8018ade:	9101      	str	r1, [sp, #4]
 8018ae0:	6821      	ldr	r1, [r4, #0]
 8018ae2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8018ae6:	9100      	str	r1, [sp, #0]
 8018ae8:	a992      	add	r1, sp, #584	; 0x248
 8018aea:	f7ff f8ad 	bl	8017c48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018aee:	7c23      	ldrb	r3, [r4, #16]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d051      	beq.n	8018b98 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018af4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018afa:	2f00      	cmp	r7, #0
 8018afc:	dd78      	ble.n	8018bf0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8018afe:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8018b02:	a81c      	add	r0, sp, #112	; 0x70
 8018b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b06:	428b      	cmp	r3, r1
 8018b08:	bfd4      	ite	le
 8018b0a:	2100      	movle	r1, #0
 8018b0c:	2101      	movgt	r1, #1
 8018b0e:	f7ff fe62 	bl	80187d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018b12:	f8bd a082 	ldrh.w	sl, [sp, #130]	; 0x82
 8018b16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018b1a:	fa1f fa83 	uxth.w	sl, r3
 8018b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b22:	459a      	cmp	sl, r3
 8018b24:	d023      	beq.n	8018b6e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ce>
 8018b26:	4629      	mov	r1, r5
 8018b28:	a824      	add	r0, sp, #144	; 0x90
 8018b2a:	f002 fb23 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b2e:	4629      	mov	r1, r5
 8018b30:	a83a      	add	r0, sp, #232	; 0xe8
 8018b32:	f002 fb1f 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b36:	4629      	mov	r1, r5
 8018b38:	a850      	add	r0, sp, #320	; 0x140
 8018b3a:	f002 fb1b 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b3e:	2e00      	cmp	r6, #0
 8018b40:	d0e9      	beq.n	8018b16 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8018b42:	4629      	mov	r1, r5
 8018b44:	a866      	add	r0, sp, #408	; 0x198
 8018b46:	f002 fb15 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b4a:	4629      	mov	r1, r5
 8018b4c:	a87c      	add	r0, sp, #496	; 0x1f0
 8018b4e:	f002 fb11 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b52:	e7e0      	b.n	8018b16 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8018b54:	2d01      	cmp	r5, #1
 8018b56:	d105      	bne.n	8018b64 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c4>
 8018b58:	7926      	ldrb	r6, [r4, #4]
 8018b5a:	9509      	str	r5, [sp, #36]	; 0x24
 8018b5c:	3e02      	subs	r6, #2
 8018b5e:	bf18      	it	ne
 8018b60:	2601      	movne	r6, #1
 8018b62:	e756      	b.n	8018a12 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8018b64:	2301      	movs	r3, #1
 8018b66:	9309      	str	r3, [sp, #36]	; 0x24
 8018b68:	e753      	b.n	8018a12 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8018b6a:	2700      	movs	r7, #0
 8018b6c:	e7a5      	b.n	8018aba <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11a>
 8018b6e:	fa1f f388 	uxth.w	r3, r8
 8018b72:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018b76:	3f01      	subs	r7, #1
 8018b78:	441a      	add	r2, r3
 8018b7a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018b7e:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018b82:	1ad3      	subs	r3, r2, r3
 8018b84:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018b88:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d1b4      	bne.n	8018afa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018b90:	f50d 7d29 	add.w	sp, sp, #676	; 0x2a4
 8018b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b98:	2f00      	cmp	r7, #0
 8018b9a:	dd29      	ble.n	8018bf0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8018b9c:	4629      	mov	r1, r5
 8018b9e:	a824      	add	r0, sp, #144	; 0x90
 8018ba0:	f002 fae8 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	4682      	mov	sl, r0
 8018ba8:	a83a      	add	r0, sp, #232	; 0xe8
 8018baa:	f002 fae3 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018bae:	4629      	mov	r1, r5
 8018bb0:	a850      	add	r0, sp, #320	; 0x140
 8018bb2:	f002 fadf 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018bb6:	b13e      	cbz	r6, 8018bc8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x228>
 8018bb8:	4629      	mov	r1, r5
 8018bba:	a866      	add	r0, sp, #408	; 0x198
 8018bbc:	f002 fada 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018bc0:	4629      	mov	r1, r5
 8018bc2:	a87c      	add	r0, sp, #496	; 0x1f0
 8018bc4:	f002 fad6 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018bc8:	f1ba 0f00 	cmp.w	sl, #0
 8018bcc:	d0e0      	beq.n	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018bce:	f1ba 0f0a 	cmp.w	sl, #10
 8018bd2:	d1e1      	bne.n	8018b98 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018bd4:	fa1f f388 	uxth.w	r3, r8
 8018bd8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018bdc:	3f01      	subs	r7, #1
 8018bde:	441a      	add	r2, r3
 8018be0:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018be4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018be8:	1ad3      	subs	r3, r2, r3
 8018bea:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018bee:	e7d3      	b.n	8018b98 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	4629      	mov	r1, r5
 8018bf4:	a824      	add	r0, sp, #144	; 0x90
 8018bf6:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
 8018bfa:	9316      	str	r3, [sp, #88]	; 0x58
 8018bfc:	ab3a      	add	r3, sp, #232	; 0xe8
 8018bfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8018c00:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018c04:	e9cd b419 	strd	fp, r4, [sp, #100]	; 0x64
 8018c08:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8018c0c:	f002 fab2 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c10:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018c14:	b12e      	cbz	r6, 8018c22 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 8018c16:	4629      	mov	r1, r5
 8018c18:	a866      	add	r0, sp, #408	; 0x198
 8018c1a:	f002 faab 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c1e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8018c22:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c28:	f04f 0300 	mov.w	r3, #0
 8018c2c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018c30:	7c23      	ldrb	r3, [r4, #16]
 8018c32:	b14b      	cbz	r3, 8018c48 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 8018c34:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8018c38:	a81c      	add	r0, sp, #112	; 0x70
 8018c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c3c:	428b      	cmp	r3, r1
 8018c3e:	bfd4      	ite	le
 8018c40:	2100      	movle	r1, #0
 8018c42:	2101      	movgt	r1, #1
 8018c44:	f7ff fdc7 	bl	80187d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	f000 809e 	beq.w	8018d8c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ec>
 8018c50:	2e00      	cmp	r6, #0
 8018c52:	f000 8097 	beq.w	8018d84 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3e4>
 8018c56:	7c22      	ldrb	r2, [r4, #16]
 8018c58:	b9d2      	cbnz	r2, 8018c90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2f0>
 8018c5a:	494f      	ldr	r1, [pc, #316]	; (8018d98 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f8>)
 8018c5c:	ab12      	add	r3, sp, #72	; 0x48
 8018c5e:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 8018c62:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8018c66:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018c6a:	9205      	str	r2, [sp, #20]
 8018c6c:	aa03      	add	r2, sp, #12
 8018c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018c72:	ab7c      	add	r3, sp, #496	; 0x1f0
 8018c74:	e882 0003 	stmia.w	r2, {r0, r1}
 8018c78:	9302      	str	r3, [sp, #8]
 8018c7a:	ab66      	add	r3, sp, #408	; 0x198
 8018c7c:	6822      	ldr	r2, [r4, #0]
 8018c7e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018c82:	9301      	str	r3, [sp, #4]
 8018c84:	ab0d      	add	r3, sp, #52	; 0x34
 8018c86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	462b      	mov	r3, r5
 8018c8c:	f7ff f8a4 	bl	8017dd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018c90:	7c23      	ldrb	r3, [r4, #16]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d064      	beq.n	8018d60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c0>
 8018c96:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
 8018c9a:	7921      	ldrb	r1, [r4, #4]
 8018c9c:	2d00      	cmp	r5, #0
 8018c9e:	d166      	bne.n	8018d6e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ce>
 8018ca0:	2901      	cmp	r1, #1
 8018ca2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018ca6:	d15e      	bne.n	8018d66 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c6>
 8018ca8:	1a9b      	subs	r3, r3, r2
 8018caa:	2202      	movs	r2, #2
 8018cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8018cb0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018cb4:	7c23      	ldrb	r3, [r4, #16]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d06a      	beq.n	8018d90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f0>
 8018cba:	f8bd 1082 	ldrh.w	r1, [sp, #130]	; 0x82
 8018cbe:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
 8018cc2:	4836      	ldr	r0, [pc, #216]	; (8018d9c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3fc>)
 8018cc4:	af16      	add	r7, sp, #88	; 0x58
 8018cc6:	aa14      	add	r2, sp, #80	; 0x50
 8018cc8:	9105      	str	r1, [sp, #20]
 8018cca:	9014      	str	r0, [sp, #80]	; 0x50
 8018ccc:	2000      	movs	r0, #0
 8018cce:	f50d 79a0 	add.w	r9, sp, #320	; 0x140
 8018cd2:	f10d 0a32 	add.w	sl, sp, #50	; 0x32
 8018cd6:	9015      	str	r0, [sp, #84]	; 0x54
 8018cd8:	e9cd 3706 	strd	r3, r7, [sp, #24]
 8018cdc:	ab03      	add	r3, sp, #12
 8018cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ce2:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ce6:	ab24      	add	r3, sp, #144	; 0x90
 8018ce8:	6822      	ldr	r2, [r4, #0]
 8018cea:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018cee:	f8cd 9008 	str.w	r9, [sp, #8]
 8018cf2:	9301      	str	r3, [sp, #4]
 8018cf4:	462b      	mov	r3, r5
 8018cf6:	f8cd a000 	str.w	sl, [sp]
 8018cfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018cfc:	f7ff f86c 	bl	8017dd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018d00:	8939      	ldrh	r1, [r7, #8]
 8018d02:	fa1f f388 	uxth.w	r3, r8
 8018d06:	461a      	mov	r2, r3
 8018d08:	440b      	add	r3, r1
 8018d0a:	813b      	strh	r3, [r7, #8]
 8018d0c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8018d10:	1a9b      	subs	r3, r3, r2
 8018d12:	7c22      	ldrb	r2, [r4, #16]
 8018d14:	b21b      	sxth	r3, r3
 8018d16:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018d1a:	b112      	cbz	r2, 8018d22 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x382>
 8018d1c:	4543      	cmp	r3, r8
 8018d1e:	f6ff af37 	blt.w	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018d22:	b160      	cbz	r0, 8018d3e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018d24:	7961      	ldrb	r1, [r4, #5]
 8018d26:	a83a      	add	r0, sp, #232	; 0xe8
 8018d28:	f002 fa24 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d2c:	7961      	ldrb	r1, [r4, #5]
 8018d2e:	4648      	mov	r0, r9
 8018d30:	f002 fa20 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d34:	b11e      	cbz	r6, 8018d3e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018d36:	4629      	mov	r1, r5
 8018d38:	a87c      	add	r0, sp, #496	; 0x1f0
 8018d3a:	f002 fa1b 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d3e:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8018d42:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018d46:	4413      	add	r3, r2
 8018d48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018d4c:	b21b      	sxth	r3, r3
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	f73f af1e 	bgt.w	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018d54:	f8ba 3000 	ldrh.w	r3, [sl]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f47f af65 	bne.w	8018c28 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 8018d5e:	e717      	b.n	8018b90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018d60:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8018d64:	e799      	b.n	8018c9a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2fa>
 8018d66:	7be1      	ldrb	r1, [r4, #15]
 8018d68:	1a5b      	subs	r3, r3, r1
 8018d6a:	1a9b      	subs	r3, r3, r2
 8018d6c:	e7a0      	b.n	8018cb0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d6e:	2901      	cmp	r1, #1
 8018d70:	d103      	bne.n	8018d7a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3da>
 8018d72:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018d76:	4413      	add	r3, r2
 8018d78:	e797      	b.n	8018caa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x30a>
 8018d7a:	2900      	cmp	r1, #0
 8018d7c:	d19a      	bne.n	8018cb4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x314>
 8018d7e:	7be3      	ldrb	r3, [r4, #15]
 8018d80:	4413      	add	r3, r2
 8018d82:	e795      	b.n	8018cb0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d84:	7be2      	ldrb	r2, [r4, #15]
 8018d86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018d8a:	e7ee      	b.n	8018d6a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ca>
 8018d8c:	7be3      	ldrb	r3, [r4, #15]
 8018d8e:	e78f      	b.n	8018cb0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d90:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018d94:	e795      	b.n	8018cc2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x322>
 8018d96:	bf00      	nop
 8018d98:	08017d21 	.word	0x08017d21
 8018d9c:	080186d9 	.word	0x080186d9

08018da0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018da0:	2b02      	cmp	r3, #2
 8018da2:	b510      	push	{r4, lr}
 8018da4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018da8:	d00b      	beq.n	8018dc2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018daa:	2b03      	cmp	r3, #3
 8018dac:	d00e      	beq.n	8018dcc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d001      	beq.n	8018db6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018db2:	1860      	adds	r0, r4, r1
 8018db4:	bd10      	pop	{r4, pc}
 8018db6:	8880      	ldrh	r0, [r0, #4]
 8018db8:	4420      	add	r0, r4
 8018dba:	b200      	sxth	r0, r0
 8018dbc:	1a80      	subs	r0, r0, r2
 8018dbe:	3801      	subs	r0, #1
 8018dc0:	e7f8      	b.n	8018db4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018dc2:	8880      	ldrh	r0, [r0, #4]
 8018dc4:	4420      	add	r0, r4
 8018dc6:	b200      	sxth	r0, r0
 8018dc8:	1a40      	subs	r0, r0, r1
 8018dca:	e7f8      	b.n	8018dbe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018dcc:	18a0      	adds	r0, r4, r2
 8018dce:	e7f1      	b.n	8018db4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018dd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018dd0:	2b02      	cmp	r3, #2
 8018dd2:	b510      	push	{r4, lr}
 8018dd4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018dd8:	d006      	beq.n	8018de8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018dda:	2b03      	cmp	r3, #3
 8018ddc:	d00a      	beq.n	8018df4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	bf14      	ite	ne
 8018de2:	18a0      	addne	r0, r4, r2
 8018de4:	1860      	addeq	r0, r4, r1
 8018de6:	bd10      	pop	{r4, pc}
 8018de8:	88c0      	ldrh	r0, [r0, #6]
 8018dea:	4420      	add	r0, r4
 8018dec:	b200      	sxth	r0, r0
 8018dee:	1a80      	subs	r0, r0, r2
 8018df0:	3801      	subs	r0, #1
 8018df2:	e7f8      	b.n	8018de6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018df4:	88c0      	ldrh	r0, [r0, #6]
 8018df6:	4420      	add	r0, r4
 8018df8:	b200      	sxth	r0, r0
 8018dfa:	1a40      	subs	r0, r0, r1
 8018dfc:	e7f8      	b.n	8018df0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018e00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018e00:	4b01      	ldr	r3, [pc, #4]	; (8018e08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018e02:	2200      	movs	r2, #0
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	4770      	bx	lr
 8018e08:	2000bbbc 	.word	0x2000bbbc

08018e0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e0e:	1e05      	subs	r5, r0, #0
 8018e10:	f04f 0601 	mov.w	r6, #1
 8018e14:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018e18:	bfba      	itte	lt
 8018e1a:	f04f 37ff 	movlt.w	r7, #4294967295
 8018e1e:	426d      	neglt	r5, r5
 8018e20:	2701      	movge	r7, #1
 8018e22:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018e26:	f1be 0f00 	cmp.w	lr, #0
 8018e2a:	bfbc      	itt	lt
 8018e2c:	f1ce 0e00 	rsblt	lr, lr, #0
 8018e30:	427f      	neglt	r7, r7
 8018e32:	2c00      	cmp	r4, #0
 8018e34:	fa4e f001 	asr.w	r0, lr, r1
 8018e38:	fa06 f101 	lsl.w	r1, r6, r1
 8018e3c:	bfbc      	itt	lt
 8018e3e:	4264      	neglt	r4, r4
 8018e40:	427f      	neglt	r7, r7
 8018e42:	3901      	subs	r1, #1
 8018e44:	ea01 010e 	and.w	r1, r1, lr
 8018e48:	434d      	muls	r5, r1
 8018e4a:	f8dc 1000 	ldr.w	r1, [ip]
 8018e4e:	fb03 1300 	mla	r3, r3, r0, r1
 8018e52:	fb95 f1f4 	sdiv	r1, r5, r4
 8018e56:	fb04 5511 	mls	r5, r4, r1, r5
 8018e5a:	441d      	add	r5, r3
 8018e5c:	fb95 f3f4 	sdiv	r3, r5, r4
 8018e60:	4419      	add	r1, r3
 8018e62:	fb04 5413 	mls	r4, r4, r3, r5
 8018e66:	fb02 1000 	mla	r0, r2, r0, r1
 8018e6a:	f8cc 4000 	str.w	r4, [ip]
 8018e6e:	4378      	muls	r0, r7
 8018e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018e74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e78:	4c24      	ldr	r4, [pc, #144]	; (8018f0c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018e7a:	b086      	sub	sp, #24
 8018e7c:	4605      	mov	r5, r0
 8018e7e:	6807      	ldr	r7, [r0, #0]
 8018e80:	69a3      	ldr	r3, [r4, #24]
 8018e82:	b92b      	cbnz	r3, 8018e90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018e84:	6840      	ldr	r0, [r0, #4]
 8018e86:	e9c5 7000 	strd	r7, r0, [r5]
 8018e8a:	b006      	add	sp, #24
 8018e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e90:	f04f 0802 	mov.w	r8, #2
 8018e94:	68a2      	ldr	r2, [r4, #8]
 8018e96:	ae06      	add	r6, sp, #24
 8018e98:	6820      	ldr	r0, [r4, #0]
 8018e9a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018e9e:	440a      	add	r2, r1
 8018ea0:	69e1      	ldr	r1, [r4, #28]
 8018ea2:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018ea6:	9700      	str	r7, [sp, #0]
 8018ea8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018eaa:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018eb0:	f7ff ffac 	bl	8018e0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018eb4:	69a3      	ldr	r3, [r4, #24]
 8018eb6:	4607      	mov	r7, r0
 8018eb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018eba:	9301      	str	r3, [sp, #4]
 8018ebc:	686b      	ldr	r3, [r5, #4]
 8018ebe:	6a21      	ldr	r1, [r4, #32]
 8018ec0:	9300      	str	r3, [sp, #0]
 8018ec2:	9602      	str	r6, [sp, #8]
 8018ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018ec6:	6860      	ldr	r0, [r4, #4]
 8018ec8:	f7ff ffa0 	bl	8018e0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018ecc:	69a2      	ldr	r2, [r4, #24]
 8018ece:	6963      	ldr	r3, [r4, #20]
 8018ed0:	4407      	add	r7, r0
 8018ed2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018ed4:	68e0      	ldr	r0, [r4, #12]
 8018ed6:	fb92 f8f8 	sdiv	r8, r2, r8
 8018eda:	4443      	add	r3, r8
 8018edc:	9305      	str	r3, [sp, #20]
 8018ede:	682b      	ldr	r3, [r5, #0]
 8018ee0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018eea:	f7ff ff8f 	bl	8018e0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018eee:	69a3      	ldr	r3, [r4, #24]
 8018ef0:	4680      	mov	r8, r0
 8018ef2:	9602      	str	r6, [sp, #8]
 8018ef4:	9301      	str	r3, [sp, #4]
 8018ef6:	686b      	ldr	r3, [r5, #4]
 8018ef8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018efa:	9300      	str	r3, [sp, #0]
 8018efc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018efe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018f00:	6920      	ldr	r0, [r4, #16]
 8018f02:	f7ff ff83 	bl	8018e0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018f06:	4440      	add	r0, r8
 8018f08:	e7bd      	b.n	8018e86 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018f0a:	bf00      	nop
 8018f0c:	2000bbc0 	.word	0x2000bbc0

08018f10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018f10:	4b07      	ldr	r3, [pc, #28]	; (8018f30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018f12:	b510      	push	{r4, lr}
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	2b01      	cmp	r3, #1
 8018f18:	d108      	bne.n	8018f2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018f1a:	4b06      	ldr	r3, [pc, #24]	; (8018f34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018f1c:	880c      	ldrh	r4, [r1, #0]
 8018f1e:	881b      	ldrh	r3, [r3, #0]
 8018f20:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018f24:	3b01      	subs	r3, #1
 8018f26:	1b1b      	subs	r3, r3, r4
 8018f28:	8003      	strh	r3, [r0, #0]
 8018f2a:	800a      	strh	r2, [r1, #0]
 8018f2c:	bd10      	pop	{r4, pc}
 8018f2e:	bf00      	nop
 8018f30:	2000bb8c 	.word	0x2000bb8c
 8018f34:	2000bb90 	.word	0x2000bb90

08018f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018f38:	4b0a      	ldr	r3, [pc, #40]	; (8018f64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018f3a:	b510      	push	{r4, lr}
 8018f3c:	781b      	ldrb	r3, [r3, #0]
 8018f3e:	2b01      	cmp	r3, #1
 8018f40:	d10e      	bne.n	8018f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018f42:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018f46:	8843      	ldrh	r3, [r0, #2]
 8018f48:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f4c:	18ca      	adds	r2, r1, r3
 8018f4e:	4b06      	ldr	r3, [pc, #24]	; (8018f68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018f50:	8044      	strh	r4, [r0, #2]
 8018f52:	881b      	ldrh	r3, [r3, #0]
 8018f54:	1a9b      	subs	r3, r3, r2
 8018f56:	8003      	strh	r3, [r0, #0]
 8018f58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018f5c:	8081      	strh	r1, [r0, #4]
 8018f5e:	80c3      	strh	r3, [r0, #6]
 8018f60:	bd10      	pop	{r4, pc}
 8018f62:	bf00      	nop
 8018f64:	2000bb8c 	.word	0x2000bb8c
 8018f68:	2000bb88 	.word	0x2000bb88

08018f6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018f6c:	4b07      	ldr	r3, [pc, #28]	; (8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018f6e:	b510      	push	{r4, lr}
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	2b01      	cmp	r3, #1
 8018f74:	d108      	bne.n	8018f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018f76:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018f7a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f7e:	8003      	strh	r3, [r0, #0]
 8018f80:	8893      	ldrh	r3, [r2, #4]
 8018f82:	3b01      	subs	r3, #1
 8018f84:	1b1b      	subs	r3, r3, r4
 8018f86:	800b      	strh	r3, [r1, #0]
 8018f88:	bd10      	pop	{r4, pc}
 8018f8a:	bf00      	nop
 8018f8c:	2000bb8c 	.word	0x2000bb8c

08018f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018f90:	4b08      	ldr	r3, [pc, #32]	; (8018fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018f92:	b513      	push	{r0, r1, r4, lr}
 8018f94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f98:	2400      	movs	r4, #0
 8018f9a:	4b07      	ldr	r3, [pc, #28]	; (8018fb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018f9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018fa0:	466a      	mov	r2, sp
 8018fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fa6:	9400      	str	r4, [sp, #0]
 8018fa8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018fac:	f7ff ffde 	bl	8018f6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018fb0:	b002      	add	sp, #8
 8018fb2:	bd10      	pop	{r4, pc}
 8018fb4:	2000bb88 	.word	0x2000bb88
 8018fb8:	2000bb8a 	.word	0x2000bb8a

08018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018fbc:	4b0a      	ldr	r3, [pc, #40]	; (8018fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018fbe:	460a      	mov	r2, r1
 8018fc0:	b510      	push	{r4, lr}
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	2b01      	cmp	r3, #1
 8018fc6:	d10d      	bne.n	8018fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018fc8:	8881      	ldrh	r1, [r0, #4]
 8018fca:	8803      	ldrh	r3, [r0, #0]
 8018fcc:	440b      	add	r3, r1
 8018fce:	4601      	mov	r1, r0
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	f821 3b02 	strh.w	r3, [r1], #2
 8018fd6:	f7ff ffc9 	bl	8018f6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018fda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018fde:	88c2      	ldrh	r2, [r0, #6]
 8018fe0:	80c3      	strh	r3, [r0, #6]
 8018fe2:	8082      	strh	r2, [r0, #4]
 8018fe4:	bd10      	pop	{r4, pc}
 8018fe6:	bf00      	nop
 8018fe8:	2000bb8c 	.word	0x2000bb8c

08018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018fec:	4b09      	ldr	r3, [pc, #36]	; (8019014 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018fee:	b507      	push	{r0, r1, r2, lr}
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ff6:	4b08      	ldr	r3, [pc, #32]	; (8019018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018ff8:	9100      	str	r1, [sp, #0]
 8018ffa:	4669      	mov	r1, sp
 8018ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019000:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019004:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019008:	f7ff ffd8 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801900c:	b003      	add	sp, #12
 801900e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019012:	bf00      	nop
 8019014:	2000bb88 	.word	0x2000bb88
 8019018:	2000bb8a 	.word	0x2000bb8a

0801901c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801901c:	4b03      	ldr	r3, [pc, #12]	; (801902c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801901e:	6818      	ldr	r0, [r3, #0]
 8019020:	b110      	cbz	r0, 8019028 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019022:	6803      	ldr	r3, [r0, #0]
 8019024:	699b      	ldr	r3, [r3, #24]
 8019026:	4718      	bx	r3
 8019028:	4770      	bx	lr
 801902a:	bf00      	nop
 801902c:	2000bc10 	.word	0x2000bc10

08019030 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019030:	4770      	bx	lr
	...

08019034 <_ZN8touchgfx11Application4drawEv>:
 8019034:	4b09      	ldr	r3, [pc, #36]	; (801905c <_ZN8touchgfx11Application4drawEv+0x28>)
 8019036:	b507      	push	{r0, r1, r2, lr}
 8019038:	f9b3 2000 	ldrsh.w	r2, [r3]
 801903c:	2100      	movs	r1, #0
 801903e:	4b08      	ldr	r3, [pc, #32]	; (8019060 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019040:	9100      	str	r1, [sp, #0]
 8019042:	4669      	mov	r1, sp
 8019044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019048:	f8ad 2004 	strh.w	r2, [sp, #4]
 801904c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019050:	6803      	ldr	r3, [r0, #0]
 8019052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019054:	4798      	blx	r3
 8019056:	b003      	add	sp, #12
 8019058:	f85d fb04 	ldr.w	pc, [sp], #4
 801905c:	2000bb88 	.word	0x2000bb88
 8019060:	2000bb8a 	.word	0x2000bb8a

08019064 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019064:	4b03      	ldr	r3, [pc, #12]	; (8019074 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019066:	6818      	ldr	r0, [r3, #0]
 8019068:	b110      	cbz	r0, 8019070 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801906a:	6803      	ldr	r3, [r0, #0]
 801906c:	69db      	ldr	r3, [r3, #28]
 801906e:	4718      	bx	r3
 8019070:	4770      	bx	lr
 8019072:	bf00      	nop
 8019074:	2000bc10 	.word	0x2000bc10

08019078 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019078:	4b03      	ldr	r3, [pc, #12]	; (8019088 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801907a:	6818      	ldr	r0, [r3, #0]
 801907c:	b110      	cbz	r0, 8019084 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801907e:	6803      	ldr	r3, [r0, #0]
 8019080:	6a1b      	ldr	r3, [r3, #32]
 8019082:	4718      	bx	r3
 8019084:	4770      	bx	lr
 8019086:	bf00      	nop
 8019088:	2000bc10 	.word	0x2000bc10

0801908c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801908c:	4b03      	ldr	r3, [pc, #12]	; (801909c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801908e:	6818      	ldr	r0, [r3, #0]
 8019090:	b110      	cbz	r0, 8019098 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019092:	6803      	ldr	r3, [r0, #0]
 8019094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019096:	4718      	bx	r3
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	2000bc10 	.word	0x2000bc10

080190a0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80190a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190a4:	4d3a      	ldr	r5, [pc, #232]	; (8019190 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 80190a6:	4604      	mov	r4, r0
 80190a8:	6828      	ldr	r0, [r5, #0]
 80190aa:	b140      	cbz	r0, 80190be <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80190ac:	7a03      	ldrb	r3, [r0, #8]
 80190ae:	b933      	cbnz	r3, 80190be <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80190b0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80190b4:	6803      	ldr	r3, [r0, #0]
 80190b6:	689b      	ldr	r3, [r3, #8]
 80190b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190bc:	4718      	bx	r3
 80190be:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80190c2:	b97b      	cbnz	r3, 80190e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80190c4:	b170      	cbz	r0, 80190e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80190c6:	7a03      	ldrb	r3, [r0, #8]
 80190c8:	b163      	cbz	r3, 80190e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80190ca:	4b32      	ldr	r3, [pc, #200]	; (8019194 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80190cc:	6818      	ldr	r0, [r3, #0]
 80190ce:	b110      	cbz	r0, 80190d6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	691b      	ldr	r3, [r3, #16]
 80190d4:	4798      	blx	r3
 80190d6:	6828      	ldr	r0, [r5, #0]
 80190d8:	6803      	ldr	r3, [r0, #0]
 80190da:	68db      	ldr	r3, [r3, #12]
 80190dc:	4798      	blx	r3
 80190de:	2301      	movs	r3, #1
 80190e0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80190e4:	2500      	movs	r5, #0
 80190e6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80190ea:	42a8      	cmp	r0, r5
 80190ec:	dd0c      	ble.n	8019108 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80190ee:	1963      	adds	r3, r4, r5
 80190f0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80190f4:	b132      	cbz	r2, 8019104 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80190f6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80190fa:	4413      	add	r3, r2
 80190fc:	6858      	ldr	r0, [r3, #4]
 80190fe:	6803      	ldr	r3, [r0, #0]
 8019100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019102:	4798      	blx	r3
 8019104:	3501      	adds	r5, #1
 8019106:	e7ee      	b.n	80190e6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8019108:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801910c:	3801      	subs	r0, #1
 801910e:	f04f 0c00 	mov.w	ip, #0
 8019112:	3678      	adds	r6, #120	; 0x78
 8019114:	1c43      	adds	r3, r0, #1
 8019116:	d033      	beq.n	8019180 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8019118:	1823      	adds	r3, r4, r0
 801911a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801911e:	bb6a      	cbnz	r2, 801917c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8019120:	b281      	uxth	r1, r0
 8019122:	1d25      	adds	r5, r4, #4
 8019124:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8019128:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801912c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8019130:	4293      	cmp	r3, r2
 8019132:	dc0a      	bgt.n	801914a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8019134:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8019138:	4422      	add	r2, r4
 801913a:	18b1      	adds	r1, r6, r2
 801913c:	b289      	uxth	r1, r1
 801913e:	428b      	cmp	r3, r1
 8019140:	d919      	bls.n	8019176 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8019142:	7851      	ldrb	r1, [r2, #1]
 8019144:	f802 1b01 	strb.w	r1, [r2], #1
 8019148:	e7f7      	b.n	801913a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801914a:	682f      	ldr	r7, [r5, #0]
 801914c:	f105 0804 	add.w	r8, r5, #4
 8019150:	45b9      	cmp	r9, r7
 8019152:	d10d      	bne.n	8019170 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8019154:	4696      	mov	lr, r2
 8019156:	f1be 0f1e 	cmp.w	lr, #30
 801915a:	dc06      	bgt.n	801916a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801915c:	f10e 0e01 	add.w	lr, lr, #1
 8019160:	686f      	ldr	r7, [r5, #4]
 8019162:	4573      	cmp	r3, lr
 8019164:	f845 7b04 	str.w	r7, [r5], #4
 8019168:	dcf5      	bgt.n	8019156 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801916a:	3b01      	subs	r3, #1
 801916c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8019170:	3201      	adds	r2, #1
 8019172:	4645      	mov	r5, r8
 8019174:	e7da      	b.n	801912c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8019176:	4423      	add	r3, r4
 8019178:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801917c:	3801      	subs	r0, #1
 801917e:	e7c9      	b.n	8019114 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8019180:	4b04      	ldr	r3, [pc, #16]	; (8019194 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8019182:	6818      	ldr	r0, [r3, #0]
 8019184:	b110      	cbz	r0, 801918c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8019186:	6803      	ldr	r3, [r0, #0]
 8019188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801918a:	e795      	b.n	80190b8 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019190:	2000bc14 	.word	0x2000bc14
 8019194:	2000bc10 	.word	0x2000bc10

08019198 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019198:	b570      	push	{r4, r5, r6, lr}
 801919a:	4606      	mov	r6, r0
 801919c:	460c      	mov	r4, r1
 801919e:	b929      	cbnz	r1, 80191ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80191a0:	4b0c      	ldr	r3, [pc, #48]	; (80191d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80191a2:	2164      	movs	r1, #100	; 0x64
 80191a4:	4a0c      	ldr	r2, [pc, #48]	; (80191d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80191a6:	480d      	ldr	r0, [pc, #52]	; (80191dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80191a8:	f00c fb20 	bl	80257ec <__assert_func>
 80191ac:	2300      	movs	r3, #0
 80191ae:	4d0c      	ldr	r5, [pc, #48]	; (80191e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80191b0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80191b4:	6828      	ldr	r0, [r5, #0]
 80191b6:	b110      	cbz	r0, 80191be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80191b8:	6803      	ldr	r3, [r0, #0]
 80191ba:	695b      	ldr	r3, [r3, #20]
 80191bc:	4798      	blx	r3
 80191be:	602c      	str	r4, [r5, #0]
 80191c0:	4620      	mov	r0, r4
 80191c2:	6823      	ldr	r3, [r4, #0]
 80191c4:	68db      	ldr	r3, [r3, #12]
 80191c6:	4798      	blx	r3
 80191c8:	6833      	ldr	r3, [r6, #0]
 80191ca:	4630      	mov	r0, r6
 80191cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191d2:	4718      	bx	r3
 80191d4:	080290dc 	.word	0x080290dc
 80191d8:	080291a4 	.word	0x080291a4
 80191dc:	080290e6 	.word	0x080290e6
 80191e0:	2000bc10 	.word	0x2000bc10

080191e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80191e4:	b510      	push	{r4, lr}
 80191e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80191ea:	888a      	ldrh	r2, [r1, #4]
 80191ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80191f0:	4422      	add	r2, r4
 80191f2:	b212      	sxth	r2, r2
 80191f4:	4293      	cmp	r3, r2
 80191f6:	da15      	bge.n	8019224 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191f8:	8882      	ldrh	r2, [r0, #4]
 80191fa:	4413      	add	r3, r2
 80191fc:	b21b      	sxth	r3, r3
 80191fe:	429c      	cmp	r4, r3
 8019200:	da10      	bge.n	8019224 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019202:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019206:	88c9      	ldrh	r1, [r1, #6]
 8019208:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801920c:	4419      	add	r1, r3
 801920e:	b209      	sxth	r1, r1
 8019210:	428a      	cmp	r2, r1
 8019212:	da07      	bge.n	8019224 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019214:	88c0      	ldrh	r0, [r0, #6]
 8019216:	4410      	add	r0, r2
 8019218:	b200      	sxth	r0, r0
 801921a:	4283      	cmp	r3, r0
 801921c:	bfac      	ite	ge
 801921e:	2000      	movge	r0, #0
 8019220:	2001      	movlt	r0, #1
 8019222:	bd10      	pop	{r4, pc}
 8019224:	2000      	movs	r0, #0
 8019226:	e7fc      	b.n	8019222 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019228 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019228:	b570      	push	{r4, r5, r6, lr}
 801922a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801922e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019232:	42ac      	cmp	r4, r5
 8019234:	db18      	blt.n	8019268 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019236:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801923a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801923e:	429a      	cmp	r2, r3
 8019240:	db12      	blt.n	8019268 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019242:	8886      	ldrh	r6, [r0, #4]
 8019244:	4435      	add	r5, r6
 8019246:	888e      	ldrh	r6, [r1, #4]
 8019248:	4434      	add	r4, r6
 801924a:	b22d      	sxth	r5, r5
 801924c:	b224      	sxth	r4, r4
 801924e:	42a5      	cmp	r5, r4
 8019250:	db0a      	blt.n	8019268 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019252:	88c0      	ldrh	r0, [r0, #6]
 8019254:	4418      	add	r0, r3
 8019256:	88cb      	ldrh	r3, [r1, #6]
 8019258:	441a      	add	r2, r3
 801925a:	b200      	sxth	r0, r0
 801925c:	b212      	sxth	r2, r2
 801925e:	4290      	cmp	r0, r2
 8019260:	bfb4      	ite	lt
 8019262:	2000      	movlt	r0, #0
 8019264:	2001      	movge	r0, #1
 8019266:	bd70      	pop	{r4, r5, r6, pc}
 8019268:	2000      	movs	r0, #0
 801926a:	e7fc      	b.n	8019266 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801926c <_ZN8touchgfx11Application11getInstanceEv>:
 801926c:	4b01      	ldr	r3, [pc, #4]	; (8019274 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801926e:	6818      	ldr	r0, [r3, #0]
 8019270:	4770      	bx	lr
 8019272:	bf00      	nop
 8019274:	2000bc20 	.word	0x2000bc20

08019278 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019278:	2300      	movs	r3, #0
 801927a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801927e:	30a8      	adds	r0, #168	; 0xa8
 8019280:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019284:	f802 3b01 	strb.w	r3, [r2], #1
 8019288:	4282      	cmp	r2, r0
 801928a:	d1fb      	bne.n	8019284 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801928c:	4770      	bx	lr

0801928e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801928e:	4603      	mov	r3, r0
 8019290:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019294:	2200      	movs	r2, #0
 8019296:	801a      	strh	r2, [r3, #0]
 8019298:	3308      	adds	r3, #8
 801929a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801929e:	f823 2c04 	strh.w	r2, [r3, #-4]
 80192a2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80192a6:	428b      	cmp	r3, r1
 80192a8:	d1f5      	bne.n	8019296 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80192aa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80192ae:	4770      	bx	lr

080192b0 <_ZN8touchgfx11ApplicationC1Ev>:
 80192b0:	b570      	push	{r4, r5, r6, lr}
 80192b2:	4b16      	ldr	r3, [pc, #88]	; (801930c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 80192b4:	2500      	movs	r5, #0
 80192b6:	4604      	mov	r4, r0
 80192b8:	30a8      	adds	r0, #168	; 0xa8
 80192ba:	f840 3ca8 	str.w	r3, [r0, #-168]
 80192be:	f820 5c24 	strh.w	r5, [r0, #-36]
 80192c2:	f7ff ffe4 	bl	801928e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80192c6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80192ca:	f7ff ffe0 	bl	801928e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80192ce:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80192d2:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80192d6:	490e      	ldr	r1, [pc, #56]	; (8019310 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80192d8:	480e      	ldr	r0, [pc, #56]	; (8019314 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80192da:	f00a fd6d 	bl	8023db8 <CRC_Lock>
 80192de:	4e0e      	ldr	r6, [pc, #56]	; (8019318 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80192e0:	4b0e      	ldr	r3, [pc, #56]	; (801931c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80192e2:	b158      	cbz	r0, 80192fc <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80192e4:	801d      	strh	r5, [r3, #0]
 80192e6:	2300      	movs	r3, #0
 80192e8:	4a0d      	ldr	r2, [pc, #52]	; (8019320 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80192ea:	4620      	mov	r0, r4
 80192ec:	6013      	str	r3, [r2, #0]
 80192ee:	4a0d      	ldr	r2, [pc, #52]	; (8019324 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80192f0:	6033      	str	r3, [r6, #0]
 80192f2:	6013      	str	r3, [r2, #0]
 80192f4:	f7ff ffc0 	bl	8019278 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80192f8:	4620      	mov	r0, r4
 80192fa:	bd70      	pop	{r4, r5, r6, pc}
 80192fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019300:	2002      	movs	r0, #2
 8019302:	801a      	strh	r2, [r3, #0]
 8019304:	6030      	str	r0, [r6, #0]
 8019306:	f000 ffa9 	bl	801a25c <_ZN8touchgfx6Screen4drawEv>
 801930a:	e7ec      	b.n	80192e6 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801930c:	08029170 	.word	0x08029170
 8019310:	b5e8b5cd 	.word	0xb5e8b5cd
 8019314:	f407a5c2 	.word	0xf407a5c2
 8019318:	2000bc10 	.word	0x2000bc10
 801931c:	20000054 	.word	0x20000054
 8019320:	2000bc20 	.word	0x2000bc20
 8019324:	2000bc14 	.word	0x2000bc14

08019328 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019328:	2300      	movs	r3, #0
 801932a:	8003      	strh	r3, [r0, #0]
 801932c:	8043      	strh	r3, [r0, #2]
 801932e:	8083      	strh	r3, [r0, #4]
 8019330:	80c3      	strh	r3, [r0, #6]
 8019332:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019336:	4293      	cmp	r3, r2
 8019338:	b530      	push	{r4, r5, lr}
 801933a:	d912      	bls.n	8019362 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801933c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019340:	3b01      	subs	r3, #1
 8019342:	6825      	ldr	r5, [r4, #0]
 8019344:	b29b      	uxth	r3, r3
 8019346:	6005      	str	r5, [r0, #0]
 8019348:	4293      	cmp	r3, r2
 801934a:	6865      	ldr	r5, [r4, #4]
 801934c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8019350:	6045      	str	r5, [r0, #4]
 8019352:	d906      	bls.n	8019362 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019354:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019358:	681d      	ldr	r5, [r3, #0]
 801935a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801935e:	685d      	ldr	r5, [r3, #4]
 8019360:	6065      	str	r5, [r4, #4]
 8019362:	bd30      	pop	{r4, r5, pc}

08019364 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019366:	466b      	mov	r3, sp
 8019368:	4604      	mov	r4, r0
 801936a:	e883 0006 	stmia.w	r3, {r1, r2}
 801936e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8019372:	2a07      	cmp	r2, #7
 8019374:	d906      	bls.n	8019384 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019376:	4b09      	ldr	r3, [pc, #36]	; (801939c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019378:	f44f 7102 	mov.w	r1, #520	; 0x208
 801937c:	4a08      	ldr	r2, [pc, #32]	; (80193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801937e:	4809      	ldr	r0, [pc, #36]	; (80193a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019380:	f00c fa34 	bl	80257ec <__assert_func>
 8019384:	1c51      	adds	r1, r2, #1
 8019386:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801938a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801938e:	cb03      	ldmia	r3!, {r0, r1}
 8019390:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019394:	6069      	str	r1, [r5, #4]
 8019396:	b003      	add	sp, #12
 8019398:	bd30      	pop	{r4, r5, pc}
 801939a:	bf00      	nop
 801939c:	08029110 	.word	0x08029110
 80193a0:	080291e8 	.word	0x080291e8
 80193a4:	0802913f 	.word	0x0802913f

080193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80193a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193ac:	b089      	sub	sp, #36	; 0x24
 80193ae:	4606      	mov	r6, r0
 80193b0:	466c      	mov	r4, sp
 80193b2:	4620      	mov	r0, r4
 80193b4:	e884 0006 	stmia.w	r4, {r1, r2}
 80193b8:	f7fc f9c6 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 80193bc:	bbb0      	cbnz	r0, 801942c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80193be:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80193c2:	b1fd      	cbz	r5, 8019404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80193c4:	3d01      	subs	r5, #1
 80193c6:	af04      	add	r7, sp, #16
 80193c8:	f04f 090a 	mov.w	r9, #10
 80193cc:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80193d0:	ab02      	add	r3, sp, #8
 80193d2:	fa1f f885 	uxth.w	r8, r5
 80193d6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80193da:	6851      	ldr	r1, [r2, #4]
 80193dc:	c303      	stmia	r3!, {r0, r1}
 80193de:	4621      	mov	r1, r4
 80193e0:	a802      	add	r0, sp, #8
 80193e2:	f7ff ff21 	bl	8019228 <_ZNK8touchgfx4Rect8includesERKS0_>
 80193e6:	bb08      	cbnz	r0, 801942c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80193e8:	a902      	add	r1, sp, #8
 80193ea:	4620      	mov	r0, r4
 80193ec:	f7ff ff1c 	bl	8019228 <_ZNK8touchgfx4Rect8includesERKS0_>
 80193f0:	b1f8      	cbz	r0, 8019432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80193f2:	4642      	mov	r2, r8
 80193f4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80193f8:	a806      	add	r0, sp, #24
 80193fa:	f7ff ff95 	bl	8019328 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80193fe:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019402:	d2e3      	bcs.n	80193cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019404:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8019408:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801940c:	2b08      	cmp	r3, #8
 801940e:	d108      	bne.n	8019422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019410:	4629      	mov	r1, r5
 8019412:	a806      	add	r0, sp, #24
 8019414:	2207      	movs	r2, #7
 8019416:	f7ff ff87 	bl	8019328 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801941a:	a906      	add	r1, sp, #24
 801941c:	4620      	mov	r0, r4
 801941e:	f7fd fb8e 	bl	8016b3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019422:	4628      	mov	r0, r5
 8019424:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019428:	f7ff ff9c 	bl	8019364 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801942c:	b009      	add	sp, #36	; 0x24
 801942e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019432:	4621      	mov	r1, r4
 8019434:	a802      	add	r0, sp, #8
 8019436:	f7ff fed5 	bl	80191e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801943a:	b150      	cbz	r0, 8019452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801943c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019440:	a806      	add	r0, sp, #24
 8019442:	4642      	mov	r2, r8
 8019444:	f7ff ff70 	bl	8019328 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019448:	a902      	add	r1, sp, #8
 801944a:	4620      	mov	r0, r4
 801944c:	f7fd fb77 	bl	8016b3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019450:	e7d5      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019456:	e887 0003 	stmia.w	r7, {r0, r1}
 801945a:	a902      	add	r1, sp, #8
 801945c:	4638      	mov	r0, r7
 801945e:	f7fd fb6e 	bl	8016b3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019462:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019466:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801946a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801946e:	fb13 f302 	smulbb	r3, r3, r2
 8019472:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019476:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801947a:	fb11 f102 	smulbb	r1, r1, r2
 801947e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019482:	fb09 f303 	mul.w	r3, r9, r3
 8019486:	fb12 1100 	smlabb	r1, r2, r0, r1
 801948a:	220b      	movs	r2, #11
 801948c:	434a      	muls	r2, r1
 801948e:	4293      	cmp	r3, r2
 8019490:	dab5      	bge.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019492:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019496:	a806      	add	r0, sp, #24
 8019498:	4642      	mov	r2, r8
 801949a:	f7ff ff45 	bl	8019328 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801949e:	e897 0003 	ldmia.w	r7, {r0, r1}
 80194a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80194a6:	e7aa      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080194a8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80194a8:	4b1d      	ldr	r3, [pc, #116]	; (8019520 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80194aa:	b530      	push	{r4, r5, lr}
 80194ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194b0:	b085      	sub	sp, #20
 80194b2:	4b1c      	ldr	r3, [pc, #112]	; (8019524 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80194b4:	460c      	mov	r4, r1
 80194b6:	2100      	movs	r1, #0
 80194b8:	4605      	mov	r5, r0
 80194ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194be:	6820      	ldr	r0, [r4, #0]
 80194c0:	9100      	str	r1, [sp, #0]
 80194c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194c6:	ab02      	add	r3, sp, #8
 80194c8:	6861      	ldr	r1, [r4, #4]
 80194ca:	f8ad 2004 	strh.w	r2, [sp, #4]
 80194ce:	c303      	stmia	r3!, {r0, r1}
 80194d0:	4669      	mov	r1, sp
 80194d2:	a802      	add	r0, sp, #8
 80194d4:	f7fc f8f4 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 80194d8:	ab02      	add	r3, sp, #8
 80194da:	cb03      	ldmia	r3!, {r0, r1}
 80194dc:	4b12      	ldr	r3, [pc, #72]	; (8019528 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80194de:	6020      	str	r0, [r4, #0]
 80194e0:	6818      	ldr	r0, [r3, #0]
 80194e2:	6061      	str	r1, [r4, #4]
 80194e4:	b138      	cbz	r0, 80194f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80194e6:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80194ea:	b133      	cbz	r3, 80194fa <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80194ec:	6821      	ldr	r1, [r4, #0]
 80194ee:	4628      	mov	r0, r5
 80194f0:	6862      	ldr	r2, [r4, #4]
 80194f2:	f7ff ff59 	bl	80193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194f6:	b005      	add	sp, #20
 80194f8:	bd30      	pop	{r4, r5, pc}
 80194fa:	6803      	ldr	r3, [r0, #0]
 80194fc:	4621      	mov	r1, r4
 80194fe:	689b      	ldr	r3, [r3, #8]
 8019500:	4798      	blx	r3
 8019502:	4b0a      	ldr	r3, [pc, #40]	; (801952c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019504:	6818      	ldr	r0, [r3, #0]
 8019506:	b118      	cbz	r0, 8019510 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019508:	6803      	ldr	r3, [r0, #0]
 801950a:	4621      	mov	r1, r4
 801950c:	689b      	ldr	r3, [r3, #8]
 801950e:	4798      	blx	r3
 8019510:	4b07      	ldr	r3, [pc, #28]	; (8019530 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019512:	4621      	mov	r1, r4
 8019514:	6818      	ldr	r0, [r3, #0]
 8019516:	6803      	ldr	r3, [r0, #0]
 8019518:	695b      	ldr	r3, [r3, #20]
 801951a:	4798      	blx	r3
 801951c:	e7eb      	b.n	80194f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801951e:	bf00      	nop
 8019520:	2000bb88 	.word	0x2000bb88
 8019524:	2000bb8a 	.word	0x2000bb8a
 8019528:	2000bc10 	.word	0x2000bc10
 801952c:	2000bc0c 	.word	0x2000bc0c
 8019530:	2000bb94 	.word	0x2000bb94

08019534 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019538:	4604      	mov	r4, r0
 801953a:	b09b      	sub	sp, #108	; 0x6c
 801953c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8019540:	b129      	cbz	r1, 801954e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019542:	2300      	movs	r3, #0
 8019544:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019548:	b01b      	add	sp, #108	; 0x6c
 801954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801954e:	4baf      	ldr	r3, [pc, #700]	; (801980c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	b33b      	cbz	r3, 80195a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019554:	4dae      	ldr	r5, [pc, #696]	; (8019810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8019556:	4628      	mov	r0, r5
 8019558:	f7fc f8f6 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 801955c:	4606      	mov	r6, r0
 801955e:	bb08      	cbnz	r0, 80195a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019560:	4628      	mov	r0, r5
 8019562:	f7ff fce9 	bl	8018f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019566:	6829      	ldr	r1, [r5, #0]
 8019568:	686a      	ldr	r2, [r5, #4]
 801956a:	4620      	mov	r0, r4
 801956c:	f7ff ff1c 	bl	80193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019570:	802e      	strh	r6, [r5, #0]
 8019572:	806e      	strh	r6, [r5, #2]
 8019574:	80ae      	strh	r6, [r5, #4]
 8019576:	80ee      	strh	r6, [r5, #6]
 8019578:	4fa6      	ldr	r7, [pc, #664]	; (8019814 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801957a:	a809      	add	r0, sp, #36	; 0x24
 801957c:	f7ff fe87 	bl	801928e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019580:	883d      	ldrh	r5, [r7, #0]
 8019582:	462e      	mov	r6, r5
 8019584:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019588:	42b3      	cmp	r3, r6
 801958a:	d910      	bls.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801958c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019590:	3601      	adds	r6, #1
 8019592:	a809      	add	r0, sp, #36	; 0x24
 8019594:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019598:	b2b6      	uxth	r6, r6
 801959a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801959e:	f7ff fee1 	bl	8019364 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80195a2:	e7ef      	b.n	8019584 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80195a4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d1e5      	bne.n	8019578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80195ac:	e7cc      	b.n	8019548 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80195ae:	462e      	mov	r6, r5
 80195b0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80195b4:	42b3      	cmp	r3, r6
 80195b6:	d90b      	bls.n	80195d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80195b8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80195bc:	3601      	adds	r6, #1
 80195be:	4620      	mov	r0, r4
 80195c0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80195c4:	b2b6      	uxth	r6, r6
 80195c6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80195ca:	f7ff feed 	bl	80193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80195ce:	e7ef      	b.n	80195b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80195d0:	4e91      	ldr	r6, [pc, #580]	; (8019818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80195d2:	6833      	ldr	r3, [r6, #0]
 80195d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80195d8:	2b01      	cmp	r3, #1
 80195da:	f040 8092 	bne.w	8019702 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80195de:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80195e2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80195e6:	f04f 0900 	mov.w	r9, #0
 80195ea:	33aa      	adds	r3, #170	; 0xaa
 80195ec:	42a8      	cmp	r0, r5
 80195ee:	f103 0308 	add.w	r3, r3, #8
 80195f2:	dd0a      	ble.n	801960a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80195f4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80195f8:	3501      	adds	r5, #1
 80195fa:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80195fe:	440a      	add	r2, r1
 8019600:	b212      	sxth	r2, r2
 8019602:	4591      	cmp	r9, r2
 8019604:	bfb8      	it	lt
 8019606:	4691      	movlt	r9, r2
 8019608:	e7f0      	b.n	80195ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801960a:	4b84      	ldr	r3, [pc, #528]	; (801981c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801960c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8019824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8019610:	881d      	ldrh	r5, [r3, #0]
 8019612:	2300      	movs	r3, #0
 8019614:	2d0f      	cmp	r5, #15
 8019616:	bf8c      	ite	hi
 8019618:	08ed      	lsrhi	r5, r5, #3
 801961a:	2501      	movls	r5, #1
 801961c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019620:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019624:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019628:	6830      	ldr	r0, [r6, #0]
 801962a:	440b      	add	r3, r1
 801962c:	6802      	ldr	r2, [r0, #0]
 801962e:	b21b      	sxth	r3, r3
 8019630:	4599      	cmp	r9, r3
 8019632:	dd49      	ble.n	80196c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8019634:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019638:	4798      	blx	r3
 801963a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801963e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019642:	4413      	add	r3, r2
 8019644:	b21b      	sxth	r3, r3
 8019646:	195a      	adds	r2, r3, r5
 8019648:	4290      	cmp	r0, r2
 801964a:	da07      	bge.n	801965c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801964c:	4581      	cmp	r9, r0
 801964e:	dd05      	ble.n	801965c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019650:	4298      	cmp	r0, r3
 8019652:	da33      	bge.n	80196bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019654:	2b00      	cmp	r3, #0
 8019656:	dd31      	ble.n	80196bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019658:	4648      	mov	r0, r9
 801965a:	e004      	b.n	8019666 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801965c:	4298      	cmp	r0, r3
 801965e:	dbfb      	blt.n	8019658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8019660:	4548      	cmp	r0, r9
 8019662:	bfa8      	it	ge
 8019664:	4648      	movge	r0, r9
 8019666:	f9b8 2000 	ldrsh.w	r2, [r8]
 801966a:	2100      	movs	r1, #0
 801966c:	1ac0      	subs	r0, r0, r3
 801966e:	f8b7 a000 	ldrh.w	sl, [r7]
 8019672:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019676:	f8ad 3016 	strh.w	r3, [sp, #22]
 801967a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801967e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019682:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019686:	4553      	cmp	r3, sl
 8019688:	d9ca      	bls.n	8019620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801968a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801968e:	ab07      	add	r3, sp, #28
 8019690:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019694:	6851      	ldr	r1, [r2, #4]
 8019696:	c303      	stmia	r3!, {r0, r1}
 8019698:	a807      	add	r0, sp, #28
 801969a:	a905      	add	r1, sp, #20
 801969c:	f7fc f810 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 80196a0:	a807      	add	r0, sp, #28
 80196a2:	f7fc f851 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 80196a6:	b920      	cbnz	r0, 80196b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	a907      	add	r1, sp, #28
 80196ac:	4620      	mov	r0, r4
 80196ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196b0:	4798      	blx	r3
 80196b2:	f10a 0a01 	add.w	sl, sl, #1
 80196b6:	fa1f fa8a 	uxth.w	sl, sl
 80196ba:	e7e2      	b.n	8019682 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80196bc:	6830      	ldr	r0, [r6, #0]
 80196be:	2101      	movs	r1, #1
 80196c0:	6803      	ldr	r3, [r0, #0]
 80196c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196c4:	4798      	blx	r3
 80196c6:	e7ab      	b.n	8019620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80196c8:	69d3      	ldr	r3, [r2, #28]
 80196ca:	4798      	blx	r3
 80196cc:	4b54      	ldr	r3, [pc, #336]	; (8019820 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f43f af39 	beq.w	8019548 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80196d6:	2300      	movs	r3, #0
 80196d8:	883d      	ldrh	r5, [r7, #0]
 80196da:	34ea      	adds	r4, #234	; 0xea
 80196dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80196e0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80196e4:	42ab      	cmp	r3, r5
 80196e6:	f67f af2f 	bls.w	8019548 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80196ea:	ab1a      	add	r3, sp, #104	; 0x68
 80196ec:	4620      	mov	r0, r4
 80196ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80196f2:	3501      	adds	r5, #1
 80196f4:	3b44      	subs	r3, #68	; 0x44
 80196f6:	b2ad      	uxth	r5, r5
 80196f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80196fc:	f7ff fe32 	bl	8019364 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019700:	e7ee      	b.n	80196e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8019702:	2b02      	cmp	r3, #2
 8019704:	d16a      	bne.n	80197dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019706:	f8df a120 	ldr.w	sl, [pc, #288]	; 8019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801970a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801970e:	42ab      	cmp	r3, r5
 8019710:	d9dc      	bls.n	80196cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8019712:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019716:	ab03      	add	r3, sp, #12
 8019718:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801971c:	6851      	ldr	r1, [r2, #4]
 801971e:	c303      	stmia	r3!, {r0, r1}
 8019720:	f89a 3000 	ldrb.w	r3, [sl]
 8019724:	2b01      	cmp	r3, #1
 8019726:	d102      	bne.n	801972e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8019728:	a803      	add	r0, sp, #12
 801972a:	f7ff fc5f 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801972e:	a803      	add	r0, sp, #12
 8019730:	f7fc f80a 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019734:	2800      	cmp	r0, #0
 8019736:	d14a      	bne.n	80197ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8019738:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801973c:	f10d 0914 	add.w	r9, sp, #20
 8019740:	f10d 081c 	add.w	r8, sp, #28
 8019744:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019748:	f8ad 3014 	strh.w	r3, [sp, #20]
 801974c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019754:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019758:	f8ad 3018 	strh.w	r3, [sp, #24]
 801975c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019760:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019764:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019768:	44dc      	add	ip, fp
 801976a:	6830      	ldr	r0, [r6, #0]
 801976c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019770:	ebac 0c02 	sub.w	ip, ip, r2
 8019774:	f8d0 e000 	ldr.w	lr, [r0]
 8019778:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801977c:	fa1f fc8c 	uxth.w	ip, ip
 8019780:	f8cd c000 	str.w	ip, [sp]
 8019784:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019788:	47d8      	blx	fp
 801978a:	f89a 3000 	ldrb.w	r3, [sl]
 801978e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019792:	2b01      	cmp	r3, #1
 8019794:	d11e      	bne.n	80197d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8019796:	e899 0003 	ldmia.w	r9, {r0, r1}
 801979a:	e888 0003 	stmia.w	r8, {r0, r1}
 801979e:	4640      	mov	r0, r8
 80197a0:	f7ff fbca 	bl	8018f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80197a4:	6823      	ldr	r3, [r4, #0]
 80197a6:	4641      	mov	r1, r8
 80197a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197aa:	4620      	mov	r0, r4
 80197ac:	4798      	blx	r3
 80197ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197b2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80197b6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80197ba:	4413      	add	r3, r2
 80197bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80197c0:	440a      	add	r2, r1
 80197c2:	b21b      	sxth	r3, r3
 80197c4:	b212      	sxth	r2, r2
 80197c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80197ca:	4293      	cmp	r3, r2
 80197cc:	dbc6      	blt.n	801975c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80197ce:	3501      	adds	r5, #1
 80197d0:	b2ad      	uxth	r5, r5
 80197d2:	e79a      	b.n	801970a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80197d4:	6823      	ldr	r3, [r4, #0]
 80197d6:	4649      	mov	r1, r9
 80197d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197da:	e7e6      	b.n	80197aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80197dc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80197e0:	42ab      	cmp	r3, r5
 80197e2:	f67f af73 	bls.w	80196cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80197e6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80197ea:	ab07      	add	r3, sp, #28
 80197ec:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80197f0:	6851      	ldr	r1, [r2, #4]
 80197f2:	c303      	stmia	r3!, {r0, r1}
 80197f4:	a807      	add	r0, sp, #28
 80197f6:	f7fb ffa7 	bl	8015748 <_ZNK8touchgfx4Rect7isEmptyEv>
 80197fa:	b920      	cbnz	r0, 8019806 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80197fc:	6823      	ldr	r3, [r4, #0]
 80197fe:	a907      	add	r1, sp, #28
 8019800:	4620      	mov	r0, r4
 8019802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019804:	4798      	blx	r3
 8019806:	3501      	adds	r5, #1
 8019808:	b2ad      	uxth	r5, r5
 801980a:	e7e7      	b.n	80197dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801980c:	2000bc0c 	.word	0x2000bc0c
 8019810:	2000bc18 	.word	0x2000bc18
 8019814:	20000054 	.word	0x20000054
 8019818:	2000bb94 	.word	0x2000bb94
 801981c:	2000bb8a 	.word	0x2000bb8a
 8019820:	2000bb92 	.word	0x2000bb92
 8019824:	2000bb88 	.word	0x2000bb88
 8019828:	2000bb8c 	.word	0x2000bb8c

0801982c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801982c:	4b03      	ldr	r3, [pc, #12]	; (801983c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801982e:	2200      	movs	r2, #0
 8019830:	801a      	strh	r2, [r3, #0]
 8019832:	805a      	strh	r2, [r3, #2]
 8019834:	809a      	strh	r2, [r3, #4]
 8019836:	80da      	strh	r2, [r3, #6]
 8019838:	4770      	bx	lr
 801983a:	bf00      	nop
 801983c:	2000bc18 	.word	0x2000bc18

08019840 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8019840:	2000      	movs	r0, #0
 8019842:	4770      	bx	lr

08019844 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8019844:	2000      	movs	r0, #0
 8019846:	4770      	bx	lr

08019848 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019848:	b508      	push	{r3, lr}
 801984a:	6803      	ldr	r3, [r0, #0]
 801984c:	68db      	ldr	r3, [r3, #12]
 801984e:	4798      	blx	r3
 8019850:	b128      	cbz	r0, 801985e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019852:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019856:	7a80      	ldrb	r0, [r0, #10]
 8019858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801985c:	4318      	orrs	r0, r3
 801985e:	bd08      	pop	{r3, pc}

08019860 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8019860:	b40e      	push	{r1, r2, r3}
 8019862:	b533      	push	{r0, r1, r4, r5, lr}
 8019864:	ab05      	add	r3, sp, #20
 8019866:	f853 2b04 	ldr.w	r2, [r3], #4
 801986a:	9301      	str	r3, [sp, #4]
 801986c:	4b0a      	ldr	r3, [pc, #40]	; (8019898 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801986e:	685c      	ldr	r4, [r3, #4]
 8019870:	1061      	asrs	r1, r4, #1
 8019872:	07e4      	lsls	r4, r4, #31
 8019874:	eb00 0501 	add.w	r5, r0, r1
 8019878:	bf46      	itte	mi
 801987a:	681b      	ldrmi	r3, [r3, #0]
 801987c:	5841      	ldrmi	r1, [r0, r1]
 801987e:	681c      	ldrpl	r4, [r3, #0]
 8019880:	4628      	mov	r0, r5
 8019882:	bf48      	it	mi
 8019884:	58cc      	ldrmi	r4, [r1, r3]
 8019886:	2100      	movs	r1, #0
 8019888:	9b01      	ldr	r3, [sp, #4]
 801988a:	47a0      	blx	r4
 801988c:	b002      	add	sp, #8
 801988e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019892:	b003      	add	sp, #12
 8019894:	4770      	bx	lr
 8019896:	bf00      	nop
 8019898:	20000028 	.word	0x20000028

0801989c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801989c:	b40c      	push	{r2, r3}
 801989e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198a0:	ab06      	add	r3, sp, #24
 80198a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80198a6:	9301      	str	r3, [sp, #4]
 80198a8:	4b09      	ldr	r3, [pc, #36]	; (80198d0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 80198aa:	685d      	ldr	r5, [r3, #4]
 80198ac:	106c      	asrs	r4, r5, #1
 80198ae:	07ed      	lsls	r5, r5, #31
 80198b0:	eb00 0604 	add.w	r6, r0, r4
 80198b4:	bf45      	ittet	mi
 80198b6:	681b      	ldrmi	r3, [r3, #0]
 80198b8:	5900      	ldrmi	r0, [r0, r4]
 80198ba:	681c      	ldrpl	r4, [r3, #0]
 80198bc:	58c4      	ldrmi	r4, [r0, r3]
 80198be:	4630      	mov	r0, r6
 80198c0:	9b01      	ldr	r3, [sp, #4]
 80198c2:	47a0      	blx	r4
 80198c4:	b002      	add	sp, #8
 80198c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198ca:	b002      	add	sp, #8
 80198cc:	4770      	bx	lr
 80198ce:	bf00      	nop
 80198d0:	20000028 	.word	0x20000028

080198d4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80198d4:	b40e      	push	{r1, r2, r3}
 80198d6:	b530      	push	{r4, r5, lr}
 80198d8:	b098      	sub	sp, #96	; 0x60
 80198da:	4604      	mov	r4, r0
 80198dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80198de:	a802      	add	r0, sp, #8
 80198e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80198e4:	9301      	str	r3, [sp, #4]
 80198e6:	f001 fb03 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 80198ea:	6823      	ldr	r3, [r4, #0]
 80198ec:	4620      	mov	r0, r4
 80198ee:	2401      	movs	r4, #1
 80198f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198f2:	4798      	blx	r3
 80198f4:	9a01      	ldr	r2, [sp, #4]
 80198f6:	4603      	mov	r3, r0
 80198f8:	4629      	mov	r1, r5
 80198fa:	a802      	add	r0, sp, #8
 80198fc:	f001 fb15 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019900:	a802      	add	r0, sp, #8
 8019902:	f001 fb4b 	bl	801af9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019906:	b2a3      	uxth	r3, r4
 8019908:	b138      	cbz	r0, 801991a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801990a:	280a      	cmp	r0, #10
 801990c:	a802      	add	r0, sp, #8
 801990e:	bf04      	itt	eq
 8019910:	3301      	addeq	r3, #1
 8019912:	b21c      	sxtheq	r4, r3
 8019914:	f001 fb42 	bl	801af9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019918:	e7f5      	b.n	8019906 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801991a:	4618      	mov	r0, r3
 801991c:	b018      	add	sp, #96	; 0x60
 801991e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019922:	b003      	add	sp, #12
 8019924:	4770      	bx	lr
	...

08019928 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019928:	b40e      	push	{r1, r2, r3}
 801992a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801992c:	b098      	sub	sp, #96	; 0x60
 801992e:	4605      	mov	r5, r0
 8019930:	4f25      	ldr	r7, [pc, #148]	; (80199c8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8019932:	ab1d      	add	r3, sp, #116	; 0x74
 8019934:	a802      	add	r0, sp, #8
 8019936:	ae18      	add	r6, sp, #96	; 0x60
 8019938:	f853 4b04 	ldr.w	r4, [r3], #4
 801993c:	9300      	str	r3, [sp, #0]
 801993e:	f001 fad7 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8019942:	682b      	ldr	r3, [r5, #0]
 8019944:	4628      	mov	r0, r5
 8019946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019948:	4798      	blx	r3
 801994a:	4621      	mov	r1, r4
 801994c:	2400      	movs	r4, #0
 801994e:	4603      	mov	r3, r0
 8019950:	9a00      	ldr	r2, [sp, #0]
 8019952:	a802      	add	r0, sp, #8
 8019954:	f001 fae9 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019958:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801995c:	462a      	mov	r2, r5
 801995e:	4633      	mov	r3, r6
 8019960:	4621      	mov	r1, r4
 8019962:	a802      	add	r0, sp, #8
 8019964:	f001 fc46 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019968:	b340      	cbz	r0, 80199bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801996a:	280a      	cmp	r0, #10
 801996c:	d01f      	beq.n	80199ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801996e:	9901      	ldr	r1, [sp, #4]
 8019970:	b1e9      	cbz	r1, 80199ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019972:	7b4b      	ldrb	r3, [r1, #13]
 8019974:	f891 c008 	ldrb.w	ip, [r1, #8]
 8019978:	f013 0f40 	tst.w	r3, #64	; 0x40
 801997c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019980:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019984:	79c9      	ldrb	r1, [r1, #7]
 8019986:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801998a:	bf18      	it	ne
 801998c:	4638      	movne	r0, r7
 801998e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019992:	bf08      	it	eq
 8019994:	2000      	moveq	r0, #0
 8019996:	88aa      	ldrh	r2, [r5, #4]
 8019998:	ea41 010e 	orr.w	r1, r1, lr
 801999c:	ea43 030c 	orr.w	r3, r3, ip
 80199a0:	440a      	add	r2, r1
 80199a2:	4303      	orrs	r3, r0
 80199a4:	1ad3      	subs	r3, r2, r3
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	42a3      	cmp	r3, r4
 80199aa:	bfc8      	it	gt
 80199ac:	b21c      	sxthgt	r4, r3
 80199ae:	4633      	mov	r3, r6
 80199b0:	462a      	mov	r2, r5
 80199b2:	2100      	movs	r1, #0
 80199b4:	a802      	add	r0, sp, #8
 80199b6:	f001 fc1d 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199ba:	e7d5      	b.n	8019968 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 80199bc:	b2a0      	uxth	r0, r4
 80199be:	b018      	add	sp, #96	; 0x60
 80199c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80199c4:	b003      	add	sp, #12
 80199c6:	4770      	bx	lr
 80199c8:	fffffe00 	.word	0xfffffe00

080199cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80199cc:	b40e      	push	{r1, r2, r3}
 80199ce:	b570      	push	{r4, r5, r6, lr}
 80199d0:	b099      	sub	sp, #100	; 0x64
 80199d2:	4604      	mov	r4, r0
 80199d4:	26ff      	movs	r6, #255	; 0xff
 80199d6:	ab1d      	add	r3, sp, #116	; 0x74
 80199d8:	a802      	add	r0, sp, #8
 80199da:	f853 5b04 	ldr.w	r5, [r3], #4
 80199de:	9300      	str	r3, [sp, #0]
 80199e0:	f001 fa86 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 80199e4:	6823      	ldr	r3, [r4, #0]
 80199e6:	4620      	mov	r0, r4
 80199e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199ea:	4798      	blx	r3
 80199ec:	4629      	mov	r1, r5
 80199ee:	4603      	mov	r3, r0
 80199f0:	9a00      	ldr	r2, [sp, #0]
 80199f2:	a802      	add	r0, sp, #8
 80199f4:	ad18      	add	r5, sp, #96	; 0x60
 80199f6:	f001 fa98 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80199fa:	2100      	movs	r1, #0
 80199fc:	4622      	mov	r2, r4
 80199fe:	a802      	add	r0, sp, #8
 8019a00:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019a04:	462b      	mov	r3, r5
 8019a06:	f001 fbf5 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a0a:	b190      	cbz	r0, 8019a32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8019a0c:	280a      	cmp	r0, #10
 8019a0e:	d009      	beq.n	8019a24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019a10:	9a01      	ldr	r2, [sp, #4]
 8019a12:	b13a      	cbz	r2, 8019a24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019a14:	7923      	ldrb	r3, [r4, #4]
 8019a16:	7a12      	ldrb	r2, [r2, #8]
 8019a18:	1a9b      	subs	r3, r3, r2
 8019a1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8019a1e:	429e      	cmp	r6, r3
 8019a20:	bf28      	it	cs
 8019a22:	461e      	movcs	r6, r3
 8019a24:	462b      	mov	r3, r5
 8019a26:	4622      	mov	r2, r4
 8019a28:	2100      	movs	r1, #0
 8019a2a:	a802      	add	r0, sp, #8
 8019a2c:	f001 fbe2 	bl	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a30:	e7eb      	b.n	8019a0a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019a32:	4630      	mov	r0, r6
 8019a34:	b019      	add	sp, #100	; 0x64
 8019a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a3a:	b003      	add	sp, #12
 8019a3c:	4770      	bx	lr
	...

08019a40 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 8019a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a44:	b0b9      	sub	sp, #228	; 0xe4
 8019a46:	4604      	mov	r4, r0
 8019a48:	4615      	mov	r5, r2
 8019a4a:	4698      	mov	r8, r3
 8019a4c:	ae0c      	add	r6, sp, #48	; 0x30
 8019a4e:	4689      	mov	r9, r1
 8019a50:	af22      	add	r7, sp, #136	; 0x88
 8019a52:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8019b10 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd0>
 8019a56:	4630      	mov	r0, r6
 8019a58:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8019b14 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd4>
 8019a5c:	f001 fa48 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8019a60:	6823      	ldr	r3, [r4, #0]
 8019a62:	4620      	mov	r0, r4
 8019a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a66:	4798      	blx	r3
 8019a68:	4642      	mov	r2, r8
 8019a6a:	4629      	mov	r1, r5
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f001 fa5b 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a74:	4638      	mov	r0, r7
 8019a76:	f001 fa3b 	bl	801aef0 <_ZN8touchgfx12TextProviderC1Ev>
 8019a7a:	6823      	ldr	r3, [r4, #0]
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a80:	4798      	blx	r3
 8019a82:	4629      	mov	r1, r5
 8019a84:	2500      	movs	r5, #0
 8019a86:	4603      	mov	r3, r0
 8019a88:	4642      	mov	r2, r8
 8019a8a:	4638      	mov	r0, r7
 8019a8c:	46a8      	mov	r8, r5
 8019a8e:	f001 fa4c 	bl	801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a92:	4649      	mov	r1, r9
 8019a94:	4630      	mov	r0, r6
 8019a96:	f001 fb6d 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019a9a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8019a9e:	f8da 3000 	ldr.w	r3, [sl]
 8019aa2:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8019aa6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019aaa:	b122      	cbz	r2, 8019ab6 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x76>
 8019aac:	f8d3 c04c 	ldr.w	ip, [r3, #76]	; 0x4c
 8019ab0:	f1bc 0f00 	cmp.w	ip, #0
 8019ab4:	d101      	bne.n	8019aba <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x7a>
 8019ab6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8019aba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019abe:	aa0a      	add	r2, sp, #40	; 0x28
 8019ac0:	9305      	str	r3, [sp, #20]
 8019ac2:	ab03      	add	r3, sp, #12
 8019ac4:	e9cd b80a 	strd	fp, r8, [sp, #40]	; 0x28
 8019ac8:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8019acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ad0:	4622      	mov	r2, r4
 8019ad2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ad6:	ab09      	add	r3, sp, #36	; 0x24
 8019ad8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8019adc:	4660      	mov	r0, ip
 8019ade:	9300      	str	r3, [sp, #0]
 8019ae0:	464b      	mov	r3, r9
 8019ae2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8019ae6:	f7fe f977 	bl	8017dd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8019aea:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019aee:	42ab      	cmp	r3, r5
 8019af0:	bfc8      	it	gt
 8019af2:	b29d      	uxthgt	r5, r3
 8019af4:	b118      	cbz	r0, 8019afe <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xbe>
 8019af6:	4649      	mov	r1, r9
 8019af8:	4638      	mov	r0, r7
 8019afa:	f001 fb3b 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019afe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d1cb      	bne.n	8019a9e <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x5e>
 8019b06:	4628      	mov	r0, r5
 8019b08:	b039      	add	sp, #228	; 0xe4
 8019b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b0e:	bf00      	nop
 8019b10:	2000bb94 	.word	0x2000bb94
 8019b14:	08017d21 	.word	0x08017d21

08019b18 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019b18:	b513      	push	{r0, r1, r4, lr}
 8019b1a:	1d01      	adds	r1, r0, #4
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	466a      	mov	r2, sp
 8019b20:	c903      	ldmia	r1, {r0, r1}
 8019b22:	e882 0003 	stmia.w	r2, {r0, r1}
 8019b26:	2100      	movs	r1, #0
 8019b28:	4618      	mov	r0, r3
 8019b2a:	9100      	str	r1, [sp, #0]
 8019b2c:	6819      	ldr	r1, [r3, #0]
 8019b2e:	690c      	ldr	r4, [r1, #16]
 8019b30:	4611      	mov	r1, r2
 8019b32:	47a0      	blx	r4
 8019b34:	b002      	add	sp, #8
 8019b36:	bd10      	pop	{r4, pc}

08019b38 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019b38:	b538      	push	{r3, r4, r5, lr}
 8019b3a:	680b      	ldr	r3, [r1, #0]
 8019b3c:	460c      	mov	r4, r1
 8019b3e:	4605      	mov	r5, r0
 8019b40:	68db      	ldr	r3, [r3, #12]
 8019b42:	4798      	blx	r3
 8019b44:	6823      	ldr	r3, [r4, #0]
 8019b46:	4620      	mov	r0, r4
 8019b48:	4629      	mov	r1, r5
 8019b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b4c:	4798      	blx	r3
 8019b4e:	4628      	mov	r0, r5
 8019b50:	bd38      	pop	{r3, r4, r5, pc}

08019b52 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019b52:	b410      	push	{r4}
 8019b54:	880a      	ldrh	r2, [r1, #0]
 8019b56:	8884      	ldrh	r4, [r0, #4]
 8019b58:	4422      	add	r2, r4
 8019b5a:	800a      	strh	r2, [r1, #0]
 8019b5c:	884a      	ldrh	r2, [r1, #2]
 8019b5e:	88c4      	ldrh	r4, [r0, #6]
 8019b60:	4422      	add	r2, r4
 8019b62:	804a      	strh	r2, [r1, #2]
 8019b64:	6940      	ldr	r0, [r0, #20]
 8019b66:	b120      	cbz	r0, 8019b72 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019b68:	6803      	ldr	r3, [r0, #0]
 8019b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b70:	4718      	bx	r3
 8019b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b76:	4770      	bx	lr

08019b78 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b7a:	460b      	mov	r3, r1
 8019b7c:	b085      	sub	sp, #20
 8019b7e:	4604      	mov	r4, r0
 8019b80:	b901      	cbnz	r1, 8019b84 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019b82:	b1fa      	cbz	r2, 8019bc4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019b84:	1d27      	adds	r7, r4, #4
 8019b86:	466e      	mov	r6, sp
 8019b88:	ad02      	add	r5, sp, #8
 8019b8a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019b8e:	e886 0003 	stmia.w	r6, {r0, r1}
 8019b92:	88e1      	ldrh	r1, [r4, #6]
 8019b94:	4620      	mov	r0, r4
 8019b96:	440a      	add	r2, r1
 8019b98:	88a1      	ldrh	r1, [r4, #4]
 8019b9a:	4419      	add	r1, r3
 8019b9c:	6823      	ldr	r3, [r4, #0]
 8019b9e:	b212      	sxth	r2, r2
 8019ba0:	b209      	sxth	r1, r1
 8019ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ba4:	4798      	blx	r3
 8019ba6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8019bae:	6960      	ldr	r0, [r4, #20]
 8019bb0:	b150      	cbz	r0, 8019bc8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019bb2:	6803      	ldr	r3, [r0, #0]
 8019bb4:	4631      	mov	r1, r6
 8019bb6:	691b      	ldr	r3, [r3, #16]
 8019bb8:	4798      	blx	r3
 8019bba:	6960      	ldr	r0, [r4, #20]
 8019bbc:	6803      	ldr	r3, [r0, #0]
 8019bbe:	691b      	ldr	r3, [r3, #16]
 8019bc0:	4629      	mov	r1, r5
 8019bc2:	4798      	blx	r3
 8019bc4:	b005      	add	sp, #20
 8019bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bc8:	f7ff fb50 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 8019bcc:	6803      	ldr	r3, [r0, #0]
 8019bce:	4631      	mov	r1, r6
 8019bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bd2:	4798      	blx	r3
 8019bd4:	f7ff fb4a 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 8019bd8:	6803      	ldr	r3, [r0, #0]
 8019bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bdc:	e7f0      	b.n	8019bc0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019bde <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019be0:	8882      	ldrh	r2, [r0, #4]
 8019be2:	4605      	mov	r5, r0
 8019be4:	880b      	ldrh	r3, [r1, #0]
 8019be6:	460c      	mov	r4, r1
 8019be8:	4413      	add	r3, r2
 8019bea:	800b      	strh	r3, [r1, #0]
 8019bec:	884b      	ldrh	r3, [r1, #2]
 8019bee:	88c2      	ldrh	r2, [r0, #6]
 8019bf0:	4413      	add	r3, r2
 8019bf2:	4602      	mov	r2, r0
 8019bf4:	804b      	strh	r3, [r1, #2]
 8019bf6:	466b      	mov	r3, sp
 8019bf8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019bfc:	6851      	ldr	r1, [r2, #4]
 8019bfe:	c303      	stmia	r3!, {r0, r1}
 8019c00:	4621      	mov	r1, r4
 8019c02:	4668      	mov	r0, sp
 8019c04:	f7fb fd5c 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 8019c08:	466b      	mov	r3, sp
 8019c0a:	cb03      	ldmia	r3!, {r0, r1}
 8019c0c:	6020      	str	r0, [r4, #0]
 8019c0e:	6061      	str	r1, [r4, #4]
 8019c10:	6968      	ldr	r0, [r5, #20]
 8019c12:	b128      	cbz	r0, 8019c20 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019c14:	6803      	ldr	r3, [r0, #0]
 8019c16:	691b      	ldr	r3, [r3, #16]
 8019c18:	4621      	mov	r1, r4
 8019c1a:	4798      	blx	r3
 8019c1c:	b003      	add	sp, #12
 8019c1e:	bd30      	pop	{r4, r5, pc}
 8019c20:	f7ff fb24 	bl	801926c <_ZN8touchgfx11Application11getInstanceEv>
 8019c24:	6803      	ldr	r3, [r0, #0]
 8019c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c28:	e7f6      	b.n	8019c18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019c2a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019c2a:	b570      	push	{r4, r5, r6, lr}
 8019c2c:	8882      	ldrh	r2, [r0, #4]
 8019c2e:	460c      	mov	r4, r1
 8019c30:	880b      	ldrh	r3, [r1, #0]
 8019c32:	4605      	mov	r5, r0
 8019c34:	4413      	add	r3, r2
 8019c36:	800b      	strh	r3, [r1, #0]
 8019c38:	884b      	ldrh	r3, [r1, #2]
 8019c3a:	88c2      	ldrh	r2, [r0, #6]
 8019c3c:	4413      	add	r3, r2
 8019c3e:	804b      	strh	r3, [r1, #2]
 8019c40:	1d01      	adds	r1, r0, #4
 8019c42:	4620      	mov	r0, r4
 8019c44:	f7fb fd3c 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 8019c48:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c4c:	b153      	cbz	r3, 8019c64 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c4e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c52:	b13b      	cbz	r3, 8019c64 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c54:	6968      	ldr	r0, [r5, #20]
 8019c56:	b128      	cbz	r0, 8019c64 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c58:	6803      	ldr	r3, [r0, #0]
 8019c5a:	4621      	mov	r1, r4
 8019c5c:	6a1b      	ldr	r3, [r3, #32]
 8019c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c62:	4718      	bx	r3
 8019c64:	bd70      	pop	{r4, r5, r6, pc}

08019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019c66:	b510      	push	{r4, lr}
 8019c68:	2300      	movs	r3, #0
 8019c6a:	4604      	mov	r4, r0
 8019c6c:	4608      	mov	r0, r1
 8019c6e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019c72:	8023      	strh	r3, [r4, #0]
 8019c74:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c78:	8063      	strh	r3, [r4, #2]
 8019c7a:	6803      	ldr	r3, [r0, #0]
 8019c7c:	80a1      	strh	r1, [r4, #4]
 8019c7e:	4621      	mov	r1, r4
 8019c80:	80e2      	strh	r2, [r4, #6]
 8019c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c84:	4798      	blx	r3
 8019c86:	4620      	mov	r0, r4
 8019c88:	bd10      	pop	{r4, pc}
	...

08019c8c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019c8c:	b530      	push	{r4, r5, lr}
 8019c8e:	8083      	strh	r3, [r0, #4]
 8019c90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019c94:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019c98:	7183      	strb	r3, [r0, #6]
 8019c9a:	79c3      	ldrb	r3, [r0, #7]
 8019c9c:	6101      	str	r1, [r0, #16]
 8019c9e:	f365 0306 	bfi	r3, r5, #0, #7
 8019ca2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019ca6:	8282      	strh	r2, [r0, #20]
 8019ca8:	f365 13c7 	bfi	r3, r5, #7, #1
 8019cac:	71c3      	strb	r3, [r0, #7]
 8019cae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019cb2:	7203      	strb	r3, [r0, #8]
 8019cb4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019cb8:	7243      	strb	r3, [r0, #9]
 8019cba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019cbe:	8143      	strh	r3, [r0, #10]
 8019cc0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019cc4:	8183      	strh	r3, [r0, #12]
 8019cc6:	4b01      	ldr	r3, [pc, #4]	; (8019ccc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019cc8:	6003      	str	r3, [r0, #0]
 8019cca:	bd30      	pop	{r4, r5, pc}
 8019ccc:	08029310 	.word	0x08029310

08019cd0 <_ZNK8touchgfx9ConstFont4findEt>:
 8019cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cd2:	8a84      	ldrh	r4, [r0, #20]
 8019cd4:	2500      	movs	r5, #0
 8019cd6:	260e      	movs	r6, #14
 8019cd8:	3c01      	subs	r4, #1
 8019cda:	42a5      	cmp	r5, r4
 8019cdc:	dc0c      	bgt.n	8019cf8 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019cde:	192a      	adds	r2, r5, r4
 8019ce0:	6903      	ldr	r3, [r0, #16]
 8019ce2:	1052      	asrs	r2, r2, #1
 8019ce4:	fb06 3302 	mla	r3, r6, r2, r3
 8019ce8:	889f      	ldrh	r7, [r3, #4]
 8019cea:	428f      	cmp	r7, r1
 8019cec:	d901      	bls.n	8019cf2 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019cee:	1e54      	subs	r4, r2, #1
 8019cf0:	e7f3      	b.n	8019cda <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019cf2:	d202      	bcs.n	8019cfa <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019cf4:	1c55      	adds	r5, r2, #1
 8019cf6:	e7f0      	b.n	8019cda <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cfe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d00:	4605      	mov	r5, r0
 8019d02:	4617      	mov	r7, r2
 8019d04:	461e      	mov	r6, r3
 8019d06:	f7ff ffe3 	bl	8019cd0 <_ZNK8touchgfx9ConstFont4findEt>
 8019d0a:	b9e0      	cbnz	r0, 8019d46 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019d0c:	b911      	cbnz	r1, 8019d14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019d0e:	2400      	movs	r4, #0
 8019d10:	4620      	mov	r0, r4
 8019d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d14:	290a      	cmp	r1, #10
 8019d16:	d0fa      	beq.n	8019d0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019d18:	682b      	ldr	r3, [r5, #0]
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	691b      	ldr	r3, [r3, #16]
 8019d1e:	4798      	blx	r3
 8019d20:	4601      	mov	r1, r0
 8019d22:	4628      	mov	r0, r5
 8019d24:	f7ff ffd4 	bl	8019cd0 <_ZNK8touchgfx9ConstFont4findEt>
 8019d28:	4604      	mov	r4, r0
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	d0ef      	beq.n	8019d0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019d2e:	682b      	ldr	r3, [r5, #0]
 8019d30:	4621      	mov	r1, r4
 8019d32:	4628      	mov	r0, r5
 8019d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d36:	4798      	blx	r3
 8019d38:	6038      	str	r0, [r7, #0]
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	4628      	mov	r0, r5
 8019d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d40:	4798      	blx	r3
 8019d42:	7030      	strb	r0, [r6, #0]
 8019d44:	e7e4      	b.n	8019d10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019d46:	4604      	mov	r4, r0
 8019d48:	e7f1      	b.n	8019d2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019d4a <_ZN8touchgfx6memsetEPvhm>:
 8019d4a:	4402      	add	r2, r0
 8019d4c:	4290      	cmp	r0, r2
 8019d4e:	d002      	beq.n	8019d56 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019d50:	f800 1b01 	strb.w	r1, [r0], #1
 8019d54:	e7fa      	b.n	8019d4c <_ZN8touchgfx6memsetEPvhm+0x2>
 8019d56:	4770      	bx	lr

08019d58 <_ZN8touchgfx3clzEl>:
 8019d58:	b1e8      	cbz	r0, 8019d96 <_ZN8touchgfx3clzEl+0x3e>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	bfb8      	it	lt
 8019d5e:	4240      	neglt	r0, r0
 8019d60:	0c03      	lsrs	r3, r0, #16
 8019d62:	041b      	lsls	r3, r3, #16
 8019d64:	b9ab      	cbnz	r3, 8019d92 <_ZN8touchgfx3clzEl+0x3a>
 8019d66:	0400      	lsls	r0, r0, #16
 8019d68:	2310      	movs	r3, #16
 8019d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019d6e:	bf04      	itt	eq
 8019d70:	0200      	lsleq	r0, r0, #8
 8019d72:	3308      	addeq	r3, #8
 8019d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019d78:	bf04      	itt	eq
 8019d7a:	0100      	lsleq	r0, r0, #4
 8019d7c:	3304      	addeq	r3, #4
 8019d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019d82:	bf04      	itt	eq
 8019d84:	0080      	lsleq	r0, r0, #2
 8019d86:	3302      	addeq	r3, #2
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	bfa8      	it	ge
 8019d8c:	3301      	addge	r3, #1
 8019d8e:	1e58      	subs	r0, r3, #1
 8019d90:	4770      	bx	lr
 8019d92:	2300      	movs	r3, #0
 8019d94:	e7e9      	b.n	8019d6a <_ZN8touchgfx3clzEl+0x12>
 8019d96:	201f      	movs	r0, #31
 8019d98:	4770      	bx	lr

08019d9a <_ZN8touchgfx6muldivElllRl>:
 8019d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d9e:	4604      	mov	r4, r0
 8019da0:	4698      	mov	r8, r3
 8019da2:	2601      	movs	r6, #1
 8019da4:	f7ff ffd8 	bl	8019d58 <_ZN8touchgfx3clzEl>
 8019da8:	2c00      	cmp	r4, #0
 8019daa:	fa04 f500 	lsl.w	r5, r4, r0
 8019dae:	fa06 f600 	lsl.w	r6, r6, r0
 8019db2:	bfba      	itte	lt
 8019db4:	f04f 37ff 	movlt.w	r7, #4294967295
 8019db8:	4264      	neglt	r4, r4
 8019dba:	2701      	movge	r7, #1
 8019dbc:	2900      	cmp	r1, #0
 8019dbe:	f106 36ff 	add.w	r6, r6, #4294967295
 8019dc2:	bfbc      	itt	lt
 8019dc4:	4249      	neglt	r1, r1
 8019dc6:	427f      	neglt	r7, r7
 8019dc8:	2a00      	cmp	r2, #0
 8019dca:	fa41 fc00 	asr.w	ip, r1, r0
 8019dce:	ea01 0106 	and.w	r1, r1, r6
 8019dd2:	bfb8      	it	lt
 8019dd4:	427f      	neglt	r7, r7
 8019dd6:	fb04 f401 	mul.w	r4, r4, r1
 8019dda:	fb95 f3f2 	sdiv	r3, r5, r2
 8019dde:	fb02 5513 	mls	r5, r2, r3, r5
 8019de2:	bfb8      	it	lt
 8019de4:	4252      	neglt	r2, r2
 8019de6:	fb94 f0f2 	sdiv	r0, r4, r2
 8019dea:	fb02 4410 	mls	r4, r2, r0, r4
 8019dee:	fb0c 4405 	mla	r4, ip, r5, r4
 8019df2:	fb94 f1f2 	sdiv	r1, r4, r2
 8019df6:	4408      	add	r0, r1
 8019df8:	fb02 4211 	mls	r2, r2, r1, r4
 8019dfc:	fb0c 0003 	mla	r0, ip, r3, r0
 8019e00:	f8c8 2000 	str.w	r2, [r8]
 8019e04:	4378      	muls	r0, r7
 8019e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e0a <_ZN8touchgfx10ClickEventD1Ev>:
 8019e0a:	4770      	bx	lr

08019e0c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019e0c:	2000      	movs	r0, #0
 8019e0e:	4770      	bx	lr

08019e10 <_ZN8touchgfx9DragEventD1Ev>:
 8019e10:	4770      	bx	lr

08019e12 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019e12:	2001      	movs	r0, #1
 8019e14:	4770      	bx	lr

08019e16 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019e16:	2002      	movs	r0, #2
 8019e18:	4770      	bx	lr

08019e1a <_ZN8touchgfx12GestureEventD1Ev>:
 8019e1a:	4770      	bx	lr

08019e1c <_ZN8touchgfx10ClickEventD0Ev>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	4604      	mov	r4, r0
 8019e20:	210c      	movs	r1, #12
 8019e22:	f00b fcb8 	bl	8025796 <_ZdlPvj>
 8019e26:	4620      	mov	r0, r4
 8019e28:	bd10      	pop	{r4, pc}

08019e2a <_ZN8touchgfx9DragEventD0Ev>:
 8019e2a:	b510      	push	{r4, lr}
 8019e2c:	4604      	mov	r4, r0
 8019e2e:	2110      	movs	r1, #16
 8019e30:	f00b fcb1 	bl	8025796 <_ZdlPvj>
 8019e34:	4620      	mov	r0, r4
 8019e36:	bd10      	pop	{r4, pc}

08019e38 <_ZN8touchgfx12GestureEventD0Ev>:
 8019e38:	b510      	push	{r4, lr}
 8019e3a:	4604      	mov	r4, r0
 8019e3c:	210c      	movs	r1, #12
 8019e3e:	f00b fcaa 	bl	8025796 <_ZdlPvj>
 8019e42:	4620      	mov	r0, r4
 8019e44:	bd10      	pop	{r4, pc}
	...

08019e48 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019e48:	b530      	push	{r4, r5, lr}
 8019e4a:	460d      	mov	r5, r1
 8019e4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019e4e:	b087      	sub	sp, #28
 8019e50:	4604      	mov	r4, r0
 8019e52:	b301      	cbz	r1, 8019e96 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019e54:	a801      	add	r0, sp, #4
 8019e56:	f7ff ff06 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e5a:	892a      	ldrh	r2, [r5, #8]
 8019e5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019e60:	7928      	ldrb	r0, [r5, #4]
 8019e62:	1ad2      	subs	r2, r2, r3
 8019e64:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019e66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019e6a:	441a      	add	r2, r3
 8019e6c:	896b      	ldrh	r3, [r5, #10]
 8019e6e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019e72:	f88d 0010 	strb.w	r0, [sp, #16]
 8019e76:	1b5b      	subs	r3, r3, r5
 8019e78:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019e7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019e7c:	442b      	add	r3, r5
 8019e7e:	4d07      	ldr	r5, [pc, #28]	; (8019e9c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019e80:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019e84:	a903      	add	r1, sp, #12
 8019e86:	9503      	str	r5, [sp, #12]
 8019e88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e90:	6803      	ldr	r3, [r0, #0]
 8019e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e94:	4798      	blx	r3
 8019e96:	b007      	add	sp, #28
 8019e98:	bd30      	pop	{r4, r5, pc}
 8019e9a:	bf00      	nop
 8019e9c:	0802938c 	.word	0x0802938c

08019ea0 <_ZNK8touchgfx4Rect9intersectEss>:
 8019ea0:	b510      	push	{r4, lr}
 8019ea2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019ea6:	428b      	cmp	r3, r1
 8019ea8:	dc10      	bgt.n	8019ecc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019eaa:	8884      	ldrh	r4, [r0, #4]
 8019eac:	4423      	add	r3, r4
 8019eae:	b21b      	sxth	r3, r3
 8019eb0:	4299      	cmp	r1, r3
 8019eb2:	da0b      	bge.n	8019ecc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019eb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019eb8:	4293      	cmp	r3, r2
 8019eba:	dc07      	bgt.n	8019ecc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019ebc:	88c0      	ldrh	r0, [r0, #6]
 8019ebe:	4418      	add	r0, r3
 8019ec0:	b200      	sxth	r0, r0
 8019ec2:	4282      	cmp	r2, r0
 8019ec4:	bfac      	ite	ge
 8019ec6:	2000      	movge	r0, #0
 8019ec8:	2001      	movlt	r0, #1
 8019eca:	bd10      	pop	{r4, pc}
 8019ecc:	2000      	movs	r0, #0
 8019ece:	e7fc      	b.n	8019eca <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019ed0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ed2:	460c      	mov	r4, r1
 8019ed4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019ed6:	b089      	sub	sp, #36	; 0x24
 8019ed8:	4605      	mov	r5, r0
 8019eda:	2900      	cmp	r1, #0
 8019edc:	d054      	beq.n	8019f88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019ede:	4668      	mov	r0, sp
 8019ee0:	f7ff fec1 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ee4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019ee6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019ee8:	4668      	mov	r0, sp
 8019eea:	8922      	ldrh	r2, [r4, #8]
 8019eec:	88e1      	ldrh	r1, [r4, #6]
 8019eee:	443a      	add	r2, r7
 8019ef0:	4431      	add	r1, r6
 8019ef2:	b212      	sxth	r2, r2
 8019ef4:	b209      	sxth	r1, r1
 8019ef6:	f7ff ffd3 	bl	8019ea0 <_ZNK8touchgfx4Rect9intersectEss>
 8019efa:	b1d0      	cbz	r0, 8019f32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019efc:	89a2      	ldrh	r2, [r4, #12]
 8019efe:	4668      	mov	r0, sp
 8019f00:	8961      	ldrh	r1, [r4, #10]
 8019f02:	443a      	add	r2, r7
 8019f04:	4431      	add	r1, r6
 8019f06:	b212      	sxth	r2, r2
 8019f08:	b209      	sxth	r1, r1
 8019f0a:	f7ff ffc9 	bl	8019ea0 <_ZNK8touchgfx4Rect9intersectEss>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	b978      	cbnz	r0, 8019f32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019f12:	4a1e      	ldr	r2, [pc, #120]	; (8019f8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019f14:	a904      	add	r1, sp, #16
 8019f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019f18:	9204      	str	r2, [sp, #16]
 8019f1a:	2202      	movs	r2, #2
 8019f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f20:	f88d 2014 	strb.w	r2, [sp, #20]
 8019f24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019f28:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019f2c:	6803      	ldr	r3, [r0, #0]
 8019f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f30:	4798      	blx	r3
 8019f32:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019f34:	a802      	add	r0, sp, #8
 8019f36:	f7ff fe96 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f3a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019f3e:	88e0      	ldrh	r0, [r4, #6]
 8019f40:	8961      	ldrh	r1, [r4, #10]
 8019f42:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019f46:	1a80      	subs	r0, r0, r2
 8019f48:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019f4c:	1a89      	subs	r1, r1, r2
 8019f4e:	8923      	ldrh	r3, [r4, #8]
 8019f50:	4460      	add	r0, ip
 8019f52:	89a2      	ldrh	r2, [r4, #12]
 8019f54:	4461      	add	r1, ip
 8019f56:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019f58:	eba3 030e 	sub.w	r3, r3, lr
 8019f5c:	eba2 020e 	sub.w	r2, r2, lr
 8019f60:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019f64:	7927      	ldrb	r7, [r4, #4]
 8019f66:	4433      	add	r3, r6
 8019f68:	4432      	add	r2, r6
 8019f6a:	4c09      	ldr	r4, [pc, #36]	; (8019f90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019f6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019f6e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019f72:	a904      	add	r1, sp, #16
 8019f74:	9404      	str	r4, [sp, #16]
 8019f76:	f88d 7014 	strb.w	r7, [sp, #20]
 8019f7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019f7e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019f82:	6803      	ldr	r3, [r0, #0]
 8019f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f86:	4798      	blx	r3
 8019f88:	b009      	add	sp, #36	; 0x24
 8019f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f8c:	08029364 	.word	0x08029364
 8019f90:	08029378 	.word	0x08029378

08019f94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f98:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019f9c:	b0a1      	sub	sp, #132	; 0x84
 8019f9e:	4604      	mov	r4, r0
 8019fa0:	460d      	mov	r5, r1
 8019fa2:	790b      	ldrb	r3, [r1, #4]
 8019fa4:	f1b9 0f00 	cmp.w	r9, #0
 8019fa8:	d00f      	beq.n	8019fca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	f040 80a2 	bne.w	801a0f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019fb0:	b021      	add	sp, #132	; 0x84
 8019fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019fba:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019fbe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019fc2:	1d20      	adds	r0, r4, #4
 8019fc4:	f7fb faca 	bl	801555c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019fc8:	e094      	b.n	801a0f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d1f0      	bne.n	8019fb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019fce:	4b5f      	ldr	r3, [pc, #380]	; (801a14c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019fd6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019fda:	f1ba 0f03 	cmp.w	sl, #3
 8019fde:	ddea      	ble.n	8019fb6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019fe0:	f1ba 0f0c 	cmp.w	sl, #12
 8019fe4:	f04f 0303 	mov.w	r3, #3
 8019fe8:	f04f 0600 	mov.w	r6, #0
 8019fec:	4958      	ldr	r1, [pc, #352]	; (801a150 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019fee:	bfd8      	it	le
 8019ff0:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019ff4:	960a      	str	r6, [sp, #40]	; 0x28
 8019ff6:	bfd8      	it	le
 8019ff8:	fb92 f3f3 	sdivle	r3, r2, r3
 8019ffc:	9301      	str	r3, [sp, #4]
 8019ffe:	4b55      	ldr	r3, [pc, #340]	; (801a154 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a000:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a004:	4b54      	ldr	r3, [pc, #336]	; (801a158 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a006:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a00a:	2248      	movs	r2, #72	; 0x48
 801a00c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a010:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a014:	ab0e      	add	r3, sp, #56	; 0x38
 801a016:	4618      	mov	r0, r3
 801a018:	f00b fc66 	bl	80258e8 <memcpy>
 801a01c:	f04f 32ff 	mov.w	r2, #4294967295
 801a020:	f8cd a008 	str.w	sl, [sp, #8]
 801a024:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a028:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a02c:	46b3      	mov	fp, r6
 801a02e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a032:	b29b      	uxth	r3, r3
 801a034:	9303      	str	r3, [sp, #12]
 801a036:	2300      	movs	r3, #0
 801a038:	9a03      	ldr	r2, [sp, #12]
 801a03a:	88ef      	ldrh	r7, [r5, #6]
 801a03c:	a80a      	add	r0, sp, #40	; 0x28
 801a03e:	9309      	str	r3, [sp, #36]	; 0x24
 801a040:	9b07      	ldr	r3, [sp, #28]
 801a042:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a046:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a04a:	fb13 f302 	smulbb	r3, r3, r2
 801a04e:	b29b      	uxth	r3, r3
 801a050:	9304      	str	r3, [sp, #16]
 801a052:	9b07      	ldr	r3, [sp, #28]
 801a054:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a058:	685b      	ldr	r3, [r3, #4]
 801a05a:	fb13 f302 	smulbb	r3, r3, r2
 801a05e:	b29b      	uxth	r3, r3
 801a060:	9305      	str	r3, [sp, #20]
 801a062:	9b04      	ldr	r3, [sp, #16]
 801a064:	441f      	add	r7, r3
 801a066:	9b05      	ldr	r3, [sp, #20]
 801a068:	4498      	add	r8, r3
 801a06a:	b23f      	sxth	r7, r7
 801a06c:	fa0f f888 	sxth.w	r8, r8
 801a070:	4639      	mov	r1, r7
 801a072:	4642      	mov	r2, r8
 801a074:	f7ff ff14 	bl	8019ea0 <_ZNK8touchgfx4Rect9intersectEss>
 801a078:	b380      	cbz	r0, 801a0dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a07a:	4639      	mov	r1, r7
 801a07c:	ab09      	add	r3, sp, #36	; 0x24
 801a07e:	4642      	mov	r2, r8
 801a080:	1d20      	adds	r0, r4, #4
 801a082:	f7fb fa6b 	bl	801555c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a086:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a088:	b341      	cbz	r1, 801a0dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a08a:	4549      	cmp	r1, r9
 801a08c:	d026      	beq.n	801a0dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a08e:	a80c      	add	r0, sp, #48	; 0x30
 801a090:	f7ff fde9 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a094:	2002      	movs	r0, #2
 801a096:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a09a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a09e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a0a2:	fb92 f2f0 	sdiv	r2, r2, r0
 801a0a6:	440a      	add	r2, r1
 801a0a8:	1a99      	subs	r1, r3, r2
 801a0aa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a0ae:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a0b2:	fb93 f3f0 	sdiv	r3, r3, r0
 801a0b6:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a0ba:	4403      	add	r3, r0
 801a0bc:	1ad3      	subs	r3, r2, r3
 801a0be:	9a06      	ldr	r2, [sp, #24]
 801a0c0:	435b      	muls	r3, r3
 801a0c2:	fb01 3301 	mla	r3, r1, r1, r3
 801a0c6:	4293      	cmp	r3, r2
 801a0c8:	d208      	bcs.n	801a0dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a0ca:	9a04      	ldr	r2, [sp, #16]
 801a0cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a0d0:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a0d2:	9a05      	ldr	r2, [sp, #20]
 801a0d4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a0d8:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a0da:	9306      	str	r3, [sp, #24]
 801a0dc:	f10b 0b02 	add.w	fp, fp, #2
 801a0e0:	f1bb 0f08 	cmp.w	fp, #8
 801a0e4:	dda7      	ble.n	801a036 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a0e6:	9b02      	ldr	r3, [sp, #8]
 801a0e8:	3601      	adds	r6, #1
 801a0ea:	4453      	add	r3, sl
 801a0ec:	9302      	str	r3, [sp, #8]
 801a0ee:	9b01      	ldr	r3, [sp, #4]
 801a0f0:	42b3      	cmp	r3, r6
 801a0f2:	d199      	bne.n	801a028 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a0f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a0f6:	2900      	cmp	r1, #0
 801a0f8:	f43f af5a 	beq.w	8019fb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a0fc:	a80c      	add	r0, sp, #48	; 0x30
 801a0fe:	2600      	movs	r6, #0
 801a100:	f7ff fdb1 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a104:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a108:	88ea      	ldrh	r2, [r5, #6]
 801a10a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a10e:	1ad2      	subs	r2, r2, r3
 801a110:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a112:	7929      	ldrb	r1, [r5, #4]
 801a114:	441a      	add	r2, r3
 801a116:	892b      	ldrh	r3, [r5, #8]
 801a118:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a11c:	a90e      	add	r1, sp, #56	; 0x38
 801a11e:	1a1b      	subs	r3, r3, r0
 801a120:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a122:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a126:	4403      	add	r3, r0
 801a128:	480c      	ldr	r0, [pc, #48]	; (801a15c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a12a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a12e:	900e      	str	r0, [sp, #56]	; 0x38
 801a130:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a132:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a136:	6803      	ldr	r3, [r0, #0]
 801a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a13a:	4798      	blx	r3
 801a13c:	792b      	ldrb	r3, [r5, #4]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	f43f af36 	beq.w	8019fb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a144:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a148:	e732      	b.n	8019fb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a14a:	bf00      	nop
 801a14c:	2000bb94 	.word	0x2000bb94
 801a150:	08026f38 	.word	0x08026f38
 801a154:	2000bb88 	.word	0x2000bb88
 801a158:	2000bb8a 	.word	0x2000bb8a
 801a15c:	08029364 	.word	0x08029364

0801a160 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a162:	4604      	mov	r4, r0
 801a164:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a168:	3201      	adds	r2, #1
 801a16a:	d112      	bne.n	801a192 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a16c:	2500      	movs	r5, #0
 801a16e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a172:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a176:	6803      	ldr	r3, [r0, #0]
 801a178:	9500      	str	r5, [sp, #0]
 801a17a:	466d      	mov	r5, sp
 801a17c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a180:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a184:	4629      	mov	r1, r5
 801a186:	6a1b      	ldr	r3, [r3, #32]
 801a188:	4798      	blx	r3
 801a18a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a18e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a192:	4620      	mov	r0, r4
 801a194:	b003      	add	sp, #12
 801a196:	bd30      	pop	{r4, r5, pc}

0801a198 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a198:	b513      	push	{r0, r1, r4, lr}
 801a19a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a19e:	4604      	mov	r4, r0
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	d109      	bne.n	801a1b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a1a4:	4601      	mov	r1, r0
 801a1a6:	4668      	mov	r0, sp
 801a1a8:	f7ff fd5d 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1ac:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1b0:	8423      	strh	r3, [r4, #32]
 801a1b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1b6:	8463      	strh	r3, [r4, #34]	; 0x22
 801a1b8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a1bc:	b002      	add	sp, #8
 801a1be:	bd10      	pop	{r4, pc}

0801a1c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a1c0:	b513      	push	{r0, r1, r4, lr}
 801a1c2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a1c6:	4604      	mov	r4, r0
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	d109      	bne.n	801a1e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a1cc:	4601      	mov	r1, r0
 801a1ce:	4668      	mov	r0, sp
 801a1d0:	f7ff fd49 	bl	8019c66 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1d4:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1d8:	8423      	strh	r3, [r4, #32]
 801a1da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1de:	8463      	strh	r3, [r4, #34]	; 0x22
 801a1e0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a1e4:	b002      	add	sp, #8
 801a1e6:	bd10      	pop	{r4, pc}

0801a1e8 <_ZN8touchgfx6ScreenC1Ev>:
 801a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ea:	4605      	mov	r5, r0
 801a1ec:	4b17      	ldr	r3, [pc, #92]	; (801a24c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	4917      	ldr	r1, [pc, #92]	; (801a250 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a1f2:	f845 3b04 	str.w	r3, [r5], #4
 801a1f6:	2301      	movs	r3, #1
 801a1f8:	8102      	strh	r2, [r0, #8]
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a200:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a204:	4b13      	ldr	r3, [pc, #76]	; (801a254 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a206:	8142      	strh	r2, [r0, #10]
 801a208:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a20c:	4b12      	ldr	r3, [pc, #72]	; (801a258 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a20e:	8182      	strh	r2, [r0, #12]
 801a210:	81c2      	strh	r2, [r0, #14]
 801a212:	8202      	strh	r2, [r0, #16]
 801a214:	8242      	strh	r2, [r0, #18]
 801a216:	8282      	strh	r2, [r0, #20]
 801a218:	82c2      	strh	r2, [r0, #22]
 801a21a:	6202      	str	r2, [r0, #32]
 801a21c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a220:	6342      	str	r2, [r0, #52]	; 0x34
 801a222:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a226:	6041      	str	r1, [r0, #4]
 801a228:	4611      	mov	r1, r2
 801a22a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a22e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a232:	4628      	mov	r0, r5
 801a234:	f7f6 f927 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
 801a238:	4639      	mov	r1, r7
 801a23a:	4628      	mov	r0, r5
 801a23c:	f7f6 f941 	bl	80104c2 <_ZN8touchgfx8Drawable8setWidthEs>
 801a240:	4628      	mov	r0, r5
 801a242:	4631      	mov	r1, r6
 801a244:	f7f6 f94c 	bl	80104e0 <_ZN8touchgfx8Drawable9setHeightEs>
 801a248:	4620      	mov	r0, r4
 801a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a24c:	080293a0 	.word	0x080293a0
 801a250:	08028074 	.word	0x08028074
 801a254:	2000bb88 	.word	0x2000bb88
 801a258:	2000bb8a 	.word	0x2000bb8a

0801a25c <_ZN8touchgfx6Screen4drawEv>:
 801a25c:	4b09      	ldr	r3, [pc, #36]	; (801a284 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a25e:	b507      	push	{r0, r1, r2, lr}
 801a260:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a264:	2100      	movs	r1, #0
 801a266:	4b08      	ldr	r3, [pc, #32]	; (801a288 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a268:	9100      	str	r1, [sp, #0]
 801a26a:	4669      	mov	r1, sp
 801a26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a270:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a274:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a278:	6803      	ldr	r3, [r0, #0]
 801a27a:	689b      	ldr	r3, [r3, #8]
 801a27c:	4798      	blx	r3
 801a27e:	b003      	add	sp, #12
 801a280:	f85d fb04 	ldr.w	pc, [sp], #4
 801a284:	2000bb88 	.word	0x2000bb88
 801a288:	2000bb8a 	.word	0x2000bb8a

0801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a290:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a294:	b089      	sub	sp, #36	; 0x24
 801a296:	4680      	mov	r8, r0
 801a298:	460c      	mov	r4, r1
 801a29a:	4615      	mov	r5, r2
 801a29c:	b16b      	cbz	r3, 801a2ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a29e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a2a2:	b153      	cbz	r3, 801a2ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	f7ff ff5b 	bl	801a160 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a2aa:	4621      	mov	r1, r4
 801a2ac:	f7fe ff9a 	bl	80191e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a2b0:	69eb      	ldr	r3, [r5, #28]
 801a2b2:	b928      	cbnz	r0, 801a2c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801a2b4:	461d      	mov	r5, r3
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d1f4      	bne.n	801a2a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801a2ba:	b009      	add	sp, #36	; 0x24
 801a2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c0:	ae04      	add	r6, sp, #16
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d051      	beq.n	801a36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a2c6:	682b      	ldr	r3, [r5, #0]
 801a2c8:	4629      	mov	r1, r5
 801a2ca:	a802      	add	r0, sp, #8
 801a2cc:	68db      	ldr	r3, [r3, #12]
 801a2ce:	4798      	blx	r3
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	f7ff ff61 	bl	801a198 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a2d6:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a2da:	4407      	add	r7, r0
 801a2dc:	4628      	mov	r0, r5
 801a2de:	f7ff ff6f 	bl	801a1c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a2e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a2e6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a2ea:	b23f      	sxth	r7, r7
 801a2ec:	4418      	add	r0, r3
 801a2ee:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2f8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a302:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a306:	f7fb f9db 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 801a30a:	4628      	mov	r0, r5
 801a30c:	f7ff ff28 	bl	801a160 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a310:	ab06      	add	r3, sp, #24
 801a312:	4602      	mov	r2, r0
 801a314:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a318:	e883 0003 	stmia.w	r3, {r0, r1}
 801a31c:	4611      	mov	r1, r2
 801a31e:	4618      	mov	r0, r3
 801a320:	f7fb f9ce 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 801a324:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a328:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a32c:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a330:	4299      	cmp	r1, r3
 801a332:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a336:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a33a:	d10b      	bne.n	801a354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a33c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a340:	4552      	cmp	r2, sl
 801a342:	d107      	bne.n	801a354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a344:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a348:	455a      	cmp	r2, fp
 801a34a:	d103      	bne.n	801a354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a34c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a350:	454a      	cmp	r2, r9
 801a352:	d00a      	beq.n	801a36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a354:	f1bb 0f00 	cmp.w	fp, #0
 801a358:	d002      	beq.n	801a360 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801a35a:	f1b9 0f00 	cmp.w	r9, #0
 801a35e:	d12e      	bne.n	801a3be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801a360:	69ea      	ldr	r2, [r5, #28]
 801a362:	4621      	mov	r1, r4
 801a364:	4640      	mov	r0, r8
 801a366:	f7ff ff91 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a36a:	4628      	mov	r0, r5
 801a36c:	f7ff fef8 	bl	801a160 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a370:	6861      	ldr	r1, [r4, #4]
 801a372:	4602      	mov	r2, r0
 801a374:	4633      	mov	r3, r6
 801a376:	6820      	ldr	r0, [r4, #0]
 801a378:	c303      	stmia	r3!, {r0, r1}
 801a37a:	4611      	mov	r1, r2
 801a37c:	4630      	mov	r0, r6
 801a37e:	f7fb f99f 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 801a382:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d097      	beq.n	801a2ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a38a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d093      	beq.n	801a2ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a392:	4628      	mov	r0, r5
 801a394:	f7ff ff00 	bl	801a198 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a398:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a39c:	1a18      	subs	r0, r3, r0
 801a39e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	f7ff ff0c 	bl	801a1c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a3a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a3ac:	4631      	mov	r1, r6
 801a3ae:	1a18      	subs	r0, r3, r0
 801a3b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	682b      	ldr	r3, [r5, #0]
 801a3b8:	689b      	ldr	r3, [r3, #8]
 801a3ba:	4798      	blx	r3
 801a3bc:	e77d      	b.n	801a2ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a3be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a3c2:	fa1f f08a 	uxth.w	r0, sl
 801a3c6:	4552      	cmp	r2, sl
 801a3c8:	9000      	str	r0, [sp, #0]
 801a3ca:	da12      	bge.n	801a3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801a3cc:	9301      	str	r3, [sp, #4]
 801a3ce:	9b00      	ldr	r3, [sp, #0]
 801a3d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a3d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a3d8:	1a9a      	subs	r2, r3, r2
 801a3da:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a3de:	4631      	mov	r1, r6
 801a3e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a3e4:	4640      	mov	r0, r8
 801a3e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a3ea:	69ea      	ldr	r2, [r5, #28]
 801a3ec:	f7ff ff4e 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3f0:	9b01      	ldr	r3, [sp, #4]
 801a3f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a3f6:	b29f      	uxth	r7, r3
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	da0d      	bge.n	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801a3fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a400:	1aba      	subs	r2, r7, r2
 801a402:	f8ad a012 	strh.w	sl, [sp, #18]
 801a406:	4631      	mov	r1, r6
 801a408:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a40c:	4640      	mov	r0, r8
 801a40e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a412:	69ea      	ldr	r2, [r5, #28]
 801a414:	f7ff ff3a 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a418:	8822      	ldrh	r2, [r4, #0]
 801a41a:	445f      	add	r7, fp
 801a41c:	88a3      	ldrh	r3, [r4, #4]
 801a41e:	b2bf      	uxth	r7, r7
 801a420:	4413      	add	r3, r2
 801a422:	b23a      	sxth	r2, r7
 801a424:	b29b      	uxth	r3, r3
 801a426:	b219      	sxth	r1, r3
 801a428:	4291      	cmp	r1, r2
 801a42a:	dd0d      	ble.n	801a448 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801a42c:	1bdb      	subs	r3, r3, r7
 801a42e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a432:	f8ad a012 	strh.w	sl, [sp, #18]
 801a436:	4631      	mov	r1, r6
 801a438:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a43c:	4640      	mov	r0, r8
 801a43e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a442:	69ea      	ldr	r2, [r5, #28]
 801a444:	f7ff ff22 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a448:	88e2      	ldrh	r2, [r4, #6]
 801a44a:	8863      	ldrh	r3, [r4, #2]
 801a44c:	4413      	add	r3, r2
 801a44e:	9a00      	ldr	r2, [sp, #0]
 801a450:	444a      	add	r2, r9
 801a452:	b29b      	uxth	r3, r3
 801a454:	fa1f f982 	uxth.w	r9, r2
 801a458:	b219      	sxth	r1, r3
 801a45a:	fa0f f289 	sxth.w	r2, r9
 801a45e:	428a      	cmp	r2, r1
 801a460:	da83      	bge.n	801a36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a462:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a466:	eba3 0309 	sub.w	r3, r3, r9
 801a46a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a46e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a472:	4631      	mov	r1, r6
 801a474:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a478:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a47c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a480:	69ea      	ldr	r2, [r5, #28]
 801a482:	e76f      	b.n	801a364 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801a484 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a486:	2300      	movs	r3, #0
 801a488:	aa02      	add	r2, sp, #8
 801a48a:	4604      	mov	r4, r0
 801a48c:	3004      	adds	r0, #4
 801a48e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a492:	460d      	mov	r5, r1
 801a494:	f7fb f9eb 	bl	801586e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a498:	9a01      	ldr	r2, [sp, #4]
 801a49a:	b11a      	cbz	r2, 801a4a4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a49c:	4629      	mov	r1, r5
 801a49e:	4620      	mov	r0, r4
 801a4a0:	f7ff fef4 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4a4:	b003      	add	sp, #12
 801a4a6:	bd30      	pop	{r4, r5, pc}

0801a4a8 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	460d      	mov	r5, r1
 801a4b0:	466b      	mov	r3, sp
 801a4b2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a4b6:	6851      	ldr	r1, [r2, #4]
 801a4b8:	c303      	stmia	r3!, {r0, r1}
 801a4ba:	4629      	mov	r1, r5
 801a4bc:	4668      	mov	r0, sp
 801a4be:	f7fb f8ff 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 801a4c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a4c6:	4669      	mov	r1, sp
 801a4c8:	b123      	cbz	r3, 801a4d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a4ca:	4620      	mov	r0, r4
 801a4cc:	f7ff ffda 	bl	801a484 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a4d0:	b003      	add	sp, #12
 801a4d2:	bd30      	pop	{r4, r5, pc}
 801a4d4:	1d20      	adds	r0, r4, #4
 801a4d6:	f7fb f991 	bl	80157fc <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a4da:	e7f9      	b.n	801a4d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a4dc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a4dc:	460b      	mov	r3, r1
 801a4de:	680a      	ldr	r2, [r1, #0]
 801a4e0:	1d01      	adds	r1, r0, #4
 801a4e2:	6952      	ldr	r2, [r2, #20]
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	4710      	bx	r2

0801a4e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a4e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a4ec:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a4f0:	4b03      	ldr	r3, [pc, #12]	; (801a500 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a4f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a4f6:	bf08      	it	eq
 801a4f8:	2300      	moveq	r3, #0
 801a4fa:	4308      	orrs	r0, r1
 801a4fc:	4318      	orrs	r0, r3
 801a4fe:	4770      	bx	lr
 801a500:	fffffe00 	.word	0xfffffe00

0801a504 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a504:	7b43      	ldrb	r3, [r0, #13]
 801a506:	7201      	strb	r1, [r0, #8]
 801a508:	b289      	uxth	r1, r1
 801a50a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a50e:	05ca      	lsls	r2, r1, #23
 801a510:	bf48      	it	mi
 801a512:	f043 0320 	orrmi.w	r3, r3, #32
 801a516:	7343      	strb	r3, [r0, #13]
 801a518:	058b      	lsls	r3, r1, #22
 801a51a:	bf42      	ittt	mi
 801a51c:	7b43      	ldrbmi	r3, [r0, #13]
 801a51e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a522:	7343      	strbmi	r3, [r0, #13]
 801a524:	4770      	bx	lr

0801a526 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a526:	b530      	push	{r4, r5, lr}
 801a528:	2500      	movs	r5, #0
 801a52a:	2401      	movs	r4, #1
 801a52c:	6843      	ldr	r3, [r0, #4]
 801a52e:	b913      	cbnz	r3, 801a536 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a530:	6803      	ldr	r3, [r0, #0]
 801a532:	b1f3      	cbz	r3, 801a572 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a534:	6043      	str	r3, [r0, #4]
 801a536:	7c03      	ldrb	r3, [r0, #16]
 801a538:	b143      	cbz	r3, 801a54c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a53a:	68c3      	ldr	r3, [r0, #12]
 801a53c:	b12b      	cbz	r3, 801a54a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a53e:	881a      	ldrh	r2, [r3, #0]
 801a540:	b11a      	cbz	r2, 801a54a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a542:	1c9a      	adds	r2, r3, #2
 801a544:	60c2      	str	r2, [r0, #12]
 801a546:	8818      	ldrh	r0, [r3, #0]
 801a548:	bd30      	pop	{r4, r5, pc}
 801a54a:	7405      	strb	r5, [r0, #16]
 801a54c:	6843      	ldr	r3, [r0, #4]
 801a54e:	8819      	ldrh	r1, [r3, #0]
 801a550:	b179      	cbz	r1, 801a572 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a552:	1c9a      	adds	r2, r3, #2
 801a554:	2902      	cmp	r1, #2
 801a556:	6042      	str	r2, [r0, #4]
 801a558:	d1f5      	bne.n	801a546 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a55a:	6883      	ldr	r3, [r0, #8]
 801a55c:	1d1a      	adds	r2, r3, #4
 801a55e:	6082      	str	r2, [r0, #8]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	60c3      	str	r3, [r0, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d0e1      	beq.n	801a52c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a568:	881b      	ldrh	r3, [r3, #0]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d0de      	beq.n	801a52c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a56e:	7404      	strb	r4, [r0, #16]
 801a570:	e7dc      	b.n	801a52c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a572:	2000      	movs	r0, #0
 801a574:	e7e8      	b.n	801a548 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a576 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 801a576:	2301      	movs	r3, #1
 801a578:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 801a57c:	4770      	bx	lr

0801a57e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>:
 801a57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a580:	f04f 0c0a 	mov.w	ip, #10
 801a584:	2500      	movs	r5, #0
 801a586:	2702      	movs	r7, #2
 801a588:	42ab      	cmp	r3, r5
 801a58a:	dd0f      	ble.n	801a5ac <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2e>
 801a58c:	195c      	adds	r4, r3, r5
 801a58e:	fb94 f4f7 	sdiv	r4, r4, r7
 801a592:	fb0c f604 	mul.w	r6, ip, r4
 801a596:	1990      	adds	r0, r2, r6
 801a598:	5b96      	ldrh	r6, [r2, r6]
 801a59a:	428e      	cmp	r6, r1
 801a59c:	d203      	bcs.n	801a5a6 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x28>
 801a59e:	1c65      	adds	r5, r4, #1
 801a5a0:	461c      	mov	r4, r3
 801a5a2:	4623      	mov	r3, r4
 801a5a4:	e7f0      	b.n	801a588 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0xa>
 801a5a6:	d1fc      	bne.n	801a5a2 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x24>
 801a5a8:	3002      	adds	r0, #2
 801a5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	e7fc      	b.n	801a5aa <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2c>

0801a5b0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>:
 801a5b0:	f46f 6cc4 	mvn.w	ip, #1568	; 0x620
 801a5b4:	460b      	mov	r3, r1
 801a5b6:	eb01 020c 	add.w	r2, r1, ip
 801a5ba:	b410      	push	{r4}
 801a5bc:	b294      	uxth	r4, r2
 801a5be:	2c19      	cmp	r4, #25
 801a5c0:	d805      	bhi.n	801a5ce <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x1e>
 801a5c2:	480d      	ldr	r0, [pc, #52]	; (801a5f8 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x48>)
 801a5c4:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 801a5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5cc:	4770      	bx	lr
 801a5ce:	f46f 64c8 	mvn.w	r4, #1600	; 0x640
 801a5d2:	190a      	adds	r2, r1, r4
 801a5d4:	b294      	uxth	r4, r2
 801a5d6:	2c09      	cmp	r4, #9
 801a5d8:	d801      	bhi.n	801a5de <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x2e>
 801a5da:	4808      	ldr	r0, [pc, #32]	; (801a5fc <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x4c>)
 801a5dc:	e7f2      	b.n	801a5c4 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x14>
 801a5de:	f46f 62ce 	mvn.w	r2, #1648	; 0x670
 801a5e2:	4413      	add	r3, r2
 801a5e4:	2b62      	cmp	r3, #98	; 0x62
 801a5e6:	d805      	bhi.n	801a5f4 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x44>
 801a5e8:	2328      	movs	r3, #40	; 0x28
 801a5ea:	4a05      	ldr	r2, [pc, #20]	; (801a600 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x50>)
 801a5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5f0:	f7ff bfc5 	b.w	801a57e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	e7e7      	b.n	801a5c8 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x18>
 801a5f8:	0802a09c 	.word	0x0802a09c
 801a5fc:	0802a16c 	.word	0x0802a16c
 801a600:	0802943a 	.word	0x0802943a

0801a604 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a606:	4605      	mov	r5, r0
 801a608:	4608      	mov	r0, r1
 801a60a:	b1f1      	cbz	r1, 801a64a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a60c:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a610:	460b      	mov	r3, r1
 801a612:	f101 0708 	add.w	r7, r1, #8
 801a616:	4622      	mov	r2, r4
 801a618:	6818      	ldr	r0, [r3, #0]
 801a61a:	3308      	adds	r3, #8
 801a61c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a620:	4626      	mov	r6, r4
 801a622:	42bb      	cmp	r3, r7
 801a624:	c603      	stmia	r6!, {r0, r1}
 801a626:	4634      	mov	r4, r6
 801a628:	d1f6      	bne.n	801a618 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a62a:	6818      	ldr	r0, [r3, #0]
 801a62c:	6030      	str	r0, [r6, #0]
 801a62e:	4610      	mov	r0, r2
 801a630:	889b      	ldrh	r3, [r3, #4]
 801a632:	80b3      	strh	r3, [r6, #4]
 801a634:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a638:	015b      	lsls	r3, r3, #5
 801a63a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a63e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a642:	430b      	orrs	r3, r1
 801a644:	425b      	negs	r3, r3
 801a646:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a64c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	460c      	mov	r4, r1
 801a650:	6811      	ldr	r1, [r2, #0]
 801a652:	4610      	mov	r0, r2
 801a654:	68cd      	ldr	r5, [r1, #12]
 801a656:	4619      	mov	r1, r3
 801a658:	47a8      	blx	r5
 801a65a:	2800      	cmp	r0, #0
 801a65c:	bf08      	it	eq
 801a65e:	4620      	moveq	r0, r4
 801a660:	bd38      	pop	{r3, r4, r5, pc}

0801a662 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a662:	b570      	push	{r4, r5, r6, lr}
 801a664:	8810      	ldrh	r0, [r2, #0]
 801a666:	4298      	cmp	r0, r3
 801a668:	d817      	bhi.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a66a:	1e48      	subs	r0, r1, #1
 801a66c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a670:	4298      	cmp	r0, r3
 801a672:	d312      	bcc.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a674:	2400      	movs	r4, #0
 801a676:	428c      	cmp	r4, r1
 801a678:	d20f      	bcs.n	801a69a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a67a:	1860      	adds	r0, r4, r1
 801a67c:	1040      	asrs	r0, r0, #1
 801a67e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a682:	0085      	lsls	r5, r0, #2
 801a684:	42b3      	cmp	r3, r6
 801a686:	d902      	bls.n	801a68e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a688:	3001      	adds	r0, #1
 801a68a:	b284      	uxth	r4, r0
 801a68c:	e7f3      	b.n	801a676 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a68e:	d102      	bne.n	801a696 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a690:	442a      	add	r2, r5
 801a692:	8850      	ldrh	r0, [r2, #2]
 801a694:	bd70      	pop	{r4, r5, r6, pc}
 801a696:	b281      	uxth	r1, r0
 801a698:	e7ed      	b.n	801a676 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a69a:	2000      	movs	r0, #0
 801a69c:	e7fa      	b.n	801a694 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

0801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a6a0:	b510      	push	{r4, lr}
 801a6a2:	8ac3      	ldrh	r3, [r0, #22]
 801a6a4:	428b      	cmp	r3, r1
 801a6a6:	d805      	bhi.n	801a6b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a6a8:	4b07      	ldr	r3, [pc, #28]	; (801a6c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a6aa:	21fd      	movs	r1, #253	; 0xfd
 801a6ac:	4a07      	ldr	r2, [pc, #28]	; (801a6cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a6ae:	4808      	ldr	r0, [pc, #32]	; (801a6d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a6b0:	f00b f89c 	bl	80257ec <__assert_func>
 801a6b4:	8a83      	ldrh	r3, [r0, #20]
 801a6b6:	240a      	movs	r4, #10
 801a6b8:	4419      	add	r1, r3
 801a6ba:	fbb1 f3f4 	udiv	r3, r1, r4
 801a6be:	fb04 1113 	mls	r1, r4, r3, r1
 801a6c2:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a6c6:	bd10      	pop	{r4, pc}
 801a6c8:	080293ed 	.word	0x080293ed
 801a6cc:	0802a59e 	.word	0x0802a59e
 801a6d0:	080293fb 	.word	0x080293fb

0801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a6d4:	b508      	push	{r3, lr}
 801a6d6:	8ac3      	ldrh	r3, [r0, #22]
 801a6d8:	428b      	cmp	r3, r1
 801a6da:	d805      	bhi.n	801a6e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a6dc:	4b07      	ldr	r3, [pc, #28]	; (801a6fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a6de:	21d3      	movs	r1, #211	; 0xd3
 801a6e0:	4a07      	ldr	r2, [pc, #28]	; (801a700 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a6e2:	4808      	ldr	r0, [pc, #32]	; (801a704 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a6e4:	f00b f882 	bl	80257ec <__assert_func>
 801a6e8:	8a83      	ldrh	r3, [r0, #20]
 801a6ea:	220a      	movs	r2, #10
 801a6ec:	4419      	add	r1, r3
 801a6ee:	fbb1 f3f2 	udiv	r3, r1, r2
 801a6f2:	fb02 1113 	mls	r1, r2, r3, r1
 801a6f6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a6fa:	bd08      	pop	{r3, pc}
 801a6fc:	080293ed 	.word	0x080293ed
 801a700:	0802a2ee 	.word	0x0802a2ee
 801a704:	080293fb 	.word	0x080293fb

0801a708 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a70c:	4604      	mov	r4, r0
 801a70e:	4688      	mov	r8, r1
 801a710:	4615      	mov	r5, r2
 801a712:	b94a      	cbnz	r2, 801a728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a714:	4691      	mov	r9, r2
 801a716:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a71a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a71e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a722:	4648      	mov	r0, r9
 801a724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a728:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a72c:	8892      	ldrh	r2, [r2, #4]
 801a72e:	462b      	mov	r3, r5
 801a730:	f105 0c08 	add.w	ip, r5, #8
 801a734:	46b3      	mov	fp, r6
 801a736:	6818      	ldr	r0, [r3, #0]
 801a738:	3308      	adds	r3, #8
 801a73a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a73e:	4637      	mov	r7, r6
 801a740:	4563      	cmp	r3, ip
 801a742:	c703      	stmia	r7!, {r0, r1}
 801a744:	463e      	mov	r6, r7
 801a746:	d1f6      	bne.n	801a736 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a748:	6818      	ldr	r0, [r3, #0]
 801a74a:	46d9      	mov	r9, fp
 801a74c:	6038      	str	r0, [r7, #0]
 801a74e:	889b      	ldrh	r3, [r3, #4]
 801a750:	80bb      	strh	r3, [r7, #4]
 801a752:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a756:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a75a:	18d3      	adds	r3, r2, r3
 801a75c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a760:	b298      	uxth	r0, r3
 801a762:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a766:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a76a:	281d      	cmp	r0, #29
 801a76c:	ea4a 0a01 	orr.w	sl, sl, r1
 801a770:	fa1f f68a 	uxth.w	r6, sl
 801a774:	d842      	bhi.n	801a7fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a776:	2301      	movs	r3, #1
 801a778:	4950      	ldr	r1, [pc, #320]	; (801a8bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a77a:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a77e:	4083      	lsls	r3, r0
 801a780:	420b      	tst	r3, r1
 801a782:	d114      	bne.n	801a7ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a784:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a788:	d03c      	beq.n	801a804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a78a:	fa1f fa8a 	uxth.w	sl, sl
 801a78e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a792:	4658      	mov	r0, fp
 801a794:	eba1 010a 	sub.w	r1, r1, sl
 801a798:	b209      	sxth	r1, r1
 801a79a:	f7ff feb3 	bl	801a504 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a79e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a7a2:	1b86      	subs	r6, r0, r6
 801a7a4:	eba6 0a0a 	sub.w	sl, r6, sl
 801a7a8:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a7ac:	e7b9      	b.n	801a722 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7ae:	2100      	movs	r1, #0
 801a7b0:	f104 001a 	add.w	r0, r4, #26
 801a7b4:	f7ff ff8e 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a7b8:	f640 6333 	movw	r3, #3635	; 0xe33
 801a7bc:	4601      	mov	r1, r0
 801a7be:	4298      	cmp	r0, r3
 801a7c0:	d10a      	bne.n	801a7d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a7c2:	f8d8 3000 	ldr.w	r3, [r8]
 801a7c6:	4640      	mov	r0, r8
 801a7c8:	68db      	ldr	r3, [r3, #12]
 801a7ca:	4798      	blx	r3
 801a7cc:	7b41      	ldrb	r1, [r0, #13]
 801a7ce:	7a00      	ldrb	r0, [r0, #8]
 801a7d0:	f7ff fe8a 	bl	801a4e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a7d4:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a7d8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a7dc:	4658      	mov	r0, fp
 801a7de:	4431      	add	r1, r6
 801a7e0:	4451      	add	r1, sl
 801a7e2:	b209      	sxth	r1, r1
 801a7e4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a7e8:	f7ff fe8c 	bl	801a504 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a7ec:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a7f0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a7f4:	1a9b      	subs	r3, r3, r2
 801a7f6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a7fa:	e792      	b.n	801a722 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7fc:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a800:	429a      	cmp	r2, r3
 801a802:	d005      	beq.n	801a810 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a804:	f022 0302 	bic.w	r3, r2, #2
 801a808:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a80c:	428b      	cmp	r3, r1
 801a80e:	d119      	bne.n	801a844 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a810:	1e53      	subs	r3, r2, #1
 801a812:	4629      	mov	r1, r5
 801a814:	4642      	mov	r2, r8
 801a816:	4620      	mov	r0, r4
 801a818:	b29b      	uxth	r3, r3
 801a81a:	f7ff ff17 	bl	801a64c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a81e:	7b41      	ldrb	r1, [r0, #13]
 801a820:	7a00      	ldrb	r0, [r0, #8]
 801a822:	f7ff fe61 	bl	801a4e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a826:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a82a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a82e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a832:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a836:	4313      	orrs	r3, r2
 801a838:	115a      	asrs	r2, r3, #5
 801a83a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a83e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a842:	e02e      	b.n	801a8a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a844:	4639      	mov	r1, r7
 801a846:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a84a:	f7ff fe4d 	bl	801a4e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a84e:	f640 6109 	movw	r1, #3593	; 0xe09
 801a852:	f022 0310 	bic.w	r3, r2, #16
 801a856:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a85a:	428b      	cmp	r3, r1
 801a85c:	d003      	beq.n	801a866 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a85e:	f640 6313 	movw	r3, #3603	; 0xe13
 801a862:	429a      	cmp	r2, r3
 801a864:	d127      	bne.n	801a8b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a866:	b27f      	sxtb	r7, r7
 801a868:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a86c:	4629      	mov	r1, r5
 801a86e:	4620      	mov	r0, r4
 801a870:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a874:	431f      	orrs	r7, r3
 801a876:	f640 6313 	movw	r3, #3603	; 0xe13
 801a87a:	429a      	cmp	r2, r3
 801a87c:	bf14      	ite	ne
 801a87e:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a882:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a886:	4642      	mov	r2, r8
 801a888:	bf18      	it	ne
 801a88a:	b29b      	uxthne	r3, r3
 801a88c:	f7ff fede 	bl	801a64c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a890:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a894:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a898:	7a83      	ldrb	r3, [r0, #10]
 801a89a:	4313      	orrs	r3, r2
 801a89c:	1aff      	subs	r7, r7, r3
 801a89e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a8a2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a8a6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a8aa:	f7ff fe1d 	bl	801a4e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a8ae:	1b80      	subs	r0, r0, r6
 801a8b0:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a8b4:	e735      	b.n	801a722 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	e7c1      	b.n	801a83e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a8ba:	bf00      	nop
 801a8bc:	3fc00079 	.word	0x3fc00079

0801a8c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a8c0:	3a01      	subs	r2, #1
 801a8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8c6:	b292      	uxth	r2, r2
 801a8c8:	460c      	mov	r4, r1
 801a8ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a8ce:	42b2      	cmp	r2, r6
 801a8d0:	d018      	beq.n	801a904 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a8d2:	8b01      	ldrh	r1, [r0, #24]
 801a8d4:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a8d8:	4291      	cmp	r1, r2
 801a8da:	d805      	bhi.n	801a8e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a8dc:	4b13      	ldr	r3, [pc, #76]	; (801a92c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a8de:	21d3      	movs	r1, #211	; 0xd3
 801a8e0:	4a13      	ldr	r2, [pc, #76]	; (801a930 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a8e2:	4814      	ldr	r0, [pc, #80]	; (801a934 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a8e4:	f00a ff82 	bl	80257ec <__assert_func>
 801a8e8:	8ac1      	ldrh	r1, [r0, #22]
 801a8ea:	4411      	add	r1, r2
 801a8ec:	3a01      	subs	r2, #1
 801a8ee:	f001 0101 	and.w	r1, r1, #1
 801a8f2:	b292      	uxth	r2, r2
 801a8f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a8f8:	8a49      	ldrh	r1, [r1, #18]
 801a8fa:	428d      	cmp	r5, r1
 801a8fc:	d0e7      	beq.n	801a8ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a8fe:	2000      	movs	r0, #0
 801a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a904:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a908:	2600      	movs	r6, #0
 801a90a:	f100 051a 	add.w	r5, r0, #26
 801a90e:	441f      	add	r7, r3
 801a910:	b2b1      	uxth	r1, r6
 801a912:	42b9      	cmp	r1, r7
 801a914:	da08      	bge.n	801a928 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a916:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a91a:	4628      	mov	r0, r5
 801a91c:	f7ff feda 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a920:	3601      	adds	r6, #1
 801a922:	4540      	cmp	r0, r8
 801a924:	d0f4      	beq.n	801a910 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a926:	e7ea      	b.n	801a8fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a928:	2001      	movs	r0, #1
 801a92a:	e7e9      	b.n	801a900 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a92c:	080293ed 	.word	0x080293ed
 801a930:	0802a6fe 	.word	0x0802a6fe
 801a934:	080293fb 	.word	0x080293fb

0801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a938:	b538      	push	{r3, r4, r5, lr}
 801a93a:	8ac3      	ldrh	r3, [r0, #22]
 801a93c:	428b      	cmp	r3, r1
 801a93e:	d205      	bcs.n	801a94c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a940:	4b08      	ldr	r3, [pc, #32]	; (801a964 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a942:	21d8      	movs	r1, #216	; 0xd8
 801a944:	4a08      	ldr	r2, [pc, #32]	; (801a968 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a946:	4809      	ldr	r0, [pc, #36]	; (801a96c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a948:	f00a ff50 	bl	80257ec <__assert_func>
 801a94c:	8a82      	ldrh	r2, [r0, #20]
 801a94e:	250a      	movs	r5, #10
 801a950:	1a5b      	subs	r3, r3, r1
 801a952:	440a      	add	r2, r1
 801a954:	82c3      	strh	r3, [r0, #22]
 801a956:	fbb2 f4f5 	udiv	r4, r2, r5
 801a95a:	fb05 2214 	mls	r2, r5, r4, r2
 801a95e:	8282      	strh	r2, [r0, #20]
 801a960:	bd38      	pop	{r3, r4, r5, pc}
 801a962:	bf00      	nop
 801a964:	080293e1 	.word	0x080293e1
 801a968:	0802a51a 	.word	0x0802a51a
 801a96c:	080293fb 	.word	0x080293fb

0801a970 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 801a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a974:	f100 061a 	add.w	r6, r0, #26
 801a978:	b087      	sub	sp, #28
 801a97a:	4607      	mov	r7, r0
 801a97c:	460d      	mov	r5, r1
 801a97e:	4630      	mov	r0, r6
 801a980:	2100      	movs	r1, #0
 801a982:	f7ff fea7 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a986:	4604      	mov	r4, r0
 801a988:	2800      	cmp	r0, #0
 801a98a:	d03d      	beq.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a98c:	2d01      	cmp	r5, #1
 801a98e:	d112      	bne.n	801a9b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a990:	287f      	cmp	r0, #127	; 0x7f
 801a992:	d810      	bhi.n	801a9b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a994:	283e      	cmp	r0, #62	; 0x3e
 801a996:	f000 8229 	beq.w	801adec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x47c>
 801a99a:	d807      	bhi.n	801a9ac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3c>
 801a99c:	2829      	cmp	r0, #41	; 0x29
 801a99e:	d037      	beq.n	801aa10 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa0>
 801a9a0:	283c      	cmp	r0, #60	; 0x3c
 801a9a2:	d030      	beq.n	801aa06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x96>
 801a9a4:	2828      	cmp	r0, #40	; 0x28
 801a9a6:	d106      	bne.n	801a9b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a9a8:	2429      	movs	r4, #41	; 0x29
 801a9aa:	e02d      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9ac:	285d      	cmp	r0, #93	; 0x5d
 801a9ae:	d033      	beq.n	801aa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa8>
 801a9b0:	d823      	bhi.n	801a9fa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a>
 801a9b2:	285b      	cmp	r0, #91	; 0x5b
 801a9b4:	d02e      	beq.n	801aa14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa4>
 801a9b6:	2101      	movs	r1, #1
 801a9b8:	4630      	mov	r0, r6
 801a9ba:	f7ff fe8b 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a9be:	2102      	movs	r1, #2
 801a9c0:	4605      	mov	r5, r0
 801a9c2:	4630      	mov	r0, r6
 801a9c4:	f7ff fe86 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a9c8:	2c20      	cmp	r4, #32
 801a9ca:	4680      	mov	r8, r0
 801a9cc:	9000      	str	r0, [sp, #0]
 801a9ce:	f040 820f 	bne.w	801adf0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x480>
 801a9d2:	f2a5 634c 	subw	r3, r5, #1612	; 0x64c
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	2b04      	cmp	r3, #4
 801a9da:	f240 6351 	movw	r3, #1617	; 0x651
 801a9de:	d81f      	bhi.n	801aa20 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb0>
 801a9e0:	4298      	cmp	r0, r3
 801a9e2:	d14c      	bne.n	801aa7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a9e4:	2102      	movs	r1, #2
 801a9e6:	4630      	mov	r0, r6
 801a9e8:	f7ff ffa6 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a9ec:	f6a5 14ee 	subw	r4, r5, #2542	; 0x9ee
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	b2a4      	uxth	r4, r4
 801a9f4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a9f8:	e006      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9fa:	287b      	cmp	r0, #123	; 0x7b
 801a9fc:	d00e      	beq.n	801aa1c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xac>
 801a9fe:	287d      	cmp	r0, #125	; 0x7d
 801aa00:	d1d9      	bne.n	801a9b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801aa02:	247b      	movs	r4, #123	; 0x7b
 801aa04:	e000      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa06:	243e      	movs	r4, #62	; 0x3e
 801aa08:	4620      	mov	r0, r4
 801aa0a:	b007      	add	sp, #28
 801aa0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa10:	2428      	movs	r4, #40	; 0x28
 801aa12:	e7f9      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa14:	245d      	movs	r4, #93	; 0x5d
 801aa16:	e7f7      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa18:	245b      	movs	r4, #91	; 0x5b
 801aa1a:	e7f5      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa1c:	247d      	movs	r4, #125	; 0x7d
 801aa1e:	e7f3      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa20:	429d      	cmp	r5, r3
 801aa22:	d12c      	bne.n	801aa7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801aa24:	f5b0 6fce 	cmp.w	r0, #1648	; 0x670
 801aa28:	d129      	bne.n	801aa7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801aa2a:	2102      	movs	r1, #2
 801aa2c:	4630      	mov	r0, r6
 801aa2e:	f7ff ff83 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa32:	2301      	movs	r3, #1
 801aa34:	f64f 4463 	movw	r4, #64611	; 0xfc63
 801aa38:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa3c:	e7e4      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa3e:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801aa42:	4598      	cmp	r8, r3
 801aa44:	d12d      	bne.n	801aaa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa46:	2102      	movs	r1, #2
 801aa48:	4630      	mov	r0, r6
 801aa4a:	f7ff ff75 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa4e:	2301      	movs	r3, #1
 801aa50:	f64f 54f0 	movw	r4, #65008	; 0xfdf0
 801aa54:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa58:	e7d6      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa5a:	f240 6342 	movw	r3, #1602	; 0x642
 801aa5e:	429c      	cmp	r4, r3
 801aa60:	d11f      	bne.n	801aaa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa62:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801aa66:	4598      	cmp	r8, r3
 801aa68:	d11b      	bne.n	801aaa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa6a:	2102      	movs	r1, #2
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	f7ff ff63 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa72:	2301      	movs	r3, #1
 801aa74:	f64f 54f1 	movw	r4, #65009	; 0xfdf1
 801aa78:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa7c:	e7c4      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa7e:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	2b07      	cmp	r3, #7
 801aa86:	d80c      	bhi.n	801aaa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa88:	f505 45f1 	add.w	r5, r5, #30848	; 0x7880
 801aa8c:	2101      	movs	r1, #1
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f7ff ff52 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa94:	356d      	adds	r5, #109	; 0x6d
 801aa96:	2301      	movs	r3, #1
 801aa98:	409d      	lsls	r5, r3
 801aa9a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa9e:	b2ac      	uxth	r4, r5
 801aaa0:	e7b2      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aaa2:	f46f 61c4 	mvn.w	r1, #1568	; 0x620
 801aaa6:	1863      	adds	r3, r4, r1
 801aaa8:	b29b      	uxth	r3, r3
 801aaaa:	2b19      	cmp	r3, #25
 801aaac:	d90b      	bls.n	801aac6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801aaae:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801aab2:	18a3      	adds	r3, r4, r2
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	2b09      	cmp	r3, #9
 801aab8:	d905      	bls.n	801aac6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801aaba:	f46f 63ce 	mvn.w	r3, #1648	; 0x670
 801aabe:	18e3      	adds	r3, r4, r3
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	2b62      	cmp	r3, #98	; 0x62
 801aac4:	d8a0      	bhi.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aac6:	2103      	movs	r1, #3
 801aac8:	4630      	mov	r0, r6
 801aaca:	f7ff fe03 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aace:	f2a4 6327 	subw	r3, r4, #1575	; 0x627
 801aad2:	4682      	mov	sl, r0
 801aad4:	4683      	mov	fp, r0
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	2b21      	cmp	r3, #33	; 0x21
 801aada:	d82c      	bhi.n	801ab36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aadc:	f2a8 6327 	subw	r3, r8, #1575	; 0x627
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	2b23      	cmp	r3, #35	; 0x23
 801aae4:	d827      	bhi.n	801ab36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aae6:	f2a0 632f 	subw	r3, r0, #1583	; 0x62f
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	2b18      	cmp	r3, #24
 801aaee:	d822      	bhi.n	801ab36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aaf0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 801aaf4:	4ab0      	ldr	r2, [pc, #704]	; (801adb8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>)
 801aaf6:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801aafa:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801aafe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ab02:	0089      	lsls	r1, r1, #2
 801ab04:	f5a1 4182 	sub.w	r1, r1, #16640	; 0x4100
 801ab08:	391a      	subs	r1, #26
 801ab0a:	4419      	add	r1, r3
 801ab0c:	2308      	movs	r3, #8
 801ab0e:	4401      	add	r1, r0
 801ab10:	4638      	mov	r0, r7
 801ab12:	b289      	uxth	r1, r1
 801ab14:	f7ff fd33 	bl	801a57e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801ab18:	4681      	mov	r9, r0
 801ab1a:	b160      	cbz	r0, 801ab36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801ab1c:	8842      	ldrh	r2, [r0, #2]
 801ab1e:	42aa      	cmp	r2, r5
 801ab20:	d109      	bne.n	801ab36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801ab22:	2103      	movs	r1, #3
 801ab24:	4630      	mov	r0, r6
 801ab26:	f7ff ff07 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 801ab30:	f8b9 4000 	ldrh.w	r4, [r9]
 801ab34:	e768      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ab36:	f5a4 63c5 	sub.w	r3, r4, #1576	; 0x628
 801ab3a:	b29b      	uxth	r3, r3
 801ab3c:	2b22      	cmp	r3, #34	; 0x22
 801ab3e:	d823      	bhi.n	801ab88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab40:	f2a5 632c 	subw	r3, r5, #1580	; 0x62c
 801ab44:	b29b      	uxth	r3, r3
 801ab46:	2b24      	cmp	r3, #36	; 0x24
 801ab48:	d81e      	bhi.n	801ab88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab4a:	f2a8 632c 	subw	r3, r8, #1580	; 0x62c
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	2b25      	cmp	r3, #37	; 0x25
 801ab52:	d819      	bhi.n	801ab88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab54:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801ab58:	4a98      	ldr	r2, [pc, #608]	; (801adbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x44c>)
 801ab5a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 801ab5e:	4638      	mov	r0, r7
 801ab60:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ab64:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801ab68:	ebc4 1181 	rsb	r1, r4, r1, lsl #6
 801ab6c:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 801ab70:	f501 517e 	add.w	r1, r1, #16256	; 0x3f80
 801ab74:	311c      	adds	r1, #28
 801ab76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801ab7a:	2362      	movs	r3, #98	; 0x62
 801ab7c:	b289      	uxth	r1, r1
 801ab7e:	f7ff fcfe 	bl	801a57e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801ab82:	4681      	mov	r9, r0
 801ab84:	2800      	cmp	r0, #0
 801ab86:	d179      	bne.n	801ac7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 801ab88:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	2b0a      	cmp	r3, #10
 801ab90:	f240 8147 	bls.w	801ae22 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b2>
 801ab94:	f240 6374 	movw	r3, #1652	; 0x674
 801ab98:	429d      	cmp	r5, r3
 801ab9a:	bf0b      	itete	eq
 801ab9c:	4643      	moveq	r3, r8
 801ab9e:	462b      	movne	r3, r5
 801aba0:	46d3      	moveq	fp, sl
 801aba2:	46c3      	movne	fp, r8
 801aba4:	9300      	str	r3, [sp, #0]
 801aba6:	bf0c      	ite	eq
 801aba8:	462b      	moveq	r3, r5
 801abaa:	2300      	movne	r3, #0
 801abac:	9302      	str	r3, [sp, #8]
 801abae:	f2a4 6326 	subw	r3, r4, #1574	; 0x626
 801abb2:	b29b      	uxth	r3, r3
 801abb4:	2b24      	cmp	r3, #36	; 0x24
 801abb6:	d903      	bls.n	801abc0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x250>
 801abb8:	f04f 0800 	mov.w	r8, #0
 801abbc:	46c1      	mov	r9, r8
 801abbe:	e022      	b.n	801ac06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801abc0:	9b00      	ldr	r3, [sp, #0]
 801abc2:	f2a3 6322 	subw	r3, r3, #1570	; 0x622
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	2bb3      	cmp	r3, #179	; 0xb3
 801abca:	d8f5      	bhi.n	801abb8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801abcc:	f240 6344 	movw	r3, #1604	; 0x644
 801abd0:	9a00      	ldr	r2, [sp, #0]
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d103      	bne.n	801abde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x26e>
 801abd6:	f240 6327 	movw	r3, #1575	; 0x627
 801abda:	459b      	cmp	fp, r3
 801abdc:	d0ec      	beq.n	801abb8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801abde:	f89d 1000 	ldrb.w	r1, [sp]
 801abe2:	23ab      	movs	r3, #171	; 0xab
 801abe4:	4a76      	ldr	r2, [pc, #472]	; (801adc0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x450>)
 801abe6:	4638      	mov	r0, r7
 801abe8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801abec:	b289      	uxth	r1, r1
 801abee:	f7ff fcc6 	bl	801a57e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801abf2:	f1b0 0900 	subs.w	r9, r0, #0
 801abf6:	9b00      	ldr	r3, [sp, #0]
 801abf8:	bf1a      	itte	ne
 801abfa:	f04f 0801 	movne.w	r8, #1
 801abfe:	465b      	movne	r3, fp
 801ac00:	f04f 0800 	moveq.w	r8, #0
 801ac04:	9300      	str	r3, [sp, #0]
 801ac06:	9b00      	ldr	r3, [sp, #0]
 801ac08:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 801ac0c:	f2a3 6222 	subw	r2, r3, #1570	; 0x622
 801ac10:	b292      	uxth	r2, r2
 801ac12:	2ab1      	cmp	r2, #177	; 0xb1
 801ac14:	bf94      	ite	ls
 801ac16:	2300      	movls	r3, #0
 801ac18:	2301      	movhi	r3, #1
 801ac1a:	2ab2      	cmp	r2, #178	; 0xb2
 801ac1c:	9301      	str	r3, [sp, #4]
 801ac1e:	f081 0301 	eor.w	r3, r1, #1
 801ac22:	bf34      	ite	cc
 801ac24:	f04f 0a02 	movcc.w	sl, #2
 801ac28:	f04f 0a00 	movcs.w	sl, #0
 801ac2c:	9304      	str	r3, [sp, #16]
 801ac2e:	449a      	add	sl, r3
 801ac30:	f1b9 0f00 	cmp.w	r9, #0
 801ac34:	f000 80a9 	beq.w	801ad8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41a>
 801ac38:	f839 201a 	ldrh.w	r2, [r9, sl, lsl #1]
 801ac3c:	2a00      	cmp	r2, #0
 801ac3e:	f040 8086 	bne.w	801ad4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ac42:	f1b8 0f00 	cmp.w	r8, #0
 801ac46:	f000 8082 	beq.w	801ad4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ac4a:	4641      	mov	r1, r8
 801ac4c:	4630      	mov	r0, r6
 801ac4e:	f7ff fd41 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac52:	f108 0b01 	add.w	fp, r8, #1
 801ac56:	f240 6274 	movw	r2, #1652	; 0x674
 801ac5a:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801ac5e:	b289      	uxth	r1, r1
 801ac60:	290a      	cmp	r1, #10
 801ac62:	d901      	bls.n	801ac68 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f8>
 801ac64:	4290      	cmp	r0, r2
 801ac66:	d110      	bne.n	801ac8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x31a>
 801ac68:	fa1f f18b 	uxth.w	r1, fp
 801ac6c:	4630      	mov	r0, r6
 801ac6e:	9203      	str	r2, [sp, #12]
 801ac70:	f10b 0b01 	add.w	fp, fp, #1
 801ac74:	f7ff fd2e 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac78:	9a03      	ldr	r2, [sp, #12]
 801ac7a:	e7ee      	b.n	801ac5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2ea>
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	f8cd a000 	str.w	sl, [sp]
 801ac82:	f04f 0802 	mov.w	r8, #2
 801ac86:	9302      	str	r3, [sp, #8]
 801ac88:	e7bd      	b.n	801ac06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801ac8a:	4601      	mov	r1, r0
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	f7ff fc8f 	bl	801a5b0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ac92:	9003      	str	r0, [sp, #12]
 801ac94:	fa1f f18b 	uxth.w	r1, fp
 801ac98:	4630      	mov	r0, r6
 801ac9a:	f7ff fd1b 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac9e:	f10b 0b01 	add.w	fp, fp, #1
 801aca2:	f240 6274 	movw	r2, #1652	; 0x674
 801aca6:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801acaa:	b289      	uxth	r1, r1
 801acac:	290a      	cmp	r1, #10
 801acae:	d901      	bls.n	801acb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x344>
 801acb0:	4290      	cmp	r0, r2
 801acb2:	d109      	bne.n	801acc8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>
 801acb4:	fa1f f18b 	uxth.w	r1, fp
 801acb8:	4630      	mov	r0, r6
 801acba:	9205      	str	r2, [sp, #20]
 801acbc:	f10b 0b01 	add.w	fp, fp, #1
 801acc0:	f7ff fd08 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801acc4:	9a05      	ldr	r2, [sp, #20]
 801acc6:	e7ee      	b.n	801aca6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x336>
 801acc8:	4601      	mov	r1, r0
 801acca:	4638      	mov	r0, r7
 801accc:	f7ff fc70 	bl	801a5b0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801acd0:	9b03      	ldr	r3, [sp, #12]
 801acd2:	b133      	cbz	r3, 801ace2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801acd4:	88da      	ldrh	r2, [r3, #6]
 801acd6:	b122      	cbz	r2, 801ace2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801acd8:	b118      	cbz	r0, 801ace2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801acda:	8842      	ldrh	r2, [r0, #2]
 801acdc:	b9ea      	cbnz	r2, 801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acde:	88c2      	ldrh	r2, [r0, #6]
 801ace0:	b9da      	cbnz	r2, 801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801ace2:	f1ba 0f02 	cmp.w	sl, #2
 801ace6:	d109      	bne.n	801acfc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x38c>
 801ace8:	f8b9 2000 	ldrh.w	r2, [r9]
 801acec:	b1aa      	cbz	r2, 801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acee:	f240 6244 	movw	r2, #1604	; 0x644
 801acf2:	4294      	cmp	r4, r2
 801acf4:	d111      	bne.n	801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acf6:	2301      	movs	r3, #1
 801acf8:	9301      	str	r3, [sp, #4]
 801acfa:	e069      	b.n	801add0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801acfc:	f1ba 0f03 	cmp.w	sl, #3
 801ad00:	d10b      	bne.n	801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801ad02:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801ad06:	b142      	cbz	r2, 801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801ad08:	f240 6244 	movw	r2, #1604	; 0x644
 801ad0c:	4294      	cmp	r4, r2
 801ad0e:	d104      	bne.n	801ad1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801ad10:	f240 6247 	movw	r2, #1607	; 0x647
 801ad14:	9b00      	ldr	r3, [sp, #0]
 801ad16:	4293      	cmp	r3, r2
 801ad18:	d146      	bne.n	801ada8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x438>
 801ad1a:	f2a5 6522 	subw	r5, r5, #1570	; 0x622
 801ad1e:	4621      	mov	r1, r4
 801ad20:	4638      	mov	r0, r7
 801ad22:	b2ad      	uxth	r5, r5
 801ad24:	f7ff fc44 	bl	801a5b0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ad28:	2db1      	cmp	r5, #177	; 0xb1
 801ad2a:	bf8c      	ite	hi
 801ad2c:	2200      	movhi	r2, #0
 801ad2e:	2202      	movls	r2, #2
 801ad30:	b168      	cbz	r0, 801ad4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad32:	9b04      	ldr	r3, [sp, #16]
 801ad34:	441a      	add	r2, r3
 801ad36:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
 801ad3a:	b141      	cbz	r1, 801ad4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad3c:	2db1      	cmp	r5, #177	; 0xb1
 801ad3e:	4692      	mov	sl, r2
 801ad40:	4681      	mov	r9, r0
 801ad42:	f04f 0800 	mov.w	r8, #0
 801ad46:	bf94      	ite	ls
 801ad48:	2300      	movls	r3, #0
 801ad4a:	2301      	movhi	r3, #1
 801ad4c:	9301      	str	r3, [sp, #4]
 801ad4e:	f1ba 0f02 	cmp.w	sl, #2
 801ad52:	d122      	bne.n	801ad9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x42a>
 801ad54:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801ad58:	2a00      	cmp	r2, #0
 801ad5a:	d0cc      	beq.n	801acf6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x386>
 801ad5c:	f839 301a 	ldrh.w	r3, [r9, sl, lsl #1]
 801ad60:	eb09 054a 	add.w	r5, r9, sl, lsl #1
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	f43f ae4f 	beq.w	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad6a:	9b01      	ldr	r3, [sp, #4]
 801ad6c:	4641      	mov	r1, r8
 801ad6e:	4630      	mov	r0, r6
 801ad70:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ad74:	f7ff fde0 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ad78:	9b02      	ldr	r3, [sp, #8]
 801ad7a:	b123      	cbz	r3, 801ad86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x416>
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	2101      	movs	r1, #1
 801ad80:	4630      	mov	r0, r6
 801ad82:	f7ff fc8d 	bl	801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801ad86:	882c      	ldrh	r4, [r5, #0]
 801ad88:	e63e      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad8a:	4621      	mov	r1, r4
 801ad8c:	4638      	mov	r0, r7
 801ad8e:	f7ff fc0f 	bl	801a5b0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ad92:	4681      	mov	r9, r0
 801ad94:	2800      	cmp	r0, #0
 801ad96:	d1da      	bne.n	801ad4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad98:	e636      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad9a:	f1ba 0f03 	cmp.w	sl, #3
 801ad9e:	d111      	bne.n	801adc4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x454>
 801ada0:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801ada4:	2a00      	cmp	r2, #0
 801ada6:	d1d9      	bne.n	801ad5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ada8:	2301      	movs	r3, #1
 801adaa:	9301      	str	r3, [sp, #4]
 801adac:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801adb0:	b172      	cbz	r2, 801add0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801adb2:	f04f 0a01 	mov.w	sl, #1
 801adb6:	e7d1      	b.n	801ad5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801adb8:	0802a04c 	.word	0x0802a04c
 801adbc:	08029c78 	.word	0x08029c78
 801adc0:	080295ca 	.word	0x080295ca
 801adc4:	f1ba 0f01 	cmp.w	sl, #1
 801adc8:	d0f0      	beq.n	801adac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x43c>
 801adca:	f1ba 0f00 	cmp.w	sl, #0
 801adce:	d1c5      	bne.n	801ad5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801add0:	f8b9 2000 	ldrh.w	r2, [r9]
 801add4:	b93a      	cbnz	r2, 801ade6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801add6:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 801adda:	f11a 0a00 	adds.w	sl, sl, #0
 801adde:	bf18      	it	ne
 801ade0:	f04f 0a01 	movne.w	sl, #1
 801ade4:	e7ba      	b.n	801ad5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ade6:	f04f 0a00 	mov.w	sl, #0
 801adea:	e7b7      	b.n	801ad5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801adec:	243c      	movs	r4, #60	; 0x3c
 801adee:	e60b      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801adf0:	f240 6344 	movw	r3, #1604	; 0x644
 801adf4:	429d      	cmp	r5, r3
 801adf6:	f47f ae54 	bne.w	801aaa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801adfa:	f240 6335 	movw	r3, #1589	; 0x635
 801adfe:	429c      	cmp	r4, r3
 801ae00:	f47f ae2b 	bne.w	801aa5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xea>
 801ae04:	f240 6349 	movw	r3, #1609	; 0x649
 801ae08:	4598      	cmp	r8, r3
 801ae0a:	f47f ae18 	bne.w	801aa3e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xce>
 801ae0e:	2102      	movs	r1, #2
 801ae10:	4630      	mov	r0, r6
 801ae12:	f7ff fd91 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ae16:	2301      	movs	r3, #1
 801ae18:	f64f 54f9 	movw	r4, #65017	; 0xfdf9
 801ae1c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ae20:	e5f2      	b.n	801aa08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ae22:	9502      	str	r5, [sp, #8]
 801ae24:	e6c3      	b.n	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x23e>
 801ae26:	bf00      	nop

0801ae28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801ae28:	b538      	push	{r3, r4, r5, lr}
 801ae2a:	8ac3      	ldrh	r3, [r0, #22]
 801ae2c:	2b09      	cmp	r3, #9
 801ae2e:	d905      	bls.n	801ae3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801ae30:	4b08      	ldr	r3, [pc, #32]	; (801ae54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801ae32:	21f7      	movs	r1, #247	; 0xf7
 801ae34:	4a08      	ldr	r2, [pc, #32]	; (801ae58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801ae36:	4809      	ldr	r0, [pc, #36]	; (801ae5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801ae38:	f00a fcd8 	bl	80257ec <__assert_func>
 801ae3c:	8a82      	ldrh	r2, [r0, #20]
 801ae3e:	250a      	movs	r5, #10
 801ae40:	441a      	add	r2, r3
 801ae42:	3301      	adds	r3, #1
 801ae44:	fbb2 f4f5 	udiv	r4, r2, r5
 801ae48:	fb05 2214 	mls	r2, r5, r4, r2
 801ae4c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801ae50:	82c3      	strh	r3, [r0, #22]
 801ae52:	bd38      	pop	{r3, r4, r5, pc}
 801ae54:	080293d5 	.word	0x080293d5
 801ae58:	0802a46b 	.word	0x0802a46b
 801ae5c:	080293fb 	.word	0x080293fb

0801ae60 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ae60:	b538      	push	{r3, r4, r5, lr}
 801ae62:	4604      	mov	r4, r0
 801ae64:	f100 051a 	add.w	r5, r0, #26
 801ae68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae6a:	2b0a      	cmp	r3, #10
 801ae6c:	d01c      	beq.n	801aea8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801ae6e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801ae70:	b962      	cbnz	r2, 801ae8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801ae72:	f104 051a 	add.w	r5, r4, #26
 801ae76:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae78:	2b0a      	cmp	r3, #10
 801ae7a:	d015      	beq.n	801aea8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	f7ff fb52 	bl	801a526 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ae82:	4601      	mov	r1, r0
 801ae84:	4628      	mov	r0, r5
 801ae86:	f7ff ffcf 	bl	801ae28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801ae8a:	e7f4      	b.n	801ae76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801ae8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ae8e:	3a01      	subs	r2, #1
 801ae90:	4628      	mov	r0, r5
 801ae92:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801ae96:	3301      	adds	r3, #1
 801ae98:	f003 0301 	and.w	r3, r3, #1
 801ae9c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801ae9e:	8722      	strh	r2, [r4, #56]	; 0x38
 801aea0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801aea2:	f7ff ffc1 	bl	801ae28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801aea6:	e7df      	b.n	801ae68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801aea8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801aeac <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801aeac:	2300      	movs	r3, #0
 801aeae:	b510      	push	{r4, lr}
 801aeb0:	6043      	str	r3, [r0, #4]
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	60c3      	str	r3, [r0, #12]
 801aeb6:	7403      	strb	r3, [r0, #16]
 801aeb8:	8603      	strh	r3, [r0, #48]	; 0x30
 801aeba:	8303      	strh	r3, [r0, #24]
 801aebc:	8703      	strh	r3, [r0, #56]	; 0x38
 801aebe:	f7ff ffcf 	bl	801ae60 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aec2:	4a0a      	ldr	r2, [pc, #40]	; (801aeec <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801aec4:	6813      	ldr	r3, [r2, #0]
 801aec6:	4611      	mov	r1, r2
 801aec8:	b913      	cbnz	r3, 801aed0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801aeca:	6852      	ldr	r2, [r2, #4]
 801aecc:	07d0      	lsls	r0, r2, #31
 801aece:	d50b      	bpl.n	801aee8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801aed0:	6849      	ldr	r1, [r1, #4]
 801aed2:	104a      	asrs	r2, r1, #1
 801aed4:	07c9      	lsls	r1, r1, #31
 801aed6:	eb04 0002 	add.w	r0, r4, r2
 801aeda:	bf48      	it	mi
 801aedc:	58a2      	ldrmi	r2, [r4, r2]
 801aede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aee2:	bf48      	it	mi
 801aee4:	58d3      	ldrmi	r3, [r2, r3]
 801aee6:	4718      	bx	r3
 801aee8:	bd10      	pop	{r4, pc}
 801aeea:	bf00      	nop
 801aeec:	20000038 	.word	0x20000038

0801aef0 <_ZN8touchgfx12TextProviderC1Ev>:
 801aef0:	2300      	movs	r3, #0
 801aef2:	2201      	movs	r2, #1
 801aef4:	b510      	push	{r4, lr}
 801aef6:	4604      	mov	r4, r0
 801aef8:	60c3      	str	r3, [r0, #12]
 801aefa:	7403      	strb	r3, [r0, #16]
 801aefc:	82c3      	strh	r3, [r0, #22]
 801aefe:	8303      	strh	r3, [r0, #24]
 801af00:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801af02:	8603      	strh	r3, [r0, #48]	; 0x30
 801af04:	86c3      	strh	r3, [r0, #54]	; 0x36
 801af06:	8703      	strh	r3, [r0, #56]	; 0x38
 801af08:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af0a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801af0e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801af12:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801af16:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801af1a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801af1e:	e9c0 3300 	strd	r3, r3, [r0]
 801af22:	f7ff ffc3 	bl	801aeac <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801af26:	4620      	mov	r0, r4
 801af28:	bd10      	pop	{r4, pc}

0801af2a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801af2a:	b410      	push	{r4}
 801af2c:	6082      	str	r2, [r0, #8]
 801af2e:	6001      	str	r1, [r0, #0]
 801af30:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af36:	f7ff bfb9 	b.w	801aeac <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801af3c:	b508      	push	{r3, lr}
 801af3e:	88c2      	ldrh	r2, [r0, #6]
 801af40:	440a      	add	r2, r1
 801af42:	2a02      	cmp	r2, #2
 801af44:	dd05      	ble.n	801af52 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801af46:	4b06      	ldr	r3, [pc, #24]	; (801af60 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801af48:	21ec      	movs	r1, #236	; 0xec
 801af4a:	4a06      	ldr	r2, [pc, #24]	; (801af64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801af4c:	4806      	ldr	r0, [pc, #24]	; (801af68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801af4e:	f00a fc4d 	bl	80257ec <__assert_func>
 801af52:	8883      	ldrh	r3, [r0, #4]
 801af54:	80c2      	strh	r2, [r0, #6]
 801af56:	1a59      	subs	r1, r3, r1
 801af58:	f001 0101 	and.w	r1, r1, #1
 801af5c:	8081      	strh	r1, [r0, #4]
 801af5e:	bd08      	pop	{r3, pc}
 801af60:	08029427 	.word	0x08029427
 801af64:	0802a677 	.word	0x0802a677
 801af68:	080293fb 	.word	0x080293fb

0801af6c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801af6c:	b508      	push	{r3, lr}
 801af6e:	88c3      	ldrh	r3, [r0, #6]
 801af70:	428b      	cmp	r3, r1
 801af72:	d805      	bhi.n	801af80 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801af74:	4b06      	ldr	r3, [pc, #24]	; (801af90 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801af76:	21fd      	movs	r1, #253	; 0xfd
 801af78:	4a06      	ldr	r2, [pc, #24]	; (801af94 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801af7a:	4807      	ldr	r0, [pc, #28]	; (801af98 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801af7c:	f00a fc36 	bl	80257ec <__assert_func>
 801af80:	8883      	ldrh	r3, [r0, #4]
 801af82:	4419      	add	r1, r3
 801af84:	f001 0101 	and.w	r1, r1, #1
 801af88:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801af8c:	bd08      	pop	{r3, pc}
 801af8e:	bf00      	nop
 801af90:	080293ed 	.word	0x080293ed
 801af94:	0802a7cf 	.word	0x0802a7cf
 801af98:	080293fb 	.word	0x080293fb

0801af9c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af9c:	b570      	push	{r4, r5, r6, lr}
 801af9e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801afa0:	4604      	mov	r4, r0
 801afa2:	b92a      	cbnz	r2, 801afb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801afa4:	4b12      	ldr	r3, [pc, #72]	; (801aff0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801afa6:	21de      	movs	r1, #222	; 0xde
 801afa8:	4a12      	ldr	r2, [pc, #72]	; (801aff4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801afaa:	4813      	ldr	r0, [pc, #76]	; (801aff8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801afac:	f00a fc1e 	bl	80257ec <__assert_func>
 801afb0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801afb2:	260a      	movs	r6, #10
 801afb4:	3a01      	subs	r2, #1
 801afb6:	3412      	adds	r4, #18
 801afb8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801afbc:	3301      	adds	r3, #1
 801afbe:	8b4d      	ldrh	r5, [r1, #26]
 801afc0:	8602      	strh	r2, [r0, #48]	; 0x30
 801afc2:	fbb3 f1f6 	udiv	r1, r3, r6
 801afc6:	fb06 3311 	mls	r3, r6, r1, r3
 801afca:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801afcc:	f7ff ff48 	bl	801ae60 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801afd0:	88e3      	ldrh	r3, [r4, #6]
 801afd2:	2101      	movs	r1, #1
 801afd4:	2b02      	cmp	r3, #2
 801afd6:	bf04      	itt	eq
 801afd8:	2301      	moveq	r3, #1
 801afda:	80e3      	strheq	r3, [r4, #6]
 801afdc:	4620      	mov	r0, r4
 801afde:	f7ff ffad 	bl	801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801afe2:	4620      	mov	r0, r4
 801afe4:	462a      	mov	r2, r5
 801afe6:	2100      	movs	r1, #0
 801afe8:	f7ff ffc0 	bl	801af6c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801afec:	4628      	mov	r0, r5
 801afee:	bd70      	pop	{r4, r5, r6, pc}
 801aff0:	080293cc 	.word	0x080293cc
 801aff4:	0802a3c0 	.word	0x0802a3c0
 801aff8:	080293fb 	.word	0x080293fb

0801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801affc:	428a      	cmp	r2, r1
 801affe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b002:	4604      	mov	r4, r0
 801b004:	460e      	mov	r6, r1
 801b006:	4615      	mov	r5, r2
 801b008:	469a      	mov	sl, r3
 801b00a:	d92b      	bls.n	801b064 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b00c:	1a57      	subs	r7, r2, r1
 801b00e:	f04f 0800 	mov.w	r8, #0
 801b012:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801b016:	f04f 0b0a 	mov.w	fp, #10
 801b01a:	b2bf      	uxth	r7, r7
 801b01c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b01e:	b92b      	cbnz	r3, 801b02c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801b020:	4b24      	ldr	r3, [pc, #144]	; (801b0b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801b022:	21e6      	movs	r1, #230	; 0xe6
 801b024:	4a24      	ldr	r2, [pc, #144]	; (801b0b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801b026:	4825      	ldr	r0, [pc, #148]	; (801b0bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801b028:	f00a fbe0 	bl	80257ec <__assert_func>
 801b02c:	3b01      	subs	r3, #1
 801b02e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b030:	2101      	movs	r1, #1
 801b032:	4648      	mov	r0, r9
 801b034:	b29b      	uxth	r3, r3
 801b036:	f108 0801 	add.w	r8, r8, #1
 801b03a:	441a      	add	r2, r3
 801b03c:	8623      	strh	r3, [r4, #48]	; 0x30
 801b03e:	fbb2 f3fb 	udiv	r3, r2, fp
 801b042:	fb0b 2313 	mls	r3, fp, r3, r2
 801b046:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b04a:	8b5a      	ldrh	r2, [r3, #26]
 801b04c:	9201      	str	r2, [sp, #4]
 801b04e:	f7ff ff75 	bl	801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b052:	9a01      	ldr	r2, [sp, #4]
 801b054:	2100      	movs	r1, #0
 801b056:	4648      	mov	r0, r9
 801b058:	f7ff ff88 	bl	801af6c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b05c:	fa1f f388 	uxth.w	r3, r8
 801b060:	429f      	cmp	r7, r3
 801b062:	d8db      	bhi.n	801b01c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801b064:	f104 071a 	add.w	r7, r4, #26
 801b068:	4631      	mov	r1, r6
 801b06a:	260a      	movs	r6, #10
 801b06c:	4638      	mov	r0, r7
 801b06e:	f7ff fc63 	bl	801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801b072:	b1c5      	cbz	r5, 801b0a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b074:	3d01      	subs	r5, #1
 801b076:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b078:	b2ad      	uxth	r5, r5
 801b07a:	2b09      	cmp	r3, #9
 801b07c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801b080:	d903      	bls.n	801b08a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801b082:	4b0f      	ldr	r3, [pc, #60]	; (801b0c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801b084:	21ec      	movs	r1, #236	; 0xec
 801b086:	4a0f      	ldr	r2, [pc, #60]	; (801b0c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801b088:	e7cd      	b.n	801b026 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801b08a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801b08c:	3301      	adds	r3, #1
 801b08e:	3109      	adds	r1, #9
 801b090:	8623      	strh	r3, [r4, #48]	; 0x30
 801b092:	fbb1 f0f6 	udiv	r0, r1, r6
 801b096:	fb06 1110 	mls	r1, r6, r0, r1
 801b09a:	4638      	mov	r0, r7
 801b09c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801b09e:	2100      	movs	r1, #0
 801b0a0:	f7ff fafe 	bl	801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b0a4:	e7e5      	b.n	801b072 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	b003      	add	sp, #12
 801b0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ae:	f7ff bed7 	b.w	801ae60 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b0b2:	bf00      	nop
 801b0b4:	080293cc 	.word	0x080293cc
 801b0b8:	0802a244 	.word	0x0802a244
 801b0bc:	080293fb 	.word	0x080293fb
 801b0c0:	08029427 	.word	0x08029427
 801b0c4:	0802a1bc 	.word	0x0802a1bc

0801b0c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0cc:	4605      	mov	r5, r0
 801b0ce:	4616      	mov	r6, r2
 801b0d0:	1c8c      	adds	r4, r1, #2
 801b0d2:	8809      	ldrh	r1, [r1, #0]
 801b0d4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0d8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0dc:	42b3      	cmp	r3, r6
 801b0de:	d124      	bne.n	801b12a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0e0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0e4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0e8:	f001 070f 	and.w	r7, r1, #15
 801b0ec:	4652      	mov	r2, sl
 801b0ee:	f8cd 8000 	str.w	r8, [sp]
 801b0f2:	464b      	mov	r3, r9
 801b0f4:	4621      	mov	r1, r4
 801b0f6:	4628      	mov	r0, r5
 801b0f8:	f7ff fbe2 	bl	801a8c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b0fc:	4683      	mov	fp, r0
 801b0fe:	b168      	cbz	r0, 801b11c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b100:	eb0a 0109 	add.w	r1, sl, r9
 801b104:	463a      	mov	r2, r7
 801b106:	4628      	mov	r0, r5
 801b108:	4441      	add	r1, r8
 801b10a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b10e:	4649      	mov	r1, r9
 801b110:	f7ff ff74 	bl	801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b114:	4658      	mov	r0, fp
 801b116:	b003      	add	sp, #12
 801b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b11c:	eb07 010a 	add.w	r1, r7, sl
 801b120:	4449      	add	r1, r9
 801b122:	4441      	add	r1, r8
 801b124:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b128:	e7d2      	b.n	801b0d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b12a:	f04f 0b00 	mov.w	fp, #0
 801b12e:	e7f1      	b.n	801b114 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b130 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b134:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b136:	4604      	mov	r4, r0
 801b138:	260b      	movs	r6, #11
 801b13a:	f100 091a 	add.w	r9, r0, #26
 801b13e:	886f      	ldrh	r7, [r5, #2]
 801b140:	087f      	lsrs	r7, r7, #1
 801b142:	3e01      	subs	r6, #1
 801b144:	d013      	beq.n	801b16e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b146:	2100      	movs	r1, #0
 801b148:	4648      	mov	r0, r9
 801b14a:	f7ff fac3 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b14e:	462a      	mov	r2, r5
 801b150:	4680      	mov	r8, r0
 801b152:	4603      	mov	r3, r0
 801b154:	4639      	mov	r1, r7
 801b156:	4620      	mov	r0, r4
 801b158:	f7ff fa83 	bl	801a662 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b15c:	b138      	cbz	r0, 801b16e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b15e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b162:	4642      	mov	r2, r8
 801b164:	4620      	mov	r0, r4
 801b166:	f7ff ffaf 	bl	801b0c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b16a:	2800      	cmp	r0, #0
 801b16c:	d1e9      	bne.n	801b142 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801b174:	4b1e      	ldr	r3, [pc, #120]	; (801b1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801b176:	b570      	push	{r4, r5, r6, lr}
 801b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b17c:	4604      	mov	r4, r0
 801b17e:	f003 0501 	and.w	r5, r3, #1
 801b182:	b902      	cbnz	r2, 801b186 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801b184:	b165      	cbz	r5, 801b1a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801b186:	105b      	asrs	r3, r3, #1
 801b188:	f104 061a 	add.w	r6, r4, #26
 801b18c:	18e0      	adds	r0, r4, r3
 801b18e:	b10d      	cbz	r5, 801b194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801b190:	58e3      	ldr	r3, [r4, r3]
 801b192:	589a      	ldr	r2, [r3, r2]
 801b194:	4790      	blx	r2
 801b196:	2100      	movs	r1, #0
 801b198:	4602      	mov	r2, r0
 801b19a:	4630      	mov	r0, r6
 801b19c:	f7ff fa80 	bl	801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b1a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b1a2:	b303      	cbz	r3, 801b1e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b1a4:	f104 051a 	add.w	r5, r4, #26
 801b1a8:	2100      	movs	r1, #0
 801b1aa:	4628      	mov	r0, r5
 801b1ac:	f7ff fa92 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b1b0:	b1c8      	cbz	r0, 801b1e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b1b2:	4620      	mov	r0, r4
 801b1b4:	f7ff ffbc 	bl	801b130 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801b1b8:	2101      	movs	r1, #1
 801b1ba:	4628      	mov	r0, r5
 801b1bc:	f7ff fa8a 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b1c0:	f640 133f 	movw	r3, #2367	; 0x93f
 801b1c4:	4606      	mov	r6, r0
 801b1c6:	4298      	cmp	r0, r3
 801b1c8:	d10d      	bne.n	801b1e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b1ca:	2100      	movs	r1, #0
 801b1cc:	4628      	mov	r0, r5
 801b1ce:	f7ff fa81 	bl	801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b1d2:	2101      	movs	r1, #1
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	4628      	mov	r0, r5
 801b1d8:	f7ff fa62 	bl	801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b1dc:	4632      	mov	r2, r6
 801b1de:	2100      	movs	r1, #0
 801b1e0:	4628      	mov	r0, r5
 801b1e2:	f7ff fa5d 	bl	801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1ec:	f7ff bed6 	b.w	801af9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b1f0:	20000040 	.word	0x20000040

0801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1f6:	4617      	mov	r7, r2
 801b1f8:	461e      	mov	r6, r3
 801b1fa:	4605      	mov	r5, r0
 801b1fc:	f7ff ffba 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b200:	683b      	ldr	r3, [r7, #0]
 801b202:	4604      	mov	r4, r0
 801b204:	4601      	mov	r1, r0
 801b206:	4638      	mov	r0, r7
 801b208:	68db      	ldr	r3, [r3, #12]
 801b20a:	4798      	blx	r3
 801b20c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b210:	4602      	mov	r2, r0
 801b212:	6030      	str	r0, [r6, #0]
 801b214:	b29b      	uxth	r3, r3
 801b216:	2b7f      	cmp	r3, #127	; 0x7f
 801b218:	d813      	bhi.n	801b242 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801b21a:	4639      	mov	r1, r7
 801b21c:	4628      	mov	r0, r5
 801b21e:	f7ff fa73 	bl	801a708 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b222:	6030      	str	r0, [r6, #0]
 801b224:	6833      	ldr	r3, [r6, #0]
 801b226:	b143      	cbz	r3, 801b23a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b228:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801b22c:	7a9b      	ldrb	r3, [r3, #10]
 801b22e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b232:	4313      	orrs	r3, r2
 801b234:	bf0c      	ite	eq
 801b236:	2301      	moveq	r3, #1
 801b238:	2300      	movne	r3, #0
 801b23a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b23e:	4620      	mov	r0, r4
 801b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b242:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b246:	2b00      	cmp	r3, #0
 801b248:	d0ec      	beq.n	801b224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b24a:	f640 1302 	movw	r3, #2306	; 0x902
 801b24e:	429c      	cmp	r4, r3
 801b250:	d1e8      	bne.n	801b224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b252:	4601      	mov	r1, r0
 801b254:	4628      	mov	r0, r5
 801b256:	f7ff f9d5 	bl	801a604 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b25a:	e7e2      	b.n	801b222 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b260:	4617      	mov	r7, r2
 801b262:	461e      	mov	r6, r3
 801b264:	4605      	mov	r5, r0
 801b266:	f7ff ff85 	bl	801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b26a:	683b      	ldr	r3, [r7, #0]
 801b26c:	4604      	mov	r4, r0
 801b26e:	4601      	mov	r1, r0
 801b270:	4638      	mov	r0, r7
 801b272:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801b276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b27a:	47c0      	blx	r8
 801b27c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b280:	4602      	mov	r2, r0
 801b282:	6030      	str	r0, [r6, #0]
 801b284:	b29b      	uxth	r3, r3
 801b286:	2b7f      	cmp	r3, #127	; 0x7f
 801b288:	d814      	bhi.n	801b2b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801b28a:	4639      	mov	r1, r7
 801b28c:	4628      	mov	r0, r5
 801b28e:	f7ff fa3b 	bl	801a708 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b292:	6030      	str	r0, [r6, #0]
 801b294:	6833      	ldr	r3, [r6, #0]
 801b296:	b143      	cbz	r3, 801b2aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b298:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801b29c:	7a9b      	ldrb	r3, [r3, #10]
 801b29e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b2a2:	4313      	orrs	r3, r2
 801b2a4:	bf0c      	ite	eq
 801b2a6:	2301      	moveq	r3, #1
 801b2a8:	2300      	movne	r3, #0
 801b2aa:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b2ae:	4620      	mov	r0, r4
 801b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d0eb      	beq.n	801b294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b2bc:	f640 1302 	movw	r3, #2306	; 0x902
 801b2c0:	429c      	cmp	r4, r3
 801b2c2:	d1e7      	bne.n	801b294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b2c4:	4601      	mov	r1, r0
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	f7ff f99c 	bl	801a604 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b2cc:	e7e1      	b.n	801b292 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801b2ce <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b2ce:	4602      	mov	r2, r0
 801b2d0:	b148      	cbz	r0, 801b2e6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	b298      	uxth	r0, r3
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b2dc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b2e0:	2900      	cmp	r1, #0
 801b2e2:	d1f7      	bne.n	801b2d4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b2e4:	4770      	bx	lr
 801b2e6:	4770      	bx	lr

0801b2e8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801b2e8:	b140      	cbz	r0, 801b2fc <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801b2ea:	4602      	mov	r2, r0
 801b2ec:	1a13      	subs	r3, r2, r0
 801b2ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	2900      	cmp	r1, #0
 801b2f6:	d1f9      	bne.n	801b2ec <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	4770      	bx	lr
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	e7fb      	b.n	801b2f8 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801b300 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b300:	b530      	push	{r4, r5, lr}
 801b302:	4604      	mov	r4, r0
 801b304:	b159      	cbz	r1, 801b31e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b306:	b148      	cbz	r0, 801b31c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b308:	2300      	movs	r3, #0
 801b30a:	b298      	uxth	r0, r3
 801b30c:	4282      	cmp	r2, r0
 801b30e:	d905      	bls.n	801b31c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b310:	5ccd      	ldrb	r5, [r1, r3]
 801b312:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b316:	3301      	adds	r3, #1
 801b318:	2d00      	cmp	r5, #0
 801b31a:	d1f6      	bne.n	801b30a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b31c:	bd30      	pop	{r4, r5, pc}
 801b31e:	4608      	mov	r0, r1
 801b320:	e7fc      	b.n	801b31c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b322 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b322:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b324:	468c      	mov	ip, r1
 801b326:	b08b      	sub	sp, #44	; 0x2c
 801b328:	2100      	movs	r1, #0
 801b32a:	ae01      	add	r6, sp, #4
 801b32c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b330:	211f      	movs	r1, #31
 801b332:	fbb0 f7f3 	udiv	r7, r0, r3
 801b336:	fb03 0517 	mls	r5, r3, r7, r0
 801b33a:	4638      	mov	r0, r7
 801b33c:	b2ec      	uxtb	r4, r5
 801b33e:	2d09      	cmp	r5, #9
 801b340:	bfd4      	ite	le
 801b342:	3430      	addle	r4, #48	; 0x30
 801b344:	3457      	addgt	r4, #87	; 0x57
 801b346:	b2e4      	uxtb	r4, r4
 801b348:	558c      	strb	r4, [r1, r6]
 801b34a:	1e4c      	subs	r4, r1, #1
 801b34c:	b92f      	cbnz	r7, 801b35a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b34e:	4431      	add	r1, r6
 801b350:	4660      	mov	r0, ip
 801b352:	f7ff ffd5 	bl	801b300 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b356:	b00b      	add	sp, #44	; 0x2c
 801b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b35a:	4621      	mov	r1, r4
 801b35c:	e7e9      	b.n	801b332 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b35e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b35e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b360:	4607      	mov	r7, r0
 801b362:	b08b      	sub	sp, #44	; 0x2c
 801b364:	4608      	mov	r0, r1
 801b366:	b341      	cbz	r1, 801b3ba <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b368:	1e99      	subs	r1, r3, #2
 801b36a:	290e      	cmp	r1, #14
 801b36c:	d825      	bhi.n	801b3ba <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b36e:	2100      	movs	r1, #0
 801b370:	463c      	mov	r4, r7
 801b372:	261f      	movs	r6, #31
 801b374:	f10d 0c04 	add.w	ip, sp, #4
 801b378:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b37c:	1e71      	subs	r1, r6, #1
 801b37e:	fb94 fef3 	sdiv	lr, r4, r3
 801b382:	fb03 441e 	mls	r4, r3, lr, r4
 801b386:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b38a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b38e:	b2ec      	uxtb	r4, r5
 801b390:	2d09      	cmp	r5, #9
 801b392:	bfd4      	ite	le
 801b394:	3430      	addle	r4, #48	; 0x30
 801b396:	3457      	addgt	r4, #87	; 0x57
 801b398:	b2e4      	uxtb	r4, r4
 801b39a:	f80c 4006 	strb.w	r4, [ip, r6]
 801b39e:	4674      	mov	r4, lr
 801b3a0:	b96c      	cbnz	r4, 801b3be <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b3a2:	2f00      	cmp	r7, #0
 801b3a4:	da05      	bge.n	801b3b2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b3a6:	ab0a      	add	r3, sp, #40	; 0x28
 801b3a8:	4419      	add	r1, r3
 801b3aa:	232d      	movs	r3, #45	; 0x2d
 801b3ac:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b3b0:	1eb1      	subs	r1, r6, #2
 801b3b2:	3101      	adds	r1, #1
 801b3b4:	4461      	add	r1, ip
 801b3b6:	f7ff ffa3 	bl	801b300 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b3ba:	b00b      	add	sp, #44	; 0x2c
 801b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3be:	460e      	mov	r6, r1
 801b3c0:	e7dc      	b.n	801b37c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b3c2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801b3c2:	b510      	push	{r4, lr}
 801b3c4:	b158      	cbz	r0, 801b3de <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b3c6:	1e82      	subs	r2, r0, #2
 801b3c8:	210a      	movs	r1, #10
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b3d0:	3b30      	subs	r3, #48	; 0x30
 801b3d2:	b29c      	uxth	r4, r3
 801b3d4:	2c09      	cmp	r4, #9
 801b3d6:	d802      	bhi.n	801b3de <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b3d8:	fb01 3000 	mla	r0, r1, r0, r3
 801b3dc:	e7f6      	b.n	801b3cc <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801b3de:	bd10      	pop	{r4, pc}

0801b3e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3e4:	b085      	sub	sp, #20
 801b3e6:	f8d0 8000 	ldr.w	r8, [r0]
 801b3ea:	468a      	mov	sl, r1
 801b3ec:	461c      	mov	r4, r3
 801b3ee:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b3f2:	4681      	mov	r9, r0
 801b3f4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b3f8:	4640      	mov	r0, r8
 801b3fa:	9203      	str	r2, [sp, #12]
 801b3fc:	9102      	str	r1, [sp, #8]
 801b3fe:	9301      	str	r3, [sp, #4]
 801b400:	f7ff ff65 	bl	801b2ce <_ZN8touchgfx7Unicode6strlenEPKt>
 801b404:	9a03      	ldr	r2, [sp, #12]
 801b406:	f1ba 0f00 	cmp.w	sl, #0
 801b40a:	bf0c      	ite	eq
 801b40c:	4684      	moveq	ip, r0
 801b40e:	f100 0c01 	addne.w	ip, r0, #1
 801b412:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801b416:	8812      	ldrh	r2, [r2, #0]
 801b418:	fa1f fc8c 	uxth.w	ip, ip
 801b41c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b41e:	2a69      	cmp	r2, #105	; 0x69
 801b420:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b422:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b424:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801b428:	d004      	beq.n	801b434 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b42a:	d844      	bhi.n	801b4b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801b42c:	2a58      	cmp	r2, #88	; 0x58
 801b42e:	d001      	beq.n	801b434 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b430:	2a64      	cmp	r2, #100	; 0x64
 801b432:	d14b      	bne.n	801b4cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b434:	b1a4      	cbz	r4, 801b460 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b436:	b956      	cbnz	r6, 801b44e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b438:	2801      	cmp	r0, #1
 801b43a:	d108      	bne.n	801b44e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b43c:	f8b8 2000 	ldrh.w	r2, [r8]
 801b440:	2a30      	cmp	r2, #48	; 0x30
 801b442:	bf02      	ittt	eq
 801b444:	f108 0202 	addeq.w	r2, r8, #2
 801b448:	4630      	moveq	r0, r6
 801b44a:	f8c9 2000 	streq.w	r2, [r9]
 801b44e:	45b4      	cmp	ip, r6
 801b450:	da3e      	bge.n	801b4d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801b452:	b2b6      	uxth	r6, r6
 801b454:	eba6 040c 	sub.w	r4, r6, ip
 801b458:	46b4      	mov	ip, r6
 801b45a:	b2a4      	uxth	r4, r4
 801b45c:	f04f 0b00 	mov.w	fp, #0
 801b460:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b464:	3a01      	subs	r2, #1
 801b466:	b169      	cbz	r1, 801b484 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b468:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b46a:	458c      	cmp	ip, r1
 801b46c:	da09      	bge.n	801b482 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b46e:	eba1 010c 	sub.w	r1, r1, ip
 801b472:	b289      	uxth	r1, r1
 801b474:	b933      	cbnz	r3, 801b484 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b476:	f1bb 0f00 	cmp.w	fp, #0
 801b47a:	d02b      	beq.n	801b4d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b47c:	b350      	cbz	r0, 801b4d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b47e:	440c      	add	r4, r1
 801b480:	b2a4      	uxth	r4, r4
 801b482:	2100      	movs	r1, #0
 801b484:	682b      	ldr	r3, [r5, #0]
 801b486:	4293      	cmp	r3, r2
 801b488:	da07      	bge.n	801b49a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b48a:	f1ba 0f00 	cmp.w	sl, #0
 801b48e:	d004      	beq.n	801b49a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b490:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801b494:	682b      	ldr	r3, [r5, #0]
 801b496:	3301      	adds	r3, #1
 801b498:	602b      	str	r3, [r5, #0]
 801b49a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b49e:	b354      	cbz	r4, 801b4f6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b4a0:	682e      	ldr	r6, [r5, #0]
 801b4a2:	3c01      	subs	r4, #1
 801b4a4:	42b2      	cmp	r2, r6
 801b4a6:	b2a4      	uxth	r4, r4
 801b4a8:	dd25      	ble.n	801b4f6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b4aa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b4ae:	682b      	ldr	r3, [r5, #0]
 801b4b0:	3301      	adds	r3, #1
 801b4b2:	602b      	str	r3, [r5, #0]
 801b4b4:	e7f3      	b.n	801b49e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801b4b6:	2a73      	cmp	r2, #115	; 0x73
 801b4b8:	d003      	beq.n	801b4c2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801b4ba:	2a78      	cmp	r2, #120	; 0x78
 801b4bc:	d0ba      	beq.n	801b434 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b4be:	2a6f      	cmp	r2, #111	; 0x6f
 801b4c0:	e7b7      	b.n	801b432 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801b4c2:	2c00      	cmp	r4, #0
 801b4c4:	d0cc      	beq.n	801b460 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b4c6:	42b0      	cmp	r0, r6
 801b4c8:	dd00      	ble.n	801b4cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b4ca:	b2b0      	uxth	r0, r6
 801b4cc:	2400      	movs	r4, #0
 801b4ce:	e7c7      	b.n	801b460 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b4d0:	2400      	movs	r4, #0
 801b4d2:	e7c3      	b.n	801b45c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801b4d4:	2900      	cmp	r1, #0
 801b4d6:	d0d5      	beq.n	801b484 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b4d8:	f04f 0c20 	mov.w	ip, #32
 801b4dc:	682e      	ldr	r6, [r5, #0]
 801b4de:	2900      	cmp	r1, #0
 801b4e0:	d0d0      	beq.n	801b484 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b4e2:	3901      	subs	r1, #1
 801b4e4:	4296      	cmp	r6, r2
 801b4e6:	b289      	uxth	r1, r1
 801b4e8:	dacb      	bge.n	801b482 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b4ea:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b4ee:	682b      	ldr	r3, [r5, #0]
 801b4f0:	3301      	adds	r3, #1
 801b4f2:	602b      	str	r3, [r5, #0]
 801b4f4:	e7f2      	b.n	801b4dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801b4f6:	b198      	cbz	r0, 801b520 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b4f8:	f8d9 3000 	ldr.w	r3, [r9]
 801b4fc:	881c      	ldrh	r4, [r3, #0]
 801b4fe:	b17c      	cbz	r4, 801b520 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b500:	682c      	ldr	r4, [r5, #0]
 801b502:	3801      	subs	r0, #1
 801b504:	42a2      	cmp	r2, r4
 801b506:	b280      	uxth	r0, r0
 801b508:	dd0a      	ble.n	801b520 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b50a:	1c9c      	adds	r4, r3, #2
 801b50c:	f8c9 4000 	str.w	r4, [r9]
 801b510:	881c      	ldrh	r4, [r3, #0]
 801b512:	682b      	ldr	r3, [r5, #0]
 801b514:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801b518:	682b      	ldr	r3, [r5, #0]
 801b51a:	3301      	adds	r3, #1
 801b51c:	602b      	str	r3, [r5, #0]
 801b51e:	e7ea      	b.n	801b4f6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b520:	2620      	movs	r6, #32
 801b522:	b151      	cbz	r1, 801b53a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b524:	6828      	ldr	r0, [r5, #0]
 801b526:	3901      	subs	r1, #1
 801b528:	4282      	cmp	r2, r0
 801b52a:	b289      	uxth	r1, r1
 801b52c:	dd05      	ble.n	801b53a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b52e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801b532:	682b      	ldr	r3, [r5, #0]
 801b534:	3301      	adds	r3, #1
 801b536:	602b      	str	r3, [r5, #0]
 801b538:	e7f3      	b.n	801b522 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801b53a:	b005      	add	sp, #20
 801b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b540 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b544:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b546:	4604      	mov	r4, r0
 801b548:	f04f 0801 	mov.w	r8, #1
 801b54c:	2000      	movs	r0, #0
 801b54e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801b552:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801b556:	8008      	strh	r0, [r1, #0]
 801b558:	7010      	strb	r0, [r2, #0]
 801b55a:	7018      	strb	r0, [r3, #0]
 801b55c:	f88c 0000 	strb.w	r0, [ip]
 801b560:	f88e 0000 	strb.w	r0, [lr]
 801b564:	7030      	strb	r0, [r6, #0]
 801b566:	6820      	ldr	r0, [r4, #0]
 801b568:	8800      	ldrh	r0, [r0, #0]
 801b56a:	b190      	cbz	r0, 801b592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b56c:	282b      	cmp	r0, #43	; 0x2b
 801b56e:	d001      	beq.n	801b574 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801b570:	2820      	cmp	r0, #32
 801b572:	d104      	bne.n	801b57e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801b574:	8008      	strh	r0, [r1, #0]
 801b576:	6820      	ldr	r0, [r4, #0]
 801b578:	3002      	adds	r0, #2
 801b57a:	6020      	str	r0, [r4, #0]
 801b57c:	e7f3      	b.n	801b566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801b57e:	282d      	cmp	r0, #45	; 0x2d
 801b580:	d102      	bne.n	801b588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801b582:	f882 8000 	strb.w	r8, [r2]
 801b586:	e7f6      	b.n	801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b588:	2823      	cmp	r0, #35	; 0x23
 801b58a:	d102      	bne.n	801b592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b58c:	f883 8000 	strb.w	r8, [r3]
 801b590:	e7f1      	b.n	801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b592:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b596:	2b09      	cmp	r3, #9
 801b598:	d901      	bls.n	801b59e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801b59a:	282a      	cmp	r0, #42	; 0x2a
 801b59c:	d114      	bne.n	801b5c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b59e:	2201      	movs	r2, #1
 801b5a0:	f88e 2000 	strb.w	r2, [lr]
 801b5a4:	6823      	ldr	r3, [r4, #0]
 801b5a6:	8819      	ldrh	r1, [r3, #0]
 801b5a8:	2930      	cmp	r1, #48	; 0x30
 801b5aa:	bf02      	ittt	eq
 801b5ac:	3302      	addeq	r3, #2
 801b5ae:	6023      	streq	r3, [r4, #0]
 801b5b0:	f88c 2000 	strbeq.w	r2, [ip]
 801b5b4:	6820      	ldr	r0, [r4, #0]
 801b5b6:	8803      	ldrh	r3, [r0, #0]
 801b5b8:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ba:	d11e      	bne.n	801b5fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b5c0:	603b      	str	r3, [r7, #0]
 801b5c2:	6823      	ldr	r3, [r4, #0]
 801b5c4:	3302      	adds	r3, #2
 801b5c6:	6023      	str	r3, [r4, #0]
 801b5c8:	6823      	ldr	r3, [r4, #0]
 801b5ca:	881b      	ldrh	r3, [r3, #0]
 801b5cc:	2b2e      	cmp	r3, #46	; 0x2e
 801b5ce:	d112      	bne.n	801b5f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	7033      	strb	r3, [r6, #0]
 801b5d4:	6823      	ldr	r3, [r4, #0]
 801b5d6:	1c98      	adds	r0, r3, #2
 801b5d8:	6020      	str	r0, [r4, #0]
 801b5da:	885b      	ldrh	r3, [r3, #2]
 801b5dc:	2b2a      	cmp	r3, #42	; 0x2a
 801b5de:	d117      	bne.n	801b610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801b5e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e4:	602b      	str	r3, [r5, #0]
 801b5e6:	6823      	ldr	r3, [r4, #0]
 801b5e8:	3302      	adds	r3, #2
 801b5ea:	6023      	str	r3, [r4, #0]
 801b5ec:	682b      	ldr	r3, [r5, #0]
 801b5ee:	2b06      	cmp	r3, #6
 801b5f0:	bfa8      	it	ge
 801b5f2:	2306      	movge	r3, #6
 801b5f4:	602b      	str	r3, [r5, #0]
 801b5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5fa:	f7ff fee2 	bl	801b3c2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b5fe:	6038      	str	r0, [r7, #0]
 801b600:	6823      	ldr	r3, [r4, #0]
 801b602:	881a      	ldrh	r2, [r3, #0]
 801b604:	3a30      	subs	r2, #48	; 0x30
 801b606:	2a09      	cmp	r2, #9
 801b608:	d8de      	bhi.n	801b5c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b60a:	3302      	adds	r3, #2
 801b60c:	6023      	str	r3, [r4, #0]
 801b60e:	e7f7      	b.n	801b600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801b610:	f7ff fed7 	bl	801b3c2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b614:	6028      	str	r0, [r5, #0]
 801b616:	6823      	ldr	r3, [r4, #0]
 801b618:	881a      	ldrh	r2, [r3, #0]
 801b61a:	3a30      	subs	r2, #48	; 0x30
 801b61c:	2a09      	cmp	r2, #9
 801b61e:	d8e5      	bhi.n	801b5ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801b620:	3302      	adds	r3, #2
 801b622:	6023      	str	r3, [r4, #0]
 801b624:	e7f7      	b.n	801b616 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801b626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801b626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b62a:	b0a2      	sub	sp, #136	; 0x88
 801b62c:	2500      	movs	r5, #0
 801b62e:	4606      	mov	r6, r0
 801b630:	460f      	mov	r7, r1
 801b632:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801b636:	9209      	str	r2, [sp, #36]	; 0x24
 801b638:	4629      	mov	r1, r5
 801b63a:	2242      	movs	r2, #66	; 0x42
 801b63c:	4640      	mov	r0, r8
 801b63e:	461c      	mov	r4, r3
 801b640:	950d      	str	r5, [sp, #52]	; 0x34
 801b642:	f7fe fb82 	bl	8019d4a <_ZN8touchgfx6memsetEPvhm>
 801b646:	b30e      	cbz	r6, 801b68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b64a:	b1f3      	cbz	r3, 801b68a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801b64c:	f107 3aff 	add.w	sl, r7, #4294967295
 801b650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b654:	8812      	ldrh	r2, [r2, #0]
 801b656:	2a00      	cmp	r2, #0
 801b658:	f000 80b3 	beq.w	801b7c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b65c:	459a      	cmp	sl, r3
 801b65e:	f340 80b0 	ble.w	801b7c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b662:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b668:	f8b9 2000 	ldrh.w	r2, [r9]
 801b66c:	2a00      	cmp	r2, #0
 801b66e:	d0ef      	beq.n	801b650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b670:	2a25      	cmp	r2, #37	; 0x25
 801b672:	f000 80aa 	beq.w	801b7ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801b676:	459a      	cmp	sl, r3
 801b678:	ddea      	ble.n	801b650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b67a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b67e:	f109 0202 	add.w	r2, r9, #2
 801b682:	3301      	adds	r3, #1
 801b684:	9209      	str	r2, [sp, #36]	; 0x24
 801b686:	930d      	str	r3, [sp, #52]	; 0x34
 801b688:	e7eb      	b.n	801b662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801b68a:	8033      	strh	r3, [r6, #0]
 801b68c:	4630      	mov	r0, r6
 801b68e:	b022      	add	sp, #136	; 0x88
 801b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b694:	3b63      	subs	r3, #99	; 0x63
 801b696:	2b01      	cmp	r3, #1
 801b698:	f200 80df 	bhi.w	801b85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b69c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b6a0:	8813      	ldrh	r3, [r2, #0]
 801b6a2:	2b69      	cmp	r3, #105	; 0x69
 801b6a4:	d058      	beq.n	801b758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b6a6:	d81b      	bhi.n	801b6e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801b6a8:	2b63      	cmp	r3, #99	; 0x63
 801b6aa:	d02e      	beq.n	801b70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801b6ac:	2b64      	cmp	r3, #100	; 0x64
 801b6ae:	d053      	beq.n	801b758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b6b0:	2b58      	cmp	r3, #88	; 0x58
 801b6b2:	d06f      	beq.n	801b794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801b6b4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801b6b8:	46a1      	mov	r9, r4
 801b6ba:	e02d      	b.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b6bc:	2b73      	cmp	r3, #115	; 0x73
 801b6be:	d0ed      	beq.n	801b69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b6c0:	d803      	bhi.n	801b6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801b6c2:	2b6f      	cmp	r3, #111	; 0x6f
 801b6c4:	f040 80c9 	bne.w	801b85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b6c8:	e7e8      	b.n	801b69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b6ca:	2b75      	cmp	r3, #117	; 0x75
 801b6cc:	d0e6      	beq.n	801b69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b6ce:	2b78      	cmp	r3, #120	; 0x78
 801b6d0:	e7f8      	b.n	801b6c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b6d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6d4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6da:	3302      	adds	r3, #2
 801b6dc:	9309      	str	r3, [sp, #36]	; 0x24
 801b6de:	e7b7      	b.n	801b650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b6e0:	2b73      	cmp	r3, #115	; 0x73
 801b6e2:	d034      	beq.n	801b74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801b6e4:	d807      	bhi.n	801b6f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801b6e6:	2b6f      	cmp	r3, #111	; 0x6f
 801b6e8:	d1e4      	bne.n	801b6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b6ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6ec:	f104 0904 	add.w	r9, r4, #4
 801b6f0:	2308      	movs	r3, #8
 801b6f2:	1aba      	subs	r2, r7, r2
 801b6f4:	e048      	b.n	801b788 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b6f6:	2b75      	cmp	r3, #117	; 0x75
 801b6f8:	d041      	beq.n	801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801b6fa:	2b78      	cmp	r3, #120	; 0x78
 801b6fc:	d1da      	bne.n	801b6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b6fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b700:	f104 0904 	add.w	r9, r4, #4
 801b704:	2310      	movs	r3, #16
 801b706:	1aba      	subs	r2, r7, r2
 801b708:	e03e      	b.n	801b788 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b70a:	7823      	ldrb	r3, [r4, #0]
 801b70c:	f104 0904 	add.w	r9, r4, #4
 801b710:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b714:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b718:	aa0d      	add	r2, sp, #52	; 0x34
 801b71a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b71e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b722:	a810      	add	r0, sp, #64	; 0x40
 801b724:	9205      	str	r2, [sp, #20]
 801b726:	464c      	mov	r4, r9
 801b728:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801b72c:	9204      	str	r2, [sp, #16]
 801b72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b730:	9203      	str	r2, [sp, #12]
 801b732:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801b736:	9202      	str	r2, [sp, #8]
 801b738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b73a:	9201      	str	r2, [sp, #4]
 801b73c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801b740:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801b744:	9200      	str	r2, [sp, #0]
 801b746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b748:	f7ff fe4a 	bl	801b3e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b74c:	e7c4      	b.n	801b6d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801b74e:	f104 0904 	add.w	r9, r4, #4
 801b752:	6823      	ldr	r3, [r4, #0]
 801b754:	9310      	str	r3, [sp, #64]	; 0x40
 801b756:	e7df      	b.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b75a:	230a      	movs	r3, #10
 801b75c:	4641      	mov	r1, r8
 801b75e:	6820      	ldr	r0, [r4, #0]
 801b760:	1aba      	subs	r2, r7, r2
 801b762:	f104 0904 	add.w	r9, r4, #4
 801b766:	b292      	uxth	r2, r2
 801b768:	f7ff fdf9 	bl	801b35e <_ZN8touchgfx7Unicode4itoaElPtti>
 801b76c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b770:	2b2d      	cmp	r3, #45	; 0x2d
 801b772:	d1d1      	bne.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b774:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b77a:	3302      	adds	r3, #2
 801b77c:	e7ea      	b.n	801b754 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801b77e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b780:	f104 0904 	add.w	r9, r4, #4
 801b784:	230a      	movs	r3, #10
 801b786:	1aba      	subs	r2, r7, r2
 801b788:	b292      	uxth	r2, r2
 801b78a:	4641      	mov	r1, r8
 801b78c:	6820      	ldr	r0, [r4, #0]
 801b78e:	f7ff fdc8 	bl	801b322 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b792:	e7c1      	b.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b796:	2310      	movs	r3, #16
 801b798:	4641      	mov	r1, r8
 801b79a:	6820      	ldr	r0, [r4, #0]
 801b79c:	1aba      	subs	r2, r7, r2
 801b79e:	f104 0904 	add.w	r9, r4, #4
 801b7a2:	b292      	uxth	r2, r2
 801b7a4:	f7ff fdbd 	bl	801b322 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b7a8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b7ac:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d0b1      	beq.n	801b718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b7b4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b7b8:	2919      	cmp	r1, #25
 801b7ba:	d8f7      	bhi.n	801b7ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b7bc:	3b20      	subs	r3, #32
 801b7be:	8013      	strh	r3, [r2, #0]
 801b7c0:	e7f4      	b.n	801b7ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b7c2:	2200      	movs	r2, #0
 801b7c4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b7c8:	e760      	b.n	801b68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b7ca:	459a      	cmp	sl, r3
 801b7cc:	f77f af40 	ble.w	801b650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b7d0:	f109 0302 	add.w	r3, r9, #2
 801b7d4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801b7d8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801b7dc:	a809      	add	r0, sp, #36	; 0x24
 801b7de:	9309      	str	r3, [sp, #36]	; 0x24
 801b7e0:	ab0f      	add	r3, sp, #60	; 0x3c
 801b7e2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801b7e6:	9304      	str	r3, [sp, #16]
 801b7e8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b7ec:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801b7f0:	9303      	str	r3, [sp, #12]
 801b7f2:	ab0e      	add	r3, sp, #56	; 0x38
 801b7f4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801b7f8:	9302      	str	r3, [sp, #8]
 801b7fa:	ab0c      	add	r3, sp, #48	; 0x30
 801b7fc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801b800:	9301      	str	r3, [sp, #4]
 801b802:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b806:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801b80a:	9300      	str	r3, [sp, #0]
 801b80c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b810:	950e      	str	r5, [sp, #56]	; 0x38
 801b812:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801b816:	950f      	str	r5, [sp, #60]	; 0x3c
 801b818:	f7ff fe92 	bl	801b540 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b820:	2b00      	cmp	r3, #0
 801b822:	bfbf      	itttt	lt
 801b824:	6823      	ldrlt	r3, [r4, #0]
 801b826:	3404      	addlt	r4, #4
 801b828:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b82c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b82e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b830:	2b00      	cmp	r3, #0
 801b832:	bfbf      	itttt	lt
 801b834:	6823      	ldrlt	r3, [r4, #0]
 801b836:	3404      	addlt	r4, #4
 801b838:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b83c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b83e:	8813      	ldrh	r3, [r2, #0]
 801b840:	2b69      	cmp	r3, #105	; 0x69
 801b842:	f43f af2b 	beq.w	801b69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b846:	f63f af39 	bhi.w	801b6bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801b84a:	2b58      	cmp	r3, #88	; 0x58
 801b84c:	f43f af26 	beq.w	801b69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b850:	f63f af20 	bhi.w	801b694 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801b854:	2b25      	cmp	r3, #37	; 0x25
 801b856:	f43f af3c 	beq.w	801b6d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801b85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b85c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b860:	f8b9 2000 	ldrh.w	r2, [r9]
 801b864:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b868:	3301      	adds	r3, #1
 801b86a:	930d      	str	r3, [sp, #52]	; 0x34
 801b86c:	e734      	b.n	801b6d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801b870 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b872:	4605      	mov	r5, r0
 801b874:	b0a1      	sub	sp, #132	; 0x84
 801b876:	4610      	mov	r0, r2
 801b878:	460e      	mov	r6, r1
 801b87a:	4614      	mov	r4, r2
 801b87c:	461f      	mov	r7, r3
 801b87e:	f7ff fd33 	bl	801b2e8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b882:	283f      	cmp	r0, #63	; 0x3f
 801b884:	d906      	bls.n	801b894 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801b886:	4b0a      	ldr	r3, [pc, #40]	; (801b8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801b888:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801b88c:	4a09      	ldr	r2, [pc, #36]	; (801b8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801b88e:	480a      	ldr	r0, [pc, #40]	; (801b8b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801b890:	f009 ffac 	bl	80257ec <__assert_func>
 801b894:	4621      	mov	r1, r4
 801b896:	2240      	movs	r2, #64	; 0x40
 801b898:	4668      	mov	r0, sp
 801b89a:	f7ff fd31 	bl	801b300 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b89e:	463b      	mov	r3, r7
 801b8a0:	466a      	mov	r2, sp
 801b8a2:	4631      	mov	r1, r6
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	f7ff febe 	bl	801b626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801b8aa:	b021      	add	sp, #132	; 0x84
 801b8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8ae:	bf00      	nop
 801b8b0:	0802a8a7 	.word	0x0802a8a7
 801b8b4:	0802a979 	.word	0x0802a979
 801b8b8:	0802a8c4 	.word	0x0802a8c4

0801b8bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b8bc:	b40c      	push	{r2, r3}
 801b8be:	b507      	push	{r0, r1, r2, lr}
 801b8c0:	ab04      	add	r3, sp, #16
 801b8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8c6:	9301      	str	r3, [sp, #4]
 801b8c8:	f7ff ffd2 	bl	801b870 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b8cc:	b003      	add	sp, #12
 801b8ce:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8d2:	b002      	add	sp, #8
 801b8d4:	4770      	bx	lr
	...

0801b8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8dc:	b0c3      	sub	sp, #268	; 0x10c
 801b8de:	2400      	movs	r4, #0
 801b8e0:	4606      	mov	r6, r0
 801b8e2:	4689      	mov	r9, r1
 801b8e4:	af10      	add	r7, sp, #64	; 0x40
 801b8e6:	9209      	str	r2, [sp, #36]	; 0x24
 801b8e8:	4621      	mov	r1, r4
 801b8ea:	22c8      	movs	r2, #200	; 0xc8
 801b8ec:	4638      	mov	r0, r7
 801b8ee:	469a      	mov	sl, r3
 801b8f0:	940c      	str	r4, [sp, #48]	; 0x30
 801b8f2:	f7fe fa2a 	bl	8019d4a <_ZN8touchgfx6memsetEPvhm>
 801b8f6:	b116      	cbz	r6, 801b8fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8fa:	b923      	cbnz	r3, 801b906 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801b8fc:	8033      	strh	r3, [r6, #0]
 801b8fe:	4630      	mov	r0, r6
 801b900:	b043      	add	sp, #268	; 0x10c
 801b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b906:	f109 3bff 	add.w	fp, r9, #4294967295
 801b90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b90c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b90e:	8812      	ldrh	r2, [r2, #0]
 801b910:	2a00      	cmp	r2, #0
 801b912:	f000 80d1 	beq.w	801bab8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b916:	459b      	cmp	fp, r3
 801b918:	f340 80ce 	ble.w	801bab8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b91c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b920:	882a      	ldrh	r2, [r5, #0]
 801b922:	2a00      	cmp	r2, #0
 801b924:	d0f1      	beq.n	801b90a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b926:	2a25      	cmp	r2, #37	; 0x25
 801b928:	f000 80ca 	beq.w	801bac0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801b92c:	459b      	cmp	fp, r3
 801b92e:	ddec      	ble.n	801b90a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b930:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b934:	3502      	adds	r5, #2
 801b936:	3301      	adds	r3, #1
 801b938:	9509      	str	r5, [sp, #36]	; 0x24
 801b93a:	930c      	str	r3, [sp, #48]	; 0x30
 801b93c:	e7ee      	b.n	801b91c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801b93e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b942:	3202      	adds	r2, #2
 801b944:	920c      	str	r2, [sp, #48]	; 0x30
 801b946:	e0ac      	b.n	801baa2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801b948:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b94c:	970f      	str	r7, [sp, #60]	; 0x3c
 801b94e:	3401      	adds	r4, #1
 801b950:	edd3 7a00 	vldr	s15, [r3]
 801b954:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b958:	b923      	cbnz	r3, 801b964 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801b95a:	2301      	movs	r3, #1
 801b95c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b960:	2303      	movs	r3, #3
 801b962:	930e      	str	r3, [sp, #56]	; 0x38
 801b964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b968:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b96a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b96e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801bb6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801b972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b976:	bf42      	ittt	mi
 801b978:	232d      	movmi	r3, #45	; 0x2d
 801b97a:	eef1 7a67 	vnegmi.f32	s15, s15
 801b97e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b982:	2300      	movs	r3, #0
 801b984:	4298      	cmp	r0, r3
 801b986:	dd03      	ble.n	801b990 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801b988:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b98c:	3301      	adds	r3, #1
 801b98e:	e7f9      	b.n	801b984 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801b990:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b998:	eeb0 7a67 	vmov.f32	s14, s15
 801b99c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a4:	da26      	bge.n	801b9f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801b9a6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b9aa:	eba9 0202 	sub.w	r2, r9, r2
 801b9ae:	2100      	movs	r1, #0
 801b9b0:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b9b4:	b28d      	uxth	r5, r1
 801b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ba:	db21      	blt.n	801ba00 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b9bc:	1a53      	subs	r3, r2, r1
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	dd1e      	ble.n	801ba00 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b9c2:	2963      	cmp	r1, #99	; 0x63
 801b9c4:	d01b      	beq.n	801b9fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801b9c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b9ca:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b9ce:	ee17 3a10 	vmov	r3, s14
 801b9d2:	2b09      	cmp	r3, #9
 801b9d4:	bfa8      	it	ge
 801b9d6:	2309      	movge	r3, #9
 801b9d8:	ee07 3a10 	vmov	s14, r3
 801b9dc:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801b9e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9e4:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801b9e8:	3101      	adds	r1, #1
 801b9ea:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b9ee:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b9f2:	e7dd      	b.n	801b9b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801b9f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b9f8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b9fc:	e7ce      	b.n	801b99c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801b9fe:	460d      	mov	r5, r1
 801ba00:	2a63      	cmp	r2, #99	; 0x63
 801ba02:	bfd4      	ite	le
 801ba04:	ebc5 0202 	rsble	r2, r5, r2
 801ba08:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801ba0c:	2a00      	cmp	r2, #0
 801ba0e:	dd4e      	ble.n	801baae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801ba10:	4603      	mov	r3, r0
 801ba12:	f04f 0801 	mov.w	r8, #1
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	dd0e      	ble.n	801ba38 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801ba1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ba1e:	210a      	movs	r1, #10
 801ba20:	3b01      	subs	r3, #1
 801ba22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ba26:	ee17 ca10 	vmov	ip, s14
 801ba2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba2e:	fb01 c808 	mla	r8, r1, r8, ip
 801ba32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba36:	e7ee      	b.n	801ba16 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba3e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801ba42:	bfac      	ite	ge
 801ba44:	1a18      	subge	r0, r3, r0
 801ba46:	4618      	movlt	r0, r3
 801ba48:	b292      	uxth	r2, r2
 801ba4a:	230a      	movs	r3, #10
 801ba4c:	900e      	str	r0, [sp, #56]	; 0x38
 801ba4e:	1979      	adds	r1, r7, r5
 801ba50:	4640      	mov	r0, r8
 801ba52:	f7ff fc84 	bl	801b35e <_ZN8touchgfx7Unicode4itoaElPtti>
 801ba56:	f1b8 0f01 	cmp.w	r8, #1
 801ba5a:	dc26      	bgt.n	801baaa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801ba5c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	bf0c      	ite	eq
 801ba64:	2300      	moveq	r3, #0
 801ba66:	232e      	movne	r3, #46	; 0x2e
 801ba68:	aa42      	add	r2, sp, #264	; 0x108
 801ba6a:	4415      	add	r5, r2
 801ba6c:	aa0c      	add	r2, sp, #48	; 0x30
 801ba6e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801ba72:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ba76:	a80f      	add	r0, sp, #60	; 0x3c
 801ba78:	9205      	str	r2, [sp, #20]
 801ba7a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801ba7e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801ba82:	9204      	str	r2, [sp, #16]
 801ba84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba86:	9203      	str	r2, [sp, #12]
 801ba88:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801ba8c:	9202      	str	r2, [sp, #8]
 801ba8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba90:	9201      	str	r2, [sp, #4]
 801ba92:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801ba96:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801ba9a:	9200      	str	r2, [sp, #0]
 801ba9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba9e:	f7ff fc9f 	bl	801b3e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baa4:	3302      	adds	r3, #2
 801baa6:	9309      	str	r3, [sp, #36]	; 0x24
 801baa8:	e72f      	b.n	801b90a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801baaa:	232e      	movs	r3, #46	; 0x2e
 801baac:	e7dc      	b.n	801ba68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801baae:	ab42      	add	r3, sp, #264	; 0x108
 801bab0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801bab4:	2300      	movs	r3, #0
 801bab6:	e7d9      	b.n	801ba6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801bab8:	2200      	movs	r2, #0
 801baba:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801babe:	e71e      	b.n	801b8fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801bac0:	459b      	cmp	fp, r3
 801bac2:	f77f af22 	ble.w	801b90a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801bac6:	2300      	movs	r3, #0
 801bac8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801bacc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801bad0:	a809      	add	r0, sp, #36	; 0x24
 801bad2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bade:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801bae2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801bae6:	930d      	str	r3, [sp, #52]	; 0x34
 801bae8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801baec:	930e      	str	r3, [sp, #56]	; 0x38
 801baee:	1cab      	adds	r3, r5, #2
 801baf0:	9309      	str	r3, [sp, #36]	; 0x24
 801baf2:	ab0e      	add	r3, sp, #56	; 0x38
 801baf4:	9304      	str	r3, [sp, #16]
 801baf6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801bafa:	9303      	str	r3, [sp, #12]
 801bafc:	ab0d      	add	r3, sp, #52	; 0x34
 801bafe:	9302      	str	r3, [sp, #8]
 801bb00:	ab0b      	add	r3, sp, #44	; 0x2c
 801bb02:	9301      	str	r3, [sp, #4]
 801bb04:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801bb08:	9300      	str	r3, [sp, #0]
 801bb0a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801bb0e:	f7ff fd17 	bl	801b540 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	da0b      	bge.n	801bb30 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801bb18:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801bb1c:	3401      	adds	r4, #1
 801bb1e:	edd3 7a00 	vldr	s15, [r3]
 801bb22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb26:	ee17 3a90 	vmov	r3, s15
 801bb2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb2e:	930d      	str	r3, [sp, #52]	; 0x34
 801bb30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	da0b      	bge.n	801bb4e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801bb36:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801bb3a:	3401      	adds	r4, #1
 801bb3c:	edd3 7a00 	vldr	s15, [r3]
 801bb40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb44:	ee17 3a90 	vmov	r3, s15
 801bb48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb4c:	930e      	str	r3, [sp, #56]	; 0x38
 801bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb52:	881b      	ldrh	r3, [r3, #0]
 801bb54:	2b25      	cmp	r3, #37	; 0x25
 801bb56:	f43f aef2 	beq.w	801b93e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801bb5a:	2b66      	cmp	r3, #102	; 0x66
 801bb5c:	f43f aef4 	beq.w	801b948 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801bb60:	9509      	str	r5, [sp, #36]	; 0x24
 801bb62:	882b      	ldrh	r3, [r5, #0]
 801bb64:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801bb68:	3201      	adds	r2, #1
 801bb6a:	e6eb      	b.n	801b944 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801bb6c:	3f000002 	.word	0x3f000002

0801bb70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb72:	4605      	mov	r5, r0
 801bb74:	b0a1      	sub	sp, #132	; 0x84
 801bb76:	4610      	mov	r0, r2
 801bb78:	460e      	mov	r6, r1
 801bb7a:	4614      	mov	r4, r2
 801bb7c:	461f      	mov	r7, r3
 801bb7e:	f7ff fbb3 	bl	801b2e8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801bb82:	283f      	cmp	r0, #63	; 0x3f
 801bb84:	d906      	bls.n	801bb94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801bb86:	4b0a      	ldr	r3, [pc, #40]	; (801bbb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801bb88:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801bb8c:	4a09      	ldr	r2, [pc, #36]	; (801bbb4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801bb8e:	480a      	ldr	r0, [pc, #40]	; (801bbb8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801bb90:	f009 fe2c 	bl	80257ec <__assert_func>
 801bb94:	4621      	mov	r1, r4
 801bb96:	2240      	movs	r2, #64	; 0x40
 801bb98:	4668      	mov	r0, sp
 801bb9a:	f7ff fbb1 	bl	801b300 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bb9e:	463b      	mov	r3, r7
 801bba0:	466a      	mov	r2, sp
 801bba2:	4631      	mov	r1, r6
 801bba4:	4628      	mov	r0, r5
 801bba6:	f7ff fe97 	bl	801b8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801bbaa:	b021      	add	sp, #132	; 0x84
 801bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbae:	bf00      	nop
 801bbb0:	0802a8a7 	.word	0x0802a8a7
 801bbb4:	0802a8ea 	.word	0x0802a8ea
 801bbb8:	0802a8c4 	.word	0x0802a8c4

0801bbbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bbbc:	4b01      	ldr	r3, [pc, #4]	; (801bbc4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bbbe:	6018      	str	r0, [r3, #0]
 801bbc0:	4770      	bx	lr
 801bbc2:	bf00      	nop
 801bbc4:	2000bc34 	.word	0x2000bc34

0801bbc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bbc8:	4b07      	ldr	r3, [pc, #28]	; (801bbe8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801bbca:	881a      	ldrh	r2, [r3, #0]
 801bbcc:	4282      	cmp	r2, r0
 801bbce:	d809      	bhi.n	801bbe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bbd0:	4b06      	ldr	r3, [pc, #24]	; (801bbec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801bbd2:	881b      	ldrh	r3, [r3, #0]
 801bbd4:	4413      	add	r3, r2
 801bbd6:	4298      	cmp	r0, r3
 801bbd8:	da04      	bge.n	801bbe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bbda:	4b05      	ldr	r3, [pc, #20]	; (801bbf0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bbe2:	4770      	bx	lr
 801bbe4:	2000      	movs	r0, #0
 801bbe6:	4770      	bx	lr
 801bbe8:	2000bc54 	.word	0x2000bc54
 801bbec:	2000bc58 	.word	0x2000bc58
 801bbf0:	2000bc38 	.word	0x2000bc38

0801bbf4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbf8:	4d26      	ldr	r5, [pc, #152]	; (801bc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bbfa:	682b      	ldr	r3, [r5, #0]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d046      	beq.n	801bc8e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bc00:	4a25      	ldr	r2, [pc, #148]	; (801bc98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bc02:	4f26      	ldr	r7, [pc, #152]	; (801bc9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bc04:	8810      	ldrh	r0, [r2, #0]
 801bc06:	883c      	ldrh	r4, [r7, #0]
 801bc08:	4e25      	ldr	r6, [pc, #148]	; (801bca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bc0a:	4420      	add	r0, r4
 801bc0c:	1c42      	adds	r2, r0, #1
 801bc0e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801bc12:	f022 0201 	bic.w	r2, r2, #1
 801bc16:	0412      	lsls	r2, r2, #16
 801bc18:	0c12      	lsrs	r2, r2, #16
 801bc1a:	0051      	lsls	r1, r2, #1
 801bc1c:	220e      	movs	r2, #14
 801bc1e:	eb08 0e01 	add.w	lr, r8, r1
 801bc22:	fb02 fc04 	mul.w	ip, r2, r4
 801bc26:	eb03 0208 	add.w	r2, r3, r8
 801bc2a:	4c1e      	ldr	r4, [pc, #120]	; (801bca4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc2c:	6022      	str	r2, [r4, #0]
 801bc2e:	eb03 020e 	add.w	r2, r3, lr
 801bc32:	44e6      	add	lr, ip
 801bc34:	6032      	str	r2, [r6, #0]
 801bc36:	4473      	add	r3, lr
 801bc38:	4a1b      	ldr	r2, [pc, #108]	; (801bca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc3a:	6013      	str	r3, [r2, #0]
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	4a1b      	ldr	r2, [pc, #108]	; (801bcac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc40:	8013      	strh	r3, [r2, #0]
 801bc42:	4a1b      	ldr	r2, [pc, #108]	; (801bcb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bc44:	6812      	ldr	r2, [r2, #0]
 801bc46:	eba2 0208 	sub.w	r2, r2, r8
 801bc4a:	1a52      	subs	r2, r2, r1
 801bc4c:	4919      	ldr	r1, [pc, #100]	; (801bcb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bc4e:	eba2 020c 	sub.w	r2, r2, ip
 801bc52:	469c      	mov	ip, r3
 801bc54:	600a      	str	r2, [r1, #0]
 801bc56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc5a:	4a17      	ldr	r2, [pc, #92]	; (801bcb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bc5c:	8013      	strh	r3, [r2, #0]
 801bc5e:	4283      	cmp	r3, r0
 801bc60:	d10d      	bne.n	801bc7e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801bc62:	883d      	ldrh	r5, [r7, #0]
 801bc64:	2300      	movs	r3, #0
 801bc66:	6830      	ldr	r0, [r6, #0]
 801bc68:	240e      	movs	r4, #14
 801bc6a:	429d      	cmp	r5, r3
 801bc6c:	d90f      	bls.n	801bc8e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bc6e:	fb04 0203 	mla	r2, r4, r3, r0
 801bc72:	3301      	adds	r3, #1
 801bc74:	7b11      	ldrb	r1, [r2, #12]
 801bc76:	f36f 1145 	bfc	r1, #5, #1
 801bc7a:	7311      	strb	r1, [r2, #12]
 801bc7c:	e7f5      	b.n	801bc6a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801bc7e:	682a      	ldr	r2, [r5, #0]
 801bc80:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bc84:	6822      	ldr	r2, [r4, #0]
 801bc86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bc8a:	3301      	adds	r3, #1
 801bc8c:	e7e7      	b.n	801bc5e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801bc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc92:	bf00      	nop
 801bc94:	2000bc38 	.word	0x2000bc38
 801bc98:	2000bc54 	.word	0x2000bc54
 801bc9c:	2000bc58 	.word	0x2000bc58
 801bca0:	2000bc3c 	.word	0x2000bc3c
 801bca4:	2000bc4c 	.word	0x2000bc4c
 801bca8:	2000bc44 	.word	0x2000bc44
 801bcac:	2000bc56 	.word	0x2000bc56
 801bcb0:	2000bc40 	.word	0x2000bc40
 801bcb4:	2000bc50 	.word	0x2000bc50
 801bcb8:	2000bc48 	.word	0x2000bc48

0801bcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bcbc:	4b10      	ldr	r3, [pc, #64]	; (801bd00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bcbe:	b510      	push	{r4, lr}
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	b9db      	cbnz	r3, 801bcfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bcc4:	b1d1      	cbz	r1, 801bcfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bcc6:	4b0f      	ldr	r3, [pc, #60]	; (801bd04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bcc8:	240e      	movs	r4, #14
 801bcca:	801a      	strh	r2, [r3, #0]
 801bccc:	b292      	uxth	r2, r2
 801bcce:	4b0e      	ldr	r3, [pc, #56]	; (801bd08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bcd0:	881b      	ldrh	r3, [r3, #0]
 801bcd2:	4413      	add	r3, r2
 801bcd4:	4362      	muls	r2, r4
 801bcd6:	2406      	movs	r4, #6
 801bcd8:	fb04 2203 	mla	r2, r4, r3, r2
 801bcdc:	428a      	cmp	r2, r1
 801bcde:	d305      	bcc.n	801bcec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bce0:	4b0a      	ldr	r3, [pc, #40]	; (801bd0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bce2:	2137      	movs	r1, #55	; 0x37
 801bce4:	4a0a      	ldr	r2, [pc, #40]	; (801bd10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bce6:	480b      	ldr	r0, [pc, #44]	; (801bd14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bce8:	f009 fd80 	bl	80257ec <__assert_func>
 801bcec:	4b0a      	ldr	r3, [pc, #40]	; (801bd18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bcee:	6019      	str	r1, [r3, #0]
 801bcf0:	4b0a      	ldr	r3, [pc, #40]	; (801bd1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bcf2:	6018      	str	r0, [r3, #0]
 801bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcf8:	f7ff bf7c 	b.w	801bbf4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bcfc:	bd10      	pop	{r4, pc}
 801bcfe:	bf00      	nop
 801bd00:	2000bc44 	.word	0x2000bc44
 801bd04:	2000bc58 	.word	0x2000bc58
 801bd08:	2000bc54 	.word	0x2000bc54
 801bd0c:	0802aa5b 	.word	0x0802aa5b
 801bd10:	0802aab4 	.word	0x0802aab4
 801bd14:	0802aa36 	.word	0x0802aa36
 801bd18:	2000bc40 	.word	0x2000bc40
 801bd1c:	2000bc38 	.word	0x2000bc38

0801bd20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bd20:	b470      	push	{r4, r5, r6}
 801bd22:	4c07      	ldr	r4, [pc, #28]	; (801bd40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bd24:	4605      	mov	r5, r0
 801bd26:	4610      	mov	r0, r2
 801bd28:	9a03      	ldr	r2, [sp, #12]
 801bd2a:	6826      	ldr	r6, [r4, #0]
 801bd2c:	b936      	cbnz	r6, 801bd3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bd2e:	6025      	str	r5, [r4, #0]
 801bd30:	4c04      	ldr	r4, [pc, #16]	; (801bd44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bd32:	8021      	strh	r1, [r4, #0]
 801bd34:	4619      	mov	r1, r3
 801bd36:	bc70      	pop	{r4, r5, r6}
 801bd38:	f7ff bfc0 	b.w	801bcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bd3c:	bc70      	pop	{r4, r5, r6}
 801bd3e:	4770      	bx	lr
 801bd40:	2000bc5c 	.word	0x2000bc5c
 801bd44:	2000bc54 	.word	0x2000bc54

0801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bd48:	b508      	push	{r3, lr}
 801bd4a:	4b14      	ldr	r3, [pc, #80]	; (801bd9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bd4c:	6819      	ldr	r1, [r3, #0]
 801bd4e:	b931      	cbnz	r1, 801bd5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bd50:	4b13      	ldr	r3, [pc, #76]	; (801bda0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bd52:	f240 21e6 	movw	r1, #742	; 0x2e6
 801bd56:	4a13      	ldr	r2, [pc, #76]	; (801bda4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bd58:	4813      	ldr	r0, [pc, #76]	; (801bda8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bd5a:	f009 fd47 	bl	80257ec <__assert_func>
 801bd5e:	4a13      	ldr	r2, [pc, #76]	; (801bdac <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bd60:	8803      	ldrh	r3, [r0, #0]
 801bd62:	8812      	ldrh	r2, [r2, #0]
 801bd64:	4293      	cmp	r3, r2
 801bd66:	d204      	bcs.n	801bd72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bd68:	2214      	movs	r2, #20
 801bd6a:	fb02 1303 	mla	r3, r2, r3, r1
 801bd6e:	8918      	ldrh	r0, [r3, #8]
 801bd70:	bd08      	pop	{r3, pc}
 801bd72:	490f      	ldr	r1, [pc, #60]	; (801bdb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bd74:	8809      	ldrh	r1, [r1, #0]
 801bd76:	4411      	add	r1, r2
 801bd78:	428b      	cmp	r3, r1
 801bd7a:	da06      	bge.n	801bd8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bd7c:	1a9b      	subs	r3, r3, r2
 801bd7e:	4a0d      	ldr	r2, [pc, #52]	; (801bdb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bd80:	210e      	movs	r1, #14
 801bd82:	6812      	ldr	r2, [r2, #0]
 801bd84:	fb01 2303 	mla	r3, r1, r3, r2
 801bd88:	e7f1      	b.n	801bd6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bd8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd8e:	4293      	cmp	r3, r2
 801bd90:	bf0a      	itet	eq
 801bd92:	4b09      	ldreq	r3, [pc, #36]	; (801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bd94:	2000      	movne	r0, #0
 801bd96:	8818      	ldrheq	r0, [r3, #0]
 801bd98:	e7ea      	b.n	801bd70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bd9a:	bf00      	nop
 801bd9c:	2000bc5c 	.word	0x2000bc5c
 801bda0:	08027c8c 	.word	0x08027c8c
 801bda4:	0802ab61 	.word	0x0802ab61
 801bda8:	0802aa36 	.word	0x0802aa36
 801bdac:	2000bc54 	.word	0x2000bc54
 801bdb0:	2000bc58 	.word	0x2000bc58
 801bdb4:	2000bc3c 	.word	0x2000bc3c
 801bdb8:	2000bb88 	.word	0x2000bb88

0801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bdbc:	b508      	push	{r3, lr}
 801bdbe:	4b14      	ldr	r3, [pc, #80]	; (801be10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bdc0:	6819      	ldr	r1, [r3, #0]
 801bdc2:	b931      	cbnz	r1, 801bdd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bdc4:	4b13      	ldr	r3, [pc, #76]	; (801be14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bdc6:	f240 21fa 	movw	r1, #762	; 0x2fa
 801bdca:	4a13      	ldr	r2, [pc, #76]	; (801be18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bdcc:	4813      	ldr	r0, [pc, #76]	; (801be1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bdce:	f009 fd0d 	bl	80257ec <__assert_func>
 801bdd2:	4a13      	ldr	r2, [pc, #76]	; (801be20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bdd4:	8803      	ldrh	r3, [r0, #0]
 801bdd6:	8812      	ldrh	r2, [r2, #0]
 801bdd8:	4293      	cmp	r3, r2
 801bdda:	d204      	bcs.n	801bde6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bddc:	2214      	movs	r2, #20
 801bdde:	fb02 1303 	mla	r3, r2, r3, r1
 801bde2:	8958      	ldrh	r0, [r3, #10]
 801bde4:	bd08      	pop	{r3, pc}
 801bde6:	490f      	ldr	r1, [pc, #60]	; (801be24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bde8:	8809      	ldrh	r1, [r1, #0]
 801bdea:	4411      	add	r1, r2
 801bdec:	428b      	cmp	r3, r1
 801bdee:	da06      	bge.n	801bdfe <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bdf0:	1a9b      	subs	r3, r3, r2
 801bdf2:	4a0d      	ldr	r2, [pc, #52]	; (801be28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bdf4:	210e      	movs	r1, #14
 801bdf6:	6812      	ldr	r2, [r2, #0]
 801bdf8:	fb01 2303 	mla	r3, r1, r3, r2
 801bdfc:	e7f1      	b.n	801bde2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bdfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be02:	4293      	cmp	r3, r2
 801be04:	bf0a      	itet	eq
 801be06:	4b09      	ldreq	r3, [pc, #36]	; (801be2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801be08:	2000      	movne	r0, #0
 801be0a:	8818      	ldrheq	r0, [r3, #0]
 801be0c:	e7ea      	b.n	801bde4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801be0e:	bf00      	nop
 801be10:	2000bc5c 	.word	0x2000bc5c
 801be14:	08027c8c 	.word	0x08027c8c
 801be18:	0802ab8d 	.word	0x0802ab8d
 801be1c:	0802aa36 	.word	0x0802aa36
 801be20:	2000bc54 	.word	0x2000bc54
 801be24:	2000bc58 	.word	0x2000bc58
 801be28:	2000bc3c 	.word	0x2000bc3c
 801be2c:	2000bb8a 	.word	0x2000bb8a

0801be30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801be30:	4b23      	ldr	r3, [pc, #140]	; (801bec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801be32:	b510      	push	{r4, lr}
 801be34:	681c      	ldr	r4, [r3, #0]
 801be36:	b934      	cbnz	r4, 801be46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801be38:	4b22      	ldr	r3, [pc, #136]	; (801bec4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801be3a:	f240 310e 	movw	r1, #782	; 0x30e
 801be3e:	4a22      	ldr	r2, [pc, #136]	; (801bec8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801be40:	4822      	ldr	r0, [pc, #136]	; (801becc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801be42:	f009 fcd3 	bl	80257ec <__assert_func>
 801be46:	4a22      	ldr	r2, [pc, #136]	; (801bed0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801be48:	880b      	ldrh	r3, [r1, #0]
 801be4a:	8812      	ldrh	r2, [r2, #0]
 801be4c:	4293      	cmp	r3, r2
 801be4e:	d211      	bcs.n	801be74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801be50:	2214      	movs	r2, #20
 801be52:	fb02 4303 	mla	r3, r2, r3, r4
 801be56:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801be5a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801be5e:	8a1a      	ldrh	r2, [r3, #16]
 801be60:	8a5b      	ldrh	r3, [r3, #18]
 801be62:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be66:	8004      	strh	r4, [r0, #0]
 801be68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be6c:	8041      	strh	r1, [r0, #2]
 801be6e:	8082      	strh	r2, [r0, #4]
 801be70:	80c3      	strh	r3, [r0, #6]
 801be72:	e00e      	b.n	801be92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801be74:	4917      	ldr	r1, [pc, #92]	; (801bed4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801be76:	8809      	ldrh	r1, [r1, #0]
 801be78:	4411      	add	r1, r2
 801be7a:	428b      	cmp	r3, r1
 801be7c:	da0a      	bge.n	801be94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801be7e:	1a9b      	subs	r3, r3, r2
 801be80:	4a15      	ldr	r2, [pc, #84]	; (801bed8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801be82:	210e      	movs	r1, #14
 801be84:	6812      	ldr	r2, [r2, #0]
 801be86:	fb01 2303 	mla	r3, r1, r3, r2
 801be8a:	681a      	ldr	r2, [r3, #0]
 801be8c:	6002      	str	r2, [r0, #0]
 801be8e:	685a      	ldr	r2, [r3, #4]
 801be90:	6042      	str	r2, [r0, #4]
 801be92:	bd10      	pop	{r4, pc}
 801be94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be98:	4293      	cmp	r3, r2
 801be9a:	d10b      	bne.n	801beb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801be9c:	4b0f      	ldr	r3, [pc, #60]	; (801bedc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801be9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bea2:	4b0f      	ldr	r3, [pc, #60]	; (801bee0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bea4:	8081      	strh	r1, [r0, #4]
 801bea6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801beaa:	2300      	movs	r3, #0
 801beac:	80c2      	strh	r2, [r0, #6]
 801beae:	8003      	strh	r3, [r0, #0]
 801beb0:	8043      	strh	r3, [r0, #2]
 801beb2:	e7ee      	b.n	801be92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801beb4:	2300      	movs	r3, #0
 801beb6:	8003      	strh	r3, [r0, #0]
 801beb8:	8043      	strh	r3, [r0, #2]
 801beba:	8083      	strh	r3, [r0, #4]
 801bebc:	e7d8      	b.n	801be70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bebe:	bf00      	nop
 801bec0:	2000bc5c 	.word	0x2000bc5c
 801bec4:	08027c8c 	.word	0x08027c8c
 801bec8:	0802aafa 	.word	0x0802aafa
 801becc:	0802aa36 	.word	0x0802aa36
 801bed0:	2000bc54 	.word	0x2000bc54
 801bed4:	2000bc58 	.word	0x2000bc58
 801bed8:	2000bc3c 	.word	0x2000bc3c
 801bedc:	2000bb88 	.word	0x2000bb88
 801bee0:	2000bb8a 	.word	0x2000bb8a

0801bee4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801bee4:	4b18      	ldr	r3, [pc, #96]	; (801bf48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	b34b      	cbz	r3, 801bf3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801beea:	4a18      	ldr	r2, [pc, #96]	; (801bf4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801beec:	8800      	ldrh	r0, [r0, #0]
 801beee:	8812      	ldrh	r2, [r2, #0]
 801bef0:	4290      	cmp	r0, r2
 801bef2:	d211      	bcs.n	801bf18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801bef4:	2214      	movs	r2, #20
 801bef6:	fb02 3300 	mla	r3, r2, r0, r3
 801befa:	8a1a      	ldrh	r2, [r3, #16]
 801befc:	8919      	ldrh	r1, [r3, #8]
 801befe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bf02:	428a      	cmp	r2, r1
 801bf04:	db1d      	blt.n	801bf42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bf06:	8a58      	ldrh	r0, [r3, #18]
 801bf08:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bf0c:	895b      	ldrh	r3, [r3, #10]
 801bf0e:	4298      	cmp	r0, r3
 801bf10:	bfac      	ite	ge
 801bf12:	2000      	movge	r0, #0
 801bf14:	2001      	movlt	r0, #1
 801bf16:	4770      	bx	lr
 801bf18:	4b0d      	ldr	r3, [pc, #52]	; (801bf50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bf1a:	881b      	ldrh	r3, [r3, #0]
 801bf1c:	4413      	add	r3, r2
 801bf1e:	4298      	cmp	r0, r3
 801bf20:	da0d      	bge.n	801bf3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bf22:	4b0c      	ldr	r3, [pc, #48]	; (801bf54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801bf24:	1a80      	subs	r0, r0, r2
 801bf26:	220e      	movs	r2, #14
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	fb02 3300 	mla	r3, r2, r0, r3
 801bf2e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bf32:	891a      	ldrh	r2, [r3, #8]
 801bf34:	4291      	cmp	r1, r2
 801bf36:	db04      	blt.n	801bf42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bf38:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bf3c:	e7e6      	b.n	801bf0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801bf3e:	2000      	movs	r0, #0
 801bf40:	4770      	bx	lr
 801bf42:	2001      	movs	r0, #1
 801bf44:	4770      	bx	lr
 801bf46:	bf00      	nop
 801bf48:	2000bc5c 	.word	0x2000bc5c
 801bf4c:	2000bc54 	.word	0x2000bc54
 801bf50:	2000bc58 	.word	0x2000bc58
 801bf54:	2000bc3c 	.word	0x2000bc3c

0801bf58 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bf58:	b508      	push	{r3, lr}
 801bf5a:	4b12      	ldr	r3, [pc, #72]	; (801bfa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bf5c:	6819      	ldr	r1, [r3, #0]
 801bf5e:	b931      	cbnz	r1, 801bf6e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bf60:	4b11      	ldr	r3, [pc, #68]	; (801bfa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bf62:	f240 3132 	movw	r1, #818	; 0x332
 801bf66:	4a11      	ldr	r2, [pc, #68]	; (801bfac <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bf68:	4811      	ldr	r0, [pc, #68]	; (801bfb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf6a:	f009 fc3f 	bl	80257ec <__assert_func>
 801bf6e:	8803      	ldrh	r3, [r0, #0]
 801bf70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf74:	4293      	cmp	r3, r2
 801bf76:	d012      	beq.n	801bf9e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	d103      	bne.n	801bf88 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bf80:	4b0c      	ldr	r3, [pc, #48]	; (801bfb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf86:	bd08      	pop	{r3, pc}
 801bf88:	4a0b      	ldr	r2, [pc, #44]	; (801bfb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bf8a:	6812      	ldr	r2, [r2, #0]
 801bf8c:	b11a      	cbz	r2, 801bf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bf8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bf92:	2800      	cmp	r0, #0
 801bf94:	d1f7      	bne.n	801bf86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf96:	2214      	movs	r2, #20
 801bf98:	4353      	muls	r3, r2
 801bf9a:	58c8      	ldr	r0, [r1, r3]
 801bf9c:	e7f3      	b.n	801bf86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	e7f1      	b.n	801bf86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bfa2:	bf00      	nop
 801bfa4:	2000bc5c 	.word	0x2000bc5c
 801bfa8:	08027c8c 	.word	0x08027c8c
 801bfac:	0802ab30 	.word	0x0802ab30
 801bfb0:	0802aa36 	.word	0x0802aa36
 801bfb4:	2000bb94 	.word	0x2000bb94
 801bfb8:	2000bc38 	.word	0x2000bc38

0801bfbc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bfbc:	8802      	ldrh	r2, [r0, #0]
 801bfbe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	d840      	bhi.n	801c048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bfc6:	4b21      	ldr	r3, [pc, #132]	; (801c04c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bfc8:	881b      	ldrh	r3, [r3, #0]
 801bfca:	429a      	cmp	r2, r3
 801bfcc:	d220      	bcs.n	801c010 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bfce:	4b20      	ldr	r3, [pc, #128]	; (801c050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bfd0:	6819      	ldr	r1, [r3, #0]
 801bfd2:	2314      	movs	r3, #20
 801bfd4:	fb03 1302 	mla	r3, r3, r2, r1
 801bfd8:	6858      	ldr	r0, [r3, #4]
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	d035      	beq.n	801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfde:	491d      	ldr	r1, [pc, #116]	; (801c054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bfe0:	6809      	ldr	r1, [r1, #0]
 801bfe2:	2900      	cmp	r1, #0
 801bfe4:	d031      	beq.n	801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfe6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bfea:	b371      	cbz	r1, 801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfec:	895a      	ldrh	r2, [r3, #10]
 801bfee:	8918      	ldrh	r0, [r3, #8]
 801bff0:	4350      	muls	r0, r2
 801bff2:	7c5a      	ldrb	r2, [r3, #17]
 801bff4:	7cdb      	ldrb	r3, [r3, #19]
 801bff6:	0952      	lsrs	r2, r2, #5
 801bff8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bffc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c000:	2b0b      	cmp	r3, #11
 801c002:	bf18      	it	ne
 801c004:	0040      	lslne	r0, r0, #1
 801c006:	3003      	adds	r0, #3
 801c008:	f020 0003 	bic.w	r0, r0, #3
 801c00c:	4408      	add	r0, r1
 801c00e:	4770      	bx	lr
 801c010:	4911      	ldr	r1, [pc, #68]	; (801c058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c012:	8809      	ldrh	r1, [r1, #0]
 801c014:	4419      	add	r1, r3
 801c016:	428a      	cmp	r2, r1
 801c018:	da16      	bge.n	801c048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c01a:	4910      	ldr	r1, [pc, #64]	; (801c05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c01c:	1ad3      	subs	r3, r2, r3
 801c01e:	200e      	movs	r0, #14
 801c020:	6809      	ldr	r1, [r1, #0]
 801c022:	fb00 1303 	mla	r3, r0, r3, r1
 801c026:	7b19      	ldrb	r1, [r3, #12]
 801c028:	f001 011f 	and.w	r1, r1, #31
 801c02c:	290b      	cmp	r1, #11
 801c02e:	d10b      	bne.n	801c048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c030:	8919      	ldrh	r1, [r3, #8]
 801c032:	8958      	ldrh	r0, [r3, #10]
 801c034:	4b07      	ldr	r3, [pc, #28]	; (801c054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c036:	4348      	muls	r0, r1
 801c038:	6819      	ldr	r1, [r3, #0]
 801c03a:	3003      	adds	r0, #3
 801c03c:	f020 0303 	bic.w	r3, r0, #3
 801c040:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c044:	4418      	add	r0, r3
 801c046:	4770      	bx	lr
 801c048:	2000      	movs	r0, #0
 801c04a:	4770      	bx	lr
 801c04c:	2000bc54 	.word	0x2000bc54
 801c050:	2000bc5c 	.word	0x2000bc5c
 801c054:	2000bc38 	.word	0x2000bc38
 801c058:	2000bc58 	.word	0x2000bc58
 801c05c:	2000bc3c 	.word	0x2000bc3c

0801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c060:	4b19      	ldr	r3, [pc, #100]	; (801c0c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c062:	6819      	ldr	r1, [r3, #0]
 801c064:	8803      	ldrh	r3, [r0, #0]
 801c066:	b1e9      	cbz	r1, 801c0a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c068:	4a18      	ldr	r2, [pc, #96]	; (801c0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c06a:	8812      	ldrh	r2, [r2, #0]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d90a      	bls.n	801c086 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c070:	2214      	movs	r2, #20
 801c072:	fb02 1303 	mla	r3, r2, r3, r1
 801c076:	7c58      	ldrb	r0, [r3, #17]
 801c078:	0942      	lsrs	r2, r0, #5
 801c07a:	7cd8      	ldrb	r0, [r3, #19]
 801c07c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c080:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c084:	4770      	bx	lr
 801c086:	4912      	ldr	r1, [pc, #72]	; (801c0d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801c088:	8809      	ldrh	r1, [r1, #0]
 801c08a:	4411      	add	r1, r2
 801c08c:	428b      	cmp	r3, r1
 801c08e:	da09      	bge.n	801c0a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c090:	1a9b      	subs	r3, r3, r2
 801c092:	4a10      	ldr	r2, [pc, #64]	; (801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c094:	210e      	movs	r1, #14
 801c096:	6812      	ldr	r2, [r2, #0]
 801c098:	fb01 2303 	mla	r3, r1, r3, r2
 801c09c:	7b18      	ldrb	r0, [r3, #12]
 801c09e:	f000 001f 	and.w	r0, r0, #31
 801c0a2:	4770      	bx	lr
 801c0a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c0a8:	4293      	cmp	r3, r2
 801c0aa:	d10a      	bne.n	801c0c2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801c0ac:	4b0a      	ldr	r3, [pc, #40]	; (801c0d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c0b4:	b10a      	cbz	r2, 801c0ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c0b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c0b8:	b900      	cbnz	r0, 801c0bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c0ba:	6898      	ldr	r0, [r3, #8]
 801c0bc:	6803      	ldr	r3, [r0, #0]
 801c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0c0:	4718      	bx	r3
 801c0c2:	2000      	movs	r0, #0
 801c0c4:	4770      	bx	lr
 801c0c6:	bf00      	nop
 801c0c8:	2000bc5c 	.word	0x2000bc5c
 801c0cc:	2000bc54 	.word	0x2000bc54
 801c0d0:	2000bc58 	.word	0x2000bc58
 801c0d4:	2000bc3c 	.word	0x2000bc3c
 801c0d8:	2000bb94 	.word	0x2000bb94

0801c0dc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c0dc:	2018      	movs	r0, #24
 801c0de:	4770      	bx	lr

0801c0e0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c0e0:	2001      	movs	r0, #1
 801c0e2:	4770      	bx	lr

0801c0e4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801c0e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c0e8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801c0ec:	4770      	bx	lr

0801c0ee <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801c0ee:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801c0f2:	4770      	bx	lr

0801c0f4 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801c0f4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c0f8:	4770      	bx	lr

0801c0fa <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801c0fa:	b2c8      	uxtb	r0, r1
 801c0fc:	4770      	bx	lr

0801c0fe <_ZN8touchgfx8LCD24bpp4initEv>:
 801c0fe:	4770      	bx	lr

0801c100 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c104:	b085      	sub	sp, #20
 801c106:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c108:	9203      	str	r2, [sp, #12]
 801c10a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c10e:	6878      	ldr	r0, [r7, #4]
 801c110:	9201      	str	r2, [sp, #4]
 801c112:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801c114:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801c118:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801c11c:	fa1f fc84 	uxth.w	ip, r4
 801c120:	43e4      	mvns	r4, r4
 801c122:	9100      	str	r1, [sp, #0]
 801c124:	b2e4      	uxtb	r4, r4
 801c126:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c12a:	fb00 2505 	mla	r5, r0, r5, r2
 801c12e:	683a      	ldr	r2, [r7, #0]
 801c130:	6877      	ldr	r7, [r6, #4]
 801c132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c136:	3704      	adds	r7, #4
 801c138:	4415      	add	r5, r2
 801c13a:	6832      	ldr	r2, [r6, #0]
 801c13c:	9202      	str	r2, [sp, #8]
 801c13e:	9a00      	ldr	r2, [sp, #0]
 801c140:	2a00      	cmp	r2, #0
 801c142:	dc03      	bgt.n	801c14c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c144:	9a03      	ldr	r2, [sp, #12]
 801c146:	2a00      	cmp	r2, #0
 801c148:	f340 8116 	ble.w	801c378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c14c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c14e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c154:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c158:	2b00      	cmp	r3, #0
 801c15a:	dd0f      	ble.n	801c17c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c15c:	1406      	asrs	r6, r0, #16
 801c15e:	d406      	bmi.n	801c16e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c160:	4546      	cmp	r6, r8
 801c162:	da04      	bge.n	801c16e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c164:	1416      	asrs	r6, r2, #16
 801c166:	d402      	bmi.n	801c16e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c168:	9901      	ldr	r1, [sp, #4]
 801c16a:	428e      	cmp	r6, r1
 801c16c:	db07      	blt.n	801c17e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c16e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c170:	3b01      	subs	r3, #1
 801c172:	3503      	adds	r5, #3
 801c174:	4408      	add	r0, r1
 801c176:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c178:	440a      	add	r2, r1
 801c17a:	e7ed      	b.n	801c158 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801c17c:	d011      	beq.n	801c1a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801c17e:	1e5e      	subs	r6, r3, #1
 801c180:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c182:	fb01 0e06 	mla	lr, r1, r6, r0
 801c186:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c18a:	d548      	bpl.n	801c21e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801c18c:	4699      	mov	r9, r3
 801c18e:	462e      	mov	r6, r5
 801c190:	f1b9 0f00 	cmp.w	r9, #0
 801c194:	f300 809e 	bgt.w	801c2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801c198:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c19c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1a0:	441d      	add	r5, r3
 801c1a2:	9b00      	ldr	r3, [sp, #0]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	f340 80e7 	ble.w	801c378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c1aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1b8:	eef0 6a62 	vmov.f32	s13, s5
 801c1bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1c8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c1cc:	eef0 6a43 	vmov.f32	s13, s6
 801c1d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1d4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c1d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1f0:	ee12 2a90 	vmov	r2, s5
 801c1f4:	eef0 2a47 	vmov.f32	s5, s14
 801c1f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1fc:	ee13 2a10 	vmov	r2, s6
 801c200:	9311      	str	r3, [sp, #68]	; 0x44
 801c202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c204:	eeb0 3a67 	vmov.f32	s6, s15
 801c208:	fb92 f3f3 	sdiv	r3, r2, r3
 801c20c:	9312      	str	r3, [sp, #72]	; 0x48
 801c20e:	9b00      	ldr	r3, [sp, #0]
 801c210:	9a03      	ldr	r2, [sp, #12]
 801c212:	3b01      	subs	r3, #1
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c218:	bf08      	it	eq
 801c21a:	4613      	moveq	r3, r2
 801c21c:	e78f      	b.n	801c13e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801c21e:	45c6      	cmp	lr, r8
 801c220:	dab4      	bge.n	801c18c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c222:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c224:	fb01 2606 	mla	r6, r1, r6, r2
 801c228:	1436      	asrs	r6, r6, #16
 801c22a:	d4af      	bmi.n	801c18c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c22c:	9901      	ldr	r1, [sp, #4]
 801c22e:	428e      	cmp	r6, r1
 801c230:	daac      	bge.n	801c18c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c232:	1cee      	adds	r6, r5, #3
 801c234:	4699      	mov	r9, r3
 801c236:	f1b9 0f00 	cmp.w	r9, #0
 801c23a:	f106 0603 	add.w	r6, r6, #3
 801c23e:	ddab      	ble.n	801c198 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c240:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c244:	9902      	ldr	r1, [sp, #8]
 801c246:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c24a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c24e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c252:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c254:	fb1b fb04 	smulbb	fp, fp, r4
 801c258:	f109 39ff 	add.w	r9, r9, #4294967295
 801c25c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c260:	4408      	add	r0, r1
 801c262:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c264:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c268:	440a      	add	r2, r1
 801c26a:	eb07 0a0e 	add.w	sl, r7, lr
 801c26e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c272:	fb0e be0c 	mla	lr, lr, ip, fp
 801c276:	fa1f fe8e 	uxth.w	lr, lr
 801c27a:	f10e 0b01 	add.w	fp, lr, #1
 801c27e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c282:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c286:	fb1b fb04 	smulbb	fp, fp, r4
 801c28a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c28e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801c292:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c296:	fb0e be0c 	mla	lr, lr, ip, fp
 801c29a:	fa1f fe8e 	uxth.w	lr, lr
 801c29e:	f10e 0b01 	add.w	fp, lr, #1
 801c2a2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2aa:	f806 ec05 	strb.w	lr, [r6, #-5]
 801c2ae:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c2b2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c2b6:	fb1a fa04 	smulbb	sl, sl, r4
 801c2ba:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c2be:	fa1f fe8e 	uxth.w	lr, lr
 801c2c2:	f10e 0a01 	add.w	sl, lr, #1
 801c2c6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c2ca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2ce:	f806 ec04 	strb.w	lr, [r6, #-4]
 801c2d2:	e7b0      	b.n	801c236 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c2d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2d8:	d446      	bmi.n	801c368 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2da:	45c2      	cmp	sl, r8
 801c2dc:	da44      	bge.n	801c368 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2de:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801c2e2:	d441      	bmi.n	801c368 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2e4:	9901      	ldr	r1, [sp, #4]
 801c2e6:	458e      	cmp	lr, r1
 801c2e8:	da3e      	bge.n	801c368 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2ea:	9902      	ldr	r1, [sp, #8]
 801c2ec:	f896 b000 	ldrb.w	fp, [r6]
 801c2f0:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c2f4:	fb1b fb04 	smulbb	fp, fp, r4
 801c2f8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c2fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c300:	eb07 0a0e 	add.w	sl, r7, lr
 801c304:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c308:	fb0e be0c 	mla	lr, lr, ip, fp
 801c30c:	fa1f fe8e 	uxth.w	lr, lr
 801c310:	f10e 0b01 	add.w	fp, lr, #1
 801c314:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c318:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c31c:	fb1b fb04 	smulbb	fp, fp, r4
 801c320:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c324:	f886 e000 	strb.w	lr, [r6]
 801c328:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c32c:	fb0e be0c 	mla	lr, lr, ip, fp
 801c330:	fa1f fe8e 	uxth.w	lr, lr
 801c334:	f10e 0b01 	add.w	fp, lr, #1
 801c338:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c33c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c340:	f886 e001 	strb.w	lr, [r6, #1]
 801c344:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c348:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c34c:	fb1a fa04 	smulbb	sl, sl, r4
 801c350:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c354:	fa1f fe8e 	uxth.w	lr, lr
 801c358:	f10e 0a01 	add.w	sl, lr, #1
 801c35c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c360:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c364:	f886 e002 	strb.w	lr, [r6, #2]
 801c368:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c36a:	3603      	adds	r6, #3
 801c36c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c370:	4408      	add	r0, r1
 801c372:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c374:	440a      	add	r2, r1
 801c376:	e70b      	b.n	801c190 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c378:	b005      	add	sp, #20
 801c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c37e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c37e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c382:	b085      	sub	sp, #20
 801c384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c388:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c38a:	9203      	str	r2, [sp, #12]
 801c38c:	6870      	ldr	r0, [r6, #4]
 801c38e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c390:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c394:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c398:	9101      	str	r1, [sp, #4]
 801c39a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c39e:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c3a2:	fb00 2404 	mla	r4, r0, r4, r2
 801c3a6:	6832      	ldr	r2, [r6, #0]
 801c3a8:	686e      	ldr	r6, [r5, #4]
 801c3aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3ae:	3604      	adds	r6, #4
 801c3b0:	4414      	add	r4, r2
 801c3b2:	682a      	ldr	r2, [r5, #0]
 801c3b4:	9202      	str	r2, [sp, #8]
 801c3b6:	9a01      	ldr	r2, [sp, #4]
 801c3b8:	2a00      	cmp	r2, #0
 801c3ba:	dc03      	bgt.n	801c3c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c3bc:	9a03      	ldr	r2, [sp, #12]
 801c3be:	2a00      	cmp	r2, #0
 801c3c0:	f340 80b2 	ble.w	801c528 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c3c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	dd0c      	ble.n	801c3ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c3d4:	1405      	asrs	r5, r0, #16
 801c3d6:	d405      	bmi.n	801c3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3d8:	4575      	cmp	r5, lr
 801c3da:	da03      	bge.n	801c3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3dc:	1415      	asrs	r5, r2, #16
 801c3de:	d401      	bmi.n	801c3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3e0:	4545      	cmp	r5, r8
 801c3e2:	db05      	blt.n	801c3f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c3e4:	4460      	add	r0, ip
 801c3e6:	443a      	add	r2, r7
 801c3e8:	3b01      	subs	r3, #1
 801c3ea:	3403      	adds	r4, #3
 801c3ec:	e7f0      	b.n	801c3d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c3ee:	d03d      	beq.n	801c46c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c3f0:	1e5d      	subs	r5, r3, #1
 801c3f2:	fb0c 0905 	mla	r9, ip, r5, r0
 801c3f6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c3fa:	d42c      	bmi.n	801c456 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c3fc:	45f1      	cmp	r9, lr
 801c3fe:	da2a      	bge.n	801c456 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c400:	fb07 2505 	mla	r5, r7, r5, r2
 801c404:	142d      	asrs	r5, r5, #16
 801c406:	d426      	bmi.n	801c456 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c408:	4545      	cmp	r5, r8
 801c40a:	da24      	bge.n	801c456 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c40c:	1ce5      	adds	r5, r4, #3
 801c40e:	469a      	mov	sl, r3
 801c410:	f1ba 0f00 	cmp.w	sl, #0
 801c414:	f105 0503 	add.w	r5, r5, #3
 801c418:	dd23      	ble.n	801c462 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c41a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c41e:	9902      	ldr	r1, [sp, #8]
 801c420:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c424:	443a      	add	r2, r7
 801c426:	fb0e 1909 	mla	r9, lr, r9, r1
 801c42a:	4460      	add	r0, ip
 801c42c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c430:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c434:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c438:	eb06 0b09 	add.w	fp, r6, r9
 801c43c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c440:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c444:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c448:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c44c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c450:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c454:	e7dc      	b.n	801c410 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c456:	2500      	movs	r5, #0
 801c458:	eba3 0905 	sub.w	r9, r3, r5
 801c45c:	f1b9 0f00 	cmp.w	r9, #0
 801c460:	dc3c      	bgt.n	801c4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c462:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c46a:	441c      	add	r4, r3
 801c46c:	9b01      	ldr	r3, [sp, #4]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	dd5a      	ble.n	801c528 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c472:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c478:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c47c:	eeb0 6a62 	vmov.f32	s12, s5
 801c480:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c484:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c488:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c48c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c490:	eeb0 6a43 	vmov.f32	s12, s6
 801c494:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c498:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c49c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4b4:	ee12 2a90 	vmov	r2, s5
 801c4b8:	eef0 2a47 	vmov.f32	s5, s14
 801c4bc:	fb92 fcf3 	sdiv	ip, r2, r3
 801c4c0:	ee13 2a10 	vmov	r2, s6
 801c4c4:	eeb0 3a67 	vmov.f32	s6, s15
 801c4c8:	fb92 f7f3 	sdiv	r7, r2, r3
 801c4cc:	9b01      	ldr	r3, [sp, #4]
 801c4ce:	9a03      	ldr	r2, [sp, #12]
 801c4d0:	3b01      	subs	r3, #1
 801c4d2:	9301      	str	r3, [sp, #4]
 801c4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4d6:	bf08      	it	eq
 801c4d8:	4613      	moveq	r3, r2
 801c4da:	e76c      	b.n	801c3b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c4dc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c4e0:	d41e      	bmi.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4e2:	45f2      	cmp	sl, lr
 801c4e4:	da1c      	bge.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4e6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c4ea:	d419      	bmi.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4ec:	45c1      	cmp	r9, r8
 801c4ee:	da17      	bge.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4f0:	9902      	ldr	r1, [sp, #8]
 801c4f2:	fb0e 1909 	mla	r9, lr, r9, r1
 801c4f6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c4fa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c4fe:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c502:	eb06 0a09 	add.w	sl, r6, r9
 801c506:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c50a:	f804 b009 	strb.w	fp, [r4, r9]
 801c50e:	44a1      	add	r9, r4
 801c510:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c514:	f889 b001 	strb.w	fp, [r9, #1]
 801c518:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c51c:	f889 a002 	strb.w	sl, [r9, #2]
 801c520:	4460      	add	r0, ip
 801c522:	443a      	add	r2, r7
 801c524:	3501      	adds	r5, #1
 801c526:	e797      	b.n	801c458 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c528:	b005      	add	sp, #20
 801c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c52e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c52e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c532:	b087      	sub	sp, #28
 801c534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c538:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c53a:	9204      	str	r2, [sp, #16]
 801c53c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c540:	6870      	ldr	r0, [r6, #4]
 801c542:	9205      	str	r2, [sp, #20]
 801c544:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c546:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c54a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c54e:	9101      	str	r1, [sp, #4]
 801c550:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c554:	fb00 2505 	mla	r5, r0, r5, r2
 801c558:	6832      	ldr	r2, [r6, #0]
 801c55a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c55e:	4415      	add	r5, r2
 801c560:	6822      	ldr	r2, [r4, #0]
 801c562:	9202      	str	r2, [sp, #8]
 801c564:	6862      	ldr	r2, [r4, #4]
 801c566:	3204      	adds	r2, #4
 801c568:	9203      	str	r2, [sp, #12]
 801c56a:	9a01      	ldr	r2, [sp, #4]
 801c56c:	2a00      	cmp	r2, #0
 801c56e:	dc03      	bgt.n	801c578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c570:	9a04      	ldr	r2, [sp, #16]
 801c572:	2a00      	cmp	r2, #0
 801c574:	f340 8124 	ble.w	801c7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c578:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c57a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c57e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c580:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c584:	2b00      	cmp	r3, #0
 801c586:	dd0e      	ble.n	801c5a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c588:	1422      	asrs	r2, r4, #16
 801c58a:	d405      	bmi.n	801c598 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c58c:	4572      	cmp	r2, lr
 801c58e:	da03      	bge.n	801c598 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c590:	1402      	asrs	r2, r0, #16
 801c592:	d401      	bmi.n	801c598 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c594:	4542      	cmp	r2, r8
 801c596:	db07      	blt.n	801c5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c59a:	3b01      	subs	r3, #1
 801c59c:	3503      	adds	r5, #3
 801c59e:	4414      	add	r4, r2
 801c5a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5a2:	4410      	add	r0, r2
 801c5a4:	e7ee      	b.n	801c584 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c5a6:	d010      	beq.n	801c5ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c5a8:	1e5a      	subs	r2, r3, #1
 801c5aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c5ac:	fb06 4602 	mla	r6, r6, r2, r4
 801c5b0:	1436      	asrs	r6, r6, #16
 801c5b2:	d546      	bpl.n	801c642 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c5b4:	4699      	mov	r9, r3
 801c5b6:	462f      	mov	r7, r5
 801c5b8:	f1b9 0f00 	cmp.w	r9, #0
 801c5bc:	f300 80a5 	bgt.w	801c70a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c5c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5c8:	441d      	add	r5, r3
 801c5ca:	9b01      	ldr	r3, [sp, #4]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	f340 80f7 	ble.w	801c7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c5d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5dc:	eeb0 6a62 	vmov.f32	s12, s5
 801c5e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5f0:	eeb0 6a43 	vmov.f32	s12, s6
 801c5f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5f8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c600:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c604:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c608:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c60c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c610:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c614:	ee12 2a90 	vmov	r2, s5
 801c618:	eef0 2a47 	vmov.f32	s5, s14
 801c61c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c620:	ee13 2a10 	vmov	r2, s6
 801c624:	9313      	str	r3, [sp, #76]	; 0x4c
 801c626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c628:	eeb0 3a67 	vmov.f32	s6, s15
 801c62c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c630:	9314      	str	r3, [sp, #80]	; 0x50
 801c632:	9b01      	ldr	r3, [sp, #4]
 801c634:	9a04      	ldr	r2, [sp, #16]
 801c636:	3b01      	subs	r3, #1
 801c638:	9301      	str	r3, [sp, #4]
 801c63a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c63c:	bf08      	it	eq
 801c63e:	4613      	moveq	r3, r2
 801c640:	e793      	b.n	801c56a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c642:	4576      	cmp	r6, lr
 801c644:	dab6      	bge.n	801c5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c646:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c648:	fb06 0202 	mla	r2, r6, r2, r0
 801c64c:	1412      	asrs	r2, r2, #16
 801c64e:	d4b1      	bmi.n	801c5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c650:	4542      	cmp	r2, r8
 801c652:	daaf      	bge.n	801c5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c654:	1cef      	adds	r7, r5, #3
 801c656:	4699      	mov	r9, r3
 801c658:	f1b9 0f00 	cmp.w	r9, #0
 801c65c:	ddb0      	ble.n	801c5c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c65e:	9902      	ldr	r1, [sp, #8]
 801c660:	1402      	asrs	r2, r0, #16
 801c662:	1426      	asrs	r6, r4, #16
 801c664:	fb0e 1202 	mla	r2, lr, r2, r1
 801c668:	9903      	ldr	r1, [sp, #12]
 801c66a:	5d92      	ldrb	r2, [r2, r6]
 801c66c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c670:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c674:	d041      	beq.n	801c6fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c676:	9a05      	ldr	r2, [sp, #20]
 801c678:	fa5f fb86 	uxtb.w	fp, r6
 801c67c:	fb02 fc0c 	mul.w	ip, r2, ip
 801c680:	f10c 0201 	add.w	r2, ip, #1
 801c684:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c688:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c68c:	1212      	asrs	r2, r2, #8
 801c68e:	fa1f fa82 	uxth.w	sl, r2
 801c692:	43d2      	mvns	r2, r2
 801c694:	fb1b fb0a 	smulbb	fp, fp, sl
 801c698:	b2d2      	uxtb	r2, r2
 801c69a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c69e:	fa1f fc8c 	uxth.w	ip, ip
 801c6a2:	f10c 0b01 	add.w	fp, ip, #1
 801c6a6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c6aa:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c6ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c6b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c6b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c6ba:	fb16 fa0a 	smulbb	sl, r6, sl
 801c6be:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c6c2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c6c6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c6ca:	fb06 aa02 	mla	sl, r6, r2, sl
 801c6ce:	fb0c bc02 	mla	ip, ip, r2, fp
 801c6d2:	fa1f fa8a 	uxth.w	sl, sl
 801c6d6:	fa1f fc8c 	uxth.w	ip, ip
 801c6da:	f10a 0601 	add.w	r6, sl, #1
 801c6de:	f10c 0b01 	add.w	fp, ip, #1
 801c6e2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c6e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c6ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c6f2:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c6f6:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c6fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6fc:	3703      	adds	r7, #3
 801c6fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801c702:	4414      	add	r4, r2
 801c704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c706:	4410      	add	r0, r2
 801c708:	e7a6      	b.n	801c658 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c70a:	1426      	asrs	r6, r4, #16
 801c70c:	d450      	bmi.n	801c7b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c70e:	4576      	cmp	r6, lr
 801c710:	da4e      	bge.n	801c7b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c712:	1402      	asrs	r2, r0, #16
 801c714:	d44c      	bmi.n	801c7b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c716:	4542      	cmp	r2, r8
 801c718:	da4a      	bge.n	801c7b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c71a:	9902      	ldr	r1, [sp, #8]
 801c71c:	fb0e 1202 	mla	r2, lr, r2, r1
 801c720:	9903      	ldr	r1, [sp, #12]
 801c722:	5d92      	ldrb	r2, [r2, r6]
 801c724:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c728:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c72c:	d040      	beq.n	801c7b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c72e:	9a05      	ldr	r2, [sp, #20]
 801c730:	fa5f fb86 	uxtb.w	fp, r6
 801c734:	fb02 fc0c 	mul.w	ip, r2, ip
 801c738:	f10c 0201 	add.w	r2, ip, #1
 801c73c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c740:	f897 c000 	ldrb.w	ip, [r7]
 801c744:	1212      	asrs	r2, r2, #8
 801c746:	fa1f fa82 	uxth.w	sl, r2
 801c74a:	43d2      	mvns	r2, r2
 801c74c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c750:	b2d2      	uxtb	r2, r2
 801c752:	fb0c bc02 	mla	ip, ip, r2, fp
 801c756:	fa1f fc8c 	uxth.w	ip, ip
 801c75a:	f10c 0b01 	add.w	fp, ip, #1
 801c75e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c762:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c766:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c76a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c76e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c772:	fb16 fa0a 	smulbb	sl, r6, sl
 801c776:	78be      	ldrb	r6, [r7, #2]
 801c778:	f887 c000 	strb.w	ip, [r7]
 801c77c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c780:	fb06 aa02 	mla	sl, r6, r2, sl
 801c784:	fb0c bc02 	mla	ip, ip, r2, fp
 801c788:	fa1f fa8a 	uxth.w	sl, sl
 801c78c:	fa1f fc8c 	uxth.w	ip, ip
 801c790:	f10a 0601 	add.w	r6, sl, #1
 801c794:	f10c 0b01 	add.w	fp, ip, #1
 801c798:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c79c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c7a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7a8:	f887 a002 	strb.w	sl, [r7, #2]
 801c7ac:	f887 c001 	strb.w	ip, [r7, #1]
 801c7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7b2:	3703      	adds	r7, #3
 801c7b4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7b8:	4414      	add	r4, r2
 801c7ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7bc:	4410      	add	r0, r2
 801c7be:	e6fb      	b.n	801c5b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c7c0:	b007      	add	sp, #28
 801c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c7c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7ca:	b085      	sub	sp, #20
 801c7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c7d2:	9203      	str	r2, [sp, #12]
 801c7d4:	6870      	ldr	r0, [r6, #4]
 801c7d6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c7d8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c7dc:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c7e0:	9100      	str	r1, [sp, #0]
 801c7e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c7e6:	fb00 2404 	mla	r4, r0, r4, r2
 801c7ea:	6832      	ldr	r2, [r6, #0]
 801c7ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7f0:	4414      	add	r4, r2
 801c7f2:	682a      	ldr	r2, [r5, #0]
 801c7f4:	9201      	str	r2, [sp, #4]
 801c7f6:	686a      	ldr	r2, [r5, #4]
 801c7f8:	3204      	adds	r2, #4
 801c7fa:	9202      	str	r2, [sp, #8]
 801c7fc:	9a00      	ldr	r2, [sp, #0]
 801c7fe:	2a00      	cmp	r2, #0
 801c800:	dc03      	bgt.n	801c80a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c802:	9a03      	ldr	r2, [sp, #12]
 801c804:	2a00      	cmp	r2, #0
 801c806:	f340 8131 	ble.w	801ca6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c80a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c80c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c812:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c816:	2b00      	cmp	r3, #0
 801c818:	dd0e      	ble.n	801c838 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c81a:	1405      	asrs	r5, r0, #16
 801c81c:	d405      	bmi.n	801c82a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c81e:	4575      	cmp	r5, lr
 801c820:	da03      	bge.n	801c82a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c822:	1415      	asrs	r5, r2, #16
 801c824:	d401      	bmi.n	801c82a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c826:	4545      	cmp	r5, r8
 801c828:	db07      	blt.n	801c83a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c82a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c82c:	3b01      	subs	r3, #1
 801c82e:	3403      	adds	r4, #3
 801c830:	4428      	add	r0, r5
 801c832:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c834:	442a      	add	r2, r5
 801c836:	e7ee      	b.n	801c816 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c838:	d06f      	beq.n	801c91a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c83a:	1e5d      	subs	r5, r3, #1
 801c83c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c83e:	fb06 0605 	mla	r6, r6, r5, r0
 801c842:	1436      	asrs	r6, r6, #16
 801c844:	d460      	bmi.n	801c908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c846:	4576      	cmp	r6, lr
 801c848:	da5e      	bge.n	801c908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c84a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c84c:	fb06 2505 	mla	r5, r6, r5, r2
 801c850:	142d      	asrs	r5, r5, #16
 801c852:	d459      	bmi.n	801c908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c854:	4545      	cmp	r5, r8
 801c856:	da57      	bge.n	801c908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c858:	1ce5      	adds	r5, r4, #3
 801c85a:	469a      	mov	sl, r3
 801c85c:	f1ba 0f00 	cmp.w	sl, #0
 801c860:	dd56      	ble.n	801c910 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c862:	9901      	ldr	r1, [sp, #4]
 801c864:	1416      	asrs	r6, r2, #16
 801c866:	1407      	asrs	r7, r0, #16
 801c868:	fb0e 1606 	mla	r6, lr, r6, r1
 801c86c:	9902      	ldr	r1, [sp, #8]
 801c86e:	5df6      	ldrb	r6, [r6, r7]
 801c870:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c874:	0e37      	lsrs	r7, r6, #24
 801c876:	2fff      	cmp	r7, #255	; 0xff
 801c878:	f000 80ef 	beq.w	801ca5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c87c:	fa5f fc87 	uxtb.w	ip, r7
 801c880:	b3d7      	cbz	r7, 801c8f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c882:	fa1f f78c 	uxth.w	r7, ip
 801c886:	ea6f 0c0c 	mvn.w	ip, ip
 801c88a:	fa5f fb86 	uxtb.w	fp, r6
 801c88e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c892:	fa5f fc8c 	uxtb.w	ip, ip
 801c896:	fb1b fb07 	smulbb	fp, fp, r7
 801c89a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c89e:	fa1f f989 	uxth.w	r9, r9
 801c8a2:	f109 0b01 	add.w	fp, r9, #1
 801c8a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8aa:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c8ae:	fb1b fb0c 	smulbb	fp, fp, ip
 801c8b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8b6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c8ba:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c8be:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c8c2:	fb09 b907 	mla	r9, r9, r7, fp
 801c8c6:	fa1f f989 	uxth.w	r9, r9
 801c8ca:	f109 0b01 	add.w	fp, r9, #1
 801c8ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8d6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c8da:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c8de:	fb19 fc0c 	smulbb	ip, r9, ip
 801c8e2:	fb06 c607 	mla	r6, r6, r7, ip
 801c8e6:	b2b6      	uxth	r6, r6
 801c8e8:	f106 0c01 	add.w	ip, r6, #1
 801c8ec:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c8f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c8f4:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c8f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c8fa:	3503      	adds	r5, #3
 801c8fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c900:	4408      	add	r0, r1
 801c902:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c904:	440a      	add	r2, r1
 801c906:	e7a9      	b.n	801c85c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c908:	2600      	movs	r6, #0
 801c90a:	1b9d      	subs	r5, r3, r6
 801c90c:	2d00      	cmp	r5, #0
 801c90e:	dc40      	bgt.n	801c992 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c918:	441c      	add	r4, r3
 801c91a:	9b00      	ldr	r3, [sp, #0]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	f340 80a5 	ble.w	801ca6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c922:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c928:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c92c:	eeb0 6a62 	vmov.f32	s12, s5
 801c930:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c934:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c938:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c93c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c940:	eeb0 6a43 	vmov.f32	s12, s6
 801c944:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c948:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c94c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c950:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c954:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c958:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c95c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c960:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c964:	ee12 2a90 	vmov	r2, s5
 801c968:	eef0 2a47 	vmov.f32	s5, s14
 801c96c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c970:	ee13 2a10 	vmov	r2, s6
 801c974:	9311      	str	r3, [sp, #68]	; 0x44
 801c976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c978:	eeb0 3a67 	vmov.f32	s6, s15
 801c97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c980:	9312      	str	r3, [sp, #72]	; 0x48
 801c982:	9b00      	ldr	r3, [sp, #0]
 801c984:	9a03      	ldr	r2, [sp, #12]
 801c986:	3b01      	subs	r3, #1
 801c988:	9300      	str	r3, [sp, #0]
 801c98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c98c:	bf08      	it	eq
 801c98e:	4613      	moveq	r3, r2
 801c990:	e734      	b.n	801c7fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c992:	1407      	asrs	r7, r0, #16
 801c994:	d450      	bmi.n	801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c996:	4577      	cmp	r7, lr
 801c998:	da4e      	bge.n	801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c99a:	1415      	asrs	r5, r2, #16
 801c99c:	d44c      	bmi.n	801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c99e:	4545      	cmp	r5, r8
 801c9a0:	da4a      	bge.n	801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9a2:	9901      	ldr	r1, [sp, #4]
 801c9a4:	fb0e 1505 	mla	r5, lr, r5, r1
 801c9a8:	9902      	ldr	r1, [sp, #8]
 801c9aa:	5ded      	ldrb	r5, [r5, r7]
 801c9ac:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c9b0:	0e2f      	lsrs	r7, r5, #24
 801c9b2:	2fff      	cmp	r7, #255	; 0xff
 801c9b4:	d046      	beq.n	801ca44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c9b6:	fa5f f987 	uxtb.w	r9, r7
 801c9ba:	b3ef      	cbz	r7, 801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9bc:	fa1f fc89 	uxth.w	ip, r9
 801c9c0:	ea6f 0909 	mvn.w	r9, r9
 801c9c4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c9c8:	fa5f fb85 	uxtb.w	fp, r5
 801c9cc:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c9d0:	fa5f f989 	uxtb.w	r9, r9
 801c9d4:	fb1b fb0c 	smulbb	fp, fp, ip
 801c9d8:	fb0a ba09 	mla	sl, sl, r9, fp
 801c9dc:	fa1f fa8a 	uxth.w	sl, sl
 801c9e0:	f10a 0b01 	add.w	fp, sl, #1
 801c9e4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c9e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9ec:	f804 a007 	strb.w	sl, [r4, r7]
 801c9f0:	4427      	add	r7, r4
 801c9f2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c9f6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c9fa:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c9fe:	fb1b fb09 	smulbb	fp, fp, r9
 801ca02:	fb0a ba0c 	mla	sl, sl, ip, fp
 801ca06:	fa1f fa8a 	uxth.w	sl, sl
 801ca0a:	f10a 0b01 	add.w	fp, sl, #1
 801ca0e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca16:	f887 a001 	strb.w	sl, [r7, #1]
 801ca1a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ca1e:	fb1a f909 	smulbb	r9, sl, r9
 801ca22:	fb05 950c 	mla	r5, r5, ip, r9
 801ca26:	b2ad      	uxth	r5, r5
 801ca28:	f105 0901 	add.w	r9, r5, #1
 801ca2c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca30:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca34:	f887 9002 	strb.w	r9, [r7, #2]
 801ca38:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca3a:	3601      	adds	r6, #1
 801ca3c:	4408      	add	r0, r1
 801ca3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ca40:	440a      	add	r2, r1
 801ca42:	e762      	b.n	801c90a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ca44:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca48:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801ca4c:	55e5      	strb	r5, [r4, r7]
 801ca4e:	4427      	add	r7, r4
 801ca50:	0c2d      	lsrs	r5, r5, #16
 801ca52:	f887 c001 	strb.w	ip, [r7, #1]
 801ca56:	70bd      	strb	r5, [r7, #2]
 801ca58:	e7ee      	b.n	801ca38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ca5a:	0a37      	lsrs	r7, r6, #8
 801ca5c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ca60:	0c36      	lsrs	r6, r6, #16
 801ca62:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ca66:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ca6a:	e745      	b.n	801c8f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801ca6c:	b005      	add	sp, #20
 801ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca76:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ca78:	9201      	str	r2, [sp, #4]
 801ca7a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ca7e:	6870      	ldr	r0, [r6, #4]
 801ca80:	9200      	str	r2, [sp, #0]
 801ca82:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801ca86:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801ca8a:	fa1f fc85 	uxth.w	ip, r5
 801ca8e:	43ed      	mvns	r5, r5
 801ca90:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca94:	b2ed      	uxtb	r5, r5
 801ca96:	fb00 2404 	mla	r4, r0, r4, r2
 801ca9a:	6832      	ldr	r2, [r6, #0]
 801ca9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801caa0:	4414      	add	r4, r2
 801caa2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801caa4:	f8d2 8000 	ldr.w	r8, [r2]
 801caa8:	2900      	cmp	r1, #0
 801caaa:	dc03      	bgt.n	801cab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801caac:	9a01      	ldr	r2, [sp, #4]
 801caae:	2a00      	cmp	r2, #0
 801cab0:	f340 8104 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801cab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cab6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801caba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cabc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	dd0f      	ble.n	801cae4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801cac4:	1406      	asrs	r6, r0, #16
 801cac6:	d406      	bmi.n	801cad6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801cac8:	4576      	cmp	r6, lr
 801caca:	da04      	bge.n	801cad6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801cacc:	1416      	asrs	r6, r2, #16
 801cace:	d402      	bmi.n	801cad6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801cad0:	9f00      	ldr	r7, [sp, #0]
 801cad2:	42be      	cmp	r6, r7
 801cad4:	db07      	blt.n	801cae6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801cad6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cad8:	3b01      	subs	r3, #1
 801cada:	3403      	adds	r4, #3
 801cadc:	4430      	add	r0, r6
 801cade:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cae0:	4432      	add	r2, r6
 801cae2:	e7ed      	b.n	801cac0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801cae4:	d05f      	beq.n	801cba6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801cae6:	1e5e      	subs	r6, r3, #1
 801cae8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801caea:	fb07 0706 	mla	r7, r7, r6, r0
 801caee:	143f      	asrs	r7, r7, #16
 801caf0:	d450      	bmi.n	801cb94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801caf2:	4577      	cmp	r7, lr
 801caf4:	da4e      	bge.n	801cb94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801caf6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801caf8:	fb07 2606 	mla	r6, r7, r6, r2
 801cafc:	1436      	asrs	r6, r6, #16
 801cafe:	d449      	bmi.n	801cb94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb00:	9f00      	ldr	r7, [sp, #0]
 801cb02:	42be      	cmp	r6, r7
 801cb04:	da46      	bge.n	801cb94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb06:	1ce6      	adds	r6, r4, #3
 801cb08:	4699      	mov	r9, r3
 801cb0a:	f1b9 0f00 	cmp.w	r9, #0
 801cb0e:	f106 0603 	add.w	r6, r6, #3
 801cb12:	dd43      	ble.n	801cb9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801cb14:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb18:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb1c:	1417      	asrs	r7, r2, #16
 801cb1e:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb22:	fb1b fb05 	smulbb	fp, fp, r5
 801cb26:	fb0e a707 	mla	r7, lr, r7, sl
 801cb2a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb2e:	eb08 0a07 	add.w	sl, r8, r7
 801cb32:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb36:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb3a:	b2bf      	uxth	r7, r7
 801cb3c:	f107 0b01 	add.w	fp, r7, #1
 801cb40:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb44:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb48:	fb1b fb05 	smulbb	fp, fp, r5
 801cb4c:	123f      	asrs	r7, r7, #8
 801cb4e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cb52:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cb56:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb5a:	b2bf      	uxth	r7, r7
 801cb5c:	f107 0b01 	add.w	fp, r7, #1
 801cb60:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb64:	123f      	asrs	r7, r7, #8
 801cb66:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cb6a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cb6e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cb72:	fb1a fa05 	smulbb	sl, sl, r5
 801cb76:	fb07 a70c 	mla	r7, r7, ip, sl
 801cb7a:	b2bf      	uxth	r7, r7
 801cb7c:	f107 0a01 	add.w	sl, r7, #1
 801cb80:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cb84:	123f      	asrs	r7, r7, #8
 801cb86:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cb8a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb8c:	4438      	add	r0, r7
 801cb8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb90:	443a      	add	r2, r7
 801cb92:	e7ba      	b.n	801cb0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801cb94:	2700      	movs	r7, #0
 801cb96:	1bde      	subs	r6, r3, r7
 801cb98:	2e00      	cmp	r6, #0
 801cb9a:	dc3f      	bgt.n	801cc1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801cb9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cba4:	441c      	add	r4, r3
 801cba6:	2900      	cmp	r1, #0
 801cba8:	f340 8088 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801cbac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbb6:	3901      	subs	r1, #1
 801cbb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbbc:	eef0 6a62 	vmov.f32	s13, s5
 801cbc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cbc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbcc:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cbd0:	eef0 6a43 	vmov.f32	s13, s6
 801cbd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbd8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cbdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbf4:	ee12 2a90 	vmov	r2, s5
 801cbf8:	eef0 2a47 	vmov.f32	s5, s14
 801cbfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc00:	ee13 2a10 	vmov	r2, s6
 801cc04:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc08:	eeb0 3a67 	vmov.f32	s6, s15
 801cc0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc10:	9a01      	ldr	r2, [sp, #4]
 801cc12:	9310      	str	r3, [sp, #64]	; 0x40
 801cc14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc16:	bf08      	it	eq
 801cc18:	4613      	moveq	r3, r2
 801cc1a:	e745      	b.n	801caa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801cc1c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cc20:	d446      	bmi.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc22:	45f2      	cmp	sl, lr
 801cc24:	da44      	bge.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc26:	ea5f 4922 	movs.w	r9, r2, asr #16
 801cc2a:	d441      	bmi.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc2c:	9e00      	ldr	r6, [sp, #0]
 801cc2e:	45b1      	cmp	r9, r6
 801cc30:	da3e      	bge.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc32:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc36:	fb0e a909 	mla	r9, lr, r9, sl
 801cc3a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cc3e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc42:	fb1b fb05 	smulbb	fp, fp, r5
 801cc46:	eb08 0a09 	add.w	sl, r8, r9
 801cc4a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cc4e:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc52:	fa1f f989 	uxth.w	r9, r9
 801cc56:	f109 0b01 	add.w	fp, r9, #1
 801cc5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc5e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc62:	f804 9006 	strb.w	r9, [r4, r6]
 801cc66:	4426      	add	r6, r4
 801cc68:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cc6c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc70:	fb1b fb05 	smulbb	fp, fp, r5
 801cc74:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc78:	fa1f f989 	uxth.w	r9, r9
 801cc7c:	f109 0b01 	add.w	fp, r9, #1
 801cc80:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc84:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc88:	f886 9001 	strb.w	r9, [r6, #1]
 801cc8c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc90:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cc94:	fb1a fa05 	smulbb	sl, sl, r5
 801cc98:	fb09 a90c 	mla	r9, r9, ip, sl
 801cc9c:	fa1f f989 	uxth.w	r9, r9
 801cca0:	f109 0a01 	add.w	sl, r9, #1
 801cca4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cca8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccac:	f886 9002 	strb.w	r9, [r6, #2]
 801ccb0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ccb2:	3701      	adds	r7, #1
 801ccb4:	4430      	add	r0, r6
 801ccb6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ccb8:	4432      	add	r2, r6
 801ccba:	e76c      	b.n	801cb96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801ccbc:	b003      	add	sp, #12
 801ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ccc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ccc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cccc:	9201      	str	r2, [sp, #4]
 801ccce:	6868      	ldr	r0, [r5, #4]
 801ccd0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801ccd4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801ccd8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ccdc:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801cce0:	fb00 2404 	mla	r4, r0, r4, r2
 801cce4:	682a      	ldr	r2, [r5, #0]
 801cce6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ccea:	4414      	add	r4, r2
 801ccec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ccee:	f8d2 9000 	ldr.w	r9, [r2]
 801ccf2:	2900      	cmp	r1, #0
 801ccf4:	dc03      	bgt.n	801ccfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ccf6:	9a01      	ldr	r2, [sp, #4]
 801ccf8:	2a00      	cmp	r2, #0
 801ccfa:	f340 80a8 	ble.w	801ce4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ccfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd06:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dd0c      	ble.n	801cd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cd0e:	1405      	asrs	r5, r0, #16
 801cd10:	d405      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd12:	4565      	cmp	r5, ip
 801cd14:	da03      	bge.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd16:	1415      	asrs	r5, r2, #16
 801cd18:	d401      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd1a:	4575      	cmp	r5, lr
 801cd1c:	db05      	blt.n	801cd2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801cd1e:	4438      	add	r0, r7
 801cd20:	4432      	add	r2, r6
 801cd22:	3b01      	subs	r3, #1
 801cd24:	3403      	adds	r4, #3
 801cd26:	e7f0      	b.n	801cd0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cd28:	d03a      	beq.n	801cda0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801cd2a:	1e5d      	subs	r5, r3, #1
 801cd2c:	fb07 0805 	mla	r8, r7, r5, r0
 801cd30:	ea5f 4828 	movs.w	r8, r8, asr #16
 801cd34:	d429      	bmi.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd36:	45e0      	cmp	r8, ip
 801cd38:	da27      	bge.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd3a:	fb06 2505 	mla	r5, r6, r5, r2
 801cd3e:	142d      	asrs	r5, r5, #16
 801cd40:	d423      	bmi.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd42:	4575      	cmp	r5, lr
 801cd44:	da21      	bge.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd46:	f104 0803 	add.w	r8, r4, #3
 801cd4a:	469a      	mov	sl, r3
 801cd4c:	f1ba 0f00 	cmp.w	sl, #0
 801cd50:	f108 0803 	add.w	r8, r8, #3
 801cd54:	dd1f      	ble.n	801cd96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cd56:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cd5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd5e:	1415      	asrs	r5, r2, #16
 801cd60:	4438      	add	r0, r7
 801cd62:	4432      	add	r2, r6
 801cd64:	fb0c b505 	mla	r5, ip, r5, fp
 801cd68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd6c:	eb09 0b05 	add.w	fp, r9, r5
 801cd70:	f819 5005 	ldrb.w	r5, [r9, r5]
 801cd74:	f808 5c06 	strb.w	r5, [r8, #-6]
 801cd78:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801cd7c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801cd80:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801cd84:	f808 5c04 	strb.w	r5, [r8, #-4]
 801cd88:	e7e0      	b.n	801cd4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cd8a:	2500      	movs	r5, #0
 801cd8c:	eba3 0805 	sub.w	r8, r3, r5
 801cd90:	f1b8 0f00 	cmp.w	r8, #0
 801cd94:	dc38      	bgt.n	801ce08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801cd96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd9e:	441c      	add	r4, r3
 801cda0:	2900      	cmp	r1, #0
 801cda2:	dd54      	ble.n	801ce4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cda4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdae:	3901      	subs	r1, #1
 801cdb0:	eeb0 6a62 	vmov.f32	s12, s5
 801cdb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdc0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cdc4:	eeb0 6a43 	vmov.f32	s12, s6
 801cdc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdcc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cdd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cddc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cde0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cde4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cde8:	ee12 2a90 	vmov	r2, s5
 801cdec:	eef0 2a47 	vmov.f32	s5, s14
 801cdf0:	fb92 f7f3 	sdiv	r7, r2, r3
 801cdf4:	ee13 2a10 	vmov	r2, s6
 801cdf8:	eeb0 3a67 	vmov.f32	s6, s15
 801cdfc:	fb92 f6f3 	sdiv	r6, r2, r3
 801ce00:	9a01      	ldr	r2, [sp, #4]
 801ce02:	bf08      	it	eq
 801ce04:	4613      	moveq	r3, r2
 801ce06:	e774      	b.n	801ccf2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ce08:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ce0c:	d41b      	bmi.n	801ce46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce0e:	45e2      	cmp	sl, ip
 801ce10:	da19      	bge.n	801ce46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce12:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ce16:	d416      	bmi.n	801ce46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce18:	45f0      	cmp	r8, lr
 801ce1a:	da14      	bge.n	801ce46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce1c:	fb0c a808 	mla	r8, ip, r8, sl
 801ce20:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ce24:	f819 b008 	ldrb.w	fp, [r9, r8]
 801ce28:	eb09 0a08 	add.w	sl, r9, r8
 801ce2c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801ce30:	f804 b008 	strb.w	fp, [r4, r8]
 801ce34:	44a0      	add	r8, r4
 801ce36:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ce3a:	f888 b001 	strb.w	fp, [r8, #1]
 801ce3e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ce42:	f888 a002 	strb.w	sl, [r8, #2]
 801ce46:	4438      	add	r0, r7
 801ce48:	4432      	add	r2, r6
 801ce4a:	3501      	adds	r5, #1
 801ce4c:	e79e      	b.n	801cd8c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801ce4e:	b003      	add	sp, #12
 801ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce58:	b085      	sub	sp, #20
 801ce5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce60:	9202      	str	r2, [sp, #8]
 801ce62:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ce66:	6860      	ldr	r0, [r4, #4]
 801ce68:	9203      	str	r2, [sp, #12]
 801ce6a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ce6e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ce72:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce76:	fb00 2505 	mla	r5, r0, r5, r2
 801ce7a:	6822      	ldr	r2, [r4, #0]
 801ce7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce80:	4415      	add	r5, r2
 801ce82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce84:	6812      	ldr	r2, [r2, #0]
 801ce86:	9201      	str	r2, [sp, #4]
 801ce88:	2900      	cmp	r1, #0
 801ce8a:	dc03      	bgt.n	801ce94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ce8c:	9a02      	ldr	r2, [sp, #8]
 801ce8e:	2a00      	cmp	r2, #0
 801ce90:	f340 811c 	ble.w	801d0cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ce94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce96:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ce9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce9c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	dd0e      	ble.n	801cec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cea4:	1422      	asrs	r2, r4, #16
 801cea6:	d405      	bmi.n	801ceb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cea8:	4572      	cmp	r2, lr
 801ceaa:	da03      	bge.n	801ceb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ceac:	1402      	asrs	r2, r0, #16
 801ceae:	d401      	bmi.n	801ceb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ceb0:	4542      	cmp	r2, r8
 801ceb2:	db07      	blt.n	801cec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ceb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ceb6:	3b01      	subs	r3, #1
 801ceb8:	3503      	adds	r5, #3
 801ceba:	4414      	add	r4, r2
 801cebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cebe:	4410      	add	r0, r2
 801cec0:	e7ee      	b.n	801cea0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cec2:	d072      	beq.n	801cfaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cec4:	1e5a      	subs	r2, r3, #1
 801cec6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cec8:	fb06 4602 	mla	r6, r6, r2, r4
 801cecc:	1436      	asrs	r6, r6, #16
 801cece:	d461      	bmi.n	801cf94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ced0:	4576      	cmp	r6, lr
 801ced2:	da5f      	bge.n	801cf94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ced4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ced6:	fb06 0202 	mla	r2, r6, r2, r0
 801ceda:	1412      	asrs	r2, r2, #16
 801cedc:	d45a      	bmi.n	801cf94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cede:	4542      	cmp	r2, r8
 801cee0:	da58      	bge.n	801cf94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cee2:	1cef      	adds	r7, r5, #3
 801cee4:	4699      	mov	r9, r3
 801cee6:	f1b9 0f00 	cmp.w	r9, #0
 801ceea:	dd59      	ble.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ceec:	1426      	asrs	r6, r4, #16
 801ceee:	1402      	asrs	r2, r0, #16
 801cef0:	fb0e 6202 	mla	r2, lr, r2, r6
 801cef4:	9e01      	ldr	r6, [sp, #4]
 801cef6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cefa:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cefe:	d041      	beq.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cf00:	9a03      	ldr	r2, [sp, #12]
 801cf02:	fa5f fb86 	uxtb.w	fp, r6
 801cf06:	fb02 fc0c 	mul.w	ip, r2, ip
 801cf0a:	f10c 0201 	add.w	r2, ip, #1
 801cf0e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cf12:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cf16:	1212      	asrs	r2, r2, #8
 801cf18:	fa1f fa82 	uxth.w	sl, r2
 801cf1c:	43d2      	mvns	r2, r2
 801cf1e:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf22:	b2d2      	uxtb	r2, r2
 801cf24:	fb0c bc02 	mla	ip, ip, r2, fp
 801cf28:	fa1f fc8c 	uxth.w	ip, ip
 801cf2c:	f10c 0b01 	add.w	fp, ip, #1
 801cf30:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf34:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cf38:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cf3c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf40:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf44:	fb16 fa0a 	smulbb	sl, r6, sl
 801cf48:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cf4c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cf50:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cf54:	fb06 aa02 	mla	sl, r6, r2, sl
 801cf58:	fb0c bc02 	mla	ip, ip, r2, fp
 801cf5c:	fa1f fa8a 	uxth.w	sl, sl
 801cf60:	fa1f fc8c 	uxth.w	ip, ip
 801cf64:	f10a 0601 	add.w	r6, sl, #1
 801cf68:	f10c 0b01 	add.w	fp, ip, #1
 801cf6c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cf70:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf74:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf78:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf7c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cf80:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cf84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cf86:	3703      	adds	r7, #3
 801cf88:	f109 39ff 	add.w	r9, r9, #4294967295
 801cf8c:	4414      	add	r4, r2
 801cf8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf90:	4410      	add	r0, r2
 801cf92:	e7a8      	b.n	801cee6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cf94:	f04f 0c00 	mov.w	ip, #0
 801cf98:	eba3 020c 	sub.w	r2, r3, ip
 801cf9c:	2a00      	cmp	r2, #0
 801cf9e:	dc3d      	bgt.n	801d01c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cfa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfa8:	441d      	add	r5, r3
 801cfaa:	2900      	cmp	r1, #0
 801cfac:	f340 808e 	ble.w	801d0cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cfb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfba:	3901      	subs	r1, #1
 801cfbc:	eeb0 6a62 	vmov.f32	s12, s5
 801cfc0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfcc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cfd0:	eeb0 6a43 	vmov.f32	s12, s6
 801cfd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfd8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cfdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cff0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cff4:	ee12 2a90 	vmov	r2, s5
 801cff8:	eef0 2a47 	vmov.f32	s5, s14
 801cffc:	fb92 f3f3 	sdiv	r3, r2, r3
 801d000:	ee13 2a10 	vmov	r2, s6
 801d004:	9311      	str	r3, [sp, #68]	; 0x44
 801d006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d008:	eeb0 3a67 	vmov.f32	s6, s15
 801d00c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d010:	9a02      	ldr	r2, [sp, #8]
 801d012:	9312      	str	r3, [sp, #72]	; 0x48
 801d014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d016:	bf08      	it	eq
 801d018:	4613      	moveq	r3, r2
 801d01a:	e735      	b.n	801ce88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801d01c:	1426      	asrs	r6, r4, #16
 801d01e:	d44e      	bmi.n	801d0be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d020:	4576      	cmp	r6, lr
 801d022:	da4c      	bge.n	801d0be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d024:	1402      	asrs	r2, r0, #16
 801d026:	d44a      	bmi.n	801d0be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d028:	4542      	cmp	r2, r8
 801d02a:	da48      	bge.n	801d0be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d02c:	fb0e 6202 	mla	r2, lr, r2, r6
 801d030:	9e01      	ldr	r6, [sp, #4]
 801d032:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d036:	0e3a      	lsrs	r2, r7, #24
 801d038:	d041      	beq.n	801d0be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d03a:	9e03      	ldr	r6, [sp, #12]
 801d03c:	fa5f fb87 	uxtb.w	fp, r7
 801d040:	4372      	muls	r2, r6
 801d042:	1c56      	adds	r6, r2, #1
 801d044:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d048:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801d04c:	1212      	asrs	r2, r2, #8
 801d04e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d052:	fa1f fa82 	uxth.w	sl, r2
 801d056:	43d2      	mvns	r2, r2
 801d058:	fb1b fb0a 	smulbb	fp, fp, sl
 801d05c:	b2d2      	uxtb	r2, r2
 801d05e:	fb09 b902 	mla	r9, r9, r2, fp
 801d062:	fa1f f989 	uxth.w	r9, r9
 801d066:	f109 0b01 	add.w	fp, r9, #1
 801d06a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d06e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d072:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d076:	fb1b fb0a 	smulbb	fp, fp, sl
 801d07a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d07e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d082:	f805 9006 	strb.w	r9, [r5, r6]
 801d086:	442e      	add	r6, r5
 801d088:	78b7      	ldrb	r7, [r6, #2]
 801d08a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d08e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d092:	fb09 b902 	mla	r9, r9, r2, fp
 801d096:	fa1f fa8a 	uxth.w	sl, sl
 801d09a:	fa1f f989 	uxth.w	r9, r9
 801d09e:	f10a 0701 	add.w	r7, sl, #1
 801d0a2:	f109 0b01 	add.w	fp, r9, #1
 801d0a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0b6:	f886 a002 	strb.w	sl, [r6, #2]
 801d0ba:	f886 9001 	strb.w	r9, [r6, #1]
 801d0be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0c0:	f10c 0c01 	add.w	ip, ip, #1
 801d0c4:	4414      	add	r4, r2
 801d0c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0c8:	4410      	add	r0, r2
 801d0ca:	e765      	b.n	801cf98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801d0cc:	b005      	add	sp, #20
 801d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d6:	b085      	sub	sp, #20
 801d0d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d0de:	9203      	str	r2, [sp, #12]
 801d0e0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d0e4:	6860      	ldr	r0, [r4, #4]
 801d0e6:	9201      	str	r2, [sp, #4]
 801d0e8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d0ec:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d0f0:	fb00 2505 	mla	r5, r0, r5, r2
 801d0f4:	6822      	ldr	r2, [r4, #0]
 801d0f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0fa:	4415      	add	r5, r2
 801d0fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d0fe:	6812      	ldr	r2, [r2, #0]
 801d100:	9202      	str	r2, [sp, #8]
 801d102:	2900      	cmp	r1, #0
 801d104:	dc03      	bgt.n	801d10e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d106:	9a03      	ldr	r2, [sp, #12]
 801d108:	2a00      	cmp	r2, #0
 801d10a:	f340 8122 	ble.w	801d352 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d10e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d110:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d116:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	dd0f      	ble.n	801d13e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d11e:	1422      	asrs	r2, r4, #16
 801d120:	d406      	bmi.n	801d130 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d122:	4572      	cmp	r2, lr
 801d124:	da04      	bge.n	801d130 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d126:	1402      	asrs	r2, r0, #16
 801d128:	d402      	bmi.n	801d130 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d12a:	9e01      	ldr	r6, [sp, #4]
 801d12c:	42b2      	cmp	r2, r6
 801d12e:	db07      	blt.n	801d140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d130:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d132:	3b01      	subs	r3, #1
 801d134:	3503      	adds	r5, #3
 801d136:	4414      	add	r4, r2
 801d138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d13a:	4410      	add	r0, r2
 801d13c:	e7ed      	b.n	801d11a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801d13e:	d06e      	beq.n	801d21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801d140:	1e5a      	subs	r2, r3, #1
 801d142:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d144:	fb06 4602 	mla	r6, r6, r2, r4
 801d148:	1436      	asrs	r6, r6, #16
 801d14a:	d45d      	bmi.n	801d208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d14c:	4576      	cmp	r6, lr
 801d14e:	da5b      	bge.n	801d208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d150:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d152:	fb06 0202 	mla	r2, r6, r2, r0
 801d156:	1412      	asrs	r2, r2, #16
 801d158:	d456      	bmi.n	801d208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d15a:	9e01      	ldr	r6, [sp, #4]
 801d15c:	42b2      	cmp	r2, r6
 801d15e:	da53      	bge.n	801d208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d160:	1cee      	adds	r6, r5, #3
 801d162:	469a      	mov	sl, r3
 801d164:	f1ba 0f00 	cmp.w	sl, #0
 801d168:	dd54      	ble.n	801d214 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d16a:	1427      	asrs	r7, r4, #16
 801d16c:	1402      	asrs	r2, r0, #16
 801d16e:	fb0e 7202 	mla	r2, lr, r2, r7
 801d172:	9f02      	ldr	r7, [sp, #8]
 801d174:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d178:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801d17c:	d03c      	beq.n	801d1f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d17e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d182:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d186:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d18a:	fa5f f28c 	uxtb.w	r2, ip
 801d18e:	b2ff      	uxtb	r7, r7
 801d190:	f000 80d8 	beq.w	801d344 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d194:	fa1f f882 	uxth.w	r8, r2
 801d198:	43d2      	mvns	r2, r2
 801d19a:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d19e:	fb17 f708 	smulbb	r7, r7, r8
 801d1a2:	b2d2      	uxtb	r2, r2
 801d1a4:	fb19 f908 	smulbb	r9, r9, r8
 801d1a8:	fb0c 7702 	mla	r7, ip, r2, r7
 801d1ac:	fb1b f808 	smulbb	r8, fp, r8
 801d1b0:	b2bf      	uxth	r7, r7
 801d1b2:	f107 0c01 	add.w	ip, r7, #1
 801d1b6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d1ba:	123f      	asrs	r7, r7, #8
 801d1bc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d1c0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d1c4:	fb07 9902 	mla	r9, r7, r2, r9
 801d1c8:	fa1f f989 	uxth.w	r9, r9
 801d1cc:	f109 0701 	add.w	r7, r9, #1
 801d1d0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1d4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1d8:	fb07 8802 	mla	r8, r7, r2, r8
 801d1dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1e0:	fa1f f888 	uxth.w	r8, r8
 801d1e4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d1e8:	f108 0201 	add.w	r2, r8, #1
 801d1ec:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d1f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d1f4:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d1f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1fa:	3603      	adds	r6, #3
 801d1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d200:	4414      	add	r4, r2
 801d202:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d204:	4410      	add	r0, r2
 801d206:	e7ad      	b.n	801d164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d208:	f04f 0c00 	mov.w	ip, #0
 801d20c:	eba3 020c 	sub.w	r2, r3, ip
 801d210:	2a00      	cmp	r2, #0
 801d212:	dc3d      	bgt.n	801d290 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801d214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d21c:	441d      	add	r5, r3
 801d21e:	2900      	cmp	r1, #0
 801d220:	f340 8097 	ble.w	801d352 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d224:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d22a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d22e:	3901      	subs	r1, #1
 801d230:	eeb0 6a62 	vmov.f32	s12, s5
 801d234:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d238:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d23c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d240:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d244:	eeb0 6a43 	vmov.f32	s12, s6
 801d248:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d24c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d250:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d254:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d258:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d25c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d260:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d264:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d268:	ee12 2a90 	vmov	r2, s5
 801d26c:	eef0 2a47 	vmov.f32	s5, s14
 801d270:	fb92 f3f3 	sdiv	r3, r2, r3
 801d274:	ee13 2a10 	vmov	r2, s6
 801d278:	9311      	str	r3, [sp, #68]	; 0x44
 801d27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d27c:	eeb0 3a67 	vmov.f32	s6, s15
 801d280:	fb92 f3f3 	sdiv	r3, r2, r3
 801d284:	9a03      	ldr	r2, [sp, #12]
 801d286:	9312      	str	r3, [sp, #72]	; 0x48
 801d288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d28a:	bf08      	it	eq
 801d28c:	4613      	moveq	r3, r2
 801d28e:	e738      	b.n	801d102 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d290:	1426      	asrs	r6, r4, #16
 801d292:	d448      	bmi.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d294:	4576      	cmp	r6, lr
 801d296:	da46      	bge.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d298:	1402      	asrs	r2, r0, #16
 801d29a:	d444      	bmi.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d29c:	9f01      	ldr	r7, [sp, #4]
 801d29e:	42ba      	cmp	r2, r7
 801d2a0:	da41      	bge.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2a2:	fb0e 6202 	mla	r2, lr, r2, r6
 801d2a6:	9e02      	ldr	r6, [sp, #8]
 801d2a8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d2ac:	0e3a      	lsrs	r2, r7, #24
 801d2ae:	d03a      	beq.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2b0:	2aff      	cmp	r2, #255	; 0xff
 801d2b2:	b2d6      	uxtb	r6, r2
 801d2b4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2b8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d2bc:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801d2c0:	b2ff      	uxtb	r7, r7
 801d2c2:	d037      	beq.n	801d334 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d2c4:	fa1f f986 	uxth.w	r9, r6
 801d2c8:	4462      	add	r2, ip
 801d2ca:	43f6      	mvns	r6, r6
 801d2cc:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d2d0:	fb17 f709 	smulbb	r7, r7, r9
 801d2d4:	fb1a fa09 	smulbb	sl, sl, r9
 801d2d8:	b2f6      	uxtb	r6, r6
 801d2da:	fb1b f909 	smulbb	r9, fp, r9
 801d2de:	fb08 7706 	mla	r7, r8, r6, r7
 801d2e2:	b2bf      	uxth	r7, r7
 801d2e4:	f107 0801 	add.w	r8, r7, #1
 801d2e8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d2ec:	123f      	asrs	r7, r7, #8
 801d2ee:	54af      	strb	r7, [r5, r2]
 801d2f0:	442a      	add	r2, r5
 801d2f2:	7857      	ldrb	r7, [r2, #1]
 801d2f4:	fb07 aa06 	mla	sl, r7, r6, sl
 801d2f8:	fa1f fa8a 	uxth.w	sl, sl
 801d2fc:	f10a 0701 	add.w	r7, sl, #1
 801d300:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d304:	7897      	ldrb	r7, [r2, #2]
 801d306:	fb07 9906 	mla	r9, r7, r6, r9
 801d30a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d30e:	fa1f f989 	uxth.w	r9, r9
 801d312:	f882 a001 	strb.w	sl, [r2, #1]
 801d316:	f109 0601 	add.w	r6, r9, #1
 801d31a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d31e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d322:	f882 9002 	strb.w	r9, [r2, #2]
 801d326:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d328:	f10c 0c01 	add.w	ip, ip, #1
 801d32c:	4414      	add	r4, r2
 801d32e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d330:	4410      	add	r0, r2
 801d332:	e76b      	b.n	801d20c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801d334:	4462      	add	r2, ip
 801d336:	54af      	strb	r7, [r5, r2]
 801d338:	442a      	add	r2, r5
 801d33a:	f882 a001 	strb.w	sl, [r2, #1]
 801d33e:	f882 b002 	strb.w	fp, [r2, #2]
 801d342:	e7f0      	b.n	801d326 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d344:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d348:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d34c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d350:	e752      	b.n	801d1f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d352:	b005      	add	sp, #20
 801d354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d358 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d35c:	b087      	sub	sp, #28
 801d35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d362:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d364:	9204      	str	r2, [sp, #16]
 801d366:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d36a:	6860      	ldr	r0, [r4, #4]
 801d36c:	9205      	str	r2, [sp, #20]
 801d36e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d372:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d376:	9101      	str	r1, [sp, #4]
 801d378:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d37c:	fb00 2505 	mla	r5, r0, r5, r2
 801d380:	6822      	ldr	r2, [r4, #0]
 801d382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d386:	4415      	add	r5, r2
 801d388:	f10e 0201 	add.w	r2, lr, #1
 801d38c:	f022 0201 	bic.w	r2, r2, #1
 801d390:	9202      	str	r2, [sp, #8]
 801d392:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d394:	6812      	ldr	r2, [r2, #0]
 801d396:	9203      	str	r2, [sp, #12]
 801d398:	9a01      	ldr	r2, [sp, #4]
 801d39a:	2a00      	cmp	r2, #0
 801d39c:	dc03      	bgt.n	801d3a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d39e:	9a04      	ldr	r2, [sp, #16]
 801d3a0:	2a00      	cmp	r2, #0
 801d3a2:	f340 8132 	ble.w	801d60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d3a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3a8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d3ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	dd0e      	ble.n	801d3d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d3b6:	1422      	asrs	r2, r4, #16
 801d3b8:	d405      	bmi.n	801d3c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3ba:	4596      	cmp	lr, r2
 801d3bc:	dd03      	ble.n	801d3c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3be:	1402      	asrs	r2, r0, #16
 801d3c0:	d401      	bmi.n	801d3c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3c2:	4542      	cmp	r2, r8
 801d3c4:	db07      	blt.n	801d3d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d3c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3c8:	3b01      	subs	r3, #1
 801d3ca:	3503      	adds	r5, #3
 801d3cc:	4414      	add	r4, r2
 801d3ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3d0:	4410      	add	r0, r2
 801d3d2:	e7ee      	b.n	801d3b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d3d4:	d010      	beq.n	801d3f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d3d6:	1e5a      	subs	r2, r3, #1
 801d3d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d3da:	fb06 4602 	mla	r6, r6, r2, r4
 801d3de:	1436      	asrs	r6, r6, #16
 801d3e0:	d546      	bpl.n	801d470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d3e2:	4699      	mov	r9, r3
 801d3e4:	462e      	mov	r6, r5
 801d3e6:	f1b9 0f00 	cmp.w	r9, #0
 801d3ea:	f300 80ac 	bgt.w	801d546 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d3ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3f6:	441d      	add	r5, r3
 801d3f8:	9b01      	ldr	r3, [sp, #4]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	f340 8105 	ble.w	801d60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d400:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d406:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d40a:	eeb0 6a62 	vmov.f32	s12, s5
 801d40e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d412:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d416:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d41a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d41e:	eeb0 6a43 	vmov.f32	s12, s6
 801d422:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d426:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d42a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d42e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d432:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d436:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d43a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d43e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d442:	ee12 2a90 	vmov	r2, s5
 801d446:	eef0 2a47 	vmov.f32	s5, s14
 801d44a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d44e:	ee13 2a10 	vmov	r2, s6
 801d452:	9313      	str	r3, [sp, #76]	; 0x4c
 801d454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d456:	eeb0 3a67 	vmov.f32	s6, s15
 801d45a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d45e:	9314      	str	r3, [sp, #80]	; 0x50
 801d460:	9b01      	ldr	r3, [sp, #4]
 801d462:	9a04      	ldr	r2, [sp, #16]
 801d464:	3b01      	subs	r3, #1
 801d466:	9301      	str	r3, [sp, #4]
 801d468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d46a:	bf08      	it	eq
 801d46c:	4613      	moveq	r3, r2
 801d46e:	e793      	b.n	801d398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d470:	45b6      	cmp	lr, r6
 801d472:	ddb6      	ble.n	801d3e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d474:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d476:	fb06 0202 	mla	r2, r6, r2, r0
 801d47a:	1412      	asrs	r2, r2, #16
 801d47c:	d4b1      	bmi.n	801d3e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d47e:	4542      	cmp	r2, r8
 801d480:	daaf      	bge.n	801d3e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d482:	1cee      	adds	r6, r5, #3
 801d484:	4699      	mov	r9, r3
 801d486:	f1b9 0f00 	cmp.w	r9, #0
 801d48a:	ddb0      	ble.n	801d3ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d48c:	1422      	asrs	r2, r4, #16
 801d48e:	9902      	ldr	r1, [sp, #8]
 801d490:	1407      	asrs	r7, r0, #16
 801d492:	fb01 2707 	mla	r7, r1, r7, r2
 801d496:	9903      	ldr	r1, [sp, #12]
 801d498:	087a      	lsrs	r2, r7, #1
 801d49a:	5c8a      	ldrb	r2, [r1, r2]
 801d49c:	07f9      	lsls	r1, r7, #31
 801d49e:	bf54      	ite	pl
 801d4a0:	f002 020f 	andpl.w	r2, r2, #15
 801d4a4:	1112      	asrmi	r2, r2, #4
 801d4a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4aa:	b2d2      	uxtb	r2, r2
 801d4ac:	2a00      	cmp	r2, #0
 801d4ae:	d042      	beq.n	801d536 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d4b0:	4957      	ldr	r1, [pc, #348]	; (801d610 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d4b2:	680f      	ldr	r7, [r1, #0]
 801d4b4:	9905      	ldr	r1, [sp, #20]
 801d4b6:	fa5f fb87 	uxtb.w	fp, r7
 801d4ba:	434a      	muls	r2, r1
 801d4bc:	f102 0c01 	add.w	ip, r2, #1
 801d4c0:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d4c4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d4c8:	1212      	asrs	r2, r2, #8
 801d4ca:	fa1f fa82 	uxth.w	sl, r2
 801d4ce:	43d2      	mvns	r2, r2
 801d4d0:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4d4:	b2d2      	uxtb	r2, r2
 801d4d6:	fb0c bc02 	mla	ip, ip, r2, fp
 801d4da:	fa1f fc8c 	uxth.w	ip, ip
 801d4de:	f10c 0b01 	add.w	fp, ip, #1
 801d4e2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d4e6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d4ea:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d4ee:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4f6:	fb17 fa0a 	smulbb	sl, r7, sl
 801d4fa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d4fe:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d502:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d506:	fb07 aa02 	mla	sl, r7, r2, sl
 801d50a:	fb0c bc02 	mla	ip, ip, r2, fp
 801d50e:	fa1f fa8a 	uxth.w	sl, sl
 801d512:	fa1f fc8c 	uxth.w	ip, ip
 801d516:	f10a 0701 	add.w	r7, sl, #1
 801d51a:	f10c 0b01 	add.w	fp, ip, #1
 801d51e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d522:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d526:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d52a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d52e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d532:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d538:	3603      	adds	r6, #3
 801d53a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d53e:	4414      	add	r4, r2
 801d540:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d542:	4410      	add	r0, r2
 801d544:	e79f      	b.n	801d486 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d546:	1422      	asrs	r2, r4, #16
 801d548:	d457      	bmi.n	801d5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d54a:	4596      	cmp	lr, r2
 801d54c:	dd55      	ble.n	801d5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d54e:	1407      	asrs	r7, r0, #16
 801d550:	d453      	bmi.n	801d5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d552:	4547      	cmp	r7, r8
 801d554:	da51      	bge.n	801d5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d556:	9902      	ldr	r1, [sp, #8]
 801d558:	fb07 2701 	mla	r7, r7, r1, r2
 801d55c:	9903      	ldr	r1, [sp, #12]
 801d55e:	087a      	lsrs	r2, r7, #1
 801d560:	07ff      	lsls	r7, r7, #31
 801d562:	5c8a      	ldrb	r2, [r1, r2]
 801d564:	bf54      	ite	pl
 801d566:	f002 020f 	andpl.w	r2, r2, #15
 801d56a:	1112      	asrmi	r2, r2, #4
 801d56c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d570:	b2d2      	uxtb	r2, r2
 801d572:	2a00      	cmp	r2, #0
 801d574:	d041      	beq.n	801d5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d576:	4926      	ldr	r1, [pc, #152]	; (801d610 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d578:	680f      	ldr	r7, [r1, #0]
 801d57a:	9905      	ldr	r1, [sp, #20]
 801d57c:	fa5f fb87 	uxtb.w	fp, r7
 801d580:	434a      	muls	r2, r1
 801d582:	f102 0c01 	add.w	ip, r2, #1
 801d586:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d58a:	f896 c000 	ldrb.w	ip, [r6]
 801d58e:	1212      	asrs	r2, r2, #8
 801d590:	fa1f fa82 	uxth.w	sl, r2
 801d594:	43d2      	mvns	r2, r2
 801d596:	fb1b fb0a 	smulbb	fp, fp, sl
 801d59a:	b2d2      	uxtb	r2, r2
 801d59c:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5a0:	fa1f fc8c 	uxth.w	ip, ip
 801d5a4:	f10c 0b01 	add.w	fp, ip, #1
 801d5a8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5ac:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d5b0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d5b4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5bc:	fb17 fa0a 	smulbb	sl, r7, sl
 801d5c0:	78b7      	ldrb	r7, [r6, #2]
 801d5c2:	f886 c000 	strb.w	ip, [r6]
 801d5c6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d5ca:	fb07 aa02 	mla	sl, r7, r2, sl
 801d5ce:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5d2:	fa1f fa8a 	uxth.w	sl, sl
 801d5d6:	fa1f fc8c 	uxth.w	ip, ip
 801d5da:	f10a 0701 	add.w	r7, sl, #1
 801d5de:	f10c 0b01 	add.w	fp, ip, #1
 801d5e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d5ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5f2:	f886 a002 	strb.w	sl, [r6, #2]
 801d5f6:	f886 c001 	strb.w	ip, [r6, #1]
 801d5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5fc:	3603      	adds	r6, #3
 801d5fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801d602:	4414      	add	r4, r2
 801d604:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d606:	4410      	add	r0, r2
 801d608:	e6ed      	b.n	801d3e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d60a:	b007      	add	sp, #28
 801d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d610:	2000bbbc 	.word	0x2000bbbc

0801d614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d618:	b087      	sub	sp, #28
 801d61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d61e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d620:	9205      	str	r2, [sp, #20]
 801d622:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d626:	6860      	ldr	r0, [r4, #4]
 801d628:	9202      	str	r2, [sp, #8]
 801d62a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d62e:	9101      	str	r1, [sp, #4]
 801d630:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d634:	fb00 2606 	mla	r6, r0, r6, r2
 801d638:	6822      	ldr	r2, [r4, #0]
 801d63a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d63e:	4416      	add	r6, r2
 801d640:	f108 0201 	add.w	r2, r8, #1
 801d644:	f022 0201 	bic.w	r2, r2, #1
 801d648:	9203      	str	r2, [sp, #12]
 801d64a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d64c:	6812      	ldr	r2, [r2, #0]
 801d64e:	9204      	str	r2, [sp, #16]
 801d650:	9a01      	ldr	r2, [sp, #4]
 801d652:	2a00      	cmp	r2, #0
 801d654:	dc03      	bgt.n	801d65e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d656:	9a05      	ldr	r2, [sp, #20]
 801d658:	2a00      	cmp	r2, #0
 801d65a:	f340 813a 	ble.w	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d65e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d660:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d666:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	dd0f      	ble.n	801d68e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d66e:	142a      	asrs	r2, r5, #16
 801d670:	d406      	bmi.n	801d680 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d672:	4590      	cmp	r8, r2
 801d674:	dd04      	ble.n	801d680 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d676:	1422      	asrs	r2, r4, #16
 801d678:	d402      	bmi.n	801d680 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d67a:	9802      	ldr	r0, [sp, #8]
 801d67c:	4282      	cmp	r2, r0
 801d67e:	db07      	blt.n	801d690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d682:	3b01      	subs	r3, #1
 801d684:	3603      	adds	r6, #3
 801d686:	4415      	add	r5, r2
 801d688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d68a:	4414      	add	r4, r2
 801d68c:	e7ed      	b.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d68e:	d073      	beq.n	801d778 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d690:	1e5a      	subs	r2, r3, #1
 801d692:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d694:	fb00 5002 	mla	r0, r0, r2, r5
 801d698:	1400      	asrs	r0, r0, #16
 801d69a:	d464      	bmi.n	801d766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d69c:	4580      	cmp	r8, r0
 801d69e:	dd62      	ble.n	801d766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d6a2:	fb00 4202 	mla	r2, r0, r2, r4
 801d6a6:	1412      	asrs	r2, r2, #16
 801d6a8:	d45d      	bmi.n	801d766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6aa:	9802      	ldr	r0, [sp, #8]
 801d6ac:	4282      	cmp	r2, r0
 801d6ae:	da5a      	bge.n	801d766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6b0:	1cf0      	adds	r0, r6, #3
 801d6b2:	469a      	mov	sl, r3
 801d6b4:	f1ba 0f00 	cmp.w	sl, #0
 801d6b8:	dd59      	ble.n	801d76e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d6ba:	142a      	asrs	r2, r5, #16
 801d6bc:	9903      	ldr	r1, [sp, #12]
 801d6be:	1427      	asrs	r7, r4, #16
 801d6c0:	fb01 2707 	mla	r7, r1, r7, r2
 801d6c4:	9904      	ldr	r1, [sp, #16]
 801d6c6:	087a      	lsrs	r2, r7, #1
 801d6c8:	5c8a      	ldrb	r2, [r1, r2]
 801d6ca:	07f9      	lsls	r1, r7, #31
 801d6cc:	bf54      	ite	pl
 801d6ce:	f002 020f 	andpl.w	r2, r2, #15
 801d6d2:	1112      	asrmi	r2, r2, #4
 801d6d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6d8:	b2d2      	uxtb	r2, r2
 801d6da:	2a00      	cmp	r2, #0
 801d6dc:	d03b      	beq.n	801d756 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d6de:	497e      	ldr	r1, [pc, #504]	; (801d8d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d6e0:	2aff      	cmp	r2, #255	; 0xff
 801d6e2:	680f      	ldr	r7, [r1, #0]
 801d6e4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d6e8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d6ec:	b2ff      	uxtb	r7, r7
 801d6ee:	f000 80e9 	beq.w	801d8c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6f2:	fa1f fe82 	uxth.w	lr, r2
 801d6f6:	43d2      	mvns	r2, r2
 801d6f8:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d6fc:	fb17 f70e 	smulbb	r7, r7, lr
 801d700:	b2d2      	uxtb	r2, r2
 801d702:	fb19 f90e 	smulbb	r9, r9, lr
 801d706:	fb0c 7702 	mla	r7, ip, r2, r7
 801d70a:	fb1b fe0e 	smulbb	lr, fp, lr
 801d70e:	b2bf      	uxth	r7, r7
 801d710:	f107 0c01 	add.w	ip, r7, #1
 801d714:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d718:	123f      	asrs	r7, r7, #8
 801d71a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d71e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d722:	fb07 9902 	mla	r9, r7, r2, r9
 801d726:	fa1f f989 	uxth.w	r9, r9
 801d72a:	f109 0701 	add.w	r7, r9, #1
 801d72e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d732:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d736:	fb07 ee02 	mla	lr, r7, r2, lr
 801d73a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d73e:	fa1f fe8e 	uxth.w	lr, lr
 801d742:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d746:	f10e 0201 	add.w	r2, lr, #1
 801d74a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d74e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d752:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d758:	3003      	adds	r0, #3
 801d75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d75e:	4415      	add	r5, r2
 801d760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d762:	4414      	add	r4, r2
 801d764:	e7a6      	b.n	801d6b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d766:	2700      	movs	r7, #0
 801d768:	1bda      	subs	r2, r3, r7
 801d76a:	2a00      	cmp	r2, #0
 801d76c:	dc40      	bgt.n	801d7f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d76e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d776:	441e      	add	r6, r3
 801d778:	9b01      	ldr	r3, [sp, #4]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	f340 80a9 	ble.w	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d780:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d786:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d78a:	eeb0 6a62 	vmov.f32	s12, s5
 801d78e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d792:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d79a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d79e:	eeb0 6a43 	vmov.f32	s12, s6
 801d7a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7a6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d7aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7c2:	ee12 2a90 	vmov	r2, s5
 801d7c6:	eef0 2a47 	vmov.f32	s5, s14
 801d7ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7ce:	ee13 2a10 	vmov	r2, s6
 801d7d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d7d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7d6:	eeb0 3a67 	vmov.f32	s6, s15
 801d7da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7de:	9314      	str	r3, [sp, #80]	; 0x50
 801d7e0:	9b01      	ldr	r3, [sp, #4]
 801d7e2:	9a05      	ldr	r2, [sp, #20]
 801d7e4:	3b01      	subs	r3, #1
 801d7e6:	9301      	str	r3, [sp, #4]
 801d7e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7ea:	bf08      	it	eq
 801d7ec:	4613      	moveq	r3, r2
 801d7ee:	e72f      	b.n	801d650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d7f0:	142a      	asrs	r2, r5, #16
 801d7f2:	d458      	bmi.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7f4:	4590      	cmp	r8, r2
 801d7f6:	dd56      	ble.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7f8:	1420      	asrs	r0, r4, #16
 801d7fa:	d454      	bmi.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7fc:	9902      	ldr	r1, [sp, #8]
 801d7fe:	4288      	cmp	r0, r1
 801d800:	da51      	bge.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d802:	9903      	ldr	r1, [sp, #12]
 801d804:	fb00 2001 	mla	r0, r0, r1, r2
 801d808:	9904      	ldr	r1, [sp, #16]
 801d80a:	0842      	lsrs	r2, r0, #1
 801d80c:	07c0      	lsls	r0, r0, #31
 801d80e:	5c8a      	ldrb	r2, [r1, r2]
 801d810:	bf54      	ite	pl
 801d812:	f002 020f 	andpl.w	r2, r2, #15
 801d816:	1112      	asrmi	r2, r2, #4
 801d818:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d81c:	b2d2      	uxtb	r2, r2
 801d81e:	2a00      	cmp	r2, #0
 801d820:	d041      	beq.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d822:	492d      	ldr	r1, [pc, #180]	; (801d8d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d824:	2aff      	cmp	r2, #255	; 0xff
 801d826:	6808      	ldr	r0, [r1, #0]
 801d828:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d82c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d830:	fa5f fc80 	uxtb.w	ip, r0
 801d834:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d838:	d03b      	beq.n	801d8b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d83a:	fa1f f982 	uxth.w	r9, r2
 801d83e:	4438      	add	r0, r7
 801d840:	43d2      	mvns	r2, r2
 801d842:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d846:	fb1c fc09 	smulbb	ip, ip, r9
 801d84a:	fb1a fa09 	smulbb	sl, sl, r9
 801d84e:	b2d2      	uxtb	r2, r2
 801d850:	fb1b f909 	smulbb	r9, fp, r9
 801d854:	fb0e cc02 	mla	ip, lr, r2, ip
 801d858:	fa1f fc8c 	uxth.w	ip, ip
 801d85c:	f10c 0e01 	add.w	lr, ip, #1
 801d860:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d864:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d868:	f806 c000 	strb.w	ip, [r6, r0]
 801d86c:	4430      	add	r0, r6
 801d86e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d872:	fb0c aa02 	mla	sl, ip, r2, sl
 801d876:	fa1f fa8a 	uxth.w	sl, sl
 801d87a:	f10a 0c01 	add.w	ip, sl, #1
 801d87e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d882:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d886:	fb0c 9902 	mla	r9, ip, r2, r9
 801d88a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d88e:	fa1f f989 	uxth.w	r9, r9
 801d892:	f880 a001 	strb.w	sl, [r0, #1]
 801d896:	f109 0201 	add.w	r2, r9, #1
 801d89a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d89e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8a2:	f880 9002 	strb.w	r9, [r0, #2]
 801d8a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d8a8:	3701      	adds	r7, #1
 801d8aa:	4415      	add	r5, r2
 801d8ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d8ae:	4414      	add	r4, r2
 801d8b0:	e75a      	b.n	801d768 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d8b2:	4438      	add	r0, r7
 801d8b4:	f806 c000 	strb.w	ip, [r6, r0]
 801d8b8:	4430      	add	r0, r6
 801d8ba:	f880 a001 	strb.w	sl, [r0, #1]
 801d8be:	f880 b002 	strb.w	fp, [r0, #2]
 801d8c2:	e7f0      	b.n	801d8a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d8c4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d8c8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d8cc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d8d0:	e741      	b.n	801d756 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d8d2:	b007      	add	sp, #28
 801d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d8:	2000bbbc 	.word	0x2000bbbc

0801d8dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d8dc:	4770      	bx	lr

0801d8de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d8de:	4770      	bx	lr

0801d8e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d8e0:	4770      	bx	lr

0801d8e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d8e2:	4770      	bx	lr

0801d8e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d8e4:	4770      	bx	lr

0801d8e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d8e6:	4770      	bx	lr

0801d8e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d8e8:	4770      	bx	lr

0801d8ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d8ea:	4770      	bx	lr

0801d8ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d8ec:	4770      	bx	lr

0801d8ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d8ee:	4770      	bx	lr

0801d8f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d8f0:	4770      	bx	lr

0801d8f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d8f2:	4770      	bx	lr

0801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d8f4:	4770      	bx	lr

0801d8f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d8f6:	4770      	bx	lr

0801d8f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d8f8:	4770      	bx	lr

0801d8fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d8fa:	4770      	bx	lr

0801d8fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d8fc:	4770      	bx	lr

0801d8fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d8fe:	4770      	bx	lr

0801d900 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d900:	4770      	bx	lr

0801d902 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d902:	4770      	bx	lr

0801d904 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d904:	2bff      	cmp	r3, #255	; 0xff
 801d906:	b508      	push	{r3, lr}
 801d908:	d04f      	beq.n	801d9aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d90a:	2a2c      	cmp	r2, #44	; 0x2c
 801d90c:	d032      	beq.n	801d974 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d90e:	d80f      	bhi.n	801d930 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d910:	2a08      	cmp	r2, #8
 801d912:	d046      	beq.n	801d9a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d914:	d805      	bhi.n	801d922 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d916:	2a04      	cmp	r2, #4
 801d918:	d041      	beq.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d91a:	2a05      	cmp	r2, #5
 801d91c:	d03d      	beq.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d91e:	2000      	movs	r0, #0
 801d920:	e027      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d922:	2a0a      	cmp	r2, #10
 801d924:	d03d      	beq.n	801d9a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d926:	d301      	bcc.n	801d92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d928:	2a0b      	cmp	r2, #11
 801d92a:	d1f8      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d92c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d92e:	e020      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d930:	2a30      	cmp	r2, #48	; 0x30
 801d932:	d038      	beq.n	801d9a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d934:	d808      	bhi.n	801d948 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d936:	2a2e      	cmp	r2, #46	; 0x2e
 801d938:	684b      	ldr	r3, [r1, #4]
 801d93a:	d029      	beq.n	801d990 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d93c:	d90b      	bls.n	801d956 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d93e:	781b      	ldrb	r3, [r3, #0]
 801d940:	2b00      	cmp	r3, #0
 801d942:	d1ec      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d944:	6a00      	ldr	r0, [r0, #32]
 801d946:	e014      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d948:	2a32      	cmp	r2, #50	; 0x32
 801d94a:	d02c      	beq.n	801d9a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d94c:	d301      	bcc.n	801d952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d94e:	2a33      	cmp	r2, #51	; 0x33
 801d950:	d1e5      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d952:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d954:	e00d      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d956:	781b      	ldrb	r3, [r3, #0]
 801d958:	2b01      	cmp	r3, #1
 801d95a:	d009      	beq.n	801d970 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d95c:	d3f2      	bcc.n	801d944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d95e:	2b02      	cmp	r3, #2
 801d960:	d1dd      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d962:	4b39      	ldr	r3, [pc, #228]	; (801da48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d964:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801d968:	4a38      	ldr	r2, [pc, #224]	; (801da4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d96a:	4839      	ldr	r0, [pc, #228]	; (801da50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d96c:	f007 ff3e 	bl	80257ec <__assert_func>
 801d970:	6900      	ldr	r0, [r0, #16]
 801d972:	bd08      	pop	{r3, pc}
 801d974:	684b      	ldr	r3, [r1, #4]
 801d976:	781b      	ldrb	r3, [r3, #0]
 801d978:	2b01      	cmp	r3, #1
 801d97a:	d007      	beq.n	801d98c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d97c:	d30b      	bcc.n	801d996 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d97e:	2b02      	cmp	r3, #2
 801d980:	d1cd      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d982:	4b31      	ldr	r3, [pc, #196]	; (801da48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d984:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801d988:	4a30      	ldr	r2, [pc, #192]	; (801da4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d98a:	e7ee      	b.n	801d96a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d98c:	6880      	ldr	r0, [r0, #8]
 801d98e:	e7f0      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d990:	781b      	ldrb	r3, [r3, #0]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d1c3      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d996:	6980      	ldr	r0, [r0, #24]
 801d998:	e7eb      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d99a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d99c:	e7e9      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d99e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d9a0:	e7e7      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d9a4:	e7e5      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d9a8:	e7e3      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9aa:	2a2c      	cmp	r2, #44	; 0x2c
 801d9ac:	d030      	beq.n	801da10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d9ae:	d80f      	bhi.n	801d9d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d9b0:	2a08      	cmp	r2, #8
 801d9b2:	d044      	beq.n	801da3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9b4:	d805      	bhi.n	801d9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d9b6:	2a04      	cmp	r2, #4
 801d9b8:	d03f      	beq.n	801da3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d9ba:	2a05      	cmp	r2, #5
 801d9bc:	d1af      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9be:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d9c0:	e7d7      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c2:	2a0a      	cmp	r2, #10
 801d9c4:	d03b      	beq.n	801da3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9c6:	d301      	bcc.n	801d9cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d9c8:	2a0b      	cmp	r2, #11
 801d9ca:	d1a8      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9cc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d9ce:	e7d0      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9d0:	2a30      	cmp	r2, #48	; 0x30
 801d9d2:	d036      	beq.n	801da42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9d4:	d808      	bhi.n	801d9e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d9d6:	2a2e      	cmp	r2, #46	; 0x2e
 801d9d8:	684b      	ldr	r3, [r1, #4]
 801d9da:	d028      	beq.n	801da2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d9dc:	d90b      	bls.n	801d9f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d9de:	781b      	ldrb	r3, [r3, #0]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d19c      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d9e6:	e7c4      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9e8:	2a32      	cmp	r2, #50	; 0x32
 801d9ea:	d02a      	beq.n	801da42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9ec:	d301      	bcc.n	801d9f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d9ee:	2a33      	cmp	r2, #51	; 0x33
 801d9f0:	d195      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9f2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d9f4:	e7bd      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9f6:	781b      	ldrb	r3, [r3, #0]
 801d9f8:	2b01      	cmp	r3, #1
 801d9fa:	d007      	beq.n	801da0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d9fc:	d3f2      	bcc.n	801d9e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d9fe:	2b02      	cmp	r3, #2
 801da00:	d18d      	bne.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da02:	4b11      	ldr	r3, [pc, #68]	; (801da48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da04:	f240 31e1 	movw	r1, #993	; 0x3e1
 801da08:	4a10      	ldr	r2, [pc, #64]	; (801da4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da0a:	e7ae      	b.n	801d96a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da0c:	6940      	ldr	r0, [r0, #20]
 801da0e:	e7b0      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da10:	684b      	ldr	r3, [r1, #4]
 801da12:	781b      	ldrb	r3, [r3, #0]
 801da14:	2b01      	cmp	r3, #1
 801da16:	d008      	beq.n	801da2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801da18:	d30d      	bcc.n	801da36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801da1a:	2b02      	cmp	r3, #2
 801da1c:	f47f af7f 	bne.w	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da20:	4b09      	ldr	r3, [pc, #36]	; (801da48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da22:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801da26:	4a09      	ldr	r2, [pc, #36]	; (801da4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da28:	e79f      	b.n	801d96a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da2a:	68c0      	ldr	r0, [r0, #12]
 801da2c:	e7a1      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da2e:	781b      	ldrb	r3, [r3, #0]
 801da30:	2b00      	cmp	r3, #0
 801da32:	f47f af74 	bne.w	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da36:	69c0      	ldr	r0, [r0, #28]
 801da38:	e79b      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801da3c:	e799      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da3e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da40:	e797      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801da44:	e795      	b.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da46:	bf00      	nop
 801da48:	0802ad49 	.word	0x0802ad49
 801da4c:	0802b4ff 	.word	0x0802b4ff
 801da50:	0802ad95 	.word	0x0802ad95

0801da54 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801da54:	b508      	push	{r3, lr}
 801da56:	4b06      	ldr	r3, [pc, #24]	; (801da70 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801da58:	8818      	ldrh	r0, [r3, #0]
 801da5a:	b928      	cbnz	r0, 801da68 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801da5c:	4b05      	ldr	r3, [pc, #20]	; (801da74 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801da5e:	21d7      	movs	r1, #215	; 0xd7
 801da60:	4a05      	ldr	r2, [pc, #20]	; (801da78 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801da62:	4806      	ldr	r0, [pc, #24]	; (801da7c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801da64:	f007 fec2 	bl	80257ec <__assert_func>
 801da68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da6c:	b280      	uxth	r0, r0
 801da6e:	bd08      	pop	{r3, pc}
 801da70:	2000bb8e 	.word	0x2000bb8e
 801da74:	0802afe4 	.word	0x0802afe4
 801da78:	0802b4c4 	.word	0x0802b4c4
 801da7c:	0802b026 	.word	0x0802b026

0801da80 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da84:	4616      	mov	r6, r2
 801da86:	b087      	sub	sp, #28
 801da88:	461f      	mov	r7, r3
 801da8a:	b33b      	cbz	r3, 801dadc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801da90:	b323      	cbz	r3, 801dadc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da92:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801da96:	b30b      	cbz	r3, 801dadc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da98:	6808      	ldr	r0, [r1, #0]
 801da9a:	ab04      	add	r3, sp, #16
 801da9c:	6849      	ldr	r1, [r1, #4]
 801da9e:	4c5a      	ldr	r4, [pc, #360]	; (801dc08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801daa0:	c303      	stmia	r3!, {r0, r1}
 801daa2:	a804      	add	r0, sp, #16
 801daa4:	f7fb faa2 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801daa8:	6820      	ldr	r0, [r4, #0]
 801daaa:	6803      	ldr	r3, [r0, #0]
 801daac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801daae:	4798      	blx	r3
 801dab0:	2fff      	cmp	r7, #255	; 0xff
 801dab2:	4623      	mov	r3, r4
 801dab4:	d015      	beq.n	801dae2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801dab6:	f010 0f08 	tst.w	r0, #8
 801daba:	d015      	beq.n	801dae8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801dabc:	6818      	ldr	r0, [r3, #0]
 801dabe:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801dac2:	6801      	ldr	r1, [r0, #0]
 801dac4:	9401      	str	r4, [sp, #4]
 801dac6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801daca:	9702      	str	r7, [sp, #8]
 801dacc:	9400      	str	r4, [sp, #0]
 801dace:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dad2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801dad4:	4631      	mov	r1, r6
 801dad6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dada:	47a0      	blx	r4
 801dadc:	b007      	add	sp, #28
 801dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dae2:	f010 0f02 	tst.w	r0, #2
 801dae6:	e7e8      	b.n	801daba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801dae8:	6818      	ldr	r0, [r3, #0]
 801daea:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801daee:	6803      	ldr	r3, [r0, #0]
 801daf0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801daf4:	6a1b      	ldr	r3, [r3, #32]
 801daf6:	4798      	blx	r3
 801daf8:	4944      	ldr	r1, [pc, #272]	; (801dc0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801dafa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dafe:	2fff      	cmp	r7, #255	; 0xff
 801db00:	f8b1 c000 	ldrh.w	ip, [r1]
 801db04:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801db08:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801db0c:	4688      	mov	r8, r1
 801db0e:	fb0c 2303 	mla	r3, ip, r3, r2
 801db12:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801db16:	b2f2      	uxtb	r2, r6
 801db18:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801db1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db20:	4418      	add	r0, r3
 801db22:	d112      	bne.n	801db4a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801db24:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db28:	2100      	movs	r1, #0
 801db2a:	42a9      	cmp	r1, r5
 801db2c:	da66      	bge.n	801dbfc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801db2e:	4603      	mov	r3, r0
 801db30:	2700      	movs	r7, #0
 801db32:	42a7      	cmp	r7, r4
 801db34:	f103 0303 	add.w	r3, r3, #3
 801db38:	da57      	bge.n	801dbea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801db3a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801db3e:	3701      	adds	r7, #1
 801db40:	f803 ec02 	strb.w	lr, [r3, #-2]
 801db44:	f803 cc01 	strb.w	ip, [r3, #-1]
 801db48:	e7f3      	b.n	801db32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801db4a:	b2bb      	uxth	r3, r7
 801db4c:	f04f 0800 	mov.w	r8, #0
 801db50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db54:	fb0c fc03 	mul.w	ip, ip, r3
 801db58:	fb0e fe03 	mul.w	lr, lr, r3
 801db5c:	435a      	muls	r2, r3
 801db5e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801db62:	460f      	mov	r7, r1
 801db64:	b29b      	uxth	r3, r3
 801db66:	45a8      	cmp	r8, r5
 801db68:	da48      	bge.n	801dbfc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801db6a:	4601      	mov	r1, r0
 801db6c:	f04f 0a00 	mov.w	sl, #0
 801db70:	45a2      	cmp	sl, r4
 801db72:	f101 0103 	add.w	r1, r1, #3
 801db76:	da2f      	bge.n	801dbd8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801db78:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801db7c:	f10a 0a01 	add.w	sl, sl, #1
 801db80:	fb19 f903 	smulbb	r9, r9, r3
 801db84:	4491      	add	r9, r2
 801db86:	fa1f f989 	uxth.w	r9, r9
 801db8a:	f109 0b01 	add.w	fp, r9, #1
 801db8e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db96:	f801 9c03 	strb.w	r9, [r1, #-3]
 801db9a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801db9e:	fb19 f903 	smulbb	r9, r9, r3
 801dba2:	44f1      	add	r9, lr
 801dba4:	fa1f f989 	uxth.w	r9, r9
 801dba8:	f109 0b01 	add.w	fp, r9, #1
 801dbac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbb4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801dbb8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801dbbc:	fb19 f903 	smulbb	r9, r9, r3
 801dbc0:	44e1      	add	r9, ip
 801dbc2:	fa1f f989 	uxth.w	r9, r9
 801dbc6:	f109 0b01 	add.w	fp, r9, #1
 801dbca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbd2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801dbd6:	e7cb      	b.n	801db70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801dbd8:	8839      	ldrh	r1, [r7, #0]
 801dbda:	f108 0801 	add.w	r8, r8, #1
 801dbde:	1b09      	subs	r1, r1, r4
 801dbe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dbe4:	4431      	add	r1, r6
 801dbe6:	4408      	add	r0, r1
 801dbe8:	e7bd      	b.n	801db66 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801dbea:	f8b8 3000 	ldrh.w	r3, [r8]
 801dbee:	3101      	adds	r1, #1
 801dbf0:	1b1b      	subs	r3, r3, r4
 801dbf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbf6:	4433      	add	r3, r6
 801dbf8:	4418      	add	r0, r3
 801dbfa:	e796      	b.n	801db2a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801dbfc:	4b02      	ldr	r3, [pc, #8]	; (801dc08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801dbfe:	6818      	ldr	r0, [r3, #0]
 801dc00:	6803      	ldr	r3, [r0, #0]
 801dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc04:	4798      	blx	r3
 801dc06:	e769      	b.n	801dadc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dc08:	2000bb94 	.word	0x2000bb94
 801dc0c:	2000bb8e 	.word	0x2000bb8e

0801dc10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc14:	b08d      	sub	sp, #52	; 0x34
 801dc16:	460c      	mov	r4, r1
 801dc18:	4617      	mov	r7, r2
 801dc1a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801dc1e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801dc22:	2e00      	cmp	r6, #0
 801dc24:	d04a      	beq.n	801dcbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dc26:	6810      	ldr	r0, [r2, #0]
 801dc28:	ad08      	add	r5, sp, #32
 801dc2a:	6851      	ldr	r1, [r2, #4]
 801dc2c:	c503      	stmia	r5!, {r0, r1}
 801dc2e:	6818      	ldr	r0, [r3, #0]
 801dc30:	ad0a      	add	r5, sp, #40	; 0x28
 801dc32:	6859      	ldr	r1, [r3, #4]
 801dc34:	c503      	stmia	r5!, {r0, r1}
 801dc36:	a808      	add	r0, sp, #32
 801dc38:	f7fb f9d8 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc3c:	4639      	mov	r1, r7
 801dc3e:	a80a      	add	r0, sp, #40	; 0x28
 801dc40:	4f59      	ldr	r7, [pc, #356]	; (801dda8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801dc42:	f7fb f9bb 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc46:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc4a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dc4e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dc52:	6838      	ldr	r0, [r7, #0]
 801dc54:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc58:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801dc5c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801dc60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc64:	440c      	add	r4, r1
 801dc66:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dc6a:	440a      	add	r2, r1
 801dc6c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dc70:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dc74:	4413      	add	r3, r2
 801dc76:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dc7a:	6803      	ldr	r3, [r0, #0]
 801dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc7e:	4798      	blx	r3
 801dc80:	2eff      	cmp	r6, #255	; 0xff
 801dc82:	f000 8089 	beq.w	801dd98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801dc86:	0743      	lsls	r3, r0, #29
 801dc88:	d405      	bmi.n	801dc96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801dc8a:	f1b9 0f00 	cmp.w	r9, #0
 801dc8e:	d018      	beq.n	801dcc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dc90:	f010 0f10 	tst.w	r0, #16
 801dc94:	d015      	beq.n	801dcc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dc96:	6838      	ldr	r0, [r7, #0]
 801dc98:	b2ad      	uxth	r5, r5
 801dc9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dc9e:	6801      	ldr	r1, [r0, #0]
 801dca0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801dca4:	9500      	str	r5, [sp, #0]
 801dca6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801dcaa:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801dcae:	9602      	str	r6, [sp, #8]
 801dcb0:	fa1f f688 	uxth.w	r6, r8
 801dcb4:	9601      	str	r6, [sp, #4]
 801dcb6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801dcb8:	4621      	mov	r1, r4
 801dcba:	47a8      	blx	r5
 801dcbc:	b00d      	add	sp, #52	; 0x34
 801dcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcc2:	6838      	ldr	r0, [r7, #0]
 801dcc4:	6803      	ldr	r3, [r0, #0]
 801dcc6:	6a1b      	ldr	r3, [r3, #32]
 801dcc8:	4798      	blx	r3
 801dcca:	4a38      	ldr	r2, [pc, #224]	; (801ddac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801dccc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801dcd0:	2eff      	cmp	r6, #255	; 0xff
 801dcd2:	8813      	ldrh	r3, [r2, #0]
 801dcd4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801dcd8:	fb0c 1303 	mla	r3, ip, r3, r1
 801dcdc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801dce0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dce4:	4418      	add	r0, r3
 801dce6:	d032      	beq.n	801dd4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801dce8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801dcec:	f04f 0c00 	mov.w	ip, #0
 801dcf0:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801dcf4:	9306      	str	r3, [sp, #24]
 801dcf6:	45c4      	cmp	ip, r8
 801dcf8:	da49      	bge.n	801dd8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dcfa:	4686      	mov	lr, r0
 801dcfc:	46a1      	mov	r9, r4
 801dcfe:	eba9 0304 	sub.w	r3, r9, r4
 801dd02:	428b      	cmp	r3, r1
 801dd04:	da13      	bge.n	801dd2e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801dd06:	f819 3b01 	ldrb.w	r3, [r9], #1
 801dd0a:	f89e b000 	ldrb.w	fp, [lr]
 801dd0e:	9307      	str	r3, [sp, #28]
 801dd10:	9b06      	ldr	r3, [sp, #24]
 801dd12:	fb1b fb03 	smulbb	fp, fp, r3
 801dd16:	9b07      	ldr	r3, [sp, #28]
 801dd18:	fb03 b306 	mla	r3, r3, r6, fp
 801dd1c:	b29b      	uxth	r3, r3
 801dd1e:	f103 0b01 	add.w	fp, r3, #1
 801dd22:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801dd26:	121b      	asrs	r3, r3, #8
 801dd28:	f80e 3b01 	strb.w	r3, [lr], #1
 801dd2c:	e7e7      	b.n	801dcfe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801dd2e:	8813      	ldrh	r3, [r2, #0]
 801dd30:	f10c 0c01 	add.w	ip, ip, #1
 801dd34:	1b5b      	subs	r3, r3, r5
 801dd36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd3a:	4453      	add	r3, sl
 801dd3c:	4418      	add	r0, r3
 801dd3e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd42:	1b5b      	subs	r3, r3, r5
 801dd44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd48:	4453      	add	r3, sl
 801dd4a:	441c      	add	r4, r3
 801dd4c:	e7d3      	b.n	801dcf6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801dd4e:	2600      	movs	r6, #0
 801dd50:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801dd54:	4546      	cmp	r6, r8
 801dd56:	da1a      	bge.n	801dd8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dd58:	f100 3eff 	add.w	lr, r0, #4294967295
 801dd5c:	4623      	mov	r3, r4
 801dd5e:	eba3 0904 	sub.w	r9, r3, r4
 801dd62:	4589      	cmp	r9, r1
 801dd64:	da04      	bge.n	801dd70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801dd66:	f813 9b01 	ldrb.w	r9, [r3], #1
 801dd6a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801dd6e:	e7f6      	b.n	801dd5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801dd70:	8813      	ldrh	r3, [r2, #0]
 801dd72:	3601      	adds	r6, #1
 801dd74:	1b5b      	subs	r3, r3, r5
 801dd76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd7a:	4463      	add	r3, ip
 801dd7c:	4418      	add	r0, r3
 801dd7e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd82:	1b5b      	subs	r3, r3, r5
 801dd84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd88:	4463      	add	r3, ip
 801dd8a:	441c      	add	r4, r3
 801dd8c:	e7e2      	b.n	801dd54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801dd8e:	6838      	ldr	r0, [r7, #0]
 801dd90:	6803      	ldr	r3, [r0, #0]
 801dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd94:	4798      	blx	r3
 801dd96:	e791      	b.n	801dcbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dd98:	f1b9 0f00 	cmp.w	r9, #0
 801dd9c:	f47f af78 	bne.w	801dc90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801dda0:	f010 0f01 	tst.w	r0, #1
 801dda4:	e776      	b.n	801dc94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801dda6:	bf00      	nop
 801dda8:	2000bb94 	.word	0x2000bb94
 801ddac:	2000bb8e 	.word	0x2000bb8e

0801ddb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ddb0:	b510      	push	{r4, lr}
 801ddb2:	4604      	mov	r4, r0
 801ddb4:	2104      	movs	r1, #4
 801ddb6:	f007 fcee 	bl	8025796 <_ZdlPvj>
 801ddba:	4620      	mov	r0, r4
 801ddbc:	bd10      	pop	{r4, pc}

0801ddbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ddbe:	b510      	push	{r4, lr}
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	2104      	movs	r1, #4
 801ddc4:	f007 fce7 	bl	8025796 <_ZdlPvj>
 801ddc8:	4620      	mov	r0, r4
 801ddca:	bd10      	pop	{r4, pc}

0801ddcc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ddcc:	b510      	push	{r4, lr}
 801ddce:	4604      	mov	r4, r0
 801ddd0:	2104      	movs	r1, #4
 801ddd2:	f007 fce0 	bl	8025796 <_ZdlPvj>
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	bd10      	pop	{r4, pc}

0801ddda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ddda:	b510      	push	{r4, lr}
 801dddc:	4604      	mov	r4, r0
 801ddde:	2104      	movs	r1, #4
 801dde0:	f007 fcd9 	bl	8025796 <_ZdlPvj>
 801dde4:	4620      	mov	r0, r4
 801dde6:	bd10      	pop	{r4, pc}

0801dde8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dde8:	b510      	push	{r4, lr}
 801ddea:	4604      	mov	r4, r0
 801ddec:	2104      	movs	r1, #4
 801ddee:	f007 fcd2 	bl	8025796 <_ZdlPvj>
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	bd10      	pop	{r4, pc}

0801ddf6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ddf6:	b510      	push	{r4, lr}
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	2104      	movs	r1, #4
 801ddfc:	f007 fccb 	bl	8025796 <_ZdlPvj>
 801de00:	4620      	mov	r0, r4
 801de02:	bd10      	pop	{r4, pc}

0801de04 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de04:	b510      	push	{r4, lr}
 801de06:	4604      	mov	r4, r0
 801de08:	2104      	movs	r1, #4
 801de0a:	f007 fcc4 	bl	8025796 <_ZdlPvj>
 801de0e:	4620      	mov	r0, r4
 801de10:	bd10      	pop	{r4, pc}

0801de12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de12:	b510      	push	{r4, lr}
 801de14:	4604      	mov	r4, r0
 801de16:	2104      	movs	r1, #4
 801de18:	f007 fcbd 	bl	8025796 <_ZdlPvj>
 801de1c:	4620      	mov	r0, r4
 801de1e:	bd10      	pop	{r4, pc}

0801de20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de20:	b510      	push	{r4, lr}
 801de22:	4604      	mov	r4, r0
 801de24:	2104      	movs	r1, #4
 801de26:	f007 fcb6 	bl	8025796 <_ZdlPvj>
 801de2a:	4620      	mov	r0, r4
 801de2c:	bd10      	pop	{r4, pc}

0801de2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de2e:	b510      	push	{r4, lr}
 801de30:	4604      	mov	r4, r0
 801de32:	2104      	movs	r1, #4
 801de34:	f007 fcaf 	bl	8025796 <_ZdlPvj>
 801de38:	4620      	mov	r0, r4
 801de3a:	bd10      	pop	{r4, pc}

0801de3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de3c:	b510      	push	{r4, lr}
 801de3e:	4604      	mov	r4, r0
 801de40:	2104      	movs	r1, #4
 801de42:	f007 fca8 	bl	8025796 <_ZdlPvj>
 801de46:	4620      	mov	r0, r4
 801de48:	bd10      	pop	{r4, pc}

0801de4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de4a:	b510      	push	{r4, lr}
 801de4c:	4604      	mov	r4, r0
 801de4e:	2104      	movs	r1, #4
 801de50:	f007 fca1 	bl	8025796 <_ZdlPvj>
 801de54:	4620      	mov	r0, r4
 801de56:	bd10      	pop	{r4, pc}

0801de58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de58:	b510      	push	{r4, lr}
 801de5a:	4604      	mov	r4, r0
 801de5c:	2104      	movs	r1, #4
 801de5e:	f007 fc9a 	bl	8025796 <_ZdlPvj>
 801de62:	4620      	mov	r0, r4
 801de64:	bd10      	pop	{r4, pc}

0801de66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de66:	b510      	push	{r4, lr}
 801de68:	4604      	mov	r4, r0
 801de6a:	2104      	movs	r1, #4
 801de6c:	f007 fc93 	bl	8025796 <_ZdlPvj>
 801de70:	4620      	mov	r0, r4
 801de72:	bd10      	pop	{r4, pc}

0801de74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de74:	b510      	push	{r4, lr}
 801de76:	4604      	mov	r4, r0
 801de78:	2104      	movs	r1, #4
 801de7a:	f007 fc8c 	bl	8025796 <_ZdlPvj>
 801de7e:	4620      	mov	r0, r4
 801de80:	bd10      	pop	{r4, pc}

0801de82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de82:	b510      	push	{r4, lr}
 801de84:	4604      	mov	r4, r0
 801de86:	2104      	movs	r1, #4
 801de88:	f007 fc85 	bl	8025796 <_ZdlPvj>
 801de8c:	4620      	mov	r0, r4
 801de8e:	bd10      	pop	{r4, pc}

0801de90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801de90:	b510      	push	{r4, lr}
 801de92:	4604      	mov	r4, r0
 801de94:	2104      	movs	r1, #4
 801de96:	f007 fc7e 	bl	8025796 <_ZdlPvj>
 801de9a:	4620      	mov	r0, r4
 801de9c:	bd10      	pop	{r4, pc}

0801de9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801de9e:	b510      	push	{r4, lr}
 801dea0:	4604      	mov	r4, r0
 801dea2:	2104      	movs	r1, #4
 801dea4:	f007 fc77 	bl	8025796 <_ZdlPvj>
 801dea8:	4620      	mov	r0, r4
 801deaa:	bd10      	pop	{r4, pc}

0801deac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801deac:	b510      	push	{r4, lr}
 801deae:	4604      	mov	r4, r0
 801deb0:	2104      	movs	r1, #4
 801deb2:	f007 fc70 	bl	8025796 <_ZdlPvj>
 801deb6:	4620      	mov	r0, r4
 801deb8:	bd10      	pop	{r4, pc}

0801deba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801deba:	b510      	push	{r4, lr}
 801debc:	4604      	mov	r4, r0
 801debe:	2104      	movs	r1, #4
 801dec0:	f007 fc69 	bl	8025796 <_ZdlPvj>
 801dec4:	4620      	mov	r0, r4
 801dec6:	bd10      	pop	{r4, pc}

0801dec8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801decc:	4d9e      	ldr	r5, [pc, #632]	; (801e148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801dece:	4690      	mov	r8, r2
 801ded0:	b08f      	sub	sp, #60	; 0x3c
 801ded2:	4604      	mov	r4, r0
 801ded4:	682a      	ldr	r2, [r5, #0]
 801ded6:	4689      	mov	r9, r1
 801ded8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801dedc:	2a02      	cmp	r2, #2
 801dede:	d106      	bne.n	801deee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801dee0:	4b9a      	ldr	r3, [pc, #616]	; (801e14c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801dee2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801dee6:	4a9a      	ldr	r2, [pc, #616]	; (801e150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dee8:	489a      	ldr	r0, [pc, #616]	; (801e154 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801deea:	f007 fc7f 	bl	80257ec <__assert_func>
 801deee:	ae0e      	add	r6, sp, #56	; 0x38
 801def0:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801def4:	4630      	mov	r0, r6
 801def6:	f7fe f8b3 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801defa:	6823      	ldr	r3, [r4, #0]
 801defc:	4607      	mov	r7, r0
 801defe:	4620      	mov	r0, r4
 801df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df02:	4798      	blx	r3
 801df04:	4287      	cmp	r7, r0
 801df06:	d004      	beq.n	801df12 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801df08:	4b93      	ldr	r3, [pc, #588]	; (801e158 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801df0a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801df0e:	4a90      	ldr	r2, [pc, #576]	; (801e150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801df10:	e7ea      	b.n	801dee8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801df12:	4630      	mov	r0, r6
 801df14:	f7fe f820 	bl	801bf58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df18:	4607      	mov	r7, r0
 801df1a:	b920      	cbnz	r0, 801df26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801df1c:	4b8f      	ldr	r3, [pc, #572]	; (801e15c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801df1e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801df22:	4a8b      	ldr	r2, [pc, #556]	; (801e150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801df24:	e7e0      	b.n	801dee8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801df26:	f8d8 0000 	ldr.w	r0, [r8]
 801df2a:	ab06      	add	r3, sp, #24
 801df2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801df30:	f9b8 a000 	ldrsh.w	sl, [r8]
 801df34:	c303      	stmia	r3!, {r0, r1}
 801df36:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801df3a:	ab08      	add	r3, sp, #32
 801df3c:	f8d9 0000 	ldr.w	r0, [r9]
 801df40:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801df44:	c303      	stmia	r3!, {r0, r1}
 801df46:	4630      	mov	r0, r6
 801df48:	f7fd fefe 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df4c:	4680      	mov	r8, r0
 801df4e:	4630      	mov	r0, r6
 801df50:	4e83      	ldr	r6, [pc, #524]	; (801e160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801df52:	f7fd ff33 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df56:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801df5a:	f10d 0920 	add.w	r9, sp, #32
 801df5e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801df62:	a806      	add	r0, sp, #24
 801df64:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801df68:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801df6c:	f7fb f83e 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df70:	4648      	mov	r0, r9
 801df72:	f7fb f83b 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df76:	a80a      	add	r0, sp, #40	; 0x28
 801df78:	f7fb f838 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df7c:	4b79      	ldr	r3, [pc, #484]	; (801e164 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801df7e:	2100      	movs	r1, #0
 801df80:	f9b6 2000 	ldrsh.w	r2, [r6]
 801df84:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df88:	4648      	mov	r0, r9
 801df8a:	910c      	str	r1, [sp, #48]	; 0x30
 801df8c:	a90c      	add	r1, sp, #48	; 0x30
 801df8e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801df92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801df96:	f7f7 fb93 	bl	80156c0 <_ZN8touchgfx4RectaNERKS0_>
 801df9a:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801df9e:	9602      	str	r6, [sp, #8]
 801dfa0:	f1bc 0f00 	cmp.w	ip, #0
 801dfa4:	f000 80a4 	beq.w	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dfa8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dfac:	2e00      	cmp	r6, #0
 801dfae:	f000 809f 	beq.w	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dfb2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dfb6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dfba:	4288      	cmp	r0, r1
 801dfbc:	db36      	blt.n	801e02c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfbe:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dfc2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dfc6:	429a      	cmp	r2, r3
 801dfc8:	db30      	blt.n	801e02c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfca:	4460      	add	r0, ip
 801dfcc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dfd0:	4461      	add	r1, ip
 801dfd2:	b200      	sxth	r0, r0
 801dfd4:	b209      	sxth	r1, r1
 801dfd6:	4288      	cmp	r0, r1
 801dfd8:	dc28      	bgt.n	801e02c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfda:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dfde:	4432      	add	r2, r6
 801dfe0:	440b      	add	r3, r1
 801dfe2:	b212      	sxth	r2, r2
 801dfe4:	b21b      	sxth	r3, r3
 801dfe6:	429a      	cmp	r2, r3
 801dfe8:	dc20      	bgt.n	801e02c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfea:	6823      	ldr	r3, [r4, #0]
 801dfec:	4620      	mov	r0, r4
 801dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dff0:	4798      	blx	r3
 801dff2:	4682      	mov	sl, r0
 801dff4:	6828      	ldr	r0, [r5, #0]
 801dff6:	6803      	ldr	r3, [r0, #0]
 801dff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dffa:	4798      	blx	r3
 801dffc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e000:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e004:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e008:	9303      	str	r3, [sp, #12]
 801e00a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e00e:	1a9b      	subs	r3, r3, r2
 801e010:	b29b      	uxth	r3, r3
 801e012:	b21c      	sxth	r4, r3
 801e014:	2c00      	cmp	r4, #0
 801e016:	dc0e      	bgt.n	801e036 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801e018:	b134      	cbz	r4, 801e028 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801e01a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e01e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e022:	4413      	add	r3, r2
 801e024:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801e028:	463c      	mov	r4, r7
 801e02a:	e00b      	b.n	801e044 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801e02c:	4b4e      	ldr	r3, [pc, #312]	; (801e168 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801e02e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e032:	4a47      	ldr	r2, [pc, #284]	; (801e150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e034:	e758      	b.n	801dee8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e036:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e03a:	ebab 0303 	sub.w	r3, fp, r3
 801e03e:	443c      	add	r4, r7
 801e040:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e044:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e048:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e04c:	1a9b      	subs	r3, r3, r2
 801e04e:	b29b      	uxth	r3, r3
 801e050:	b219      	sxth	r1, r3
 801e052:	2900      	cmp	r1, #0
 801e054:	dd50      	ble.n	801e0f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801e056:	9a03      	ldr	r2, [sp, #12]
 801e058:	fb02 4401 	mla	r4, r2, r1, r4
 801e05c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e060:	1ad3      	subs	r3, r2, r3
 801e062:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e066:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e06a:	f1bc 0f00 	cmp.w	ip, #0
 801e06e:	dd3f      	ble.n	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e070:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e074:	2e00      	cmp	r6, #0
 801e076:	dd3b      	ble.n	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e078:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e07c:	2203      	movs	r2, #3
 801e07e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e082:	fb0a f801 	mul.w	r8, sl, r1
 801e086:	fb13 8802 	smlabb	r8, r3, r2, r8
 801e08a:	9a02      	ldr	r2, [sp, #8]
 801e08c:	4480      	add	r8, r0
 801e08e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e092:	8812      	ldrh	r2, [r2, #0]
 801e094:	4584      	cmp	ip, r0
 801e096:	eba2 0303 	sub.w	r3, r2, r3
 801e09a:	bfa8      	it	ge
 801e09c:	4684      	movge	ip, r0
 801e09e:	459c      	cmp	ip, r3
 801e0a0:	bfa8      	it	ge
 801e0a2:	469c      	movge	ip, r3
 801e0a4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801e0a8:	429e      	cmp	r6, r3
 801e0aa:	bfa8      	it	ge
 801e0ac:	461e      	movge	r6, r3
 801e0ae:	4b2d      	ldr	r3, [pc, #180]	; (801e164 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e0b0:	881b      	ldrh	r3, [r3, #0]
 801e0b2:	1a59      	subs	r1, r3, r1
 801e0b4:	4633      	mov	r3, r6
 801e0b6:	428e      	cmp	r6, r1
 801e0b8:	bfa8      	it	ge
 801e0ba:	460b      	movge	r3, r1
 801e0bc:	4562      	cmp	r2, ip
 801e0be:	9302      	str	r3, [sp, #8]
 801e0c0:	d12d      	bne.n	801e11e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e0c2:	455a      	cmp	r2, fp
 801e0c4:	d12b      	bne.n	801e11e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e0c6:	6828      	ldr	r0, [r5, #0]
 801e0c8:	6803      	ldr	r3, [r0, #0]
 801e0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0cc:	4798      	blx	r3
 801e0ce:	07c3      	lsls	r3, r0, #31
 801e0d0:	d51b      	bpl.n	801e10a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801e0d2:	6828      	ldr	r0, [r5, #0]
 801e0d4:	9b02      	ldr	r3, [sp, #8]
 801e0d6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e0da:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e0de:	6803      	ldr	r3, [r0, #0]
 801e0e0:	f8cd b000 	str.w	fp, [sp]
 801e0e4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801e0e6:	4623      	mov	r3, r4
 801e0e8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e0ec:	47a8      	blx	r5
 801e0ee:	4607      	mov	r7, r0
 801e0f0:	4638      	mov	r0, r7
 801e0f2:	b00f      	add	sp, #60	; 0x3c
 801e0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0f8:	bf1f      	itttt	ne
 801e0fa:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e0fe:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e102:	189b      	addne	r3, r3, r2
 801e104:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e108:	e7ad      	b.n	801e066 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801e10a:	6828      	ldr	r0, [r5, #0]
 801e10c:	4642      	mov	r2, r8
 801e10e:	4621      	mov	r1, r4
 801e110:	6803      	ldr	r3, [r0, #0]
 801e112:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801e114:	9b02      	ldr	r3, [sp, #8]
 801e116:	fb03 f30a 	mul.w	r3, r3, sl
 801e11a:	47a8      	blx	r5
 801e11c:	e7e8      	b.n	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e11e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801e122:	f04f 0900 	mov.w	r9, #0
 801e126:	9b02      	ldr	r3, [sp, #8]
 801e128:	454b      	cmp	r3, r9
 801e12a:	dde1      	ble.n	801e0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e12c:	6828      	ldr	r0, [r5, #0]
 801e12e:	4642      	mov	r2, r8
 801e130:	4621      	mov	r1, r4
 801e132:	44d0      	add	r8, sl
 801e134:	6803      	ldr	r3, [r0, #0]
 801e136:	f109 0901 	add.w	r9, r9, #1
 801e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e13c:	461e      	mov	r6, r3
 801e13e:	465b      	mov	r3, fp
 801e140:	47b0      	blx	r6
 801e142:	9b03      	ldr	r3, [sp, #12]
 801e144:	441c      	add	r4, r3
 801e146:	e7ee      	b.n	801e126 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801e148:	2000bb94 	.word	0x2000bb94
 801e14c:	0802adc7 	.word	0x0802adc7
 801e150:	0802b5a9 	.word	0x0802b5a9
 801e154:	0802ad95 	.word	0x0802ad95
 801e158:	0802ae7b 	.word	0x0802ae7b
 801e15c:	0802aed0 	.word	0x0802aed0
 801e160:	2000bb8e 	.word	0x2000bb8e
 801e164:	2000bb90 	.word	0x2000bb90
 801e168:	0802af0e 	.word	0x0802af0e

0801e16c <_ZN8touchgfx8LCD24bppC1Ev>:
 801e16c:	4a0b      	ldr	r2, [pc, #44]	; (801e19c <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801e16e:	6002      	str	r2, [r0, #0]
 801e170:	2200      	movs	r2, #0
 801e172:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e176:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e17a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e17e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e182:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e186:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e18a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e18e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e192:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e196:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e19a:	4770      	bx	lr
 801e19c:	0802b1f4 	.word	0x0802b1f4

0801e1a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1a4:	b093      	sub	sp, #76	; 0x4c
 801e1a6:	880c      	ldrh	r4, [r1, #0]
 801e1a8:	4605      	mov	r5, r0
 801e1aa:	460f      	mov	r7, r1
 801e1ac:	4691      	mov	r9, r2
 801e1ae:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801e1b2:	b12c      	cbz	r4, 801e1c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e1b4:	4b71      	ldr	r3, [pc, #452]	; (801e37c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e1b6:	2167      	movs	r1, #103	; 0x67
 801e1b8:	4a71      	ldr	r2, [pc, #452]	; (801e380 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e1ba:	4872      	ldr	r0, [pc, #456]	; (801e384 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e1bc:	f007 fb16 	bl	80257ec <__assert_func>
 801e1c0:	6810      	ldr	r0, [r2, #0]
 801e1c2:	ae0e      	add	r6, sp, #56	; 0x38
 801e1c4:	6851      	ldr	r1, [r2, #4]
 801e1c6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e38c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801e1ca:	c603      	stmia	r6!, {r0, r1}
 801e1cc:	6818      	ldr	r0, [r3, #0]
 801e1ce:	ae10      	add	r6, sp, #64	; 0x40
 801e1d0:	6859      	ldr	r1, [r3, #4]
 801e1d2:	c603      	stmia	r6!, {r0, r1}
 801e1d4:	a80e      	add	r0, sp, #56	; 0x38
 801e1d6:	f7fa ff09 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1da:	4649      	mov	r1, r9
 801e1dc:	a810      	add	r0, sp, #64	; 0x40
 801e1de:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e388 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801e1e2:	f7fa feeb 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e1e6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e1ea:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e1ee:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e1f2:	f8d9 0000 	ldr.w	r0, [r9]
 801e1f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1fa:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801e1fe:	440d      	add	r5, r1
 801e200:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e204:	440a      	add	r2, r1
 801e206:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e20a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e20e:	4413      	add	r3, r2
 801e210:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e214:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801e218:	930b      	str	r3, [sp, #44]	; 0x2c
 801e21a:	6803      	ldr	r3, [r0, #0]
 801e21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e220:	4798      	blx	r3
 801e222:	2801      	cmp	r0, #1
 801e224:	d11e      	bne.n	801e264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801e226:	220b      	movs	r2, #11
 801e228:	9008      	str	r0, [sp, #32]
 801e22a:	b2b6      	uxth	r6, r6
 801e22c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e230:	9207      	str	r2, [sp, #28]
 801e232:	4629      	mov	r1, r5
 801e234:	f8ba 2000 	ldrh.w	r2, [sl]
 801e238:	f8cd 8010 	str.w	r8, [sp, #16]
 801e23c:	9601      	str	r6, [sp, #4]
 801e23e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e242:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e246:	9203      	str	r2, [sp, #12]
 801e248:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e24c:	9202      	str	r2, [sp, #8]
 801e24e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e252:	9200      	str	r2, [sp, #0]
 801e254:	463a      	mov	r2, r7
 801e256:	f8d9 0000 	ldr.w	r0, [r9]
 801e25a:	f7f7 fe7f 	bl	8015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e25e:	b013      	add	sp, #76	; 0x4c
 801e260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e264:	f8d9 0000 	ldr.w	r0, [r9]
 801e268:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801e26c:	6803      	ldr	r3, [r0, #0]
 801e26e:	6a1b      	ldr	r3, [r3, #32]
 801e270:	4798      	blx	r3
 801e272:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e276:	f8ba 3000 	ldrh.w	r3, [sl]
 801e27a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e27e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e282:	fb01 2303 	mla	r3, r1, r3, r2
 801e286:	4621      	mov	r1, r4
 801e288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e28c:	4418      	add	r0, r3
 801e28e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801e292:	930c      	str	r3, [sp, #48]	; 0x30
 801e294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e296:	4299      	cmp	r1, r3
 801e298:	da6a      	bge.n	801e370 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e29a:	1cc2      	adds	r2, r0, #3
 801e29c:	46aa      	mov	sl, r5
 801e29e:	ebaa 0305 	sub.w	r3, sl, r5
 801e2a2:	429e      	cmp	r6, r3
 801e2a4:	dd55      	ble.n	801e352 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e2a6:	2404      	movs	r4, #4
 801e2a8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801e2ac:	fb14 4303 	smlabb	r3, r4, r3, r4
 801e2b0:	eb07 0e03 	add.w	lr, r7, r3
 801e2b4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801e2b8:	b184      	cbz	r4, 801e2dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e2ba:	2cff      	cmp	r4, #255	; 0xff
 801e2bc:	f817 b003 	ldrb.w	fp, [r7, r3]
 801e2c0:	d10e      	bne.n	801e2e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e2c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e2c6:	d10b      	bne.n	801e2e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e2c8:	f802 bc03 	strb.w	fp, [r2, #-3]
 801e2cc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801e2d0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801e2d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801e2d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e2dc:	3203      	adds	r2, #3
 801e2de:	e7de      	b.n	801e29e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e2e0:	fb08 f404 	mul.w	r4, r8, r4
 801e2e4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801e2e8:	1c63      	adds	r3, r4, #1
 801e2ea:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e2ee:	121b      	asrs	r3, r3, #8
 801e2f0:	b29c      	uxth	r4, r3
 801e2f2:	43db      	mvns	r3, r3
 801e2f4:	fb1b fb04 	smulbb	fp, fp, r4
 801e2f8:	b2db      	uxtb	r3, r3
 801e2fa:	fb0c bc03 	mla	ip, ip, r3, fp
 801e2fe:	fa1f fc8c 	uxth.w	ip, ip
 801e302:	f10c 0b01 	add.w	fp, ip, #1
 801e306:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e30a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801e30e:	fb1b fb03 	smulbb	fp, fp, r3
 801e312:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e316:	f802 cc03 	strb.w	ip, [r2, #-3]
 801e31a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e31e:	fb0c bc04 	mla	ip, ip, r4, fp
 801e322:	fa1f fc8c 	uxth.w	ip, ip
 801e326:	f10c 0b01 	add.w	fp, ip, #1
 801e32a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e32e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e332:	f802 cc02 	strb.w	ip, [r2, #-2]
 801e336:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801e33a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801e33e:	fb1c f303 	smulbb	r3, ip, r3
 801e342:	fb0e 3304 	mla	r3, lr, r4, r3
 801e346:	b29b      	uxth	r3, r3
 801e348:	1c5c      	adds	r4, r3, #1
 801e34a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e34e:	121b      	asrs	r3, r3, #8
 801e350:	e7c2      	b.n	801e2d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e354:	3101      	adds	r1, #1
 801e356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e358:	881b      	ldrh	r3, [r3, #0]
 801e35a:	1b9b      	subs	r3, r3, r6
 801e35c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e360:	4413      	add	r3, r2
 801e362:	4418      	add	r0, r3
 801e364:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e368:	1b9b      	subs	r3, r3, r6
 801e36a:	444b      	add	r3, r9
 801e36c:	441d      	add	r5, r3
 801e36e:	e791      	b.n	801e294 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e370:	4b05      	ldr	r3, [pc, #20]	; (801e388 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e372:	6818      	ldr	r0, [r3, #0]
 801e374:	6803      	ldr	r3, [r0, #0]
 801e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e378:	4798      	blx	r3
 801e37a:	e770      	b.n	801e25e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e37c:	0802acf9 	.word	0x0802acf9
 801e380:	0802b3cb 	.word	0x0802b3cb
 801e384:	0802ad95 	.word	0x0802ad95
 801e388:	2000bb94 	.word	0x2000bb94
 801e38c:	2000bb8e 	.word	0x2000bb8e

0801e390 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e394:	4614      	mov	r4, r2
 801e396:	880a      	ldrh	r2, [r1, #0]
 801e398:	b091      	sub	sp, #68	; 0x44
 801e39a:	4680      	mov	r8, r0
 801e39c:	2a01      	cmp	r2, #1
 801e39e:	460e      	mov	r6, r1
 801e3a0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e3a4:	d005      	beq.n	801e3b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e3a6:	4b6d      	ldr	r3, [pc, #436]	; (801e55c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e3a8:	21b5      	movs	r1, #181	; 0xb5
 801e3aa:	4a6d      	ldr	r2, [pc, #436]	; (801e560 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e3ac:	486d      	ldr	r0, [pc, #436]	; (801e564 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e3ae:	f007 fa1d 	bl	80257ec <__assert_func>
 801e3b2:	6820      	ldr	r0, [r4, #0]
 801e3b4:	ad0c      	add	r5, sp, #48	; 0x30
 801e3b6:	6861      	ldr	r1, [r4, #4]
 801e3b8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e568 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e3bc:	c503      	stmia	r5!, {r0, r1}
 801e3be:	6818      	ldr	r0, [r3, #0]
 801e3c0:	ad0e      	add	r5, sp, #56	; 0x38
 801e3c2:	6859      	ldr	r1, [r3, #4]
 801e3c4:	c503      	stmia	r5!, {r0, r1}
 801e3c6:	a80c      	add	r0, sp, #48	; 0x30
 801e3c8:	f7fa fe10 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3cc:	4621      	mov	r1, r4
 801e3ce:	a80e      	add	r0, sp, #56	; 0x38
 801e3d0:	f7fa fdf4 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e3d4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e3d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e3dc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e3e0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e3e4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e3e8:	eb08 0401 	add.w	r4, r8, r1
 801e3ec:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e3f0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e56c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e3f4:	440a      	add	r2, r1
 801e3f6:	f8d8 0000 	ldr.w	r0, [r8]
 801e3fa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e3fe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e402:	4413      	add	r3, r2
 801e404:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e408:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e40c:	930a      	str	r3, [sp, #40]	; 0x28
 801e40e:	6803      	ldr	r3, [r0, #0]
 801e410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e414:	4798      	blx	r3
 801e416:	2801      	cmp	r0, #1
 801e418:	d11e      	bne.n	801e458 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e41a:	220b      	movs	r2, #11
 801e41c:	9008      	str	r0, [sp, #32]
 801e41e:	b2ad      	uxth	r5, r5
 801e420:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e424:	9207      	str	r2, [sp, #28]
 801e426:	4621      	mov	r1, r4
 801e428:	f8b9 2000 	ldrh.w	r2, [r9]
 801e42c:	9501      	str	r5, [sp, #4]
 801e42e:	9206      	str	r2, [sp, #24]
 801e430:	2200      	movs	r2, #0
 801e432:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e436:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e43a:	9203      	str	r2, [sp, #12]
 801e43c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e440:	9202      	str	r2, [sp, #8]
 801e442:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e446:	9200      	str	r2, [sp, #0]
 801e448:	4632      	mov	r2, r6
 801e44a:	f8d8 0000 	ldr.w	r0, [r8]
 801e44e:	f7f7 fd85 	bl	8015f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e452:	b011      	add	sp, #68	; 0x44
 801e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e458:	f8d8 0000 	ldr.w	r0, [r8]
 801e45c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e460:	6803      	ldr	r3, [r0, #0]
 801e462:	6a1b      	ldr	r3, [r3, #32]
 801e464:	4798      	blx	r3
 801e466:	f8b9 3000 	ldrh.w	r3, [r9]
 801e46a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e46e:	f04f 0e00 	mov.w	lr, #0
 801e472:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e476:	fa1f f987 	uxth.w	r9, r7
 801e47a:	fb01 2303 	mla	r3, r1, r3, r2
 801e47e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e486:	b289      	uxth	r1, r1
 801e488:	4418      	add	r0, r3
 801e48a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e48e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e492:	459e      	cmp	lr, r3
 801e494:	da5c      	bge.n	801e550 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e496:	1cc3      	adds	r3, r0, #3
 801e498:	46a2      	mov	sl, r4
 801e49a:	ebaa 0204 	sub.w	r2, sl, r4
 801e49e:	4295      	cmp	r5, r2
 801e4a0:	dd46      	ble.n	801e530 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e4a2:	f04f 0c03 	mov.w	ip, #3
 801e4a6:	f04f 0b04 	mov.w	fp, #4
 801e4aa:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e4ae:	2fff      	cmp	r7, #255	; 0xff
 801e4b0:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e4b4:	eb06 0c02 	add.w	ip, r6, r2
 801e4b8:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e4bc:	d02f      	beq.n	801e51e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e4be:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e4c2:	fb12 f201 	smulbb	r2, r2, r1
 801e4c6:	fb0b 2209 	mla	r2, fp, r9, r2
 801e4ca:	b292      	uxth	r2, r2
 801e4cc:	f102 0b01 	add.w	fp, r2, #1
 801e4d0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e4d4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e4d8:	fb1b fb01 	smulbb	fp, fp, r1
 801e4dc:	1212      	asrs	r2, r2, #8
 801e4de:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e4e2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e4e6:	fb02 b209 	mla	r2, r2, r9, fp
 801e4ea:	b292      	uxth	r2, r2
 801e4ec:	f102 0b01 	add.w	fp, r2, #1
 801e4f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e4f4:	1212      	asrs	r2, r2, #8
 801e4f6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e4fa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e4fe:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e502:	fb1c fc01 	smulbb	ip, ip, r1
 801e506:	fb02 c209 	mla	r2, r2, r9, ip
 801e50a:	b292      	uxth	r2, r2
 801e50c:	f102 0c01 	add.w	ip, r2, #1
 801e510:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e514:	1212      	asrs	r2, r2, #8
 801e516:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e51a:	3303      	adds	r3, #3
 801e51c:	e7bd      	b.n	801e49a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e51e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e522:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e526:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e52a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e52e:	e7f2      	b.n	801e516 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e530:	4b0d      	ldr	r3, [pc, #52]	; (801e568 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e532:	f10e 0e01 	add.w	lr, lr, #1
 801e536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e538:	881b      	ldrh	r3, [r3, #0]
 801e53a:	1b5b      	subs	r3, r3, r5
 801e53c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e540:	4413      	add	r3, r2
 801e542:	4418      	add	r0, r3
 801e544:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e548:	1b5b      	subs	r3, r3, r5
 801e54a:	4443      	add	r3, r8
 801e54c:	441c      	add	r4, r3
 801e54e:	e79f      	b.n	801e490 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e550:	4b06      	ldr	r3, [pc, #24]	; (801e56c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e552:	6818      	ldr	r0, [r3, #0]
 801e554:	6803      	ldr	r3, [r0, #0]
 801e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e558:	4798      	blx	r3
 801e55a:	e77a      	b.n	801e452 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e55c:	0802ac05 	.word	0x0802ac05
 801e560:	0802b2be 	.word	0x0802b2be
 801e564:	0802ad95 	.word	0x0802ad95
 801e568:	2000bb8e 	.word	0x2000bb8e
 801e56c:	2000bb94 	.word	0x2000bb94

0801e570 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e570:	b570      	push	{r4, r5, r6, lr}
 801e572:	780d      	ldrb	r5, [r1, #0]
 801e574:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e578:	2d01      	cmp	r5, #1
 801e57a:	d00d      	beq.n	801e598 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e57c:	d307      	bcc.n	801e58e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e57e:	2d02      	cmp	r5, #2
 801e580:	d10f      	bne.n	801e5a2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e582:	4b08      	ldr	r3, [pc, #32]	; (801e5a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e584:	215a      	movs	r1, #90	; 0x5a
 801e586:	4a08      	ldr	r2, [pc, #32]	; (801e5a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e588:	4808      	ldr	r0, [pc, #32]	; (801e5ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e58a:	f007 f92f 	bl	80257ec <__assert_func>
 801e58e:	9404      	str	r4, [sp, #16]
 801e590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e594:	f7ff be04 	b.w	801e1a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e598:	9404      	str	r4, [sp, #16]
 801e59a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e59e:	f7ff bef7 	b.w	801e390 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e5a2:	bd70      	pop	{r4, r5, r6, pc}
 801e5a4:	0802abba 	.word	0x0802abba
 801e5a8:	0802b23c 	.word	0x0802b23c
 801e5ac:	0802ad95 	.word	0x0802ad95

0801e5b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b4:	b08b      	sub	sp, #44	; 0x2c
 801e5b6:	460c      	mov	r4, r1
 801e5b8:	4680      	mov	r8, r0
 801e5ba:	469a      	mov	sl, r3
 801e5bc:	6808      	ldr	r0, [r1, #0]
 801e5be:	ab06      	add	r3, sp, #24
 801e5c0:	6849      	ldr	r1, [r1, #4]
 801e5c2:	c303      	stmia	r3!, {r0, r1}
 801e5c4:	6810      	ldr	r0, [r2, #0]
 801e5c6:	ab08      	add	r3, sp, #32
 801e5c8:	6851      	ldr	r1, [r2, #4]
 801e5ca:	c303      	stmia	r3!, {r0, r1}
 801e5cc:	a806      	add	r0, sp, #24
 801e5ce:	f7fa fd0d 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e5d2:	4621      	mov	r1, r4
 801e5d4:	a808      	add	r0, sp, #32
 801e5d6:	4c61      	ldr	r4, [pc, #388]	; (801e75c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e5d8:	f7fa fcf0 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e5dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e5e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e5e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e5e8:	6820      	ldr	r0, [r4, #0]
 801e5ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e5ee:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e5f2:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e5f6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e5fa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e5fe:	440a      	add	r2, r1
 801e600:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e604:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e608:	4413      	add	r3, r2
 801e60a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e60e:	6803      	ldr	r3, [r0, #0]
 801e610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e612:	4798      	blx	r3
 801e614:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e618:	d118      	bne.n	801e64c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e61a:	f010 0f20 	tst.w	r0, #32
 801e61e:	6820      	ldr	r0, [r4, #0]
 801e620:	d017      	beq.n	801e652 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e622:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e626:	b2bf      	uxth	r7, r7
 801e628:	6801      	ldr	r1, [r0, #0]
 801e62a:	9402      	str	r4, [sp, #8]
 801e62c:	fa1f f489 	uxth.w	r4, r9
 801e630:	f8cd a00c 	str.w	sl, [sp, #12]
 801e634:	9401      	str	r4, [sp, #4]
 801e636:	9700      	str	r7, [sp, #0]
 801e638:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e63c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e63e:	4641      	mov	r1, r8
 801e640:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e644:	47a0      	blx	r4
 801e646:	b00b      	add	sp, #44	; 0x2c
 801e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e64c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e650:	e7e5      	b.n	801e61e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e652:	6803      	ldr	r3, [r0, #0]
 801e654:	6a1b      	ldr	r3, [r3, #32]
 801e656:	4798      	blx	r3
 801e658:	4b41      	ldr	r3, [pc, #260]	; (801e760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e65a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e65e:	f04f 0c00 	mov.w	ip, #0
 801e662:	881a      	ldrh	r2, [r3, #0]
 801e664:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e668:	fb04 1202 	mla	r2, r4, r2, r1
 801e66c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e670:	4410      	add	r0, r2
 801e672:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e676:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e67a:	0092      	lsls	r2, r2, #2
 801e67c:	9105      	str	r1, [sp, #20]
 801e67e:	9204      	str	r2, [sp, #16]
 801e680:	45cc      	cmp	ip, r9
 801e682:	da65      	bge.n	801e750 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e684:	1cc4      	adds	r4, r0, #3
 801e686:	f108 0504 	add.w	r5, r8, #4
 801e68a:	f04f 0e00 	mov.w	lr, #0
 801e68e:	45be      	cmp	lr, r7
 801e690:	da4d      	bge.n	801e72e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e692:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e696:	b181      	cbz	r1, 801e6ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e698:	29ff      	cmp	r1, #255	; 0xff
 801e69a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e69e:	d111      	bne.n	801e6c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e6a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e6a4:	d10e      	bne.n	801e6c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e6a6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e6aa:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e6ae:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e6b2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e6b6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e6ba:	f10e 0e01 	add.w	lr, lr, #1
 801e6be:	3403      	adds	r4, #3
 801e6c0:	3504      	adds	r5, #4
 801e6c2:	e7e4      	b.n	801e68e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e6c4:	fb0a f101 	mul.w	r1, sl, r1
 801e6c8:	1c4a      	adds	r2, r1, #1
 801e6ca:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e6ce:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e6d2:	1212      	asrs	r2, r2, #8
 801e6d4:	b296      	uxth	r6, r2
 801e6d6:	43d2      	mvns	r2, r2
 801e6d8:	fb1b fb06 	smulbb	fp, fp, r6
 801e6dc:	b2d2      	uxtb	r2, r2
 801e6de:	fb01 b102 	mla	r1, r1, r2, fp
 801e6e2:	b289      	uxth	r1, r1
 801e6e4:	f101 0b01 	add.w	fp, r1, #1
 801e6e8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e6ec:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e6f0:	fb1b fb02 	smulbb	fp, fp, r2
 801e6f4:	1209      	asrs	r1, r1, #8
 801e6f6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e6fa:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e6fe:	fb01 b106 	mla	r1, r1, r6, fp
 801e702:	b289      	uxth	r1, r1
 801e704:	f101 0b01 	add.w	fp, r1, #1
 801e708:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e70c:	1209      	asrs	r1, r1, #8
 801e70e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e712:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e716:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e71a:	fb11 f202 	smulbb	r2, r1, r2
 801e71e:	fb0b 2206 	mla	r2, fp, r6, r2
 801e722:	b292      	uxth	r2, r2
 801e724:	1c56      	adds	r6, r2, #1
 801e726:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e72a:	1212      	asrs	r2, r2, #8
 801e72c:	e7c3      	b.n	801e6b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e72e:	881a      	ldrh	r2, [r3, #0]
 801e730:	f10c 0c01 	add.w	ip, ip, #1
 801e734:	9905      	ldr	r1, [sp, #20]
 801e736:	1bd2      	subs	r2, r2, r7
 801e738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e73c:	440a      	add	r2, r1
 801e73e:	9904      	ldr	r1, [sp, #16]
 801e740:	4410      	add	r0, r2
 801e742:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e746:	1bd2      	subs	r2, r2, r7
 801e748:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e74c:	4490      	add	r8, r2
 801e74e:	e797      	b.n	801e680 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e750:	4b02      	ldr	r3, [pc, #8]	; (801e75c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e752:	6818      	ldr	r0, [r3, #0]
 801e754:	6803      	ldr	r3, [r0, #0]
 801e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e758:	4798      	blx	r3
 801e75a:	e774      	b.n	801e646 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e75c:	2000bb94 	.word	0x2000bb94
 801e760:	2000bb8e 	.word	0x2000bb8e

0801e764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e768:	b085      	sub	sp, #20
 801e76a:	4606      	mov	r6, r0
 801e76c:	460c      	mov	r4, r1
 801e76e:	4691      	mov	r9, r2
 801e770:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e774:	4698      	mov	r8, r3
 801e776:	b385      	cbz	r5, 801e7da <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e778:	4608      	mov	r0, r1
 801e77a:	f7fd fae5 	bl	801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e77e:	4607      	mov	r7, r0
 801e780:	4620      	mov	r0, r4
 801e782:	f7fd fb1b 	bl	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e786:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e78a:	4620      	mov	r0, r4
 801e78c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e790:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e794:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e798:	f7fd fc62 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e79c:	2801      	cmp	r0, #1
 801e79e:	d00f      	beq.n	801e7c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e7a0:	4620      	mov	r0, r4
 801e7a2:	f7fd fc5d 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7a6:	2802      	cmp	r0, #2
 801e7a8:	d00a      	beq.n	801e7c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	f7fd fc58 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7b0:	280b      	cmp	r0, #11
 801e7b2:	d005      	beq.n	801e7c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e7b4:	4b1b      	ldr	r3, [pc, #108]	; (801e824 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e7b6:	2142      	movs	r1, #66	; 0x42
 801e7b8:	4a1b      	ldr	r2, [pc, #108]	; (801e828 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e7ba:	481c      	ldr	r0, [pc, #112]	; (801e82c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801e7bc:	f007 f816 	bl	80257ec <__assert_func>
 801e7c0:	4620      	mov	r0, r4
 801e7c2:	f7fd fc4d 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7c6:	2802      	cmp	r0, #2
 801e7c8:	4620      	mov	r0, r4
 801e7ca:	d109      	bne.n	801e7e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801e7cc:	f7fd fbc4 	bl	801bf58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7d0:	462b      	mov	r3, r5
 801e7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7d4:	a902      	add	r1, sp, #8
 801e7d6:	f7ff feeb 	bl	801e5b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e7da:	b005      	add	sp, #20
 801e7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7e0:	f7fd fc3e 	bl	801c060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7e4:	280b      	cmp	r0, #11
 801e7e6:	d10e      	bne.n	801e806 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	f7fd fbb5 	bl	801bf58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7ee:	4606      	mov	r6, r0
 801e7f0:	4620      	mov	r0, r4
 801e7f2:	f7fd fbe3 	bl	801bfbc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e7f6:	9500      	str	r5, [sp, #0]
 801e7f8:	4601      	mov	r1, r0
 801e7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7fc:	aa02      	add	r2, sp, #8
 801e7fe:	4630      	mov	r0, r6
 801e800:	f7ff feb6 	bl	801e570 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e804:	e7e9      	b.n	801e7da <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e806:	6833      	ldr	r3, [r6, #0]
 801e808:	4620      	mov	r0, r4
 801e80a:	691f      	ldr	r7, [r3, #16]
 801e80c:	f7fd fba4 	bl	801bf58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e810:	2300      	movs	r3, #0
 801e812:	4601      	mov	r1, r0
 801e814:	aa02      	add	r2, sp, #8
 801e816:	4630      	mov	r0, r6
 801e818:	e9cd 5300 	strd	r5, r3, [sp]
 801e81c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e81e:	47b8      	blx	r7
 801e820:	e7db      	b.n	801e7da <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e822:	bf00      	nop
 801e824:	0802ac53 	.word	0x0802ac53
 801e828:	0802b347 	.word	0x0802b347
 801e82c:	0802ad95 	.word	0x0802ad95

0801e830 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e830:	b570      	push	{r4, r5, r6, lr}
 801e832:	9d04      	ldr	r5, [sp, #16]
 801e834:	460c      	mov	r4, r1
 801e836:	4619      	mov	r1, r3
 801e838:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e83c:	2a0c      	cmp	r2, #12
 801e83e:	d826      	bhi.n	801e88e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e840:	e8df f002 	tbb	[pc, r2]
 801e844:	200e1407 	.word	0x200e1407
 801e848:	20202020 	.word	0x20202020
 801e84c:	20202020 	.word	0x20202020
 801e850:	20          	.byte	0x20
 801e851:	00          	.byte	0x00
 801e852:	4b0f      	ldr	r3, [pc, #60]	; (801e890 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e854:	f240 117f 	movw	r1, #383	; 0x17f
 801e858:	4a0e      	ldr	r2, [pc, #56]	; (801e894 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e85a:	480f      	ldr	r0, [pc, #60]	; (801e898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e85c:	f006 ffc6 	bl	80257ec <__assert_func>
 801e860:	462a      	mov	r2, r5
 801e862:	4620      	mov	r0, r4
 801e864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e868:	f7ff bea2 	b.w	801e5b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e86c:	6802      	ldr	r2, [r0, #0]
 801e86e:	2600      	movs	r6, #0
 801e870:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e874:	6916      	ldr	r6, [r2, #16]
 801e876:	462b      	mov	r3, r5
 801e878:	460a      	mov	r2, r1
 801e87a:	4621      	mov	r1, r4
 801e87c:	46b4      	mov	ip, r6
 801e87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e882:	4760      	bx	ip
 801e884:	4b05      	ldr	r3, [pc, #20]	; (801e89c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e886:	f240 1191 	movw	r1, #401	; 0x191
 801e88a:	4a02      	ldr	r2, [pc, #8]	; (801e894 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e88c:	e7e5      	b.n	801e85a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e88e:	bd70      	pop	{r4, r5, r6, pc}
 801e890:	0802af6e 	.word	0x0802af6e
 801e894:	0802b62f 	.word	0x0802b62f
 801e898:	0802ad95 	.word	0x0802ad95
 801e89c:	0802afaf 	.word	0x0802afaf

0801e8a0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e8a0:	b158      	cbz	r0, 801e8ba <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e8a2:	2902      	cmp	r1, #2
 801e8a4:	d00f      	beq.n	801e8c6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e8a6:	2903      	cmp	r1, #3
 801e8a8:	d010      	beq.n	801e8cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e8aa:	2901      	cmp	r1, #1
 801e8ac:	d101      	bne.n	801e8b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e8ae:	2001      	movs	r0, #1
 801e8b0:	4770      	bx	lr
 801e8b2:	4b08      	ldr	r3, [pc, #32]	; (801e8d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e8b4:	8819      	ldrh	r1, [r3, #0]
 801e8b6:	4248      	negs	r0, r1
 801e8b8:	4770      	bx	lr
 801e8ba:	2902      	cmp	r1, #2
 801e8bc:	d006      	beq.n	801e8cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e8be:	2903      	cmp	r1, #3
 801e8c0:	d0f7      	beq.n	801e8b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e8c2:	2901      	cmp	r1, #1
 801e8c4:	d1f3      	bne.n	801e8ae <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e8c6:	4b03      	ldr	r3, [pc, #12]	; (801e8d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e8c8:	8818      	ldrh	r0, [r3, #0]
 801e8ca:	4770      	bx	lr
 801e8cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e8d0:	4770      	bx	lr
 801e8d2:	bf00      	nop
 801e8d4:	2000bb8e 	.word	0x2000bb8e

0801e8d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e8d8:	b170      	cbz	r0, 801e8f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e8da:	2902      	cmp	r1, #2
 801e8dc:	d012      	beq.n	801e904 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e8de:	2903      	cmp	r1, #3
 801e8e0:	d006      	beq.n	801e8f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e8e2:	2901      	cmp	r1, #1
 801e8e4:	d001      	beq.n	801e8ea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e8e6:	2001      	movs	r0, #1
 801e8e8:	4770      	bx	lr
 801e8ea:	4b08      	ldr	r3, [pc, #32]	; (801e90c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8ec:	8818      	ldrh	r0, [r3, #0]
 801e8ee:	4770      	bx	lr
 801e8f0:	4b06      	ldr	r3, [pc, #24]	; (801e90c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8f2:	8818      	ldrh	r0, [r3, #0]
 801e8f4:	4240      	negs	r0, r0
 801e8f6:	4770      	bx	lr
 801e8f8:	2902      	cmp	r1, #2
 801e8fa:	d0f9      	beq.n	801e8f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e8fc:	2903      	cmp	r1, #3
 801e8fe:	d0f2      	beq.n	801e8e6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e900:	2901      	cmp	r1, #1
 801e902:	d1f2      	bne.n	801e8ea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e904:	f04f 30ff 	mov.w	r0, #4294967295
 801e908:	4770      	bx	lr
 801e90a:	bf00      	nop
 801e90c:	2000bb8e 	.word	0x2000bb8e

0801e910 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e914:	b095      	sub	sp, #84	; 0x54
 801e916:	9109      	str	r1, [sp, #36]	; 0x24
 801e918:	a910      	add	r1, sp, #64	; 0x40
 801e91a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801e91e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801e922:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e926:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e92a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e92e:	e881 000c 	stmia.w	r1, {r2, r3}
 801e932:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e936:	9306      	str	r3, [sp, #24]
 801e938:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e93c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e940:	930e      	str	r3, [sp, #56]	; 0x38
 801e942:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e946:	798f      	ldrb	r7, [r1, #6]
 801e948:	930a      	str	r3, [sp, #40]	; 0x28
 801e94a:	7b4b      	ldrb	r3, [r1, #13]
 801e94c:	0158      	lsls	r0, r3, #5
 801e94e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e952:	4338      	orrs	r0, r7
 801e954:	9008      	str	r0, [sp, #32]
 801e956:	f000 8174 	beq.w	801ec42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e95a:	011b      	lsls	r3, r3, #4
 801e95c:	79c8      	ldrb	r0, [r1, #7]
 801e95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e962:	4303      	orrs	r3, r0
 801e964:	9307      	str	r3, [sp, #28]
 801e966:	f000 816c 	beq.w	801ec42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e96a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e96e:	b29b      	uxth	r3, r3
 801e970:	2e00      	cmp	r6, #0
 801e972:	f000 8112 	beq.w	801eb9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801e976:	1af6      	subs	r6, r6, r3
 801e978:	b2b6      	uxth	r6, r6
 801e97a:	0433      	lsls	r3, r6, #16
 801e97c:	d502      	bpl.n	801e984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e97e:	1bad      	subs	r5, r5, r6
 801e980:	2600      	movs	r6, #0
 801e982:	b22d      	sxth	r5, r5
 801e984:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e988:	a810      	add	r0, sp, #64	; 0x40
 801e98a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e98e:	428d      	cmp	r5, r1
 801e990:	b28b      	uxth	r3, r1
 801e992:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801e996:	bfbf      	itttt	lt
 801e998:	18f6      	addlt	r6, r6, r3
 801e99a:	1b75      	sublt	r5, r6, r5
 801e99c:	b2ae      	uxthlt	r6, r5
 801e99e:	460d      	movlt	r5, r1
 801e9a0:	8891      	ldrh	r1, [r2, #4]
 801e9a2:	440b      	add	r3, r1
 801e9a4:	4629      	mov	r1, r5
 801e9a6:	b21b      	sxth	r3, r3
 801e9a8:	930d      	str	r3, [sp, #52]	; 0x34
 801e9aa:	88d3      	ldrh	r3, [r2, #6]
 801e9ac:	9a06      	ldr	r2, [sp, #24]
 801e9ae:	449a      	add	sl, r3
 801e9b0:	fa0f f38a 	sxth.w	r3, sl
 801e9b4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801e9b8:	930c      	str	r3, [sp, #48]	; 0x30
 801e9ba:	4bb8      	ldr	r3, [pc, #736]	; (801ec9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e9bc:	f893 b000 	ldrb.w	fp, [r3]
 801e9c0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e9c4:	f1dc 0300 	rsbs	r3, ip, #0
 801e9c8:	eb43 030c 	adc.w	r3, r3, ip
 801e9cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801e9ce:	464b      	mov	r3, r9
 801e9d0:	f7fa f9e6 	bl	8018da0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e9d4:	4629      	mov	r1, r5
 801e9d6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e9da:	464b      	mov	r3, r9
 801e9dc:	9a06      	ldr	r2, [sp, #24]
 801e9de:	a810      	add	r0, sp, #64	; 0x40
 801e9e0:	f7fa f9f6 	bl	8018dd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e9e4:	a914      	add	r1, sp, #80	; 0x50
 801e9e6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e9ea:	a813      	add	r0, sp, #76	; 0x4c
 801e9ec:	f7fa fad0 	bl	8018f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e9f0:	f1b9 0f00 	cmp.w	r9, #0
 801e9f4:	f040 80d4 	bne.w	801eba0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801e9f8:	f1bb 0f01 	cmp.w	fp, #1
 801e9fc:	f040 80d8 	bne.w	801ebb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801ea00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	f040 8122 	bne.w	801ec4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801ea08:	4ba5      	ldr	r3, [pc, #660]	; (801eca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ea0a:	6818      	ldr	r0, [r3, #0]
 801ea0c:	6803      	ldr	r3, [r0, #0]
 801ea0e:	6a1b      	ldr	r3, [r3, #32]
 801ea10:	4798      	blx	r3
 801ea12:	4aa4      	ldr	r2, [pc, #656]	; (801eca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801ea14:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801ea18:	8811      	ldrh	r1, [r2, #0]
 801ea1a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ea1e:	fb01 2303 	mla	r3, r1, r3, r2
 801ea22:	2201      	movs	r2, #1
 801ea24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea28:	4590      	cmp	r8, r2
 801ea2a:	4403      	add	r3, r0
 801ea2c:	9307      	str	r3, [sp, #28]
 801ea2e:	fa02 f308 	lsl.w	r3, r2, r8
 801ea32:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea36:	b2db      	uxtb	r3, r3
 801ea38:	930f      	str	r3, [sp, #60]	; 0x3c
 801ea3a:	f000 8109 	beq.w	801ec50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801ea3e:	f1b8 0f02 	cmp.w	r8, #2
 801ea42:	f000 813e 	beq.w	801ecc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ea46:	f1b8 0f04 	cmp.w	r8, #4
 801ea4a:	f000 8132 	beq.w	801ecb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801ea4e:	b906      	cbnz	r6, 801ea52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801ea50:	b174      	cbz	r4, 801ea70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801ea52:	fb17 6304 	smlabb	r3, r7, r4, r6
 801ea56:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ea58:	ebaa 0a04 	sub.w	sl, sl, r4
 801ea5c:	fb13 f308 	smulbb	r3, r3, r8
 801ea60:	fa1f fa8a 	uxth.w	sl, sl
 801ea64:	b29b      	uxth	r3, r3
 801ea66:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801ea6a:	f003 0407 	and.w	r4, r3, #7
 801ea6e:	9124      	str	r1, [sp, #144]	; 0x90
 801ea70:	4649      	mov	r1, r9
 801ea72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea74:	f7ff ff14 	bl	801e8a0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ea78:	4649      	mov	r1, r9
 801ea7a:	4683      	mov	fp, r0
 801ea7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea7e:	f7ff ff2b 	bl	801e8d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ea82:	9906      	ldr	r1, [sp, #24]
 801ea84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea86:	1bad      	subs	r5, r5, r6
 801ea88:	1a5b      	subs	r3, r3, r1
 801ea8a:	459a      	cmp	sl, r3
 801ea8c:	bfa8      	it	ge
 801ea8e:	469a      	movge	sl, r3
 801ea90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea92:	1b5d      	subs	r5, r3, r5
 801ea94:	9b08      	ldr	r3, [sp, #32]
 801ea96:	429d      	cmp	r5, r3
 801ea98:	bfd4      	ite	le
 801ea9a:	ebc6 0605 	rsble	r6, r6, r5
 801ea9e:	ebc6 0603 	rsbgt	r6, r6, r3
 801eaa2:	1bbf      	subs	r7, r7, r6
 801eaa4:	fb0b 0016 	mls	r0, fp, r6, r0
 801eaa8:	fb08 f307 	mul.w	r3, r8, r7
 801eaac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eab0:	9308      	str	r3, [sp, #32]
 801eab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eab4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801eab8:	930b      	str	r3, [sp, #44]	; 0x2c
 801eaba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eabc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eac0:	930c      	str	r3, [sp, #48]	; 0x30
 801eac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	930d      	str	r3, [sp, #52]	; 0x34
 801eac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eaca:	7819      	ldrb	r1, [r3, #0]
 801eacc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ead0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801ead4:	4121      	asrs	r1, r4
 801ead6:	9306      	str	r3, [sp, #24]
 801ead8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801eadc:	b2c9      	uxtb	r1, r1
 801eade:	f1ba 0f00 	cmp.w	sl, #0
 801eae2:	f340 80d1 	ble.w	801ec88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801eae6:	46b6      	mov	lr, r6
 801eae8:	9807      	ldr	r0, [sp, #28]
 801eaea:	f1be 0f00 	cmp.w	lr, #0
 801eaee:	f340 80b8 	ble.w	801ec62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801eaf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaf4:	400b      	ands	r3, r1
 801eaf6:	d03e      	beq.n	801eb76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801eaf8:	fb13 f302 	smulbb	r3, r3, r2
 801eafc:	2bfe      	cmp	r3, #254	; 0xfe
 801eafe:	dd03      	ble.n	801eb08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801eb00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eb02:	2dff      	cmp	r5, #255	; 0xff
 801eb04:	f000 80a6 	beq.w	801ec54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801eb08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eb0a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801eb0c:	fb15 f303 	smulbb	r3, r5, r3
 801eb10:	b29b      	uxth	r3, r3
 801eb12:	1c5d      	adds	r5, r3, #1
 801eb14:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801eb18:	7805      	ldrb	r5, [r0, #0]
 801eb1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eb1e:	fa1f fc83 	uxth.w	ip, r3
 801eb22:	43db      	mvns	r3, r3
 801eb24:	fb17 f90c 	smulbb	r9, r7, ip
 801eb28:	b2db      	uxtb	r3, r3
 801eb2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eb2c:	fb05 9503 	mla	r5, r5, r3, r9
 801eb30:	b2ad      	uxth	r5, r5
 801eb32:	f105 0901 	add.w	r9, r5, #1
 801eb36:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801eb3a:	fb17 f90c 	smulbb	r9, r7, ip
 801eb3e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb40:	122d      	asrs	r5, r5, #8
 801eb42:	fb17 fc0c 	smulbb	ip, r7, ip
 801eb46:	7005      	strb	r5, [r0, #0]
 801eb48:	7845      	ldrb	r5, [r0, #1]
 801eb4a:	fb05 9503 	mla	r5, r5, r3, r9
 801eb4e:	b2ad      	uxth	r5, r5
 801eb50:	f105 0901 	add.w	r9, r5, #1
 801eb54:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801eb58:	122d      	asrs	r5, r5, #8
 801eb5a:	7045      	strb	r5, [r0, #1]
 801eb5c:	7885      	ldrb	r5, [r0, #2]
 801eb5e:	fb05 cc03 	mla	ip, r5, r3, ip
 801eb62:	fa1f fc8c 	uxth.w	ip, ip
 801eb66:	f10c 0301 	add.w	r3, ip, #1
 801eb6a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eb6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eb72:	f880 c002 	strb.w	ip, [r0, #2]
 801eb76:	4444      	add	r4, r8
 801eb78:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eb7c:	b2a4      	uxth	r4, r4
 801eb7e:	2c07      	cmp	r4, #7
 801eb80:	bf89      	itett	hi
 801eb82:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801eb84:	fa41 f108 	asrls.w	r1, r1, r8
 801eb88:	2400      	movhi	r4, #0
 801eb8a:	7859      	ldrbhi	r1, [r3, #1]
 801eb8c:	bf8a      	itet	hi
 801eb8e:	3301      	addhi	r3, #1
 801eb90:	b2c9      	uxtbls	r1, r1
 801eb92:	9324      	strhi	r3, [sp, #144]	; 0x90
 801eb94:	9b06      	ldr	r3, [sp, #24]
 801eb96:	4418      	add	r0, r3
 801eb98:	e7a7      	b.n	801eaea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801eb9a:	441d      	add	r5, r3
 801eb9c:	b22d      	sxth	r5, r5
 801eb9e:	e6f1      	b.n	801e984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eba0:	f1b9 0f01 	cmp.w	r9, #1
 801eba4:	f47f af2c 	bne.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eba8:	f1bb 0f01 	cmp.w	fp, #1
 801ebac:	f47f af28 	bne.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebb0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801eca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801ebb4:	f8db 0000 	ldr.w	r0, [fp]
 801ebb8:	6803      	ldr	r3, [r0, #0]
 801ebba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ebbc:	4798      	blx	r3
 801ebbe:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ebc2:	465a      	mov	r2, fp
 801ebc4:	d006      	beq.n	801ebd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ebc6:	f1b8 0f04 	cmp.w	r8, #4
 801ebca:	d13d      	bne.n	801ec48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801ebcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebce:	3300      	adds	r3, #0
 801ebd0:	bf18      	it	ne
 801ebd2:	2301      	movne	r3, #1
 801ebd4:	05c0      	lsls	r0, r0, #23
 801ebd6:	d567      	bpl.n	801eca8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ebd8:	f1b8 0f08 	cmp.w	r8, #8
 801ebdc:	d164      	bne.n	801eca8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	bf0c      	ite	eq
 801ebe2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ebe6:	2180      	movne	r1, #128	; 0x80
 801ebe8:	2e00      	cmp	r6, #0
 801ebea:	f47f af09 	bne.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebee:	2c00      	cmp	r4, #0
 801ebf0:	f47f af06 	bne.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebf4:	9b08      	ldr	r3, [sp, #32]
 801ebf6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ebf8:	442b      	add	r3, r5
 801ebfa:	4283      	cmp	r3, r0
 801ebfc:	f73f af00 	bgt.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec00:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801ec04:	4403      	add	r3, r0
 801ec06:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ec08:	4283      	cmp	r3, r0
 801ec0a:	f73f aef9 	bgt.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec0e:	f1b8 0f08 	cmp.w	r8, #8
 801ec12:	6810      	ldr	r0, [r2, #0]
 801ec14:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801ec18:	bf18      	it	ne
 801ec1a:	3701      	addne	r7, #1
 801ec1c:	6804      	ldr	r4, [r0, #0]
 801ec1e:	9105      	str	r1, [sp, #20]
 801ec20:	bf18      	it	ne
 801ec22:	f027 0701 	bicne.w	r7, r7, #1
 801ec26:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec28:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ec2c:	bf18      	it	ne
 801ec2e:	b2bf      	uxthne	r7, r7
 801ec30:	9104      	str	r1, [sp, #16]
 801ec32:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ec34:	e9cd 7a00 	strd	r7, sl, [sp]
 801ec38:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ec3c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ec3e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801ec40:	47a0      	blx	r4
 801ec42:	b015      	add	sp, #84	; 0x54
 801ec44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec48:	2300      	movs	r3, #0
 801ec4a:	e7c3      	b.n	801ebd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ec4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec4e:	e6e0      	b.n	801ea12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801ec50:	22ff      	movs	r2, #255	; 0xff
 801ec52:	e6fc      	b.n	801ea4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ec54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec56:	7003      	strb	r3, [r0, #0]
 801ec58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec5a:	7043      	strb	r3, [r0, #1]
 801ec5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec5e:	7083      	strb	r3, [r0, #2]
 801ec60:	e789      	b.n	801eb76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ec62:	9b08      	ldr	r3, [sp, #32]
 801ec64:	b153      	cbz	r3, 801ec7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801ec66:	441c      	add	r4, r3
 801ec68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec6a:	b2a4      	uxth	r4, r4
 801ec6c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ec70:	f004 0407 	and.w	r4, r4, #7
 801ec74:	7819      	ldrb	r1, [r3, #0]
 801ec76:	9324      	str	r3, [sp, #144]	; 0x90
 801ec78:	4121      	asrs	r1, r4
 801ec7a:	b2c9      	uxtb	r1, r1
 801ec7c:	9b07      	ldr	r3, [sp, #28]
 801ec7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec82:	445b      	add	r3, fp
 801ec84:	9307      	str	r3, [sp, #28]
 801ec86:	e72a      	b.n	801eade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801ec88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d1d9      	bne.n	801ec42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ec8e:	4b04      	ldr	r3, [pc, #16]	; (801eca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ec90:	6818      	ldr	r0, [r3, #0]
 801ec92:	6803      	ldr	r3, [r0, #0]
 801ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec96:	4798      	blx	r3
 801ec98:	e7d3      	b.n	801ec42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ec9a:	bf00      	nop
 801ec9c:	2000bb8c 	.word	0x2000bb8c
 801eca0:	2000bb94 	.word	0x2000bb94
 801eca4:	2000bb8e 	.word	0x2000bb8e
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	f43f aea9 	beq.w	801ea00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ecae:	2180      	movs	r1, #128	; 0x80
 801ecb0:	e79a      	b.n	801ebe8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801ecb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecb4:	b11b      	cbz	r3, 801ecbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ecb6:	07fb      	lsls	r3, r7, #31
 801ecb8:	d501      	bpl.n	801ecbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ecba:	3701      	adds	r7, #1
 801ecbc:	b2bf      	uxth	r7, r7
 801ecbe:	2211      	movs	r2, #17
 801ecc0:	e6c5      	b.n	801ea4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ecc2:	2255      	movs	r2, #85	; 0x55
 801ecc4:	e6c3      	b.n	801ea4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ecc6:	bf00      	nop

0801ecc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ecc8:	b538      	push	{r3, r4, r5, lr}
 801ecca:	4c15      	ldr	r4, [pc, #84]	; (801ed20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801eccc:	4605      	mov	r5, r0
 801ecce:	7823      	ldrb	r3, [r4, #0]
 801ecd0:	f3bf 8f5b 	dmb	ish
 801ecd4:	07da      	lsls	r2, r3, #31
 801ecd6:	d40b      	bmi.n	801ecf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f006 fd5e 	bl	802579a <__cxa_guard_acquire>
 801ecde:	b138      	cbz	r0, 801ecf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ece0:	4620      	mov	r0, r4
 801ece2:	f006 fd66 	bl	80257b2 <__cxa_guard_release>
 801ece6:	4a0f      	ldr	r2, [pc, #60]	; (801ed24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ece8:	490f      	ldr	r1, [pc, #60]	; (801ed28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ecea:	4810      	ldr	r0, [pc, #64]	; (801ed2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ecec:	f006 fd4b 	bl	8025786 <__aeabi_atexit>
 801ecf0:	4c0f      	ldr	r4, [pc, #60]	; (801ed30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ecf2:	7823      	ldrb	r3, [r4, #0]
 801ecf4:	f3bf 8f5b 	dmb	ish
 801ecf8:	07db      	lsls	r3, r3, #31
 801ecfa:	d40b      	bmi.n	801ed14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	f006 fd4c 	bl	802579a <__cxa_guard_acquire>
 801ed02:	b138      	cbz	r0, 801ed14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ed04:	4620      	mov	r0, r4
 801ed06:	f006 fd54 	bl	80257b2 <__cxa_guard_release>
 801ed0a:	4a06      	ldr	r2, [pc, #24]	; (801ed24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ed0c:	4909      	ldr	r1, [pc, #36]	; (801ed34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ed0e:	480a      	ldr	r0, [pc, #40]	; (801ed38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ed10:	f006 fd39 	bl	8025786 <__aeabi_atexit>
 801ed14:	4b05      	ldr	r3, [pc, #20]	; (801ed2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ed16:	612b      	str	r3, [r5, #16]
 801ed18:	4b07      	ldr	r3, [pc, #28]	; (801ed38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ed1a:	616b      	str	r3, [r5, #20]
 801ed1c:	bd38      	pop	{r3, r4, r5, pc}
 801ed1e:	bf00      	nop
 801ed20:	2000bca0 	.word	0x2000bca0
 801ed24:	20000000 	.word	0x20000000
 801ed28:	0801d8ff 	.word	0x0801d8ff
 801ed2c:	20000098 	.word	0x20000098
 801ed30:	2000bca4 	.word	0x2000bca4
 801ed34:	0801d8fd 	.word	0x0801d8fd
 801ed38:	2000009c 	.word	0x2000009c

0801ed3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ed3c:	b538      	push	{r3, r4, r5, lr}
 801ed3e:	4c15      	ldr	r4, [pc, #84]	; (801ed94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ed40:	4605      	mov	r5, r0
 801ed42:	7823      	ldrb	r3, [r4, #0]
 801ed44:	f3bf 8f5b 	dmb	ish
 801ed48:	07da      	lsls	r2, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f006 fd24 	bl	802579a <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f006 fd2c 	bl	80257b2 <__cxa_guard_release>
 801ed5a:	4a0f      	ldr	r2, [pc, #60]	; (801ed98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed5c:	490f      	ldr	r1, [pc, #60]	; (801ed9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ed5e:	4810      	ldr	r0, [pc, #64]	; (801eda0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ed60:	f006 fd11 	bl	8025786 <__aeabi_atexit>
 801ed64:	4c0f      	ldr	r4, [pc, #60]	; (801eda4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ed66:	7823      	ldrb	r3, [r4, #0]
 801ed68:	f3bf 8f5b 	dmb	ish
 801ed6c:	07db      	lsls	r3, r3, #31
 801ed6e:	d40b      	bmi.n	801ed88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed70:	4620      	mov	r0, r4
 801ed72:	f006 fd12 	bl	802579a <__cxa_guard_acquire>
 801ed76:	b138      	cbz	r0, 801ed88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f006 fd1a 	bl	80257b2 <__cxa_guard_release>
 801ed7e:	4a06      	ldr	r2, [pc, #24]	; (801ed98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed80:	4909      	ldr	r1, [pc, #36]	; (801eda8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ed82:	480a      	ldr	r0, [pc, #40]	; (801edac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ed84:	f006 fcff 	bl	8025786 <__aeabi_atexit>
 801ed88:	4b05      	ldr	r3, [pc, #20]	; (801eda0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ed8a:	60ab      	str	r3, [r5, #8]
 801ed8c:	4b07      	ldr	r3, [pc, #28]	; (801edac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ed8e:	60eb      	str	r3, [r5, #12]
 801ed90:	bd38      	pop	{r3, r4, r5, pc}
 801ed92:	bf00      	nop
 801ed94:	2000bc80 	.word	0x2000bc80
 801ed98:	20000000 	.word	0x20000000
 801ed9c:	0801d903 	.word	0x0801d903
 801eda0:	20000078 	.word	0x20000078
 801eda4:	2000bc84 	.word	0x2000bc84
 801eda8:	0801d901 	.word	0x0801d901
 801edac:	2000007c 	.word	0x2000007c

0801edb0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801edb0:	b510      	push	{r4, lr}
 801edb2:	4604      	mov	r4, r0
 801edb4:	f7ff ff88 	bl	801ecc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801edb8:	4620      	mov	r0, r4
 801edba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edbe:	f7ff bfbd 	b.w	801ed3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801edc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801edc4:	b538      	push	{r3, r4, r5, lr}
 801edc6:	4c15      	ldr	r4, [pc, #84]	; (801ee1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801edc8:	4605      	mov	r5, r0
 801edca:	7823      	ldrb	r3, [r4, #0]
 801edcc:	f3bf 8f5b 	dmb	ish
 801edd0:	07da      	lsls	r2, r3, #31
 801edd2:	d40b      	bmi.n	801edec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801edd4:	4620      	mov	r0, r4
 801edd6:	f006 fce0 	bl	802579a <__cxa_guard_acquire>
 801edda:	b138      	cbz	r0, 801edec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eddc:	4620      	mov	r0, r4
 801edde:	f006 fce8 	bl	80257b2 <__cxa_guard_release>
 801ede2:	4a0f      	ldr	r2, [pc, #60]	; (801ee20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ede4:	490f      	ldr	r1, [pc, #60]	; (801ee24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ede6:	4810      	ldr	r0, [pc, #64]	; (801ee28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ede8:	f006 fccd 	bl	8025786 <__aeabi_atexit>
 801edec:	4c0f      	ldr	r4, [pc, #60]	; (801ee2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801edee:	7823      	ldrb	r3, [r4, #0]
 801edf0:	f3bf 8f5b 	dmb	ish
 801edf4:	07db      	lsls	r3, r3, #31
 801edf6:	d40b      	bmi.n	801ee10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801edf8:	4620      	mov	r0, r4
 801edfa:	f006 fcce 	bl	802579a <__cxa_guard_acquire>
 801edfe:	b138      	cbz	r0, 801ee10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ee00:	4620      	mov	r0, r4
 801ee02:	f006 fcd6 	bl	80257b2 <__cxa_guard_release>
 801ee06:	4a06      	ldr	r2, [pc, #24]	; (801ee20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ee08:	4909      	ldr	r1, [pc, #36]	; (801ee30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ee0a:	480a      	ldr	r0, [pc, #40]	; (801ee34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ee0c:	f006 fcbb 	bl	8025786 <__aeabi_atexit>
 801ee10:	4b05      	ldr	r3, [pc, #20]	; (801ee28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ee12:	622b      	str	r3, [r5, #32]
 801ee14:	4b07      	ldr	r3, [pc, #28]	; (801ee34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ee16:	626b      	str	r3, [r5, #36]	; 0x24
 801ee18:	bd38      	pop	{r3, r4, r5, pc}
 801ee1a:	bf00      	nop
 801ee1c:	2000bca8 	.word	0x2000bca8
 801ee20:	20000000 	.word	0x20000000
 801ee24:	0801d8f7 	.word	0x0801d8f7
 801ee28:	200000a0 	.word	0x200000a0
 801ee2c:	2000bcac 	.word	0x2000bcac
 801ee30:	0801d8f5 	.word	0x0801d8f5
 801ee34:	200000a4 	.word	0x200000a4

0801ee38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ee38:	b538      	push	{r3, r4, r5, lr}
 801ee3a:	4c15      	ldr	r4, [pc, #84]	; (801ee90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	7823      	ldrb	r3, [r4, #0]
 801ee40:	f3bf 8f5b 	dmb	ish
 801ee44:	07da      	lsls	r2, r3, #31
 801ee46:	d40b      	bmi.n	801ee60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f006 fca6 	bl	802579a <__cxa_guard_acquire>
 801ee4e:	b138      	cbz	r0, 801ee60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee50:	4620      	mov	r0, r4
 801ee52:	f006 fcae 	bl	80257b2 <__cxa_guard_release>
 801ee56:	4a0f      	ldr	r2, [pc, #60]	; (801ee94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee58:	490f      	ldr	r1, [pc, #60]	; (801ee98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ee5a:	4810      	ldr	r0, [pc, #64]	; (801ee9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ee5c:	f006 fc93 	bl	8025786 <__aeabi_atexit>
 801ee60:	4c0f      	ldr	r4, [pc, #60]	; (801eea0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ee62:	7823      	ldrb	r3, [r4, #0]
 801ee64:	f3bf 8f5b 	dmb	ish
 801ee68:	07db      	lsls	r3, r3, #31
 801ee6a:	d40b      	bmi.n	801ee84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f006 fc94 	bl	802579a <__cxa_guard_acquire>
 801ee72:	b138      	cbz	r0, 801ee84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee74:	4620      	mov	r0, r4
 801ee76:	f006 fc9c 	bl	80257b2 <__cxa_guard_release>
 801ee7a:	4a06      	ldr	r2, [pc, #24]	; (801ee94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee7c:	4909      	ldr	r1, [pc, #36]	; (801eea4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ee7e:	480a      	ldr	r0, [pc, #40]	; (801eea8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ee80:	f006 fc81 	bl	8025786 <__aeabi_atexit>
 801ee84:	4b05      	ldr	r3, [pc, #20]	; (801ee9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ee86:	61ab      	str	r3, [r5, #24]
 801ee88:	4b07      	ldr	r3, [pc, #28]	; (801eea8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ee8a:	61eb      	str	r3, [r5, #28]
 801ee8c:	bd38      	pop	{r3, r4, r5, pc}
 801ee8e:	bf00      	nop
 801ee90:	2000bc88 	.word	0x2000bc88
 801ee94:	20000000 	.word	0x20000000
 801ee98:	0801d8fb 	.word	0x0801d8fb
 801ee9c:	20000080 	.word	0x20000080
 801eea0:	2000bc8c 	.word	0x2000bc8c
 801eea4:	0801d8f9 	.word	0x0801d8f9
 801eea8:	20000084 	.word	0x20000084

0801eeac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801eeac:	b510      	push	{r4, lr}
 801eeae:	4604      	mov	r4, r0
 801eeb0:	f7ff ff88 	bl	801edc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801eeb4:	4620      	mov	r0, r4
 801eeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eeba:	f7ff bfbd 	b.w	801ee38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eec0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801eec0:	b538      	push	{r3, r4, r5, lr}
 801eec2:	4c15      	ldr	r4, [pc, #84]	; (801ef18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801eec4:	4605      	mov	r5, r0
 801eec6:	7823      	ldrb	r3, [r4, #0]
 801eec8:	f3bf 8f5b 	dmb	ish
 801eecc:	07da      	lsls	r2, r3, #31
 801eece:	d40b      	bmi.n	801eee8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eed0:	4620      	mov	r0, r4
 801eed2:	f006 fc62 	bl	802579a <__cxa_guard_acquire>
 801eed6:	b138      	cbz	r0, 801eee8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eed8:	4620      	mov	r0, r4
 801eeda:	f006 fc6a 	bl	80257b2 <__cxa_guard_release>
 801eede:	4a0f      	ldr	r2, [pc, #60]	; (801ef1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eee0:	490f      	ldr	r1, [pc, #60]	; (801ef20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801eee2:	4810      	ldr	r0, [pc, #64]	; (801ef24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eee4:	f006 fc4f 	bl	8025786 <__aeabi_atexit>
 801eee8:	4c0f      	ldr	r4, [pc, #60]	; (801ef28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801eeea:	7823      	ldrb	r3, [r4, #0]
 801eeec:	f3bf 8f5b 	dmb	ish
 801eef0:	07db      	lsls	r3, r3, #31
 801eef2:	d40b      	bmi.n	801ef0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eef4:	4620      	mov	r0, r4
 801eef6:	f006 fc50 	bl	802579a <__cxa_guard_acquire>
 801eefa:	b138      	cbz	r0, 801ef0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eefc:	4620      	mov	r0, r4
 801eefe:	f006 fc58 	bl	80257b2 <__cxa_guard_release>
 801ef02:	4a06      	ldr	r2, [pc, #24]	; (801ef1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ef04:	4909      	ldr	r1, [pc, #36]	; (801ef2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ef06:	480a      	ldr	r0, [pc, #40]	; (801ef30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ef08:	f006 fc3d 	bl	8025786 <__aeabi_atexit>
 801ef0c:	4b05      	ldr	r3, [pc, #20]	; (801ef24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ef0e:	632b      	str	r3, [r5, #48]	; 0x30
 801ef10:	4b07      	ldr	r3, [pc, #28]	; (801ef30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ef12:	636b      	str	r3, [r5, #52]	; 0x34
 801ef14:	bd38      	pop	{r3, r4, r5, pc}
 801ef16:	bf00      	nop
 801ef18:	2000bc90 	.word	0x2000bc90
 801ef1c:	20000000 	.word	0x20000000
 801ef20:	0801d8ef 	.word	0x0801d8ef
 801ef24:	20000088 	.word	0x20000088
 801ef28:	2000bc94 	.word	0x2000bc94
 801ef2c:	0801d8ed 	.word	0x0801d8ed
 801ef30:	2000008c 	.word	0x2000008c

0801ef34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ef34:	b538      	push	{r3, r4, r5, lr}
 801ef36:	4c15      	ldr	r4, [pc, #84]	; (801ef8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ef38:	4605      	mov	r5, r0
 801ef3a:	7823      	ldrb	r3, [r4, #0]
 801ef3c:	f3bf 8f5b 	dmb	ish
 801ef40:	07da      	lsls	r2, r3, #31
 801ef42:	d40b      	bmi.n	801ef5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef44:	4620      	mov	r0, r4
 801ef46:	f006 fc28 	bl	802579a <__cxa_guard_acquire>
 801ef4a:	b138      	cbz	r0, 801ef5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f006 fc30 	bl	80257b2 <__cxa_guard_release>
 801ef52:	4a0f      	ldr	r2, [pc, #60]	; (801ef90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef54:	490f      	ldr	r1, [pc, #60]	; (801ef94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ef56:	4810      	ldr	r0, [pc, #64]	; (801ef98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef58:	f006 fc15 	bl	8025786 <__aeabi_atexit>
 801ef5c:	4c0f      	ldr	r4, [pc, #60]	; (801ef9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ef5e:	7823      	ldrb	r3, [r4, #0]
 801ef60:	f3bf 8f5b 	dmb	ish
 801ef64:	07db      	lsls	r3, r3, #31
 801ef66:	d40b      	bmi.n	801ef80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f006 fc16 	bl	802579a <__cxa_guard_acquire>
 801ef6e:	b138      	cbz	r0, 801ef80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef70:	4620      	mov	r0, r4
 801ef72:	f006 fc1e 	bl	80257b2 <__cxa_guard_release>
 801ef76:	4a06      	ldr	r2, [pc, #24]	; (801ef90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef78:	4909      	ldr	r1, [pc, #36]	; (801efa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ef7a:	480a      	ldr	r0, [pc, #40]	; (801efa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ef7c:	f006 fc03 	bl	8025786 <__aeabi_atexit>
 801ef80:	4b05      	ldr	r3, [pc, #20]	; (801ef98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef82:	62ab      	str	r3, [r5, #40]	; 0x28
 801ef84:	4b07      	ldr	r3, [pc, #28]	; (801efa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ef86:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ef88:	bd38      	pop	{r3, r4, r5, pc}
 801ef8a:	bf00      	nop
 801ef8c:	2000bc68 	.word	0x2000bc68
 801ef90:	20000000 	.word	0x20000000
 801ef94:	0801d8f3 	.word	0x0801d8f3
 801ef98:	20000060 	.word	0x20000060
 801ef9c:	2000bc6c 	.word	0x2000bc6c
 801efa0:	0801d8f1 	.word	0x0801d8f1
 801efa4:	20000064 	.word	0x20000064

0801efa8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801efa8:	b510      	push	{r4, lr}
 801efaa:	4604      	mov	r4, r0
 801efac:	f7ff ff88 	bl	801eec0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801efb0:	4620      	mov	r0, r4
 801efb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efb6:	f7ff bfbd 	b.w	801ef34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801efbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801efbc:	b538      	push	{r3, r4, r5, lr}
 801efbe:	4c15      	ldr	r4, [pc, #84]	; (801f014 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801efc0:	4605      	mov	r5, r0
 801efc2:	7823      	ldrb	r3, [r4, #0]
 801efc4:	f3bf 8f5b 	dmb	ish
 801efc8:	07da      	lsls	r2, r3, #31
 801efca:	d40b      	bmi.n	801efe4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801efcc:	4620      	mov	r0, r4
 801efce:	f006 fbe4 	bl	802579a <__cxa_guard_acquire>
 801efd2:	b138      	cbz	r0, 801efe4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801efd4:	4620      	mov	r0, r4
 801efd6:	f006 fbec 	bl	80257b2 <__cxa_guard_release>
 801efda:	4a0f      	ldr	r2, [pc, #60]	; (801f018 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801efdc:	490f      	ldr	r1, [pc, #60]	; (801f01c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801efde:	4810      	ldr	r0, [pc, #64]	; (801f020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801efe0:	f006 fbd1 	bl	8025786 <__aeabi_atexit>
 801efe4:	4c0f      	ldr	r4, [pc, #60]	; (801f024 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801efe6:	7823      	ldrb	r3, [r4, #0]
 801efe8:	f3bf 8f5b 	dmb	ish
 801efec:	07db      	lsls	r3, r3, #31
 801efee:	d40b      	bmi.n	801f008 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eff0:	4620      	mov	r0, r4
 801eff2:	f006 fbd2 	bl	802579a <__cxa_guard_acquire>
 801eff6:	b138      	cbz	r0, 801f008 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eff8:	4620      	mov	r0, r4
 801effa:	f006 fbda 	bl	80257b2 <__cxa_guard_release>
 801effe:	4a06      	ldr	r2, [pc, #24]	; (801f018 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f000:	4909      	ldr	r1, [pc, #36]	; (801f028 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f002:	480a      	ldr	r0, [pc, #40]	; (801f02c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f004:	f006 fbbf 	bl	8025786 <__aeabi_atexit>
 801f008:	4b05      	ldr	r3, [pc, #20]	; (801f020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f00a:	642b      	str	r3, [r5, #64]	; 0x40
 801f00c:	4b07      	ldr	r3, [pc, #28]	; (801f02c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f00e:	646b      	str	r3, [r5, #68]	; 0x44
 801f010:	bd38      	pop	{r3, r4, r5, pc}
 801f012:	bf00      	nop
 801f014:	2000bc98 	.word	0x2000bc98
 801f018:	20000000 	.word	0x20000000
 801f01c:	0801d8e7 	.word	0x0801d8e7
 801f020:	20000090 	.word	0x20000090
 801f024:	2000bc9c 	.word	0x2000bc9c
 801f028:	0801d8e5 	.word	0x0801d8e5
 801f02c:	20000094 	.word	0x20000094

0801f030 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f030:	b538      	push	{r3, r4, r5, lr}
 801f032:	4c15      	ldr	r4, [pc, #84]	; (801f088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f034:	4605      	mov	r5, r0
 801f036:	7823      	ldrb	r3, [r4, #0]
 801f038:	f3bf 8f5b 	dmb	ish
 801f03c:	07da      	lsls	r2, r3, #31
 801f03e:	d40b      	bmi.n	801f058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f040:	4620      	mov	r0, r4
 801f042:	f006 fbaa 	bl	802579a <__cxa_guard_acquire>
 801f046:	b138      	cbz	r0, 801f058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f048:	4620      	mov	r0, r4
 801f04a:	f006 fbb2 	bl	80257b2 <__cxa_guard_release>
 801f04e:	4a0f      	ldr	r2, [pc, #60]	; (801f08c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f050:	490f      	ldr	r1, [pc, #60]	; (801f090 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f052:	4810      	ldr	r0, [pc, #64]	; (801f094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f054:	f006 fb97 	bl	8025786 <__aeabi_atexit>
 801f058:	4c0f      	ldr	r4, [pc, #60]	; (801f098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f05a:	7823      	ldrb	r3, [r4, #0]
 801f05c:	f3bf 8f5b 	dmb	ish
 801f060:	07db      	lsls	r3, r3, #31
 801f062:	d40b      	bmi.n	801f07c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f064:	4620      	mov	r0, r4
 801f066:	f006 fb98 	bl	802579a <__cxa_guard_acquire>
 801f06a:	b138      	cbz	r0, 801f07c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f06c:	4620      	mov	r0, r4
 801f06e:	f006 fba0 	bl	80257b2 <__cxa_guard_release>
 801f072:	4a06      	ldr	r2, [pc, #24]	; (801f08c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f074:	4909      	ldr	r1, [pc, #36]	; (801f09c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f076:	480a      	ldr	r0, [pc, #40]	; (801f0a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f078:	f006 fb85 	bl	8025786 <__aeabi_atexit>
 801f07c:	4b05      	ldr	r3, [pc, #20]	; (801f094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f07e:	63ab      	str	r3, [r5, #56]	; 0x38
 801f080:	4b07      	ldr	r3, [pc, #28]	; (801f0a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f082:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f084:	bd38      	pop	{r3, r4, r5, pc}
 801f086:	bf00      	nop
 801f088:	2000bc78 	.word	0x2000bc78
 801f08c:	20000000 	.word	0x20000000
 801f090:	0801d8eb 	.word	0x0801d8eb
 801f094:	20000070 	.word	0x20000070
 801f098:	2000bc7c 	.word	0x2000bc7c
 801f09c:	0801d8e9 	.word	0x0801d8e9
 801f0a0:	20000074 	.word	0x20000074

0801f0a4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f0a4:	b510      	push	{r4, lr}
 801f0a6:	4604      	mov	r4, r0
 801f0a8:	f7ff ff88 	bl	801efbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f0ac:	4620      	mov	r0, r4
 801f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b2:	f7ff bfbd 	b.w	801f030 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f0b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f0b8:	b538      	push	{r3, r4, r5, lr}
 801f0ba:	4c15      	ldr	r4, [pc, #84]	; (801f110 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f0bc:	4605      	mov	r5, r0
 801f0be:	7823      	ldrb	r3, [r4, #0]
 801f0c0:	f3bf 8f5b 	dmb	ish
 801f0c4:	07da      	lsls	r2, r3, #31
 801f0c6:	d40b      	bmi.n	801f0e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f0c8:	4620      	mov	r0, r4
 801f0ca:	f006 fb66 	bl	802579a <__cxa_guard_acquire>
 801f0ce:	b138      	cbz	r0, 801f0e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f0d0:	4620      	mov	r0, r4
 801f0d2:	f006 fb6e 	bl	80257b2 <__cxa_guard_release>
 801f0d6:	4a0f      	ldr	r2, [pc, #60]	; (801f114 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f0d8:	490f      	ldr	r1, [pc, #60]	; (801f118 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f0da:	4810      	ldr	r0, [pc, #64]	; (801f11c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f0dc:	f006 fb53 	bl	8025786 <__aeabi_atexit>
 801f0e0:	4c0f      	ldr	r4, [pc, #60]	; (801f120 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f0e2:	7823      	ldrb	r3, [r4, #0]
 801f0e4:	f3bf 8f5b 	dmb	ish
 801f0e8:	07db      	lsls	r3, r3, #31
 801f0ea:	d40b      	bmi.n	801f104 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	f006 fb54 	bl	802579a <__cxa_guard_acquire>
 801f0f2:	b138      	cbz	r0, 801f104 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f0f4:	4620      	mov	r0, r4
 801f0f6:	f006 fb5c 	bl	80257b2 <__cxa_guard_release>
 801f0fa:	4a06      	ldr	r2, [pc, #24]	; (801f114 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f0fc:	4909      	ldr	r1, [pc, #36]	; (801f124 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f0fe:	480a      	ldr	r0, [pc, #40]	; (801f128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f100:	f006 fb41 	bl	8025786 <__aeabi_atexit>
 801f104:	4b05      	ldr	r3, [pc, #20]	; (801f11c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f106:	652b      	str	r3, [r5, #80]	; 0x50
 801f108:	4b07      	ldr	r3, [pc, #28]	; (801f128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f10a:	656b      	str	r3, [r5, #84]	; 0x54
 801f10c:	bd38      	pop	{r3, r4, r5, pc}
 801f10e:	bf00      	nop
 801f110:	2000bc70 	.word	0x2000bc70
 801f114:	20000000 	.word	0x20000000
 801f118:	0801d8df 	.word	0x0801d8df
 801f11c:	20000068 	.word	0x20000068
 801f120:	2000bc74 	.word	0x2000bc74
 801f124:	0801d8dd 	.word	0x0801d8dd
 801f128:	2000006c 	.word	0x2000006c

0801f12c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f12c:	b538      	push	{r3, r4, r5, lr}
 801f12e:	4c15      	ldr	r4, [pc, #84]	; (801f184 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f130:	4605      	mov	r5, r0
 801f132:	7823      	ldrb	r3, [r4, #0]
 801f134:	f3bf 8f5b 	dmb	ish
 801f138:	07da      	lsls	r2, r3, #31
 801f13a:	d40b      	bmi.n	801f154 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f13c:	4620      	mov	r0, r4
 801f13e:	f006 fb2c 	bl	802579a <__cxa_guard_acquire>
 801f142:	b138      	cbz	r0, 801f154 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f144:	4620      	mov	r0, r4
 801f146:	f006 fb34 	bl	80257b2 <__cxa_guard_release>
 801f14a:	4a0f      	ldr	r2, [pc, #60]	; (801f188 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f14c:	490f      	ldr	r1, [pc, #60]	; (801f18c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f14e:	4810      	ldr	r0, [pc, #64]	; (801f190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f150:	f006 fb19 	bl	8025786 <__aeabi_atexit>
 801f154:	4c0f      	ldr	r4, [pc, #60]	; (801f194 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f156:	7823      	ldrb	r3, [r4, #0]
 801f158:	f3bf 8f5b 	dmb	ish
 801f15c:	07db      	lsls	r3, r3, #31
 801f15e:	d40b      	bmi.n	801f178 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f160:	4620      	mov	r0, r4
 801f162:	f006 fb1a 	bl	802579a <__cxa_guard_acquire>
 801f166:	b138      	cbz	r0, 801f178 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f168:	4620      	mov	r0, r4
 801f16a:	f006 fb22 	bl	80257b2 <__cxa_guard_release>
 801f16e:	4a06      	ldr	r2, [pc, #24]	; (801f188 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f170:	4909      	ldr	r1, [pc, #36]	; (801f198 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f172:	480a      	ldr	r0, [pc, #40]	; (801f19c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f174:	f006 fb07 	bl	8025786 <__aeabi_atexit>
 801f178:	4b05      	ldr	r3, [pc, #20]	; (801f190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f17a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f17c:	4b07      	ldr	r3, [pc, #28]	; (801f19c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f17e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f180:	bd38      	pop	{r3, r4, r5, pc}
 801f182:	bf00      	nop
 801f184:	2000bc60 	.word	0x2000bc60
 801f188:	20000000 	.word	0x20000000
 801f18c:	0801d8e3 	.word	0x0801d8e3
 801f190:	20000058 	.word	0x20000058
 801f194:	2000bc64 	.word	0x2000bc64
 801f198:	0801d8e1 	.word	0x0801d8e1
 801f19c:	2000005c 	.word	0x2000005c

0801f1a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f1a0:	b510      	push	{r4, lr}
 801f1a2:	4604      	mov	r4, r0
 801f1a4:	f7ff ff88 	bl	801f0b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f1a8:	4620      	mov	r0, r4
 801f1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1ae:	f7ff bfbd 	b.w	801f12c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f1b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f1b2:	b510      	push	{r4, lr}
 801f1b4:	4604      	mov	r4, r0
 801f1b6:	f7ff fff3 	bl	801f1a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	f7ff ff72 	bl	801f0a4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	f7ff fe73 	bl	801eeac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f1c6:	4620      	mov	r0, r4
 801f1c8:	f7ff fdf2 	bl	801edb0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f1cc:	4620      	mov	r0, r4
 801f1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1d2:	f7ff bee9 	b.w	801efa8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f1d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1dc:	b087      	sub	sp, #28
 801f1de:	7888      	ldrb	r0, [r1, #2]
 801f1e0:	4616      	mov	r6, r2
 801f1e2:	9001      	str	r0, [sp, #4]
 801f1e4:	7848      	ldrb	r0, [r1, #1]
 801f1e6:	9100      	str	r1, [sp, #0]
 801f1e8:	9002      	str	r0, [sp, #8]
 801f1ea:	7808      	ldrb	r0, [r1, #0]
 801f1ec:	9901      	ldr	r1, [sp, #4]
 801f1ee:	9003      	str	r0, [sp, #12]
 801f1f0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f1f4:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f1f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f1fc:	9902      	ldr	r1, [sp, #8]
 801f1fe:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f202:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f206:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f20a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f20e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f212:	9005      	str	r0, [sp, #20]
 801f214:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f218:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f21c:	2d00      	cmp	r5, #0
 801f21e:	eb06 080a 	add.w	r8, r6, sl
 801f222:	db4a      	blt.n	801f2ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f224:	45a9      	cmp	r9, r5
 801f226:	dd48      	ble.n	801f2ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f228:	f1bc 0f00 	cmp.w	ip, #0
 801f22c:	db43      	blt.n	801f2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f22e:	45e6      	cmp	lr, ip
 801f230:	dd41      	ble.n	801f2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f232:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f236:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f23a:	441e      	add	r6, r3
 801f23c:	f11c 0001 	adds.w	r0, ip, #1
 801f240:	d43e      	bmi.n	801f2c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f242:	4586      	cmp	lr, r0
 801f244:	dd3c      	ble.n	801f2c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f246:	2a00      	cmp	r2, #0
 801f248:	d03a      	beq.n	801f2c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f24a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f24e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f252:	4418      	add	r0, r3
 801f254:	3501      	adds	r5, #1
 801f256:	d437      	bmi.n	801f2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f258:	45a9      	cmp	r9, r5
 801f25a:	dd35      	ble.n	801f2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f25c:	b3a4      	cbz	r4, 801f2c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f25e:	f1bc 0f00 	cmp.w	ip, #0
 801f262:	db2f      	blt.n	801f2c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f264:	45e6      	cmp	lr, ip
 801f266:	dd2d      	ble.n	801f2c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f268:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f270:	441d      	add	r5, r3
 801f272:	f11c 0c01 	adds.w	ip, ip, #1
 801f276:	d42a      	bmi.n	801f2ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f278:	45e6      	cmp	lr, ip
 801f27a:	dd28      	ble.n	801f2ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f27c:	b33a      	cbz	r2, 801f2ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f27e:	44c6      	add	lr, r8
 801f280:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f284:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f288:	4463      	add	r3, ip
 801f28a:	ea6f 0c07 	mvn.w	ip, r7
 801f28e:	2a0f      	cmp	r2, #15
 801f290:	f896 a000 	ldrb.w	sl, [r6]
 801f294:	fa5f fc8c 	uxtb.w	ip, ip
 801f298:	f890 b000 	ldrb.w	fp, [r0]
 801f29c:	f895 9000 	ldrb.w	r9, [r5]
 801f2a0:	7819      	ldrb	r1, [r3, #0]
 801f2a2:	d801      	bhi.n	801f2a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f2a4:	2c0f      	cmp	r4, #15
 801f2a6:	d914      	bls.n	801f2d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f2a8:	4b40      	ldr	r3, [pc, #256]	; (801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f2aa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f2ae:	4a40      	ldr	r2, [pc, #256]	; (801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f2b0:	4840      	ldr	r0, [pc, #256]	; (801f3b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f2b2:	f006 fa9b 	bl	80257ec <__assert_func>
 801f2b6:	ae05      	add	r6, sp, #20
 801f2b8:	e7c0      	b.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f2ba:	a805      	add	r0, sp, #20
 801f2bc:	4606      	mov	r6, r0
 801f2be:	e7c9      	b.n	801f254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f2c0:	a805      	add	r0, sp, #20
 801f2c2:	e7c7      	b.n	801f254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f2c4:	ad05      	add	r5, sp, #20
 801f2c6:	e7d4      	b.n	801f272 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f2c8:	ab05      	add	r3, sp, #20
 801f2ca:	461d      	mov	r5, r3
 801f2cc:	e7dd      	b.n	801f28a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f2ce:	ab05      	add	r3, sp, #20
 801f2d0:	e7db      	b.n	801f28a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f2d2:	b292      	uxth	r2, r2
 801f2d4:	b2a4      	uxth	r4, r4
 801f2d6:	fa1f fc8c 	uxth.w	ip, ip
 801f2da:	fb02 f804 	mul.w	r8, r2, r4
 801f2de:	0112      	lsls	r2, r2, #4
 801f2e0:	b2bf      	uxth	r7, r7
 801f2e2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f2e6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f2ea:	eba2 0208 	sub.w	r2, r2, r8
 801f2ee:	b2a4      	uxth	r4, r4
 801f2f0:	b292      	uxth	r2, r2
 801f2f2:	ebae 0e04 	sub.w	lr, lr, r4
 801f2f6:	fb02 fb0b 	mul.w	fp, r2, fp
 801f2fa:	fa1f fe8e 	uxth.w	lr, lr
 801f2fe:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f302:	fb04 aa09 	mla	sl, r4, r9, sl
 801f306:	fb08 aa01 	mla	sl, r8, r1, sl
 801f30a:	9903      	ldr	r1, [sp, #12]
 801f30c:	fb11 f90c 	smulbb	r9, r1, ip
 801f310:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f314:	9900      	ldr	r1, [sp, #0]
 801f316:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f31a:	fa1f fa8a 	uxth.w	sl, sl
 801f31e:	f10a 0901 	add.w	r9, sl, #1
 801f322:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f326:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f32a:	f881 a000 	strb.w	sl, [r1]
 801f32e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f332:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f336:	fb02 fa0a 	mul.w	sl, r2, sl
 801f33a:	9902      	ldr	r1, [sp, #8]
 801f33c:	fb0e aa09 	mla	sl, lr, r9, sl
 801f340:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f344:	fb04 aa09 	mla	sl, r4, r9, sl
 801f348:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f34c:	fb08 a909 	mla	r9, r8, r9, sl
 801f350:	fb11 fa0c 	smulbb	sl, r1, ip
 801f354:	9900      	ldr	r1, [sp, #0]
 801f356:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f35a:	fb09 a907 	mla	r9, r9, r7, sl
 801f35e:	fa1f f989 	uxth.w	r9, r9
 801f362:	f109 0a01 	add.w	sl, r9, #1
 801f366:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f36a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f36e:	f881 9001 	strb.w	r9, [r1, #1]
 801f372:	7880      	ldrb	r0, [r0, #2]
 801f374:	78b6      	ldrb	r6, [r6, #2]
 801f376:	4342      	muls	r2, r0
 801f378:	78a8      	ldrb	r0, [r5, #2]
 801f37a:	789b      	ldrb	r3, [r3, #2]
 801f37c:	fb0e 2206 	mla	r2, lr, r6, r2
 801f380:	fb04 2400 	mla	r4, r4, r0, r2
 801f384:	fb08 4803 	mla	r8, r8, r3, r4
 801f388:	9b01      	ldr	r3, [sp, #4]
 801f38a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f38e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f392:	fb08 c707 	mla	r7, r8, r7, ip
 801f396:	b2bf      	uxth	r7, r7
 801f398:	f107 0c01 	add.w	ip, r7, #1
 801f39c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f3a0:	123f      	asrs	r7, r7, #8
 801f3a2:	708f      	strb	r7, [r1, #2]
 801f3a4:	b007      	add	sp, #28
 801f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3aa:	bf00      	nop
 801f3ac:	0802af5d 	.word	0x0802af5d
 801f3b0:	0802b456 	.word	0x0802b456
 801f3b4:	0802b026 	.word	0x0802b026

0801f3b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3bc:	ed2d 8b08 	vpush	{d8-d11}
 801f3c0:	b095      	sub	sp, #84	; 0x54
 801f3c2:	eeb0 aa40 	vmov.f32	s20, s0
 801f3c6:	eef0 9a60 	vmov.f32	s19, s1
 801f3ca:	930a      	str	r3, [sp, #40]	; 0x28
 801f3cc:	eeb0 9a41 	vmov.f32	s18, s2
 801f3d0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f3d4:	eeb0 8a62 	vmov.f32	s16, s5
 801f3d8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f3da:	eef0 8a43 	vmov.f32	s17, s6
 801f3de:	930c      	str	r3, [sp, #48]	; 0x30
 801f3e0:	eef0 ba44 	vmov.f32	s23, s8
 801f3e4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f3e8:	eeb0 ba64 	vmov.f32	s22, s9
 801f3ec:	9013      	str	r0, [sp, #76]	; 0x4c
 801f3ee:	eef0 aa45 	vmov.f32	s21, s10
 801f3f2:	9310      	str	r3, [sp, #64]	; 0x40
 801f3f4:	6860      	ldr	r0, [r4, #4]
 801f3f6:	910f      	str	r1, [sp, #60]	; 0x3c
 801f3f8:	9212      	str	r2, [sp, #72]	; 0x48
 801f3fa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f3fc:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f400:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f404:	fb00 1303 	mla	r3, r0, r3, r1
 801f408:	6821      	ldr	r1, [r4, #0]
 801f40a:	6854      	ldr	r4, [r2, #4]
 801f40c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f410:	18cb      	adds	r3, r1, r3
 801f412:	930b      	str	r3, [sp, #44]	; 0x2c
 801f414:	6813      	ldr	r3, [r2, #0]
 801f416:	930e      	str	r3, [sp, #56]	; 0x38
 801f418:	1d23      	adds	r3, r4, #4
 801f41a:	9309      	str	r3, [sp, #36]	; 0x24
 801f41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f41e:	43db      	mvns	r3, r3
 801f420:	b2db      	uxtb	r3, r3
 801f422:	930d      	str	r3, [sp, #52]	; 0x34
 801f424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f426:	2b00      	cmp	r3, #0
 801f428:	dc03      	bgt.n	801f432 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f42a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	f340 823c 	ble.w	801f8aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f434:	2b00      	cmp	r3, #0
 801f436:	f340 8115 	ble.w	801f664 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f43a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f43c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f43e:	1412      	asrs	r2, r2, #16
 801f440:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f444:	d431      	bmi.n	801f4aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f446:	1c51      	adds	r1, r2, #1
 801f448:	428d      	cmp	r5, r1
 801f44a:	dd31      	ble.n	801f4b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	db2f      	blt.n	801f4b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f450:	1c59      	adds	r1, r3, #1
 801f452:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f454:	4288      	cmp	r0, r1
 801f456:	dd2b      	ble.n	801f4b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f45a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f45c:	3b01      	subs	r3, #1
 801f45e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f460:	fb02 1203 	mla	r2, r2, r3, r1
 801f464:	1412      	asrs	r2, r2, #16
 801f466:	d42d      	bmi.n	801f4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f468:	3201      	adds	r2, #1
 801f46a:	4295      	cmp	r5, r2
 801f46c:	dd2a      	ble.n	801f4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f46e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f470:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f472:	fb02 1303 	mla	r3, r2, r3, r1
 801f476:	141b      	asrs	r3, r3, #16
 801f478:	d424      	bmi.n	801f4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f47a:	3301      	adds	r3, #1
 801f47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f47e:	429a      	cmp	r2, r3
 801f480:	dd20      	ble.n	801f4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f484:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f488:	f103 0c03 	add.w	ip, r3, #3
 801f48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f48e:	9311      	str	r3, [sp, #68]	; 0x44
 801f490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f492:	2b00      	cmp	r3, #0
 801f494:	f300 814f 	bgt.w	801f736 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f49a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f49c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4a4:	441a      	add	r2, r3
 801f4a6:	920b      	str	r2, [sp, #44]	; 0x2c
 801f4a8:	e0de      	b.n	801f668 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f4aa:	1c51      	adds	r1, r2, #1
 801f4ac:	f040 80cb 	bne.w	801f646 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4b0:	42aa      	cmp	r2, r5
 801f4b2:	f280 80c8 	bge.w	801f646 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4b6:	1c5f      	adds	r7, r3, #1
 801f4b8:	f2c0 80c5 	blt.w	801f646 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f4be:	4293      	cmp	r3, r2
 801f4c0:	f280 80c1 	bge.w	801f646 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f4c8:	9311      	str	r3, [sp, #68]	; 0x44
 801f4ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	dde3      	ble.n	801f498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f4d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f4d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f4d4:	141a      	asrs	r2, r3, #16
 801f4d6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f4d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f4da:	1400      	asrs	r0, r0, #16
 801f4dc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f4e0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f4e4:	f100 810e 	bmi.w	801f704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f4e8:	1c46      	adds	r6, r0, #1
 801f4ea:	42b5      	cmp	r5, r6
 801f4ec:	f340 810c 	ble.w	801f708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f4f0:	2a00      	cmp	r2, #0
 801f4f2:	f2c0 8109 	blt.w	801f708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f4f6:	1c56      	adds	r6, r2, #1
 801f4f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f4fa:	42b4      	cmp	r4, r6
 801f4fc:	f340 8104 	ble.w	801f708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f500:	fb02 0005 	mla	r0, r2, r5, r0
 801f504:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f508:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f50c:	4402      	add	r2, r0
 801f50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f510:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f514:	eb00 080e 	add.w	r8, r0, lr
 801f518:	2b00      	cmp	r3, #0
 801f51a:	f000 80e4 	beq.w	801f6e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f51e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f522:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f526:	4484      	add	ip, r0
 801f528:	2900      	cmp	r1, #0
 801f52a:	f000 80e5 	beq.w	801f6f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f52e:	1950      	adds	r0, r2, r5
 801f530:	5d52      	ldrb	r2, [r2, r5]
 801f532:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f534:	7840      	ldrb	r0, [r0, #1]
 801f536:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f53a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f53e:	4422      	add	r2, r4
 801f540:	4420      	add	r0, r4
 801f542:	b29b      	uxth	r3, r3
 801f544:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f546:	b289      	uxth	r1, r1
 801f548:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f54c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f550:	fb03 fa01 	mul.w	sl, r3, r1
 801f554:	011b      	lsls	r3, r3, #4
 801f556:	f89c e000 	ldrb.w	lr, [ip]
 801f55a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f55e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f562:	eba3 030a 	sub.w	r3, r3, sl
 801f566:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f568:	b289      	uxth	r1, r1
 801f56a:	b29b      	uxth	r3, r3
 801f56c:	eba9 0901 	sub.w	r9, r9, r1
 801f570:	fb03 fe0e 	mul.w	lr, r3, lr
 801f574:	fa1f f989 	uxth.w	r9, r9
 801f578:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f57c:	f892 b000 	ldrb.w	fp, [r2]
 801f580:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f584:	f890 b000 	ldrb.w	fp, [r0]
 801f588:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f58c:	f897 b000 	ldrb.w	fp, [r7]
 801f590:	fb1b fb04 	smulbb	fp, fp, r4
 801f594:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f598:	fb0e be06 	mla	lr, lr, r6, fp
 801f59c:	fa1f fe8e 	uxth.w	lr, lr
 801f5a0:	f10e 0b01 	add.w	fp, lr, #1
 801f5a4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f5a8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f5ac:	f887 b000 	strb.w	fp, [r7]
 801f5b0:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f5b4:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f5b8:	fb03 fe0e 	mul.w	lr, r3, lr
 801f5bc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f5c0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f5c4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f5c8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f5cc:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f5d0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f5d4:	fb1b fb04 	smulbb	fp, fp, r4
 801f5d8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f5dc:	fb0e be06 	mla	lr, lr, r6, fp
 801f5e0:	fa1f fe8e 	uxth.w	lr, lr
 801f5e4:	f10e 0b01 	add.w	fp, lr, #1
 801f5e8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f5ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f5f0:	f887 e001 	strb.w	lr, [r7, #1]
 801f5f4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f5f8:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f5fc:	fb03 f30c 	mul.w	r3, r3, ip
 801f600:	fb09 330e 	mla	r3, r9, lr, r3
 801f604:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f608:	7882      	ldrb	r2, [r0, #2]
 801f60a:	fb01 310e 	mla	r1, r1, lr, r3
 801f60e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f612:	78b9      	ldrb	r1, [r7, #2]
 801f614:	fb11 f104 	smulbb	r1, r1, r4
 801f618:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f61c:	fb0a 1606 	mla	r6, sl, r6, r1
 801f620:	b2b6      	uxth	r6, r6
 801f622:	1c73      	adds	r3, r6, #1
 801f624:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f628:	1236      	asrs	r6, r6, #8
 801f62a:	70be      	strb	r6, [r7, #2]
 801f62c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f62e:	3703      	adds	r7, #3
 801f630:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f632:	4413      	add	r3, r2
 801f634:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f636:	9327      	str	r3, [sp, #156]	; 0x9c
 801f638:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f63a:	4413      	add	r3, r2
 801f63c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f63e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f640:	3b01      	subs	r3, #1
 801f642:	9311      	str	r3, [sp, #68]	; 0x44
 801f644:	e741      	b.n	801f4ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f646:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f648:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f64a:	4413      	add	r3, r2
 801f64c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f64e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f650:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f652:	4413      	add	r3, r2
 801f654:	9328      	str	r3, [sp, #160]	; 0xa0
 801f656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f658:	3b01      	subs	r3, #1
 801f65a:	930a      	str	r3, [sp, #40]	; 0x28
 801f65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f65e:	3303      	adds	r3, #3
 801f660:	930b      	str	r3, [sp, #44]	; 0x2c
 801f662:	e6e6      	b.n	801f432 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f664:	f47f aef8 	bne.w	801f458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	f340 811d 	ble.w	801f8aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f676:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f67a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f67e:	eef0 6a48 	vmov.f32	s13, s16
 801f682:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f686:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f68a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f68e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f692:	eef0 6a68 	vmov.f32	s13, s17
 801f696:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f69a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f69e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f6a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f6a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f6aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f6ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f6b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f6b6:	ee18 2a10 	vmov	r2, s16
 801f6ba:	eeb0 8a47 	vmov.f32	s16, s14
 801f6be:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6c2:	ee18 2a90 	vmov	r2, s17
 801f6c6:	9329      	str	r3, [sp, #164]	; 0xa4
 801f6c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f6ca:	eef0 8a67 	vmov.f32	s17, s15
 801f6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6d2:	932a      	str	r3, [sp, #168]	; 0xa8
 801f6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6d8:	3b01      	subs	r3, #1
 801f6da:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f6de:	bf08      	it	eq
 801f6e0:	4613      	moveq	r3, r2
 801f6e2:	930a      	str	r3, [sp, #40]	; 0x28
 801f6e4:	e69e      	b.n	801f424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f6e6:	b151      	cbz	r1, 801f6fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f6e8:	5d52      	ldrb	r2, [r2, r5]
 801f6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6f0:	4402      	add	r2, r0
 801f6f2:	4640      	mov	r0, r8
 801f6f4:	46c4      	mov	ip, r8
 801f6f6:	e724      	b.n	801f542 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f6f8:	4640      	mov	r0, r8
 801f6fa:	4642      	mov	r2, r8
 801f6fc:	e721      	b.n	801f542 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f6fe:	4640      	mov	r0, r8
 801f700:	4642      	mov	r2, r8
 801f702:	e7f7      	b.n	801f6f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f704:	1c46      	adds	r6, r0, #1
 801f706:	d191      	bne.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f708:	4285      	cmp	r5, r0
 801f70a:	dd8f      	ble.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f70c:	1c54      	adds	r4, r2, #1
 801f70e:	db8d      	blt.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f710:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f712:	4294      	cmp	r4, r2
 801f714:	dd8a      	ble.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f716:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f718:	9002      	str	r0, [sp, #8]
 801f71a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f71c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f724:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f728:	e9cd 5300 	strd	r5, r3, [sp]
 801f72c:	4639      	mov	r1, r7
 801f72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f730:	f7ff fd52 	bl	801f1d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f734:	e77a      	b.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f736:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f738:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f73a:	1410      	asrs	r0, r2, #16
 801f73c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f740:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f742:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f744:	1412      	asrs	r2, r2, #16
 801f746:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f74a:	fb05 2000 	mla	r0, r5, r0, r2
 801f74e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f750:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f754:	4402      	add	r2, r0
 801f756:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f758:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f75c:	eb00 0708 	add.w	r7, r0, r8
 801f760:	2b00      	cmp	r3, #0
 801f762:	f000 8093 	beq.w	801f88c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f766:	7856      	ldrb	r6, [r2, #1]
 801f768:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f76c:	4406      	add	r6, r0
 801f76e:	2900      	cmp	r1, #0
 801f770:	f000 8095 	beq.w	801f89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f774:	1950      	adds	r0, r2, r5
 801f776:	5d52      	ldrb	r2, [r2, r5]
 801f778:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f77a:	7840      	ldrb	r0, [r0, #1]
 801f77c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f784:	4422      	add	r2, r4
 801f786:	4420      	add	r0, r4
 801f788:	b29b      	uxth	r3, r3
 801f78a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f78c:	b289      	uxth	r1, r1
 801f78e:	f10c 0c03 	add.w	ip, ip, #3
 801f792:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f796:	fb03 f901 	mul.w	r9, r3, r1
 801f79a:	011b      	lsls	r3, r3, #4
 801f79c:	f896 8000 	ldrb.w	r8, [r6]
 801f7a0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f7a4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f7a8:	eba3 0309 	sub.w	r3, r3, r9
 801f7ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7ae:	b289      	uxth	r1, r1
 801f7b0:	b29b      	uxth	r3, r3
 801f7b2:	ebae 0e01 	sub.w	lr, lr, r1
 801f7b6:	fb03 f808 	mul.w	r8, r3, r8
 801f7ba:	fa1f fe8e 	uxth.w	lr, lr
 801f7be:	fb0e 880b 	mla	r8, lr, fp, r8
 801f7c2:	f892 b000 	ldrb.w	fp, [r2]
 801f7c6:	fb01 880b 	mla	r8, r1, fp, r8
 801f7ca:	f890 b000 	ldrb.w	fp, [r0]
 801f7ce:	fb09 880b 	mla	r8, r9, fp, r8
 801f7d2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f7d6:	fb1b fb04 	smulbb	fp, fp, r4
 801f7da:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f7de:	fb08 b80a 	mla	r8, r8, sl, fp
 801f7e2:	fa1f f888 	uxth.w	r8, r8
 801f7e6:	f108 0b01 	add.w	fp, r8, #1
 801f7ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7f2:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f7f6:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f7fa:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f7fe:	fb03 f808 	mul.w	r8, r3, r8
 801f802:	fb0e 880b 	mla	r8, lr, fp, r8
 801f806:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f80a:	fb01 880b 	mla	r8, r1, fp, r8
 801f80e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f812:	fb09 880b 	mla	r8, r9, fp, r8
 801f816:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f81a:	fb1b fb04 	smulbb	fp, fp, r4
 801f81e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f822:	fb08 b80a 	mla	r8, r8, sl, fp
 801f826:	fa1f f888 	uxth.w	r8, r8
 801f82a:	f108 0b01 	add.w	fp, r8, #1
 801f82e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f832:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f836:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f83a:	78b6      	ldrb	r6, [r6, #2]
 801f83c:	78bf      	ldrb	r7, [r7, #2]
 801f83e:	4373      	muls	r3, r6
 801f840:	7896      	ldrb	r6, [r2, #2]
 801f842:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f844:	fb0e 3307 	mla	r3, lr, r7, r3
 801f848:	fb01 3306 	mla	r3, r1, r6, r3
 801f84c:	7886      	ldrb	r6, [r0, #2]
 801f84e:	fb09 3906 	mla	r9, r9, r6, r3
 801f852:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f856:	fb13 f304 	smulbb	r3, r3, r4
 801f85a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f85e:	fb09 390a 	mla	r9, r9, sl, r3
 801f862:	fa1f f989 	uxth.w	r9, r9
 801f866:	f109 0301 	add.w	r3, r9, #1
 801f86a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f86e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f870:	4413      	add	r3, r2
 801f872:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f874:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f878:	9327      	str	r3, [sp, #156]	; 0x9c
 801f87a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f87c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f880:	4413      	add	r3, r2
 801f882:	9328      	str	r3, [sp, #160]	; 0xa0
 801f884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f886:	3b01      	subs	r3, #1
 801f888:	9311      	str	r3, [sp, #68]	; 0x44
 801f88a:	e601      	b.n	801f490 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f88c:	b151      	cbz	r1, 801f8a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f88e:	5d52      	ldrb	r2, [r2, r5]
 801f890:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f892:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f896:	4402      	add	r2, r0
 801f898:	4638      	mov	r0, r7
 801f89a:	463e      	mov	r6, r7
 801f89c:	e774      	b.n	801f788 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f89e:	4638      	mov	r0, r7
 801f8a0:	463a      	mov	r2, r7
 801f8a2:	e771      	b.n	801f788 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f8a4:	4638      	mov	r0, r7
 801f8a6:	463a      	mov	r2, r7
 801f8a8:	e7f7      	b.n	801f89a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f8aa:	b015      	add	sp, #84	; 0x54
 801f8ac:	ecbd 8b08 	vpop	{d8-d11}
 801f8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8b8:	780d      	ldrb	r5, [r1, #0]
 801f8ba:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f8be:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f8c2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f8c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f8ca:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f8ce:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f8d2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f8d6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f8da:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f8de:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f8e2:	9501      	str	r5, [sp, #4]
 801f8e4:	fb06 470c 	mla	r7, r6, ip, r4
 801f8e8:	2e00      	cmp	r6, #0
 801f8ea:	eb02 0e07 	add.w	lr, r2, r7
 801f8ee:	db46      	blt.n	801f97e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f8f0:	45b0      	cmp	r8, r6
 801f8f2:	dd44      	ble.n	801f97e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f8f4:	2c00      	cmp	r4, #0
 801f8f6:	db40      	blt.n	801f97a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f8f8:	45a4      	cmp	ip, r4
 801f8fa:	dd3e      	ble.n	801f97a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f8fc:	5dd7      	ldrb	r7, [r2, r7]
 801f8fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f902:	441f      	add	r7, r3
 801f904:	1c62      	adds	r2, r4, #1
 801f906:	d43d      	bmi.n	801f984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f908:	4594      	cmp	ip, r2
 801f90a:	dd3b      	ble.n	801f984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f90c:	f1ba 0f00 	cmp.w	sl, #0
 801f910:	d038      	beq.n	801f984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f912:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f91a:	441d      	add	r5, r3
 801f91c:	3601      	adds	r6, #1
 801f91e:	d435      	bmi.n	801f98c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f920:	45b0      	cmp	r8, r6
 801f922:	dd33      	ble.n	801f98c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f924:	b390      	cbz	r0, 801f98c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f926:	2c00      	cmp	r4, #0
 801f928:	db2e      	blt.n	801f988 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f92a:	45a4      	cmp	ip, r4
 801f92c:	dd2c      	ble.n	801f988 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f92e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f932:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f936:	441e      	add	r6, r3
 801f938:	1c62      	adds	r2, r4, #1
 801f93a:	d42a      	bmi.n	801f992 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f93c:	4594      	cmp	ip, r2
 801f93e:	dd28      	ble.n	801f992 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f940:	f1ba 0f00 	cmp.w	sl, #0
 801f944:	d025      	beq.n	801f992 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f946:	44f4      	add	ip, lr
 801f948:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f94c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f950:	4413      	add	r3, r2
 801f952:	f1ba 0f0f 	cmp.w	sl, #15
 801f956:	f897 8000 	ldrb.w	r8, [r7]
 801f95a:	f895 9000 	ldrb.w	r9, [r5]
 801f95e:	f896 e000 	ldrb.w	lr, [r6]
 801f962:	f893 c000 	ldrb.w	ip, [r3]
 801f966:	d801      	bhi.n	801f96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f968:	280f      	cmp	r0, #15
 801f96a:	d914      	bls.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f96c:	4b29      	ldr	r3, [pc, #164]	; (801fa14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f96e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f972:	4a29      	ldr	r2, [pc, #164]	; (801fa18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f974:	4829      	ldr	r0, [pc, #164]	; (801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f976:	f005 ff39 	bl	80257ec <__assert_func>
 801f97a:	af01      	add	r7, sp, #4
 801f97c:	e7c2      	b.n	801f904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f97e:	ad01      	add	r5, sp, #4
 801f980:	462f      	mov	r7, r5
 801f982:	e7cb      	b.n	801f91c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f984:	ad01      	add	r5, sp, #4
 801f986:	e7c9      	b.n	801f91c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f988:	ae01      	add	r6, sp, #4
 801f98a:	e7d5      	b.n	801f938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f98c:	ab01      	add	r3, sp, #4
 801f98e:	461e      	mov	r6, r3
 801f990:	e7df      	b.n	801f952 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f992:	ab01      	add	r3, sp, #4
 801f994:	e7dd      	b.n	801f952 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f996:	fa1f f48a 	uxth.w	r4, sl
 801f99a:	b280      	uxth	r0, r0
 801f99c:	fb04 fa00 	mul.w	sl, r4, r0
 801f9a0:	0124      	lsls	r4, r4, #4
 801f9a2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f9a6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f9aa:	b282      	uxth	r2, r0
 801f9ac:	eba4 000a 	sub.w	r0, r4, sl
 801f9b0:	ebab 0b02 	sub.w	fp, fp, r2
 801f9b4:	b280      	uxth	r0, r0
 801f9b6:	fa1f fb8b 	uxth.w	fp, fp
 801f9ba:	fb00 f909 	mul.w	r9, r0, r9
 801f9be:	fb0b 9808 	mla	r8, fp, r8, r9
 801f9c2:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f9c6:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f9ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9ce:	f881 c000 	strb.w	ip, [r1]
 801f9d2:	786c      	ldrb	r4, [r5, #1]
 801f9d4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f9d8:	4344      	muls	r4, r0
 801f9da:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f9de:	7874      	ldrb	r4, [r6, #1]
 801f9e0:	fb02 cc04 	mla	ip, r2, r4, ip
 801f9e4:	785c      	ldrb	r4, [r3, #1]
 801f9e6:	fb0a c404 	mla	r4, sl, r4, ip
 801f9ea:	1224      	asrs	r4, r4, #8
 801f9ec:	704c      	strb	r4, [r1, #1]
 801f9ee:	78ad      	ldrb	r5, [r5, #2]
 801f9f0:	78bc      	ldrb	r4, [r7, #2]
 801f9f2:	4368      	muls	r0, r5
 801f9f4:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f9f8:	78b0      	ldrb	r0, [r6, #2]
 801f9fa:	fb02 b000 	mla	r0, r2, r0, fp
 801f9fe:	789a      	ldrb	r2, [r3, #2]
 801fa00:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fa04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa08:	f881 a002 	strb.w	sl, [r1, #2]
 801fa0c:	b003      	add	sp, #12
 801fa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa12:	bf00      	nop
 801fa14:	0802af5d 	.word	0x0802af5d
 801fa18:	0802b456 	.word	0x0802b456
 801fa1c:	0802b026 	.word	0x0802b026

0801fa20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	ed2d 8b0a 	vpush	{d8-d12}
 801fa28:	b08f      	sub	sp, #60	; 0x3c
 801fa2a:	eeb0 aa40 	vmov.f32	s20, s0
 801fa2e:	eef0 9a60 	vmov.f32	s19, s1
 801fa32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801fa34:	eeb0 9a41 	vmov.f32	s18, s2
 801fa38:	9307      	str	r3, [sp, #28]
 801fa3a:	eeb0 8a62 	vmov.f32	s16, s5
 801fa3e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801fa42:	eef0 8a43 	vmov.f32	s17, s6
 801fa46:	900d      	str	r0, [sp, #52]	; 0x34
 801fa48:	eeb0 ca44 	vmov.f32	s24, s8
 801fa4c:	6860      	ldr	r0, [r4, #4]
 801fa4e:	eef0 ba64 	vmov.f32	s23, s9
 801fa52:	9309      	str	r3, [sp, #36]	; 0x24
 801fa54:	eeb0 ba45 	vmov.f32	s22, s10
 801fa58:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fa5c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801fa60:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801fa64:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fa68:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fa6a:	fb00 1303 	mla	r3, r0, r3, r1
 801fa6e:	6821      	ldr	r1, [r4, #0]
 801fa70:	6854      	ldr	r4, [r2, #4]
 801fa72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa76:	3404      	adds	r4, #4
 801fa78:	18cb      	adds	r3, r1, r3
 801fa7a:	9308      	str	r3, [sp, #32]
 801fa7c:	6813      	ldr	r3, [r2, #0]
 801fa7e:	930a      	str	r3, [sp, #40]	; 0x28
 801fa80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	dc03      	bgt.n	801fa8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fa86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	f340 81d2 	ble.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fa8e:	9b07      	ldr	r3, [sp, #28]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	f340 80e3 	ble.w	801fc5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801fa96:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fa98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa9a:	1412      	asrs	r2, r2, #16
 801fa9c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801faa0:	d42f      	bmi.n	801fb02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801faa2:	1c51      	adds	r1, r2, #1
 801faa4:	428d      	cmp	r5, r1
 801faa6:	dd2f      	ble.n	801fb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	db2d      	blt.n	801fb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801faac:	1c59      	adds	r1, r3, #1
 801faae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fab0:	4288      	cmp	r0, r1
 801fab2:	dd29      	ble.n	801fb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fab4:	9b07      	ldr	r3, [sp, #28]
 801fab6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fab8:	3b01      	subs	r3, #1
 801faba:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fabc:	fb02 1203 	mla	r2, r2, r3, r1
 801fac0:	1412      	asrs	r2, r2, #16
 801fac2:	d42b      	bmi.n	801fb1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fac4:	3201      	adds	r2, #1
 801fac6:	4295      	cmp	r5, r2
 801fac8:	dd28      	ble.n	801fb1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801faca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801facc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801face:	fb02 1303 	mla	r3, r2, r3, r1
 801fad2:	141b      	asrs	r3, r3, #16
 801fad4:	d422      	bmi.n	801fb1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fad6:	3301      	adds	r3, #1
 801fad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fada:	429a      	cmp	r2, r3
 801fadc:	dd1e      	ble.n	801fb1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fade:	9b08      	ldr	r3, [sp, #32]
 801fae0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fae4:	f103 0803 	add.w	r8, r3, #3
 801fae8:	f1ba 0f00 	cmp.w	sl, #0
 801faec:	f300 8119 	bgt.w	801fd22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801faf0:	9b07      	ldr	r3, [sp, #28]
 801faf2:	9a08      	ldr	r2, [sp, #32]
 801faf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801faf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fafc:	441a      	add	r2, r3
 801fafe:	9208      	str	r2, [sp, #32]
 801fb00:	e0ae      	b.n	801fc60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801fb02:	1c51      	adds	r1, r2, #1
 801fb04:	f040 809b 	bne.w	801fc3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb08:	42aa      	cmp	r2, r5
 801fb0a:	f280 8098 	bge.w	801fc3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb0e:	1c5a      	adds	r2, r3, #1
 801fb10:	f2c0 8095 	blt.w	801fc3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb16:	4293      	cmp	r3, r2
 801fb18:	f280 8091 	bge.w	801fc3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb1c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801fb20:	f1bb 0f00 	cmp.w	fp, #0
 801fb24:	dde4      	ble.n	801faf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fb26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb28:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fb2a:	141a      	asrs	r2, r3, #16
 801fb2c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fb2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb30:	1400      	asrs	r0, r0, #16
 801fb32:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fb36:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb3a:	f100 80dc 	bmi.w	801fcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb3e:	1c47      	adds	r7, r0, #1
 801fb40:	42bd      	cmp	r5, r7
 801fb42:	f340 80da 	ble.w	801fcfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb46:	2a00      	cmp	r2, #0
 801fb48:	f2c0 80d7 	blt.w	801fcfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb4c:	f102 0c01 	add.w	ip, r2, #1
 801fb50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb52:	4567      	cmp	r7, ip
 801fb54:	f340 80d1 	ble.w	801fcfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb58:	fb02 0005 	mla	r0, r2, r5, r0
 801fb5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fb5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb60:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fb64:	4402      	add	r2, r0
 801fb66:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fb6a:	eb04 0c08 	add.w	ip, r4, r8
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	f000 80b3 	beq.w	801fcda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fb74:	7857      	ldrb	r7, [r2, #1]
 801fb76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb7a:	4427      	add	r7, r4
 801fb7c:	2900      	cmp	r1, #0
 801fb7e:	f000 80b4 	beq.w	801fcea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fb82:	1950      	adds	r0, r2, r5
 801fb84:	5d52      	ldrb	r2, [r2, r5]
 801fb86:	7840      	ldrb	r0, [r0, #1]
 801fb88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb90:	4422      	add	r2, r4
 801fb92:	4420      	add	r0, r4
 801fb94:	b29b      	uxth	r3, r3
 801fb96:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fb9a:	b289      	uxth	r1, r1
 801fb9c:	f897 8000 	ldrb.w	r8, [r7]
 801fba0:	fb03 f901 	mul.w	r9, r3, r1
 801fba4:	011b      	lsls	r3, r3, #4
 801fba6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fbaa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fbae:	eba3 0309 	sub.w	r3, r3, r9
 801fbb2:	b289      	uxth	r1, r1
 801fbb4:	b29b      	uxth	r3, r3
 801fbb6:	ebae 0e01 	sub.w	lr, lr, r1
 801fbba:	fb03 f808 	mul.w	r8, r3, r8
 801fbbe:	fa1f fe8e 	uxth.w	lr, lr
 801fbc2:	fb0e 880a 	mla	r8, lr, sl, r8
 801fbc6:	f892 a000 	ldrb.w	sl, [r2]
 801fbca:	fb01 880a 	mla	r8, r1, sl, r8
 801fbce:	f890 a000 	ldrb.w	sl, [r0]
 801fbd2:	fb09 880a 	mla	r8, r9, sl, r8
 801fbd6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbda:	f886 8000 	strb.w	r8, [r6]
 801fbde:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fbe2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fbe6:	fb03 f808 	mul.w	r8, r3, r8
 801fbea:	fb0e 880a 	mla	r8, lr, sl, r8
 801fbee:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fbf2:	fb01 880a 	mla	r8, r1, sl, r8
 801fbf6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fbfa:	fb09 880a 	mla	r8, r9, sl, r8
 801fbfe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc02:	f886 8001 	strb.w	r8, [r6, #1]
 801fc06:	78bf      	ldrb	r7, [r7, #2]
 801fc08:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fc0c:	437b      	muls	r3, r7
 801fc0e:	7892      	ldrb	r2, [r2, #2]
 801fc10:	fb0e 330c 	mla	r3, lr, ip, r3
 801fc14:	fb01 3102 	mla	r1, r1, r2, r3
 801fc18:	7882      	ldrb	r2, [r0, #2]
 801fc1a:	fb09 1902 	mla	r9, r9, r2, r1
 801fc1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc22:	f886 9002 	strb.w	r9, [r6, #2]
 801fc26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc28:	3603      	adds	r6, #3
 801fc2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc30:	4413      	add	r3, r2
 801fc32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc34:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc38:	4413      	add	r3, r2
 801fc3a:	9324      	str	r3, [sp, #144]	; 0x90
 801fc3c:	e770      	b.n	801fb20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fc3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc40:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc42:	4413      	add	r3, r2
 801fc44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc46:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc4a:	4413      	add	r3, r2
 801fc4c:	9324      	str	r3, [sp, #144]	; 0x90
 801fc4e:	9b07      	ldr	r3, [sp, #28]
 801fc50:	3b01      	subs	r3, #1
 801fc52:	9307      	str	r3, [sp, #28]
 801fc54:	9b08      	ldr	r3, [sp, #32]
 801fc56:	3303      	adds	r3, #3
 801fc58:	9308      	str	r3, [sp, #32]
 801fc5a:	e718      	b.n	801fa8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fc5c:	f47f af2a 	bne.w	801fab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fc60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	f340 80e5 	ble.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fc68:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fc6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc6e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fc72:	eef0 6a48 	vmov.f32	s13, s16
 801fc76:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fc7a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fc7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc82:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fc86:	eef0 6a68 	vmov.f32	s13, s17
 801fc8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc8e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fc92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc96:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fca2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fca6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fcaa:	ee18 2a10 	vmov	r2, s16
 801fcae:	eeb0 8a47 	vmov.f32	s16, s14
 801fcb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcb6:	ee18 2a90 	vmov	r2, s17
 801fcba:	9325      	str	r3, [sp, #148]	; 0x94
 801fcbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcbe:	eef0 8a67 	vmov.f32	s17, s15
 801fcc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcc6:	9326      	str	r3, [sp, #152]	; 0x98
 801fcc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fcca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fccc:	3b01      	subs	r3, #1
 801fcce:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcd2:	bf08      	it	eq
 801fcd4:	4613      	moveq	r3, r2
 801fcd6:	9307      	str	r3, [sp, #28]
 801fcd8:	e6d2      	b.n	801fa80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcda:	b149      	cbz	r1, 801fcf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fcdc:	5d52      	ldrb	r2, [r2, r5]
 801fcde:	4660      	mov	r0, ip
 801fce0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fce4:	4422      	add	r2, r4
 801fce6:	4667      	mov	r7, ip
 801fce8:	e754      	b.n	801fb94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fcea:	4660      	mov	r0, ip
 801fcec:	4662      	mov	r2, ip
 801fcee:	e751      	b.n	801fb94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fcf0:	4660      	mov	r0, ip
 801fcf2:	4662      	mov	r2, ip
 801fcf4:	e7f7      	b.n	801fce6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fcf6:	1c47      	adds	r7, r0, #1
 801fcf8:	d195      	bne.n	801fc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcfa:	4285      	cmp	r5, r0
 801fcfc:	dd93      	ble.n	801fc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcfe:	1c57      	adds	r7, r2, #1
 801fd00:	db91      	blt.n	801fc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fd04:	4297      	cmp	r7, r2
 801fd06:	dd8e      	ble.n	801fc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd08:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fd0c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fd10:	e9cd 5700 	strd	r5, r7, [sp]
 801fd14:	4623      	mov	r3, r4
 801fd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd18:	4631      	mov	r1, r6
 801fd1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fd1c:	f7ff fdca 	bl	801f8b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fd20:	e781      	b.n	801fc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fd24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fd26:	1410      	asrs	r0, r2, #16
 801fd28:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fd2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fd2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd30:	1412      	asrs	r2, r2, #16
 801fd32:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fd36:	fb05 2000 	mla	r0, r5, r0, r2
 801fd3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd3c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fd40:	4402      	add	r2, r0
 801fd42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fd46:	eb04 070e 	add.w	r7, r4, lr
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d063      	beq.n	801fe16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801fd4e:	7856      	ldrb	r6, [r2, #1]
 801fd50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fd54:	4426      	add	r6, r4
 801fd56:	2900      	cmp	r1, #0
 801fd58:	d065      	beq.n	801fe26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fd5a:	1950      	adds	r0, r2, r5
 801fd5c:	5d52      	ldrb	r2, [r2, r5]
 801fd5e:	7840      	ldrb	r0, [r0, #1]
 801fd60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fd68:	4422      	add	r2, r4
 801fd6a:	4420      	add	r0, r4
 801fd6c:	b29b      	uxth	r3, r3
 801fd6e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fd72:	b289      	uxth	r1, r1
 801fd74:	f896 e000 	ldrb.w	lr, [r6]
 801fd78:	f108 0803 	add.w	r8, r8, #3
 801fd7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fd80:	fb03 f901 	mul.w	r9, r3, r1
 801fd84:	011b      	lsls	r3, r3, #4
 801fd86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fd8a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fd8e:	eba3 0309 	sub.w	r3, r3, r9
 801fd92:	b289      	uxth	r1, r1
 801fd94:	b29b      	uxth	r3, r3
 801fd96:	ebac 0c01 	sub.w	ip, ip, r1
 801fd9a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fd9e:	fa1f fc8c 	uxth.w	ip, ip
 801fda2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fda6:	f892 b000 	ldrb.w	fp, [r2]
 801fdaa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fdae:	f890 b000 	ldrb.w	fp, [r0]
 801fdb2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fdb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fdba:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fdbe:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fdc2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fdc6:	fb03 fe0e 	mul.w	lr, r3, lr
 801fdca:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fdce:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fdd2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fdd6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fdda:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fdde:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fde2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fde6:	78b6      	ldrb	r6, [r6, #2]
 801fde8:	78bf      	ldrb	r7, [r7, #2]
 801fdea:	4373      	muls	r3, r6
 801fdec:	7896      	ldrb	r6, [r2, #2]
 801fdee:	7882      	ldrb	r2, [r0, #2]
 801fdf0:	fb0c 3307 	mla	r3, ip, r7, r3
 801fdf4:	fb01 3306 	mla	r3, r1, r6, r3
 801fdf8:	fb09 3902 	mla	r9, r9, r2, r3
 801fdfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fdfe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fe00:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe04:	4413      	add	r3, r2
 801fe06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fe08:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fe0c:	9323      	str	r3, [sp, #140]	; 0x8c
 801fe0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe10:	4413      	add	r3, r2
 801fe12:	9324      	str	r3, [sp, #144]	; 0x90
 801fe14:	e668      	b.n	801fae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fe16:	b149      	cbz	r1, 801fe2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fe18:	5d52      	ldrb	r2, [r2, r5]
 801fe1a:	4638      	mov	r0, r7
 801fe1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe20:	4422      	add	r2, r4
 801fe22:	463e      	mov	r6, r7
 801fe24:	e7a2      	b.n	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fe26:	4638      	mov	r0, r7
 801fe28:	463a      	mov	r2, r7
 801fe2a:	e79f      	b.n	801fd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fe2c:	4638      	mov	r0, r7
 801fe2e:	463a      	mov	r2, r7
 801fe30:	e7f7      	b.n	801fe22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fe32:	b00f      	add	sp, #60	; 0x3c
 801fe34:	ecbd 8b0a 	vpop	{d8-d12}
 801fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fe3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe40:	b087      	sub	sp, #28
 801fe42:	7888      	ldrb	r0, [r1, #2]
 801fe44:	9002      	str	r0, [sp, #8]
 801fe46:	7848      	ldrb	r0, [r1, #1]
 801fe48:	9e02      	ldr	r6, [sp, #8]
 801fe4a:	9003      	str	r0, [sp, #12]
 801fe4c:	7808      	ldrb	r0, [r1, #0]
 801fe4e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fe52:	9004      	str	r0, [sp, #16]
 801fe54:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fe58:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fe5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fe60:	9e03      	ldr	r6, [sp, #12]
 801fe62:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fe66:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fe6a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fe6e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fe72:	fb04 7508 	mla	r5, r4, r8, r7
 801fe76:	2c00      	cmp	r4, #0
 801fe78:	eb02 0905 	add.w	r9, r2, r5
 801fe7c:	db45      	blt.n	801ff0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe7e:	45a2      	cmp	sl, r4
 801fe80:	dd43      	ble.n	801ff0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe82:	2f00      	cmp	r7, #0
 801fe84:	db3f      	blt.n	801ff06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fe86:	45b8      	cmp	r8, r7
 801fe88:	dd3d      	ble.n	801ff06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fe8a:	5d52      	ldrb	r2, [r2, r5]
 801fe8c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fe90:	1c7a      	adds	r2, r7, #1
 801fe92:	d43d      	bmi.n	801ff10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe94:	4590      	cmp	r8, r2
 801fe96:	dd3b      	ble.n	801ff10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe98:	f1bc 0f00 	cmp.w	ip, #0
 801fe9c:	d038      	beq.n	801ff10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe9e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fea2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fea6:	3401      	adds	r4, #1
 801fea8:	d436      	bmi.n	801ff18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801feaa:	45a2      	cmp	sl, r4
 801feac:	dd34      	ble.n	801ff18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801feae:	f1be 0f00 	cmp.w	lr, #0
 801feb2:	d031      	beq.n	801ff18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801feb4:	2f00      	cmp	r7, #0
 801feb6:	db2d      	blt.n	801ff14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801feb8:	45b8      	cmp	r8, r7
 801feba:	dd2b      	ble.n	801ff14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801febc:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fec0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fec4:	3701      	adds	r7, #1
 801fec6:	d409      	bmi.n	801fedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fec8:	45b8      	cmp	r8, r7
 801feca:	dd07      	ble.n	801fedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fecc:	f1bc 0f00 	cmp.w	ip, #0
 801fed0:	d004      	beq.n	801fedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fed2:	44c8      	add	r8, r9
 801fed4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fed8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fedc:	f1bc 0f0f 	cmp.w	ip, #15
 801fee0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fee4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fee8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801feec:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fef0:	d802      	bhi.n	801fef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fef2:	f1be 0f0f 	cmp.w	lr, #15
 801fef6:	d911      	bls.n	801ff1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fef8:	4b77      	ldr	r3, [pc, #476]	; (80200d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801fefa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fefe:	4a77      	ldr	r2, [pc, #476]	; (80200dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801ff00:	4877      	ldr	r0, [pc, #476]	; (80200e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801ff02:	f005 fc73 	bl	80257ec <__assert_func>
 801ff06:	4606      	mov	r6, r0
 801ff08:	e7c2      	b.n	801fe90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801ff0a:	4605      	mov	r5, r0
 801ff0c:	4606      	mov	r6, r0
 801ff0e:	e7ca      	b.n	801fea6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ff10:	4605      	mov	r5, r0
 801ff12:	e7c8      	b.n	801fea6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ff14:	4604      	mov	r4, r0
 801ff16:	e7d5      	b.n	801fec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801ff18:	4604      	mov	r4, r0
 801ff1a:	e7df      	b.n	801fedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ff1c:	fa1f fc8c 	uxth.w	ip, ip
 801ff20:	fa1f f28e 	uxth.w	r2, lr
 801ff24:	fb02 fe0c 	mul.w	lr, r2, ip
 801ff28:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ff2c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801ff30:	ebac 070e 	sub.w	r7, ip, lr
 801ff34:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ff38:	b292      	uxth	r2, r2
 801ff3a:	b2bf      	uxth	r7, r7
 801ff3c:	1a9b      	subs	r3, r3, r2
 801ff3e:	fb07 fc0a 	mul.w	ip, r7, sl
 801ff42:	b29b      	uxth	r3, r3
 801ff44:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ff48:	9301      	str	r3, [sp, #4]
 801ff4a:	fb02 cc09 	mla	ip, r2, r9, ip
 801ff4e:	fb0e cc08 	mla	ip, lr, r8, ip
 801ff52:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ff56:	9305      	str	r3, [sp, #20]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	f000 80b9 	beq.w	80200d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801ff5e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ff62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff66:	fb0b fc0c 	mul.w	ip, fp, ip
 801ff6a:	fb0b f606 	mul.w	r6, fp, r6
 801ff6e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ff72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ff76:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ff7a:	44dc      	add	ip, fp
 801ff7c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ff80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ff84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff88:	fb0a fb0b 	mul.w	fp, sl, fp
 801ff8c:	fb0a fa05 	mul.w	sl, sl, r5
 801ff90:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ff94:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ff98:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801ff9c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ffa0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ffa4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffa8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801ffac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffb0:	0a36      	lsrs	r6, r6, #8
 801ffb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffb6:	44dc      	add	ip, fp
 801ffb8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ffbc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ffc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffc4:	fb09 fb0b 	mul.w	fp, r9, fp
 801ffc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffcc:	fb09 f904 	mul.w	r9, r9, r4
 801ffd0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ffd4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801ffd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffdc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ffe0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffe4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ffe8:	fb0c fc07 	mul.w	ip, ip, r7
 801ffec:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fff0:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801fff4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fff8:	445d      	add	r5, fp
 801fffa:	fb08 f404 	mul.w	r4, r8, r4
 801fffe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020002:	fb08 f800 	mul.w	r8, r8, r0
 8020006:	0a2d      	lsrs	r5, r5, #8
 8020008:	0a20      	lsrs	r0, r4, #8
 802000a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802000e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020012:	fb07 f70a 	mul.w	r7, r7, sl
 8020016:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802001a:	4404      	add	r4, r0
 802001c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8020020:	0a24      	lsrs	r4, r4, #8
 8020022:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8020026:	9801      	ldr	r0, [sp, #4]
 8020028:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802002c:	fb03 cc00 	mla	ip, r3, r0, ip
 8020030:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020034:	fb00 7606 	mla	r6, r0, r6, r7
 8020038:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 802003c:	fb04 cc0e 	mla	ip, r4, lr, ip
 8020040:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020044:	b280      	uxth	r0, r0
 8020046:	9c04      	ldr	r4, [sp, #16]
 8020048:	fb05 cc02 	mla	ip, r5, r2, ip
 802004c:	fb0e 6e08 	mla	lr, lr, r8, r6
 8020050:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020054:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020058:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 802005c:	fb02 ec0c 	mla	ip, r2, ip, lr
 8020060:	9a05      	ldr	r2, [sp, #20]
 8020062:	4342      	muls	r2, r0
 8020064:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020068:	1c53      	adds	r3, r2, #1
 802006a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802006e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020072:	ea45 0c0c 	orr.w	ip, r5, ip
 8020076:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802007a:	fa5f f28c 	uxtb.w	r2, ip
 802007e:	b2db      	uxtb	r3, r3
 8020080:	fb14 f403 	smulbb	r4, r4, r3
 8020084:	fb02 4200 	mla	r2, r2, r0, r4
 8020088:	b292      	uxth	r2, r2
 802008a:	1c54      	adds	r4, r2, #1
 802008c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020090:	9c03      	ldr	r4, [sp, #12]
 8020092:	fb14 f403 	smulbb	r4, r4, r3
 8020096:	1212      	asrs	r2, r2, #8
 8020098:	700a      	strb	r2, [r1, #0]
 802009a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802009e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80200a2:	fb02 4200 	mla	r2, r2, r0, r4
 80200a6:	b292      	uxth	r2, r2
 80200a8:	1c54      	adds	r4, r2, #1
 80200aa:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80200ae:	1212      	asrs	r2, r2, #8
 80200b0:	704a      	strb	r2, [r1, #1]
 80200b2:	9a02      	ldr	r2, [sp, #8]
 80200b4:	fb12 f303 	smulbb	r3, r2, r3
 80200b8:	fb0c 3c00 	mla	ip, ip, r0, r3
 80200bc:	fa1f fc8c 	uxth.w	ip, ip
 80200c0:	f10c 0301 	add.w	r3, ip, #1
 80200c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80200c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80200cc:	f881 c002 	strb.w	ip, [r1, #2]
 80200d0:	b007      	add	sp, #28
 80200d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200d6:	bf00      	nop
 80200d8:	0802af5d 	.word	0x0802af5d
 80200dc:	0802b456 	.word	0x0802b456
 80200e0:	0802b026 	.word	0x0802b026

080200e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80200e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200e8:	ed2d 8b08 	vpush	{d8-d11}
 80200ec:	b09b      	sub	sp, #108	; 0x6c
 80200ee:	eeb0 aa40 	vmov.f32	s20, s0
 80200f2:	eef0 9a60 	vmov.f32	s19, s1
 80200f6:	930a      	str	r3, [sp, #40]	; 0x28
 80200f8:	eeb0 9a41 	vmov.f32	s18, s2
 80200fc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8020100:	eeb0 8a62 	vmov.f32	s16, s5
 8020104:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020106:	eef0 8a43 	vmov.f32	s17, s6
 802010a:	9312      	str	r3, [sp, #72]	; 0x48
 802010c:	eef0 ba44 	vmov.f32	s23, s8
 8020110:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020114:	eeb0 ba64 	vmov.f32	s22, s9
 8020118:	9019      	str	r0, [sp, #100]	; 0x64
 802011a:	eef0 aa45 	vmov.f32	s21, s10
 802011e:	9114      	str	r1, [sp, #80]	; 0x50
 8020120:	9317      	str	r3, [sp, #92]	; 0x5c
 8020122:	6868      	ldr	r0, [r5, #4]
 8020124:	9218      	str	r2, [sp, #96]	; 0x60
 8020126:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020128:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 802012c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020130:	fb00 1303 	mla	r3, r0, r3, r1
 8020134:	6829      	ldr	r1, [r5, #0]
 8020136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802013a:	18cb      	adds	r3, r1, r3
 802013c:	930d      	str	r3, [sp, #52]	; 0x34
 802013e:	6813      	ldr	r3, [r2, #0]
 8020140:	9313      	str	r3, [sp, #76]	; 0x4c
 8020142:	6853      	ldr	r3, [r2, #4]
 8020144:	3304      	adds	r3, #4
 8020146:	9309      	str	r3, [sp, #36]	; 0x24
 8020148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802014a:	2b00      	cmp	r3, #0
 802014c:	dc03      	bgt.n	8020156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802014e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020150:	2b00      	cmp	r3, #0
 8020152:	f340 8352 	ble.w	80207fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020158:	2b00      	cmp	r3, #0
 802015a:	f340 81a2 	ble.w	80204a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802015e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020160:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020162:	1412      	asrs	r2, r2, #16
 8020164:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020168:	d431      	bmi.n	80201ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802016a:	1c51      	adds	r1, r2, #1
 802016c:	428c      	cmp	r4, r1
 802016e:	dd31      	ble.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020170:	2b00      	cmp	r3, #0
 8020172:	db2f      	blt.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020174:	1c59      	adds	r1, r3, #1
 8020176:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020178:	4288      	cmp	r0, r1
 802017a:	dd2b      	ble.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802017c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802017e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020180:	3b01      	subs	r3, #1
 8020182:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020184:	fb02 1203 	mla	r2, r2, r3, r1
 8020188:	1412      	asrs	r2, r2, #16
 802018a:	d42d      	bmi.n	80201e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802018c:	3201      	adds	r2, #1
 802018e:	4294      	cmp	r4, r2
 8020190:	dd2a      	ble.n	80201e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020192:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020194:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020196:	fb02 1303 	mla	r3, r2, r3, r1
 802019a:	141b      	asrs	r3, r3, #16
 802019c:	d424      	bmi.n	80201e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802019e:	3301      	adds	r3, #1
 80201a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201a2:	429a      	cmp	r2, r3
 80201a4:	dd20      	ble.n	80201e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80201a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201a8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80201ac:	f103 0e03 	add.w	lr, r3, #3
 80201b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201b2:	9315      	str	r3, [sp, #84]	; 0x54
 80201b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	f300 81de 	bgt.w	8020578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80201bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80201c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80201c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201c8:	441a      	add	r2, r3
 80201ca:	920d      	str	r2, [sp, #52]	; 0x34
 80201cc:	e16b      	b.n	80204a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80201ce:	1c51      	adds	r1, r2, #1
 80201d0:	f040 8158 	bne.w	8020484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201d4:	42a2      	cmp	r2, r4
 80201d6:	f280 8155 	bge.w	8020484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201da:	1c5a      	adds	r2, r3, #1
 80201dc:	f2c0 8152 	blt.w	8020484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201e2:	4293      	cmp	r3, r2
 80201e4:	f280 814e 	bge.w	8020484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80201ec:	9316      	str	r3, [sp, #88]	; 0x58
 80201ee:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80201f2:	9315      	str	r3, [sp, #84]	; 0x54
 80201f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	dde0      	ble.n	80201bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80201fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80201fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80201fe:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020202:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020204:	141b      	asrs	r3, r3, #16
 8020206:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802020a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802020c:	1412      	asrs	r2, r2, #16
 802020e:	f100 819a 	bmi.w	8020546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8020212:	1c55      	adds	r5, r2, #1
 8020214:	42ac      	cmp	r4, r5
 8020216:	f340 8198 	ble.w	802054a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802021a:	2b00      	cmp	r3, #0
 802021c:	f2c0 8195 	blt.w	802054a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020220:	1c5d      	adds	r5, r3, #1
 8020222:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020224:	42af      	cmp	r7, r5
 8020226:	f340 8190 	ble.w	802054a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802022a:	fb03 2304 	mla	r3, r3, r4, r2
 802022e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020230:	18d5      	adds	r5, r2, r3
 8020232:	5cd3      	ldrb	r3, [r2, r3]
 8020234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802023a:	0e1f      	lsrs	r7, r3, #24
 802023c:	2800      	cmp	r0, #0
 802023e:	f000 8171 	beq.w	8020524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020242:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020246:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802024a:	920e      	str	r2, [sp, #56]	; 0x38
 802024c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020250:	2900      	cmp	r1, #0
 8020252:	f000 8172 	beq.w	802053a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020256:	eb05 0c04 	add.w	ip, r5, r4
 802025a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802025c:	5d2d      	ldrb	r5, [r5, r4]
 802025e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020262:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020266:	950b      	str	r5, [sp, #44]	; 0x2c
 8020268:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802026e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020272:	0e15      	lsrs	r5, r2, #24
 8020274:	920f      	str	r2, [sp, #60]	; 0x3c
 8020276:	b280      	uxth	r0, r0
 8020278:	b289      	uxth	r1, r1
 802027a:	fb00 fa01 	mul.w	sl, r0, r1
 802027e:	0100      	lsls	r0, r0, #4
 8020280:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020284:	eba0 080a 	sub.w	r8, r0, sl
 8020288:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802028c:	b289      	uxth	r1, r1
 802028e:	fa1f f888 	uxth.w	r8, r8
 8020292:	1a52      	subs	r2, r2, r1
 8020294:	fb08 f00e 	mul.w	r0, r8, lr
 8020298:	b292      	uxth	r2, r2
 802029a:	fb02 0007 	mla	r0, r2, r7, r0
 802029e:	fb01 0009 	mla	r0, r1, r9, r0
 80202a2:	fb0a 0005 	mla	r0, sl, r5, r0
 80202a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80202aa:	2800      	cmp	r0, #0
 80202ac:	f000 80dd 	beq.w	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202b0:	2fff      	cmp	r7, #255	; 0xff
 80202b2:	d01a      	beq.n	80202ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80202b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80202b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80202bc:	fb07 fc0c 	mul.w	ip, r7, ip
 80202c0:	435f      	muls	r7, r3
 80202c2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80202c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202ca:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80202ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202d2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80202d6:	4463      	add	r3, ip
 80202d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80202dc:	0a1b      	lsrs	r3, r3, #8
 80202de:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80202e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202e6:	ea43 030b 	orr.w	r3, r3, fp
 80202ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80202ee:	d01e      	beq.n	802032e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80202f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80202f2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80202f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80202fa:	fb0e fb0b 	mul.w	fp, lr, fp
 80202fe:	fb0e fe07 	mul.w	lr, lr, r7
 8020302:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020306:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802030a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802030e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020312:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020316:	44dc      	add	ip, fp
 8020318:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802031c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020320:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020324:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020328:	ea4c 070e 	orr.w	r7, ip, lr
 802032c:	970e      	str	r7, [sp, #56]	; 0x38
 802032e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020332:	d01e      	beq.n	8020372 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020334:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020336:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802033a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802033e:	fb09 fe0e 	mul.w	lr, r9, lr
 8020342:	fb09 f907 	mul.w	r9, r9, r7
 8020346:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802034a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802034e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020352:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020356:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802035a:	44f4      	add	ip, lr
 802035c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020360:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020364:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020368:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802036c:	ea4c 0709 	orr.w	r7, ip, r9
 8020370:	970b      	str	r7, [sp, #44]	; 0x2c
 8020372:	2dff      	cmp	r5, #255	; 0xff
 8020374:	d01c      	beq.n	80203b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020376:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020378:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802037c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020380:	fb05 fe0e 	mul.w	lr, r5, lr
 8020384:	437d      	muls	r5, r7
 8020386:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802038a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802038e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020392:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020396:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802039a:	44f4      	add	ip, lr
 802039c:	0a2d      	lsrs	r5, r5, #8
 802039e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203a2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80203a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203aa:	ea4c 0505 	orr.w	r5, ip, r5
 80203ae:	950f      	str	r5, [sp, #60]	; 0x3c
 80203b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80203b2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80203b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203be:	fb08 f505 	mul.w	r5, r8, r5
 80203c2:	fb02 5507 	mla	r5, r2, r7, r5
 80203c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80203c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203cc:	fb01 5507 	mla	r5, r1, r7, r5
 80203d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80203d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203d6:	fb0a 5507 	mla	r5, sl, r7, r5
 80203da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80203dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80203e0:	0a2d      	lsrs	r5, r5, #8
 80203e2:	fb08 f807 	mul.w	r8, r8, r7
 80203e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203ea:	fb02 8303 	mla	r3, r2, r3, r8
 80203ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203f0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80203f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203f6:	fb01 330c 	mla	r3, r1, ip, r3
 80203fa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80203fe:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020404:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020406:	4343      	muls	r3, r0
 8020408:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802040c:	1c58      	adds	r0, r3, #1
 802040e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020412:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020416:	ea45 050a 	orr.w	r5, r5, sl
 802041a:	7833      	ldrb	r3, [r6, #0]
 802041c:	b2ea      	uxtb	r2, r5
 802041e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020422:	fb12 f201 	smulbb	r2, r2, r1
 8020426:	b2c0      	uxtb	r0, r0
 8020428:	fb03 2300 	mla	r3, r3, r0, r2
 802042c:	b29b      	uxth	r3, r3
 802042e:	1c5a      	adds	r2, r3, #1
 8020430:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020434:	7872      	ldrb	r2, [r6, #1]
 8020436:	fb12 f200 	smulbb	r2, r2, r0
 802043a:	121b      	asrs	r3, r3, #8
 802043c:	7033      	strb	r3, [r6, #0]
 802043e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020442:	0c2d      	lsrs	r5, r5, #16
 8020444:	fb03 2301 	mla	r3, r3, r1, r2
 8020448:	b29b      	uxth	r3, r3
 802044a:	1c5a      	adds	r2, r3, #1
 802044c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020450:	121b      	asrs	r3, r3, #8
 8020452:	7073      	strb	r3, [r6, #1]
 8020454:	78b3      	ldrb	r3, [r6, #2]
 8020456:	fb13 f000 	smulbb	r0, r3, r0
 802045a:	fb05 0501 	mla	r5, r5, r1, r0
 802045e:	b2ad      	uxth	r5, r5
 8020460:	1c6b      	adds	r3, r5, #1
 8020462:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020466:	122d      	asrs	r5, r5, #8
 8020468:	70b5      	strb	r5, [r6, #2]
 802046a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802046c:	3603      	adds	r6, #3
 802046e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020470:	4413      	add	r3, r2
 8020472:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020474:	932d      	str	r3, [sp, #180]	; 0xb4
 8020476:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020478:	4413      	add	r3, r2
 802047a:	932e      	str	r3, [sp, #184]	; 0xb8
 802047c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802047e:	3b01      	subs	r3, #1
 8020480:	9316      	str	r3, [sp, #88]	; 0x58
 8020482:	e6b7      	b.n	80201f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020484:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020486:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020488:	4413      	add	r3, r2
 802048a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802048c:	932d      	str	r3, [sp, #180]	; 0xb4
 802048e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020490:	4413      	add	r3, r2
 8020492:	932e      	str	r3, [sp, #184]	; 0xb8
 8020494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020496:	3b01      	subs	r3, #1
 8020498:	930a      	str	r3, [sp, #40]	; 0x28
 802049a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802049c:	3303      	adds	r3, #3
 802049e:	930d      	str	r3, [sp, #52]	; 0x34
 80204a0:	e659      	b.n	8020156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80204a2:	f47f ae6b 	bne.w	802017c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80204a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	f340 81a6 	ble.w	80207fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80204ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80204b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80204b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204bc:	eef0 6a48 	vmov.f32	s13, s16
 80204c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204c4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204cc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80204d0:	eef0 6a68 	vmov.f32	s13, s17
 80204d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204d8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80204dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204f4:	ee18 2a10 	vmov	r2, s16
 80204f8:	eeb0 8a47 	vmov.f32	s16, s14
 80204fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020500:	ee18 2a90 	vmov	r2, s17
 8020504:	932f      	str	r3, [sp, #188]	; 0xbc
 8020506:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020508:	eef0 8a67 	vmov.f32	s17, s15
 802050c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020510:	9330      	str	r3, [sp, #192]	; 0xc0
 8020512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020514:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020516:	3b01      	subs	r3, #1
 8020518:	9314      	str	r3, [sp, #80]	; 0x50
 802051a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802051c:	bf08      	it	eq
 802051e:	4613      	moveq	r3, r2
 8020520:	930a      	str	r3, [sp, #40]	; 0x28
 8020522:	e611      	b.n	8020148 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020524:	b161      	cbz	r1, 8020540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020526:	5d2a      	ldrb	r2, [r5, r4]
 8020528:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802052a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802052e:	25ff      	movs	r5, #255	; 0xff
 8020530:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020534:	920b      	str	r2, [sp, #44]	; 0x2c
 8020536:	46ae      	mov	lr, r5
 8020538:	e69d      	b.n	8020276 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802053a:	25ff      	movs	r5, #255	; 0xff
 802053c:	46a9      	mov	r9, r5
 802053e:	e69a      	b.n	8020276 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020540:	25ff      	movs	r5, #255	; 0xff
 8020542:	46a9      	mov	r9, r5
 8020544:	e7f7      	b.n	8020536 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020546:	1c57      	adds	r7, r2, #1
 8020548:	d18f      	bne.n	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802054a:	4294      	cmp	r4, r2
 802054c:	dd8d      	ble.n	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802054e:	1c5d      	adds	r5, r3, #1
 8020550:	db8b      	blt.n	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020552:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020554:	429d      	cmp	r5, r3
 8020556:	dd88      	ble.n	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020558:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802055a:	9202      	str	r2, [sp, #8]
 802055c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802055e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020564:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020566:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802056a:	e9cd 4300 	strd	r4, r3, [sp]
 802056e:	4631      	mov	r1, r6
 8020570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020572:	f7ff fc63 	bl	801fe3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020576:	e778      	b.n	802046a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020578:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802057a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802057c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020580:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020582:	1412      	asrs	r2, r2, #16
 8020584:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020588:	141b      	asrs	r3, r3, #16
 802058a:	fb04 2303 	mla	r3, r4, r3, r2
 802058e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020590:	18d5      	adds	r5, r2, r3
 8020592:	5cd3      	ldrb	r3, [r2, r3]
 8020594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802059a:	0e1e      	lsrs	r6, r3, #24
 802059c:	2900      	cmp	r1, #0
 802059e:	f000 811b 	beq.w	80207d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80205a2:	786a      	ldrb	r2, [r5, #1]
 80205a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80205a6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80205aa:	9210      	str	r2, [sp, #64]	; 0x40
 80205ac:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80205b0:	2800      	cmp	r0, #0
 80205b2:	f000 811c 	beq.w	80207ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80205b6:	192a      	adds	r2, r5, r4
 80205b8:	5d2d      	ldrb	r5, [r5, r4]
 80205ba:	7852      	ldrb	r2, [r2, #1]
 80205bc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80205c0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80205c4:	950c      	str	r5, [sp, #48]	; 0x30
 80205c6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80205ca:	0e15      	lsrs	r5, r2, #24
 80205cc:	9211      	str	r2, [sp, #68]	; 0x44
 80205ce:	b289      	uxth	r1, r1
 80205d0:	b280      	uxth	r0, r0
 80205d2:	fb01 fa00 	mul.w	sl, r1, r0
 80205d6:	0109      	lsls	r1, r1, #4
 80205d8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80205dc:	eba1 080a 	sub.w	r8, r1, sl
 80205e0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80205e4:	b280      	uxth	r0, r0
 80205e6:	fa1f f888 	uxth.w	r8, r8
 80205ea:	1a12      	subs	r2, r2, r0
 80205ec:	fb08 f10c 	mul.w	r1, r8, ip
 80205f0:	b292      	uxth	r2, r2
 80205f2:	fb02 1106 	mla	r1, r2, r6, r1
 80205f6:	fb00 1109 	mla	r1, r0, r9, r1
 80205fa:	fb0a 1105 	mla	r1, sl, r5, r1
 80205fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020602:	2900      	cmp	r1, #0
 8020604:	f000 80da 	beq.w	80207bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020608:	2eff      	cmp	r6, #255	; 0xff
 802060a:	d016      	beq.n	802063a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802060c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020614:	4377      	muls	r7, r6
 8020616:	435e      	muls	r6, r3
 8020618:	0a3b      	lsrs	r3, r7, #8
 802061a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802061e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020622:	443b      	add	r3, r7
 8020624:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020628:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802062c:	0a1b      	lsrs	r3, r3, #8
 802062e:	0a3f      	lsrs	r7, r7, #8
 8020630:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020634:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020638:	433b      	orrs	r3, r7
 802063a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802063e:	d01d      	beq.n	802067c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020640:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020642:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020644:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020648:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802064c:	fb0c f606 	mul.w	r6, ip, r6
 8020650:	fb0c fc07 	mul.w	ip, ip, r7
 8020654:	0a37      	lsrs	r7, r6, #8
 8020656:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802065a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802065e:	4437      	add	r7, r6
 8020660:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020664:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020668:	0a3f      	lsrs	r7, r7, #8
 802066a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802066e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020672:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020676:	ea47 060c 	orr.w	r6, r7, ip
 802067a:	9610      	str	r6, [sp, #64]	; 0x40
 802067c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020680:	d01d      	beq.n	80206be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020684:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020688:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802068c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020690:	fb09 f906 	mul.w	r9, r9, r6
 8020694:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020698:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802069c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80206a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206a4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80206a8:	4467      	add	r7, ip
 80206aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80206ae:	0a3f      	lsrs	r7, r7, #8
 80206b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80206b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206b8:	ea47 0609 	orr.w	r6, r7, r9
 80206bc:	960c      	str	r6, [sp, #48]	; 0x30
 80206be:	2dff      	cmp	r5, #255	; 0xff
 80206c0:	d01a      	beq.n	80206f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80206c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80206c4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80206c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206cc:	fb05 fc0c 	mul.w	ip, r5, ip
 80206d0:	4375      	muls	r5, r6
 80206d2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80206d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206da:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80206de:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206e2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80206e6:	4467      	add	r7, ip
 80206e8:	0a2d      	lsrs	r5, r5, #8
 80206ea:	0a3f      	lsrs	r7, r7, #8
 80206ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80206f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206f4:	433d      	orrs	r5, r7
 80206f6:	9511      	str	r5, [sp, #68]	; 0x44
 80206f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80206fa:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80206fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020702:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020706:	fb08 f505 	mul.w	r5, r8, r5
 802070a:	fb02 5506 	mla	r5, r2, r6, r5
 802070e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020710:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020714:	fb00 5506 	mla	r5, r0, r6, r5
 8020718:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802071a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802071e:	fb0a 5506 	mla	r5, sl, r6, r5
 8020722:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020724:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020728:	0a2d      	lsrs	r5, r5, #8
 802072a:	fb08 f806 	mul.w	r8, r8, r6
 802072e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020732:	fb02 8303 	mla	r3, r2, r3, r8
 8020736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020738:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802073c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802073e:	fb00 3307 	mla	r3, r0, r7, r3
 8020742:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020746:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802074a:	fb01 f30b 	mul.w	r3, r1, fp
 802074e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020752:	1c59      	adds	r1, r3, #1
 8020754:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020758:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802075c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020760:	ea45 050c 	orr.w	r5, r5, ip
 8020764:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020768:	b2ea      	uxtb	r2, r5
 802076a:	b2c9      	uxtb	r1, r1
 802076c:	fb12 f20b 	smulbb	r2, r2, fp
 8020770:	fb03 2301 	mla	r3, r3, r1, r2
 8020774:	b29b      	uxth	r3, r3
 8020776:	1c5a      	adds	r2, r3, #1
 8020778:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802077c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020780:	fb12 f201 	smulbb	r2, r2, r1
 8020784:	121b      	asrs	r3, r3, #8
 8020786:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802078a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802078e:	0c2d      	lsrs	r5, r5, #16
 8020790:	fb03 230b 	mla	r3, r3, fp, r2
 8020794:	b29b      	uxth	r3, r3
 8020796:	1c5a      	adds	r2, r3, #1
 8020798:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802079c:	121b      	asrs	r3, r3, #8
 802079e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80207a2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80207a6:	fb13 f101 	smulbb	r1, r3, r1
 80207aa:	fb05 150b 	mla	r5, r5, fp, r1
 80207ae:	b2ad      	uxth	r5, r5
 80207b0:	1c69      	adds	r1, r5, #1
 80207b2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80207b6:	122d      	asrs	r5, r5, #8
 80207b8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80207bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80207be:	f10e 0e03 	add.w	lr, lr, #3
 80207c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80207c4:	4413      	add	r3, r2
 80207c6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80207c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80207ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80207cc:	4413      	add	r3, r2
 80207ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80207d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80207d2:	3b01      	subs	r3, #1
 80207d4:	9315      	str	r3, [sp, #84]	; 0x54
 80207d6:	e4ed      	b.n	80201b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80207d8:	b160      	cbz	r0, 80207f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80207da:	5d2a      	ldrb	r2, [r5, r4]
 80207dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80207de:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80207e2:	25ff      	movs	r5, #255	; 0xff
 80207e4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80207e8:	920c      	str	r2, [sp, #48]	; 0x30
 80207ea:	46ac      	mov	ip, r5
 80207ec:	e6ef      	b.n	80205ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80207ee:	25ff      	movs	r5, #255	; 0xff
 80207f0:	46a9      	mov	r9, r5
 80207f2:	e6ec      	b.n	80205ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80207f4:	25ff      	movs	r5, #255	; 0xff
 80207f6:	46a9      	mov	r9, r5
 80207f8:	e7f7      	b.n	80207ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80207fa:	b01b      	add	sp, #108	; 0x6c
 80207fc:	ecbd 8b08 	vpop	{d8-d11}
 8020800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020808:	b085      	sub	sp, #20
 802080a:	7888      	ldrb	r0, [r1, #2]
 802080c:	4692      	mov	sl, r2
 802080e:	4698      	mov	r8, r3
 8020810:	9000      	str	r0, [sp, #0]
 8020812:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020816:	7848      	ldrb	r0, [r1, #1]
 8020818:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802081c:	9001      	str	r0, [sp, #4]
 802081e:	7808      	ldrb	r0, [r1, #0]
 8020820:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020824:	9002      	str	r0, [sp, #8]
 8020826:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802082a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802082e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020832:	fb04 560c 	mla	r6, r4, ip, r5
 8020836:	2c00      	cmp	r4, #0
 8020838:	eb02 0e06 	add.w	lr, r2, r6
 802083c:	9a00      	ldr	r2, [sp, #0]
 802083e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020842:	9a01      	ldr	r2, [sp, #4]
 8020844:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020848:	db3e      	blt.n	80208c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802084a:	45a1      	cmp	r9, r4
 802084c:	dd3c      	ble.n	80208c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802084e:	2d00      	cmp	r5, #0
 8020850:	db38      	blt.n	80208c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020852:	45ac      	cmp	ip, r5
 8020854:	dd36      	ble.n	80208c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020856:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802085a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802085e:	1c6e      	adds	r6, r5, #1
 8020860:	d435      	bmi.n	80208ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020862:	45b4      	cmp	ip, r6
 8020864:	dd33      	ble.n	80208ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020866:	b393      	cbz	r3, 80208ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020868:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802086c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020870:	3401      	adds	r4, #1
 8020872:	d430      	bmi.n	80208d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020874:	45a1      	cmp	r9, r4
 8020876:	dd2e      	ble.n	80208d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020878:	b36f      	cbz	r7, 80208d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802087a:	2d00      	cmp	r5, #0
 802087c:	db29      	blt.n	80208d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802087e:	45ac      	cmp	ip, r5
 8020880:	dd27      	ble.n	80208d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020882:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020886:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802088a:	3501      	adds	r5, #1
 802088c:	d407      	bmi.n	802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802088e:	45ac      	cmp	ip, r5
 8020890:	dd05      	ble.n	802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020892:	b123      	cbz	r3, 802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020894:	44f4      	add	ip, lr
 8020896:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802089a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802089e:	2b0f      	cmp	r3, #15
 80208a0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80208a4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80208a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80208ac:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80208b0:	d801      	bhi.n	80208b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80208b2:	2f0f      	cmp	r7, #15
 80208b4:	d911      	bls.n	80208da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80208b6:	4b76      	ldr	r3, [pc, #472]	; (8020a90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80208b8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80208bc:	4a75      	ldr	r2, [pc, #468]	; (8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80208be:	4876      	ldr	r0, [pc, #472]	; (8020a98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80208c0:	f004 ff94 	bl	80257ec <__assert_func>
 80208c4:	4602      	mov	r2, r0
 80208c6:	e7ca      	b.n	802085e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80208c8:	4606      	mov	r6, r0
 80208ca:	4602      	mov	r2, r0
 80208cc:	e7d0      	b.n	8020870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80208ce:	4606      	mov	r6, r0
 80208d0:	e7ce      	b.n	8020870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80208d2:	4604      	mov	r4, r0
 80208d4:	e7d9      	b.n	802088a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80208d6:	4604      	mov	r4, r0
 80208d8:	e7e1      	b.n	802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208da:	b29b      	uxth	r3, r3
 80208dc:	b2bf      	uxth	r7, r7
 80208de:	fb07 fe03 	mul.w	lr, r7, r3
 80208e2:	011b      	lsls	r3, r3, #4
 80208e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80208e8:	eba3 0c0e 	sub.w	ip, r3, lr
 80208ec:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80208f0:	b2bf      	uxth	r7, r7
 80208f2:	fa1f fc8c 	uxth.w	ip, ip
 80208f6:	1bed      	subs	r5, r5, r7
 80208f8:	fb0c f30a 	mul.w	r3, ip, sl
 80208fc:	b2ad      	uxth	r5, r5
 80208fe:	fb05 330b 	mla	r3, r5, fp, r3
 8020902:	fb07 3309 	mla	r3, r7, r9, r3
 8020906:	fb0e 3308 	mla	r3, lr, r8, r3
 802090a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802090e:	9303      	str	r3, [sp, #12]
 8020910:	2b00      	cmp	r3, #0
 8020912:	f000 80b9 	beq.w	8020a88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020916:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802091a:	d018      	beq.n	802094e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802091c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020920:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020924:	fb0b f303 	mul.w	r3, fp, r3
 8020928:	fb0b fb02 	mul.w	fp, fp, r2
 802092c:	0a1a      	lsrs	r2, r3, #8
 802092e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020932:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020936:	441a      	add	r2, r3
 8020938:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802093c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020940:	0a12      	lsrs	r2, r2, #8
 8020942:	0a1b      	lsrs	r3, r3, #8
 8020944:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802094c:	431a      	orrs	r2, r3
 802094e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020952:	d019      	beq.n	8020988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020954:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020958:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802095c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020960:	fb0a fa06 	mul.w	sl, sl, r6
 8020964:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020968:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802096c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020970:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020974:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020978:	445e      	add	r6, fp
 802097a:	0a1b      	lsrs	r3, r3, #8
 802097c:	0a36      	lsrs	r6, r6, #8
 802097e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020982:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020986:	431e      	orrs	r6, r3
 8020988:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802098c:	d019      	beq.n	80209c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802098e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020992:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020996:	fb09 fa0a 	mul.w	sl, r9, sl
 802099a:	fb09 f904 	mul.w	r9, r9, r4
 802099e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80209a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80209a6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80209aa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80209ae:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80209b2:	4454      	add	r4, sl
 80209b4:	0a1b      	lsrs	r3, r3, #8
 80209b6:	0a24      	lsrs	r4, r4, #8
 80209b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80209c0:	431c      	orrs	r4, r3
 80209c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80209c6:	d019      	beq.n	80209fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80209c8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80209cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80209d0:	fb08 f909 	mul.w	r9, r8, r9
 80209d4:	fb08 f800 	mul.w	r8, r8, r0
 80209d8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80209dc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80209e0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80209e4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80209e8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80209ec:	4448      	add	r0, r9
 80209ee:	0a1b      	lsrs	r3, r3, #8
 80209f0:	0a00      	lsrs	r0, r0, #8
 80209f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209f6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80209fa:	4318      	orrs	r0, r3
 80209fc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020a00:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020a04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020a08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020a0c:	fb0c f808 	mul.w	r8, ip, r8
 8020a10:	fb0c f606 	mul.w	r6, ip, r6
 8020a14:	fb05 8803 	mla	r8, r5, r3, r8
 8020a18:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020a1c:	fb05 6202 	mla	r2, r5, r2, r6
 8020a20:	fb07 8803 	mla	r8, r7, r3, r8
 8020a24:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020a28:	fb0e 8303 	mla	r3, lr, r3, r8
 8020a2c:	0a1b      	lsrs	r3, r3, #8
 8020a2e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020a32:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020a36:	9c02      	ldr	r4, [sp, #8]
 8020a38:	fb07 2703 	mla	r7, r7, r3, r2
 8020a3c:	9a03      	ldr	r2, [sp, #12]
 8020a3e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020a42:	43d2      	mvns	r2, r2
 8020a44:	fb0e 7303 	mla	r3, lr, r3, r7
 8020a48:	b2d2      	uxtb	r2, r2
 8020a4a:	0a1b      	lsrs	r3, r3, #8
 8020a4c:	4354      	muls	r4, r2
 8020a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a52:	1c60      	adds	r0, r4, #1
 8020a54:	ea48 0303 	orr.w	r3, r8, r3
 8020a58:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a5c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020a60:	7008      	strb	r0, [r1, #0]
 8020a62:	9801      	ldr	r0, [sp, #4]
 8020a64:	4350      	muls	r0, r2
 8020a66:	1c44      	adds	r4, r0, #1
 8020a68:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020a6c:	0a18      	lsrs	r0, r3, #8
 8020a6e:	0c1b      	lsrs	r3, r3, #16
 8020a70:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a74:	7048      	strb	r0, [r1, #1]
 8020a76:	9800      	ldr	r0, [sp, #0]
 8020a78:	4350      	muls	r0, r2
 8020a7a:	4602      	mov	r2, r0
 8020a7c:	3001      	adds	r0, #1
 8020a7e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020a82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a86:	708b      	strb	r3, [r1, #2]
 8020a88:	b005      	add	sp, #20
 8020a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a8e:	bf00      	nop
 8020a90:	0802af5d 	.word	0x0802af5d
 8020a94:	0802b456 	.word	0x0802b456
 8020a98:	0802b026 	.word	0x0802b026

08020a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa0:	ed2d 8b08 	vpush	{d8-d11}
 8020aa4:	b097      	sub	sp, #92	; 0x5c
 8020aa6:	eeb0 aa40 	vmov.f32	s20, s0
 8020aaa:	eef0 9a60 	vmov.f32	s19, s1
 8020aae:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020ab0:	eeb0 9a41 	vmov.f32	s18, s2
 8020ab4:	9308      	str	r3, [sp, #32]
 8020ab6:	eeb0 8a62 	vmov.f32	s16, s5
 8020aba:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020abe:	eef0 8a43 	vmov.f32	s17, s6
 8020ac2:	9015      	str	r0, [sp, #84]	; 0x54
 8020ac4:	eef0 ba44 	vmov.f32	s23, s8
 8020ac8:	6868      	ldr	r0, [r5, #4]
 8020aca:	eeb0 ba64 	vmov.f32	s22, s9
 8020ace:	9112      	str	r1, [sp, #72]	; 0x48
 8020ad0:	eef0 aa45 	vmov.f32	s21, s10
 8020ad4:	9310      	str	r3, [sp, #64]	; 0x40
 8020ad6:	9214      	str	r2, [sp, #80]	; 0x50
 8020ad8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020ada:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8020ade:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020ae2:	fb00 1303 	mla	r3, r0, r3, r1
 8020ae6:	6829      	ldr	r1, [r5, #0]
 8020ae8:	6855      	ldr	r5, [r2, #4]
 8020aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020aee:	3504      	adds	r5, #4
 8020af0:	18cb      	adds	r3, r1, r3
 8020af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020af4:	6813      	ldr	r3, [r2, #0]
 8020af6:	9311      	str	r3, [sp, #68]	; 0x44
 8020af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	dc03      	bgt.n	8020b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	f340 8333 	ble.w	802116c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020b06:	9b08      	ldr	r3, [sp, #32]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f340 8190 	ble.w	8020e2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b12:	1412      	asrs	r2, r2, #16
 8020b14:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020b18:	d42f      	bmi.n	8020b7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020b1a:	1c51      	adds	r1, r2, #1
 8020b1c:	428c      	cmp	r4, r1
 8020b1e:	dd2f      	ble.n	8020b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	db2d      	blt.n	8020b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b24:	1c59      	adds	r1, r3, #1
 8020b26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020b28:	4288      	cmp	r0, r1
 8020b2a:	dd29      	ble.n	8020b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b2c:	9b08      	ldr	r3, [sp, #32]
 8020b2e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b30:	3b01      	subs	r3, #1
 8020b32:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020b34:	fb02 1203 	mla	r2, r2, r3, r1
 8020b38:	1412      	asrs	r2, r2, #16
 8020b3a:	d42b      	bmi.n	8020b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b3c:	3201      	adds	r2, #1
 8020b3e:	4294      	cmp	r4, r2
 8020b40:	dd28      	ble.n	8020b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020b46:	fb02 1303 	mla	r3, r2, r3, r1
 8020b4a:	141b      	asrs	r3, r3, #16
 8020b4c:	d422      	bmi.n	8020b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b4e:	3301      	adds	r3, #1
 8020b50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b52:	429a      	cmp	r2, r3
 8020b54:	dd1e      	ble.n	8020b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b58:	f103 0803 	add.w	r8, r3, #3
 8020b5c:	9b08      	ldr	r3, [sp, #32]
 8020b5e:	9307      	str	r3, [sp, #28]
 8020b60:	9b07      	ldr	r3, [sp, #28]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	f300 81ca 	bgt.w	8020efc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020b68:	9b08      	ldr	r3, [sp, #32]
 8020b6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b74:	441a      	add	r2, r3
 8020b76:	920b      	str	r2, [sp, #44]	; 0x2c
 8020b78:	e15b      	b.n	8020e32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020b7a:	1c51      	adds	r1, r2, #1
 8020b7c:	f040 8148 	bne.w	8020e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b80:	42a2      	cmp	r2, r4
 8020b82:	f280 8145 	bge.w	8020e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b86:	1c5a      	adds	r2, r3, #1
 8020b88:	f2c0 8142 	blt.w	8020e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b8e:	4293      	cmp	r3, r2
 8020b90:	f280 813e 	bge.w	8020e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b94:	9b08      	ldr	r3, [sp, #32]
 8020b96:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b9a:	9307      	str	r3, [sp, #28]
 8020b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	dde2      	ble.n	8020b68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020ba2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020ba4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ba6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020baa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020bac:	141b      	asrs	r3, r3, #16
 8020bae:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020bb2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020bb4:	1412      	asrs	r2, r2, #16
 8020bb6:	f100 818b 	bmi.w	8020ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020bba:	1c56      	adds	r6, r2, #1
 8020bbc:	42b4      	cmp	r4, r6
 8020bbe:	f340 8189 	ble.w	8020ed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	f2c0 8186 	blt.w	8020ed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020bc8:	1c5e      	adds	r6, r3, #1
 8020bca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020bcc:	42b7      	cmp	r7, r6
 8020bce:	f340 8181 	ble.w	8020ed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020bd2:	fb03 2304 	mla	r3, r3, r4, r2
 8020bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020bd8:	18d6      	adds	r6, r2, r3
 8020bda:	5cd3      	ldrb	r3, [r2, r3]
 8020bdc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020be0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020be4:	2900      	cmp	r1, #0
 8020be6:	f000 8163 	beq.w	8020eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020bea:	7872      	ldrb	r2, [r6, #1]
 8020bec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020bf0:	920c      	str	r2, [sp, #48]	; 0x30
 8020bf2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020bf6:	2800      	cmp	r0, #0
 8020bf8:	f000 8164 	beq.w	8020ec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020bfc:	1932      	adds	r2, r6, r4
 8020bfe:	5d36      	ldrb	r6, [r6, r4]
 8020c00:	7852      	ldrb	r2, [r2, #1]
 8020c02:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020c06:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020c0a:	9609      	str	r6, [sp, #36]	; 0x24
 8020c0c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020c10:	0e16      	lsrs	r6, r2, #24
 8020c12:	920d      	str	r2, [sp, #52]	; 0x34
 8020c14:	b289      	uxth	r1, r1
 8020c16:	b280      	uxth	r0, r0
 8020c18:	fb01 fb00 	mul.w	fp, r1, r0
 8020c1c:	0109      	lsls	r1, r1, #4
 8020c1e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020c22:	eba1 090b 	sub.w	r9, r1, fp
 8020c26:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020c2a:	b280      	uxth	r0, r0
 8020c2c:	fa1f f989 	uxth.w	r9, r9
 8020c30:	1a12      	subs	r2, r2, r0
 8020c32:	fb09 f108 	mul.w	r1, r9, r8
 8020c36:	b292      	uxth	r2, r2
 8020c38:	fb02 110c 	mla	r1, r2, ip, r1
 8020c3c:	fb00 110a 	mla	r1, r0, sl, r1
 8020c40:	fb0b 1106 	mla	r1, fp, r6, r1
 8020c44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c48:	2900      	cmp	r1, #0
 8020c4a:	f000 80d2 	beq.w	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c4e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020c52:	d01b      	beq.n	8020c8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c54:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020c58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c5c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020c60:	fb0c fc03 	mul.w	ip, ip, r3
 8020c64:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020c68:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c70:	4473      	add	r3, lr
 8020c72:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020c76:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020c7a:	0a1b      	lsrs	r3, r3, #8
 8020c7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c88:	ea43 030e 	orr.w	r3, r3, lr
 8020c8c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c90:	d01e      	beq.n	8020cd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020c92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020c94:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c98:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020c9c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020ca0:	fb08 f80e 	mul.w	r8, r8, lr
 8020ca4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020ca8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020cac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cb0:	44e6      	add	lr, ip
 8020cb2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020cb6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020cba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cbe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020cc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cc6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020cca:	ea4e 0708 	orr.w	r7, lr, r8
 8020cce:	970c      	str	r7, [sp, #48]	; 0x30
 8020cd0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020cd4:	d01e      	beq.n	8020d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020cd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020cd8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020cdc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020ce0:	fb0a f808 	mul.w	r8, sl, r8
 8020ce4:	fb0a fa0c 	mul.w	sl, sl, ip
 8020ce8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020cec:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020cf0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020cf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cf8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020cfc:	44c6      	add	lr, r8
 8020cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d0e:	ea4e 070a 	orr.w	r7, lr, sl
 8020d12:	9709      	str	r7, [sp, #36]	; 0x24
 8020d14:	2eff      	cmp	r6, #255	; 0xff
 8020d16:	d01d      	beq.n	8020d54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020d18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020d1a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020d1e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020d22:	fb06 f808 	mul.w	r8, r6, r8
 8020d26:	fb06 f60c 	mul.w	r6, r6, ip
 8020d2a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020d2e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020d32:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020d36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d3a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020d3e:	44c6      	add	lr, r8
 8020d40:	0a36      	lsrs	r6, r6, #8
 8020d42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d46:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d4e:	ea4e 0606 	orr.w	r6, lr, r6
 8020d52:	960d      	str	r6, [sp, #52]	; 0x34
 8020d54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020d56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020d5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d60:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020d64:	43c9      	mvns	r1, r1
 8020d66:	fb09 f606 	mul.w	r6, r9, r6
 8020d6a:	b2c9      	uxtb	r1, r1
 8020d6c:	fb02 660c 	mla	r6, r2, ip, r6
 8020d70:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020d76:	fb00 660c 	mla	r6, r0, ip, r6
 8020d7a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020d80:	fb0b 660c 	mla	r6, fp, ip, r6
 8020d84:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020d88:	fb09 f90c 	mul.w	r9, r9, ip
 8020d8c:	0a36      	lsrs	r6, r6, #8
 8020d8e:	fb02 9303 	mla	r3, r2, r3, r9
 8020d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d94:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020d98:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020d9e:	fb00 330e 	mla	r3, r0, lr, r3
 8020da2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020da6:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020daa:	9b07      	ldr	r3, [sp, #28]
 8020dac:	781b      	ldrb	r3, [r3, #0]
 8020dae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020db2:	fb03 f201 	mul.w	r2, r3, r1
 8020db6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020dba:	1c53      	adds	r3, r2, #1
 8020dbc:	ea46 060b 	orr.w	r6, r6, fp
 8020dc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020dc4:	9a07      	ldr	r2, [sp, #28]
 8020dc6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020dca:	7013      	strb	r3, [r2, #0]
 8020dcc:	7853      	ldrb	r3, [r2, #1]
 8020dce:	434b      	muls	r3, r1
 8020dd0:	1c5a      	adds	r2, r3, #1
 8020dd2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020dd6:	0a33      	lsrs	r3, r6, #8
 8020dd8:	0c36      	lsrs	r6, r6, #16
 8020dda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020dde:	9a07      	ldr	r2, [sp, #28]
 8020de0:	7053      	strb	r3, [r2, #1]
 8020de2:	7893      	ldrb	r3, [r2, #2]
 8020de4:	4359      	muls	r1, r3
 8020de6:	1c4b      	adds	r3, r1, #1
 8020de8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020dec:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020df0:	7096      	strb	r6, [r2, #2]
 8020df2:	9b07      	ldr	r3, [sp, #28]
 8020df4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020df6:	3303      	adds	r3, #3
 8020df8:	9307      	str	r3, [sp, #28]
 8020dfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020dfc:	4413      	add	r3, r2
 8020dfe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020e00:	9329      	str	r3, [sp, #164]	; 0xa4
 8020e02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e04:	4413      	add	r3, r2
 8020e06:	932a      	str	r3, [sp, #168]	; 0xa8
 8020e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e0a:	3b01      	subs	r3, #1
 8020e0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e0e:	e6c5      	b.n	8020b9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020e10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e12:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e14:	4413      	add	r3, r2
 8020e16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020e18:	9329      	str	r3, [sp, #164]	; 0xa4
 8020e1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e1c:	4413      	add	r3, r2
 8020e1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020e20:	9b08      	ldr	r3, [sp, #32]
 8020e22:	3b01      	subs	r3, #1
 8020e24:	9308      	str	r3, [sp, #32]
 8020e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e28:	3303      	adds	r3, #3
 8020e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e2c:	e66b      	b.n	8020b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020e2e:	f47f ae7d 	bne.w	8020b2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	f340 8199 	ble.w	802116c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e40:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020e44:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e48:	eef0 6a48 	vmov.f32	s13, s16
 8020e4c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e50:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e58:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020e5c:	eef0 6a68 	vmov.f32	s13, s17
 8020e60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e64:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020e68:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e6c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e70:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e74:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e7c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e80:	ee18 2a10 	vmov	r2, s16
 8020e84:	eeb0 8a47 	vmov.f32	s16, s14
 8020e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e8c:	ee18 2a90 	vmov	r2, s17
 8020e90:	932b      	str	r3, [sp, #172]	; 0xac
 8020e92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e94:	eef0 8a67 	vmov.f32	s17, s15
 8020e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e9c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ea2:	3b01      	subs	r3, #1
 8020ea4:	9312      	str	r3, [sp, #72]	; 0x48
 8020ea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ea8:	bf08      	it	eq
 8020eaa:	4613      	moveq	r3, r2
 8020eac:	9308      	str	r3, [sp, #32]
 8020eae:	e623      	b.n	8020af8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020eb0:	b158      	cbz	r0, 8020eca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020eb2:	5d32      	ldrb	r2, [r6, r4]
 8020eb4:	26ff      	movs	r6, #255	; 0xff
 8020eb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020eba:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8020ec0:	46b0      	mov	r8, r6
 8020ec2:	e6a7      	b.n	8020c14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020ec4:	26ff      	movs	r6, #255	; 0xff
 8020ec6:	46b2      	mov	sl, r6
 8020ec8:	e6a4      	b.n	8020c14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020eca:	26ff      	movs	r6, #255	; 0xff
 8020ecc:	46b2      	mov	sl, r6
 8020ece:	e7f7      	b.n	8020ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020ed0:	1c57      	adds	r7, r2, #1
 8020ed2:	d18e      	bne.n	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ed4:	4294      	cmp	r4, r2
 8020ed6:	dd8c      	ble.n	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ed8:	1c5e      	adds	r6, r3, #1
 8020eda:	db8a      	blt.n	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020edc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020ede:	429e      	cmp	r6, r3
 8020ee0:	dd87      	ble.n	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ee2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020eea:	e9cd 4600 	strd	r4, r6, [sp]
 8020eee:	462b      	mov	r3, r5
 8020ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ef2:	9907      	ldr	r1, [sp, #28]
 8020ef4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020ef6:	f7ff fc85 	bl	8020804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020efa:	e77a      	b.n	8020df2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020efc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020efe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020f00:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020f04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f06:	1409      	asrs	r1, r1, #16
 8020f08:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020f0c:	141b      	asrs	r3, r3, #16
 8020f0e:	fb04 1303 	mla	r3, r4, r3, r1
 8020f12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020f14:	18ce      	adds	r6, r1, r3
 8020f16:	5ccb      	ldrb	r3, [r1, r3]
 8020f18:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020f1c:	0e1f      	lsrs	r7, r3, #24
 8020f1e:	2a00      	cmp	r2, #0
 8020f20:	f000 8114 	beq.w	802114c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020f24:	7871      	ldrb	r1, [r6, #1]
 8020f26:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020f2a:	910e      	str	r1, [sp, #56]	; 0x38
 8020f2c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020f30:	2800      	cmp	r0, #0
 8020f32:	f000 8115 	beq.w	8021160 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020f36:	1931      	adds	r1, r6, r4
 8020f38:	5d36      	ldrb	r6, [r6, r4]
 8020f3a:	7849      	ldrb	r1, [r1, #1]
 8020f3c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020f40:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020f44:	960a      	str	r6, [sp, #40]	; 0x28
 8020f46:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020f4a:	0e0e      	lsrs	r6, r1, #24
 8020f4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8020f4e:	b292      	uxth	r2, r2
 8020f50:	b280      	uxth	r0, r0
 8020f52:	fb02 fb00 	mul.w	fp, r2, r0
 8020f56:	0112      	lsls	r2, r2, #4
 8020f58:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020f5c:	eba2 090b 	sub.w	r9, r2, fp
 8020f60:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020f64:	b280      	uxth	r0, r0
 8020f66:	fa1f f989 	uxth.w	r9, r9
 8020f6a:	1a09      	subs	r1, r1, r0
 8020f6c:	fb09 f20e 	mul.w	r2, r9, lr
 8020f70:	b289      	uxth	r1, r1
 8020f72:	fb01 2207 	mla	r2, r1, r7, r2
 8020f76:	fb00 220a 	mla	r2, r0, sl, r2
 8020f7a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020f7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020f82:	9213      	str	r2, [sp, #76]	; 0x4c
 8020f84:	2a00      	cmp	r2, #0
 8020f86:	f000 80d4 	beq.w	8021132 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020f8a:	2fff      	cmp	r7, #255	; 0xff
 8020f8c:	d01a      	beq.n	8020fc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020f8e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020f92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f96:	fb07 fc0c 	mul.w	ip, r7, ip
 8020f9a:	435f      	muls	r7, r3
 8020f9c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020fa0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fa8:	4463      	add	r3, ip
 8020faa:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020fae:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020fb2:	0a1b      	lsrs	r3, r3, #8
 8020fb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fbc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fc0:	ea43 030c 	orr.w	r3, r3, ip
 8020fc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020fc8:	d01f      	beq.n	802100a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020fca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020fcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020fce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fd2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020fd6:	fb0e f707 	mul.w	r7, lr, r7
 8020fda:	fb0e fe0c 	mul.w	lr, lr, ip
 8020fde:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020fe2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020fe6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fea:	44bc      	add	ip, r7
 8020fec:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020ff0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020ff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ff8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021000:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021004:	ea4c 020e 	orr.w	r2, ip, lr
 8021008:	920e      	str	r2, [sp, #56]	; 0x38
 802100a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802100e:	d01e      	beq.n	802104e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8021010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021012:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021016:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802101a:	fb0a fe0e 	mul.w	lr, sl, lr
 802101e:	fb0a fa07 	mul.w	sl, sl, r7
 8021022:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021026:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802102a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802102e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021032:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021036:	44f4      	add	ip, lr
 8021038:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802103c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021040:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021048:	ea4c 020a 	orr.w	r2, ip, sl
 802104c:	920a      	str	r2, [sp, #40]	; 0x28
 802104e:	2eff      	cmp	r6, #255	; 0xff
 8021050:	d01c      	beq.n	802108c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8021052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021054:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021058:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802105c:	fb06 fe0e 	mul.w	lr, r6, lr
 8021060:	437e      	muls	r6, r7
 8021062:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021066:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802106a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802106e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021072:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021076:	44f4      	add	ip, lr
 8021078:	0a36      	lsrs	r6, r6, #8
 802107a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802107e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021086:	ea4c 0206 	orr.w	r2, ip, r6
 802108a:	920f      	str	r2, [sp, #60]	; 0x3c
 802108c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802108e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021092:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021096:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802109a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802109c:	fb09 f606 	mul.w	r6, r9, r6
 80210a0:	fb01 6607 	mla	r6, r1, r7, r6
 80210a4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80210a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210aa:	fb00 6607 	mla	r6, r0, r7, r6
 80210ae:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80210b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80210b4:	fb0b 6607 	mla	r6, fp, r7, r6
 80210b8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80210bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210be:	fb09 f907 	mul.w	r9, r9, r7
 80210c2:	0a36      	lsrs	r6, r6, #8
 80210c4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80210c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210ca:	fb01 9303 	mla	r3, r1, r3, r9
 80210ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80210d2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80210d6:	fb00 330c 	mla	r3, r0, ip, r3
 80210da:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80210de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210e0:	43da      	mvns	r2, r3
 80210e2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80210e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210ea:	b2d2      	uxtb	r2, r2
 80210ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80210f0:	fb03 f102 	mul.w	r1, r3, r2
 80210f4:	ea46 060e 	orr.w	r6, r6, lr
 80210f8:	1c4b      	adds	r3, r1, #1
 80210fa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80210fe:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021102:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021106:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802110a:	4353      	muls	r3, r2
 802110c:	1c59      	adds	r1, r3, #1
 802110e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021112:	0a33      	lsrs	r3, r6, #8
 8021114:	0c36      	lsrs	r6, r6, #16
 8021116:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802111a:	f808 3c02 	strb.w	r3, [r8, #-2]
 802111e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021122:	435a      	muls	r2, r3
 8021124:	1c53      	adds	r3, r2, #1
 8021126:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802112a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802112e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021132:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021134:	f108 0803 	add.w	r8, r8, #3
 8021138:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802113a:	4413      	add	r3, r2
 802113c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802113e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021140:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021142:	4413      	add	r3, r2
 8021144:	932a      	str	r3, [sp, #168]	; 0xa8
 8021146:	9b07      	ldr	r3, [sp, #28]
 8021148:	3b01      	subs	r3, #1
 802114a:	e508      	b.n	8020b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802114c:	b158      	cbz	r0, 8021166 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802114e:	5d31      	ldrb	r1, [r6, r4]
 8021150:	26ff      	movs	r6, #255	; 0xff
 8021152:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021156:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802115a:	910a      	str	r1, [sp, #40]	; 0x28
 802115c:	46b6      	mov	lr, r6
 802115e:	e6f6      	b.n	8020f4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021160:	26ff      	movs	r6, #255	; 0xff
 8021162:	46b2      	mov	sl, r6
 8021164:	e6f3      	b.n	8020f4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021166:	26ff      	movs	r6, #255	; 0xff
 8021168:	46b2      	mov	sl, r6
 802116a:	e7f7      	b.n	802115c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802116c:	b017      	add	sp, #92	; 0x5c
 802116e:	ecbd 8b08 	vpop	{d8-d11}
 8021172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021178 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802117c:	b08d      	sub	sp, #52	; 0x34
 802117e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021182:	9103      	str	r1, [sp, #12]
 8021184:	fb07 5803 	mla	r8, r7, r3, r5
 8021188:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802118c:	9803      	ldr	r0, [sp, #12]
 802118e:	2f00      	cmp	r7, #0
 8021190:	910b      	str	r1, [sp, #44]	; 0x2c
 8021192:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021196:	9903      	ldr	r1, [sp, #12]
 8021198:	9c03      	ldr	r4, [sp, #12]
 802119a:	eb02 0608 	add.w	r6, r2, r8
 802119e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80211a2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80211a6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80211aa:	7809      	ldrb	r1, [r1, #0]
 80211ac:	7840      	ldrb	r0, [r0, #1]
 80211ae:	78a4      	ldrb	r4, [r4, #2]
 80211b0:	db51      	blt.n	8021256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80211b2:	45be      	cmp	lr, r7
 80211b4:	dd4f      	ble.n	8021256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80211b6:	2d00      	cmp	r5, #0
 80211b8:	db49      	blt.n	802124e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80211ba:	42ab      	cmp	r3, r5
 80211bc:	dd47      	ble.n	802124e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80211be:	f812 2008 	ldrb.w	r2, [r2, r8]
 80211c2:	9204      	str	r2, [sp, #16]
 80211c4:	7872      	ldrb	r2, [r6, #1]
 80211c6:	9205      	str	r2, [sp, #20]
 80211c8:	78b2      	ldrb	r2, [r6, #2]
 80211ca:	9206      	str	r2, [sp, #24]
 80211cc:	1c6a      	adds	r2, r5, #1
 80211ce:	d449      	bmi.n	8021264 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211d0:	4293      	cmp	r3, r2
 80211d2:	dd47      	ble.n	8021264 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211d4:	f1bc 0f00 	cmp.w	ip, #0
 80211d8:	d044      	beq.n	8021264 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211da:	7972      	ldrb	r2, [r6, #5]
 80211dc:	f896 b003 	ldrb.w	fp, [r6, #3]
 80211e0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80211e4:	9201      	str	r2, [sp, #4]
 80211e6:	3701      	adds	r7, #1
 80211e8:	d444      	bmi.n	8021274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80211ea:	45be      	cmp	lr, r7
 80211ec:	dd42      	ble.n	8021274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80211ee:	f1b9 0f00 	cmp.w	r9, #0
 80211f2:	f000 80c1 	beq.w	8021378 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80211f6:	2d00      	cmp	r5, #0
 80211f8:	db38      	blt.n	802126c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80211fa:	42ab      	cmp	r3, r5
 80211fc:	dd36      	ble.n	802126c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80211fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021202:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021206:	2203      	movs	r2, #3
 8021208:	fb03 6702 	mla	r7, r3, r2, r6
 802120c:	fb03 6202 	mla	r2, r3, r2, r6
 8021210:	787f      	ldrb	r7, [r7, #1]
 8021212:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021216:	9702      	str	r7, [sp, #8]
 8021218:	3501      	adds	r5, #1
 802121a:	d432      	bmi.n	8021282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802121c:	42ab      	cmp	r3, r5
 802121e:	dd30      	ble.n	8021282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021220:	f1bc 0f00 	cmp.w	ip, #0
 8021224:	d031      	beq.n	802128a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021226:	2703      	movs	r7, #3
 8021228:	fb13 7207 	smlabb	r2, r3, r7, r7
 802122c:	5cb5      	ldrb	r5, [r6, r2]
 802122e:	fb03 6207 	mla	r2, r3, r7, r6
 8021232:	fb03 6307 	mla	r3, r3, r7, r6
 8021236:	7912      	ldrb	r2, [r2, #4]
 8021238:	795e      	ldrb	r6, [r3, #5]
 802123a:	f1bc 0f0f 	cmp.w	ip, #15
 802123e:	d927      	bls.n	8021290 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021240:	4b53      	ldr	r3, [pc, #332]	; (8021390 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021242:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021246:	4a53      	ldr	r2, [pc, #332]	; (8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021248:	4853      	ldr	r0, [pc, #332]	; (8021398 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802124a:	f004 facf 	bl	80257ec <__assert_func>
 802124e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021252:	9104      	str	r1, [sp, #16]
 8021254:	e7ba      	b.n	80211cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021256:	9401      	str	r4, [sp, #4]
 8021258:	4682      	mov	sl, r0
 802125a:	468b      	mov	fp, r1
 802125c:	9104      	str	r1, [sp, #16]
 802125e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021262:	e7c0      	b.n	80211e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021264:	9401      	str	r4, [sp, #4]
 8021266:	4682      	mov	sl, r0
 8021268:	468b      	mov	fp, r1
 802126a:	e7bc      	b.n	80211e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802126c:	46a6      	mov	lr, r4
 802126e:	9002      	str	r0, [sp, #8]
 8021270:	4688      	mov	r8, r1
 8021272:	e7d1      	b.n	8021218 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021274:	4626      	mov	r6, r4
 8021276:	4602      	mov	r2, r0
 8021278:	460d      	mov	r5, r1
 802127a:	46a6      	mov	lr, r4
 802127c:	9002      	str	r0, [sp, #8]
 802127e:	4688      	mov	r8, r1
 8021280:	e7db      	b.n	802123a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021282:	4626      	mov	r6, r4
 8021284:	4602      	mov	r2, r0
 8021286:	460d      	mov	r5, r1
 8021288:	e7d7      	b.n	802123a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802128a:	4626      	mov	r6, r4
 802128c:	4602      	mov	r2, r0
 802128e:	460d      	mov	r5, r1
 8021290:	f1b9 0f0f 	cmp.w	r9, #15
 8021294:	d8d4      	bhi.n	8021240 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021296:	fa1f f38c 	uxth.w	r3, ip
 802129a:	fa1f fc89 	uxth.w	ip, r9
 802129e:	fb03 f70c 	mul.w	r7, r3, ip
 80212a2:	011b      	lsls	r3, r3, #4
 80212a4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80212a8:	9707      	str	r7, [sp, #28]
 80212aa:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80212ae:	fa1f fc8c 	uxth.w	ip, ip
 80212b2:	eba7 070c 	sub.w	r7, r7, ip
 80212b6:	b2bf      	uxth	r7, r7
 80212b8:	9709      	str	r7, [sp, #36]	; 0x24
 80212ba:	9f07      	ldr	r7, [sp, #28]
 80212bc:	1bdb      	subs	r3, r3, r7
 80212be:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80212c2:	b29b      	uxth	r3, r3
 80212c4:	9708      	str	r7, [sp, #32]
 80212c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80212c8:	930a      	str	r3, [sp, #40]	; 0x28
 80212ca:	ea6f 0907 	mvn.w	r9, r7
 80212ce:	fb03 fb0b 	mul.w	fp, r3, fp
 80212d2:	9f04      	ldr	r7, [sp, #16]
 80212d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212d6:	fa5f f989 	uxtb.w	r9, r9
 80212da:	fb03 bb07 	mla	fp, r3, r7, fp
 80212de:	9f07      	ldr	r7, [sp, #28]
 80212e0:	fb11 f109 	smulbb	r1, r1, r9
 80212e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212e6:	fb0c b808 	mla	r8, ip, r8, fp
 80212ea:	fb10 f009 	smulbb	r0, r0, r9
 80212ee:	fb14 f409 	smulbb	r4, r4, r9
 80212f2:	fb07 8805 	mla	r8, r7, r5, r8
 80212f6:	9d08      	ldr	r5, [sp, #32]
 80212f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80212fa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80212fe:	fb08 1805 	mla	r8, r8, r5, r1
 8021302:	9d05      	ldr	r5, [sp, #20]
 8021304:	fa1f f888 	uxth.w	r8, r8
 8021308:	f108 0101 	add.w	r1, r8, #1
 802130c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021310:	9903      	ldr	r1, [sp, #12]
 8021312:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021316:	f881 8000 	strb.w	r8, [r1]
 802131a:	fb03 f10a 	mul.w	r1, r3, sl
 802131e:	fb07 1105 	mla	r1, r7, r5, r1
 8021322:	9d02      	ldr	r5, [sp, #8]
 8021324:	fb0c 1105 	mla	r1, ip, r5, r1
 8021328:	9d07      	ldr	r5, [sp, #28]
 802132a:	fb05 1102 	mla	r1, r5, r2, r1
 802132e:	9a08      	ldr	r2, [sp, #32]
 8021330:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021334:	fb01 0102 	mla	r1, r1, r2, r0
 8021338:	9a03      	ldr	r2, [sp, #12]
 802133a:	b289      	uxth	r1, r1
 802133c:	1c48      	adds	r0, r1, #1
 802133e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021342:	1209      	asrs	r1, r1, #8
 8021344:	7051      	strb	r1, [r2, #1]
 8021346:	9a01      	ldr	r2, [sp, #4]
 8021348:	4353      	muls	r3, r2
 802134a:	9a06      	ldr	r2, [sp, #24]
 802134c:	fb07 3702 	mla	r7, r7, r2, r3
 8021350:	9b08      	ldr	r3, [sp, #32]
 8021352:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021356:	fb05 c606 	mla	r6, r5, r6, ip
 802135a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802135e:	fb06 4603 	mla	r6, r6, r3, r4
 8021362:	9b03      	ldr	r3, [sp, #12]
 8021364:	b2b6      	uxth	r6, r6
 8021366:	f106 0e01 	add.w	lr, r6, #1
 802136a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802136e:	1236      	asrs	r6, r6, #8
 8021370:	709e      	strb	r6, [r3, #2]
 8021372:	b00d      	add	sp, #52	; 0x34
 8021374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021378:	f1bc 0f0f 	cmp.w	ip, #15
 802137c:	f63f af60 	bhi.w	8021240 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021380:	4626      	mov	r6, r4
 8021382:	4602      	mov	r2, r0
 8021384:	460d      	mov	r5, r1
 8021386:	46a6      	mov	lr, r4
 8021388:	9002      	str	r0, [sp, #8]
 802138a:	4688      	mov	r8, r1
 802138c:	e783      	b.n	8021296 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802138e:	bf00      	nop
 8021390:	0802af5d 	.word	0x0802af5d
 8021394:	0802b456 	.word	0x0802b456
 8021398:	0802b026 	.word	0x0802b026

0802139c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213a0:	ed2d 8b08 	vpush	{d8-d11}
 80213a4:	b0a1      	sub	sp, #132	; 0x84
 80213a6:	eeb0 aa40 	vmov.f32	s20, s0
 80213aa:	eef0 9a60 	vmov.f32	s19, s1
 80213ae:	9307      	str	r3, [sp, #28]
 80213b0:	eeb0 9a41 	vmov.f32	s18, s2
 80213b4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80213b8:	eeb0 8a62 	vmov.f32	s16, s5
 80213bc:	9210      	str	r2, [sp, #64]	; 0x40
 80213be:	eef0 8a43 	vmov.f32	s17, s6
 80213c2:	9308      	str	r3, [sp, #32]
 80213c4:	eef0 ba44 	vmov.f32	s23, s8
 80213c8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80213cc:	eeb0 ba64 	vmov.f32	s22, s9
 80213d0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80213d2:	eef0 aa45 	vmov.f32	s21, s10
 80213d6:	930a      	str	r3, [sp, #40]	; 0x28
 80213d8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80213dc:	901f      	str	r0, [sp, #124]	; 0x7c
 80213de:	930f      	str	r3, [sp, #60]	; 0x3c
 80213e0:	6850      	ldr	r0, [r2, #4]
 80213e2:	910e      	str	r1, [sp, #56]	; 0x38
 80213e4:	6812      	ldr	r2, [r2, #0]
 80213e6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80213ea:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80213ee:	fb00 1303 	mla	r3, r0, r3, r1
 80213f2:	9908      	ldr	r1, [sp, #32]
 80213f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213f8:	18d3      	adds	r3, r2, r3
 80213fa:	2203      	movs	r2, #3
 80213fc:	9309      	str	r3, [sp, #36]	; 0x24
 80213fe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	930c      	str	r3, [sp, #48]	; 0x30
 8021404:	f06f 0304 	mvn.w	r3, #4
 8021408:	fb11 3302 	smlabb	r3, r1, r2, r3
 802140c:	930d      	str	r3, [sp, #52]	; 0x34
 802140e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021410:	43db      	mvns	r3, r3
 8021412:	b2db      	uxtb	r3, r3
 8021414:	930b      	str	r3, [sp, #44]	; 0x2c
 8021416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021418:	2b00      	cmp	r3, #0
 802141a:	dc03      	bgt.n	8021424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802141c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802141e:	2b00      	cmp	r3, #0
 8021420:	f340 81df 	ble.w	80217e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021424:	9b07      	ldr	r3, [sp, #28]
 8021426:	2b00      	cmp	r3, #0
 8021428:	f340 80f2 	ble.w	8021610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802142c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021430:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021434:	d430      	bmi.n	8021498 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021436:	1c51      	adds	r1, r2, #1
 8021438:	9808      	ldr	r0, [sp, #32]
 802143a:	4281      	cmp	r1, r0
 802143c:	da2f      	bge.n	802149e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802143e:	2b00      	cmp	r3, #0
 8021440:	db2d      	blt.n	802149e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021442:	1c59      	adds	r1, r3, #1
 8021444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021446:	4288      	cmp	r0, r1
 8021448:	dd29      	ble.n	802149e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802144a:	9b07      	ldr	r3, [sp, #28]
 802144c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802144e:	3b01      	subs	r3, #1
 8021450:	fb02 8203 	mla	r2, r2, r3, r8
 8021454:	1412      	asrs	r2, r2, #16
 8021456:	d42d      	bmi.n	80214b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021458:	3201      	adds	r2, #1
 802145a:	9908      	ldr	r1, [sp, #32]
 802145c:	4291      	cmp	r1, r2
 802145e:	dd29      	ble.n	80214b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021460:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021462:	fb02 b303 	mla	r3, r2, r3, fp
 8021466:	141b      	asrs	r3, r3, #16
 8021468:	d424      	bmi.n	80214b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802146a:	3301      	adds	r3, #1
 802146c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802146e:	429a      	cmp	r2, r3
 8021470:	dd20      	ble.n	80214b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021474:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021478:	1cde      	adds	r6, r3, #3
 802147a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802147e:	f1bc 0f00 	cmp.w	ip, #0
 8021482:	f300 811f 	bgt.w	80216c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021486:	9b07      	ldr	r3, [sp, #28]
 8021488:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802148c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802148e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021492:	4423      	add	r3, r4
 8021494:	9309      	str	r3, [sp, #36]	; 0x24
 8021496:	e0bd      	b.n	8021614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021498:	1c57      	adds	r7, r2, #1
 802149a:	f040 80ae 	bne.w	80215fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802149e:	9908      	ldr	r1, [sp, #32]
 80214a0:	428a      	cmp	r2, r1
 80214a2:	f280 80aa 	bge.w	80215fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214a6:	1c5e      	adds	r6, r3, #1
 80214a8:	f2c0 80a7 	blt.w	80215fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214ae:	4293      	cmp	r3, r2
 80214b0:	f280 80a3 	bge.w	80215fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80214b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80214ba:	f1ba 0f00 	cmp.w	sl, #0
 80214be:	dde2      	ble.n	8021486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80214c0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80214c4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80214c8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80214cc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80214d0:	f100 80df 	bmi.w	8021692 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80214d4:	1c45      	adds	r5, r0, #1
 80214d6:	9f08      	ldr	r7, [sp, #32]
 80214d8:	42af      	cmp	r7, r5
 80214da:	f340 80dc 	ble.w	8021696 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214de:	2900      	cmp	r1, #0
 80214e0:	f2c0 80d9 	blt.w	8021696 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214e4:	1c4d      	adds	r5, r1, #1
 80214e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80214e8:	42af      	cmp	r7, r5
 80214ea:	f340 80d4 	ble.w	8021696 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214ee:	9d08      	ldr	r5, [sp, #32]
 80214f0:	fb05 0101 	mla	r1, r5, r1, r0
 80214f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80214f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80214fa:	1845      	adds	r5, r0, r1
 80214fc:	5c40      	ldrb	r0, [r0, r1]
 80214fe:	792f      	ldrb	r7, [r5, #4]
 8021500:	7869      	ldrb	r1, [r5, #1]
 8021502:	9711      	str	r7, [sp, #68]	; 0x44
 8021504:	796f      	ldrb	r7, [r5, #5]
 8021506:	f895 e002 	ldrb.w	lr, [r5, #2]
 802150a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802150e:	9712      	str	r7, [sp, #72]	; 0x48
 8021510:	b17a      	cbz	r2, 8021532 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021512:	3505      	adds	r5, #5
 8021514:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021516:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021518:	19ef      	adds	r7, r5, r7
 802151a:	5d2d      	ldrb	r5, [r5, r4]
 802151c:	787c      	ldrb	r4, [r7, #1]
 802151e:	9513      	str	r5, [sp, #76]	; 0x4c
 8021520:	9415      	str	r4, [sp, #84]	; 0x54
 8021522:	78bc      	ldrb	r4, [r7, #2]
 8021524:	9417      	str	r4, [sp, #92]	; 0x5c
 8021526:	78fc      	ldrb	r4, [r7, #3]
 8021528:	9414      	str	r4, [sp, #80]	; 0x50
 802152a:	793c      	ldrb	r4, [r7, #4]
 802152c:	9416      	str	r4, [sp, #88]	; 0x58
 802152e:	797c      	ldrb	r4, [r7, #5]
 8021530:	9418      	str	r4, [sp, #96]	; 0x60
 8021532:	b29b      	uxth	r3, r3
 8021534:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021536:	b292      	uxth	r2, r2
 8021538:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802153c:	fb03 f702 	mul.w	r7, r3, r2
 8021540:	011b      	lsls	r3, r3, #4
 8021542:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021546:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802154a:	1bdb      	subs	r3, r3, r7
 802154c:	b292      	uxth	r2, r2
 802154e:	b29b      	uxth	r3, r3
 8021550:	ebac 0c02 	sub.w	ip, ip, r2
 8021554:	fb03 f909 	mul.w	r9, r3, r9
 8021558:	fa1f fc8c 	uxth.w	ip, ip
 802155c:	fb0c 9000 	mla	r0, ip, r0, r9
 8021560:	f896 9000 	ldrb.w	r9, [r6]
 8021564:	fb02 0004 	mla	r0, r2, r4, r0
 8021568:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802156a:	fb07 0004 	mla	r0, r7, r4, r0
 802156e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021570:	fb19 f904 	smulbb	r9, r9, r4
 8021574:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021578:	fb00 9005 	mla	r0, r0, r5, r9
 802157c:	b280      	uxth	r0, r0
 802157e:	f100 0901 	add.w	r9, r0, #1
 8021582:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021586:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021588:	4358      	muls	r0, r3
 802158a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802158e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021592:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021594:	f886 9000 	strb.w	r9, [r6]
 8021598:	fb02 1100 	mla	r1, r2, r0, r1
 802159c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802159e:	fb07 1100 	mla	r1, r7, r0, r1
 80215a2:	7870      	ldrb	r0, [r6, #1]
 80215a4:	fb10 f004 	smulbb	r0, r0, r4
 80215a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80215ac:	fb01 0105 	mla	r1, r1, r5, r0
 80215b0:	b289      	uxth	r1, r1
 80215b2:	1c48      	adds	r0, r1, #1
 80215b4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80215b8:	1209      	asrs	r1, r1, #8
 80215ba:	7071      	strb	r1, [r6, #1]
 80215bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80215be:	434b      	muls	r3, r1
 80215c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80215c2:	fb0c 330e 	mla	r3, ip, lr, r3
 80215c6:	fb02 3201 	mla	r2, r2, r1, r3
 80215ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80215cc:	fb07 2703 	mla	r7, r7, r3, r2
 80215d0:	78b2      	ldrb	r2, [r6, #2]
 80215d2:	fb12 f204 	smulbb	r2, r2, r4
 80215d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80215da:	fb07 2505 	mla	r5, r7, r5, r2
 80215de:	b2ad      	uxth	r5, r5
 80215e0:	1c6f      	adds	r7, r5, #1
 80215e2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80215e6:	122d      	asrs	r5, r5, #8
 80215e8:	70b5      	strb	r5, [r6, #2]
 80215ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80215ec:	3603      	adds	r6, #3
 80215ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80215f2:	4498      	add	r8, r3
 80215f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80215f6:	449b      	add	fp, r3
 80215f8:	e75f      	b.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80215fa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80215fc:	4498      	add	r8, r3
 80215fe:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021600:	449b      	add	fp, r3
 8021602:	9b07      	ldr	r3, [sp, #28]
 8021604:	3b01      	subs	r3, #1
 8021606:	9307      	str	r3, [sp, #28]
 8021608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802160a:	3303      	adds	r3, #3
 802160c:	9309      	str	r3, [sp, #36]	; 0x24
 802160e:	e709      	b.n	8021424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021610:	f47f af1b 	bne.w	802144a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021616:	2b00      	cmp	r3, #0
 8021618:	f340 80e3 	ble.w	80217e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802161c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021620:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021622:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021626:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802162a:	eef0 6a48 	vmov.f32	s13, s16
 802162e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021632:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802163a:	ee16 8a90 	vmov	r8, s13
 802163e:	eef0 6a68 	vmov.f32	s13, s17
 8021642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021646:	ee16 ba90 	vmov	fp, s13
 802164a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802164e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021652:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021656:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802165a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802165e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021662:	ee18 2a10 	vmov	r2, s16
 8021666:	eeb0 8a47 	vmov.f32	s16, s14
 802166a:	fb92 f3f3 	sdiv	r3, r2, r3
 802166e:	ee18 2a90 	vmov	r2, s17
 8021672:	9335      	str	r3, [sp, #212]	; 0xd4
 8021674:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021676:	eef0 8a67 	vmov.f32	s17, s15
 802167a:	fb92 f3f3 	sdiv	r3, r2, r3
 802167e:	9336      	str	r3, [sp, #216]	; 0xd8
 8021680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021682:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021684:	3b01      	subs	r3, #1
 8021686:	930e      	str	r3, [sp, #56]	; 0x38
 8021688:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802168a:	bf08      	it	eq
 802168c:	4613      	moveq	r3, r2
 802168e:	9307      	str	r3, [sp, #28]
 8021690:	e6c1      	b.n	8021416 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021692:	1c45      	adds	r5, r0, #1
 8021694:	d1a9      	bne.n	80215ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021696:	9c08      	ldr	r4, [sp, #32]
 8021698:	42a0      	cmp	r0, r4
 802169a:	daa6      	bge.n	80215ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802169c:	1c4c      	adds	r4, r1, #1
 802169e:	dba4      	blt.n	80215ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80216a2:	428c      	cmp	r4, r1
 80216a4:	dda1      	ble.n	80215ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80216a8:	9001      	str	r0, [sp, #4]
 80216aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80216ac:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80216b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216b2:	4631      	mov	r1, r6
 80216b4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80216b8:	9300      	str	r3, [sp, #0]
 80216ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216bc:	9b08      	ldr	r3, [sp, #32]
 80216be:	f7ff fd5b 	bl	8021178 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80216c2:	e792      	b.n	80215ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216c4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80216c8:	9c08      	ldr	r4, [sp, #32]
 80216ca:	ea4f 402b 	mov.w	r0, fp, asr #16
 80216ce:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80216d2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80216d6:	fb04 2000 	mla	r0, r4, r0, r2
 80216da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80216de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80216e2:	4402      	add	r2, r0
 80216e4:	5c25      	ldrb	r5, [r4, r0]
 80216e6:	7894      	ldrb	r4, [r2, #2]
 80216e8:	7850      	ldrb	r0, [r2, #1]
 80216ea:	9411      	str	r4, [sp, #68]	; 0x44
 80216ec:	7954      	ldrb	r4, [r2, #5]
 80216ee:	f892 a003 	ldrb.w	sl, [r2, #3]
 80216f2:	f892 9004 	ldrb.w	r9, [r2, #4]
 80216f6:	9412      	str	r4, [sp, #72]	; 0x48
 80216f8:	b171      	cbz	r1, 8021718 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80216fa:	3205      	adds	r2, #5
 80216fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216fe:	1917      	adds	r7, r2, r4
 8021700:	5d12      	ldrb	r2, [r2, r4]
 8021702:	9219      	str	r2, [sp, #100]	; 0x64
 8021704:	787a      	ldrb	r2, [r7, #1]
 8021706:	921b      	str	r2, [sp, #108]	; 0x6c
 8021708:	78ba      	ldrb	r2, [r7, #2]
 802170a:	921d      	str	r2, [sp, #116]	; 0x74
 802170c:	78fa      	ldrb	r2, [r7, #3]
 802170e:	921a      	str	r2, [sp, #104]	; 0x68
 8021710:	793a      	ldrb	r2, [r7, #4]
 8021712:	921c      	str	r2, [sp, #112]	; 0x70
 8021714:	797a      	ldrb	r2, [r7, #5]
 8021716:	921e      	str	r2, [sp, #120]	; 0x78
 8021718:	b29b      	uxth	r3, r3
 802171a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802171c:	b289      	uxth	r1, r1
 802171e:	3603      	adds	r6, #3
 8021720:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021724:	fb03 f201 	mul.w	r2, r3, r1
 8021728:	011b      	lsls	r3, r3, #4
 802172a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802172e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021732:	1a9b      	subs	r3, r3, r2
 8021734:	b289      	uxth	r1, r1
 8021736:	b29b      	uxth	r3, r3
 8021738:	1a7f      	subs	r7, r7, r1
 802173a:	fb03 fa0a 	mul.w	sl, r3, sl
 802173e:	b2bf      	uxth	r7, r7
 8021740:	fb03 f909 	mul.w	r9, r3, r9
 8021744:	fb07 a505 	mla	r5, r7, r5, sl
 8021748:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802174c:	fb07 9000 	mla	r0, r7, r0, r9
 8021750:	fb01 5504 	mla	r5, r1, r4, r5
 8021754:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021756:	fb02 5504 	mla	r5, r2, r4, r5
 802175a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802175c:	fb1a fa04 	smulbb	sl, sl, r4
 8021760:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021764:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021766:	fb05 a50e 	mla	r5, r5, lr, sl
 802176a:	fb01 0004 	mla	r0, r1, r4, r0
 802176e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021770:	b2ad      	uxth	r5, r5
 8021772:	fb02 0004 	mla	r0, r2, r4, r0
 8021776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021778:	f105 0a01 	add.w	sl, r5, #1
 802177c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021780:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021784:	122d      	asrs	r5, r5, #8
 8021786:	f806 5c06 	strb.w	r5, [r6, #-6]
 802178a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802178e:	fb15 f504 	smulbb	r5, r5, r4
 8021792:	fb00 500e 	mla	r0, r0, lr, r5
 8021796:	b280      	uxth	r0, r0
 8021798:	1c45      	adds	r5, r0, #1
 802179a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802179e:	1200      	asrs	r0, r0, #8
 80217a0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80217a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80217a6:	4343      	muls	r3, r0
 80217a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80217aa:	fb07 3300 	mla	r3, r7, r0, r3
 80217ae:	981d      	ldr	r0, [sp, #116]	; 0x74
 80217b0:	fb01 3100 	mla	r1, r1, r0, r3
 80217b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80217b6:	fb02 1203 	mla	r2, r2, r3, r1
 80217ba:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80217be:	fb11 f104 	smulbb	r1, r1, r4
 80217c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80217c6:	fb02 120e 	mla	r2, r2, lr, r1
 80217ca:	b292      	uxth	r2, r2
 80217cc:	1c53      	adds	r3, r2, #1
 80217ce:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80217d2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80217d4:	1212      	asrs	r2, r2, #8
 80217d6:	4498      	add	r8, r3
 80217d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80217da:	f806 2c04 	strb.w	r2, [r6, #-4]
 80217de:	449b      	add	fp, r3
 80217e0:	e64d      	b.n	802147e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80217e2:	b021      	add	sp, #132	; 0x84
 80217e4:	ecbd 8b08 	vpop	{d8-d11}
 80217e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80217ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217f0:	b085      	sub	sp, #20
 80217f2:	784d      	ldrb	r5, [r1, #1]
 80217f4:	788e      	ldrb	r6, [r1, #2]
 80217f6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80217fa:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80217fe:	9403      	str	r4, [sp, #12]
 8021800:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021804:	780c      	ldrb	r4, [r1, #0]
 8021806:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802180a:	fb07 ce03 	mla	lr, r7, r3, ip
 802180e:	2f00      	cmp	r7, #0
 8021810:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021814:	eb02 0b0e 	add.w	fp, r2, lr
 8021818:	db56      	blt.n	80218c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802181a:	45b9      	cmp	r9, r7
 802181c:	dd54      	ble.n	80218c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802181e:	f1bc 0f00 	cmp.w	ip, #0
 8021822:	db4d      	blt.n	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021824:	4563      	cmp	r3, ip
 8021826:	dd4b      	ble.n	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021828:	f812 200e 	ldrb.w	r2, [r2, lr]
 802182c:	9200      	str	r2, [sp, #0]
 802182e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021832:	9201      	str	r2, [sp, #4]
 8021834:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021838:	9202      	str	r2, [sp, #8]
 802183a:	f11c 0201 	adds.w	r2, ip, #1
 802183e:	d44a      	bmi.n	80218d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021840:	4293      	cmp	r3, r2
 8021842:	dd48      	ble.n	80218d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021844:	2800      	cmp	r0, #0
 8021846:	d046      	beq.n	80218d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021848:	f89b e003 	ldrb.w	lr, [fp, #3]
 802184c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021850:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021854:	3701      	adds	r7, #1
 8021856:	d446      	bmi.n	80218e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021858:	45b9      	cmp	r9, r7
 802185a:	dd44      	ble.n	80218e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802185c:	9a03      	ldr	r2, [sp, #12]
 802185e:	2a00      	cmp	r2, #0
 8021860:	d045      	beq.n	80218ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021862:	f1bc 0f00 	cmp.w	ip, #0
 8021866:	db3a      	blt.n	80218de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021868:	4563      	cmp	r3, ip
 802186a:	dd38      	ble.n	80218de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802186c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021870:	f04f 0903 	mov.w	r9, #3
 8021874:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021878:	fb03 b209 	mla	r2, r3, r9, fp
 802187c:	fb03 b909 	mla	r9, r3, r9, fp
 8021880:	7852      	ldrb	r2, [r2, #1]
 8021882:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021886:	f11c 0c01 	adds.w	ip, ip, #1
 802188a:	d40d      	bmi.n	80218a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802188c:	4563      	cmp	r3, ip
 802188e:	dd0b      	ble.n	80218a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021890:	b160      	cbz	r0, 80218ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021892:	2603      	movs	r6, #3
 8021894:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021898:	fb03 b506 	mla	r5, r3, r6, fp
 802189c:	fb03 b306 	mla	r3, r3, r6, fp
 80218a0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80218a4:	792d      	ldrb	r5, [r5, #4]
 80218a6:	795e      	ldrb	r6, [r3, #5]
 80218a8:	280f      	cmp	r0, #15
 80218aa:	d802      	bhi.n	80218b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80218ac:	9b03      	ldr	r3, [sp, #12]
 80218ae:	2b0f      	cmp	r3, #15
 80218b0:	d922      	bls.n	80218f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80218b2:	4b2f      	ldr	r3, [pc, #188]	; (8021970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80218b4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80218b8:	4a2e      	ldr	r2, [pc, #184]	; (8021974 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80218ba:	482f      	ldr	r0, [pc, #188]	; (8021978 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80218bc:	f003 ff96 	bl	80257ec <__assert_func>
 80218c0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80218c4:	9400      	str	r4, [sp, #0]
 80218c6:	e7b8      	b.n	802183a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80218c8:	46b2      	mov	sl, r6
 80218ca:	46a8      	mov	r8, r5
 80218cc:	46a6      	mov	lr, r4
 80218ce:	9400      	str	r4, [sp, #0]
 80218d0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80218d4:	e7be      	b.n	8021854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218d6:	46b2      	mov	sl, r6
 80218d8:	46a8      	mov	r8, r5
 80218da:	46a6      	mov	lr, r4
 80218dc:	e7ba      	b.n	8021854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218de:	46b1      	mov	r9, r6
 80218e0:	462a      	mov	r2, r5
 80218e2:	4627      	mov	r7, r4
 80218e4:	e7cf      	b.n	8021886 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80218e6:	46b1      	mov	r9, r6
 80218e8:	462a      	mov	r2, r5
 80218ea:	4627      	mov	r7, r4
 80218ec:	e7dc      	b.n	80218a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80218ee:	280f      	cmp	r0, #15
 80218f0:	d8df      	bhi.n	80218b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80218f2:	46b1      	mov	r9, r6
 80218f4:	462a      	mov	r2, r5
 80218f6:	4627      	mov	r7, r4
 80218f8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80218fc:	b280      	uxth	r0, r0
 80218fe:	fb00 f30b 	mul.w	r3, r0, fp
 8021902:	0100      	lsls	r0, r0, #4
 8021904:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021908:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802190c:	1ac0      	subs	r0, r0, r3
 802190e:	fa1f fb8b 	uxth.w	fp, fp
 8021912:	b280      	uxth	r0, r0
 8021914:	ebac 0c0b 	sub.w	ip, ip, fp
 8021918:	9003      	str	r0, [sp, #12]
 802191a:	fa1f fc8c 	uxth.w	ip, ip
 802191e:	fb00 fe0e 	mul.w	lr, r0, lr
 8021922:	9800      	ldr	r0, [sp, #0]
 8021924:	fb0c ee00 	mla	lr, ip, r0, lr
 8021928:	9803      	ldr	r0, [sp, #12]
 802192a:	fb00 f808 	mul.w	r8, r0, r8
 802192e:	9801      	ldr	r0, [sp, #4]
 8021930:	fb0b ee07 	mla	lr, fp, r7, lr
 8021934:	fb0c 8800 	mla	r8, ip, r0, r8
 8021938:	fb03 ee04 	mla	lr, r3, r4, lr
 802193c:	fb0b 8202 	mla	r2, fp, r2, r8
 8021940:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021944:	fb03 2505 	mla	r5, r3, r5, r2
 8021948:	9a03      	ldr	r2, [sp, #12]
 802194a:	f881 e000 	strb.w	lr, [r1]
 802194e:	fb02 f00a 	mul.w	r0, r2, sl
 8021952:	9a02      	ldr	r2, [sp, #8]
 8021954:	122d      	asrs	r5, r5, #8
 8021956:	fb0c 0c02 	mla	ip, ip, r2, r0
 802195a:	704d      	strb	r5, [r1, #1]
 802195c:	fb0b c909 	mla	r9, fp, r9, ip
 8021960:	fb03 9606 	mla	r6, r3, r6, r9
 8021964:	1236      	asrs	r6, r6, #8
 8021966:	708e      	strb	r6, [r1, #2]
 8021968:	b005      	add	sp, #20
 802196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802196e:	bf00      	nop
 8021970:	0802af5d 	.word	0x0802af5d
 8021974:	0802b456 	.word	0x0802b456
 8021978:	0802b026 	.word	0x0802b026

0802197c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802197c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021980:	ed2d 8b0a 	vpush	{d8-d12}
 8021984:	b09d      	sub	sp, #116	; 0x74
 8021986:	eeb0 aa40 	vmov.f32	s20, s0
 802198a:	eef0 9a60 	vmov.f32	s19, s1
 802198e:	9306      	str	r3, [sp, #24]
 8021990:	eeb0 9a41 	vmov.f32	s18, s2
 8021994:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021998:	eeb0 8a62 	vmov.f32	s16, s5
 802199c:	901b      	str	r0, [sp, #108]	; 0x6c
 802199e:	eef0 8a43 	vmov.f32	s17, s6
 80219a2:	9307      	str	r3, [sp, #28]
 80219a4:	eeb0 ca44 	vmov.f32	s24, s8
 80219a8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80219ac:	eef0 ba64 	vmov.f32	s23, s9
 80219b0:	eeb0 ba45 	vmov.f32	s22, s10
 80219b4:	9309      	str	r3, [sp, #36]	; 0x24
 80219b6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80219ba:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80219be:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80219c0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80219c4:	6850      	ldr	r0, [r2, #4]
 80219c6:	6812      	ldr	r2, [r2, #0]
 80219c8:	fb00 1303 	mla	r3, r0, r3, r1
 80219cc:	9907      	ldr	r1, [sp, #28]
 80219ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219d2:	18d3      	adds	r3, r2, r3
 80219d4:	2203      	movs	r2, #3
 80219d6:	9308      	str	r3, [sp, #32]
 80219d8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	930a      	str	r3, [sp, #40]	; 0x28
 80219de:	f06f 0304 	mvn.w	r3, #4
 80219e2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80219e6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80219ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80219ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	dc03      	bgt.n	80219fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80219f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	f340 8193 	ble.w	8021d20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80219fa:	9b06      	ldr	r3, [sp, #24]
 80219fc:	2b00      	cmp	r3, #0
 80219fe:	f340 80d0 	ble.w	8021ba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021a02:	1432      	asrs	r2, r6, #16
 8021a04:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021a08:	d42f      	bmi.n	8021a6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021a0a:	1c51      	adds	r1, r2, #1
 8021a0c:	9807      	ldr	r0, [sp, #28]
 8021a0e:	4281      	cmp	r1, r0
 8021a10:	da2e      	bge.n	8021a70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	db2c      	blt.n	8021a70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a16:	1c59      	adds	r1, r3, #1
 8021a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a1a:	4288      	cmp	r0, r1
 8021a1c:	dd28      	ble.n	8021a70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a1e:	9b06      	ldr	r3, [sp, #24]
 8021a20:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021a22:	3b01      	subs	r3, #1
 8021a24:	fb02 6203 	mla	r2, r2, r3, r6
 8021a28:	1412      	asrs	r2, r2, #16
 8021a2a:	d42c      	bmi.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a2c:	3201      	adds	r2, #1
 8021a2e:	9907      	ldr	r1, [sp, #28]
 8021a30:	4291      	cmp	r1, r2
 8021a32:	dd28      	ble.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a34:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021a36:	fb02 5303 	mla	r3, r2, r3, r5
 8021a3a:	141b      	asrs	r3, r3, #16
 8021a3c:	d423      	bmi.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a3e:	3301      	adds	r3, #1
 8021a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a42:	429a      	cmp	r2, r3
 8021a44:	dd1f      	ble.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a46:	9b08      	ldr	r3, [sp, #32]
 8021a48:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021a4c:	f103 0c03 	add.w	ip, r3, #3
 8021a50:	f1be 0f00 	cmp.w	lr, #0
 8021a54:	f300 80fa 	bgt.w	8021c4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021a58:	9b06      	ldr	r3, [sp, #24]
 8021a5a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021a5e:	9b08      	ldr	r3, [sp, #32]
 8021a60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a64:	4423      	add	r3, r4
 8021a66:	9308      	str	r3, [sp, #32]
 8021a68:	e09d      	b.n	8021ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021a6a:	1c51      	adds	r1, r2, #1
 8021a6c:	f040 808e 	bne.w	8021b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a70:	9907      	ldr	r1, [sp, #28]
 8021a72:	428a      	cmp	r2, r1
 8021a74:	f280 808a 	bge.w	8021b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a78:	1c5f      	adds	r7, r3, #1
 8021a7a:	f2c0 8087 	blt.w	8021b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a80:	4293      	cmp	r3, r2
 8021a82:	f280 8083 	bge.w	8021b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a86:	9f06      	ldr	r7, [sp, #24]
 8021a88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021a8c:	2f00      	cmp	r7, #0
 8021a8e:	dde3      	ble.n	8021a58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021a90:	1432      	asrs	r2, r6, #16
 8021a92:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021a96:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021a9a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8021a9e:	f100 80bf 	bmi.w	8021c20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021aa2:	1c50      	adds	r0, r2, #1
 8021aa4:	9c07      	ldr	r4, [sp, #28]
 8021aa6:	4284      	cmp	r4, r0
 8021aa8:	f340 80bc 	ble.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	f2c0 80b9 	blt.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021ab2:	1c58      	adds	r0, r3, #1
 8021ab4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ab6:	4284      	cmp	r4, r0
 8021ab8:	f340 80b4 	ble.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021abc:	9807      	ldr	r0, [sp, #28]
 8021abe:	fb00 2303 	mla	r3, r0, r3, r2
 8021ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021aca:	441a      	add	r2, r3
 8021acc:	f810 c003 	ldrb.w	ip, [r0, r3]
 8021ad0:	7953      	ldrb	r3, [r2, #5]
 8021ad2:	7850      	ldrb	r0, [r2, #1]
 8021ad4:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021ad8:	f892 9003 	ldrb.w	r9, [r2, #3]
 8021adc:	f892 8004 	ldrb.w	r8, [r2, #4]
 8021ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8021ae2:	f1bb 0f00 	cmp.w	fp, #0
 8021ae6:	d00f      	beq.n	8021b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021ae8:	3205      	adds	r2, #5
 8021aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021aec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021aee:	18d3      	adds	r3, r2, r3
 8021af0:	5d12      	ldrb	r2, [r2, r4]
 8021af2:	920f      	str	r2, [sp, #60]	; 0x3c
 8021af4:	785a      	ldrb	r2, [r3, #1]
 8021af6:	9211      	str	r2, [sp, #68]	; 0x44
 8021af8:	789a      	ldrb	r2, [r3, #2]
 8021afa:	9213      	str	r2, [sp, #76]	; 0x4c
 8021afc:	78da      	ldrb	r2, [r3, #3]
 8021afe:	9210      	str	r2, [sp, #64]	; 0x40
 8021b00:	791a      	ldrb	r2, [r3, #4]
 8021b02:	795b      	ldrb	r3, [r3, #5]
 8021b04:	9212      	str	r2, [sp, #72]	; 0x48
 8021b06:	9314      	str	r3, [sp, #80]	; 0x50
 8021b08:	b28b      	uxth	r3, r1
 8021b0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021b0c:	fa1f f28b 	uxth.w	r2, fp
 8021b10:	fb03 fb02 	mul.w	fp, r3, r2
 8021b14:	011b      	lsls	r3, r3, #4
 8021b16:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021b1a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021b1e:	eba3 030b 	sub.w	r3, r3, fp
 8021b22:	b292      	uxth	r2, r2
 8021b24:	b29b      	uxth	r3, r3
 8021b26:	1a89      	subs	r1, r1, r2
 8021b28:	fb03 f808 	mul.w	r8, r3, r8
 8021b2c:	b289      	uxth	r1, r1
 8021b2e:	fb03 f909 	mul.w	r9, r3, r9
 8021b32:	fb01 8800 	mla	r8, r1, r0, r8
 8021b36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021b38:	fb01 990c 	mla	r9, r1, ip, r9
 8021b3c:	fb02 8800 	mla	r8, r2, r0, r8
 8021b40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021b42:	fb02 9904 	mla	r9, r2, r4, r9
 8021b46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b48:	fb0b 8800 	mla	r8, fp, r0, r8
 8021b4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021b4e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021b52:	4343      	muls	r3, r0
 8021b54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b58:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b5c:	fb01 330e 	mla	r3, r1, lr, r3
 8021b60:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021b62:	f88a 9000 	strb.w	r9, [sl]
 8021b66:	fb02 3201 	mla	r2, r2, r1, r3
 8021b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b6c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021b70:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021b74:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021b78:	f88a b002 	strb.w	fp, [sl, #2]
 8021b7c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b7e:	f10a 0a03 	add.w	sl, sl, #3
 8021b82:	3f01      	subs	r7, #1
 8021b84:	441e      	add	r6, r3
 8021b86:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021b88:	441d      	add	r5, r3
 8021b8a:	e77f      	b.n	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021b8c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b8e:	441e      	add	r6, r3
 8021b90:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021b92:	441d      	add	r5, r3
 8021b94:	9b06      	ldr	r3, [sp, #24]
 8021b96:	3b01      	subs	r3, #1
 8021b98:	9306      	str	r3, [sp, #24]
 8021b9a:	9b08      	ldr	r3, [sp, #32]
 8021b9c:	3303      	adds	r3, #3
 8021b9e:	9308      	str	r3, [sp, #32]
 8021ba0:	e72b      	b.n	80219fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021ba2:	f47f af3c 	bne.w	8021a1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	f340 80b9 	ble.w	8021d20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021bae:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021bb2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021bb4:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021bb8:	eef0 6a48 	vmov.f32	s13, s16
 8021bbc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021bc0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021bc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bc8:	ee16 6a90 	vmov	r6, s13
 8021bcc:	eef0 6a68 	vmov.f32	s13, s17
 8021bd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bd4:	ee16 5a90 	vmov	r5, s13
 8021bd8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021bdc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021be0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021be4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021be8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021bec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021bf0:	ee18 2a10 	vmov	r2, s16
 8021bf4:	eeb0 8a47 	vmov.f32	s16, s14
 8021bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bfc:	ee18 2a90 	vmov	r2, s17
 8021c00:	9333      	str	r3, [sp, #204]	; 0xcc
 8021c02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c04:	eef0 8a67 	vmov.f32	s17, s15
 8021c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c0c:	9334      	str	r3, [sp, #208]	; 0xd0
 8021c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021c12:	3b01      	subs	r3, #1
 8021c14:	930c      	str	r3, [sp, #48]	; 0x30
 8021c16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c18:	bf08      	it	eq
 8021c1a:	4613      	moveq	r3, r2
 8021c1c:	9306      	str	r3, [sp, #24]
 8021c1e:	e6e5      	b.n	80219ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021c20:	1c54      	adds	r4, r2, #1
 8021c22:	d1ab      	bne.n	8021b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c24:	9807      	ldr	r0, [sp, #28]
 8021c26:	4282      	cmp	r2, r0
 8021c28:	daa8      	bge.n	8021b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c2a:	1c58      	adds	r0, r3, #1
 8021c2c:	dba6      	blt.n	8021b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c30:	4298      	cmp	r0, r3
 8021c32:	dda3      	ble.n	8021b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c34:	9000      	str	r0, [sp, #0]
 8021c36:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021c38:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021c3c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021c40:	9b07      	ldr	r3, [sp, #28]
 8021c42:	4651      	mov	r1, sl
 8021c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c46:	f7ff fdd1 	bl	80217ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021c4a:	e797      	b.n	8021b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c4c:	1431      	asrs	r1, r6, #16
 8021c4e:	9c07      	ldr	r4, [sp, #28]
 8021c50:	1428      	asrs	r0, r5, #16
 8021c52:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021c56:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021c5a:	fb04 1000 	mla	r0, r4, r0, r1
 8021c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021c60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021c62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c66:	4401      	add	r1, r0
 8021c68:	5c20      	ldrb	r0, [r4, r0]
 8021c6a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021c6e:	900e      	str	r0, [sp, #56]	; 0x38
 8021c70:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021c74:	7848      	ldrb	r0, [r1, #1]
 8021c76:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021c7a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021c7e:	b172      	cbz	r2, 8021c9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021c80:	3105      	adds	r1, #5
 8021c82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021c84:	190f      	adds	r7, r1, r4
 8021c86:	5d09      	ldrb	r1, [r1, r4]
 8021c88:	9115      	str	r1, [sp, #84]	; 0x54
 8021c8a:	7879      	ldrb	r1, [r7, #1]
 8021c8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021c8e:	78b9      	ldrb	r1, [r7, #2]
 8021c90:	9119      	str	r1, [sp, #100]	; 0x64
 8021c92:	78f9      	ldrb	r1, [r7, #3]
 8021c94:	9116      	str	r1, [sp, #88]	; 0x58
 8021c96:	7939      	ldrb	r1, [r7, #4]
 8021c98:	9118      	str	r1, [sp, #96]	; 0x60
 8021c9a:	7979      	ldrb	r1, [r7, #5]
 8021c9c:	911a      	str	r1, [sp, #104]	; 0x68
 8021c9e:	b29b      	uxth	r3, r3
 8021ca0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021ca2:	b292      	uxth	r2, r2
 8021ca4:	f10c 0c03 	add.w	ip, ip, #3
 8021ca8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021cac:	fb03 f102 	mul.w	r1, r3, r2
 8021cb0:	011b      	lsls	r3, r3, #4
 8021cb2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021cb6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021cba:	1a5b      	subs	r3, r3, r1
 8021cbc:	b292      	uxth	r2, r2
 8021cbe:	b29b      	uxth	r3, r3
 8021cc0:	1abf      	subs	r7, r7, r2
 8021cc2:	fb03 f909 	mul.w	r9, r3, r9
 8021cc6:	b2bf      	uxth	r7, r7
 8021cc8:	fb03 fa0a 	mul.w	sl, r3, sl
 8021ccc:	fb03 f30b 	mul.w	r3, r3, fp
 8021cd0:	fb07 9900 	mla	r9, r7, r0, r9
 8021cd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021cd6:	fb07 aa04 	mla	sl, r7, r4, sl
 8021cda:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021cdc:	fb02 9900 	mla	r9, r2, r0, r9
 8021ce0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021ce2:	fb07 3308 	mla	r3, r7, r8, r3
 8021ce6:	fb01 9900 	mla	r9, r1, r0, r9
 8021cea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021cec:	fb02 aa04 	mla	sl, r2, r4, sl
 8021cf0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021cf2:	fb02 3200 	mla	r2, r2, r0, r3
 8021cf6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021cf8:	fb01 aa04 	mla	sl, r1, r4, sl
 8021cfc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d00:	fb01 2103 	mla	r1, r1, r3, r2
 8021d04:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021d06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021d0a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021d0e:	1209      	asrs	r1, r1, #8
 8021d10:	441e      	add	r6, r3
 8021d12:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d14:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021d18:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021d1c:	441d      	add	r5, r3
 8021d1e:	e697      	b.n	8021a50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021d20:	b01d      	add	sp, #116	; 0x74
 8021d22:	ecbd 8b0a 	vpop	{d8-d12}
 8021d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d30:	b085      	sub	sp, #20
 8021d32:	7888      	ldrb	r0, [r1, #2]
 8021d34:	4691      	mov	r9, r2
 8021d36:	9000      	str	r0, [sp, #0]
 8021d38:	7848      	ldrb	r0, [r1, #1]
 8021d3a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021d3e:	9001      	str	r0, [sp, #4]
 8021d40:	7808      	ldrb	r0, [r1, #0]
 8021d42:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021d46:	9002      	str	r0, [sp, #8]
 8021d48:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021d4c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021d50:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021d54:	fb04 c603 	mla	r6, r4, r3, ip
 8021d58:	2c00      	cmp	r4, #0
 8021d5a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021d5e:	9a00      	ldr	r2, [sp, #0]
 8021d60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021d64:	9a01      	ldr	r2, [sp, #4]
 8021d66:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021d6a:	db3a      	blt.n	8021de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d6c:	45a0      	cmp	r8, r4
 8021d6e:	dd38      	ble.n	8021de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d70:	f1bc 0f00 	cmp.w	ip, #0
 8021d74:	db33      	blt.n	8021dde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d76:	4563      	cmp	r3, ip
 8021d78:	dd31      	ble.n	8021dde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d7a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021d7e:	f11c 0601 	adds.w	r6, ip, #1
 8021d82:	d431      	bmi.n	8021de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d84:	42b3      	cmp	r3, r6
 8021d86:	dd2f      	ble.n	8021de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d88:	b375      	cbz	r5, 8021de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d8a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021d8e:	3401      	adds	r4, #1
 8021d90:	d42e      	bmi.n	8021df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d92:	45a0      	cmp	r8, r4
 8021d94:	dd2c      	ble.n	8021df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d96:	b35f      	cbz	r7, 8021df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d98:	f1bc 0f00 	cmp.w	ip, #0
 8021d9c:	db26      	blt.n	8021dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021d9e:	4563      	cmp	r3, ip
 8021da0:	dd24      	ble.n	8021dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021da2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021da6:	f11c 0c01 	adds.w	ip, ip, #1
 8021daa:	d405      	bmi.n	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021dac:	4563      	cmp	r3, ip
 8021dae:	dd03      	ble.n	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021db0:	b115      	cbz	r5, 8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021db2:	3301      	adds	r3, #1
 8021db4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021db8:	2d0f      	cmp	r5, #15
 8021dba:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021dbe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021dc2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021dc6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021dca:	d801      	bhi.n	8021dd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021dcc:	2f0f      	cmp	r7, #15
 8021dce:	d911      	bls.n	8021df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021dd0:	4b80      	ldr	r3, [pc, #512]	; (8021fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021dd2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021dd6:	4a80      	ldr	r2, [pc, #512]	; (8021fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021dd8:	4880      	ldr	r0, [pc, #512]	; (8021fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021dda:	f003 fd07 	bl	80257ec <__assert_func>
 8021dde:	4602      	mov	r2, r0
 8021de0:	e7cd      	b.n	8021d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021de2:	4606      	mov	r6, r0
 8021de4:	4602      	mov	r2, r0
 8021de6:	e7d2      	b.n	8021d8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021de8:	4606      	mov	r6, r0
 8021dea:	e7d0      	b.n	8021d8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021dec:	4604      	mov	r4, r0
 8021dee:	e7da      	b.n	8021da6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021df0:	4604      	mov	r4, r0
 8021df2:	e7e1      	b.n	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021df4:	b2ab      	uxth	r3, r5
 8021df6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021dfa:	b2bf      	uxth	r7, r7
 8021dfc:	fb03 fe07 	mul.w	lr, r3, r7
 8021e00:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021e04:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021e08:	eba3 0c0e 	sub.w	ip, r3, lr
 8021e0c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021e10:	b2bf      	uxth	r7, r7
 8021e12:	fa1f fc8c 	uxth.w	ip, ip
 8021e16:	eba5 0507 	sub.w	r5, r5, r7
 8021e1a:	fb0c f30a 	mul.w	r3, ip, sl
 8021e1e:	b2ad      	uxth	r5, r5
 8021e20:	fb05 330b 	mla	r3, r5, fp, r3
 8021e24:	fb07 3309 	mla	r3, r7, r9, r3
 8021e28:	fb0e 3308 	mla	r3, lr, r8, r3
 8021e2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e30:	9303      	str	r3, [sp, #12]
 8021e32:	d018      	beq.n	8021e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021e34:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e3c:	fb0b f303 	mul.w	r3, fp, r3
 8021e40:	fb0b fb02 	mul.w	fp, fp, r2
 8021e44:	0a1a      	lsrs	r2, r3, #8
 8021e46:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021e4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e4e:	441a      	add	r2, r3
 8021e50:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021e54:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021e58:	0a12      	lsrs	r2, r2, #8
 8021e5a:	0a1b      	lsrs	r3, r3, #8
 8021e5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e64:	431a      	orrs	r2, r3
 8021e66:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021e6a:	d019      	beq.n	8021ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021e6c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021e70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e74:	fb0a fb0b 	mul.w	fp, sl, fp
 8021e78:	fb0a fa06 	mul.w	sl, sl, r6
 8021e7c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021e80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e84:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021e88:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e8c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021e90:	445e      	add	r6, fp
 8021e92:	0a1b      	lsrs	r3, r3, #8
 8021e94:	0a36      	lsrs	r6, r6, #8
 8021e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e9e:	431e      	orrs	r6, r3
 8021ea0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ea4:	d019      	beq.n	8021eda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021ea6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021eaa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021eae:	fb09 fa0a 	mul.w	sl, r9, sl
 8021eb2:	fb09 f904 	mul.w	r9, r9, r4
 8021eb6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021eba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ebe:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021ec2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ec6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021eca:	4454      	add	r4, sl
 8021ecc:	0a1b      	lsrs	r3, r3, #8
 8021ece:	0a24      	lsrs	r4, r4, #8
 8021ed0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ed4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ed8:	431c      	orrs	r4, r3
 8021eda:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ede:	d019      	beq.n	8021f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021ee0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021ee4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ee8:	fb08 f909 	mul.w	r9, r8, r9
 8021eec:	fb08 f800 	mul.w	r8, r8, r0
 8021ef0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021ef4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021ef8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021efc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f00:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021f04:	4448      	add	r0, r9
 8021f06:	0a1b      	lsrs	r3, r3, #8
 8021f08:	0a00      	lsrs	r0, r0, #8
 8021f0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f0e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f12:	4318      	orrs	r0, r3
 8021f14:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021f18:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021f1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021f20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f24:	fb0c f808 	mul.w	r8, ip, r8
 8021f28:	fb0c f606 	mul.w	r6, ip, r6
 8021f2c:	fb05 8803 	mla	r8, r5, r3, r8
 8021f30:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021f34:	fb05 6202 	mla	r2, r5, r2, r6
 8021f38:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021f3c:	fb07 8803 	mla	r8, r7, r3, r8
 8021f40:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021f44:	fb07 2704 	mla	r7, r7, r4, r2
 8021f48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f4c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021f50:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021f54:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021f58:	9803      	ldr	r0, [sp, #12]
 8021f5a:	b292      	uxth	r2, r2
 8021f5c:	9c02      	ldr	r4, [sp, #8]
 8021f5e:	0a1b      	lsrs	r3, r3, #8
 8021f60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f64:	4350      	muls	r0, r2
 8021f66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f6a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f6e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021f72:	1c43      	adds	r3, r0, #1
 8021f74:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021f78:	fa5f f08e 	uxtb.w	r0, lr
 8021f7c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021f80:	b2db      	uxtb	r3, r3
 8021f82:	fb14 f403 	smulbb	r4, r4, r3
 8021f86:	fb00 4002 	mla	r0, r0, r2, r4
 8021f8a:	b280      	uxth	r0, r0
 8021f8c:	1c44      	adds	r4, r0, #1
 8021f8e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021f92:	9c01      	ldr	r4, [sp, #4]
 8021f94:	fb14 f403 	smulbb	r4, r4, r3
 8021f98:	1200      	asrs	r0, r0, #8
 8021f9a:	7008      	strb	r0, [r1, #0]
 8021f9c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021fa0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021fa4:	fb00 4002 	mla	r0, r0, r2, r4
 8021fa8:	b280      	uxth	r0, r0
 8021faa:	1c44      	adds	r4, r0, #1
 8021fac:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021fb0:	1200      	asrs	r0, r0, #8
 8021fb2:	7048      	strb	r0, [r1, #1]
 8021fb4:	9800      	ldr	r0, [sp, #0]
 8021fb6:	fb10 f303 	smulbb	r3, r0, r3
 8021fba:	fb0e 3202 	mla	r2, lr, r2, r3
 8021fbe:	b292      	uxth	r2, r2
 8021fc0:	f102 0e01 	add.w	lr, r2, #1
 8021fc4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021fc8:	1212      	asrs	r2, r2, #8
 8021fca:	708a      	strb	r2, [r1, #2]
 8021fcc:	b005      	add	sp, #20
 8021fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fd2:	bf00      	nop
 8021fd4:	0802af5d 	.word	0x0802af5d
 8021fd8:	0802b456 	.word	0x0802b456
 8021fdc:	0802b026 	.word	0x0802b026

08021fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fe4:	ed2d 8b08 	vpush	{d8-d11}
 8021fe8:	b099      	sub	sp, #100	; 0x64
 8021fea:	eeb0 aa40 	vmov.f32	s20, s0
 8021fee:	eef0 9a60 	vmov.f32	s19, s1
 8021ff2:	9306      	str	r3, [sp, #24]
 8021ff4:	eeb0 9a41 	vmov.f32	s18, s2
 8021ff8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021ffc:	eeb0 8a62 	vmov.f32	s16, s5
 8022000:	9216      	str	r2, [sp, #88]	; 0x58
 8022002:	eef0 8a43 	vmov.f32	s17, s6
 8022006:	9307      	str	r3, [sp, #28]
 8022008:	eef0 ba44 	vmov.f32	s23, s8
 802200c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022010:	eeb0 ba64 	vmov.f32	s22, s9
 8022014:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022016:	eef0 aa45 	vmov.f32	s21, s10
 802201a:	9310      	str	r3, [sp, #64]	; 0x40
 802201c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8022020:	9017      	str	r0, [sp, #92]	; 0x5c
 8022022:	9112      	str	r1, [sp, #72]	; 0x48
 8022024:	6850      	ldr	r0, [r2, #4]
 8022026:	9315      	str	r3, [sp, #84]	; 0x54
 8022028:	6812      	ldr	r2, [r2, #0]
 802202a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 802202c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022030:	fb00 1303 	mla	r3, r0, r3, r1
 8022034:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022038:	18d3      	adds	r3, r2, r3
 802203a:	930a      	str	r3, [sp, #40]	; 0x28
 802203c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802203e:	681b      	ldr	r3, [r3, #0]
 8022040:	9311      	str	r3, [sp, #68]	; 0x44
 8022042:	9b07      	ldr	r3, [sp, #28]
 8022044:	009b      	lsls	r3, r3, #2
 8022046:	930e      	str	r3, [sp, #56]	; 0x38
 8022048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802204a:	2b00      	cmp	r3, #0
 802204c:	dc03      	bgt.n	8022056 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802204e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022050:	2b00      	cmp	r3, #0
 8022052:	f340 833b 	ble.w	80226cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022056:	9b06      	ldr	r3, [sp, #24]
 8022058:	2b00      	cmp	r3, #0
 802205a:	f340 8197 	ble.w	802238c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802205e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022060:	1423      	asrs	r3, r4, #16
 8022062:	1412      	asrs	r2, r2, #16
 8022064:	d432      	bmi.n	80220cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8022066:	1c51      	adds	r1, r2, #1
 8022068:	9807      	ldr	r0, [sp, #28]
 802206a:	4288      	cmp	r0, r1
 802206c:	dd31      	ble.n	80220d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802206e:	2b00      	cmp	r3, #0
 8022070:	db2f      	blt.n	80220d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022072:	1c59      	adds	r1, r3, #1
 8022074:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022076:	4288      	cmp	r0, r1
 8022078:	dd2b      	ble.n	80220d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802207a:	9b06      	ldr	r3, [sp, #24]
 802207c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802207e:	3b01      	subs	r3, #1
 8022080:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022082:	fb02 1203 	mla	r2, r2, r3, r1
 8022086:	1412      	asrs	r2, r2, #16
 8022088:	d42e      	bmi.n	80220e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802208a:	3201      	adds	r2, #1
 802208c:	9907      	ldr	r1, [sp, #28]
 802208e:	4291      	cmp	r1, r2
 8022090:	dd2a      	ble.n	80220e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022092:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022094:	fb02 4303 	mla	r3, r2, r3, r4
 8022098:	141b      	asrs	r3, r3, #16
 802209a:	d425      	bmi.n	80220e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802209c:	3301      	adds	r3, #1
 802209e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220a0:	429a      	cmp	r2, r3
 80220a2:	dd21      	ble.n	80220e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80220a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220a6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80220aa:	f103 0e03 	add.w	lr, r3, #3
 80220ae:	9b06      	ldr	r3, [sp, #24]
 80220b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80220b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	f300 81d2 	bgt.w	802245e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80220ba:	9b06      	ldr	r3, [sp, #24]
 80220bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80220c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220c6:	4423      	add	r3, r4
 80220c8:	930a      	str	r3, [sp, #40]	; 0x28
 80220ca:	e161      	b.n	8022390 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80220cc:	1c51      	adds	r1, r2, #1
 80220ce:	f040 8150 	bne.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220d2:	9907      	ldr	r1, [sp, #28]
 80220d4:	428a      	cmp	r2, r1
 80220d6:	f280 814c 	bge.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220da:	1c5a      	adds	r2, r3, #1
 80220dc:	f2c0 8149 	blt.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220e2:	4293      	cmp	r3, r2
 80220e4:	f280 8145 	bge.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220e8:	9b06      	ldr	r3, [sp, #24]
 80220ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80220ec:	9314      	str	r3, [sp, #80]	; 0x50
 80220ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80220f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80220f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	dddf      	ble.n	80220ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80220fa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220fc:	1423      	asrs	r3, r4, #16
 80220fe:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022102:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022106:	1412      	asrs	r2, r2, #16
 8022108:	f100 8190 	bmi.w	802242c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802210c:	1c55      	adds	r5, r2, #1
 802210e:	9f07      	ldr	r7, [sp, #28]
 8022110:	42af      	cmp	r7, r5
 8022112:	f340 818d 	ble.w	8022430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022116:	2b00      	cmp	r3, #0
 8022118:	f2c0 818a 	blt.w	8022430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802211c:	1c5d      	adds	r5, r3, #1
 802211e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022120:	42af      	cmp	r7, r5
 8022122:	f340 8185 	ble.w	8022430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022126:	9d07      	ldr	r5, [sp, #28]
 8022128:	fb03 2305 	mla	r3, r3, r5, r2
 802212c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802212e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022136:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802213a:	2800      	cmp	r0, #0
 802213c:	f000 8167 	beq.w	802240e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022140:	686a      	ldr	r2, [r5, #4]
 8022142:	920b      	str	r2, [sp, #44]	; 0x2c
 8022144:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022148:	2900      	cmp	r1, #0
 802214a:	f000 8169 	beq.w	8022420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802214e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022150:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022152:	18aa      	adds	r2, r5, r2
 8022154:	59ed      	ldr	r5, [r5, r7]
 8022156:	6852      	ldr	r2, [r2, #4]
 8022158:	9508      	str	r5, [sp, #32]
 802215a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802215e:	0e15      	lsrs	r5, r2, #24
 8022160:	920c      	str	r2, [sp, #48]	; 0x30
 8022162:	b280      	uxth	r0, r0
 8022164:	b289      	uxth	r1, r1
 8022166:	fb00 fb01 	mul.w	fp, r0, r1
 802216a:	0100      	lsls	r0, r0, #4
 802216c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022170:	eba0 090b 	sub.w	r9, r0, fp
 8022174:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022178:	b289      	uxth	r1, r1
 802217a:	fa1f f989 	uxth.w	r9, r9
 802217e:	1a52      	subs	r2, r2, r1
 8022180:	fb09 f008 	mul.w	r0, r9, r8
 8022184:	b292      	uxth	r2, r2
 8022186:	fb02 000c 	mla	r0, r2, ip, r0
 802218a:	fb01 000a 	mla	r0, r1, sl, r0
 802218e:	fb0b 0005 	mla	r0, fp, r5, r0
 8022192:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022196:	2800      	cmp	r0, #0
 8022198:	f000 80e0 	beq.w	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802219c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80221a0:	d01b      	beq.n	80221da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80221a2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80221a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221aa:	fb0c fe0e 	mul.w	lr, ip, lr
 80221ae:	fb0c fc03 	mul.w	ip, ip, r3
 80221b2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80221b6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80221ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221be:	4473      	add	r3, lr
 80221c0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80221c4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80221c8:	0a1b      	lsrs	r3, r3, #8
 80221ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80221d6:	ea43 030e 	orr.w	r3, r3, lr
 80221da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80221de:	d01e      	beq.n	802221e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80221e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221e2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80221e6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80221ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80221ee:	fb08 f80e 	mul.w	r8, r8, lr
 80221f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80221f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80221fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221fe:	44e6      	add	lr, ip
 8022200:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022204:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022208:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802220c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022210:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022214:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022218:	ea4e 0708 	orr.w	r7, lr, r8
 802221c:	970b      	str	r7, [sp, #44]	; 0x2c
 802221e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022222:	d01e      	beq.n	8022262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022224:	9f08      	ldr	r7, [sp, #32]
 8022226:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802222a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802222e:	fb0a f808 	mul.w	r8, sl, r8
 8022232:	fb0a fa0c 	mul.w	sl, sl, ip
 8022236:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802223a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802223e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022242:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022246:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802224a:	44c6      	add	lr, r8
 802224c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022250:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022254:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022258:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802225c:	ea4e 070a 	orr.w	r7, lr, sl
 8022260:	9708      	str	r7, [sp, #32]
 8022262:	2dff      	cmp	r5, #255	; 0xff
 8022264:	d01d      	beq.n	80222a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022266:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022268:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802226c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022270:	fb05 f808 	mul.w	r8, r5, r8
 8022274:	fb05 f50c 	mul.w	r5, r5, ip
 8022278:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802227c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022280:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022284:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022288:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802228c:	44c6      	add	lr, r8
 802228e:	0a2d      	lsrs	r5, r5, #8
 8022290:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022294:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022298:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802229c:	ea4e 0505 	orr.w	r5, lr, r5
 80222a0:	950c      	str	r5, [sp, #48]	; 0x30
 80222a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80222a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222a8:	9f08      	ldr	r7, [sp, #32]
 80222aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222b2:	fb09 f505 	mul.w	r5, r9, r5
 80222b6:	fb02 550c 	mla	r5, r2, ip, r5
 80222ba:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80222be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80222c0:	fb01 550c 	mla	r5, r1, ip, r5
 80222c4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80222c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80222ca:	fb0b 550c 	mla	r5, fp, ip, r5
 80222ce:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80222d2:	fb09 f90c 	mul.w	r9, r9, ip
 80222d6:	0a2d      	lsrs	r5, r5, #8
 80222d8:	fb02 9303 	mla	r3, r2, r3, r9
 80222dc:	9a08      	ldr	r2, [sp, #32]
 80222de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222e2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80222e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80222e8:	fb01 330e 	mla	r3, r1, lr, r3
 80222ec:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80222f0:	fb0b 3b01 	mla	fp, fp, r1, r3
 80222f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80222f8:	4343      	muls	r3, r0
 80222fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80222fe:	1c58      	adds	r0, r3, #1
 8022300:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022304:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022308:	ea45 050b 	orr.w	r5, r5, fp
 802230c:	7833      	ldrb	r3, [r6, #0]
 802230e:	b2ea      	uxtb	r2, r5
 8022310:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022314:	fb12 f201 	smulbb	r2, r2, r1
 8022318:	b2c0      	uxtb	r0, r0
 802231a:	fb03 2300 	mla	r3, r3, r0, r2
 802231e:	b29b      	uxth	r3, r3
 8022320:	1c5a      	adds	r2, r3, #1
 8022322:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022326:	7872      	ldrb	r2, [r6, #1]
 8022328:	fb12 f200 	smulbb	r2, r2, r0
 802232c:	121b      	asrs	r3, r3, #8
 802232e:	7033      	strb	r3, [r6, #0]
 8022330:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022334:	0c2d      	lsrs	r5, r5, #16
 8022336:	fb03 2301 	mla	r3, r3, r1, r2
 802233a:	b29b      	uxth	r3, r3
 802233c:	1c5a      	adds	r2, r3, #1
 802233e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022342:	121b      	asrs	r3, r3, #8
 8022344:	7073      	strb	r3, [r6, #1]
 8022346:	78b3      	ldrb	r3, [r6, #2]
 8022348:	fb13 f000 	smulbb	r0, r3, r0
 802234c:	fb05 0501 	mla	r5, r5, r1, r0
 8022350:	b2ad      	uxth	r5, r5
 8022352:	1c6b      	adds	r3, r5, #1
 8022354:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022358:	122d      	asrs	r5, r5, #8
 802235a:	70b5      	strb	r5, [r6, #2]
 802235c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802235e:	3603      	adds	r6, #3
 8022360:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022362:	4413      	add	r3, r2
 8022364:	932b      	str	r3, [sp, #172]	; 0xac
 8022366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022368:	441c      	add	r4, r3
 802236a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802236c:	3b01      	subs	r3, #1
 802236e:	9314      	str	r3, [sp, #80]	; 0x50
 8022370:	e6c0      	b.n	80220f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022372:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022374:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022376:	4413      	add	r3, r2
 8022378:	932b      	str	r3, [sp, #172]	; 0xac
 802237a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802237c:	441c      	add	r4, r3
 802237e:	9b06      	ldr	r3, [sp, #24]
 8022380:	3b01      	subs	r3, #1
 8022382:	9306      	str	r3, [sp, #24]
 8022384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022386:	3303      	adds	r3, #3
 8022388:	930a      	str	r3, [sp, #40]	; 0x28
 802238a:	e664      	b.n	8022056 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802238c:	f47f ae75 	bne.w	802207a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022392:	2b00      	cmp	r3, #0
 8022394:	f340 819a 	ble.w	80226cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802239c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802239e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80223a2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80223a6:	eef0 6a48 	vmov.f32	s13, s16
 80223aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80223ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80223b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223b6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80223ba:	eef0 6a68 	vmov.f32	s13, s17
 80223be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223c2:	ee16 4a90 	vmov	r4, s13
 80223c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80223ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 80223ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 80223d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80223d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80223da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80223de:	ee18 2a10 	vmov	r2, s16
 80223e2:	eeb0 8a47 	vmov.f32	s16, s14
 80223e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ea:	ee18 2a90 	vmov	r2, s17
 80223ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80223f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223f2:	eef0 8a67 	vmov.f32	s17, s15
 80223f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80223fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80223fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022400:	3b01      	subs	r3, #1
 8022402:	9312      	str	r3, [sp, #72]	; 0x48
 8022404:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022406:	bf08      	it	eq
 8022408:	4613      	moveq	r3, r2
 802240a:	9306      	str	r3, [sp, #24]
 802240c:	e61c      	b.n	8022048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802240e:	b151      	cbz	r1, 8022426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022412:	58aa      	ldr	r2, [r5, r2]
 8022414:	25ff      	movs	r5, #255	; 0xff
 8022416:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802241a:	9208      	str	r2, [sp, #32]
 802241c:	46a8      	mov	r8, r5
 802241e:	e6a0      	b.n	8022162 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022420:	25ff      	movs	r5, #255	; 0xff
 8022422:	46aa      	mov	sl, r5
 8022424:	e69d      	b.n	8022162 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022426:	25ff      	movs	r5, #255	; 0xff
 8022428:	46aa      	mov	sl, r5
 802242a:	e7f7      	b.n	802241c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802242c:	1c57      	adds	r7, r2, #1
 802242e:	d195      	bne.n	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022430:	9d07      	ldr	r5, [sp, #28]
 8022432:	4295      	cmp	r5, r2
 8022434:	dd92      	ble.n	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022436:	1c5d      	adds	r5, r3, #1
 8022438:	db90      	blt.n	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802243a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802243c:	429d      	cmp	r5, r3
 802243e:	dd8d      	ble.n	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022440:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022442:	9201      	str	r2, [sp, #4]
 8022444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022446:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802244a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802244c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802244e:	9300      	str	r3, [sp, #0]
 8022450:	9b07      	ldr	r3, [sp, #28]
 8022452:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022456:	4631      	mov	r1, r6
 8022458:	f7ff fc68 	bl	8021d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802245c:	e77e      	b.n	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802245e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022460:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022464:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022466:	9d07      	ldr	r5, [sp, #28]
 8022468:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802246c:	1412      	asrs	r2, r2, #16
 802246e:	1423      	asrs	r3, r4, #16
 8022470:	fb05 2303 	mla	r3, r5, r3, r2
 8022474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022476:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802247e:	0e1e      	lsrs	r6, r3, #24
 8022480:	2900      	cmp	r1, #0
 8022482:	f000 8114 	beq.w	80226ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022486:	686a      	ldr	r2, [r5, #4]
 8022488:	920d      	str	r2, [sp, #52]	; 0x34
 802248a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802248e:	2800      	cmp	r0, #0
 8022490:	f000 8116 	beq.w	80226c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022496:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022498:	18aa      	adds	r2, r5, r2
 802249a:	59ed      	ldr	r5, [r5, r7]
 802249c:	6852      	ldr	r2, [r2, #4]
 802249e:	9509      	str	r5, [sp, #36]	; 0x24
 80224a0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80224a4:	0e15      	lsrs	r5, r2, #24
 80224a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80224a8:	b289      	uxth	r1, r1
 80224aa:	b280      	uxth	r0, r0
 80224ac:	fb01 fa00 	mul.w	sl, r1, r0
 80224b0:	0109      	lsls	r1, r1, #4
 80224b2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80224b6:	eba1 080a 	sub.w	r8, r1, sl
 80224ba:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80224be:	b280      	uxth	r0, r0
 80224c0:	fa1f f888 	uxth.w	r8, r8
 80224c4:	1a12      	subs	r2, r2, r0
 80224c6:	fb08 f10c 	mul.w	r1, r8, ip
 80224ca:	b292      	uxth	r2, r2
 80224cc:	fb02 1106 	mla	r1, r2, r6, r1
 80224d0:	fb00 1109 	mla	r1, r0, r9, r1
 80224d4:	fb0a 1105 	mla	r1, sl, r5, r1
 80224d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80224dc:	2900      	cmp	r1, #0
 80224de:	f000 80da 	beq.w	8022696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80224e2:	2eff      	cmp	r6, #255	; 0xff
 80224e4:	d016      	beq.n	8022514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80224e6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80224ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224ee:	4377      	muls	r7, r6
 80224f0:	435e      	muls	r6, r3
 80224f2:	0a3b      	lsrs	r3, r7, #8
 80224f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80224f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80224fc:	443b      	add	r3, r7
 80224fe:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022502:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022506:	0a1b      	lsrs	r3, r3, #8
 8022508:	0a3f      	lsrs	r7, r7, #8
 802250a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802250e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022512:	433b      	orrs	r3, r7
 8022514:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022518:	d01d      	beq.n	8022556 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802251a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802251c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802251e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022522:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022526:	fb0c f606 	mul.w	r6, ip, r6
 802252a:	fb0c fc07 	mul.w	ip, ip, r7
 802252e:	0a37      	lsrs	r7, r6, #8
 8022530:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022534:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022538:	4437      	add	r7, r6
 802253a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802253e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022542:	0a3f      	lsrs	r7, r7, #8
 8022544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022548:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802254c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022550:	ea47 060c 	orr.w	r6, r7, ip
 8022554:	960d      	str	r6, [sp, #52]	; 0x34
 8022556:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802255a:	d01d      	beq.n	8022598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802255c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802255e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022562:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022566:	fb09 fc0c 	mul.w	ip, r9, ip
 802256a:	fb09 f906 	mul.w	r9, r9, r6
 802256e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022572:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022576:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802257a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802257e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022582:	4467      	add	r7, ip
 8022584:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022588:	0a3f      	lsrs	r7, r7, #8
 802258a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802258e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022592:	ea47 0609 	orr.w	r6, r7, r9
 8022596:	9609      	str	r6, [sp, #36]	; 0x24
 8022598:	2dff      	cmp	r5, #255	; 0xff
 802259a:	d01a      	beq.n	80225d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802259c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802259e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80225a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225a6:	fb05 fc0c 	mul.w	ip, r5, ip
 80225aa:	4375      	muls	r5, r6
 80225ac:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80225b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80225b4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80225b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225bc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80225c0:	4467      	add	r7, ip
 80225c2:	0a2d      	lsrs	r5, r5, #8
 80225c4:	0a3f      	lsrs	r7, r7, #8
 80225c6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80225ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225ce:	433d      	orrs	r5, r7
 80225d0:	950f      	str	r5, [sp, #60]	; 0x3c
 80225d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80225d4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80225d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80225e0:	fb08 f505 	mul.w	r5, r8, r5
 80225e4:	fb02 5506 	mla	r5, r2, r6, r5
 80225e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80225ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225ee:	fb00 5506 	mla	r5, r0, r6, r5
 80225f2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80225f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225f8:	fb0a 5506 	mla	r5, sl, r6, r5
 80225fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80225fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022602:	0a2d      	lsrs	r5, r5, #8
 8022604:	fb08 f806 	mul.w	r8, r8, r6
 8022608:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802260c:	fb02 8303 	mla	r3, r2, r3, r8
 8022610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022612:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022618:	fb00 3307 	mla	r3, r0, r7, r3
 802261c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022620:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022624:	fb01 f30b 	mul.w	r3, r1, fp
 8022628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802262c:	1c59      	adds	r1, r3, #1
 802262e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022632:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022636:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802263a:	ea45 050c 	orr.w	r5, r5, ip
 802263e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022642:	b2ea      	uxtb	r2, r5
 8022644:	b2c9      	uxtb	r1, r1
 8022646:	fb12 f20b 	smulbb	r2, r2, fp
 802264a:	fb03 2301 	mla	r3, r3, r1, r2
 802264e:	b29b      	uxth	r3, r3
 8022650:	1c5a      	adds	r2, r3, #1
 8022652:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022656:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802265a:	fb12 f201 	smulbb	r2, r2, r1
 802265e:	121b      	asrs	r3, r3, #8
 8022660:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022664:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022668:	0c2d      	lsrs	r5, r5, #16
 802266a:	fb03 230b 	mla	r3, r3, fp, r2
 802266e:	b29b      	uxth	r3, r3
 8022670:	1c5a      	adds	r2, r3, #1
 8022672:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022676:	121b      	asrs	r3, r3, #8
 8022678:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802267c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022680:	fb13 f101 	smulbb	r1, r3, r1
 8022684:	fb05 150b 	mla	r5, r5, fp, r1
 8022688:	b2ad      	uxth	r5, r5
 802268a:	1c69      	adds	r1, r5, #1
 802268c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022690:	122d      	asrs	r5, r5, #8
 8022692:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022696:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022698:	f10e 0e03 	add.w	lr, lr, #3
 802269c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802269e:	4413      	add	r3, r2
 80226a0:	932b      	str	r3, [sp, #172]	; 0xac
 80226a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80226a4:	441c      	add	r4, r3
 80226a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80226a8:	3b01      	subs	r3, #1
 80226aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80226ac:	e501      	b.n	80220b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80226ae:	b150      	cbz	r0, 80226c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80226b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226b2:	58aa      	ldr	r2, [r5, r2]
 80226b4:	25ff      	movs	r5, #255	; 0xff
 80226b6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80226ba:	9209      	str	r2, [sp, #36]	; 0x24
 80226bc:	46ac      	mov	ip, r5
 80226be:	e6f3      	b.n	80224a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80226c0:	25ff      	movs	r5, #255	; 0xff
 80226c2:	46a9      	mov	r9, r5
 80226c4:	e6f0      	b.n	80224a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80226c6:	25ff      	movs	r5, #255	; 0xff
 80226c8:	46a9      	mov	r9, r5
 80226ca:	e7f7      	b.n	80226bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80226cc:	b019      	add	sp, #100	; 0x64
 80226ce:	ecbd 8b08 	vpop	{d8-d11}
 80226d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080226d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80226d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226dc:	b085      	sub	sp, #20
 80226de:	7888      	ldrb	r0, [r1, #2]
 80226e0:	4691      	mov	r9, r2
 80226e2:	9000      	str	r0, [sp, #0]
 80226e4:	7848      	ldrb	r0, [r1, #1]
 80226e6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80226ea:	9001      	str	r0, [sp, #4]
 80226ec:	7808      	ldrb	r0, [r1, #0]
 80226ee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80226f2:	9002      	str	r0, [sp, #8]
 80226f4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80226f8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80226fc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022700:	fb04 c603 	mla	r6, r4, r3, ip
 8022704:	2c00      	cmp	r4, #0
 8022706:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802270a:	9a00      	ldr	r2, [sp, #0]
 802270c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022710:	9a01      	ldr	r2, [sp, #4]
 8022712:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022716:	db3a      	blt.n	802278e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022718:	45a0      	cmp	r8, r4
 802271a:	dd38      	ble.n	802278e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802271c:	f1bc 0f00 	cmp.w	ip, #0
 8022720:	db33      	blt.n	802278a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022722:	4563      	cmp	r3, ip
 8022724:	dd31      	ble.n	802278a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022726:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802272a:	f11c 0601 	adds.w	r6, ip, #1
 802272e:	d431      	bmi.n	8022794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022730:	42b3      	cmp	r3, r6
 8022732:	dd2f      	ble.n	8022794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022734:	b375      	cbz	r5, 8022794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022736:	f8de 6004 	ldr.w	r6, [lr, #4]
 802273a:	3401      	adds	r4, #1
 802273c:	d42e      	bmi.n	802279c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802273e:	45a0      	cmp	r8, r4
 8022740:	dd2c      	ble.n	802279c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022742:	b35f      	cbz	r7, 802279c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022744:	f1bc 0f00 	cmp.w	ip, #0
 8022748:	db26      	blt.n	8022798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802274a:	4563      	cmp	r3, ip
 802274c:	dd24      	ble.n	8022798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802274e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022752:	f11c 0c01 	adds.w	ip, ip, #1
 8022756:	d405      	bmi.n	8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022758:	4563      	cmp	r3, ip
 802275a:	dd03      	ble.n	8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802275c:	b115      	cbz	r5, 8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802275e:	3301      	adds	r3, #1
 8022760:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022764:	2d0f      	cmp	r5, #15
 8022766:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802276a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802276e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022772:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022776:	d801      	bhi.n	802277c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022778:	2f0f      	cmp	r7, #15
 802277a:	d911      	bls.n	80227a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802277c:	4b77      	ldr	r3, [pc, #476]	; (802295c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802277e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022782:	4a77      	ldr	r2, [pc, #476]	; (8022960 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022784:	4877      	ldr	r0, [pc, #476]	; (8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022786:	f003 f831 	bl	80257ec <__assert_func>
 802278a:	4602      	mov	r2, r0
 802278c:	e7cd      	b.n	802272a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802278e:	4606      	mov	r6, r0
 8022790:	4602      	mov	r2, r0
 8022792:	e7d2      	b.n	802273a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022794:	4606      	mov	r6, r0
 8022796:	e7d0      	b.n	802273a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022798:	4604      	mov	r4, r0
 802279a:	e7da      	b.n	8022752 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 802279c:	4604      	mov	r4, r0
 802279e:	e7e1      	b.n	8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80227a0:	b2ab      	uxth	r3, r5
 80227a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80227a6:	b2bf      	uxth	r7, r7
 80227a8:	fb03 fe07 	mul.w	lr, r3, r7
 80227ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80227b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80227b4:	eba3 0c0e 	sub.w	ip, r3, lr
 80227b8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80227bc:	b2bf      	uxth	r7, r7
 80227be:	fa1f fc8c 	uxth.w	ip, ip
 80227c2:	eba5 0507 	sub.w	r5, r5, r7
 80227c6:	fb0c f30a 	mul.w	r3, ip, sl
 80227ca:	b2ad      	uxth	r5, r5
 80227cc:	fb05 330b 	mla	r3, r5, fp, r3
 80227d0:	fb07 3309 	mla	r3, r7, r9, r3
 80227d4:	fb0e 3308 	mla	r3, lr, r8, r3
 80227d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227dc:	9303      	str	r3, [sp, #12]
 80227de:	d018      	beq.n	8022812 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80227e0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80227e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227e8:	fb0b f303 	mul.w	r3, fp, r3
 80227ec:	fb0b fb02 	mul.w	fp, fp, r2
 80227f0:	0a1a      	lsrs	r2, r3, #8
 80227f2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80227f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80227fa:	441a      	add	r2, r3
 80227fc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022800:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022804:	0a12      	lsrs	r2, r2, #8
 8022806:	0a1b      	lsrs	r3, r3, #8
 8022808:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802280c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022810:	431a      	orrs	r2, r3
 8022812:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022816:	d019      	beq.n	802284c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022818:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802281c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022820:	fb0a fb0b 	mul.w	fp, sl, fp
 8022824:	fb0a fa06 	mul.w	sl, sl, r6
 8022828:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802282c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022830:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022834:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022838:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802283c:	445e      	add	r6, fp
 802283e:	0a1b      	lsrs	r3, r3, #8
 8022840:	0a36      	lsrs	r6, r6, #8
 8022842:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022846:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802284a:	431e      	orrs	r6, r3
 802284c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022850:	d019      	beq.n	8022886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022852:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022856:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802285a:	fb09 fa0a 	mul.w	sl, r9, sl
 802285e:	fb09 f904 	mul.w	r9, r9, r4
 8022862:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022866:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802286a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802286e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022872:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022876:	4454      	add	r4, sl
 8022878:	0a1b      	lsrs	r3, r3, #8
 802287a:	0a24      	lsrs	r4, r4, #8
 802287c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022880:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022884:	431c      	orrs	r4, r3
 8022886:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802288a:	d019      	beq.n	80228c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802288c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022890:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022894:	fb08 f909 	mul.w	r9, r8, r9
 8022898:	fb08 f800 	mul.w	r8, r8, r0
 802289c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80228a0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80228a4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80228a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80228ac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80228b0:	4448      	add	r0, r9
 80228b2:	0a1b      	lsrs	r3, r3, #8
 80228b4:	0a00      	lsrs	r0, r0, #8
 80228b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228ba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80228be:	4318      	orrs	r0, r3
 80228c0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80228c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80228c8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80228cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80228d0:	fb0c f808 	mul.w	r8, ip, r8
 80228d4:	fb0c f606 	mul.w	r6, ip, r6
 80228d8:	fb05 8803 	mla	r8, r5, r3, r8
 80228dc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80228e0:	fb05 6202 	mla	r2, r5, r2, r6
 80228e4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80228e8:	fb07 8803 	mla	r8, r7, r3, r8
 80228ec:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80228f0:	fb07 2704 	mla	r7, r7, r4, r2
 80228f4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228f8:	fb0e 8303 	mla	r3, lr, r3, r8
 80228fc:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022900:	9802      	ldr	r0, [sp, #8]
 8022902:	0a1b      	lsrs	r3, r3, #8
 8022904:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022908:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802290c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022910:	ea43 0e0e 	orr.w	lr, r3, lr
 8022914:	9b03      	ldr	r3, [sp, #12]
 8022916:	43db      	mvns	r3, r3
 8022918:	b2db      	uxtb	r3, r3
 802291a:	4358      	muls	r0, r3
 802291c:	1c42      	adds	r2, r0, #1
 802291e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022922:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022926:	700a      	strb	r2, [r1, #0]
 8022928:	9a01      	ldr	r2, [sp, #4]
 802292a:	435a      	muls	r2, r3
 802292c:	1c50      	adds	r0, r2, #1
 802292e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022932:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022936:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802293a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802293e:	704a      	strb	r2, [r1, #1]
 8022940:	9a00      	ldr	r2, [sp, #0]
 8022942:	435a      	muls	r2, r3
 8022944:	4613      	mov	r3, r2
 8022946:	3201      	adds	r2, #1
 8022948:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802294c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022950:	f881 e002 	strb.w	lr, [r1, #2]
 8022954:	b005      	add	sp, #20
 8022956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802295a:	bf00      	nop
 802295c:	0802af5d 	.word	0x0802af5d
 8022960:	0802b456 	.word	0x0802b456
 8022964:	0802b026 	.word	0x0802b026

08022968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802296c:	ed2d 8b08 	vpush	{d8-d11}
 8022970:	b097      	sub	sp, #92	; 0x5c
 8022972:	eeb0 aa40 	vmov.f32	s20, s0
 8022976:	eef0 9a60 	vmov.f32	s19, s1
 802297a:	9306      	str	r3, [sp, #24]
 802297c:	eeb0 9a41 	vmov.f32	s18, s2
 8022980:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022984:	eeb0 8a62 	vmov.f32	s16, s5
 8022988:	9214      	str	r2, [sp, #80]	; 0x50
 802298a:	eef0 8a43 	vmov.f32	s17, s6
 802298e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022990:	eef0 ba44 	vmov.f32	s23, s8
 8022994:	9307      	str	r3, [sp, #28]
 8022996:	eeb0 ba64 	vmov.f32	s22, s9
 802299a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802299e:	eef0 aa45 	vmov.f32	s21, s10
 80229a2:	9015      	str	r0, [sp, #84]	; 0x54
 80229a4:	9112      	str	r1, [sp, #72]	; 0x48
 80229a6:	6850      	ldr	r0, [r2, #4]
 80229a8:	9310      	str	r3, [sp, #64]	; 0x40
 80229aa:	6812      	ldr	r2, [r2, #0]
 80229ac:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80229ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80229b2:	fb00 1303 	mla	r3, r0, r3, r1
 80229b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229ba:	18d3      	adds	r3, r2, r3
 80229bc:	930a      	str	r3, [sp, #40]	; 0x28
 80229be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	9311      	str	r3, [sp, #68]	; 0x44
 80229c4:	9b07      	ldr	r3, [sp, #28]
 80229c6:	009b      	lsls	r3, r3, #2
 80229c8:	930e      	str	r3, [sp, #56]	; 0x38
 80229ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	dc03      	bgt.n	80229d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80229d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	f340 832e 	ble.w	8023034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80229d8:	9b06      	ldr	r3, [sp, #24]
 80229da:	2b00      	cmp	r3, #0
 80229dc:	f340 8186 	ble.w	8022cec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80229e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80229e2:	1423      	asrs	r3, r4, #16
 80229e4:	1412      	asrs	r2, r2, #16
 80229e6:	d42f      	bmi.n	8022a48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80229e8:	1c51      	adds	r1, r2, #1
 80229ea:	9807      	ldr	r0, [sp, #28]
 80229ec:	4288      	cmp	r0, r1
 80229ee:	dd2e      	ble.n	8022a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	db2c      	blt.n	8022a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229f4:	1c59      	adds	r1, r3, #1
 80229f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229f8:	4288      	cmp	r0, r1
 80229fa:	dd28      	ble.n	8022a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229fc:	9b06      	ldr	r3, [sp, #24]
 80229fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a00:	3b01      	subs	r3, #1
 8022a02:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a04:	fb02 1203 	mla	r2, r2, r3, r1
 8022a08:	1412      	asrs	r2, r2, #16
 8022a0a:	d42b      	bmi.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a0c:	3201      	adds	r2, #1
 8022a0e:	9907      	ldr	r1, [sp, #28]
 8022a10:	4291      	cmp	r1, r2
 8022a12:	dd27      	ble.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a14:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022a16:	fb02 4303 	mla	r3, r2, r3, r4
 8022a1a:	141b      	asrs	r3, r3, #16
 8022a1c:	d422      	bmi.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a1e:	3301      	adds	r3, #1
 8022a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a22:	429a      	cmp	r2, r3
 8022a24:	dd1e      	ble.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a28:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022a2c:	1cdd      	adds	r5, r3, #3
 8022a2e:	f1bb 0f00 	cmp.w	fp, #0
 8022a32:	f300 81c4 	bgt.w	8022dbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022a36:	9b06      	ldr	r3, [sp, #24]
 8022a38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a42:	4423      	add	r3, r4
 8022a44:	930a      	str	r3, [sp, #40]	; 0x28
 8022a46:	e153      	b.n	8022cf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022a48:	1c51      	adds	r1, r2, #1
 8022a4a:	f040 8142 	bne.w	8022cd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a4e:	9907      	ldr	r1, [sp, #28]
 8022a50:	428a      	cmp	r2, r1
 8022a52:	f280 813e 	bge.w	8022cd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a56:	1c5a      	adds	r2, r3, #1
 8022a58:	f2c0 813b 	blt.w	8022cd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a5e:	4293      	cmp	r3, r2
 8022a60:	f280 8137 	bge.w	8022cd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a64:	9b06      	ldr	r3, [sp, #24]
 8022a66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022a68:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a6c:	2b00      	cmp	r3, #0
 8022a6e:	dde2      	ble.n	8022a36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022a70:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a72:	1423      	asrs	r3, r4, #16
 8022a74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022a76:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022a7a:	1409      	asrs	r1, r1, #16
 8022a7c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022a80:	f100 8187 	bmi.w	8022d92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022a84:	1c4e      	adds	r6, r1, #1
 8022a86:	9f07      	ldr	r7, [sp, #28]
 8022a88:	42b7      	cmp	r7, r6
 8022a8a:	f340 8184 	ble.w	8022d96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	f2c0 8181 	blt.w	8022d96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a94:	1c5e      	adds	r6, r3, #1
 8022a96:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022a98:	42b7      	cmp	r7, r6
 8022a9a:	f340 817c 	ble.w	8022d96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a9e:	9e07      	ldr	r6, [sp, #28]
 8022aa0:	fb03 1306 	mla	r3, r3, r6, r1
 8022aa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022aa6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022aae:	0e1f      	lsrs	r7, r3, #24
 8022ab0:	2a00      	cmp	r2, #0
 8022ab2:	f000 815c 	beq.w	8022d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022ab6:	6871      	ldr	r1, [r6, #4]
 8022ab8:	910b      	str	r1, [sp, #44]	; 0x2c
 8022aba:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	f000 815e 	beq.w	8022d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022ac4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022ac6:	eb06 0c01 	add.w	ip, r6, r1
 8022aca:	5876      	ldr	r6, [r6, r1]
 8022acc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022ad0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022ad4:	9608      	str	r6, [sp, #32]
 8022ad6:	0e0e      	lsrs	r6, r1, #24
 8022ad8:	910c      	str	r1, [sp, #48]	; 0x30
 8022ada:	b292      	uxth	r2, r2
 8022adc:	b280      	uxth	r0, r0
 8022ade:	fb02 fa00 	mul.w	sl, r2, r0
 8022ae2:	0112      	lsls	r2, r2, #4
 8022ae4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022ae8:	eba2 080a 	sub.w	r8, r2, sl
 8022aec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022af0:	b280      	uxth	r0, r0
 8022af2:	fa1f f888 	uxth.w	r8, r8
 8022af6:	1a09      	subs	r1, r1, r0
 8022af8:	fb08 f20e 	mul.w	r2, r8, lr
 8022afc:	b289      	uxth	r1, r1
 8022afe:	fb01 2207 	mla	r2, r1, r7, r2
 8022b02:	fb00 2209 	mla	r2, r0, r9, r2
 8022b06:	fb0a 2206 	mla	r2, sl, r6, r2
 8022b0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022b0e:	2a00      	cmp	r2, #0
 8022b10:	f000 80d4 	beq.w	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b14:	2fff      	cmp	r7, #255	; 0xff
 8022b16:	d01a      	beq.n	8022b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022b18:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022b1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b20:	fb07 fc0c 	mul.w	ip, r7, ip
 8022b24:	435f      	muls	r7, r3
 8022b26:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022b2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022b2e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022b32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b36:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022b3a:	4463      	add	r3, ip
 8022b3c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022b40:	0a1b      	lsrs	r3, r3, #8
 8022b42:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022b46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b4a:	ea43 030b 	orr.w	r3, r3, fp
 8022b4e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b52:	d01e      	beq.n	8022b92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022b54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b56:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022b5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b5e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022b62:	fb0e fe07 	mul.w	lr, lr, r7
 8022b66:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022b6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b6e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022b72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b76:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022b7a:	44dc      	add	ip, fp
 8022b7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b8c:	ea4c 070e 	orr.w	r7, ip, lr
 8022b90:	970b      	str	r7, [sp, #44]	; 0x2c
 8022b92:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b96:	d01e      	beq.n	8022bd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b98:	9f08      	ldr	r7, [sp, #32]
 8022b9a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022b9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ba2:	fb09 fe0e 	mul.w	lr, r9, lr
 8022ba6:	fb09 f907 	mul.w	r9, r9, r7
 8022baa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022bae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022bb2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022bb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022bbe:	44f4      	add	ip, lr
 8022bc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022bc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022bc8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022bcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bd0:	ea4c 0709 	orr.w	r7, ip, r9
 8022bd4:	9708      	str	r7, [sp, #32]
 8022bd6:	2eff      	cmp	r6, #255	; 0xff
 8022bd8:	d01c      	beq.n	8022c14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022bda:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022bdc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022be0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022be4:	fb06 fe0e 	mul.w	lr, r6, lr
 8022be8:	437e      	muls	r6, r7
 8022bea:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022bee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022bf2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022bf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bfa:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022bfe:	44f4      	add	ip, lr
 8022c00:	0a36      	lsrs	r6, r6, #8
 8022c02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c0e:	ea4c 0606 	orr.w	r6, ip, r6
 8022c12:	960c      	str	r6, [sp, #48]	; 0x30
 8022c14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022c16:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022c1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c1e:	2aff      	cmp	r2, #255	; 0xff
 8022c20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c24:	fb08 f606 	mul.w	r6, r8, r6
 8022c28:	fb01 6607 	mla	r6, r1, r7, r6
 8022c2c:	9f08      	ldr	r7, [sp, #32]
 8022c2e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c32:	fb00 6607 	mla	r6, r0, r7, r6
 8022c36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c3c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022c40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022c42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c46:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022c4a:	fb08 f807 	mul.w	r8, r8, r7
 8022c4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c52:	fb01 8303 	mla	r3, r1, r3, r8
 8022c56:	9908      	ldr	r1, [sp, #32]
 8022c58:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022c5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022c5e:	fb00 330c 	mla	r3, r0, ip, r3
 8022c62:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022c66:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022c6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c72:	ea46 060a 	orr.w	r6, r6, sl
 8022c76:	b2f0      	uxtb	r0, r6
 8022c78:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022c7c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022c80:	f000 8084 	beq.w	8022d8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022c84:	43d2      	mvns	r2, r2
 8022c86:	782b      	ldrb	r3, [r5, #0]
 8022c88:	b2d2      	uxtb	r2, r2
 8022c8a:	fb03 f702 	mul.w	r7, r3, r2
 8022c8e:	1c7b      	adds	r3, r7, #1
 8022c90:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022c94:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022c98:	702b      	strb	r3, [r5, #0]
 8022c9a:	786b      	ldrb	r3, [r5, #1]
 8022c9c:	fb03 f002 	mul.w	r0, r3, r2
 8022ca0:	1c43      	adds	r3, r0, #1
 8022ca2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022ca6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022caa:	706b      	strb	r3, [r5, #1]
 8022cac:	78ab      	ldrb	r3, [r5, #2]
 8022cae:	4353      	muls	r3, r2
 8022cb0:	1c5a      	adds	r2, r3, #1
 8022cb2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022cb6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022cba:	70ae      	strb	r6, [r5, #2]
 8022cbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cbe:	3503      	adds	r5, #3
 8022cc0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cc2:	4413      	add	r3, r2
 8022cc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022cc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022cc8:	441c      	add	r4, r3
 8022cca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ccc:	3b01      	subs	r3, #1
 8022cce:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cd0:	e6cb      	b.n	8022a6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022cd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cd6:	4413      	add	r3, r2
 8022cd8:	9329      	str	r3, [sp, #164]	; 0xa4
 8022cda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022cdc:	441c      	add	r4, r3
 8022cde:	9b06      	ldr	r3, [sp, #24]
 8022ce0:	3b01      	subs	r3, #1
 8022ce2:	9306      	str	r3, [sp, #24]
 8022ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ce6:	3303      	adds	r3, #3
 8022ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8022cea:	e675      	b.n	80229d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022cec:	f47f ae86 	bne.w	80229fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	f340 819e 	ble.w	8023034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022cfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022cfe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022d02:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022d06:	eef0 6a48 	vmov.f32	s13, s16
 8022d0a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022d0e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022d12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d16:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022d1a:	eef0 6a68 	vmov.f32	s13, s17
 8022d1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d22:	ee16 4a90 	vmov	r4, s13
 8022d26:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022d2a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022d2e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d32:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d36:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d3a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022d3e:	ee18 2a10 	vmov	r2, s16
 8022d42:	eeb0 8a47 	vmov.f32	s16, s14
 8022d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d4a:	ee18 2a90 	vmov	r2, s17
 8022d4e:	932b      	str	r3, [sp, #172]	; 0xac
 8022d50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d52:	eef0 8a67 	vmov.f32	s17, s15
 8022d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d5a:	932c      	str	r3, [sp, #176]	; 0xb0
 8022d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022d60:	3b01      	subs	r3, #1
 8022d62:	9312      	str	r3, [sp, #72]	; 0x48
 8022d64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d66:	bf08      	it	eq
 8022d68:	4613      	moveq	r3, r2
 8022d6a:	9306      	str	r3, [sp, #24]
 8022d6c:	e62d      	b.n	80229ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022d6e:	b150      	cbz	r0, 8022d86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022d70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d72:	5871      	ldr	r1, [r6, r1]
 8022d74:	26ff      	movs	r6, #255	; 0xff
 8022d76:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022d7a:	9108      	str	r1, [sp, #32]
 8022d7c:	46b6      	mov	lr, r6
 8022d7e:	e6ac      	b.n	8022ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022d80:	26ff      	movs	r6, #255	; 0xff
 8022d82:	46b1      	mov	r9, r6
 8022d84:	e6a9      	b.n	8022ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022d86:	26ff      	movs	r6, #255	; 0xff
 8022d88:	46b1      	mov	r9, r6
 8022d8a:	e7f7      	b.n	8022d7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022d8c:	7028      	strb	r0, [r5, #0]
 8022d8e:	7069      	strb	r1, [r5, #1]
 8022d90:	e793      	b.n	8022cba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022d92:	1c4f      	adds	r7, r1, #1
 8022d94:	d192      	bne.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d96:	9e07      	ldr	r6, [sp, #28]
 8022d98:	428e      	cmp	r6, r1
 8022d9a:	dd8f      	ble.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d9c:	1c5e      	adds	r6, r3, #1
 8022d9e:	db8d      	blt.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022da0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022da2:	429e      	cmp	r6, r3
 8022da4:	dd8a      	ble.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022da6:	9600      	str	r6, [sp, #0]
 8022da8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022dac:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022db0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022db2:	4629      	mov	r1, r5
 8022db4:	9b07      	ldr	r3, [sp, #28]
 8022db6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022db8:	f7ff fc8e 	bl	80226d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022dbc:	e77e      	b.n	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022dbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022dc0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022dc4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022dc6:	9e07      	ldr	r6, [sp, #28]
 8022dc8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022dcc:	1409      	asrs	r1, r1, #16
 8022dce:	1423      	asrs	r3, r4, #16
 8022dd0:	fb06 1303 	mla	r3, r6, r3, r1
 8022dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022dd6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022dde:	0e1f      	lsrs	r7, r3, #24
 8022de0:	2a00      	cmp	r2, #0
 8022de2:	f000 8113 	beq.w	802300c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022de6:	6871      	ldr	r1, [r6, #4]
 8022de8:	910d      	str	r1, [sp, #52]	; 0x34
 8022dea:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022dee:	2800      	cmp	r0, #0
 8022df0:	f000 8115 	beq.w	802301e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022df4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022df6:	eb06 0c01 	add.w	ip, r6, r1
 8022dfa:	5876      	ldr	r6, [r6, r1]
 8022dfc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022e00:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022e04:	9609      	str	r6, [sp, #36]	; 0x24
 8022e06:	0e0e      	lsrs	r6, r1, #24
 8022e08:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e0a:	b292      	uxth	r2, r2
 8022e0c:	b280      	uxth	r0, r0
 8022e0e:	fb02 fa00 	mul.w	sl, r2, r0
 8022e12:	0112      	lsls	r2, r2, #4
 8022e14:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022e18:	eba2 080a 	sub.w	r8, r2, sl
 8022e1c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022e20:	b280      	uxth	r0, r0
 8022e22:	fa1f f888 	uxth.w	r8, r8
 8022e26:	1a09      	subs	r1, r1, r0
 8022e28:	fb08 f20e 	mul.w	r2, r8, lr
 8022e2c:	b289      	uxth	r1, r1
 8022e2e:	fb01 2207 	mla	r2, r1, r7, r2
 8022e32:	fb00 2209 	mla	r2, r0, r9, r2
 8022e36:	fb0a 2206 	mla	r2, sl, r6, r2
 8022e3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e3e:	2a00      	cmp	r2, #0
 8022e40:	f000 80da 	beq.w	8022ff8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022e44:	2fff      	cmp	r7, #255	; 0xff
 8022e46:	d01a      	beq.n	8022e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022e48:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e50:	fb07 fc0c 	mul.w	ip, r7, ip
 8022e54:	435f      	muls	r7, r3
 8022e56:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022e5a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e62:	4463      	add	r3, ip
 8022e64:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022e68:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022e6c:	0a1b      	lsrs	r3, r3, #8
 8022e6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e7a:	ea43 030c 	orr.w	r3, r3, ip
 8022e7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022e82:	d021      	beq.n	8022ec8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022e84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e86:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e8a:	fb0e f707 	mul.w	r7, lr, r7
 8022e8e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022e90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e92:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022e96:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022e98:	fb0e fe0c 	mul.w	lr, lr, ip
 8022e9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ea0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022ea4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ea8:	44bc      	add	ip, r7
 8022eaa:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022eae:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022eb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022eb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022eba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ebe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ec2:	ea4c 070e 	orr.w	r7, ip, lr
 8022ec6:	970d      	str	r7, [sp, #52]	; 0x34
 8022ec8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022ecc:	d01e      	beq.n	8022f0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022ece:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ed0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ed4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ed8:	fb09 fe0e 	mul.w	lr, r9, lr
 8022edc:	fb09 f907 	mul.w	r9, r9, r7
 8022ee0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022ee4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ee8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ef0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022ef4:	44f4      	add	ip, lr
 8022ef6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022efa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022efe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022f02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f06:	ea4c 0709 	orr.w	r7, ip, r9
 8022f0a:	9709      	str	r7, [sp, #36]	; 0x24
 8022f0c:	2eff      	cmp	r6, #255	; 0xff
 8022f0e:	d01c      	beq.n	8022f4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022f10:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f12:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022f16:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f1a:	fb06 fe0e 	mul.w	lr, r6, lr
 8022f1e:	437e      	muls	r6, r7
 8022f20:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f24:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f28:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022f2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f30:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022f34:	44f4      	add	ip, lr
 8022f36:	0a36      	lsrs	r6, r6, #8
 8022f38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f44:	ea4c 0606 	orr.w	r6, ip, r6
 8022f48:	960f      	str	r6, [sp, #60]	; 0x3c
 8022f4a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022f4c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022f50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f54:	2aff      	cmp	r2, #255	; 0xff
 8022f56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f5a:	fb08 f606 	mul.w	r6, r8, r6
 8022f5e:	fb01 6607 	mla	r6, r1, r7, r6
 8022f62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f64:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f68:	fb00 6607 	mla	r6, r0, r7, r6
 8022f6c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f6e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f72:	fb0a 6607 	mla	r6, sl, r7, r6
 8022f76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022f78:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f7c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022f80:	fb08 f807 	mul.w	r8, r8, r7
 8022f84:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f88:	fb01 8303 	mla	r3, r1, r3, r8
 8022f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022f8e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022f92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022f94:	fb00 330c 	mla	r3, r0, ip, r3
 8022f98:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022f9c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022fa0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fa4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022fa8:	ea46 060e 	orr.w	r6, r6, lr
 8022fac:	b2f0      	uxtb	r0, r6
 8022fae:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022fb2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022fb6:	d038      	beq.n	802302a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022fb8:	43d2      	mvns	r2, r2
 8022fba:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022fbe:	b2d2      	uxtb	r2, r2
 8022fc0:	4357      	muls	r7, r2
 8022fc2:	1c7b      	adds	r3, r7, #1
 8022fc4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022fc8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022fcc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022fd0:	4350      	muls	r0, r2
 8022fd2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022fd6:	1c43      	adds	r3, r0, #1
 8022fd8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022fdc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022fe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022fe4:	4353      	muls	r3, r2
 8022fe6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022fea:	1c5a      	adds	r2, r3, #1
 8022fec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ff0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022ff4:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022ff8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ffa:	3503      	adds	r5, #3
 8022ffc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ffe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023002:	4413      	add	r3, r2
 8023004:	9329      	str	r3, [sp, #164]	; 0xa4
 8023006:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023008:	441c      	add	r4, r3
 802300a:	e510      	b.n	8022a2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802300c:	b150      	cbz	r0, 8023024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802300e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023010:	5871      	ldr	r1, [r6, r1]
 8023012:	26ff      	movs	r6, #255	; 0xff
 8023014:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023018:	9109      	str	r1, [sp, #36]	; 0x24
 802301a:	46b6      	mov	lr, r6
 802301c:	e6f5      	b.n	8022e0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802301e:	26ff      	movs	r6, #255	; 0xff
 8023020:	46b1      	mov	r9, r6
 8023022:	e6f2      	b.n	8022e0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023024:	26ff      	movs	r6, #255	; 0xff
 8023026:	46b1      	mov	r9, r6
 8023028:	e7f7      	b.n	802301a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 802302a:	f805 0c03 	strb.w	r0, [r5, #-3]
 802302e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023032:	e7df      	b.n	8022ff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8023034:	b017      	add	sp, #92	; 0x5c
 8023036:	ecbd 8b08 	vpop	{d8-d11}
 802303a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023044:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023048:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802304c:	2800      	cmp	r0, #0
 802304e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023052:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023056:	fb0c 0e03 	mla	lr, ip, r3, r0
 802305a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802305e:	db6b      	blt.n	8023138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023060:	4580      	cmp	r8, r0
 8023062:	dd69      	ble.n	8023138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023064:	f1bc 0f00 	cmp.w	ip, #0
 8023068:	db66      	blt.n	8023138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802306a:	45e1      	cmp	r9, ip
 802306c:	dd64      	ble.n	8023138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802306e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023072:	f01e 0f01 	tst.w	lr, #1
 8023076:	5d16      	ldrb	r6, [r2, r4]
 8023078:	bf0c      	ite	eq
 802307a:	f006 060f 	andeq.w	r6, r6, #15
 802307e:	1136      	asrne	r6, r6, #4
 8023080:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023084:	b2f6      	uxtb	r6, r6
 8023086:	f110 0a01 	adds.w	sl, r0, #1
 802308a:	d457      	bmi.n	802313c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802308c:	45d0      	cmp	r8, sl
 802308e:	dd55      	ble.n	802313c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023090:	f1bc 0f00 	cmp.w	ip, #0
 8023094:	db52      	blt.n	802313c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023096:	45e1      	cmp	r9, ip
 8023098:	dd50      	ble.n	802313c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802309a:	2f00      	cmp	r7, #0
 802309c:	f000 80ac 	beq.w	80231f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80230a0:	f10e 0b01 	add.w	fp, lr, #1
 80230a4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80230a8:	f01b 0f01 	tst.w	fp, #1
 80230ac:	5d14      	ldrb	r4, [r2, r4]
 80230ae:	bf0c      	ite	eq
 80230b0:	f004 040f 	andeq.w	r4, r4, #15
 80230b4:	1124      	asrne	r4, r4, #4
 80230b6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80230ba:	b2e4      	uxtb	r4, r4
 80230bc:	2d00      	cmp	r5, #0
 80230be:	f000 8096 	beq.w	80231ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80230c2:	2800      	cmp	r0, #0
 80230c4:	f10c 0c01 	add.w	ip, ip, #1
 80230c8:	db3c      	blt.n	8023144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230ca:	4580      	cmp	r8, r0
 80230cc:	dd3a      	ble.n	8023144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230ce:	f1bc 0f00 	cmp.w	ip, #0
 80230d2:	db37      	blt.n	8023144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230d4:	45e1      	cmp	r9, ip
 80230d6:	dd35      	ble.n	8023144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230d8:	eb03 0b0e 	add.w	fp, r3, lr
 80230dc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80230e0:	f01b 0f01 	tst.w	fp, #1
 80230e4:	5c10      	ldrb	r0, [r2, r0]
 80230e6:	bf0c      	ite	eq
 80230e8:	f000 000f 	andeq.w	r0, r0, #15
 80230ec:	1100      	asrne	r0, r0, #4
 80230ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80230f2:	b2c0      	uxtb	r0, r0
 80230f4:	f1ba 0f00 	cmp.w	sl, #0
 80230f8:	db26      	blt.n	8023148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230fa:	45d0      	cmp	r8, sl
 80230fc:	dd24      	ble.n	8023148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230fe:	f1bc 0f00 	cmp.w	ip, #0
 8023102:	db21      	blt.n	8023148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023104:	45e1      	cmp	r9, ip
 8023106:	dd1f      	ble.n	8023148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023108:	b307      	cbz	r7, 802314c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802310a:	3301      	adds	r3, #1
 802310c:	449e      	add	lr, r3
 802310e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023112:	f01e 0f01 	tst.w	lr, #1
 8023116:	5cd3      	ldrb	r3, [r2, r3]
 8023118:	bf0c      	ite	eq
 802311a:	f003 030f 	andeq.w	r3, r3, #15
 802311e:	111b      	asrne	r3, r3, #4
 8023120:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023124:	b2db      	uxtb	r3, r3
 8023126:	2f0f      	cmp	r7, #15
 8023128:	d911      	bls.n	802314e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802312a:	4b35      	ldr	r3, [pc, #212]	; (8023200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802312c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023130:	4a34      	ldr	r2, [pc, #208]	; (8023204 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023132:	4835      	ldr	r0, [pc, #212]	; (8023208 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023134:	f002 fb5a 	bl	80257ec <__assert_func>
 8023138:	2600      	movs	r6, #0
 802313a:	e7a4      	b.n	8023086 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802313c:	2400      	movs	r4, #0
 802313e:	e7bd      	b.n	80230bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023140:	463c      	mov	r4, r7
 8023142:	e7be      	b.n	80230c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023144:	2000      	movs	r0, #0
 8023146:	e7d5      	b.n	80230f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023148:	2300      	movs	r3, #0
 802314a:	e7ec      	b.n	8023126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802314c:	463b      	mov	r3, r7
 802314e:	2d0f      	cmp	r5, #15
 8023150:	d8eb      	bhi.n	802312a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023152:	b2bf      	uxth	r7, r7
 8023154:	b2ad      	uxth	r5, r5
 8023156:	fb07 f205 	mul.w	r2, r7, r5
 802315a:	013f      	lsls	r7, r7, #4
 802315c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023160:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023164:	1abf      	subs	r7, r7, r2
 8023166:	b2ad      	uxth	r5, r5
 8023168:	b2bf      	uxth	r7, r7
 802316a:	ebac 0c05 	sub.w	ip, ip, r5
 802316e:	437c      	muls	r4, r7
 8023170:	fa1f fc8c 	uxth.w	ip, ip
 8023174:	fb06 440c 	mla	r4, r6, ip, r4
 8023178:	fb05 4400 	mla	r4, r5, r0, r4
 802317c:	fb02 4203 	mla	r2, r2, r3, r4
 8023180:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023184:	b38a      	cbz	r2, 80231ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023186:	4b21      	ldr	r3, [pc, #132]	; (802320c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023188:	681c      	ldr	r4, [r3, #0]
 802318a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802318e:	b2e5      	uxtb	r5, r4
 8023190:	4353      	muls	r3, r2
 8023192:	1c5a      	adds	r2, r3, #1
 8023194:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023198:	1212      	asrs	r2, r2, #8
 802319a:	b290      	uxth	r0, r2
 802319c:	43d2      	mvns	r2, r2
 802319e:	fb15 f500 	smulbb	r5, r5, r0
 80231a2:	b2d3      	uxtb	r3, r2
 80231a4:	780a      	ldrb	r2, [r1, #0]
 80231a6:	fb02 5203 	mla	r2, r2, r3, r5
 80231aa:	b292      	uxth	r2, r2
 80231ac:	1c55      	adds	r5, r2, #1
 80231ae:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80231b2:	784d      	ldrb	r5, [r1, #1]
 80231b4:	fb15 f503 	smulbb	r5, r5, r3
 80231b8:	1212      	asrs	r2, r2, #8
 80231ba:	700a      	strb	r2, [r1, #0]
 80231bc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80231c0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80231c4:	fb02 5200 	mla	r2, r2, r0, r5
 80231c8:	b292      	uxth	r2, r2
 80231ca:	1c55      	adds	r5, r2, #1
 80231cc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80231d0:	1212      	asrs	r2, r2, #8
 80231d2:	704a      	strb	r2, [r1, #1]
 80231d4:	788a      	ldrb	r2, [r1, #2]
 80231d6:	fb12 f303 	smulbb	r3, r2, r3
 80231da:	fb04 3300 	mla	r3, r4, r0, r3
 80231de:	b29b      	uxth	r3, r3
 80231e0:	1c5a      	adds	r2, r3, #1
 80231e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231e6:	121b      	asrs	r3, r3, #8
 80231e8:	708b      	strb	r3, [r1, #2]
 80231ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231ee:	2f0f      	cmp	r7, #15
 80231f0:	d89b      	bhi.n	802312a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80231f2:	462b      	mov	r3, r5
 80231f4:	4628      	mov	r0, r5
 80231f6:	e7ac      	b.n	8023152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80231f8:	2d00      	cmp	r5, #0
 80231fa:	d1a1      	bne.n	8023140 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80231fc:	462c      	mov	r4, r5
 80231fe:	e7f8      	b.n	80231f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023200:	0802af5d 	.word	0x0802af5d
 8023204:	0802b456 	.word	0x0802b456
 8023208:	0802b026 	.word	0x0802b026
 802320c:	2000bbbc 	.word	0x2000bbbc

08023210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023214:	ed2d 8b08 	vpush	{d8-d11}
 8023218:	b097      	sub	sp, #92	; 0x5c
 802321a:	eeb0 aa40 	vmov.f32	s20, s0
 802321e:	eef0 9a60 	vmov.f32	s19, s1
 8023222:	9308      	str	r3, [sp, #32]
 8023224:	eeb0 9a41 	vmov.f32	s18, s2
 8023228:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802322c:	eeb0 8a62 	vmov.f32	s16, s5
 8023230:	9214      	str	r2, [sp, #80]	; 0x50
 8023232:	eef0 8a43 	vmov.f32	s17, s6
 8023236:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023238:	eef0 ba44 	vmov.f32	s23, s8
 802323c:	9309      	str	r3, [sp, #36]	; 0x24
 802323e:	eeb0 ba64 	vmov.f32	s22, s9
 8023242:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023246:	eef0 aa45 	vmov.f32	s21, s10
 802324a:	9015      	str	r0, [sp, #84]	; 0x54
 802324c:	910c      	str	r1, [sp, #48]	; 0x30
 802324e:	930e      	str	r3, [sp, #56]	; 0x38
 8023250:	6850      	ldr	r0, [r2, #4]
 8023252:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023256:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802325a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802325e:	fb00 1803 	mla	r8, r0, r3, r1
 8023262:	6813      	ldr	r3, [r2, #0]
 8023264:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023268:	4498      	add	r8, r3
 802326a:	f10b 0301 	add.w	r3, fp, #1
 802326e:	f023 0301 	bic.w	r3, r3, #1
 8023272:	930f      	str	r3, [sp, #60]	; 0x3c
 8023274:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023276:	681f      	ldr	r7, [r3, #0]
 8023278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802327a:	2b00      	cmp	r3, #0
 802327c:	dc03      	bgt.n	8023286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802327e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023280:	2b00      	cmp	r3, #0
 8023282:	f340 8238 	ble.w	80236f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023286:	9b08      	ldr	r3, [sp, #32]
 8023288:	2b00      	cmp	r3, #0
 802328a:	f340 810c 	ble.w	80234a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802328e:	142a      	asrs	r2, r5, #16
 8023290:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023294:	d42c      	bmi.n	80232f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023296:	1c51      	adds	r1, r2, #1
 8023298:	458b      	cmp	fp, r1
 802329a:	dd2c      	ble.n	80232f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802329c:	2b00      	cmp	r3, #0
 802329e:	db2a      	blt.n	80232f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80232a0:	1c59      	adds	r1, r3, #1
 80232a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232a4:	4288      	cmp	r0, r1
 80232a6:	dd26      	ble.n	80232f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80232a8:	9b08      	ldr	r3, [sp, #32]
 80232aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80232ac:	3b01      	subs	r3, #1
 80232ae:	fb02 5203 	mla	r2, r2, r3, r5
 80232b2:	1412      	asrs	r2, r2, #16
 80232b4:	d429      	bmi.n	802330a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232b6:	3201      	adds	r2, #1
 80232b8:	4593      	cmp	fp, r2
 80232ba:	dd26      	ble.n	802330a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80232be:	fb02 6303 	mla	r3, r2, r3, r6
 80232c2:	141b      	asrs	r3, r3, #16
 80232c4:	d421      	bmi.n	802330a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232c6:	3301      	adds	r3, #1
 80232c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232ca:	429a      	cmp	r2, r3
 80232cc:	dd1d      	ble.n	802330a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232ce:	f108 0e03 	add.w	lr, r8, #3
 80232d2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80232d6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80232da:	f1b9 0f00 	cmp.w	r9, #0
 80232de:	f300 814f 	bgt.w	8023580 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80232e2:	9b08      	ldr	r3, [sp, #32]
 80232e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232ec:	44a0      	add	r8, r4
 80232ee:	e0dc      	b.n	80234aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80232f0:	1c51      	adds	r1, r2, #1
 80232f2:	f040 80ce 	bne.w	8023492 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232f6:	4593      	cmp	fp, r2
 80232f8:	f340 80cb 	ble.w	8023492 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232fc:	1c5a      	adds	r2, r3, #1
 80232fe:	f2c0 80c8 	blt.w	8023492 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023304:	4293      	cmp	r3, r2
 8023306:	f280 80c4 	bge.w	8023492 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802330a:	9b08      	ldr	r3, [sp, #32]
 802330c:	46c1      	mov	r9, r8
 802330e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023312:	930d      	str	r3, [sp, #52]	; 0x34
 8023314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023316:	2b00      	cmp	r3, #0
 8023318:	dde3      	ble.n	80232e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802331a:	1428      	asrs	r0, r5, #16
 802331c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023320:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023324:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023328:	f100 8111 	bmi.w	802354e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802332c:	f100 0c01 	add.w	ip, r0, #1
 8023330:	45e3      	cmp	fp, ip
 8023332:	f340 810e 	ble.w	8023552 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023336:	2b00      	cmp	r3, #0
 8023338:	f2c0 810b 	blt.w	8023552 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802333c:	f103 0c01 	add.w	ip, r3, #1
 8023340:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023342:	4564      	cmp	r4, ip
 8023344:	f340 8105 	ble.w	8023552 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023348:	fb03 030a 	mla	r3, r3, sl, r0
 802334c:	0858      	lsrs	r0, r3, #1
 802334e:	07dc      	lsls	r4, r3, #31
 8023350:	5c38      	ldrb	r0, [r7, r0]
 8023352:	bf54      	ite	pl
 8023354:	f000 000f 	andpl.w	r0, r0, #15
 8023358:	1100      	asrmi	r0, r0, #4
 802335a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802335e:	b2c0      	uxtb	r0, r0
 8023360:	2a00      	cmp	r2, #0
 8023362:	f000 80e1 	beq.w	8023528 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023366:	f103 0e01 	add.w	lr, r3, #1
 802336a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802336e:	f01e 0f01 	tst.w	lr, #1
 8023372:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023376:	bf0c      	ite	eq
 8023378:	f00c 0c0f 	andeq.w	ip, ip, #15
 802337c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023380:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023384:	fa5f f48c 	uxtb.w	r4, ip
 8023388:	9410      	str	r4, [sp, #64]	; 0x40
 802338a:	b1f9      	cbz	r1, 80233cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802338c:	4453      	add	r3, sl
 802338e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023392:	07dc      	lsls	r4, r3, #31
 8023394:	f103 0301 	add.w	r3, r3, #1
 8023398:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802339c:	bf54      	ite	pl
 802339e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80233a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80233a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80233aa:	fa5f f48c 	uxtb.w	r4, ip
 80233ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80233b2:	940a      	str	r4, [sp, #40]	; 0x28
 80233b4:	07dc      	lsls	r4, r3, #31
 80233b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80233ba:	bf54      	ite	pl
 80233bc:	f00c 030f 	andpl.w	r3, ip, #15
 80233c0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80233c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80233c8:	b2db      	uxtb	r3, r3
 80233ca:	9311      	str	r3, [sp, #68]	; 0x44
 80233cc:	b292      	uxth	r2, r2
 80233ce:	b289      	uxth	r1, r1
 80233d0:	0113      	lsls	r3, r2, #4
 80233d2:	fb02 fc01 	mul.w	ip, r2, r1
 80233d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233d8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80233dc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80233e0:	eba3 030c 	sub.w	r3, r3, ip
 80233e4:	b289      	uxth	r1, r1
 80233e6:	b29b      	uxth	r3, r3
 80233e8:	ebae 0e01 	sub.w	lr, lr, r1
 80233ec:	4353      	muls	r3, r2
 80233ee:	fa1f fe8e 	uxth.w	lr, lr
 80233f2:	fb00 320e 	mla	r2, r0, lr, r3
 80233f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233f8:	fb01 2203 	mla	r2, r1, r3, r2
 80233fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80233fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8023402:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023406:	2a00      	cmp	r2, #0
 8023408:	d039      	beq.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802340a:	4bbd      	ldr	r3, [pc, #756]	; (8023700 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802340c:	6819      	ldr	r1, [r3, #0]
 802340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023410:	fa5f fc81 	uxtb.w	ip, r1
 8023414:	435a      	muls	r2, r3
 8023416:	1c53      	adds	r3, r2, #1
 8023418:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802341c:	1212      	asrs	r2, r2, #8
 802341e:	b290      	uxth	r0, r2
 8023420:	43d2      	mvns	r2, r2
 8023422:	fb1c fc00 	smulbb	ip, ip, r0
 8023426:	b2d3      	uxtb	r3, r2
 8023428:	f899 2000 	ldrb.w	r2, [r9]
 802342c:	fb02 c203 	mla	r2, r2, r3, ip
 8023430:	b292      	uxth	r2, r2
 8023432:	f102 0c01 	add.w	ip, r2, #1
 8023436:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802343a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802343e:	fb1c fc03 	smulbb	ip, ip, r3
 8023442:	1212      	asrs	r2, r2, #8
 8023444:	f889 2000 	strb.w	r2, [r9]
 8023448:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802344c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023450:	fb02 c200 	mla	r2, r2, r0, ip
 8023454:	b292      	uxth	r2, r2
 8023456:	f102 0c01 	add.w	ip, r2, #1
 802345a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802345e:	1212      	asrs	r2, r2, #8
 8023460:	f889 2001 	strb.w	r2, [r9, #1]
 8023464:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023468:	fb12 f303 	smulbb	r3, r2, r3
 802346c:	fb01 3300 	mla	r3, r1, r0, r3
 8023470:	b29b      	uxth	r3, r3
 8023472:	1c5a      	adds	r2, r3, #1
 8023474:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023478:	121b      	asrs	r3, r3, #8
 802347a:	f889 3002 	strb.w	r3, [r9, #2]
 802347e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023480:	f109 0903 	add.w	r9, r9, #3
 8023484:	441d      	add	r5, r3
 8023486:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023488:	441e      	add	r6, r3
 802348a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802348c:	3b01      	subs	r3, #1
 802348e:	930d      	str	r3, [sp, #52]	; 0x34
 8023490:	e740      	b.n	8023314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023492:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023494:	f108 0803 	add.w	r8, r8, #3
 8023498:	441d      	add	r5, r3
 802349a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802349c:	441e      	add	r6, r3
 802349e:	9b08      	ldr	r3, [sp, #32]
 80234a0:	3b01      	subs	r3, #1
 80234a2:	9308      	str	r3, [sp, #32]
 80234a4:	e6ef      	b.n	8023286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80234a6:	f47f aeff 	bne.w	80232a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80234aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	f340 8122 	ble.w	80236f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80234b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80234bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80234c0:	eef0 6a48 	vmov.f32	s13, s16
 80234c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80234c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80234cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234d0:	ee16 5a90 	vmov	r5, s13
 80234d4:	eef0 6a68 	vmov.f32	s13, s17
 80234d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234dc:	ee16 6a90 	vmov	r6, s13
 80234e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80234e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80234e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80234ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80234f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80234f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80234f8:	ee18 2a10 	vmov	r2, s16
 80234fc:	eeb0 8a47 	vmov.f32	s16, s14
 8023500:	fb92 f3f3 	sdiv	r3, r2, r3
 8023504:	ee18 2a90 	vmov	r2, s17
 8023508:	932b      	str	r3, [sp, #172]	; 0xac
 802350a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802350c:	eef0 8a67 	vmov.f32	s17, s15
 8023510:	fb92 f3f3 	sdiv	r3, r2, r3
 8023514:	932c      	str	r3, [sp, #176]	; 0xb0
 8023516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023518:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802351a:	3b01      	subs	r3, #1
 802351c:	930c      	str	r3, [sp, #48]	; 0x30
 802351e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023520:	bf08      	it	eq
 8023522:	4613      	moveq	r3, r2
 8023524:	9308      	str	r3, [sp, #32]
 8023526:	e6a7      	b.n	8023278 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023528:	2900      	cmp	r1, #0
 802352a:	f43f af4f 	beq.w	80233cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802352e:	4453      	add	r3, sl
 8023530:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023534:	07db      	lsls	r3, r3, #31
 8023536:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802353a:	bf54      	ite	pl
 802353c:	f00c 030f 	andpl.w	r3, ip, #15
 8023540:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023544:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023548:	b2db      	uxtb	r3, r3
 802354a:	930a      	str	r3, [sp, #40]	; 0x28
 802354c:	e73e      	b.n	80233cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802354e:	1c44      	adds	r4, r0, #1
 8023550:	d195      	bne.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023552:	4583      	cmp	fp, r0
 8023554:	dd93      	ble.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023556:	1c5c      	adds	r4, r3, #1
 8023558:	db91      	blt.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802355a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802355c:	429c      	cmp	r4, r3
 802355e:	dd8e      	ble.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023560:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023562:	9002      	str	r0, [sp, #8]
 8023564:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023566:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802356a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802356c:	463a      	mov	r2, r7
 802356e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023572:	e9cd b300 	strd	fp, r3, [sp]
 8023576:	4649      	mov	r1, r9
 8023578:	4653      	mov	r3, sl
 802357a:	f7ff fd61 	bl	8023040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802357e:	e77e      	b.n	802347e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023580:	142a      	asrs	r2, r5, #16
 8023582:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023586:	1433      	asrs	r3, r6, #16
 8023588:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802358c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023590:	085a      	lsrs	r2, r3, #1
 8023592:	07dc      	lsls	r4, r3, #31
 8023594:	5cba      	ldrb	r2, [r7, r2]
 8023596:	bf54      	ite	pl
 8023598:	f002 020f 	andpl.w	r2, r2, #15
 802359c:	1112      	asrmi	r2, r2, #4
 802359e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80235a2:	b2d2      	uxtb	r2, r2
 80235a4:	2900      	cmp	r1, #0
 80235a6:	f000 8093 	beq.w	80236d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80235aa:	1c5c      	adds	r4, r3, #1
 80235ac:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80235b0:	07e4      	lsls	r4, r4, #31
 80235b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235b6:	bf54      	ite	pl
 80235b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235c4:	fa5f f48c 	uxtb.w	r4, ip
 80235c8:	9412      	str	r4, [sp, #72]	; 0x48
 80235ca:	b300      	cbz	r0, 802360e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235cc:	4453      	add	r3, sl
 80235ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235d2:	07dc      	lsls	r4, r3, #31
 80235d4:	f103 0301 	add.w	r3, r3, #1
 80235d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235dc:	bf54      	ite	pl
 80235de:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235e2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235ea:	fa5f f48c 	uxtb.w	r4, ip
 80235ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80235f4:	07dc      	lsls	r4, r3, #31
 80235f6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235fa:	bf54      	ite	pl
 80235fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023600:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023604:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023608:	fa5f f38c 	uxtb.w	r3, ip
 802360c:	9313      	str	r3, [sp, #76]	; 0x4c
 802360e:	b289      	uxth	r1, r1
 8023610:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023612:	b280      	uxth	r0, r0
 8023614:	fb01 f300 	mul.w	r3, r1, r0
 8023618:	0109      	lsls	r1, r1, #4
 802361a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802361e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023622:	1ac9      	subs	r1, r1, r3
 8023624:	b280      	uxth	r0, r0
 8023626:	b289      	uxth	r1, r1
 8023628:	ebac 0c00 	sub.w	ip, ip, r0
 802362c:	4361      	muls	r1, r4
 802362e:	fa1f fc8c 	uxth.w	ip, ip
 8023632:	fb02 120c 	mla	r2, r2, ip, r1
 8023636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023638:	fb00 2001 	mla	r0, r0, r1, r2
 802363c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802363e:	fb03 0302 	mla	r3, r3, r2, r0
 8023642:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023646:	2b00      	cmp	r3, #0
 8023648:	d039      	beq.n	80236be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802364a:	4a2d      	ldr	r2, [pc, #180]	; (8023700 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802364c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023650:	6810      	ldr	r0, [r2, #0]
 8023652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023654:	fa5f fc80 	uxtb.w	ip, r0
 8023658:	4353      	muls	r3, r2
 802365a:	1c5a      	adds	r2, r3, #1
 802365c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023660:	121b      	asrs	r3, r3, #8
 8023662:	b29a      	uxth	r2, r3
 8023664:	43db      	mvns	r3, r3
 8023666:	fb1c fc02 	smulbb	ip, ip, r2
 802366a:	b2db      	uxtb	r3, r3
 802366c:	fb01 c103 	mla	r1, r1, r3, ip
 8023670:	b289      	uxth	r1, r1
 8023672:	f101 0c01 	add.w	ip, r1, #1
 8023676:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802367a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802367e:	fb1c fc03 	smulbb	ip, ip, r3
 8023682:	1209      	asrs	r1, r1, #8
 8023684:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023688:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802368c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023690:	fb01 c102 	mla	r1, r1, r2, ip
 8023694:	b289      	uxth	r1, r1
 8023696:	f101 0c01 	add.w	ip, r1, #1
 802369a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802369e:	1209      	asrs	r1, r1, #8
 80236a0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80236a4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80236a8:	fb11 f303 	smulbb	r3, r1, r3
 80236ac:	fb00 3002 	mla	r0, r0, r2, r3
 80236b0:	b280      	uxth	r0, r0
 80236b2:	1c42      	adds	r2, r0, #1
 80236b4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80236b8:	1200      	asrs	r0, r0, #8
 80236ba:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80236be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80236c0:	f10e 0e03 	add.w	lr, lr, #3
 80236c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80236c8:	441d      	add	r5, r3
 80236ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80236cc:	441e      	add	r6, r3
 80236ce:	e604      	b.n	80232da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80236d0:	2800      	cmp	r0, #0
 80236d2:	d09c      	beq.n	802360e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80236d4:	4453      	add	r3, sl
 80236d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80236da:	07db      	lsls	r3, r3, #31
 80236dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80236e0:	bf54      	ite	pl
 80236e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80236e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80236ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80236ee:	fa5f f38c 	uxtb.w	r3, ip
 80236f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80236f4:	e78b      	b.n	802360e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80236f6:	b017      	add	sp, #92	; 0x5c
 80236f8:	ecbd 8b08 	vpop	{d8-d11}
 80236fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023700:	2000bbbc 	.word	0x2000bbbc

08023704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023708:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802370c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023710:	2800      	cmp	r0, #0
 8023712:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023716:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802371a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802371e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023722:	db6b      	blt.n	80237fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023724:	4580      	cmp	r8, r0
 8023726:	dd69      	ble.n	80237fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023728:	f1bc 0f00 	cmp.w	ip, #0
 802372c:	db66      	blt.n	80237fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802372e:	45e1      	cmp	r9, ip
 8023730:	dd64      	ble.n	80237fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023732:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023736:	f01e 0f01 	tst.w	lr, #1
 802373a:	5d16      	ldrb	r6, [r2, r4]
 802373c:	bf0c      	ite	eq
 802373e:	f006 060f 	andeq.w	r6, r6, #15
 8023742:	1136      	asrne	r6, r6, #4
 8023744:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023748:	b2f6      	uxtb	r6, r6
 802374a:	f110 0a01 	adds.w	sl, r0, #1
 802374e:	d457      	bmi.n	8023800 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023750:	45d0      	cmp	r8, sl
 8023752:	dd55      	ble.n	8023800 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023754:	f1bc 0f00 	cmp.w	ip, #0
 8023758:	db52      	blt.n	8023800 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802375a:	45e1      	cmp	r9, ip
 802375c:	dd50      	ble.n	8023800 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802375e:	2f00      	cmp	r7, #0
 8023760:	f000 80a5 	beq.w	80238ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023764:	f10e 0b01 	add.w	fp, lr, #1
 8023768:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802376c:	f01b 0f01 	tst.w	fp, #1
 8023770:	5d14      	ldrb	r4, [r2, r4]
 8023772:	bf0c      	ite	eq
 8023774:	f004 040f 	andeq.w	r4, r4, #15
 8023778:	1124      	asrne	r4, r4, #4
 802377a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802377e:	b2e4      	uxtb	r4, r4
 8023780:	2d00      	cmp	r5, #0
 8023782:	f000 808f 	beq.w	80238a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023786:	2800      	cmp	r0, #0
 8023788:	f10c 0c01 	add.w	ip, ip, #1
 802378c:	db3c      	blt.n	8023808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802378e:	4580      	cmp	r8, r0
 8023790:	dd3a      	ble.n	8023808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023792:	f1bc 0f00 	cmp.w	ip, #0
 8023796:	db37      	blt.n	8023808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023798:	45e1      	cmp	r9, ip
 802379a:	dd35      	ble.n	8023808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802379c:	eb03 0b0e 	add.w	fp, r3, lr
 80237a0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80237a4:	f01b 0f01 	tst.w	fp, #1
 80237a8:	5c10      	ldrb	r0, [r2, r0]
 80237aa:	bf0c      	ite	eq
 80237ac:	f000 000f 	andeq.w	r0, r0, #15
 80237b0:	1100      	asrne	r0, r0, #4
 80237b2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80237b6:	b2c0      	uxtb	r0, r0
 80237b8:	f1ba 0f00 	cmp.w	sl, #0
 80237bc:	db26      	blt.n	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237be:	45d0      	cmp	r8, sl
 80237c0:	dd24      	ble.n	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237c2:	f1bc 0f00 	cmp.w	ip, #0
 80237c6:	db21      	blt.n	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237c8:	45e1      	cmp	r9, ip
 80237ca:	dd1f      	ble.n	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237cc:	b307      	cbz	r7, 8023810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80237ce:	3301      	adds	r3, #1
 80237d0:	449e      	add	lr, r3
 80237d2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80237d6:	f01e 0f01 	tst.w	lr, #1
 80237da:	5cd3      	ldrb	r3, [r2, r3]
 80237dc:	bf0c      	ite	eq
 80237de:	f003 030f 	andeq.w	r3, r3, #15
 80237e2:	111b      	asrne	r3, r3, #4
 80237e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237e8:	b2db      	uxtb	r3, r3
 80237ea:	2f0f      	cmp	r7, #15
 80237ec:	d911      	bls.n	8023812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80237ee:	4b32      	ldr	r3, [pc, #200]	; (80238b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80237f0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80237f4:	4a31      	ldr	r2, [pc, #196]	; (80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80237f6:	4832      	ldr	r0, [pc, #200]	; (80238c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80237f8:	f001 fff8 	bl	80257ec <__assert_func>
 80237fc:	2600      	movs	r6, #0
 80237fe:	e7a4      	b.n	802374a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023800:	2400      	movs	r4, #0
 8023802:	e7bd      	b.n	8023780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023804:	463c      	mov	r4, r7
 8023806:	e7be      	b.n	8023786 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023808:	2000      	movs	r0, #0
 802380a:	e7d5      	b.n	80237b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802380c:	2300      	movs	r3, #0
 802380e:	e7ec      	b.n	80237ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023810:	463b      	mov	r3, r7
 8023812:	2d0f      	cmp	r5, #15
 8023814:	d8eb      	bhi.n	80237ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023816:	b2bf      	uxth	r7, r7
 8023818:	b2ad      	uxth	r5, r5
 802381a:	fb07 f205 	mul.w	r2, r7, r5
 802381e:	013f      	lsls	r7, r7, #4
 8023820:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023824:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023828:	1abf      	subs	r7, r7, r2
 802382a:	b2ad      	uxth	r5, r5
 802382c:	b2bf      	uxth	r7, r7
 802382e:	ebac 0c05 	sub.w	ip, ip, r5
 8023832:	437c      	muls	r4, r7
 8023834:	fa1f fc8c 	uxth.w	ip, ip
 8023838:	fb06 440c 	mla	r4, r6, ip, r4
 802383c:	fb05 4400 	mla	r4, r5, r0, r4
 8023840:	fb02 4303 	mla	r3, r2, r3, r4
 8023844:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023848:	b353      	cbz	r3, 80238a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802384a:	4a1e      	ldr	r2, [pc, #120]	; (80238c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802384c:	7808      	ldrb	r0, [r1, #0]
 802384e:	6814      	ldr	r4, [r2, #0]
 8023850:	b29a      	uxth	r2, r3
 8023852:	43db      	mvns	r3, r3
 8023854:	b2e5      	uxtb	r5, r4
 8023856:	b2db      	uxtb	r3, r3
 8023858:	fb15 f502 	smulbb	r5, r5, r2
 802385c:	fb00 5003 	mla	r0, r0, r3, r5
 8023860:	b280      	uxth	r0, r0
 8023862:	1c45      	adds	r5, r0, #1
 8023864:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023868:	784d      	ldrb	r5, [r1, #1]
 802386a:	fb15 f503 	smulbb	r5, r5, r3
 802386e:	1200      	asrs	r0, r0, #8
 8023870:	7008      	strb	r0, [r1, #0]
 8023872:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023876:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802387a:	fb00 5002 	mla	r0, r0, r2, r5
 802387e:	b280      	uxth	r0, r0
 8023880:	1c45      	adds	r5, r0, #1
 8023882:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023886:	1200      	asrs	r0, r0, #8
 8023888:	7048      	strb	r0, [r1, #1]
 802388a:	7888      	ldrb	r0, [r1, #2]
 802388c:	fb10 f303 	smulbb	r3, r0, r3
 8023890:	fb04 3202 	mla	r2, r4, r2, r3
 8023894:	b292      	uxth	r2, r2
 8023896:	1c53      	adds	r3, r2, #1
 8023898:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802389c:	1212      	asrs	r2, r2, #8
 802389e:	708a      	strb	r2, [r1, #2]
 80238a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238a4:	2f0f      	cmp	r7, #15
 80238a6:	d8a2      	bhi.n	80237ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80238a8:	462b      	mov	r3, r5
 80238aa:	4628      	mov	r0, r5
 80238ac:	e7b3      	b.n	8023816 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80238ae:	2d00      	cmp	r5, #0
 80238b0:	d1a8      	bne.n	8023804 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80238b2:	462c      	mov	r4, r5
 80238b4:	e7f8      	b.n	80238a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80238b6:	bf00      	nop
 80238b8:	0802af5d 	.word	0x0802af5d
 80238bc:	0802b456 	.word	0x0802b456
 80238c0:	0802b026 	.word	0x0802b026
 80238c4:	2000bbbc 	.word	0x2000bbbc

080238c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80238c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238cc:	ed2d 8b08 	vpush	{d8-d11}
 80238d0:	b095      	sub	sp, #84	; 0x54
 80238d2:	461c      	mov	r4, r3
 80238d4:	eeb0 aa40 	vmov.f32	s20, s0
 80238d8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80238dc:	eef0 9a60 	vmov.f32	s19, s1
 80238e0:	920e      	str	r2, [sp, #56]	; 0x38
 80238e2:	eeb0 9a41 	vmov.f32	s18, s2
 80238e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80238e8:	eeb0 8a62 	vmov.f32	s16, s5
 80238ec:	9307      	str	r3, [sp, #28]
 80238ee:	eef0 8a43 	vmov.f32	s17, s6
 80238f2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80238f6:	eef0 ba44 	vmov.f32	s23, s8
 80238fa:	9013      	str	r0, [sp, #76]	; 0x4c
 80238fc:	eeb0 ba64 	vmov.f32	s22, s9
 8023900:	9109      	str	r1, [sp, #36]	; 0x24
 8023902:	eef0 aa45 	vmov.f32	s21, s10
 8023906:	9308      	str	r3, [sp, #32]
 8023908:	6850      	ldr	r0, [r2, #4]
 802390a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802390e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8023912:	fb00 1803 	mla	r8, r0, r3, r1
 8023916:	6813      	ldr	r3, [r2, #0]
 8023918:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802391c:	4498      	add	r8, r3
 802391e:	9b07      	ldr	r3, [sp, #28]
 8023920:	3301      	adds	r3, #1
 8023922:	f023 0301 	bic.w	r3, r3, #1
 8023926:	930b      	str	r3, [sp, #44]	; 0x2c
 8023928:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802392a:	681f      	ldr	r7, [r3, #0]
 802392c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802392e:	2b00      	cmp	r3, #0
 8023930:	dc03      	bgt.n	802393a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023934:	2b00      	cmp	r3, #0
 8023936:	f340 8238 	ble.w	8023daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802393a:	2c00      	cmp	r4, #0
 802393c:	f340 8109 	ble.w	8023b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023940:	142a      	asrs	r2, r5, #16
 8023942:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023946:	d42b      	bmi.n	80239a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023948:	1c51      	adds	r1, r2, #1
 802394a:	9807      	ldr	r0, [sp, #28]
 802394c:	4288      	cmp	r0, r1
 802394e:	dd2a      	ble.n	80239a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023950:	2b00      	cmp	r3, #0
 8023952:	db28      	blt.n	80239a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023954:	1c59      	adds	r1, r3, #1
 8023956:	9808      	ldr	r0, [sp, #32]
 8023958:	4288      	cmp	r0, r1
 802395a:	dd24      	ble.n	80239a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802395c:	1e63      	subs	r3, r4, #1
 802395e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023960:	fb02 5203 	mla	r2, r2, r3, r5
 8023964:	1412      	asrs	r2, r2, #16
 8023966:	d429      	bmi.n	80239bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023968:	3201      	adds	r2, #1
 802396a:	9907      	ldr	r1, [sp, #28]
 802396c:	4291      	cmp	r1, r2
 802396e:	dd25      	ble.n	80239bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023970:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023972:	fb02 6303 	mla	r3, r2, r3, r6
 8023976:	141b      	asrs	r3, r3, #16
 8023978:	d420      	bmi.n	80239bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802397a:	3301      	adds	r3, #1
 802397c:	9a08      	ldr	r2, [sp, #32]
 802397e:	429a      	cmp	r2, r3
 8023980:	dd1c      	ble.n	80239bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023982:	f108 0e03 	add.w	lr, r8, #3
 8023986:	46a1      	mov	r9, r4
 8023988:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802398c:	f1b9 0f00 	cmp.w	r9, #0
 8023990:	f300 8155 	bgt.w	8023c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023994:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023998:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802399c:	44a0      	add	r8, r4
 802399e:	e0da      	b.n	8023b56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80239a0:	1c50      	adds	r0, r2, #1
 80239a2:	f040 80ce 	bne.w	8023b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239a6:	9907      	ldr	r1, [sp, #28]
 80239a8:	4291      	cmp	r1, r2
 80239aa:	f340 80ca 	ble.w	8023b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239ae:	1c59      	adds	r1, r3, #1
 80239b0:	f2c0 80c7 	blt.w	8023b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239b4:	9a08      	ldr	r2, [sp, #32]
 80239b6:	4293      	cmp	r3, r2
 80239b8:	f280 80c3 	bge.w	8023b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239bc:	46a3      	mov	fp, r4
 80239be:	46c1      	mov	r9, r8
 80239c0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80239c4:	f1bb 0f00 	cmp.w	fp, #0
 80239c8:	dde4      	ble.n	8023994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80239ca:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80239ce:	1428      	asrs	r0, r5, #16
 80239d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80239d4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80239d8:	920a      	str	r2, [sp, #40]	; 0x28
 80239da:	f100 8116 	bmi.w	8023c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80239de:	f100 0c01 	add.w	ip, r0, #1
 80239e2:	9a07      	ldr	r2, [sp, #28]
 80239e4:	4562      	cmp	r2, ip
 80239e6:	f340 8112 	ble.w	8023c0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	f2c0 810f 	blt.w	8023c0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239f0:	f103 0c01 	add.w	ip, r3, #1
 80239f4:	9a08      	ldr	r2, [sp, #32]
 80239f6:	4562      	cmp	r2, ip
 80239f8:	f340 8109 	ble.w	8023c0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239fc:	fb03 030a 	mla	r3, r3, sl, r0
 8023a00:	0858      	lsrs	r0, r3, #1
 8023a02:	07da      	lsls	r2, r3, #31
 8023a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a06:	5c38      	ldrb	r0, [r7, r0]
 8023a08:	bf54      	ite	pl
 8023a0a:	f000 000f 	andpl.w	r0, r0, #15
 8023a0e:	1100      	asrmi	r0, r0, #4
 8023a10:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a14:	b2c0      	uxtb	r0, r0
 8023a16:	2a00      	cmp	r2, #0
 8023a18:	f000 80dd 	beq.w	8023bd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8023a1c:	f103 0e01 	add.w	lr, r3, #1
 8023a20:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023a24:	f01e 0f01 	tst.w	lr, #1
 8023a28:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a2c:	bf0c      	ite	eq
 8023a2e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023a32:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023a36:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a3a:	fa5f fc8c 	uxtb.w	ip, ip
 8023a3e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023a42:	b301      	cbz	r1, 8023a86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023a44:	4453      	add	r3, sl
 8023a46:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a4a:	07da      	lsls	r2, r3, #31
 8023a4c:	f103 0301 	add.w	r3, r3, #1
 8023a50:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a54:	bf54      	ite	pl
 8023a56:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a5a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a5e:	07da      	lsls	r2, r3, #31
 8023a60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a64:	fa5f fc8c 	uxtb.w	ip, ip
 8023a68:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8023a6c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a74:	bf54      	ite	pl
 8023a76:	f00c 030f 	andpl.w	r3, ip, #15
 8023a7a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023a7e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a82:	b2db      	uxtb	r3, r3
 8023a84:	9310      	str	r3, [sp, #64]	; 0x40
 8023a86:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023a8a:	b289      	uxth	r1, r1
 8023a8c:	fb02 f301 	mul.w	r3, r2, r1
 8023a90:	0112      	lsls	r2, r2, #4
 8023a92:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023a96:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8023a9a:	1ad2      	subs	r2, r2, r3
 8023a9c:	fa1f fe81 	uxth.w	lr, r1
 8023aa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023aa2:	b292      	uxth	r2, r2
 8023aa4:	ebac 0c0e 	sub.w	ip, ip, lr
 8023aa8:	434a      	muls	r2, r1
 8023aaa:	fa1f fc8c 	uxth.w	ip, ip
 8023aae:	fb00 200c 	mla	r0, r0, ip, r2
 8023ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ab4:	fb0e 0002 	mla	r0, lr, r2, r0
 8023ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023aba:	fb03 0002 	mla	r0, r3, r2, r0
 8023abe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023ac2:	b3a8      	cbz	r0, 8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023ac4:	4bbb      	ldr	r3, [pc, #748]	; (8023db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023ac6:	28ff      	cmp	r0, #255	; 0xff
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8023ace:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023ad2:	b2db      	uxtb	r3, r3
 8023ad4:	f000 8092 	beq.w	8023bfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8023ad8:	b282      	uxth	r2, r0
 8023ada:	43c0      	mvns	r0, r0
 8023adc:	f899 e000 	ldrb.w	lr, [r9]
 8023ae0:	fb13 f302 	smulbb	r3, r3, r2
 8023ae4:	b2c0      	uxtb	r0, r0
 8023ae6:	fb11 f102 	smulbb	r1, r1, r2
 8023aea:	fb0e 3300 	mla	r3, lr, r0, r3
 8023aee:	fb1c f202 	smulbb	r2, ip, r2
 8023af2:	b29b      	uxth	r3, r3
 8023af4:	f103 0e01 	add.w	lr, r3, #1
 8023af8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023afc:	121b      	asrs	r3, r3, #8
 8023afe:	f889 3000 	strb.w	r3, [r9]
 8023b02:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023b06:	fb03 1100 	mla	r1, r3, r0, r1
 8023b0a:	b289      	uxth	r1, r1
 8023b0c:	1c4b      	adds	r3, r1, #1
 8023b0e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023b12:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023b16:	fb03 2000 	mla	r0, r3, r0, r2
 8023b1a:	1209      	asrs	r1, r1, #8
 8023b1c:	b280      	uxth	r0, r0
 8023b1e:	f889 1001 	strb.w	r1, [r9, #1]
 8023b22:	f100 0c01 	add.w	ip, r0, #1
 8023b26:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023b2a:	1200      	asrs	r0, r0, #8
 8023b2c:	f889 0002 	strb.w	r0, [r9, #2]
 8023b30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b32:	f109 0903 	add.w	r9, r9, #3
 8023b36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023b3a:	441d      	add	r5, r3
 8023b3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b3e:	441e      	add	r6, r3
 8023b40:	e740      	b.n	80239c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023b42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b44:	3c01      	subs	r4, #1
 8023b46:	f108 0803 	add.w	r8, r8, #3
 8023b4a:	441d      	add	r5, r3
 8023b4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b4e:	441e      	add	r6, r3
 8023b50:	e6f3      	b.n	802393a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023b52:	f47f af03 	bne.w	802395c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b58:	2b00      	cmp	r3, #0
 8023b5a:	f340 8126 	ble.w	8023daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b64:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023b68:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023b6c:	eef0 6a48 	vmov.f32	s13, s16
 8023b70:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023b74:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023b78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b7c:	ee16 5a90 	vmov	r5, s13
 8023b80:	eef0 6a68 	vmov.f32	s13, s17
 8023b84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b88:	ee16 6a90 	vmov	r6, s13
 8023b8c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023b90:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023b94:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023b98:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023b9c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ba0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ba4:	ee18 2a10 	vmov	r2, s16
 8023ba8:	eeb0 8a47 	vmov.f32	s16, s14
 8023bac:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bb0:	ee18 2a90 	vmov	r2, s17
 8023bb4:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bb8:	eef0 8a67 	vmov.f32	s17, s15
 8023bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bc0:	932a      	str	r3, [sp, #168]	; 0xa8
 8023bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023bc6:	3b01      	subs	r3, #1
 8023bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8023bca:	bf08      	it	eq
 8023bcc:	4614      	moveq	r4, r2
 8023bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bd0:	bf18      	it	ne
 8023bd2:	461c      	movne	r4, r3
 8023bd4:	e6aa      	b.n	802392c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023bd6:	2900      	cmp	r1, #0
 8023bd8:	f43f af55 	beq.w	8023a86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023bdc:	4453      	add	r3, sl
 8023bde:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023be2:	07db      	lsls	r3, r3, #31
 8023be4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023be8:	bf54      	ite	pl
 8023bea:	f00c 030f 	andpl.w	r3, ip, #15
 8023bee:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023bf2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023bf6:	b2db      	uxtb	r3, r3
 8023bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8023bfa:	e744      	b.n	8023a86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023bfc:	f889 3000 	strb.w	r3, [r9]
 8023c00:	f889 1001 	strb.w	r1, [r9, #1]
 8023c04:	f889 c002 	strb.w	ip, [r9, #2]
 8023c08:	e792      	b.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c0a:	1c42      	adds	r2, r0, #1
 8023c0c:	d190      	bne.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c0e:	9a07      	ldr	r2, [sp, #28]
 8023c10:	4282      	cmp	r2, r0
 8023c12:	dd8d      	ble.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c14:	1c5a      	adds	r2, r3, #1
 8023c16:	db8b      	blt.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c18:	9a08      	ldr	r2, [sp, #32]
 8023c1a:	429a      	cmp	r2, r3
 8023c1c:	dd88      	ble.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c20:	9105      	str	r1, [sp, #20]
 8023c22:	4649      	mov	r1, r9
 8023c24:	9002      	str	r0, [sp, #8]
 8023c26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023c28:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023c2c:	9b08      	ldr	r3, [sp, #32]
 8023c2e:	463a      	mov	r2, r7
 8023c30:	9301      	str	r3, [sp, #4]
 8023c32:	9b07      	ldr	r3, [sp, #28]
 8023c34:	9300      	str	r3, [sp, #0]
 8023c36:	4653      	mov	r3, sl
 8023c38:	f7ff fd64 	bl	8023704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023c3c:	e778      	b.n	8023b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c3e:	142a      	asrs	r2, r5, #16
 8023c40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023c44:	1433      	asrs	r3, r6, #16
 8023c46:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023c4a:	fb0a 2303 	mla	r3, sl, r3, r2
 8023c4e:	085a      	lsrs	r2, r3, #1
 8023c50:	07d9      	lsls	r1, r3, #31
 8023c52:	5cba      	ldrb	r2, [r7, r2]
 8023c54:	bf54      	ite	pl
 8023c56:	f002 020f 	andpl.w	r2, r2, #15
 8023c5a:	1112      	asrmi	r2, r2, #4
 8023c5c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c60:	b2d2      	uxtb	r2, r2
 8023c62:	2800      	cmp	r0, #0
 8023c64:	f000 808a 	beq.w	8023d7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023c68:	f103 0b01 	add.w	fp, r3, #1
 8023c6c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023c70:	f01b 0f01 	tst.w	fp, #1
 8023c74:	5c79      	ldrb	r1, [r7, r1]
 8023c76:	bf0c      	ite	eq
 8023c78:	f001 010f 	andeq.w	r1, r1, #15
 8023c7c:	1109      	asrne	r1, r1, #4
 8023c7e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c82:	b2c9      	uxtb	r1, r1
 8023c84:	9111      	str	r1, [sp, #68]	; 0x44
 8023c86:	f1bc 0f00 	cmp.w	ip, #0
 8023c8a:	d019      	beq.n	8023cc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c8c:	4453      	add	r3, sl
 8023c8e:	0859      	lsrs	r1, r3, #1
 8023c90:	f013 0f01 	tst.w	r3, #1
 8023c94:	f103 0301 	add.w	r3, r3, #1
 8023c98:	5c79      	ldrb	r1, [r7, r1]
 8023c9a:	bf0c      	ite	eq
 8023c9c:	f001 010f 	andeq.w	r1, r1, #15
 8023ca0:	1109      	asrne	r1, r1, #4
 8023ca2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ca6:	b2c9      	uxtb	r1, r1
 8023ca8:	910d      	str	r1, [sp, #52]	; 0x34
 8023caa:	0859      	lsrs	r1, r3, #1
 8023cac:	07db      	lsls	r3, r3, #31
 8023cae:	5c79      	ldrb	r1, [r7, r1]
 8023cb0:	bf54      	ite	pl
 8023cb2:	f001 010f 	andpl.w	r1, r1, #15
 8023cb6:	1109      	asrmi	r1, r1, #4
 8023cb8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023cbc:	b2c9      	uxtb	r1, r1
 8023cbe:	9112      	str	r1, [sp, #72]	; 0x48
 8023cc0:	b280      	uxth	r0, r0
 8023cc2:	fa1f fc8c 	uxth.w	ip, ip
 8023cc6:	fb00 f30c 	mul.w	r3, r0, ip
 8023cca:	0100      	lsls	r0, r0, #4
 8023ccc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023cd0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023cd4:	1ac0      	subs	r0, r0, r3
 8023cd6:	fa1f fc8c 	uxth.w	ip, ip
 8023cda:	b280      	uxth	r0, r0
 8023cdc:	eba1 010c 	sub.w	r1, r1, ip
 8023ce0:	fa1f fb81 	uxth.w	fp, r1
 8023ce4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023ce6:	4348      	muls	r0, r1
 8023ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023cea:	fb02 020b 	mla	r2, r2, fp, r0
 8023cee:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023cf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cf4:	fb03 c302 	mla	r3, r3, r2, ip
 8023cf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023cfc:	b3ab      	cbz	r3, 8023d6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023cfe:	4a2d      	ldr	r2, [pc, #180]	; (8023db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023d00:	2bff      	cmp	r3, #255	; 0xff
 8023d02:	6811      	ldr	r1, [r2, #0]
 8023d04:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023d08:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023d0c:	b2c9      	uxtb	r1, r1
 8023d0e:	d045      	beq.n	8023d9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023d10:	b298      	uxth	r0, r3
 8023d12:	43db      	mvns	r3, r3
 8023d14:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023d18:	fb11 f100 	smulbb	r1, r1, r0
 8023d1c:	b2db      	uxtb	r3, r3
 8023d1e:	fb1c fc00 	smulbb	ip, ip, r0
 8023d22:	fb02 1103 	mla	r1, r2, r3, r1
 8023d26:	fb1b f000 	smulbb	r0, fp, r0
 8023d2a:	b289      	uxth	r1, r1
 8023d2c:	1c4a      	adds	r2, r1, #1
 8023d2e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d32:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023d36:	fb02 cc03 	mla	ip, r2, r3, ip
 8023d3a:	1209      	asrs	r1, r1, #8
 8023d3c:	fa1f fc8c 	uxth.w	ip, ip
 8023d40:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023d44:	f10c 0201 	add.w	r2, ip, #1
 8023d48:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023d4c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023d50:	fb02 0303 	mla	r3, r2, r3, r0
 8023d54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023d58:	b29b      	uxth	r3, r3
 8023d5a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023d5e:	1c5a      	adds	r2, r3, #1
 8023d60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d64:	121b      	asrs	r3, r3, #8
 8023d66:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023d6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d6c:	f10e 0e03 	add.w	lr, lr, #3
 8023d70:	f109 39ff 	add.w	r9, r9, #4294967295
 8023d74:	441d      	add	r5, r3
 8023d76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d78:	441e      	add	r6, r3
 8023d7a:	e607      	b.n	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023d7c:	f1bc 0f00 	cmp.w	ip, #0
 8023d80:	d09e      	beq.n	8023cc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d82:	4453      	add	r3, sl
 8023d84:	0859      	lsrs	r1, r3, #1
 8023d86:	07db      	lsls	r3, r3, #31
 8023d88:	5c79      	ldrb	r1, [r7, r1]
 8023d8a:	bf54      	ite	pl
 8023d8c:	f001 010f 	andpl.w	r1, r1, #15
 8023d90:	1109      	asrmi	r1, r1, #4
 8023d92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023d96:	b2c9      	uxtb	r1, r1
 8023d98:	910d      	str	r1, [sp, #52]	; 0x34
 8023d9a:	e791      	b.n	8023cc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d9c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023da0:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023da4:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023da8:	e7df      	b.n	8023d6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023daa:	b015      	add	sp, #84	; 0x54
 8023dac:	ecbd 8b08 	vpop	{d8-d11}
 8023db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023db4:	2000bbbc 	.word	0x2000bbbc

08023db8 <CRC_Lock>:
 8023db8:	4a1d      	ldr	r2, [pc, #116]	; (8023e30 <CRC_Lock+0x78>)
 8023dba:	b530      	push	{r4, r5, lr}
 8023dbc:	6813      	ldr	r3, [r2, #0]
 8023dbe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023dc2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023dc6:	f023 0301 	bic.w	r3, r3, #1
 8023dca:	6013      	str	r3, [r2, #0]
 8023dcc:	4b19      	ldr	r3, [pc, #100]	; (8023e34 <CRC_Lock+0x7c>)
 8023dce:	681a      	ldr	r2, [r3, #0]
 8023dd0:	4022      	ands	r2, r4
 8023dd2:	42aa      	cmp	r2, r5
 8023dd4:	d005      	beq.n	8023de2 <CRC_Lock+0x2a>
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023ddc:	4023      	ands	r3, r4
 8023dde:	4293      	cmp	r3, r2
 8023de0:	d11d      	bne.n	8023e1e <CRC_Lock+0x66>
 8023de2:	4b15      	ldr	r3, [pc, #84]	; (8023e38 <CRC_Lock+0x80>)
 8023de4:	681b      	ldr	r3, [r3, #0]
 8023de6:	b9d3      	cbnz	r3, 8023e1e <CRC_Lock+0x66>
 8023de8:	4a14      	ldr	r2, [pc, #80]	; (8023e3c <CRC_Lock+0x84>)
 8023dea:	6813      	ldr	r3, [r2, #0]
 8023dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023df0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023df4:	d006      	beq.n	8023e04 <CRC_Lock+0x4c>
 8023df6:	6813      	ldr	r3, [r2, #0]
 8023df8:	f240 4283 	movw	r2, #1155	; 0x483
 8023dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e00:	4293      	cmp	r3, r2
 8023e02:	d10c      	bne.n	8023e1e <CRC_Lock+0x66>
 8023e04:	4b0e      	ldr	r3, [pc, #56]	; (8023e40 <CRC_Lock+0x88>)
 8023e06:	2201      	movs	r2, #1
 8023e08:	601a      	str	r2, [r3, #0]
 8023e0a:	681a      	ldr	r2, [r3, #0]
 8023e0c:	2a00      	cmp	r2, #0
 8023e0e:	d1fc      	bne.n	8023e0a <CRC_Lock+0x52>
 8023e10:	4b0c      	ldr	r3, [pc, #48]	; (8023e44 <CRC_Lock+0x8c>)
 8023e12:	6018      	str	r0, [r3, #0]
 8023e14:	6818      	ldr	r0, [r3, #0]
 8023e16:	1a43      	subs	r3, r0, r1
 8023e18:	4258      	negs	r0, r3
 8023e1a:	4158      	adcs	r0, r3
 8023e1c:	bd30      	pop	{r4, r5, pc}
 8023e1e:	4b0a      	ldr	r3, [pc, #40]	; (8023e48 <CRC_Lock+0x90>)
 8023e20:	2201      	movs	r2, #1
 8023e22:	601a      	str	r2, [r3, #0]
 8023e24:	681a      	ldr	r2, [r3, #0]
 8023e26:	2a00      	cmp	r2, #0
 8023e28:	d1fc      	bne.n	8023e24 <CRC_Lock+0x6c>
 8023e2a:	4b08      	ldr	r3, [pc, #32]	; (8023e4c <CRC_Lock+0x94>)
 8023e2c:	e7f1      	b.n	8023e12 <CRC_Lock+0x5a>
 8023e2e:	bf00      	nop
 8023e30:	e0002000 	.word	0xe0002000
 8023e34:	e000ed00 	.word	0xe000ed00
 8023e38:	e0042000 	.word	0xe0042000
 8023e3c:	5c001000 	.word	0x5c001000
 8023e40:	58024c08 	.word	0x58024c08
 8023e44:	58024c00 	.word	0x58024c00
 8023e48:	40023008 	.word	0x40023008
 8023e4c:	40023000 	.word	0x40023000

08023e50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023e50:	6101      	str	r1, [r0, #16]
 8023e52:	4770      	bx	lr

08023e54 <_ZN8touchgfx8Gestures4tickEv>:
 8023e54:	7b83      	ldrb	r3, [r0, #14]
 8023e56:	b14b      	cbz	r3, 8023e6c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023e58:	8903      	ldrh	r3, [r0, #8]
 8023e5a:	3301      	adds	r3, #1
 8023e5c:	b29b      	uxth	r3, r3
 8023e5e:	2b07      	cmp	r3, #7
 8023e60:	8103      	strh	r3, [r0, #8]
 8023e62:	bf81      	itttt	hi
 8023e64:	2300      	movhi	r3, #0
 8023e66:	8143      	strhhi	r3, [r0, #10]
 8023e68:	8183      	strhhi	r3, [r0, #12]
 8023e6a:	7383      	strbhi	r3, [r0, #14]
 8023e6c:	4770      	bx	lr
	...

08023e70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023e70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023e74:	4604      	mov	r4, r0
 8023e76:	4698      	mov	r8, r3
 8023e78:	8880      	ldrh	r0, [r0, #4]
 8023e7a:	4617      	mov	r7, r2
 8023e7c:	4b1d      	ldr	r3, [pc, #116]	; (8023ef4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023e7e:	460e      	mov	r6, r1
 8023e80:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023e84:	eba8 0000 	sub.w	r0, r8, r0
 8023e88:	9300      	str	r3, [sp, #0]
 8023e8a:	2300      	movs	r3, #0
 8023e8c:	b280      	uxth	r0, r0
 8023e8e:	8aa2      	ldrh	r2, [r4, #20]
 8023e90:	f88d 3004 	strb.w	r3, [sp, #4]
 8023e94:	b203      	sxth	r3, r0
 8023e96:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023e9a:	88e1      	ldrh	r1, [r4, #6]
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023ea2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023ea6:	bfb8      	it	lt
 8023ea8:	4240      	neglt	r0, r0
 8023eaa:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023eae:	bfb8      	it	lt
 8023eb0:	b203      	sxthlt	r3, r0
 8023eb2:	4293      	cmp	r3, r2
 8023eb4:	dc08      	bgt.n	8023ec8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023eb6:	1a69      	subs	r1, r5, r1
 8023eb8:	b289      	uxth	r1, r1
 8023eba:	b20b      	sxth	r3, r1
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	bfbc      	itt	lt
 8023ec0:	4249      	neglt	r1, r1
 8023ec2:	b20b      	sxthlt	r3, r1
 8023ec4:	429a      	cmp	r2, r3
 8023ec6:	da13      	bge.n	8023ef0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023ec8:	6920      	ldr	r0, [r4, #16]
 8023eca:	4669      	mov	r1, sp
 8023ecc:	eba8 0606 	sub.w	r6, r8, r6
 8023ed0:	1bef      	subs	r7, r5, r7
 8023ed2:	6803      	ldr	r3, [r0, #0]
 8023ed4:	685b      	ldr	r3, [r3, #4]
 8023ed6:	4798      	blx	r3
 8023ed8:	2300      	movs	r3, #0
 8023eda:	2001      	movs	r0, #1
 8023edc:	8166      	strh	r6, [r4, #10]
 8023ede:	8123      	strh	r3, [r4, #8]
 8023ee0:	81a7      	strh	r7, [r4, #12]
 8023ee2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023ee6:	80e5      	strh	r5, [r4, #6]
 8023ee8:	73a0      	strb	r0, [r4, #14]
 8023eea:	b004      	add	sp, #16
 8023eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ef0:	2000      	movs	r0, #0
 8023ef2:	e7fa      	b.n	8023eea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023ef4:	08029378 	.word	0x08029378

08023ef8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023efa:	461e      	mov	r6, r3
 8023efc:	1e4b      	subs	r3, r1, #1
 8023efe:	b085      	sub	sp, #20
 8023f00:	4604      	mov	r4, r0
 8023f02:	2b01      	cmp	r3, #1
 8023f04:	460d      	mov	r5, r1
 8023f06:	4617      	mov	r7, r2
 8023f08:	d84b      	bhi.n	8023fa2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023f0a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023f0e:	1cd3      	adds	r3, r2, #3
 8023f10:	b29b      	uxth	r3, r3
 8023f12:	2b06      	cmp	r3, #6
 8023f14:	d916      	bls.n	8023f44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023f16:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023fb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023f1a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f1e:	f8cd c004 	str.w	ip, [sp, #4]
 8023f22:	f04f 0c00 	mov.w	ip, #0
 8023f26:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f2a:	6900      	ldr	r0, [r0, #16]
 8023f2c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f30:	a901      	add	r1, sp, #4
 8023f32:	f88d c008 	strb.w	ip, [sp, #8]
 8023f36:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f3e:	6803      	ldr	r3, [r0, #0]
 8023f40:	689b      	ldr	r3, [r3, #8]
 8023f42:	4798      	blx	r3
 8023f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f48:	1cd3      	adds	r3, r2, #3
 8023f4a:	b29b      	uxth	r3, r3
 8023f4c:	2b06      	cmp	r3, #6
 8023f4e:	d916      	bls.n	8023f7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023f50:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023fb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023f54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f58:	f8cd c004 	str.w	ip, [sp, #4]
 8023f5c:	f04f 0c01 	mov.w	ip, #1
 8023f60:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f64:	6920      	ldr	r0, [r4, #16]
 8023f66:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f6a:	a901      	add	r1, sp, #4
 8023f6c:	f88d c008 	strb.w	ip, [sp, #8]
 8023f70:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f78:	6803      	ldr	r3, [r0, #0]
 8023f7a:	689b      	ldr	r3, [r3, #8]
 8023f7c:	4798      	blx	r3
 8023f7e:	4b0b      	ldr	r3, [pc, #44]	; (8023fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023f80:	a901      	add	r1, sp, #4
 8023f82:	6920      	ldr	r0, [r4, #16]
 8023f84:	9301      	str	r3, [sp, #4]
 8023f86:	2300      	movs	r3, #0
 8023f88:	f88d 5008 	strb.w	r5, [sp, #8]
 8023f8c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023f90:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023f94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f98:	6803      	ldr	r3, [r0, #0]
 8023f9a:	681b      	ldr	r3, [r3, #0]
 8023f9c:	4798      	blx	r3
 8023f9e:	b005      	add	sp, #20
 8023fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023fa2:	2900      	cmp	r1, #0
 8023fa4:	d1eb      	bne.n	8023f7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fa6:	80a2      	strh	r2, [r4, #4]
 8023fa8:	80c6      	strh	r6, [r0, #6]
 8023faa:	e7e8      	b.n	8023f7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fac:	08029364 	.word	0x08029364
 8023fb0:	0802938c 	.word	0x0802938c

08023fb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023fb4:	10c9      	asrs	r1, r1, #3
 8023fb6:	2900      	cmp	r1, #0
 8023fb8:	bfb8      	it	lt
 8023fba:	4249      	neglt	r1, r1
 8023fbc:	2801      	cmp	r0, #1
 8023fbe:	d108      	bne.n	8023fd2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023fc0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023fc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023fc8:	4601      	mov	r1, r0
 8023fca:	dd02      	ble.n	8023fd2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023fcc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023fd0:	4770      	bx	lr
 8023fd2:	29ff      	cmp	r1, #255	; 0xff
 8023fd4:	bfa8      	it	ge
 8023fd6:	21ff      	movge	r1, #255	; 0xff
 8023fd8:	4608      	mov	r0, r1
 8023fda:	4770      	bx	lr

08023fdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fe0:	688c      	ldr	r4, [r1, #8]
 8023fe2:	b087      	sub	sp, #28
 8023fe4:	4607      	mov	r7, r0
 8023fe6:	2c00      	cmp	r4, #0
 8023fe8:	db2b      	blt.n	8024042 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023fea:	6803      	ldr	r3, [r0, #0]
 8023fec:	68da      	ldr	r2, [r3, #12]
 8023fee:	42a2      	cmp	r2, r4
 8023ff0:	dd27      	ble.n	8024042 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023ff2:	681a      	ldr	r2, [r3, #0]
 8023ff4:	691e      	ldr	r6, [r3, #16]
 8023ff6:	68cd      	ldr	r5, [r1, #12]
 8023ff8:	fb06 2604 	mla	r6, r6, r4, r2
 8023ffc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024000:	698a      	ldr	r2, [r1, #24]
 8024002:	f893 a004 	ldrb.w	sl, [r3, #4]
 8024006:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802400a:	9205      	str	r2, [sp, #20]
 802400c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024010:	9b05      	ldr	r3, [sp, #20]
 8024012:	6839      	ldr	r1, [r7, #0]
 8024014:	eb03 0c02 	add.w	ip, r3, r2
 8024018:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802401c:	6889      	ldr	r1, [r1, #8]
 802401e:	1898      	adds	r0, r3, r2
 8024020:	4288      	cmp	r0, r1
 8024022:	db02      	blt.n	802402a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024024:	1a8b      	subs	r3, r1, r2
 8024026:	2b00      	cmp	r3, #0
 8024028:	dd09      	ble.n	802403e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802402a:	6878      	ldr	r0, [r7, #4]
 802402c:	6801      	ldr	r1, [r0, #0]
 802402e:	9400      	str	r4, [sp, #0]
 8024030:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024034:	4653      	mov	r3, sl
 8024036:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802403a:	4631      	mov	r1, r6
 802403c:	47d8      	blx	fp
 802403e:	3d01      	subs	r5, #1
 8024040:	d1e4      	bne.n	802400c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024042:	b007      	add	sp, #28
 8024044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024048 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024048:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802404c:	b90b      	cbnz	r3, 8024052 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802404e:	f001 b974 	b.w	802533a <_ZN8touchgfx7Outline6lineToEii>
 8024052:	4770      	bx	lr

08024054 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024058:	4604      	mov	r4, r0
 802405a:	2600      	movs	r6, #0
 802405c:	4b8e      	ldr	r3, [pc, #568]	; (8024298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802405e:	f100 0518 	add.w	r5, r0, #24
 8024062:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8024066:	b086      	sub	sp, #24
 8024068:	4690      	mov	r8, r2
 802406a:	e9c0 3100 	strd	r3, r1, [r0]
 802406e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8024072:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024076:	4628      	mov	r0, r5
 8024078:	f001 fb75 	bl	8025766 <_ZN8touchgfx15RenderingBufferC1Ev>
 802407c:	4638      	mov	r0, r7
 802407e:	f000 fb45 	bl	802470c <_ZN8touchgfx7OutlineC1Ev>
 8024082:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8024086:	f001 fb23 	bl	80256d0 <_ZN8touchgfx8ScanlineC1Ev>
 802408a:	2301      	movs	r3, #1
 802408c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8024090:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8024094:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024098:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 802409c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80240a0:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80240a4:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80240a8:	f7f3 fcb0 	bl	8017a0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80240ac:	b928      	cbnz	r0, 80240ba <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80240ae:	4b7b      	ldr	r3, [pc, #492]	; (802429c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80240b0:	2118      	movs	r1, #24
 80240b2:	4a7b      	ldr	r2, [pc, #492]	; (80242a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80240b4:	487b      	ldr	r0, [pc, #492]	; (80242a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80240b6:	f001 fb99 	bl	80257ec <__assert_func>
 80240ba:	f9b8 2000 	ldrsh.w	r2, [r8]
 80240be:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80240c2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80240c6:	4410      	add	r0, r2
 80240c8:	9602      	str	r6, [sp, #8]
 80240ca:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80240ce:	b280      	uxth	r0, r0
 80240d0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80240d4:	fa0f fa80 	sxth.w	sl, r0
 80240d8:	f1ba 0f00 	cmp.w	sl, #0
 80240dc:	dd70      	ble.n	80241c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240de:	4591      	cmp	r9, r2
 80240e0:	dd6e      	ble.n	80241c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240e2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80240e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80240ea:	440b      	add	r3, r1
 80240ec:	b29b      	uxth	r3, r3
 80240ee:	b21e      	sxth	r6, r3
 80240f0:	2e00      	cmp	r6, #0
 80240f2:	dd65      	ble.n	80241c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240f4:	458e      	cmp	lr, r1
 80240f6:	dd63      	ble.n	80241c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240f8:	45d1      	cmp	r9, sl
 80240fa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80240fe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024102:	bfb8      	it	lt
 8024104:	fa1f f089 	uxthlt.w	r0, r9
 8024108:	45b6      	cmp	lr, r6
 802410a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802410e:	bfb8      	it	lt
 8024110:	fa1f f38e 	uxthlt.w	r3, lr
 8024114:	1a80      	subs	r0, r0, r2
 8024116:	f8ad 100a 	strh.w	r1, [sp, #10]
 802411a:	1a5b      	subs	r3, r3, r1
 802411c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024120:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024124:	f10d 0808 	add.w	r8, sp, #8
 8024128:	ae04      	add	r6, sp, #16
 802412a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802412e:	e886 0003 	stmia.w	r6, {r0, r1}
 8024132:	f8dc 3000 	ldr.w	r3, [ip]
 8024136:	4660      	mov	r0, ip
 8024138:	4631      	mov	r1, r6
 802413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802413c:	4798      	blx	r3
 802413e:	6861      	ldr	r1, [r4, #4]
 8024140:	4640      	mov	r0, r8
 8024142:	3104      	adds	r1, #4
 8024144:	f7f4 ff3a 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024148:	4630      	mov	r0, r6
 802414a:	f7f4 ff4f 	bl	8018fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802414e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024152:	f7f3 fbeb 	bl	801792c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024156:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802415a:	4638      	mov	r0, r7
 802415c:	f000 fab2 	bl	80246c4 <_ZN8touchgfx7Outline5resetEv>
 8024160:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024164:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024168:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 802416c:	015b      	lsls	r3, r3, #5
 802416e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8024172:	0152      	lsls	r2, r2, #5
 8024174:	60e3      	str	r3, [r4, #12]
 8024176:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802417a:	60a2      	str	r2, [r4, #8]
 802417c:	015b      	lsls	r3, r3, #5
 802417e:	6123      	str	r3, [r4, #16]
 8024180:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024184:	015b      	lsls	r3, r3, #5
 8024186:	6163      	str	r3, [r4, #20]
 8024188:	4b47      	ldr	r3, [pc, #284]	; (80242a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802418a:	6818      	ldr	r0, [r3, #0]
 802418c:	6803      	ldr	r3, [r0, #0]
 802418e:	6a1b      	ldr	r3, [r3, #32]
 8024190:	4798      	blx	r3
 8024192:	4606      	mov	r6, r0
 8024194:	f7eb fc68 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8024198:	6803      	ldr	r3, [r0, #0]
 802419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802419c:	4798      	blx	r3
 802419e:	4607      	mov	r7, r0
 80241a0:	f7eb fc62 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80241a4:	6803      	ldr	r3, [r0, #0]
 80241a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241a8:	4798      	blx	r3
 80241aa:	280c      	cmp	r0, #12
 80241ac:	d854      	bhi.n	8024258 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80241ae:	e8df f000 	tbb	[pc, r0]
 80241b2:	554b      	.short	0x554b
 80241b4:	2b6e0a66 	.word	0x2b6e0a66
 80241b8:	5f5f5f3b 	.word	0x5f5f5f3b
 80241bc:	5f5f      	.short	0x5f5f
 80241be:	6e          	.byte	0x6e
 80241bf:	00          	.byte	0x00
 80241c0:	2300      	movs	r3, #0
 80241c2:	9303      	str	r3, [sp, #12]
 80241c4:	e7ae      	b.n	8024124 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80241c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80241ca:	2108      	movs	r1, #8
 80241cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80241d0:	fb92 f1f1 	sdiv	r1, r2, r1
 80241d4:	fb07 1303 	mla	r3, r7, r3, r1
 80241d8:	441e      	add	r6, r3
 80241da:	4253      	negs	r3, r2
 80241dc:	f002 0207 	and.w	r2, r2, #7
 80241e0:	f003 0307 	and.w	r3, r3, #7
 80241e4:	bf58      	it	pl
 80241e6:	425a      	negpl	r2, r3
 80241e8:	b2d2      	uxtb	r2, r2
 80241ea:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80241ee:	4628      	mov	r0, r5
 80241f0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80241f4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80241f6:	e9cd 1700 	strd	r1, r7, [sp]
 80241fa:	4631      	mov	r1, r6
 80241fc:	f001 fabb 	bl	8025776 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024200:	4620      	mov	r0, r4
 8024202:	b006      	add	sp, #24
 8024204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024208:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802420c:	2104      	movs	r1, #4
 802420e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024212:	fb92 f1f1 	sdiv	r1, r2, r1
 8024216:	fb07 1303 	mla	r3, r7, r3, r1
 802421a:	441e      	add	r6, r3
 802421c:	4253      	negs	r3, r2
 802421e:	f002 0203 	and.w	r2, r2, #3
 8024222:	f003 0303 	and.w	r3, r3, #3
 8024226:	e7dd      	b.n	80241e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8024228:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802422c:	2102      	movs	r1, #2
 802422e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024232:	2a00      	cmp	r2, #0
 8024234:	fb92 f1f1 	sdiv	r1, r2, r1
 8024238:	f002 0201 	and.w	r2, r2, #1
 802423c:	fb07 1303 	mla	r3, r7, r3, r1
 8024240:	bfb8      	it	lt
 8024242:	4252      	neglt	r2, r2
 8024244:	441e      	add	r6, r3
 8024246:	e7cf      	b.n	80241e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024248:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802424c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024250:	437b      	muls	r3, r7
 8024252:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024256:	441e      	add	r6, r3
 8024258:	2200      	movs	r2, #0
 802425a:	e7c6      	b.n	80241ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802425c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024260:	2103      	movs	r1, #3
 8024262:	fb07 f203 	mul.w	r2, r7, r3
 8024266:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802426a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802426e:	e7f2      	b.n	8024256 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024270:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024274:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024278:	fb07 2303 	mla	r3, r7, r3, r2
 802427c:	e7eb      	b.n	8024256 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802427e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024282:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024286:	437b      	muls	r3, r7
 8024288:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802428c:	e7e3      	b.n	8024256 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802428e:	4b07      	ldr	r3, [pc, #28]	; (80242ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024290:	2156      	movs	r1, #86	; 0x56
 8024292:	4a03      	ldr	r2, [pc, #12]	; (80242a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024294:	e70e      	b.n	80240b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024296:	bf00      	nop
 8024298:	0802b77c 	.word	0x0802b77c
 802429c:	0802b6c6 	.word	0x0802b6c6
 80242a0:	0802b784 	.word	0x0802b784
 80242a4:	0802b722 	.word	0x0802b722
 80242a8:	2000bb94 	.word	0x2000bb94
 80242ac:	0802b756 	.word	0x0802b756

080242b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80242b0:	6812      	ldr	r2, [r2, #0]
 80242b2:	2a00      	cmp	r2, #0
 80242b4:	db0b      	blt.n	80242ce <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80242b6:	9800      	ldr	r0, [sp, #0]
 80242b8:	6800      	ldr	r0, [r0, #0]
 80242ba:	4290      	cmp	r0, r2
 80242bc:	bfd4      	ite	le
 80242be:	2002      	movle	r0, #2
 80242c0:	2000      	movgt	r0, #0
 80242c2:	680a      	ldr	r2, [r1, #0]
 80242c4:	2a00      	cmp	r2, #0
 80242c6:	da04      	bge.n	80242d2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80242c8:	f040 0004 	orr.w	r0, r0, #4
 80242cc:	4770      	bx	lr
 80242ce:	2001      	movs	r0, #1
 80242d0:	e7f7      	b.n	80242c2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80242d2:	681b      	ldr	r3, [r3, #0]
 80242d4:	4293      	cmp	r3, r2
 80242d6:	bfd8      	it	le
 80242d8:	f040 0008 	orrle.w	r0, r0, #8
 80242dc:	4770      	bx	lr
	...

080242e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80242e0:	4b07      	ldr	r3, [pc, #28]	; (8024300 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80242e2:	b510      	push	{r4, lr}
 80242e4:	781b      	ldrb	r3, [r3, #0]
 80242e6:	2b01      	cmp	r3, #1
 80242e8:	d108      	bne.n	80242fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80242ea:	6843      	ldr	r3, [r0, #4]
 80242ec:	6814      	ldr	r4, [r2, #0]
 80242ee:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80242f2:	680b      	ldr	r3, [r1, #0]
 80242f4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80242f8:	6013      	str	r3, [r2, #0]
 80242fa:	600c      	str	r4, [r1, #0]
 80242fc:	bd10      	pop	{r4, pc}
 80242fe:	bf00      	nop
 8024300:	2000bb8c 	.word	0x2000bb8c

08024304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024306:	b085      	sub	sp, #20
 8024308:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802430c:	4604      	mov	r4, r0
 802430e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024312:	b33b      	cbz	r3, 8024364 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024314:	aa02      	add	r2, sp, #8
 8024316:	a903      	add	r1, sp, #12
 8024318:	f7ff ffe2 	bl	80242e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802431c:	68a3      	ldr	r3, [r4, #8]
 802431e:	9e03      	ldr	r6, [sp, #12]
 8024320:	aa02      	add	r2, sp, #8
 8024322:	9f02      	ldr	r7, [sp, #8]
 8024324:	a903      	add	r1, sp, #12
 8024326:	1af6      	subs	r6, r6, r3
 8024328:	68e3      	ldr	r3, [r4, #12]
 802432a:	4620      	mov	r0, r4
 802432c:	1aff      	subs	r7, r7, r3
 802432e:	f104 0314 	add.w	r3, r4, #20
 8024332:	9603      	str	r6, [sp, #12]
 8024334:	9300      	str	r3, [sp, #0]
 8024336:	f104 0310 	add.w	r3, r4, #16
 802433a:	9702      	str	r7, [sp, #8]
 802433c:	f7ff ffb8 	bl	80242b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024340:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8024344:	4605      	mov	r5, r0
 8024346:	b97b      	cbnz	r3, 8024368 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024348:	463a      	mov	r2, r7
 802434a:	4631      	mov	r1, r6
 802434c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024350:	f7ff fe7a 	bl	8024048 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024354:	9b03      	ldr	r3, [sp, #12]
 8024356:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802435a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802435e:	9b02      	ldr	r3, [sp, #8]
 8024360:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8024364:	b005      	add	sp, #20
 8024366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024368:	b110      	cbz	r0, 8024370 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802436a:	ea13 0200 	ands.w	r2, r3, r0
 802436e:	d11c      	bne.n	80243aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024370:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8024374:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8024378:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802437c:	b188      	cbz	r0, 80243a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802437e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8024382:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024386:	b913      	cbnz	r3, 802438e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024388:	4630      	mov	r0, r6
 802438a:	f001 f806 	bl	802539a <_ZN8touchgfx7Outline6moveToEii>
 802438e:	2300      	movs	r3, #0
 8024390:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024394:	2301      	movs	r3, #1
 8024396:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802439a:	4630      	mov	r0, r6
 802439c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80243a0:	e7d6      	b.n	8024350 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80243a2:	4630      	mov	r0, r6
 80243a4:	f7ff fe50 	bl	8024048 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243a8:	e7f7      	b.n	802439a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80243aa:	4615      	mov	r5, r2
 80243ac:	e7d2      	b.n	8024354 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080243ae <_ZN8touchgfx6Canvas5closeEv>:
 80243ae:	b538      	push	{r3, r4, r5, lr}
 80243b0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80243b4:	4604      	mov	r4, r0
 80243b6:	b993      	cbnz	r3, 80243de <_ZN8touchgfx6Canvas5closeEv+0x30>
 80243b8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80243bc:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80243c0:	4213      	tst	r3, r2
 80243c2:	d10c      	bne.n	80243de <_ZN8touchgfx6Canvas5closeEv+0x30>
 80243c4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80243c8:	b123      	cbz	r3, 80243d4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80243ca:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80243ce:	4628      	mov	r0, r5
 80243d0:	f7ff fe3a 	bl	8024048 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243d4:	4628      	mov	r0, r5
 80243d6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80243da:	f7ff fe35 	bl	8024048 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243de:	2300      	movs	r3, #0
 80243e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80243e4:	bd38      	pop	{r3, r4, r5, pc}

080243e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80243e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243e8:	b085      	sub	sp, #20
 80243ea:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80243ee:	4604      	mov	r4, r0
 80243f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80243f4:	b353      	cbz	r3, 802444c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80243f6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80243fa:	b90b      	cbnz	r3, 8024400 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80243fc:	f7ff ffd7 	bl	80243ae <_ZN8touchgfx6Canvas5closeEv>
 8024400:	aa02      	add	r2, sp, #8
 8024402:	a903      	add	r1, sp, #12
 8024404:	4620      	mov	r0, r4
 8024406:	f7ff ff6b 	bl	80242e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802440a:	68a3      	ldr	r3, [r4, #8]
 802440c:	9d03      	ldr	r5, [sp, #12]
 802440e:	aa02      	add	r2, sp, #8
 8024410:	9e02      	ldr	r6, [sp, #8]
 8024412:	a903      	add	r1, sp, #12
 8024414:	1aed      	subs	r5, r5, r3
 8024416:	68e3      	ldr	r3, [r4, #12]
 8024418:	4620      	mov	r0, r4
 802441a:	1af6      	subs	r6, r6, r3
 802441c:	f104 0314 	add.w	r3, r4, #20
 8024420:	9503      	str	r5, [sp, #12]
 8024422:	9300      	str	r3, [sp, #0]
 8024424:	f104 0310 	add.w	r3, r4, #16
 8024428:	9602      	str	r6, [sp, #8]
 802442a:	f7ff ff41 	bl	80242b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802442e:	4607      	mov	r7, r0
 8024430:	b170      	cbz	r0, 8024450 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024432:	2301      	movs	r3, #1
 8024434:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024438:	9a03      	ldr	r2, [sp, #12]
 802443a:	9b02      	ldr	r3, [sp, #8]
 802443c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8024440:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8024444:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8024448:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802444c:	b005      	add	sp, #20
 802444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024450:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024454:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8024458:	b92b      	cbnz	r3, 8024466 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802445a:	4632      	mov	r2, r6
 802445c:	4629      	mov	r1, r5
 802445e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024462:	f000 ff9a 	bl	802539a <_ZN8touchgfx7Outline6moveToEii>
 8024466:	2300      	movs	r3, #0
 8024468:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802446c:	2301      	movs	r3, #1
 802446e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8024472:	e7e1      	b.n	8024438 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024474 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024478:	4604      	mov	r4, r0
 802447a:	b087      	sub	sp, #28
 802447c:	9105      	str	r1, [sp, #20]
 802447e:	f001 f8d0 	bl	8025622 <_ZN8touchgfx7Outline8getCellsEv>
 8024482:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024486:	4605      	mov	r5, r0
 8024488:	f1b9 0f00 	cmp.w	r9, #0
 802448c:	d103      	bne.n	8024496 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802448e:	2001      	movs	r0, #1
 8024490:	b007      	add	sp, #28
 8024492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024496:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802449a:	2e00      	cmp	r6, #0
 802449c:	d139      	bne.n	8024512 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802449e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80244a2:	f105 0708 	add.w	r7, r5, #8
 80244a6:	4640      	mov	r0, r8
 80244a8:	f001 f8fd 	bl	80256a6 <_ZN8touchgfx8Scanline5resetEv>
 80244ac:	f109 33ff 	add.w	r3, r9, #4294967295
 80244b0:	9303      	str	r3, [sp, #12]
 80244b2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80244b6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80244ba:	46da      	mov	sl, fp
 80244bc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80244c0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80244c4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80244c8:	9b03      	ldr	r3, [sp, #12]
 80244ca:	4416      	add	r6, r2
 80244cc:	9504      	str	r5, [sp, #16]
 80244ce:	463d      	mov	r5, r7
 80244d0:	3b01      	subs	r3, #1
 80244d2:	9303      	str	r3, [sp, #12]
 80244d4:	3301      	adds	r3, #1
 80244d6:	d01e      	beq.n	8024516 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80244d8:	3708      	adds	r7, #8
 80244da:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80244de:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80244e2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80244e6:	4290      	cmp	r0, r2
 80244e8:	d11e      	bne.n	8024528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80244ea:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80244ee:	4411      	add	r1, r2
 80244f0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80244f4:	e7e8      	b.n	80244c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80244f6:	1c91      	adds	r1, r2, #2
 80244f8:	f04f 0301 	mov.w	r3, #1
 80244fc:	65e1      	str	r1, [r4, #92]	; 0x5c
 80244fe:	8053      	strh	r3, [r2, #2]
 8024500:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024502:	1c91      	adds	r1, r2, #2
 8024504:	65a1      	str	r1, [r4, #88]	; 0x58
 8024506:	f8a2 b002 	strh.w	fp, [r2, #2]
 802450a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802450c:	3201      	adds	r2, #1
 802450e:	6562      	str	r2, [r4, #84]	; 0x54
 8024510:	e03a      	b.n	8024588 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024512:	2000      	movs	r0, #0
 8024514:	e7bc      	b.n	8024490 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024516:	b951      	cbnz	r1, 802452e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024518:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802451a:	2b00      	cmp	r3, #0
 802451c:	d0b7      	beq.n	802448e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802451e:	4641      	mov	r1, r8
 8024520:	9805      	ldr	r0, [sp, #20]
 8024522:	f7ff fd5b 	bl	8023fdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024526:	e7b2      	b.n	802448e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024528:	2900      	cmp	r1, #0
 802452a:	d035      	beq.n	8024598 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802452c:	9504      	str	r5, [sp, #16]
 802452e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024532:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024536:	f7ff fd3d 	bl	8023fb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802453a:	4605      	mov	r5, r0
 802453c:	b330      	cbz	r0, 802458c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802453e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024540:	b182      	cbz	r2, 8024564 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024542:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024544:	454a      	cmp	r2, r9
 8024546:	d00d      	beq.n	8024564 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024548:	4641      	mov	r1, r8
 802454a:	9805      	ldr	r0, [sp, #20]
 802454c:	f7ff fd46 	bl	8023fdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024550:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024554:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024556:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802455a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802455c:	2300      	movs	r3, #0
 802455e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024560:	6563      	str	r3, [r4, #84]	; 0x54
 8024562:	65a2      	str	r2, [r4, #88]	; 0x58
 8024564:	f1bb 0f00 	cmp.w	fp, #0
 8024568:	db10      	blt.n	802458c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802456a:	f7f3 fa5d 	bl	8017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802456e:	4583      	cmp	fp, r0
 8024570:	d20c      	bcs.n	802458c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024572:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024574:	f802 500b 	strb.w	r5, [r2, fp]
 8024578:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802457a:	3201      	adds	r2, #1
 802457c:	455a      	cmp	r2, fp
 802457e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024580:	d1b9      	bne.n	80244f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024582:	8811      	ldrh	r1, [r2, #0]
 8024584:	3101      	adds	r1, #1
 8024586:	8011      	strh	r1, [r2, #0]
 8024588:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802458c:	9b03      	ldr	r3, [sp, #12]
 802458e:	3301      	adds	r3, #1
 8024590:	d0c2      	beq.n	8024518 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024592:	f10b 0a01 	add.w	sl, fp, #1
 8024596:	9d04      	ldr	r5, [sp, #16]
 8024598:	f9b5 3000 	ldrsh.w	r3, [r5]
 802459c:	4553      	cmp	r3, sl
 802459e:	dd88      	ble.n	80244b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80245a0:	01b1      	lsls	r1, r6, #6
 80245a2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80245a6:	f7ff fd05 	bl	8023fb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80245aa:	4683      	mov	fp, r0
 80245ac:	2800      	cmp	r0, #0
 80245ae:	d080      	beq.n	80244b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80245b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80245b2:	b183      	cbz	r3, 80245d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80245b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80245b6:	454b      	cmp	r3, r9
 80245b8:	d00d      	beq.n	80245d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80245ba:	4641      	mov	r1, r8
 80245bc:	9805      	ldr	r0, [sp, #20]
 80245be:	f7ff fd0d 	bl	8023fdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80245c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80245c6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80245ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80245cc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80245ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80245d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80245d2:	2300      	movs	r3, #0
 80245d4:	6563      	str	r3, [r4, #84]	; 0x54
 80245d6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80245da:	464a      	mov	r2, r9
 80245dc:	f8cd b000 	str.w	fp, [sp]
 80245e0:	4651      	mov	r1, sl
 80245e2:	eba3 030a 	sub.w	r3, r3, sl
 80245e6:	4640      	mov	r0, r8
 80245e8:	f001 f884 	bl	80256f4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80245ec:	e761      	b.n	80244b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080245ee <_ZN8touchgfx6Canvas6renderEv>:
 80245ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80245f0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80245f4:	4604      	mov	r4, r0
 80245f6:	b913      	cbnz	r3, 80245fe <_ZN8touchgfx6Canvas6renderEv+0x10>
 80245f8:	2001      	movs	r0, #1
 80245fa:	b003      	add	sp, #12
 80245fc:	bd30      	pop	{r4, r5, pc}
 80245fe:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8024602:	2b00      	cmp	r3, #0
 8024604:	d131      	bne.n	802466a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8024606:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802460a:	2b00      	cmp	r3, #0
 802460c:	d0f4      	beq.n	80245f8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802460e:	6840      	ldr	r0, [r0, #4]
 8024610:	6803      	ldr	r3, [r0, #0]
 8024612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024614:	4798      	blx	r3
 8024616:	2800      	cmp	r0, #0
 8024618:	d0ee      	beq.n	80245f8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802461a:	4620      	mov	r0, r4
 802461c:	f7ff fec7 	bl	80243ae <_ZN8touchgfx6Canvas5closeEv>
 8024620:	6860      	ldr	r0, [r4, #4]
 8024622:	6803      	ldr	r3, [r0, #0]
 8024624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024626:	4798      	blx	r3
 8024628:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802462c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8024630:	f7f2 f993 	bl	801695a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8024634:	6860      	ldr	r0, [r4, #4]
 8024636:	6803      	ldr	r3, [r0, #0]
 8024638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802463a:	4798      	blx	r3
 802463c:	4605      	mov	r5, r0
 802463e:	6860      	ldr	r0, [r4, #4]
 8024640:	6803      	ldr	r3, [r0, #0]
 8024642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024644:	4798      	blx	r3
 8024646:	4601      	mov	r1, r0
 8024648:	4628      	mov	r0, r5
 802464a:	f7f2 f989 	bl	8016960 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802464e:	6860      	ldr	r0, [r4, #4]
 8024650:	6803      	ldr	r3, [r0, #0]
 8024652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024654:	4798      	blx	r3
 8024656:	f104 0318 	add.w	r3, r4, #24
 802465a:	4669      	mov	r1, sp
 802465c:	e9cd 3000 	strd	r3, r0, [sp]
 8024660:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024664:	f7ff ff06 	bl	8024474 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024668:	e7c7      	b.n	80245fa <_ZN8touchgfx6Canvas6renderEv+0xc>
 802466a:	2000      	movs	r0, #0
 802466c:	e7c5      	b.n	80245fa <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08024670 <_ZN8touchgfx6CanvasD1Ev>:
 8024670:	b538      	push	{r3, r4, r5, lr}
 8024672:	4605      	mov	r5, r0
 8024674:	4b08      	ldr	r3, [pc, #32]	; (8024698 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024676:	4604      	mov	r4, r0
 8024678:	f845 3b2c 	str.w	r3, [r5], #44
 802467c:	4b07      	ldr	r3, [pc, #28]	; (802469c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802467e:	6818      	ldr	r0, [r3, #0]
 8024680:	6803      	ldr	r3, [r0, #0]
 8024682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024684:	4798      	blx	r3
 8024686:	4628      	mov	r0, r5
 8024688:	f000 f814 	bl	80246b4 <_ZN8touchgfx7OutlineD1Ev>
 802468c:	f104 0018 	add.w	r0, r4, #24
 8024690:	f001 f870 	bl	8025774 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024694:	4620      	mov	r0, r4
 8024696:	bd38      	pop	{r3, r4, r5, pc}
 8024698:	0802b77c 	.word	0x0802b77c
 802469c:	2000bb94 	.word	0x2000bb94

080246a0 <_ZN8touchgfx6CanvasD0Ev>:
 80246a0:	b510      	push	{r4, lr}
 80246a2:	4604      	mov	r4, r0
 80246a4:	f7ff ffe4 	bl	8024670 <_ZN8touchgfx6CanvasD1Ev>
 80246a8:	21b8      	movs	r1, #184	; 0xb8
 80246aa:	4620      	mov	r0, r4
 80246ac:	f001 f873 	bl	8025796 <_ZdlPvj>
 80246b0:	4620      	mov	r0, r4
 80246b2:	bd10      	pop	{r4, pc}

080246b4 <_ZN8touchgfx7OutlineD1Ev>:
 80246b4:	4770      	bx	lr

080246b6 <_ZN8touchgfx7OutlineD0Ev>:
 80246b6:	b510      	push	{r4, lr}
 80246b8:	4604      	mov	r4, r0
 80246ba:	2148      	movs	r1, #72	; 0x48
 80246bc:	f001 f86b 	bl	8025796 <_ZdlPvj>
 80246c0:	4620      	mov	r0, r4
 80246c2:	bd10      	pop	{r4, pc}

080246c4 <_ZN8touchgfx7Outline5resetEv>:
 80246c4:	b510      	push	{r4, lr}
 80246c6:	4604      	mov	r4, r0
 80246c8:	f7f3 f9c6 	bl	8017a58 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80246cc:	60e0      	str	r0, [r4, #12]
 80246ce:	f7f3 f9c9 	bl	8017a64 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80246d2:	68e3      	ldr	r3, [r4, #12]
 80246d4:	2200      	movs	r2, #0
 80246d6:	08c0      	lsrs	r0, r0, #3
 80246d8:	6123      	str	r3, [r4, #16]
 80246da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80246de:	6060      	str	r0, [r4, #4]
 80246e0:	82a3      	strh	r3, [r4, #20]
 80246e2:	82e3      	strh	r3, [r4, #22]
 80246e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80246e6:	60a2      	str	r2, [r4, #8]
 80246e8:	f023 0301 	bic.w	r3, r3, #1
 80246ec:	8322      	strh	r2, [r4, #24]
 80246ee:	8362      	strh	r2, [r4, #26]
 80246f0:	f043 0302 	orr.w	r3, r3, #2
 80246f4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80246f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80246fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80246fe:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024702:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024706:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802470a:	bd10      	pop	{r4, pc}

0802470c <_ZN8touchgfx7OutlineC1Ev>:
 802470c:	4b0f      	ldr	r3, [pc, #60]	; (802474c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802470e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024712:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024716:	b510      	push	{r4, lr}
 8024718:	6003      	str	r3, [r0, #0]
 802471a:	2300      	movs	r3, #0
 802471c:	4604      	mov	r4, r0
 802471e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024722:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024726:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802472a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802472e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024732:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024736:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802473a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802473e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024742:	f7ff ffbf 	bl	80246c4 <_ZN8touchgfx7Outline5resetEv>
 8024746:	4620      	mov	r0, r4
 8024748:	bd10      	pop	{r4, pc}
 802474a:	bf00      	nop
 802474c:	0802b7dc 	.word	0x0802b7dc

08024750 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024754:	b093      	sub	sp, #76	; 0x4c
 8024756:	4604      	mov	r4, r0
 8024758:	1156      	asrs	r6, r2, #5
 802475a:	f002 0e1f 	and.w	lr, r2, #31
 802475e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024760:	9305      	str	r3, [sp, #20]
 8024762:	1143      	asrs	r3, r0, #5
 8024764:	1145      	asrs	r5, r0, #5
 8024766:	930c      	str	r3, [sp, #48]	; 0x30
 8024768:	f000 031f 	and.w	r3, r0, #31
 802476c:	9303      	str	r3, [sp, #12]
 802476e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024770:	42b3      	cmp	r3, r6
 8024772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024774:	bfc8      	it	gt
 8024776:	6326      	strgt	r6, [r4, #48]	; 0x30
 8024778:	42b3      	cmp	r3, r6
 802477a:	bfdc      	itt	le
 802477c:	1c73      	addle	r3, r6, #1
 802477e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024780:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024782:	42ab      	cmp	r3, r5
 8024784:	bfc8      	it	gt
 8024786:	462b      	movgt	r3, r5
 8024788:	ea4f 1560 	mov.w	r5, r0, asr #5
 802478c:	bfc8      	it	gt
 802478e:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024792:	42ab      	cmp	r3, r5
 8024794:	bfd8      	it	le
 8024796:	462b      	movle	r3, r5
 8024798:	ea4f 1561 	mov.w	r5, r1, asr #5
 802479c:	bfdc      	itt	le
 802479e:	3301      	addle	r3, #1
 80247a0:	63a3      	strle	r3, [r4, #56]	; 0x38
 80247a2:	9b05      	ldr	r3, [sp, #20]
 80247a4:	eba3 0a01 	sub.w	sl, r3, r1
 80247a8:	1143      	asrs	r3, r0, #5
 80247aa:	429e      	cmp	r6, r3
 80247ac:	f040 8119 	bne.w	80249e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80247b0:	9b05      	ldr	r3, [sp, #20]
 80247b2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80247b6:	9b03      	ldr	r3, [sp, #12]
 80247b8:	459e      	cmp	lr, r3
 80247ba:	d12c      	bne.n	8024816 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80247bc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80247c0:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80247c4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80247c8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80247cc:	4291      	cmp	r1, r2
 80247ce:	d037      	beq.n	8024840 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80247d0:	8b61      	ldrh	r1, [r4, #26]
 80247d2:	8b22      	ldrh	r2, [r4, #24]
 80247d4:	430a      	orrs	r2, r1
 80247d6:	d00b      	beq.n	80247f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247d8:	2b00      	cmp	r3, #0
 80247da:	db09      	blt.n	80247f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80247de:	429a      	cmp	r2, r3
 80247e0:	dd06      	ble.n	80247f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80247e6:	429a      	cmp	r2, r3
 80247e8:	d308      	bcc.n	80247fc <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80247ea:	2301      	movs	r3, #1
 80247ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80247f0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80247f4:	82e6      	strh	r6, [r4, #22]
 80247f6:	2300      	movs	r3, #0
 80247f8:	8323      	strh	r3, [r4, #24]
 80247fa:	e0c6      	b.n	802498a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80247fc:	f104 0314 	add.w	r3, r4, #20
 8024800:	6922      	ldr	r2, [r4, #16]
 8024802:	cb03      	ldmia	r3!, {r0, r1}
 8024804:	6010      	str	r0, [r2, #0]
 8024806:	6051      	str	r1, [r2, #4]
 8024808:	6923      	ldr	r3, [r4, #16]
 802480a:	3308      	adds	r3, #8
 802480c:	6123      	str	r3, [r4, #16]
 802480e:	68a3      	ldr	r3, [r4, #8]
 8024810:	3301      	adds	r3, #1
 8024812:	60a3      	str	r3, [r4, #8]
 8024814:	e7ec      	b.n	80247f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024816:	9b05      	ldr	r3, [sp, #20]
 8024818:	45ac      	cmp	ip, r5
 802481a:	f001 011f 	and.w	r1, r1, #31
 802481e:	8b20      	ldrh	r0, [r4, #24]
 8024820:	f003 031f 	and.w	r3, r3, #31
 8024824:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8024828:	9304      	str	r3, [sp, #16]
 802482a:	9b03      	ldr	r3, [sp, #12]
 802482c:	eba3 020e 	sub.w	r2, r3, lr
 8024830:	d109      	bne.n	8024846 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8024832:	9b04      	ldr	r3, [sp, #16]
 8024834:	4410      	add	r0, r2
 8024836:	4419      	add	r1, r3
 8024838:	8320      	strh	r0, [r4, #24]
 802483a:	fb02 8201 	mla	r2, r2, r1, r8
 802483e:	8362      	strh	r2, [r4, #26]
 8024840:	b013      	add	sp, #76	; 0x4c
 8024842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024846:	f1ba 0f00 	cmp.w	sl, #0
 802484a:	f2c0 80a0 	blt.w	802498e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802484e:	f1c1 0320 	rsb	r3, r1, #32
 8024852:	f04f 0b20 	mov.w	fp, #32
 8024856:	435a      	muls	r2, r3
 8024858:	2301      	movs	r3, #1
 802485a:	9302      	str	r3, [sp, #8]
 802485c:	4459      	add	r1, fp
 802485e:	fb92 f7fa 	sdiv	r7, r2, sl
 8024862:	fb0a 2217 	mls	r2, sl, r7, r2
 8024866:	2a00      	cmp	r2, #0
 8024868:	bfbc      	itt	lt
 802486a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802486e:	4452      	addlt	r2, sl
 8024870:	fb07 8101 	mla	r1, r7, r1, r8
 8024874:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024878:	4438      	add	r0, r7
 802487a:	b20b      	sxth	r3, r1
 802487c:	9902      	ldr	r1, [sp, #8]
 802487e:	b200      	sxth	r0, r0
 8024880:	9301      	str	r3, [sp, #4]
 8024882:	8363      	strh	r3, [r4, #26]
 8024884:	186b      	adds	r3, r5, r1
 8024886:	0435      	lsls	r5, r6, #16
 8024888:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802488c:	8320      	strh	r0, [r4, #24]
 802488e:	eb03 0905 	add.w	r9, r3, r5
 8024892:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8024896:	9300      	str	r3, [sp, #0]
 8024898:	45c1      	cmp	r9, r8
 802489a:	9505      	str	r5, [sp, #20]
 802489c:	d014      	beq.n	80248c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802489e:	9b01      	ldr	r3, [sp, #4]
 80248a0:	4303      	orrs	r3, r0
 80248a2:	d00b      	beq.n	80248bc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248a4:	2900      	cmp	r1, #0
 80248a6:	db09      	blt.n	80248bc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80248aa:	428b      	cmp	r3, r1
 80248ac:	dd06      	ble.n	80248bc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248ae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80248b2:	4299      	cmp	r1, r3
 80248b4:	d374      	bcc.n	80249a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80248b6:	2301      	movs	r3, #1
 80248b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80248bc:	9b00      	ldr	r3, [sp, #0]
 80248be:	82e6      	strh	r6, [r4, #22]
 80248c0:	82a3      	strh	r3, [r4, #20]
 80248c2:	2300      	movs	r3, #0
 80248c4:	8323      	strh	r3, [r4, #24]
 80248c6:	8363      	strh	r3, [r4, #26]
 80248c8:	9900      	ldr	r1, [sp, #0]
 80248ca:	eb0e 0307 	add.w	r3, lr, r7
 80248ce:	458c      	cmp	ip, r1
 80248d0:	d04e      	beq.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80248d2:	9903      	ldr	r1, [sp, #12]
 80248d4:	eba2 020a 	sub.w	r2, r2, sl
 80248d8:	1ac9      	subs	r1, r1, r3
 80248da:	9201      	str	r2, [sp, #4]
 80248dc:	440f      	add	r7, r1
 80248de:	017f      	lsls	r7, r7, #5
 80248e0:	fb97 fefa 	sdiv	lr, r7, sl
 80248e4:	fb0a 771e 	mls	r7, sl, lr, r7
 80248e8:	2f00      	cmp	r7, #0
 80248ea:	bfbc      	itt	lt
 80248ec:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80248f0:	4457      	addlt	r7, sl
 80248f2:	f10e 0101 	add.w	r1, lr, #1
 80248f6:	9106      	str	r1, [sp, #24]
 80248f8:	9a01      	ldr	r2, [sp, #4]
 80248fa:	8b20      	ldrh	r0, [r4, #24]
 80248fc:	19d2      	adds	r2, r2, r7
 80248fe:	8b61      	ldrh	r1, [r4, #26]
 8024900:	9d02      	ldr	r5, [sp, #8]
 8024902:	9201      	str	r2, [sp, #4]
 8024904:	bf5b      	ittet	pl
 8024906:	eba2 020a 	subpl.w	r2, r2, sl
 802490a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802490e:	46f0      	movmi	r8, lr
 8024910:	9201      	strpl	r2, [sp, #4]
 8024912:	9a00      	ldr	r2, [sp, #0]
 8024914:	4440      	add	r0, r8
 8024916:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802491a:	4443      	add	r3, r8
 802491c:	442a      	add	r2, r5
 802491e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024922:	9d05      	ldr	r5, [sp, #20]
 8024924:	b200      	sxth	r0, r0
 8024926:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802492a:	b209      	sxth	r1, r1
 802492c:	4415      	add	r5, r2
 802492e:	8320      	strh	r0, [r4, #24]
 8024930:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024934:	8361      	strh	r1, [r4, #26]
 8024936:	9200      	str	r2, [sp, #0]
 8024938:	454d      	cmp	r5, r9
 802493a:	d016      	beq.n	802496a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802493c:	4301      	orrs	r1, r0
 802493e:	d00d      	beq.n	802495c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024940:	f1b8 0f00 	cmp.w	r8, #0
 8024944:	db0a      	blt.n	802495c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024946:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024948:	4541      	cmp	r1, r8
 802494a:	dd07      	ble.n	802495c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802494c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024950:	4288      	cmp	r0, r1
 8024952:	d335      	bcc.n	80249c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024954:	f04f 0101 	mov.w	r1, #1
 8024958:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802495c:	9900      	ldr	r1, [sp, #0]
 802495e:	82e6      	strh	r6, [r4, #22]
 8024960:	82a1      	strh	r1, [r4, #20]
 8024962:	f04f 0100 	mov.w	r1, #0
 8024966:	8321      	strh	r1, [r4, #24]
 8024968:	8361      	strh	r1, [r4, #26]
 802496a:	9a00      	ldr	r2, [sp, #0]
 802496c:	4594      	cmp	ip, r2
 802496e:	d1c3      	bne.n	80248f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024970:	9a03      	ldr	r2, [sp, #12]
 8024972:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8024976:	1ad3      	subs	r3, r2, r3
 8024978:	8b22      	ldrh	r2, [r4, #24]
 802497a:	441a      	add	r2, r3
 802497c:	8322      	strh	r2, [r4, #24]
 802497e:	9a04      	ldr	r2, [sp, #16]
 8024980:	3220      	adds	r2, #32
 8024982:	eba2 020b 	sub.w	r2, r2, fp
 8024986:	fb03 c302 	mla	r3, r3, r2, ip
 802498a:	8363      	strh	r3, [r4, #26]
 802498c:	e758      	b.n	8024840 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802498e:	f04f 33ff 	mov.w	r3, #4294967295
 8024992:	434a      	muls	r2, r1
 8024994:	f1ca 0a00 	rsb	sl, sl, #0
 8024998:	f04f 0b00 	mov.w	fp, #0
 802499c:	9302      	str	r3, [sp, #8]
 802499e:	e75d      	b.n	802485c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80249a0:	f104 0314 	add.w	r3, r4, #20
 80249a4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80249a8:	cb03      	ldmia	r3!, {r0, r1}
 80249aa:	f8c8 0000 	str.w	r0, [r8]
 80249ae:	f8c8 1004 	str.w	r1, [r8, #4]
 80249b2:	6923      	ldr	r3, [r4, #16]
 80249b4:	3308      	adds	r3, #8
 80249b6:	6123      	str	r3, [r4, #16]
 80249b8:	68a3      	ldr	r3, [r4, #8]
 80249ba:	3301      	adds	r3, #1
 80249bc:	60a3      	str	r3, [r4, #8]
 80249be:	e77d      	b.n	80248bc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80249c0:	f104 0814 	add.w	r8, r4, #20
 80249c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80249c8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80249cc:	f8c9 0000 	str.w	r0, [r9]
 80249d0:	f8c9 1004 	str.w	r1, [r9, #4]
 80249d4:	6921      	ldr	r1, [r4, #16]
 80249d6:	3108      	adds	r1, #8
 80249d8:	6121      	str	r1, [r4, #16]
 80249da:	68a1      	ldr	r1, [r4, #8]
 80249dc:	3101      	adds	r1, #1
 80249de:	60a1      	str	r1, [r4, #8]
 80249e0:	e7bc      	b.n	802495c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80249e2:	1a83      	subs	r3, r0, r2
 80249e4:	9301      	str	r3, [sp, #4]
 80249e6:	f1ba 0f00 	cmp.w	sl, #0
 80249ea:	f040 8094 	bne.w	8024b16 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80249ee:	9a01      	ldr	r2, [sp, #4]
 80249f0:	0049      	lsls	r1, r1, #1
 80249f2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80249f6:	2a00      	cmp	r2, #0
 80249f8:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80249fc:	8b62      	ldrh	r2, [r4, #26]
 80249fe:	bfaa      	itet	ge
 8024a00:	f04f 0a20 	movge.w	sl, #32
 8024a04:	f04f 38ff 	movlt.w	r8, #4294967295
 8024a08:	f04f 0801 	movge.w	r8, #1
 8024a0c:	8b21      	ldrh	r1, [r4, #24]
 8024a0e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8024a12:	4471      	add	r1, lr
 8024a14:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024a18:	eb08 0206 	add.w	r2, r8, r6
 8024a1c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8024a20:	b209      	sxth	r1, r1
 8024a22:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8024a26:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024a2a:	8321      	strh	r1, [r4, #24]
 8024a2c:	fa0f fe8e 	sxth.w	lr, lr
 8024a30:	42b7      	cmp	r7, r6
 8024a32:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024a36:	d013      	beq.n	8024a60 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024a38:	ea51 010e 	orrs.w	r1, r1, lr
 8024a3c:	d00b      	beq.n	8024a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a3e:	2800      	cmp	r0, #0
 8024a40:	db09      	blt.n	8024a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024a44:	4281      	cmp	r1, r0
 8024a46:	dd06      	ble.n	8024a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a48:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024a4c:	4288      	cmp	r0, r1
 8024a4e:	d339      	bcc.n	8024ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024a50:	2101      	movs	r1, #1
 8024a52:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024a56:	2100      	movs	r1, #0
 8024a58:	82a5      	strh	r5, [r4, #20]
 8024a5a:	82e2      	strh	r2, [r4, #22]
 8024a5c:	8321      	strh	r1, [r4, #24]
 8024a5e:	8361      	strh	r1, [r4, #26]
 8024a60:	f1aa 0610 	sub.w	r6, sl, #16
 8024a64:	f04f 0e00 	mov.w	lr, #0
 8024a68:	f04f 0b01 	mov.w	fp, #1
 8024a6c:	0076      	lsls	r6, r6, #1
 8024a6e:	fb06 f703 	mul.w	r7, r6, r3
 8024a72:	b236      	sxth	r6, r6
 8024a74:	b23f      	sxth	r7, r7
 8024a76:	ea46 0107 	orr.w	r1, r6, r7
 8024a7a:	9100      	str	r1, [sp, #0]
 8024a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024a7e:	428a      	cmp	r2, r1
 8024a80:	d03e      	beq.n	8024b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024a82:	4442      	add	r2, r8
 8024a84:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024a88:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024a8c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024a90:	8326      	strh	r6, [r4, #24]
 8024a92:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024a96:	8367      	strh	r7, [r4, #26]
 8024a98:	4584      	cmp	ip, r0
 8024a9a:	d0ef      	beq.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024a9c:	9800      	ldr	r0, [sp, #0]
 8024a9e:	b150      	cbz	r0, 8024ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024aa0:	2900      	cmp	r1, #0
 8024aa2:	db08      	blt.n	8024ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024aa4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024aa6:	4288      	cmp	r0, r1
 8024aa8:	dd05      	ble.n	8024ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024aaa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024aae:	4288      	cmp	r0, r1
 8024ab0:	d315      	bcc.n	8024ade <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024ab2:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024ab6:	82a5      	strh	r5, [r4, #20]
 8024ab8:	82e2      	strh	r2, [r4, #22]
 8024aba:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024abe:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024ac2:	e7db      	b.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024ac4:	f104 0614 	add.w	r6, r4, #20
 8024ac8:	6927      	ldr	r7, [r4, #16]
 8024aca:	ce03      	ldmia	r6!, {r0, r1}
 8024acc:	6038      	str	r0, [r7, #0]
 8024ace:	6079      	str	r1, [r7, #4]
 8024ad0:	6921      	ldr	r1, [r4, #16]
 8024ad2:	3108      	adds	r1, #8
 8024ad4:	6121      	str	r1, [r4, #16]
 8024ad6:	68a1      	ldr	r1, [r4, #8]
 8024ad8:	3101      	adds	r1, #1
 8024ada:	60a1      	str	r1, [r4, #8]
 8024adc:	e7bb      	b.n	8024a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024ade:	f104 0c14 	add.w	ip, r4, #20
 8024ae2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024ae6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8024aea:	f8c9 0000 	str.w	r0, [r9]
 8024aee:	f8c9 1004 	str.w	r1, [r9, #4]
 8024af2:	6921      	ldr	r1, [r4, #16]
 8024af4:	3108      	adds	r1, #8
 8024af6:	6121      	str	r1, [r4, #16]
 8024af8:	68a1      	ldr	r1, [r4, #8]
 8024afa:	3101      	adds	r1, #1
 8024afc:	60a1      	str	r1, [r4, #8]
 8024afe:	e7da      	b.n	8024ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024b00:	9a03      	ldr	r2, [sp, #12]
 8024b02:	8b61      	ldrh	r1, [r4, #26]
 8024b04:	f1a2 0c20 	sub.w	ip, r2, #32
 8024b08:	8b22      	ldrh	r2, [r4, #24]
 8024b0a:	44d4      	add	ip, sl
 8024b0c:	4462      	add	r2, ip
 8024b0e:	fb0c 1303 	mla	r3, ip, r3, r1
 8024b12:	8322      	strh	r2, [r4, #24]
 8024b14:	e739      	b.n	802498a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024b16:	9b01      	ldr	r3, [sp, #4]
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	db3f      	blt.n	8024b9c <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024b1c:	2201      	movs	r2, #1
 8024b1e:	f1ce 0320 	rsb	r3, lr, #32
 8024b22:	920b      	str	r2, [sp, #44]	; 0x2c
 8024b24:	2220      	movs	r2, #32
 8024b26:	fb0a f303 	mul.w	r3, sl, r3
 8024b2a:	9202      	str	r2, [sp, #8]
 8024b2c:	9a01      	ldr	r2, [sp, #4]
 8024b2e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024b32:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024b36:	fb93 f7f2 	sdiv	r7, r3, r2
 8024b3a:	fb02 3317 	mls	r3, r2, r7, r3
 8024b3e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	9308      	str	r3, [sp, #32]
 8024b46:	bfbc      	itt	lt
 8024b48:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024b4c:	189b      	addlt	r3, r3, r2
 8024b4e:	eb07 0b01 	add.w	fp, r7, r1
 8024b52:	bfb8      	it	lt
 8024b54:	9308      	strlt	r3, [sp, #32]
 8024b56:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024b5a:	9304      	str	r3, [sp, #16]
 8024b5c:	9b02      	ldr	r3, [sp, #8]
 8024b5e:	4573      	cmp	r3, lr
 8024b60:	d133      	bne.n	8024bca <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024b62:	9b04      	ldr	r3, [sp, #16]
 8024b64:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024b68:	454b      	cmp	r3, r9
 8024b6a:	d045      	beq.n	8024bf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024b6c:	8b62      	ldrh	r2, [r4, #26]
 8024b6e:	8b23      	ldrh	r3, [r4, #24]
 8024b70:	4313      	orrs	r3, r2
 8024b72:	d00c      	beq.n	8024b8e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b74:	f1b8 0f00 	cmp.w	r8, #0
 8024b78:	db09      	blt.n	8024b8e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b7c:	4543      	cmp	r3, r8
 8024b7e:	dd06      	ble.n	8024b8e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b80:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024b84:	429a      	cmp	r2, r3
 8024b86:	d313      	bcc.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024b88:	2301      	movs	r3, #1
 8024b8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b8e:	9b04      	ldr	r3, [sp, #16]
 8024b90:	82e6      	strh	r6, [r4, #22]
 8024b92:	82a3      	strh	r3, [r4, #20]
 8024b94:	2300      	movs	r3, #0
 8024b96:	8323      	strh	r3, [r4, #24]
 8024b98:	8363      	strh	r3, [r4, #26]
 8024b9a:	e02d      	b.n	8024bf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024b9c:	9a01      	ldr	r2, [sp, #4]
 8024b9e:	fb0a f30e 	mul.w	r3, sl, lr
 8024ba2:	4252      	negs	r2, r2
 8024ba4:	9201      	str	r2, [sp, #4]
 8024ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8024baa:	920b      	str	r2, [sp, #44]	; 0x2c
 8024bac:	2200      	movs	r2, #0
 8024bae:	e7bc      	b.n	8024b2a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024bb0:	f104 0314 	add.w	r3, r4, #20
 8024bb4:	6922      	ldr	r2, [r4, #16]
 8024bb6:	cb03      	ldmia	r3!, {r0, r1}
 8024bb8:	6010      	str	r0, [r2, #0]
 8024bba:	6051      	str	r1, [r2, #4]
 8024bbc:	6923      	ldr	r3, [r4, #16]
 8024bbe:	3308      	adds	r3, #8
 8024bc0:	6123      	str	r3, [r4, #16]
 8024bc2:	68a3      	ldr	r3, [r4, #8]
 8024bc4:	3301      	adds	r3, #1
 8024bc6:	60a3      	str	r3, [r4, #8]
 8024bc8:	e7e1      	b.n	8024b8e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024bca:	f00b 031f 	and.w	r3, fp, #31
 8024bce:	f001 011f 	and.w	r1, r1, #31
 8024bd2:	8b20      	ldrh	r0, [r4, #24]
 8024bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8024bd6:	9b02      	ldr	r3, [sp, #8]
 8024bd8:	eba3 020e 	sub.w	r2, r3, lr
 8024bdc:	8b63      	ldrh	r3, [r4, #26]
 8024bde:	9300      	str	r3, [sp, #0]
 8024be0:	9b04      	ldr	r3, [sp, #16]
 8024be2:	42ab      	cmp	r3, r5
 8024be4:	f040 80ef 	bne.w	8024dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bea:	4410      	add	r0, r2
 8024bec:	4419      	add	r1, r3
 8024bee:	9b00      	ldr	r3, [sp, #0]
 8024bf0:	8320      	strh	r0, [r4, #24]
 8024bf2:	fb02 3101 	mla	r1, r2, r1, r3
 8024bf6:	8361      	strh	r1, [r4, #26]
 8024bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bfa:	9904      	ldr	r1, [sp, #16]
 8024bfc:	4433      	add	r3, r6
 8024bfe:	9300      	str	r3, [sp, #0]
 8024c00:	9a00      	ldr	r2, [sp, #0]
 8024c02:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c06:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024c0a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c0e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c12:	4288      	cmp	r0, r1
 8024c14:	d018      	beq.n	8024c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024c16:	8b60      	ldrh	r0, [r4, #26]
 8024c18:	8b21      	ldrh	r1, [r4, #24]
 8024c1a:	ea50 0201 	orrs.w	r2, r0, r1
 8024c1e:	d00c      	beq.n	8024c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	db0a      	blt.n	8024c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c26:	4299      	cmp	r1, r3
 8024c28:	dd07      	ble.n	8024c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c2a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c2e:	4299      	cmp	r1, r3
 8024c30:	f0c0 818b 	bcc.w	8024f4a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024c34:	2301      	movs	r3, #1
 8024c36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c3a:	9b04      	ldr	r3, [sp, #16]
 8024c3c:	82a3      	strh	r3, [r4, #20]
 8024c3e:	9b00      	ldr	r3, [sp, #0]
 8024c40:	82e3      	strh	r3, [r4, #22]
 8024c42:	2300      	movs	r3, #0
 8024c44:	8323      	strh	r3, [r4, #24]
 8024c46:	8363      	strh	r3, [r4, #26]
 8024c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c4a:	9a00      	ldr	r2, [sp, #0]
 8024c4c:	4293      	cmp	r3, r2
 8024c4e:	f000 808d 	beq.w	8024d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024c52:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024c56:	9901      	ldr	r1, [sp, #4]
 8024c58:	9801      	ldr	r0, [sp, #4]
 8024c5a:	fb93 f1f1 	sdiv	r1, r3, r1
 8024c5e:	fb00 3311 	mls	r3, r0, r1, r3
 8024c62:	9106      	str	r1, [sp, #24]
 8024c64:	2b00      	cmp	r3, #0
 8024c66:	9307      	str	r3, [sp, #28]
 8024c68:	da04      	bge.n	8024c74 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024c6a:	1e4b      	subs	r3, r1, #1
 8024c6c:	9306      	str	r3, [sp, #24]
 8024c6e:	9b07      	ldr	r3, [sp, #28]
 8024c70:	4403      	add	r3, r0
 8024c72:	9307      	str	r3, [sp, #28]
 8024c74:	9b08      	ldr	r3, [sp, #32]
 8024c76:	f04f 0c00 	mov.w	ip, #0
 8024c7a:	9901      	ldr	r1, [sp, #4]
 8024c7c:	1a5b      	subs	r3, r3, r1
 8024c7e:	4659      	mov	r1, fp
 8024c80:	9308      	str	r3, [sp, #32]
 8024c82:	9b02      	ldr	r3, [sp, #8]
 8024c84:	f1c3 0320 	rsb	r3, r3, #32
 8024c88:	930a      	str	r3, [sp, #40]	; 0x28
 8024c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024c8c:	9b02      	ldr	r3, [sp, #8]
 8024c8e:	1a1b      	subs	r3, r3, r0
 8024c90:	9309      	str	r3, [sp, #36]	; 0x24
 8024c92:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024c96:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024c9a:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024c9e:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024ca2:	181b      	adds	r3, r3, r0
 8024ca4:	bf58      	it	pl
 8024ca6:	9801      	ldrpl	r0, [sp, #4]
 8024ca8:	9308      	str	r3, [sp, #32]
 8024caa:	bf54      	ite	pl
 8024cac:	1a1b      	subpl	r3, r3, r0
 8024cae:	9d06      	ldrmi	r5, [sp, #24]
 8024cb0:	9802      	ldr	r0, [sp, #8]
 8024cb2:	bf5e      	ittt	pl
 8024cb4:	9308      	strpl	r3, [sp, #32]
 8024cb6:	9b06      	ldrpl	r3, [sp, #24]
 8024cb8:	1c5d      	addpl	r5, r3, #1
 8024cba:	44ab      	add	fp, r5
 8024cbc:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024cc0:	9304      	str	r3, [sp, #16]
 8024cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024cc4:	4283      	cmp	r3, r0
 8024cc6:	f040 815a 	bne.w	8024f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024cca:	9b04      	ldr	r3, [sp, #16]
 8024ccc:	9a00      	ldr	r2, [sp, #0]
 8024cce:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024cd2:	4543      	cmp	r3, r8
 8024cd4:	d01a      	beq.n	8024d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024cd6:	8b61      	ldrh	r1, [r4, #26]
 8024cd8:	8b23      	ldrh	r3, [r4, #24]
 8024cda:	430b      	orrs	r3, r1
 8024cdc:	d00e      	beq.n	8024cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cde:	f1be 0f00 	cmp.w	lr, #0
 8024ce2:	db0b      	blt.n	8024cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024ce6:	4573      	cmp	r3, lr
 8024ce8:	dd08      	ble.n	8024cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024cee:	4299      	cmp	r1, r3
 8024cf0:	f0c0 8138 	bcc.w	8024f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024cf4:	f04f 0301 	mov.w	r3, #1
 8024cf8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024cfc:	9b04      	ldr	r3, [sp, #16]
 8024cfe:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024d02:	82a3      	strh	r3, [r4, #20]
 8024d04:	9b00      	ldr	r3, [sp, #0]
 8024d06:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024d0a:	82e3      	strh	r3, [r4, #22]
 8024d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d0e:	9a00      	ldr	r2, [sp, #0]
 8024d10:	441a      	add	r2, r3
 8024d12:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d16:	9200      	str	r2, [sp, #0]
 8024d18:	9900      	ldr	r1, [sp, #0]
 8024d1a:	9a04      	ldr	r2, [sp, #16]
 8024d1c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024d20:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024d28:	4288      	cmp	r0, r1
 8024d2a:	d01a      	beq.n	8024d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024d2c:	8b60      	ldrh	r0, [r4, #26]
 8024d2e:	8b21      	ldrh	r1, [r4, #24]
 8024d30:	ea50 0201 	orrs.w	r2, r0, r1
 8024d34:	d00d      	beq.n	8024d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	db0b      	blt.n	8024d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d3c:	4299      	cmp	r1, r3
 8024d3e:	dd08      	ble.n	8024d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d40:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d44:	4299      	cmp	r1, r3
 8024d46:	f0c0 81f9 	bcc.w	802513c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024d4a:	f04f 0301 	mov.w	r3, #1
 8024d4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d52:	9b04      	ldr	r3, [sp, #16]
 8024d54:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024d58:	82a3      	strh	r3, [r4, #20]
 8024d5a:	9b00      	ldr	r3, [sp, #0]
 8024d5c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024d60:	82e3      	strh	r3, [r4, #22]
 8024d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d64:	4659      	mov	r1, fp
 8024d66:	9a00      	ldr	r2, [sp, #0]
 8024d68:	4293      	cmp	r3, r2
 8024d6a:	d192      	bne.n	8024c92 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024d6c:	9b02      	ldr	r3, [sp, #8]
 8024d6e:	f1c3 0c20 	rsb	ip, r3, #32
 8024d72:	9b05      	ldr	r3, [sp, #20]
 8024d74:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024d78:	9b03      	ldr	r3, [sp, #12]
 8024d7a:	459c      	cmp	ip, r3
 8024d7c:	f040 81f8 	bne.w	8025170 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024d80:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d84:	9a00      	ldr	r2, [sp, #0]
 8024d86:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d8a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024d8e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024d92:	4288      	cmp	r0, r1
 8024d94:	f43f ad54 	beq.w	8024840 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024d98:	8b60      	ldrh	r0, [r4, #26]
 8024d9a:	8b21      	ldrh	r1, [r4, #24]
 8024d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8024da0:	d00c      	beq.n	8024dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	db0a      	blt.n	8024dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024da6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024da8:	4299      	cmp	r1, r3
 8024daa:	dd07      	ble.n	8024dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024dac:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024db0:	4299      	cmp	r1, r3
 8024db2:	f0c0 81d0 	bcc.w	8025156 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024db6:	2301      	movs	r3, #1
 8024db8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024dbc:	9b00      	ldr	r3, [sp, #0]
 8024dbe:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024dc2:	82e3      	strh	r3, [r4, #22]
 8024dc4:	e517      	b.n	80247f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024dc6:	2f00      	cmp	r7, #0
 8024dc8:	f2c0 8097 	blt.w	8024efa <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024dcc:	2301      	movs	r3, #1
 8024dce:	f1c1 0c20 	rsb	ip, r1, #32
 8024dd2:	9307      	str	r3, [sp, #28]
 8024dd4:	2320      	movs	r3, #32
 8024dd6:	fb02 f20c 	mul.w	r2, r2, ip
 8024dda:	9306      	str	r3, [sp, #24]
 8024ddc:	9b06      	ldr	r3, [sp, #24]
 8024dde:	fb92 fcf7 	sdiv	ip, r2, r7
 8024de2:	fb07 221c 	mls	r2, r7, ip, r2
 8024de6:	4419      	add	r1, r3
 8024de8:	9b00      	ldr	r3, [sp, #0]
 8024dea:	2a00      	cmp	r2, #0
 8024dec:	bfbc      	itt	lt
 8024dee:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024df2:	19d2      	addlt	r2, r2, r7
 8024df4:	fb0c 3101 	mla	r1, ip, r1, r3
 8024df8:	9b07      	ldr	r3, [sp, #28]
 8024dfa:	4460      	add	r0, ip
 8024dfc:	441d      	add	r5, r3
 8024dfe:	0433      	lsls	r3, r6, #16
 8024e00:	b200      	sxth	r0, r0
 8024e02:	930a      	str	r3, [sp, #40]	; 0x28
 8024e04:	18eb      	adds	r3, r5, r3
 8024e06:	b209      	sxth	r1, r1
 8024e08:	8320      	strh	r0, [r4, #24]
 8024e0a:	454b      	cmp	r3, r9
 8024e0c:	8361      	strh	r1, [r4, #26]
 8024e0e:	d014      	beq.n	8024e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024e10:	ea50 0301 	orrs.w	r3, r0, r1
 8024e14:	d00c      	beq.n	8024e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e16:	f1b8 0f00 	cmp.w	r8, #0
 8024e1a:	db09      	blt.n	8024e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024e1e:	4543      	cmp	r3, r8
 8024e20:	dd06      	ble.n	8024e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e22:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024e26:	4299      	cmp	r1, r3
 8024e28:	d36e      	bcc.n	8024f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024e2a:	2301      	movs	r3, #1
 8024e2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024e30:	2300      	movs	r3, #0
 8024e32:	82a5      	strh	r5, [r4, #20]
 8024e34:	82e6      	strh	r6, [r4, #22]
 8024e36:	8323      	strh	r3, [r4, #24]
 8024e38:	8363      	strh	r3, [r4, #26]
 8024e3a:	9904      	ldr	r1, [sp, #16]
 8024e3c:	eb0e 030c 	add.w	r3, lr, ip
 8024e40:	42a9      	cmp	r1, r5
 8024e42:	d04d      	beq.n	8024ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024e44:	9902      	ldr	r1, [sp, #8]
 8024e46:	1bd2      	subs	r2, r2, r7
 8024e48:	1ac9      	subs	r1, r1, r3
 8024e4a:	9200      	str	r2, [sp, #0]
 8024e4c:	448c      	add	ip, r1
 8024e4e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024e52:	fb9c fef7 	sdiv	lr, ip, r7
 8024e56:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024e5a:	f1bc 0f00 	cmp.w	ip, #0
 8024e5e:	bfbc      	itt	lt
 8024e60:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024e64:	44bc      	addlt	ip, r7
 8024e66:	f10e 0101 	add.w	r1, lr, #1
 8024e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8024e6c:	9a00      	ldr	r2, [sp, #0]
 8024e6e:	8b20      	ldrh	r0, [r4, #24]
 8024e70:	eb12 020c 	adds.w	r2, r2, ip
 8024e74:	8b61      	ldrh	r1, [r4, #26]
 8024e76:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024e7a:	9200      	str	r2, [sp, #0]
 8024e7c:	bf5b      	ittet	pl
 8024e7e:	1bd2      	subpl	r2, r2, r7
 8024e80:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024e84:	46f0      	movmi	r8, lr
 8024e86:	9200      	strpl	r2, [sp, #0]
 8024e88:	9a07      	ldr	r2, [sp, #28]
 8024e8a:	4440      	add	r0, r8
 8024e8c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024e90:	4443      	add	r3, r8
 8024e92:	4415      	add	r5, r2
 8024e94:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e9a:	b200      	sxth	r0, r0
 8024e9c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024ea0:	442a      	add	r2, r5
 8024ea2:	b209      	sxth	r1, r1
 8024ea4:	8320      	strh	r0, [r4, #24]
 8024ea6:	454a      	cmp	r2, r9
 8024ea8:	8361      	strh	r1, [r4, #26]
 8024eaa:	d016      	beq.n	8024eda <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024eac:	ea50 0201 	orrs.w	r2, r0, r1
 8024eb0:	d00d      	beq.n	8024ece <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024eb2:	f1b8 0f00 	cmp.w	r8, #0
 8024eb6:	db0a      	blt.n	8024ece <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024eb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024eba:	4541      	cmp	r1, r8
 8024ebc:	dd07      	ble.n	8024ece <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ebe:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ec2:	4288      	cmp	r0, r1
 8024ec4:	d330      	bcc.n	8024f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024ec6:	f04f 0201 	mov.w	r2, #1
 8024eca:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024ece:	f04f 0200 	mov.w	r2, #0
 8024ed2:	82a5      	strh	r5, [r4, #20]
 8024ed4:	82e6      	strh	r6, [r4, #22]
 8024ed6:	8322      	strh	r2, [r4, #24]
 8024ed8:	8362      	strh	r2, [r4, #26]
 8024eda:	9904      	ldr	r1, [sp, #16]
 8024edc:	42a9      	cmp	r1, r5
 8024ede:	d1c5      	bne.n	8024e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024ee0:	9a02      	ldr	r2, [sp, #8]
 8024ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ee4:	1ad3      	subs	r3, r2, r3
 8024ee6:	8b22      	ldrh	r2, [r4, #24]
 8024ee8:	3120      	adds	r1, #32
 8024eea:	441a      	add	r2, r3
 8024eec:	8322      	strh	r2, [r4, #24]
 8024eee:	9a06      	ldr	r2, [sp, #24]
 8024ef0:	1a89      	subs	r1, r1, r2
 8024ef2:	8b62      	ldrh	r2, [r4, #26]
 8024ef4:	fb03 2301 	mla	r3, r3, r1, r2
 8024ef8:	e64e      	b.n	8024b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024efa:	f04f 33ff 	mov.w	r3, #4294967295
 8024efe:	434a      	muls	r2, r1
 8024f00:	427f      	negs	r7, r7
 8024f02:	9307      	str	r3, [sp, #28]
 8024f04:	2300      	movs	r3, #0
 8024f06:	e768      	b.n	8024dda <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024f08:	f104 0314 	add.w	r3, r4, #20
 8024f0c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024f10:	cb03      	ldmia	r3!, {r0, r1}
 8024f12:	f8c8 0000 	str.w	r0, [r8]
 8024f16:	f8c8 1004 	str.w	r1, [r8, #4]
 8024f1a:	6923      	ldr	r3, [r4, #16]
 8024f1c:	3308      	adds	r3, #8
 8024f1e:	6123      	str	r3, [r4, #16]
 8024f20:	68a3      	ldr	r3, [r4, #8]
 8024f22:	3301      	adds	r3, #1
 8024f24:	60a3      	str	r3, [r4, #8]
 8024f26:	e783      	b.n	8024e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024f28:	f104 0814 	add.w	r8, r4, #20
 8024f2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024f30:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024f34:	f8c9 0000 	str.w	r0, [r9]
 8024f38:	f8c9 1004 	str.w	r1, [r9, #4]
 8024f3c:	6921      	ldr	r1, [r4, #16]
 8024f3e:	3108      	adds	r1, #8
 8024f40:	6121      	str	r1, [r4, #16]
 8024f42:	68a1      	ldr	r1, [r4, #8]
 8024f44:	3101      	adds	r1, #1
 8024f46:	60a1      	str	r1, [r4, #8]
 8024f48:	e7c1      	b.n	8024ece <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024f4a:	f104 0314 	add.w	r3, r4, #20
 8024f4e:	6925      	ldr	r5, [r4, #16]
 8024f50:	cb03      	ldmia	r3!, {r0, r1}
 8024f52:	6028      	str	r0, [r5, #0]
 8024f54:	6069      	str	r1, [r5, #4]
 8024f56:	6923      	ldr	r3, [r4, #16]
 8024f58:	3308      	adds	r3, #8
 8024f5a:	6123      	str	r3, [r4, #16]
 8024f5c:	68a3      	ldr	r3, [r4, #8]
 8024f5e:	3301      	adds	r3, #1
 8024f60:	60a3      	str	r3, [r4, #8]
 8024f62:	e66a      	b.n	8024c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024f64:	f104 0314 	add.w	r3, r4, #20
 8024f68:	6925      	ldr	r5, [r4, #16]
 8024f6a:	cb03      	ldmia	r3!, {r0, r1}
 8024f6c:	6028      	str	r0, [r5, #0]
 8024f6e:	6069      	str	r1, [r5, #4]
 8024f70:	6923      	ldr	r3, [r4, #16]
 8024f72:	3308      	adds	r3, #8
 8024f74:	6123      	str	r3, [r4, #16]
 8024f76:	68a3      	ldr	r3, [r4, #8]
 8024f78:	3301      	adds	r3, #1
 8024f7a:	60a3      	str	r3, [r4, #8]
 8024f7c:	e6be      	b.n	8024cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f7e:	f00b 031f 	and.w	r3, fp, #31
 8024f82:	114f      	asrs	r7, r1, #5
 8024f84:	8b20      	ldrh	r0, [r4, #24]
 8024f86:	f001 011f 	and.w	r1, r1, #31
 8024f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f8c:	9b04      	ldr	r3, [sp, #16]
 8024f8e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024f92:	429f      	cmp	r7, r3
 8024f94:	d10a      	bne.n	8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f98:	4418      	add	r0, r3
 8024f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024f9c:	4419      	add	r1, r3
 8024f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fa0:	8320      	strh	r0, [r4, #24]
 8024fa2:	fb03 9901 	mla	r9, r3, r1, r9
 8024fa6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024faa:	e6af      	b.n	8024d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024fac:	2d00      	cmp	r5, #0
 8024fae:	f2c0 809b 	blt.w	80250e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024fb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024fb4:	f1c1 0320 	rsb	r3, r1, #32
 8024fb8:	4373      	muls	r3, r6
 8024fba:	2601      	movs	r6, #1
 8024fbc:	960e      	str	r6, [sp, #56]	; 0x38
 8024fbe:	2620      	movs	r6, #32
 8024fc0:	960d      	str	r6, [sp, #52]	; 0x34
 8024fc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024fc4:	fb93 f6f5 	sdiv	r6, r3, r5
 8024fc8:	4411      	add	r1, r2
 8024fca:	fb05 3316 	mls	r3, r5, r6, r3
 8024fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	4417      	add	r7, r2
 8024fd4:	9a00      	ldr	r2, [sp, #0]
 8024fd6:	bfbc      	itt	lt
 8024fd8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024fdc:	195b      	addlt	r3, r3, r5
 8024fde:	0412      	lsls	r2, r2, #16
 8024fe0:	fb06 9101 	mla	r1, r6, r1, r9
 8024fe4:	4430      	add	r0, r6
 8024fe6:	eb07 0902 	add.w	r9, r7, r2
 8024fea:	9210      	str	r2, [sp, #64]	; 0x40
 8024fec:	b200      	sxth	r0, r0
 8024fee:	b209      	sxth	r1, r1
 8024ff0:	45c1      	cmp	r9, r8
 8024ff2:	8320      	strh	r0, [r4, #24]
 8024ff4:	8361      	strh	r1, [r4, #26]
 8024ff6:	d017      	beq.n	8025028 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024ff8:	ea50 0201 	orrs.w	r2, r0, r1
 8024ffc:	d00d      	beq.n	802501a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024ffe:	f1be 0f00 	cmp.w	lr, #0
 8025002:	db0a      	blt.n	802501a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025004:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025006:	4571      	cmp	r1, lr
 8025008:	dd07      	ble.n	802501a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802500a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802500e:	4288      	cmp	r0, r1
 8025010:	d372      	bcc.n	80250f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8025012:	f04f 0201 	mov.w	r2, #1
 8025016:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802501a:	9a00      	ldr	r2, [sp, #0]
 802501c:	82a7      	strh	r7, [r4, #20]
 802501e:	82e2      	strh	r2, [r4, #22]
 8025020:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025024:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802502a:	eb02 0e06 	add.w	lr, r2, r6
 802502e:	9a04      	ldr	r2, [sp, #16]
 8025030:	42ba      	cmp	r2, r7
 8025032:	d049      	beq.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8025034:	9a02      	ldr	r2, [sp, #8]
 8025036:	1b5b      	subs	r3, r3, r5
 8025038:	eba2 010e 	sub.w	r1, r2, lr
 802503c:	440e      	add	r6, r1
 802503e:	0176      	lsls	r6, r6, #5
 8025040:	fb96 f8f5 	sdiv	r8, r6, r5
 8025044:	fb05 6618 	mls	r6, r5, r8, r6
 8025048:	2e00      	cmp	r6, #0
 802504a:	bfbc      	itt	lt
 802504c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025050:	1976      	addlt	r6, r6, r5
 8025052:	f108 0201 	add.w	r2, r8, #1
 8025056:	9211      	str	r2, [sp, #68]	; 0x44
 8025058:	199b      	adds	r3, r3, r6
 802505a:	8b20      	ldrh	r0, [r4, #24]
 802505c:	8b61      	ldrh	r1, [r4, #26]
 802505e:	bf54      	ite	pl
 8025060:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8025064:	46c1      	movmi	r9, r8
 8025066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025068:	bf58      	it	pl
 802506a:	1b5b      	subpl	r3, r3, r5
 802506c:	4448      	add	r0, r9
 802506e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025072:	4417      	add	r7, r2
 8025074:	44ce      	add	lr, r9
 8025076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025078:	b200      	sxth	r0, r0
 802507a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802507e:	b209      	sxth	r1, r1
 8025080:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025084:	443a      	add	r2, r7
 8025086:	8320      	strh	r0, [r4, #24]
 8025088:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802508c:	8361      	strh	r1, [r4, #26]
 802508e:	4552      	cmp	r2, sl
 8025090:	d017      	beq.n	80250c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8025092:	ea50 0201 	orrs.w	r2, r0, r1
 8025096:	d00d      	beq.n	80250b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025098:	f1b9 0f00 	cmp.w	r9, #0
 802509c:	db0a      	blt.n	80250b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802509e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80250a0:	4549      	cmp	r1, r9
 80250a2:	dd07      	ble.n	80250b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80250a4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80250a8:	4288      	cmp	r0, r1
 80250aa:	d336      	bcc.n	802511a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80250ac:	f04f 0201 	mov.w	r2, #1
 80250b0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80250b4:	9a00      	ldr	r2, [sp, #0]
 80250b6:	82a7      	strh	r7, [r4, #20]
 80250b8:	82e2      	strh	r2, [r4, #22]
 80250ba:	f8a4 c018 	strh.w	ip, [r4, #24]
 80250be:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80250c2:	9a04      	ldr	r2, [sp, #16]
 80250c4:	42ba      	cmp	r2, r7
 80250c6:	d1c7      	bne.n	8025058 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80250c8:	9b02      	ldr	r3, [sp, #8]
 80250ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80250cc:	eba3 0e0e 	sub.w	lr, r3, lr
 80250d0:	8b23      	ldrh	r3, [r4, #24]
 80250d2:	3120      	adds	r1, #32
 80250d4:	4473      	add	r3, lr
 80250d6:	8323      	strh	r3, [r4, #24]
 80250d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250da:	1ac9      	subs	r1, r1, r3
 80250dc:	8b63      	ldrh	r3, [r4, #26]
 80250de:	fb0e 3e01 	mla	lr, lr, r1, r3
 80250e2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80250e6:	e611      	b.n	8024d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80250e8:	f04f 36ff 	mov.w	r6, #4294967295
 80250ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250ee:	426d      	negs	r5, r5
 80250f0:	960e      	str	r6, [sp, #56]	; 0x38
 80250f2:	2600      	movs	r6, #0
 80250f4:	434b      	muls	r3, r1
 80250f6:	e763      	b.n	8024fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80250f8:	f104 0e14 	add.w	lr, r4, #20
 80250fc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025100:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025104:	f8c8 0000 	str.w	r0, [r8]
 8025108:	f8c8 1004 	str.w	r1, [r8, #4]
 802510c:	6921      	ldr	r1, [r4, #16]
 802510e:	3108      	adds	r1, #8
 8025110:	6121      	str	r1, [r4, #16]
 8025112:	68a1      	ldr	r1, [r4, #8]
 8025114:	3101      	adds	r1, #1
 8025116:	60a1      	str	r1, [r4, #8]
 8025118:	e77f      	b.n	802501a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802511a:	f104 0914 	add.w	r9, r4, #20
 802511e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025122:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025126:	f8ca 0000 	str.w	r0, [sl]
 802512a:	f8ca 1004 	str.w	r1, [sl, #4]
 802512e:	6921      	ldr	r1, [r4, #16]
 8025130:	3108      	adds	r1, #8
 8025132:	6121      	str	r1, [r4, #16]
 8025134:	68a1      	ldr	r1, [r4, #8]
 8025136:	3101      	adds	r1, #1
 8025138:	60a1      	str	r1, [r4, #8]
 802513a:	e7bb      	b.n	80250b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802513c:	f104 0314 	add.w	r3, r4, #20
 8025140:	6925      	ldr	r5, [r4, #16]
 8025142:	cb03      	ldmia	r3!, {r0, r1}
 8025144:	6028      	str	r0, [r5, #0]
 8025146:	6069      	str	r1, [r5, #4]
 8025148:	6923      	ldr	r3, [r4, #16]
 802514a:	3308      	adds	r3, #8
 802514c:	6123      	str	r3, [r4, #16]
 802514e:	68a3      	ldr	r3, [r4, #8]
 8025150:	3301      	adds	r3, #1
 8025152:	60a3      	str	r3, [r4, #8]
 8025154:	e5fd      	b.n	8024d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025156:	f104 0314 	add.w	r3, r4, #20
 802515a:	6925      	ldr	r5, [r4, #16]
 802515c:	cb03      	ldmia	r3!, {r0, r1}
 802515e:	6028      	str	r0, [r5, #0]
 8025160:	6069      	str	r1, [r5, #4]
 8025162:	6923      	ldr	r3, [r4, #16]
 8025164:	3308      	adds	r3, #8
 8025166:	6123      	str	r3, [r4, #16]
 8025168:	68a3      	ldr	r3, [r4, #8]
 802516a:	3301      	adds	r3, #1
 802516c:	60a3      	str	r3, [r4, #8]
 802516e:	e625      	b.n	8024dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025170:	9b05      	ldr	r3, [sp, #20]
 8025172:	ea4f 176b 	mov.w	r7, fp, asr #5
 8025176:	f00b 081f 	and.w	r8, fp, #31
 802517a:	8b20      	ldrh	r0, [r4, #24]
 802517c:	f003 031f 	and.w	r3, r3, #31
 8025180:	4577      	cmp	r7, lr
 8025182:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025186:	9302      	str	r3, [sp, #8]
 8025188:	9b03      	ldr	r3, [sp, #12]
 802518a:	eba3 050c 	sub.w	r5, r3, ip
 802518e:	d108      	bne.n	80251a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025190:	9b02      	ldr	r3, [sp, #8]
 8025192:	4428      	add	r0, r5
 8025194:	4498      	add	r8, r3
 8025196:	8320      	strh	r0, [r4, #24]
 8025198:	fb05 9508 	mla	r5, r5, r8, r9
 802519c:	8365      	strh	r5, [r4, #26]
 802519e:	f7ff bb4f 	b.w	8024840 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80251a2:	9b05      	ldr	r3, [sp, #20]
 80251a4:	ebb3 030b 	subs.w	r3, r3, fp
 80251a8:	f100 809c 	bmi.w	80252e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80251ac:	f1c8 0120 	rsb	r1, r8, #32
 80251b0:	2201      	movs	r2, #1
 80251b2:	f04f 0b20 	mov.w	fp, #32
 80251b6:	434d      	muls	r5, r1
 80251b8:	9201      	str	r2, [sp, #4]
 80251ba:	9a01      	ldr	r2, [sp, #4]
 80251bc:	44d8      	add	r8, fp
 80251be:	fb95 f6f3 	sdiv	r6, r5, r3
 80251c2:	fb03 5516 	mls	r5, r3, r6, r5
 80251c6:	4417      	add	r7, r2
 80251c8:	9a00      	ldr	r2, [sp, #0]
 80251ca:	2d00      	cmp	r5, #0
 80251cc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80251d0:	bfbc      	itt	lt
 80251d2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80251d6:	18ed      	addlt	r5, r5, r3
 80251d8:	eb07 0a02 	add.w	sl, r7, r2
 80251dc:	9204      	str	r2, [sp, #16]
 80251de:	fb06 9808 	mla	r8, r6, r8, r9
 80251e2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80251e6:	4430      	add	r0, r6
 80251e8:	fa0f f188 	sxth.w	r1, r8
 80251ec:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80251f0:	b200      	sxth	r0, r0
 80251f2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80251f6:	8361      	strh	r1, [r4, #26]
 80251f8:	8320      	strh	r0, [r4, #24]
 80251fa:	45ca      	cmp	sl, r9
 80251fc:	d015      	beq.n	802522a <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80251fe:	ea50 0201 	orrs.w	r2, r0, r1
 8025202:	d00c      	beq.n	802521e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025204:	f1b8 0f00 	cmp.w	r8, #0
 8025208:	db09      	blt.n	802521e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802520a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802520c:	4541      	cmp	r1, r8
 802520e:	dd06      	ble.n	802521e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025210:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025214:	4288      	cmp	r0, r1
 8025216:	d36e      	bcc.n	80252f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8025218:	2101      	movs	r1, #1
 802521a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802521e:	2100      	movs	r1, #0
 8025220:	9a00      	ldr	r2, [sp, #0]
 8025222:	82a7      	strh	r7, [r4, #20]
 8025224:	82e2      	strh	r2, [r4, #22]
 8025226:	8321      	strh	r1, [r4, #24]
 8025228:	8361      	strh	r1, [r4, #26]
 802522a:	45be      	cmp	lr, r7
 802522c:	44b4      	add	ip, r6
 802522e:	d048      	beq.n	80252c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025230:	9a03      	ldr	r2, [sp, #12]
 8025232:	1aed      	subs	r5, r5, r3
 8025234:	eba2 010c 	sub.w	r1, r2, ip
 8025238:	440e      	add	r6, r1
 802523a:	0176      	lsls	r6, r6, #5
 802523c:	fb96 f8f3 	sdiv	r8, r6, r3
 8025240:	fb03 6618 	mls	r6, r3, r8, r6
 8025244:	2e00      	cmp	r6, #0
 8025246:	bfbc      	itt	lt
 8025248:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802524c:	18f6      	addlt	r6, r6, r3
 802524e:	f108 0201 	add.w	r2, r8, #1
 8025252:	9205      	str	r2, [sp, #20]
 8025254:	19ad      	adds	r5, r5, r6
 8025256:	8b20      	ldrh	r0, [r4, #24]
 8025258:	8b61      	ldrh	r1, [r4, #26]
 802525a:	bf54      	ite	pl
 802525c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025260:	46c1      	movmi	r9, r8
 8025262:	9a01      	ldr	r2, [sp, #4]
 8025264:	bf58      	it	pl
 8025266:	1aed      	subpl	r5, r5, r3
 8025268:	4448      	add	r0, r9
 802526a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802526e:	4417      	add	r7, r2
 8025270:	44cc      	add	ip, r9
 8025272:	9a04      	ldr	r2, [sp, #16]
 8025274:	b200      	sxth	r0, r0
 8025276:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802527a:	b209      	sxth	r1, r1
 802527c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025280:	443a      	add	r2, r7
 8025282:	8320      	strh	r0, [r4, #24]
 8025284:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025288:	8361      	strh	r1, [r4, #26]
 802528a:	4552      	cmp	r2, sl
 802528c:	d017      	beq.n	80252be <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802528e:	ea50 0201 	orrs.w	r2, r0, r1
 8025292:	d00d      	beq.n	80252b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025294:	f1b9 0f00 	cmp.w	r9, #0
 8025298:	db0a      	blt.n	80252b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802529a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802529c:	4549      	cmp	r1, r9
 802529e:	dd07      	ble.n	80252b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80252a0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80252a4:	4288      	cmp	r0, r1
 80252a6:	d337      	bcc.n	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80252a8:	f04f 0201 	mov.w	r2, #1
 80252ac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80252b0:	9a00      	ldr	r2, [sp, #0]
 80252b2:	82a7      	strh	r7, [r4, #20]
 80252b4:	82e2      	strh	r2, [r4, #22]
 80252b6:	f04f 0200 	mov.w	r2, #0
 80252ba:	8322      	strh	r2, [r4, #24]
 80252bc:	8362      	strh	r2, [r4, #26]
 80252be:	45be      	cmp	lr, r7
 80252c0:	d1c8      	bne.n	8025254 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80252c2:	9b03      	ldr	r3, [sp, #12]
 80252c4:	8b62      	ldrh	r2, [r4, #26]
 80252c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80252ca:	8b23      	ldrh	r3, [r4, #24]
 80252cc:	4463      	add	r3, ip
 80252ce:	8323      	strh	r3, [r4, #24]
 80252d0:	9b02      	ldr	r3, [sp, #8]
 80252d2:	3320      	adds	r3, #32
 80252d4:	eba3 030b 	sub.w	r3, r3, fp
 80252d8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80252dc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80252e0:	f7ff baae 	b.w	8024840 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80252e4:	f04f 32ff 	mov.w	r2, #4294967295
 80252e8:	fb05 f508 	mul.w	r5, r5, r8
 80252ec:	425b      	negs	r3, r3
 80252ee:	f04f 0b00 	mov.w	fp, #0
 80252f2:	9201      	str	r2, [sp, #4]
 80252f4:	e761      	b.n	80251ba <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80252f6:	f104 0814 	add.w	r8, r4, #20
 80252fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80252fe:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025302:	f8c9 0000 	str.w	r0, [r9]
 8025306:	f8c9 1004 	str.w	r1, [r9, #4]
 802530a:	6921      	ldr	r1, [r4, #16]
 802530c:	3108      	adds	r1, #8
 802530e:	6121      	str	r1, [r4, #16]
 8025310:	68a1      	ldr	r1, [r4, #8]
 8025312:	3101      	adds	r1, #1
 8025314:	60a1      	str	r1, [r4, #8]
 8025316:	e782      	b.n	802521e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025318:	f104 0914 	add.w	r9, r4, #20
 802531c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025320:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025324:	f8ca 0000 	str.w	r0, [sl]
 8025328:	f8ca 1004 	str.w	r1, [sl, #4]
 802532c:	6921      	ldr	r1, [r4, #16]
 802532e:	3108      	adds	r1, #8
 8025330:	6121      	str	r1, [r4, #16]
 8025332:	68a1      	ldr	r1, [r4, #8]
 8025334:	3101      	adds	r1, #1
 8025336:	60a1      	str	r1, [r4, #8]
 8025338:	e7ba      	b.n	80252b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802533a <_ZN8touchgfx7Outline6lineToEii>:
 802533a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802533c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802533e:	4604      	mov	r4, r0
 8025340:	460d      	mov	r5, r1
 8025342:	4616      	mov	r6, r2
 8025344:	079b      	lsls	r3, r3, #30
 8025346:	d526      	bpl.n	8025396 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025348:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802534c:	ea85 0001 	eor.w	r0, r5, r1
 8025350:	ea86 0302 	eor.w	r3, r6, r2
 8025354:	4303      	orrs	r3, r0
 8025356:	d01e      	beq.n	8025396 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802535a:	114b      	asrs	r3, r1, #5
 802535c:	9600      	str	r6, [sp, #0]
 802535e:	4283      	cmp	r3, r0
 8025360:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025362:	bfb8      	it	lt
 8025364:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025366:	3301      	adds	r3, #1
 8025368:	4283      	cmp	r3, r0
 802536a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802536c:	bfc8      	it	gt
 802536e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025370:	116b      	asrs	r3, r5, #5
 8025372:	4283      	cmp	r3, r0
 8025374:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025376:	bfb8      	it	lt
 8025378:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802537a:	3301      	adds	r3, #1
 802537c:	4283      	cmp	r3, r0
 802537e:	4620      	mov	r0, r4
 8025380:	bfc8      	it	gt
 8025382:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025384:	462b      	mov	r3, r5
 8025386:	f7ff f9e3 	bl	8024750 <_ZN8touchgfx7Outline10renderLineEiiii>
 802538a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802538c:	f043 0301 	orr.w	r3, r3, #1
 8025390:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025394:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025396:	b002      	add	sp, #8
 8025398:	bd70      	pop	{r4, r5, r6, pc}

0802539a <_ZN8touchgfx7Outline6moveToEii>:
 802539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802539c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802539e:	4615      	mov	r5, r2
 80253a0:	4604      	mov	r4, r0
 80253a2:	460e      	mov	r6, r1
 80253a4:	079a      	lsls	r2, r3, #30
 80253a6:	d401      	bmi.n	80253ac <_ZN8touchgfx7Outline6moveToEii+0x12>
 80253a8:	f7ff f98c 	bl	80246c4 <_ZN8touchgfx7Outline5resetEv>
 80253ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253ae:	07db      	lsls	r3, r3, #31
 80253b0:	d504      	bpl.n	80253bc <_ZN8touchgfx7Outline6moveToEii+0x22>
 80253b2:	4620      	mov	r0, r4
 80253b4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80253b8:	f7ff ffbf 	bl	802533a <_ZN8touchgfx7Outline6lineToEii>
 80253bc:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80253c0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80253c4:	116f      	asrs	r7, r5, #5
 80253c6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80253ca:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80253ce:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80253d2:	4291      	cmp	r1, r2
 80253d4:	d015      	beq.n	8025402 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80253d6:	8b61      	ldrh	r1, [r4, #26]
 80253d8:	8b22      	ldrh	r2, [r4, #24]
 80253da:	430a      	orrs	r2, r1
 80253dc:	d00b      	beq.n	80253f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253de:	2b00      	cmp	r3, #0
 80253e0:	db09      	blt.n	80253f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80253e4:	429a      	cmp	r2, r3
 80253e6:	dd06      	ble.n	80253f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253e8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80253ec:	429a      	cmp	r2, r3
 80253ee:	d30d      	bcc.n	802540c <_ZN8touchgfx7Outline6moveToEii+0x72>
 80253f0:	2301      	movs	r3, #1
 80253f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80253f6:	2300      	movs	r3, #0
 80253f8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80253fc:	82e7      	strh	r7, [r4, #22]
 80253fe:	8323      	strh	r3, [r4, #24]
 8025400:	8363      	strh	r3, [r4, #26]
 8025402:	61e6      	str	r6, [r4, #28]
 8025404:	62a5      	str	r5, [r4, #40]	; 0x28
 8025406:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802540c:	f104 0314 	add.w	r3, r4, #20
 8025410:	6922      	ldr	r2, [r4, #16]
 8025412:	cb03      	ldmia	r3!, {r0, r1}
 8025414:	6010      	str	r0, [r2, #0]
 8025416:	6051      	str	r1, [r2, #4]
 8025418:	6923      	ldr	r3, [r4, #16]
 802541a:	3308      	adds	r3, #8
 802541c:	6123      	str	r3, [r4, #16]
 802541e:	68a3      	ldr	r3, [r4, #8]
 8025420:	3301      	adds	r3, #1
 8025422:	60a3      	str	r3, [r4, #8]
 8025424:	e7e7      	b.n	80253f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08025426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8025426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802542a:	b0d1      	sub	sp, #324	; 0x144
 802542c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025430:	466c      	mov	r4, sp
 8025432:	1a0d      	subs	r5, r1, r0
 8025434:	f100 0208 	add.w	r2, r0, #8
 8025438:	2d48      	cmp	r5, #72	; 0x48
 802543a:	f340 80ba 	ble.w	80255b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802543e:	112d      	asrs	r5, r5, #4
 8025440:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025444:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025448:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802544c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025450:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025454:	681e      	ldr	r6, [r3, #0]
 8025456:	6006      	str	r6, [r0, #0]
 8025458:	685e      	ldr	r6, [r3, #4]
 802545a:	6046      	str	r6, [r0, #4]
 802545c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025460:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025464:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025468:	80df      	strh	r7, [r3, #6]
 802546a:	f1a1 0308 	sub.w	r3, r1, #8
 802546e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025472:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025476:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802547a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802547e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025482:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025486:	45ac      	cmp	ip, r5
 8025488:	dd0f      	ble.n	80254aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802548a:	681d      	ldr	r5, [r3, #0]
 802548c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025490:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025494:	6015      	str	r5, [r2, #0]
 8025496:	685d      	ldr	r5, [r3, #4]
 8025498:	6055      	str	r5, [r2, #4]
 802549a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802549e:	f821 6c06 	strh.w	r6, [r1, #-6]
 80254a2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80254a6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80254aa:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80254ae:	f9b0 7000 	ldrsh.w	r7, [r0]
 80254b2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80254b6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80254ba:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80254be:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80254c2:	4565      	cmp	r5, ip
 80254c4:	dd0d      	ble.n	80254e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80254c6:	6815      	ldr	r5, [r2, #0]
 80254c8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80254cc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80254d0:	6005      	str	r5, [r0, #0]
 80254d2:	6855      	ldr	r5, [r2, #4]
 80254d4:	8107      	strh	r7, [r0, #8]
 80254d6:	6045      	str	r5, [r0, #4]
 80254d8:	8146      	strh	r6, [r0, #10]
 80254da:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80254de:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80254e2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80254e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80254ea:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80254ee:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80254f2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80254f6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80254fa:	45ac      	cmp	ip, r5
 80254fc:	dd0f      	ble.n	802551e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80254fe:	681d      	ldr	r5, [r3, #0]
 8025500:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025504:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025508:	6005      	str	r5, [r0, #0]
 802550a:	685d      	ldr	r5, [r3, #4]
 802550c:	6045      	str	r5, [r0, #4]
 802550e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025512:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025516:	f821 ec04 	strh.w	lr, [r1, #-4]
 802551a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802551e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025522:	f102 0508 	add.w	r5, r2, #8
 8025526:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802552a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802552e:	462f      	mov	r7, r5
 8025530:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025534:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025538:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802553c:	45b2      	cmp	sl, r6
 802553e:	dc18      	bgt.n	8025572 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025540:	3b08      	subs	r3, #8
 8025542:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025546:	f9b3 6000 	ldrsh.w	r6, [r3]
 802554a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802554e:	45b2      	cmp	sl, r6
 8025550:	dbf6      	blt.n	8025540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025552:	42ab      	cmp	r3, r5
 8025554:	681e      	ldr	r6, [r3, #0]
 8025556:	d30e      	bcc.n	8025576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025558:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802555c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025560:	602e      	str	r6, [r5, #0]
 8025562:	685e      	ldr	r6, [r3, #4]
 8025564:	606e      	str	r6, [r5, #4]
 8025566:	f8a3 9000 	strh.w	r9, [r3]
 802556a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802556e:	809f      	strh	r7, [r3, #4]
 8025570:	80da      	strh	r2, [r3, #6]
 8025572:	462a      	mov	r2, r5
 8025574:	e7d3      	b.n	802551e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025576:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802557a:	6006      	str	r6, [r0, #0]
 802557c:	685e      	ldr	r6, [r3, #4]
 802557e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025582:	6046      	str	r6, [r0, #4]
 8025584:	1a1e      	subs	r6, r3, r0
 8025586:	80da      	strh	r2, [r3, #6]
 8025588:	1b4a      	subs	r2, r1, r5
 802558a:	f8a3 e000 	strh.w	lr, [r3]
 802558e:	10d2      	asrs	r2, r2, #3
 8025590:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025594:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025598:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802559c:	bfb5      	itete	lt
 802559e:	e9c4 0300 	strdlt	r0, r3, [r4]
 80255a2:	4607      	movge	r7, r0
 80255a4:	460b      	movlt	r3, r1
 80255a6:	e9c4 5100 	strdge	r5, r1, [r4]
 80255aa:	4638      	mov	r0, r7
 80255ac:	3408      	adds	r4, #8
 80255ae:	4619      	mov	r1, r3
 80255b0:	e73f      	b.n	8025432 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80255b2:	4291      	cmp	r1, r2
 80255b4:	d925      	bls.n	8025602 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80255b6:	f1a2 0310 	sub.w	r3, r2, #16
 80255ba:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80255be:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80255c2:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80255c6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80255ca:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80255ce:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80255d2:	42b5      	cmp	r5, r6
 80255d4:	dd13      	ble.n	80255fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80255d6:	461d      	mov	r5, r3
 80255d8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80255dc:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80255e0:	3b08      	subs	r3, #8
 80255e2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80255e6:	619e      	str	r6, [r3, #24]
 80255e8:	42a8      	cmp	r0, r5
 80255ea:	686e      	ldr	r6, [r5, #4]
 80255ec:	f8a3 c010 	strh.w	ip, [r3, #16]
 80255f0:	61de      	str	r6, [r3, #28]
 80255f2:	825f      	strh	r7, [r3, #18]
 80255f4:	f8a3 8014 	strh.w	r8, [r3, #20]
 80255f8:	f8a3 e016 	strh.w	lr, [r3, #22]
 80255fc:	d1dd      	bne.n	80255ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80255fe:	3208      	adds	r2, #8
 8025600:	e7d7      	b.n	80255b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025602:	466b      	mov	r3, sp
 8025604:	429c      	cmp	r4, r3
 8025606:	d903      	bls.n	8025610 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025608:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802560c:	3c08      	subs	r4, #8
 802560e:	e710      	b.n	8025432 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025610:	b051      	add	sp, #324	; 0x144
 8025612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025616 <_ZN8touchgfx7Outline9sortCellsEv>:
 8025616:	6881      	ldr	r1, [r0, #8]
 8025618:	b111      	cbz	r1, 8025620 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802561a:	68c0      	ldr	r0, [r0, #12]
 802561c:	f7ff bf03 	b.w	8025426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025620:	4770      	bx	lr

08025622 <_ZN8touchgfx7Outline8getCellsEv>:
 8025622:	b510      	push	{r4, lr}
 8025624:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025626:	4604      	mov	r4, r0
 8025628:	07da      	lsls	r2, r3, #31
 802562a:	d507      	bpl.n	802563c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802562c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025630:	f7ff fe83 	bl	802533a <_ZN8touchgfx7Outline6lineToEii>
 8025634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025636:	f023 0301 	bic.w	r3, r3, #1
 802563a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802563c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802563e:	079b      	lsls	r3, r3, #30
 8025640:	d51a      	bpl.n	8025678 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025642:	8b62      	ldrh	r2, [r4, #26]
 8025644:	8b23      	ldrh	r3, [r4, #24]
 8025646:	4313      	orrs	r3, r2
 8025648:	d00d      	beq.n	8025666 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802564a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802564e:	2b00      	cmp	r3, #0
 8025650:	db09      	blt.n	8025666 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025652:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025654:	4293      	cmp	r3, r2
 8025656:	da06      	bge.n	8025666 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025658:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802565c:	429a      	cmp	r2, r3
 802565e:	d80d      	bhi.n	802567c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025660:	2301      	movs	r3, #1
 8025662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025666:	68a0      	ldr	r0, [r4, #8]
 8025668:	b138      	cbz	r0, 802567a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802566a:	4620      	mov	r0, r4
 802566c:	f7ff ffd3 	bl	8025616 <_ZN8touchgfx7Outline9sortCellsEv>
 8025670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025672:	f023 0302 	bic.w	r3, r3, #2
 8025676:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025678:	68e0      	ldr	r0, [r4, #12]
 802567a:	bd10      	pop	{r4, pc}
 802567c:	f104 0314 	add.w	r3, r4, #20
 8025680:	6922      	ldr	r2, [r4, #16]
 8025682:	cb03      	ldmia	r3!, {r0, r1}
 8025684:	6010      	str	r0, [r2, #0]
 8025686:	6051      	str	r1, [r2, #4]
 8025688:	6923      	ldr	r3, [r4, #16]
 802568a:	3308      	adds	r3, #8
 802568c:	6123      	str	r3, [r4, #16]
 802568e:	68a3      	ldr	r3, [r4, #8]
 8025690:	3301      	adds	r3, #1
 8025692:	60a3      	str	r3, [r4, #8]
 8025694:	e7e7      	b.n	8025666 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025696 <_ZN8touchgfx8ScanlineD1Ev>:
 8025696:	4770      	bx	lr

08025698 <_ZN8touchgfx8ScanlineD0Ev>:
 8025698:	b510      	push	{r4, lr}
 802569a:	4604      	mov	r4, r0
 802569c:	2124      	movs	r1, #36	; 0x24
 802569e:	f000 f87a 	bl	8025796 <_ZdlPvj>
 80256a2:	4620      	mov	r0, r4
 80256a4:	bd10      	pop	{r4, pc}

080256a6 <_ZN8touchgfx8Scanline5resetEv>:
 80256a6:	b510      	push	{r4, lr}
 80256a8:	4604      	mov	r4, r0
 80256aa:	f7f2 f9c3 	bl	8017a34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80256ae:	61a0      	str	r0, [r4, #24]
 80256b0:	f7f2 f9c6 	bl	8017a40 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80256b4:	61e0      	str	r0, [r4, #28]
 80256b6:	f7f2 f9c9 	bl	8017a4c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80256ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256be:	6220      	str	r0, [r4, #32]
 80256c0:	6160      	str	r0, [r4, #20]
 80256c2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80256c6:	69e3      	ldr	r3, [r4, #28]
 80256c8:	6123      	str	r3, [r4, #16]
 80256ca:	2300      	movs	r3, #0
 80256cc:	60e3      	str	r3, [r4, #12]
 80256ce:	bd10      	pop	{r4, pc}

080256d0 <_ZN8touchgfx8ScanlineC1Ev>:
 80256d0:	4b07      	ldr	r3, [pc, #28]	; (80256f0 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80256d2:	b510      	push	{r4, lr}
 80256d4:	6003      	str	r3, [r0, #0]
 80256d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256da:	4604      	mov	r4, r0
 80256dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80256e0:	2300      	movs	r3, #0
 80256e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80256e6:	6143      	str	r3, [r0, #20]
 80256e8:	f7ff ffdd 	bl	80256a6 <_ZN8touchgfx8Scanline5resetEv>
 80256ec:	4620      	mov	r0, r4
 80256ee:	bd10      	pop	{r4, pc}
 80256f0:	0802b7ec 	.word	0x0802b7ec

080256f4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80256f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256f8:	1e0c      	subs	r4, r1, #0
 80256fa:	4605      	mov	r5, r0
 80256fc:	4617      	mov	r7, r2
 80256fe:	461e      	mov	r6, r3
 8025700:	da03      	bge.n	802570a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025702:	4426      	add	r6, r4
 8025704:	2e01      	cmp	r6, #1
 8025706:	d421      	bmi.n	802574c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025708:	2400      	movs	r4, #0
 802570a:	f7f2 f98d 	bl	8017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802570e:	42a0      	cmp	r0, r4
 8025710:	d91c      	bls.n	802574c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025712:	eb04 0806 	add.w	r8, r4, r6
 8025716:	f7f2 f987 	bl	8017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802571a:	4580      	cmp	r8, r0
 802571c:	d902      	bls.n	8025724 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802571e:	f7f2 f983 	bl	8017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025722:	1b06      	subs	r6, r0, r4
 8025724:	69a8      	ldr	r0, [r5, #24]
 8025726:	4632      	mov	r2, r6
 8025728:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802572c:	4420      	add	r0, r4
 802572e:	f7f4 fb0c 	bl	8019d4a <_ZN8touchgfx6memsetEPvhm>
 8025732:	686b      	ldr	r3, [r5, #4]
 8025734:	b2b2      	uxth	r2, r6
 8025736:	3301      	adds	r3, #1
 8025738:	42a3      	cmp	r3, r4
 802573a:	696b      	ldr	r3, [r5, #20]
 802573c:	d108      	bne.n	8025750 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802573e:	8819      	ldrh	r1, [r3, #0]
 8025740:	440a      	add	r2, r1
 8025742:	801a      	strh	r2, [r3, #0]
 8025744:	3c01      	subs	r4, #1
 8025746:	4434      	add	r4, r6
 8025748:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025750:	1c99      	adds	r1, r3, #2
 8025752:	6169      	str	r1, [r5, #20]
 8025754:	805a      	strh	r2, [r3, #2]
 8025756:	692b      	ldr	r3, [r5, #16]
 8025758:	1c9a      	adds	r2, r3, #2
 802575a:	612a      	str	r2, [r5, #16]
 802575c:	805c      	strh	r4, [r3, #2]
 802575e:	68eb      	ldr	r3, [r5, #12]
 8025760:	3301      	adds	r3, #1
 8025762:	60eb      	str	r3, [r5, #12]
 8025764:	e7ee      	b.n	8025744 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025766 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025766:	2200      	movs	r2, #0
 8025768:	6002      	str	r2, [r0, #0]
 802576a:	7102      	strb	r2, [r0, #4]
 802576c:	6102      	str	r2, [r0, #16]
 802576e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8025772:	4770      	bx	lr

08025774 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025774:	4770      	bx	lr

08025776 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025776:	6083      	str	r3, [r0, #8]
 8025778:	9b00      	ldr	r3, [sp, #0]
 802577a:	6001      	str	r1, [r0, #0]
 802577c:	60c3      	str	r3, [r0, #12]
 802577e:	9b01      	ldr	r3, [sp, #4]
 8025780:	7102      	strb	r2, [r0, #4]
 8025782:	6103      	str	r3, [r0, #16]
 8025784:	4770      	bx	lr

08025786 <__aeabi_atexit>:
 8025786:	460b      	mov	r3, r1
 8025788:	4601      	mov	r1, r0
 802578a:	4618      	mov	r0, r3
 802578c:	f000 b852 	b.w	8025834 <__cxa_atexit>

08025790 <__cxa_pure_virtual>:
 8025790:	b508      	push	{r3, lr}
 8025792:	f000 f81f 	bl	80257d4 <_ZSt9terminatev>

08025796 <_ZdlPvj>:
 8025796:	f000 b80f 	b.w	80257b8 <_ZdlPv>

0802579a <__cxa_guard_acquire>:
 802579a:	6803      	ldr	r3, [r0, #0]
 802579c:	07db      	lsls	r3, r3, #31
 802579e:	d406      	bmi.n	80257ae <__cxa_guard_acquire+0x14>
 80257a0:	7843      	ldrb	r3, [r0, #1]
 80257a2:	b103      	cbz	r3, 80257a6 <__cxa_guard_acquire+0xc>
 80257a4:	deff      	udf	#255	; 0xff
 80257a6:	2301      	movs	r3, #1
 80257a8:	7043      	strb	r3, [r0, #1]
 80257aa:	4618      	mov	r0, r3
 80257ac:	4770      	bx	lr
 80257ae:	2000      	movs	r0, #0
 80257b0:	4770      	bx	lr

080257b2 <__cxa_guard_release>:
 80257b2:	2301      	movs	r3, #1
 80257b4:	6003      	str	r3, [r0, #0]
 80257b6:	4770      	bx	lr

080257b8 <_ZdlPv>:
 80257b8:	f000 b88e 	b.w	80258d8 <free>

080257bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80257bc:	b508      	push	{r3, lr}
 80257be:	4780      	blx	r0
 80257c0:	f000 f80d 	bl	80257de <abort>

080257c4 <_ZSt13get_terminatev>:
 80257c4:	4b02      	ldr	r3, [pc, #8]	; (80257d0 <_ZSt13get_terminatev+0xc>)
 80257c6:	6818      	ldr	r0, [r3, #0]
 80257c8:	f3bf 8f5b 	dmb	ish
 80257cc:	4770      	bx	lr
 80257ce:	bf00      	nop
 80257d0:	200000a8 	.word	0x200000a8

080257d4 <_ZSt9terminatev>:
 80257d4:	b508      	push	{r3, lr}
 80257d6:	f7ff fff5 	bl	80257c4 <_ZSt13get_terminatev>
 80257da:	f7ff ffef 	bl	80257bc <_ZN10__cxxabiv111__terminateEPFvvE>

080257de <abort>:
 80257de:	b508      	push	{r3, lr}
 80257e0:	2006      	movs	r0, #6
 80257e2:	f000 fc3d 	bl	8026060 <raise>
 80257e6:	2001      	movs	r0, #1
 80257e8:	f7de f878 	bl	80038dc <_exit>

080257ec <__assert_func>:
 80257ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80257ee:	461c      	mov	r4, r3
 80257f0:	4b09      	ldr	r3, [pc, #36]	; (8025818 <__assert_func+0x2c>)
 80257f2:	681b      	ldr	r3, [r3, #0]
 80257f4:	4605      	mov	r5, r0
 80257f6:	68d8      	ldr	r0, [r3, #12]
 80257f8:	b152      	cbz	r2, 8025810 <__assert_func+0x24>
 80257fa:	4b08      	ldr	r3, [pc, #32]	; (802581c <__assert_func+0x30>)
 80257fc:	9100      	str	r1, [sp, #0]
 80257fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025802:	4907      	ldr	r1, [pc, #28]	; (8025820 <__assert_func+0x34>)
 8025804:	462b      	mov	r3, r5
 8025806:	4622      	mov	r2, r4
 8025808:	f000 f828 	bl	802585c <fiprintf>
 802580c:	f7ff ffe7 	bl	80257de <abort>
 8025810:	4b04      	ldr	r3, [pc, #16]	; (8025824 <__assert_func+0x38>)
 8025812:	461a      	mov	r2, r3
 8025814:	e7f2      	b.n	80257fc <__assert_func+0x10>
 8025816:	bf00      	nop
 8025818:	200000ac 	.word	0x200000ac
 802581c:	0802b7f4 	.word	0x0802b7f4
 8025820:	0802b801 	.word	0x0802b801
 8025824:	0802b82f 	.word	0x0802b82f

08025828 <atexit>:
 8025828:	2300      	movs	r3, #0
 802582a:	4601      	mov	r1, r0
 802582c:	461a      	mov	r2, r3
 802582e:	4618      	mov	r0, r3
 8025830:	f000 bcf2 	b.w	8026218 <__register_exitproc>

08025834 <__cxa_atexit>:
 8025834:	b510      	push	{r4, lr}
 8025836:	4c05      	ldr	r4, [pc, #20]	; (802584c <__cxa_atexit+0x18>)
 8025838:	4613      	mov	r3, r2
 802583a:	b12c      	cbz	r4, 8025848 <__cxa_atexit+0x14>
 802583c:	460a      	mov	r2, r1
 802583e:	4601      	mov	r1, r0
 8025840:	2002      	movs	r0, #2
 8025842:	f000 fce9 	bl	8026218 <__register_exitproc>
 8025846:	bd10      	pop	{r4, pc}
 8025848:	4620      	mov	r0, r4
 802584a:	e7fc      	b.n	8025846 <__cxa_atexit+0x12>
 802584c:	08026219 	.word	0x08026219

08025850 <__errno>:
 8025850:	4b01      	ldr	r3, [pc, #4]	; (8025858 <__errno+0x8>)
 8025852:	6818      	ldr	r0, [r3, #0]
 8025854:	4770      	bx	lr
 8025856:	bf00      	nop
 8025858:	200000ac 	.word	0x200000ac

0802585c <fiprintf>:
 802585c:	b40e      	push	{r1, r2, r3}
 802585e:	b503      	push	{r0, r1, lr}
 8025860:	4601      	mov	r1, r0
 8025862:	ab03      	add	r3, sp, #12
 8025864:	4805      	ldr	r0, [pc, #20]	; (802587c <fiprintf+0x20>)
 8025866:	f853 2b04 	ldr.w	r2, [r3], #4
 802586a:	6800      	ldr	r0, [r0, #0]
 802586c:	9301      	str	r3, [sp, #4]
 802586e:	f000 f921 	bl	8025ab4 <_vfiprintf_r>
 8025872:	b002      	add	sp, #8
 8025874:	f85d eb04 	ldr.w	lr, [sp], #4
 8025878:	b003      	add	sp, #12
 802587a:	4770      	bx	lr
 802587c:	200000ac 	.word	0x200000ac

08025880 <__libc_init_array>:
 8025880:	b570      	push	{r4, r5, r6, lr}
 8025882:	4e0d      	ldr	r6, [pc, #52]	; (80258b8 <__libc_init_array+0x38>)
 8025884:	4c0d      	ldr	r4, [pc, #52]	; (80258bc <__libc_init_array+0x3c>)
 8025886:	1ba4      	subs	r4, r4, r6
 8025888:	10a4      	asrs	r4, r4, #2
 802588a:	2500      	movs	r5, #0
 802588c:	42a5      	cmp	r5, r4
 802588e:	d109      	bne.n	80258a4 <__libc_init_array+0x24>
 8025890:	4e0b      	ldr	r6, [pc, #44]	; (80258c0 <__libc_init_array+0x40>)
 8025892:	4c0c      	ldr	r4, [pc, #48]	; (80258c4 <__libc_init_array+0x44>)
 8025894:	f000 ffb0 	bl	80267f8 <_init>
 8025898:	1ba4      	subs	r4, r4, r6
 802589a:	10a4      	asrs	r4, r4, #2
 802589c:	2500      	movs	r5, #0
 802589e:	42a5      	cmp	r5, r4
 80258a0:	d105      	bne.n	80258ae <__libc_init_array+0x2e>
 80258a2:	bd70      	pop	{r4, r5, r6, pc}
 80258a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80258a8:	4798      	blx	r3
 80258aa:	3501      	adds	r5, #1
 80258ac:	e7ee      	b.n	802588c <__libc_init_array+0xc>
 80258ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80258b2:	4798      	blx	r3
 80258b4:	3501      	adds	r5, #1
 80258b6:	e7f2      	b.n	802589e <__libc_init_array+0x1e>
 80258b8:	08062ce4 	.word	0x08062ce4
 80258bc:	08062ce4 	.word	0x08062ce4
 80258c0:	08062ce4 	.word	0x08062ce4
 80258c4:	08062cf8 	.word	0x08062cf8

080258c8 <malloc>:
 80258c8:	4b02      	ldr	r3, [pc, #8]	; (80258d4 <malloc+0xc>)
 80258ca:	4601      	mov	r1, r0
 80258cc:	6818      	ldr	r0, [r3, #0]
 80258ce:	f000 b86d 	b.w	80259ac <_malloc_r>
 80258d2:	bf00      	nop
 80258d4:	200000ac 	.word	0x200000ac

080258d8 <free>:
 80258d8:	4b02      	ldr	r3, [pc, #8]	; (80258e4 <free+0xc>)
 80258da:	4601      	mov	r1, r0
 80258dc:	6818      	ldr	r0, [r3, #0]
 80258de:	f000 b817 	b.w	8025910 <_free_r>
 80258e2:	bf00      	nop
 80258e4:	200000ac 	.word	0x200000ac

080258e8 <memcpy>:
 80258e8:	b510      	push	{r4, lr}
 80258ea:	1e43      	subs	r3, r0, #1
 80258ec:	440a      	add	r2, r1
 80258ee:	4291      	cmp	r1, r2
 80258f0:	d100      	bne.n	80258f4 <memcpy+0xc>
 80258f2:	bd10      	pop	{r4, pc}
 80258f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80258f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80258fc:	e7f7      	b.n	80258ee <memcpy+0x6>

080258fe <memset>:
 80258fe:	4402      	add	r2, r0
 8025900:	4603      	mov	r3, r0
 8025902:	4293      	cmp	r3, r2
 8025904:	d100      	bne.n	8025908 <memset+0xa>
 8025906:	4770      	bx	lr
 8025908:	f803 1b01 	strb.w	r1, [r3], #1
 802590c:	e7f9      	b.n	8025902 <memset+0x4>
	...

08025910 <_free_r>:
 8025910:	b538      	push	{r3, r4, r5, lr}
 8025912:	4605      	mov	r5, r0
 8025914:	2900      	cmp	r1, #0
 8025916:	d045      	beq.n	80259a4 <_free_r+0x94>
 8025918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802591c:	1f0c      	subs	r4, r1, #4
 802591e:	2b00      	cmp	r3, #0
 8025920:	bfb8      	it	lt
 8025922:	18e4      	addlt	r4, r4, r3
 8025924:	f000 feba 	bl	802669c <__malloc_lock>
 8025928:	4a1f      	ldr	r2, [pc, #124]	; (80259a8 <_free_r+0x98>)
 802592a:	6813      	ldr	r3, [r2, #0]
 802592c:	4610      	mov	r0, r2
 802592e:	b933      	cbnz	r3, 802593e <_free_r+0x2e>
 8025930:	6063      	str	r3, [r4, #4]
 8025932:	6014      	str	r4, [r2, #0]
 8025934:	4628      	mov	r0, r5
 8025936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802593a:	f000 beb0 	b.w	802669e <__malloc_unlock>
 802593e:	42a3      	cmp	r3, r4
 8025940:	d90c      	bls.n	802595c <_free_r+0x4c>
 8025942:	6821      	ldr	r1, [r4, #0]
 8025944:	1862      	adds	r2, r4, r1
 8025946:	4293      	cmp	r3, r2
 8025948:	bf04      	itt	eq
 802594a:	681a      	ldreq	r2, [r3, #0]
 802594c:	685b      	ldreq	r3, [r3, #4]
 802594e:	6063      	str	r3, [r4, #4]
 8025950:	bf04      	itt	eq
 8025952:	1852      	addeq	r2, r2, r1
 8025954:	6022      	streq	r2, [r4, #0]
 8025956:	6004      	str	r4, [r0, #0]
 8025958:	e7ec      	b.n	8025934 <_free_r+0x24>
 802595a:	4613      	mov	r3, r2
 802595c:	685a      	ldr	r2, [r3, #4]
 802595e:	b10a      	cbz	r2, 8025964 <_free_r+0x54>
 8025960:	42a2      	cmp	r2, r4
 8025962:	d9fa      	bls.n	802595a <_free_r+0x4a>
 8025964:	6819      	ldr	r1, [r3, #0]
 8025966:	1858      	adds	r0, r3, r1
 8025968:	42a0      	cmp	r0, r4
 802596a:	d10b      	bne.n	8025984 <_free_r+0x74>
 802596c:	6820      	ldr	r0, [r4, #0]
 802596e:	4401      	add	r1, r0
 8025970:	1858      	adds	r0, r3, r1
 8025972:	4282      	cmp	r2, r0
 8025974:	6019      	str	r1, [r3, #0]
 8025976:	d1dd      	bne.n	8025934 <_free_r+0x24>
 8025978:	6810      	ldr	r0, [r2, #0]
 802597a:	6852      	ldr	r2, [r2, #4]
 802597c:	605a      	str	r2, [r3, #4]
 802597e:	4401      	add	r1, r0
 8025980:	6019      	str	r1, [r3, #0]
 8025982:	e7d7      	b.n	8025934 <_free_r+0x24>
 8025984:	d902      	bls.n	802598c <_free_r+0x7c>
 8025986:	230c      	movs	r3, #12
 8025988:	602b      	str	r3, [r5, #0]
 802598a:	e7d3      	b.n	8025934 <_free_r+0x24>
 802598c:	6820      	ldr	r0, [r4, #0]
 802598e:	1821      	adds	r1, r4, r0
 8025990:	428a      	cmp	r2, r1
 8025992:	bf04      	itt	eq
 8025994:	6811      	ldreq	r1, [r2, #0]
 8025996:	6852      	ldreq	r2, [r2, #4]
 8025998:	6062      	str	r2, [r4, #4]
 802599a:	bf04      	itt	eq
 802599c:	1809      	addeq	r1, r1, r0
 802599e:	6021      	streq	r1, [r4, #0]
 80259a0:	605c      	str	r4, [r3, #4]
 80259a2:	e7c7      	b.n	8025934 <_free_r+0x24>
 80259a4:	bd38      	pop	{r3, r4, r5, pc}
 80259a6:	bf00      	nop
 80259a8:	2000bcb0 	.word	0x2000bcb0

080259ac <_malloc_r>:
 80259ac:	b570      	push	{r4, r5, r6, lr}
 80259ae:	1ccd      	adds	r5, r1, #3
 80259b0:	f025 0503 	bic.w	r5, r5, #3
 80259b4:	3508      	adds	r5, #8
 80259b6:	2d0c      	cmp	r5, #12
 80259b8:	bf38      	it	cc
 80259ba:	250c      	movcc	r5, #12
 80259bc:	2d00      	cmp	r5, #0
 80259be:	4606      	mov	r6, r0
 80259c0:	db01      	blt.n	80259c6 <_malloc_r+0x1a>
 80259c2:	42a9      	cmp	r1, r5
 80259c4:	d903      	bls.n	80259ce <_malloc_r+0x22>
 80259c6:	230c      	movs	r3, #12
 80259c8:	6033      	str	r3, [r6, #0]
 80259ca:	2000      	movs	r0, #0
 80259cc:	bd70      	pop	{r4, r5, r6, pc}
 80259ce:	f000 fe65 	bl	802669c <__malloc_lock>
 80259d2:	4a21      	ldr	r2, [pc, #132]	; (8025a58 <_malloc_r+0xac>)
 80259d4:	6814      	ldr	r4, [r2, #0]
 80259d6:	4621      	mov	r1, r4
 80259d8:	b991      	cbnz	r1, 8025a00 <_malloc_r+0x54>
 80259da:	4c20      	ldr	r4, [pc, #128]	; (8025a5c <_malloc_r+0xb0>)
 80259dc:	6823      	ldr	r3, [r4, #0]
 80259de:	b91b      	cbnz	r3, 80259e8 <_malloc_r+0x3c>
 80259e0:	4630      	mov	r0, r6
 80259e2:	f000 fb05 	bl	8025ff0 <_sbrk_r>
 80259e6:	6020      	str	r0, [r4, #0]
 80259e8:	4629      	mov	r1, r5
 80259ea:	4630      	mov	r0, r6
 80259ec:	f000 fb00 	bl	8025ff0 <_sbrk_r>
 80259f0:	1c43      	adds	r3, r0, #1
 80259f2:	d124      	bne.n	8025a3e <_malloc_r+0x92>
 80259f4:	230c      	movs	r3, #12
 80259f6:	6033      	str	r3, [r6, #0]
 80259f8:	4630      	mov	r0, r6
 80259fa:	f000 fe50 	bl	802669e <__malloc_unlock>
 80259fe:	e7e4      	b.n	80259ca <_malloc_r+0x1e>
 8025a00:	680b      	ldr	r3, [r1, #0]
 8025a02:	1b5b      	subs	r3, r3, r5
 8025a04:	d418      	bmi.n	8025a38 <_malloc_r+0x8c>
 8025a06:	2b0b      	cmp	r3, #11
 8025a08:	d90f      	bls.n	8025a2a <_malloc_r+0x7e>
 8025a0a:	600b      	str	r3, [r1, #0]
 8025a0c:	50cd      	str	r5, [r1, r3]
 8025a0e:	18cc      	adds	r4, r1, r3
 8025a10:	4630      	mov	r0, r6
 8025a12:	f000 fe44 	bl	802669e <__malloc_unlock>
 8025a16:	f104 000b 	add.w	r0, r4, #11
 8025a1a:	1d23      	adds	r3, r4, #4
 8025a1c:	f020 0007 	bic.w	r0, r0, #7
 8025a20:	1ac3      	subs	r3, r0, r3
 8025a22:	d0d3      	beq.n	80259cc <_malloc_r+0x20>
 8025a24:	425a      	negs	r2, r3
 8025a26:	50e2      	str	r2, [r4, r3]
 8025a28:	e7d0      	b.n	80259cc <_malloc_r+0x20>
 8025a2a:	428c      	cmp	r4, r1
 8025a2c:	684b      	ldr	r3, [r1, #4]
 8025a2e:	bf16      	itet	ne
 8025a30:	6063      	strne	r3, [r4, #4]
 8025a32:	6013      	streq	r3, [r2, #0]
 8025a34:	460c      	movne	r4, r1
 8025a36:	e7eb      	b.n	8025a10 <_malloc_r+0x64>
 8025a38:	460c      	mov	r4, r1
 8025a3a:	6849      	ldr	r1, [r1, #4]
 8025a3c:	e7cc      	b.n	80259d8 <_malloc_r+0x2c>
 8025a3e:	1cc4      	adds	r4, r0, #3
 8025a40:	f024 0403 	bic.w	r4, r4, #3
 8025a44:	42a0      	cmp	r0, r4
 8025a46:	d005      	beq.n	8025a54 <_malloc_r+0xa8>
 8025a48:	1a21      	subs	r1, r4, r0
 8025a4a:	4630      	mov	r0, r6
 8025a4c:	f000 fad0 	bl	8025ff0 <_sbrk_r>
 8025a50:	3001      	adds	r0, #1
 8025a52:	d0cf      	beq.n	80259f4 <_malloc_r+0x48>
 8025a54:	6025      	str	r5, [r4, #0]
 8025a56:	e7db      	b.n	8025a10 <_malloc_r+0x64>
 8025a58:	2000bcb0 	.word	0x2000bcb0
 8025a5c:	2000bcb4 	.word	0x2000bcb4

08025a60 <__sfputc_r>:
 8025a60:	6893      	ldr	r3, [r2, #8]
 8025a62:	3b01      	subs	r3, #1
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	b410      	push	{r4}
 8025a68:	6093      	str	r3, [r2, #8]
 8025a6a:	da08      	bge.n	8025a7e <__sfputc_r+0x1e>
 8025a6c:	6994      	ldr	r4, [r2, #24]
 8025a6e:	42a3      	cmp	r3, r4
 8025a70:	db01      	blt.n	8025a76 <__sfputc_r+0x16>
 8025a72:	290a      	cmp	r1, #10
 8025a74:	d103      	bne.n	8025a7e <__sfputc_r+0x1e>
 8025a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a7a:	f000 bb0d 	b.w	8026098 <__swbuf_r>
 8025a7e:	6813      	ldr	r3, [r2, #0]
 8025a80:	1c58      	adds	r0, r3, #1
 8025a82:	6010      	str	r0, [r2, #0]
 8025a84:	7019      	strb	r1, [r3, #0]
 8025a86:	4608      	mov	r0, r1
 8025a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a8c:	4770      	bx	lr

08025a8e <__sfputs_r>:
 8025a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a90:	4606      	mov	r6, r0
 8025a92:	460f      	mov	r7, r1
 8025a94:	4614      	mov	r4, r2
 8025a96:	18d5      	adds	r5, r2, r3
 8025a98:	42ac      	cmp	r4, r5
 8025a9a:	d101      	bne.n	8025aa0 <__sfputs_r+0x12>
 8025a9c:	2000      	movs	r0, #0
 8025a9e:	e007      	b.n	8025ab0 <__sfputs_r+0x22>
 8025aa0:	463a      	mov	r2, r7
 8025aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025aa6:	4630      	mov	r0, r6
 8025aa8:	f7ff ffda 	bl	8025a60 <__sfputc_r>
 8025aac:	1c43      	adds	r3, r0, #1
 8025aae:	d1f3      	bne.n	8025a98 <__sfputs_r+0xa>
 8025ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025ab4 <_vfiprintf_r>:
 8025ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ab8:	460c      	mov	r4, r1
 8025aba:	b09d      	sub	sp, #116	; 0x74
 8025abc:	4617      	mov	r7, r2
 8025abe:	461d      	mov	r5, r3
 8025ac0:	4606      	mov	r6, r0
 8025ac2:	b118      	cbz	r0, 8025acc <_vfiprintf_r+0x18>
 8025ac4:	6983      	ldr	r3, [r0, #24]
 8025ac6:	b90b      	cbnz	r3, 8025acc <_vfiprintf_r+0x18>
 8025ac8:	f000 fcfa 	bl	80264c0 <__sinit>
 8025acc:	4b7c      	ldr	r3, [pc, #496]	; (8025cc0 <_vfiprintf_r+0x20c>)
 8025ace:	429c      	cmp	r4, r3
 8025ad0:	d158      	bne.n	8025b84 <_vfiprintf_r+0xd0>
 8025ad2:	6874      	ldr	r4, [r6, #4]
 8025ad4:	89a3      	ldrh	r3, [r4, #12]
 8025ad6:	0718      	lsls	r0, r3, #28
 8025ad8:	d55e      	bpl.n	8025b98 <_vfiprintf_r+0xe4>
 8025ada:	6923      	ldr	r3, [r4, #16]
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	d05b      	beq.n	8025b98 <_vfiprintf_r+0xe4>
 8025ae0:	2300      	movs	r3, #0
 8025ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ae4:	2320      	movs	r3, #32
 8025ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025aea:	2330      	movs	r3, #48	; 0x30
 8025aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025af0:	9503      	str	r5, [sp, #12]
 8025af2:	f04f 0b01 	mov.w	fp, #1
 8025af6:	46b8      	mov	r8, r7
 8025af8:	4645      	mov	r5, r8
 8025afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025afe:	b10b      	cbz	r3, 8025b04 <_vfiprintf_r+0x50>
 8025b00:	2b25      	cmp	r3, #37	; 0x25
 8025b02:	d154      	bne.n	8025bae <_vfiprintf_r+0xfa>
 8025b04:	ebb8 0a07 	subs.w	sl, r8, r7
 8025b08:	d00b      	beq.n	8025b22 <_vfiprintf_r+0x6e>
 8025b0a:	4653      	mov	r3, sl
 8025b0c:	463a      	mov	r2, r7
 8025b0e:	4621      	mov	r1, r4
 8025b10:	4630      	mov	r0, r6
 8025b12:	f7ff ffbc 	bl	8025a8e <__sfputs_r>
 8025b16:	3001      	adds	r0, #1
 8025b18:	f000 80c2 	beq.w	8025ca0 <_vfiprintf_r+0x1ec>
 8025b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b1e:	4453      	add	r3, sl
 8025b20:	9309      	str	r3, [sp, #36]	; 0x24
 8025b22:	f898 3000 	ldrb.w	r3, [r8]
 8025b26:	2b00      	cmp	r3, #0
 8025b28:	f000 80ba 	beq.w	8025ca0 <_vfiprintf_r+0x1ec>
 8025b2c:	2300      	movs	r3, #0
 8025b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8025b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b36:	9304      	str	r3, [sp, #16]
 8025b38:	9307      	str	r3, [sp, #28]
 8025b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8025b40:	46a8      	mov	r8, r5
 8025b42:	2205      	movs	r2, #5
 8025b44:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025b48:	485e      	ldr	r0, [pc, #376]	; (8025cc4 <_vfiprintf_r+0x210>)
 8025b4a:	f7da fb61 	bl	8000210 <memchr>
 8025b4e:	9b04      	ldr	r3, [sp, #16]
 8025b50:	bb78      	cbnz	r0, 8025bb2 <_vfiprintf_r+0xfe>
 8025b52:	06d9      	lsls	r1, r3, #27
 8025b54:	bf44      	itt	mi
 8025b56:	2220      	movmi	r2, #32
 8025b58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b5c:	071a      	lsls	r2, r3, #28
 8025b5e:	bf44      	itt	mi
 8025b60:	222b      	movmi	r2, #43	; 0x2b
 8025b62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b66:	782a      	ldrb	r2, [r5, #0]
 8025b68:	2a2a      	cmp	r2, #42	; 0x2a
 8025b6a:	d02a      	beq.n	8025bc2 <_vfiprintf_r+0x10e>
 8025b6c:	9a07      	ldr	r2, [sp, #28]
 8025b6e:	46a8      	mov	r8, r5
 8025b70:	2000      	movs	r0, #0
 8025b72:	250a      	movs	r5, #10
 8025b74:	4641      	mov	r1, r8
 8025b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025b7a:	3b30      	subs	r3, #48	; 0x30
 8025b7c:	2b09      	cmp	r3, #9
 8025b7e:	d969      	bls.n	8025c54 <_vfiprintf_r+0x1a0>
 8025b80:	b360      	cbz	r0, 8025bdc <_vfiprintf_r+0x128>
 8025b82:	e024      	b.n	8025bce <_vfiprintf_r+0x11a>
 8025b84:	4b50      	ldr	r3, [pc, #320]	; (8025cc8 <_vfiprintf_r+0x214>)
 8025b86:	429c      	cmp	r4, r3
 8025b88:	d101      	bne.n	8025b8e <_vfiprintf_r+0xda>
 8025b8a:	68b4      	ldr	r4, [r6, #8]
 8025b8c:	e7a2      	b.n	8025ad4 <_vfiprintf_r+0x20>
 8025b8e:	4b4f      	ldr	r3, [pc, #316]	; (8025ccc <_vfiprintf_r+0x218>)
 8025b90:	429c      	cmp	r4, r3
 8025b92:	bf08      	it	eq
 8025b94:	68f4      	ldreq	r4, [r6, #12]
 8025b96:	e79d      	b.n	8025ad4 <_vfiprintf_r+0x20>
 8025b98:	4621      	mov	r1, r4
 8025b9a:	4630      	mov	r0, r6
 8025b9c:	f000 face 	bl	802613c <__swsetup_r>
 8025ba0:	2800      	cmp	r0, #0
 8025ba2:	d09d      	beq.n	8025ae0 <_vfiprintf_r+0x2c>
 8025ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ba8:	b01d      	add	sp, #116	; 0x74
 8025baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bae:	46a8      	mov	r8, r5
 8025bb0:	e7a2      	b.n	8025af8 <_vfiprintf_r+0x44>
 8025bb2:	4a44      	ldr	r2, [pc, #272]	; (8025cc4 <_vfiprintf_r+0x210>)
 8025bb4:	1a80      	subs	r0, r0, r2
 8025bb6:	fa0b f000 	lsl.w	r0, fp, r0
 8025bba:	4318      	orrs	r0, r3
 8025bbc:	9004      	str	r0, [sp, #16]
 8025bbe:	4645      	mov	r5, r8
 8025bc0:	e7be      	b.n	8025b40 <_vfiprintf_r+0x8c>
 8025bc2:	9a03      	ldr	r2, [sp, #12]
 8025bc4:	1d11      	adds	r1, r2, #4
 8025bc6:	6812      	ldr	r2, [r2, #0]
 8025bc8:	9103      	str	r1, [sp, #12]
 8025bca:	2a00      	cmp	r2, #0
 8025bcc:	db01      	blt.n	8025bd2 <_vfiprintf_r+0x11e>
 8025bce:	9207      	str	r2, [sp, #28]
 8025bd0:	e004      	b.n	8025bdc <_vfiprintf_r+0x128>
 8025bd2:	4252      	negs	r2, r2
 8025bd4:	f043 0302 	orr.w	r3, r3, #2
 8025bd8:	9207      	str	r2, [sp, #28]
 8025bda:	9304      	str	r3, [sp, #16]
 8025bdc:	f898 3000 	ldrb.w	r3, [r8]
 8025be0:	2b2e      	cmp	r3, #46	; 0x2e
 8025be2:	d10e      	bne.n	8025c02 <_vfiprintf_r+0x14e>
 8025be4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025be8:	2b2a      	cmp	r3, #42	; 0x2a
 8025bea:	d138      	bne.n	8025c5e <_vfiprintf_r+0x1aa>
 8025bec:	9b03      	ldr	r3, [sp, #12]
 8025bee:	1d1a      	adds	r2, r3, #4
 8025bf0:	681b      	ldr	r3, [r3, #0]
 8025bf2:	9203      	str	r2, [sp, #12]
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	bfb8      	it	lt
 8025bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8025bfc:	f108 0802 	add.w	r8, r8, #2
 8025c00:	9305      	str	r3, [sp, #20]
 8025c02:	4d33      	ldr	r5, [pc, #204]	; (8025cd0 <_vfiprintf_r+0x21c>)
 8025c04:	f898 1000 	ldrb.w	r1, [r8]
 8025c08:	2203      	movs	r2, #3
 8025c0a:	4628      	mov	r0, r5
 8025c0c:	f7da fb00 	bl	8000210 <memchr>
 8025c10:	b140      	cbz	r0, 8025c24 <_vfiprintf_r+0x170>
 8025c12:	2340      	movs	r3, #64	; 0x40
 8025c14:	1b40      	subs	r0, r0, r5
 8025c16:	fa03 f000 	lsl.w	r0, r3, r0
 8025c1a:	9b04      	ldr	r3, [sp, #16]
 8025c1c:	4303      	orrs	r3, r0
 8025c1e:	f108 0801 	add.w	r8, r8, #1
 8025c22:	9304      	str	r3, [sp, #16]
 8025c24:	f898 1000 	ldrb.w	r1, [r8]
 8025c28:	482a      	ldr	r0, [pc, #168]	; (8025cd4 <_vfiprintf_r+0x220>)
 8025c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025c2e:	2206      	movs	r2, #6
 8025c30:	f108 0701 	add.w	r7, r8, #1
 8025c34:	f7da faec 	bl	8000210 <memchr>
 8025c38:	2800      	cmp	r0, #0
 8025c3a:	d037      	beq.n	8025cac <_vfiprintf_r+0x1f8>
 8025c3c:	4b26      	ldr	r3, [pc, #152]	; (8025cd8 <_vfiprintf_r+0x224>)
 8025c3e:	bb1b      	cbnz	r3, 8025c88 <_vfiprintf_r+0x1d4>
 8025c40:	9b03      	ldr	r3, [sp, #12]
 8025c42:	3307      	adds	r3, #7
 8025c44:	f023 0307 	bic.w	r3, r3, #7
 8025c48:	3308      	adds	r3, #8
 8025c4a:	9303      	str	r3, [sp, #12]
 8025c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c4e:	444b      	add	r3, r9
 8025c50:	9309      	str	r3, [sp, #36]	; 0x24
 8025c52:	e750      	b.n	8025af6 <_vfiprintf_r+0x42>
 8025c54:	fb05 3202 	mla	r2, r5, r2, r3
 8025c58:	2001      	movs	r0, #1
 8025c5a:	4688      	mov	r8, r1
 8025c5c:	e78a      	b.n	8025b74 <_vfiprintf_r+0xc0>
 8025c5e:	2300      	movs	r3, #0
 8025c60:	f108 0801 	add.w	r8, r8, #1
 8025c64:	9305      	str	r3, [sp, #20]
 8025c66:	4619      	mov	r1, r3
 8025c68:	250a      	movs	r5, #10
 8025c6a:	4640      	mov	r0, r8
 8025c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025c70:	3a30      	subs	r2, #48	; 0x30
 8025c72:	2a09      	cmp	r2, #9
 8025c74:	d903      	bls.n	8025c7e <_vfiprintf_r+0x1ca>
 8025c76:	2b00      	cmp	r3, #0
 8025c78:	d0c3      	beq.n	8025c02 <_vfiprintf_r+0x14e>
 8025c7a:	9105      	str	r1, [sp, #20]
 8025c7c:	e7c1      	b.n	8025c02 <_vfiprintf_r+0x14e>
 8025c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8025c82:	2301      	movs	r3, #1
 8025c84:	4680      	mov	r8, r0
 8025c86:	e7f0      	b.n	8025c6a <_vfiprintf_r+0x1b6>
 8025c88:	ab03      	add	r3, sp, #12
 8025c8a:	9300      	str	r3, [sp, #0]
 8025c8c:	4622      	mov	r2, r4
 8025c8e:	4b13      	ldr	r3, [pc, #76]	; (8025cdc <_vfiprintf_r+0x228>)
 8025c90:	a904      	add	r1, sp, #16
 8025c92:	4630      	mov	r0, r6
 8025c94:	f3af 8000 	nop.w
 8025c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025c9c:	4681      	mov	r9, r0
 8025c9e:	d1d5      	bne.n	8025c4c <_vfiprintf_r+0x198>
 8025ca0:	89a3      	ldrh	r3, [r4, #12]
 8025ca2:	065b      	lsls	r3, r3, #25
 8025ca4:	f53f af7e 	bmi.w	8025ba4 <_vfiprintf_r+0xf0>
 8025ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025caa:	e77d      	b.n	8025ba8 <_vfiprintf_r+0xf4>
 8025cac:	ab03      	add	r3, sp, #12
 8025cae:	9300      	str	r3, [sp, #0]
 8025cb0:	4622      	mov	r2, r4
 8025cb2:	4b0a      	ldr	r3, [pc, #40]	; (8025cdc <_vfiprintf_r+0x228>)
 8025cb4:	a904      	add	r1, sp, #16
 8025cb6:	4630      	mov	r0, r6
 8025cb8:	f000 f888 	bl	8025dcc <_printf_i>
 8025cbc:	e7ec      	b.n	8025c98 <_vfiprintf_r+0x1e4>
 8025cbe:	bf00      	nop
 8025cc0:	0802b88c 	.word	0x0802b88c
 8025cc4:	0802b834 	.word	0x0802b834
 8025cc8:	0802b8ac 	.word	0x0802b8ac
 8025ccc:	0802b86c 	.word	0x0802b86c
 8025cd0:	0802b83a 	.word	0x0802b83a
 8025cd4:	0802b83e 	.word	0x0802b83e
 8025cd8:	00000000 	.word	0x00000000
 8025cdc:	08025a8f 	.word	0x08025a8f

08025ce0 <_printf_common>:
 8025ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025ce4:	4691      	mov	r9, r2
 8025ce6:	461f      	mov	r7, r3
 8025ce8:	688a      	ldr	r2, [r1, #8]
 8025cea:	690b      	ldr	r3, [r1, #16]
 8025cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025cf0:	4293      	cmp	r3, r2
 8025cf2:	bfb8      	it	lt
 8025cf4:	4613      	movlt	r3, r2
 8025cf6:	f8c9 3000 	str.w	r3, [r9]
 8025cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025cfe:	4606      	mov	r6, r0
 8025d00:	460c      	mov	r4, r1
 8025d02:	b112      	cbz	r2, 8025d0a <_printf_common+0x2a>
 8025d04:	3301      	adds	r3, #1
 8025d06:	f8c9 3000 	str.w	r3, [r9]
 8025d0a:	6823      	ldr	r3, [r4, #0]
 8025d0c:	0699      	lsls	r1, r3, #26
 8025d0e:	bf42      	ittt	mi
 8025d10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025d14:	3302      	addmi	r3, #2
 8025d16:	f8c9 3000 	strmi.w	r3, [r9]
 8025d1a:	6825      	ldr	r5, [r4, #0]
 8025d1c:	f015 0506 	ands.w	r5, r5, #6
 8025d20:	d107      	bne.n	8025d32 <_printf_common+0x52>
 8025d22:	f104 0a19 	add.w	sl, r4, #25
 8025d26:	68e3      	ldr	r3, [r4, #12]
 8025d28:	f8d9 2000 	ldr.w	r2, [r9]
 8025d2c:	1a9b      	subs	r3, r3, r2
 8025d2e:	42ab      	cmp	r3, r5
 8025d30:	dc28      	bgt.n	8025d84 <_printf_common+0xa4>
 8025d32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025d36:	6822      	ldr	r2, [r4, #0]
 8025d38:	3300      	adds	r3, #0
 8025d3a:	bf18      	it	ne
 8025d3c:	2301      	movne	r3, #1
 8025d3e:	0692      	lsls	r2, r2, #26
 8025d40:	d42d      	bmi.n	8025d9e <_printf_common+0xbe>
 8025d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025d46:	4639      	mov	r1, r7
 8025d48:	4630      	mov	r0, r6
 8025d4a:	47c0      	blx	r8
 8025d4c:	3001      	adds	r0, #1
 8025d4e:	d020      	beq.n	8025d92 <_printf_common+0xb2>
 8025d50:	6823      	ldr	r3, [r4, #0]
 8025d52:	68e5      	ldr	r5, [r4, #12]
 8025d54:	f8d9 2000 	ldr.w	r2, [r9]
 8025d58:	f003 0306 	and.w	r3, r3, #6
 8025d5c:	2b04      	cmp	r3, #4
 8025d5e:	bf08      	it	eq
 8025d60:	1aad      	subeq	r5, r5, r2
 8025d62:	68a3      	ldr	r3, [r4, #8]
 8025d64:	6922      	ldr	r2, [r4, #16]
 8025d66:	bf0c      	ite	eq
 8025d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025d6c:	2500      	movne	r5, #0
 8025d6e:	4293      	cmp	r3, r2
 8025d70:	bfc4      	itt	gt
 8025d72:	1a9b      	subgt	r3, r3, r2
 8025d74:	18ed      	addgt	r5, r5, r3
 8025d76:	f04f 0900 	mov.w	r9, #0
 8025d7a:	341a      	adds	r4, #26
 8025d7c:	454d      	cmp	r5, r9
 8025d7e:	d11a      	bne.n	8025db6 <_printf_common+0xd6>
 8025d80:	2000      	movs	r0, #0
 8025d82:	e008      	b.n	8025d96 <_printf_common+0xb6>
 8025d84:	2301      	movs	r3, #1
 8025d86:	4652      	mov	r2, sl
 8025d88:	4639      	mov	r1, r7
 8025d8a:	4630      	mov	r0, r6
 8025d8c:	47c0      	blx	r8
 8025d8e:	3001      	adds	r0, #1
 8025d90:	d103      	bne.n	8025d9a <_printf_common+0xba>
 8025d92:	f04f 30ff 	mov.w	r0, #4294967295
 8025d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d9a:	3501      	adds	r5, #1
 8025d9c:	e7c3      	b.n	8025d26 <_printf_common+0x46>
 8025d9e:	18e1      	adds	r1, r4, r3
 8025da0:	1c5a      	adds	r2, r3, #1
 8025da2:	2030      	movs	r0, #48	; 0x30
 8025da4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025da8:	4422      	add	r2, r4
 8025daa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025dae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025db2:	3302      	adds	r3, #2
 8025db4:	e7c5      	b.n	8025d42 <_printf_common+0x62>
 8025db6:	2301      	movs	r3, #1
 8025db8:	4622      	mov	r2, r4
 8025dba:	4639      	mov	r1, r7
 8025dbc:	4630      	mov	r0, r6
 8025dbe:	47c0      	blx	r8
 8025dc0:	3001      	adds	r0, #1
 8025dc2:	d0e6      	beq.n	8025d92 <_printf_common+0xb2>
 8025dc4:	f109 0901 	add.w	r9, r9, #1
 8025dc8:	e7d8      	b.n	8025d7c <_printf_common+0x9c>
	...

08025dcc <_printf_i>:
 8025dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025dd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025dd4:	460c      	mov	r4, r1
 8025dd6:	7e09      	ldrb	r1, [r1, #24]
 8025dd8:	b085      	sub	sp, #20
 8025dda:	296e      	cmp	r1, #110	; 0x6e
 8025ddc:	4617      	mov	r7, r2
 8025dde:	4606      	mov	r6, r0
 8025de0:	4698      	mov	r8, r3
 8025de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025de4:	f000 80b3 	beq.w	8025f4e <_printf_i+0x182>
 8025de8:	d822      	bhi.n	8025e30 <_printf_i+0x64>
 8025dea:	2963      	cmp	r1, #99	; 0x63
 8025dec:	d036      	beq.n	8025e5c <_printf_i+0x90>
 8025dee:	d80a      	bhi.n	8025e06 <_printf_i+0x3a>
 8025df0:	2900      	cmp	r1, #0
 8025df2:	f000 80b9 	beq.w	8025f68 <_printf_i+0x19c>
 8025df6:	2958      	cmp	r1, #88	; 0x58
 8025df8:	f000 8083 	beq.w	8025f02 <_printf_i+0x136>
 8025dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025e04:	e032      	b.n	8025e6c <_printf_i+0xa0>
 8025e06:	2964      	cmp	r1, #100	; 0x64
 8025e08:	d001      	beq.n	8025e0e <_printf_i+0x42>
 8025e0a:	2969      	cmp	r1, #105	; 0x69
 8025e0c:	d1f6      	bne.n	8025dfc <_printf_i+0x30>
 8025e0e:	6820      	ldr	r0, [r4, #0]
 8025e10:	6813      	ldr	r3, [r2, #0]
 8025e12:	0605      	lsls	r5, r0, #24
 8025e14:	f103 0104 	add.w	r1, r3, #4
 8025e18:	d52a      	bpl.n	8025e70 <_printf_i+0xa4>
 8025e1a:	681b      	ldr	r3, [r3, #0]
 8025e1c:	6011      	str	r1, [r2, #0]
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	da03      	bge.n	8025e2a <_printf_i+0x5e>
 8025e22:	222d      	movs	r2, #45	; 0x2d
 8025e24:	425b      	negs	r3, r3
 8025e26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025e2a:	486f      	ldr	r0, [pc, #444]	; (8025fe8 <_printf_i+0x21c>)
 8025e2c:	220a      	movs	r2, #10
 8025e2e:	e039      	b.n	8025ea4 <_printf_i+0xd8>
 8025e30:	2973      	cmp	r1, #115	; 0x73
 8025e32:	f000 809d 	beq.w	8025f70 <_printf_i+0x1a4>
 8025e36:	d808      	bhi.n	8025e4a <_printf_i+0x7e>
 8025e38:	296f      	cmp	r1, #111	; 0x6f
 8025e3a:	d020      	beq.n	8025e7e <_printf_i+0xb2>
 8025e3c:	2970      	cmp	r1, #112	; 0x70
 8025e3e:	d1dd      	bne.n	8025dfc <_printf_i+0x30>
 8025e40:	6823      	ldr	r3, [r4, #0]
 8025e42:	f043 0320 	orr.w	r3, r3, #32
 8025e46:	6023      	str	r3, [r4, #0]
 8025e48:	e003      	b.n	8025e52 <_printf_i+0x86>
 8025e4a:	2975      	cmp	r1, #117	; 0x75
 8025e4c:	d017      	beq.n	8025e7e <_printf_i+0xb2>
 8025e4e:	2978      	cmp	r1, #120	; 0x78
 8025e50:	d1d4      	bne.n	8025dfc <_printf_i+0x30>
 8025e52:	2378      	movs	r3, #120	; 0x78
 8025e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025e58:	4864      	ldr	r0, [pc, #400]	; (8025fec <_printf_i+0x220>)
 8025e5a:	e055      	b.n	8025f08 <_printf_i+0x13c>
 8025e5c:	6813      	ldr	r3, [r2, #0]
 8025e5e:	1d19      	adds	r1, r3, #4
 8025e60:	681b      	ldr	r3, [r3, #0]
 8025e62:	6011      	str	r1, [r2, #0]
 8025e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025e6c:	2301      	movs	r3, #1
 8025e6e:	e08c      	b.n	8025f8a <_printf_i+0x1be>
 8025e70:	681b      	ldr	r3, [r3, #0]
 8025e72:	6011      	str	r1, [r2, #0]
 8025e74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025e78:	bf18      	it	ne
 8025e7a:	b21b      	sxthne	r3, r3
 8025e7c:	e7cf      	b.n	8025e1e <_printf_i+0x52>
 8025e7e:	6813      	ldr	r3, [r2, #0]
 8025e80:	6825      	ldr	r5, [r4, #0]
 8025e82:	1d18      	adds	r0, r3, #4
 8025e84:	6010      	str	r0, [r2, #0]
 8025e86:	0628      	lsls	r0, r5, #24
 8025e88:	d501      	bpl.n	8025e8e <_printf_i+0xc2>
 8025e8a:	681b      	ldr	r3, [r3, #0]
 8025e8c:	e002      	b.n	8025e94 <_printf_i+0xc8>
 8025e8e:	0668      	lsls	r0, r5, #25
 8025e90:	d5fb      	bpl.n	8025e8a <_printf_i+0xbe>
 8025e92:	881b      	ldrh	r3, [r3, #0]
 8025e94:	4854      	ldr	r0, [pc, #336]	; (8025fe8 <_printf_i+0x21c>)
 8025e96:	296f      	cmp	r1, #111	; 0x6f
 8025e98:	bf14      	ite	ne
 8025e9a:	220a      	movne	r2, #10
 8025e9c:	2208      	moveq	r2, #8
 8025e9e:	2100      	movs	r1, #0
 8025ea0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025ea4:	6865      	ldr	r5, [r4, #4]
 8025ea6:	60a5      	str	r5, [r4, #8]
 8025ea8:	2d00      	cmp	r5, #0
 8025eaa:	f2c0 8095 	blt.w	8025fd8 <_printf_i+0x20c>
 8025eae:	6821      	ldr	r1, [r4, #0]
 8025eb0:	f021 0104 	bic.w	r1, r1, #4
 8025eb4:	6021      	str	r1, [r4, #0]
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d13d      	bne.n	8025f36 <_printf_i+0x16a>
 8025eba:	2d00      	cmp	r5, #0
 8025ebc:	f040 808e 	bne.w	8025fdc <_printf_i+0x210>
 8025ec0:	4665      	mov	r5, ip
 8025ec2:	2a08      	cmp	r2, #8
 8025ec4:	d10b      	bne.n	8025ede <_printf_i+0x112>
 8025ec6:	6823      	ldr	r3, [r4, #0]
 8025ec8:	07db      	lsls	r3, r3, #31
 8025eca:	d508      	bpl.n	8025ede <_printf_i+0x112>
 8025ecc:	6923      	ldr	r3, [r4, #16]
 8025ece:	6862      	ldr	r2, [r4, #4]
 8025ed0:	429a      	cmp	r2, r3
 8025ed2:	bfde      	ittt	le
 8025ed4:	2330      	movle	r3, #48	; 0x30
 8025ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025ede:	ebac 0305 	sub.w	r3, ip, r5
 8025ee2:	6123      	str	r3, [r4, #16]
 8025ee4:	f8cd 8000 	str.w	r8, [sp]
 8025ee8:	463b      	mov	r3, r7
 8025eea:	aa03      	add	r2, sp, #12
 8025eec:	4621      	mov	r1, r4
 8025eee:	4630      	mov	r0, r6
 8025ef0:	f7ff fef6 	bl	8025ce0 <_printf_common>
 8025ef4:	3001      	adds	r0, #1
 8025ef6:	d14d      	bne.n	8025f94 <_printf_i+0x1c8>
 8025ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8025efc:	b005      	add	sp, #20
 8025efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025f02:	4839      	ldr	r0, [pc, #228]	; (8025fe8 <_printf_i+0x21c>)
 8025f04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025f08:	6813      	ldr	r3, [r2, #0]
 8025f0a:	6821      	ldr	r1, [r4, #0]
 8025f0c:	1d1d      	adds	r5, r3, #4
 8025f0e:	681b      	ldr	r3, [r3, #0]
 8025f10:	6015      	str	r5, [r2, #0]
 8025f12:	060a      	lsls	r2, r1, #24
 8025f14:	d50b      	bpl.n	8025f2e <_printf_i+0x162>
 8025f16:	07ca      	lsls	r2, r1, #31
 8025f18:	bf44      	itt	mi
 8025f1a:	f041 0120 	orrmi.w	r1, r1, #32
 8025f1e:	6021      	strmi	r1, [r4, #0]
 8025f20:	b91b      	cbnz	r3, 8025f2a <_printf_i+0x15e>
 8025f22:	6822      	ldr	r2, [r4, #0]
 8025f24:	f022 0220 	bic.w	r2, r2, #32
 8025f28:	6022      	str	r2, [r4, #0]
 8025f2a:	2210      	movs	r2, #16
 8025f2c:	e7b7      	b.n	8025e9e <_printf_i+0xd2>
 8025f2e:	064d      	lsls	r5, r1, #25
 8025f30:	bf48      	it	mi
 8025f32:	b29b      	uxthmi	r3, r3
 8025f34:	e7ef      	b.n	8025f16 <_printf_i+0x14a>
 8025f36:	4665      	mov	r5, ip
 8025f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8025f3c:	fb02 3311 	mls	r3, r2, r1, r3
 8025f40:	5cc3      	ldrb	r3, [r0, r3]
 8025f42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025f46:	460b      	mov	r3, r1
 8025f48:	2900      	cmp	r1, #0
 8025f4a:	d1f5      	bne.n	8025f38 <_printf_i+0x16c>
 8025f4c:	e7b9      	b.n	8025ec2 <_printf_i+0xf6>
 8025f4e:	6813      	ldr	r3, [r2, #0]
 8025f50:	6825      	ldr	r5, [r4, #0]
 8025f52:	6961      	ldr	r1, [r4, #20]
 8025f54:	1d18      	adds	r0, r3, #4
 8025f56:	6010      	str	r0, [r2, #0]
 8025f58:	0628      	lsls	r0, r5, #24
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	d501      	bpl.n	8025f62 <_printf_i+0x196>
 8025f5e:	6019      	str	r1, [r3, #0]
 8025f60:	e002      	b.n	8025f68 <_printf_i+0x19c>
 8025f62:	066a      	lsls	r2, r5, #25
 8025f64:	d5fb      	bpl.n	8025f5e <_printf_i+0x192>
 8025f66:	8019      	strh	r1, [r3, #0]
 8025f68:	2300      	movs	r3, #0
 8025f6a:	6123      	str	r3, [r4, #16]
 8025f6c:	4665      	mov	r5, ip
 8025f6e:	e7b9      	b.n	8025ee4 <_printf_i+0x118>
 8025f70:	6813      	ldr	r3, [r2, #0]
 8025f72:	1d19      	adds	r1, r3, #4
 8025f74:	6011      	str	r1, [r2, #0]
 8025f76:	681d      	ldr	r5, [r3, #0]
 8025f78:	6862      	ldr	r2, [r4, #4]
 8025f7a:	2100      	movs	r1, #0
 8025f7c:	4628      	mov	r0, r5
 8025f7e:	f7da f947 	bl	8000210 <memchr>
 8025f82:	b108      	cbz	r0, 8025f88 <_printf_i+0x1bc>
 8025f84:	1b40      	subs	r0, r0, r5
 8025f86:	6060      	str	r0, [r4, #4]
 8025f88:	6863      	ldr	r3, [r4, #4]
 8025f8a:	6123      	str	r3, [r4, #16]
 8025f8c:	2300      	movs	r3, #0
 8025f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025f92:	e7a7      	b.n	8025ee4 <_printf_i+0x118>
 8025f94:	6923      	ldr	r3, [r4, #16]
 8025f96:	462a      	mov	r2, r5
 8025f98:	4639      	mov	r1, r7
 8025f9a:	4630      	mov	r0, r6
 8025f9c:	47c0      	blx	r8
 8025f9e:	3001      	adds	r0, #1
 8025fa0:	d0aa      	beq.n	8025ef8 <_printf_i+0x12c>
 8025fa2:	6823      	ldr	r3, [r4, #0]
 8025fa4:	079b      	lsls	r3, r3, #30
 8025fa6:	d413      	bmi.n	8025fd0 <_printf_i+0x204>
 8025fa8:	68e0      	ldr	r0, [r4, #12]
 8025faa:	9b03      	ldr	r3, [sp, #12]
 8025fac:	4298      	cmp	r0, r3
 8025fae:	bfb8      	it	lt
 8025fb0:	4618      	movlt	r0, r3
 8025fb2:	e7a3      	b.n	8025efc <_printf_i+0x130>
 8025fb4:	2301      	movs	r3, #1
 8025fb6:	464a      	mov	r2, r9
 8025fb8:	4639      	mov	r1, r7
 8025fba:	4630      	mov	r0, r6
 8025fbc:	47c0      	blx	r8
 8025fbe:	3001      	adds	r0, #1
 8025fc0:	d09a      	beq.n	8025ef8 <_printf_i+0x12c>
 8025fc2:	3501      	adds	r5, #1
 8025fc4:	68e3      	ldr	r3, [r4, #12]
 8025fc6:	9a03      	ldr	r2, [sp, #12]
 8025fc8:	1a9b      	subs	r3, r3, r2
 8025fca:	42ab      	cmp	r3, r5
 8025fcc:	dcf2      	bgt.n	8025fb4 <_printf_i+0x1e8>
 8025fce:	e7eb      	b.n	8025fa8 <_printf_i+0x1dc>
 8025fd0:	2500      	movs	r5, #0
 8025fd2:	f104 0919 	add.w	r9, r4, #25
 8025fd6:	e7f5      	b.n	8025fc4 <_printf_i+0x1f8>
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d1ac      	bne.n	8025f36 <_printf_i+0x16a>
 8025fdc:	7803      	ldrb	r3, [r0, #0]
 8025fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025fe2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025fe6:	e76c      	b.n	8025ec2 <_printf_i+0xf6>
 8025fe8:	0802b845 	.word	0x0802b845
 8025fec:	0802b856 	.word	0x0802b856

08025ff0 <_sbrk_r>:
 8025ff0:	b538      	push	{r3, r4, r5, lr}
 8025ff2:	4c06      	ldr	r4, [pc, #24]	; (802600c <_sbrk_r+0x1c>)
 8025ff4:	2300      	movs	r3, #0
 8025ff6:	4605      	mov	r5, r0
 8025ff8:	4608      	mov	r0, r1
 8025ffa:	6023      	str	r3, [r4, #0]
 8025ffc:	f7dd fce6 	bl	80039cc <_sbrk>
 8026000:	1c43      	adds	r3, r0, #1
 8026002:	d102      	bne.n	802600a <_sbrk_r+0x1a>
 8026004:	6823      	ldr	r3, [r4, #0]
 8026006:	b103      	cbz	r3, 802600a <_sbrk_r+0x1a>
 8026008:	602b      	str	r3, [r5, #0]
 802600a:	bd38      	pop	{r3, r4, r5, pc}
 802600c:	2000ca54 	.word	0x2000ca54

08026010 <_raise_r>:
 8026010:	291f      	cmp	r1, #31
 8026012:	b538      	push	{r3, r4, r5, lr}
 8026014:	4604      	mov	r4, r0
 8026016:	460d      	mov	r5, r1
 8026018:	d904      	bls.n	8026024 <_raise_r+0x14>
 802601a:	2316      	movs	r3, #22
 802601c:	6003      	str	r3, [r0, #0]
 802601e:	f04f 30ff 	mov.w	r0, #4294967295
 8026022:	bd38      	pop	{r3, r4, r5, pc}
 8026024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026026:	b112      	cbz	r2, 802602e <_raise_r+0x1e>
 8026028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802602c:	b94b      	cbnz	r3, 8026042 <_raise_r+0x32>
 802602e:	4620      	mov	r0, r4
 8026030:	f000 f830 	bl	8026094 <_getpid_r>
 8026034:	462a      	mov	r2, r5
 8026036:	4601      	mov	r1, r0
 8026038:	4620      	mov	r0, r4
 802603a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802603e:	f000 b817 	b.w	8026070 <_kill_r>
 8026042:	2b01      	cmp	r3, #1
 8026044:	d00a      	beq.n	802605c <_raise_r+0x4c>
 8026046:	1c59      	adds	r1, r3, #1
 8026048:	d103      	bne.n	8026052 <_raise_r+0x42>
 802604a:	2316      	movs	r3, #22
 802604c:	6003      	str	r3, [r0, #0]
 802604e:	2001      	movs	r0, #1
 8026050:	e7e7      	b.n	8026022 <_raise_r+0x12>
 8026052:	2400      	movs	r4, #0
 8026054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026058:	4628      	mov	r0, r5
 802605a:	4798      	blx	r3
 802605c:	2000      	movs	r0, #0
 802605e:	e7e0      	b.n	8026022 <_raise_r+0x12>

08026060 <raise>:
 8026060:	4b02      	ldr	r3, [pc, #8]	; (802606c <raise+0xc>)
 8026062:	4601      	mov	r1, r0
 8026064:	6818      	ldr	r0, [r3, #0]
 8026066:	f7ff bfd3 	b.w	8026010 <_raise_r>
 802606a:	bf00      	nop
 802606c:	200000ac 	.word	0x200000ac

08026070 <_kill_r>:
 8026070:	b538      	push	{r3, r4, r5, lr}
 8026072:	4c07      	ldr	r4, [pc, #28]	; (8026090 <_kill_r+0x20>)
 8026074:	2300      	movs	r3, #0
 8026076:	4605      	mov	r5, r0
 8026078:	4608      	mov	r0, r1
 802607a:	4611      	mov	r1, r2
 802607c:	6023      	str	r3, [r4, #0]
 802607e:	f7dd fc1d 	bl	80038bc <_kill>
 8026082:	1c43      	adds	r3, r0, #1
 8026084:	d102      	bne.n	802608c <_kill_r+0x1c>
 8026086:	6823      	ldr	r3, [r4, #0]
 8026088:	b103      	cbz	r3, 802608c <_kill_r+0x1c>
 802608a:	602b      	str	r3, [r5, #0]
 802608c:	bd38      	pop	{r3, r4, r5, pc}
 802608e:	bf00      	nop
 8026090:	2000ca54 	.word	0x2000ca54

08026094 <_getpid_r>:
 8026094:	f7dd bc0a 	b.w	80038ac <_getpid>

08026098 <__swbuf_r>:
 8026098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802609a:	460e      	mov	r6, r1
 802609c:	4614      	mov	r4, r2
 802609e:	4605      	mov	r5, r0
 80260a0:	b118      	cbz	r0, 80260aa <__swbuf_r+0x12>
 80260a2:	6983      	ldr	r3, [r0, #24]
 80260a4:	b90b      	cbnz	r3, 80260aa <__swbuf_r+0x12>
 80260a6:	f000 fa0b 	bl	80264c0 <__sinit>
 80260aa:	4b21      	ldr	r3, [pc, #132]	; (8026130 <__swbuf_r+0x98>)
 80260ac:	429c      	cmp	r4, r3
 80260ae:	d12a      	bne.n	8026106 <__swbuf_r+0x6e>
 80260b0:	686c      	ldr	r4, [r5, #4]
 80260b2:	69a3      	ldr	r3, [r4, #24]
 80260b4:	60a3      	str	r3, [r4, #8]
 80260b6:	89a3      	ldrh	r3, [r4, #12]
 80260b8:	071a      	lsls	r2, r3, #28
 80260ba:	d52e      	bpl.n	802611a <__swbuf_r+0x82>
 80260bc:	6923      	ldr	r3, [r4, #16]
 80260be:	b363      	cbz	r3, 802611a <__swbuf_r+0x82>
 80260c0:	6923      	ldr	r3, [r4, #16]
 80260c2:	6820      	ldr	r0, [r4, #0]
 80260c4:	1ac0      	subs	r0, r0, r3
 80260c6:	6963      	ldr	r3, [r4, #20]
 80260c8:	b2f6      	uxtb	r6, r6
 80260ca:	4283      	cmp	r3, r0
 80260cc:	4637      	mov	r7, r6
 80260ce:	dc04      	bgt.n	80260da <__swbuf_r+0x42>
 80260d0:	4621      	mov	r1, r4
 80260d2:	4628      	mov	r0, r5
 80260d4:	f000 f98a 	bl	80263ec <_fflush_r>
 80260d8:	bb28      	cbnz	r0, 8026126 <__swbuf_r+0x8e>
 80260da:	68a3      	ldr	r3, [r4, #8]
 80260dc:	3b01      	subs	r3, #1
 80260de:	60a3      	str	r3, [r4, #8]
 80260e0:	6823      	ldr	r3, [r4, #0]
 80260e2:	1c5a      	adds	r2, r3, #1
 80260e4:	6022      	str	r2, [r4, #0]
 80260e6:	701e      	strb	r6, [r3, #0]
 80260e8:	6963      	ldr	r3, [r4, #20]
 80260ea:	3001      	adds	r0, #1
 80260ec:	4283      	cmp	r3, r0
 80260ee:	d004      	beq.n	80260fa <__swbuf_r+0x62>
 80260f0:	89a3      	ldrh	r3, [r4, #12]
 80260f2:	07db      	lsls	r3, r3, #31
 80260f4:	d519      	bpl.n	802612a <__swbuf_r+0x92>
 80260f6:	2e0a      	cmp	r6, #10
 80260f8:	d117      	bne.n	802612a <__swbuf_r+0x92>
 80260fa:	4621      	mov	r1, r4
 80260fc:	4628      	mov	r0, r5
 80260fe:	f000 f975 	bl	80263ec <_fflush_r>
 8026102:	b190      	cbz	r0, 802612a <__swbuf_r+0x92>
 8026104:	e00f      	b.n	8026126 <__swbuf_r+0x8e>
 8026106:	4b0b      	ldr	r3, [pc, #44]	; (8026134 <__swbuf_r+0x9c>)
 8026108:	429c      	cmp	r4, r3
 802610a:	d101      	bne.n	8026110 <__swbuf_r+0x78>
 802610c:	68ac      	ldr	r4, [r5, #8]
 802610e:	e7d0      	b.n	80260b2 <__swbuf_r+0x1a>
 8026110:	4b09      	ldr	r3, [pc, #36]	; (8026138 <__swbuf_r+0xa0>)
 8026112:	429c      	cmp	r4, r3
 8026114:	bf08      	it	eq
 8026116:	68ec      	ldreq	r4, [r5, #12]
 8026118:	e7cb      	b.n	80260b2 <__swbuf_r+0x1a>
 802611a:	4621      	mov	r1, r4
 802611c:	4628      	mov	r0, r5
 802611e:	f000 f80d 	bl	802613c <__swsetup_r>
 8026122:	2800      	cmp	r0, #0
 8026124:	d0cc      	beq.n	80260c0 <__swbuf_r+0x28>
 8026126:	f04f 37ff 	mov.w	r7, #4294967295
 802612a:	4638      	mov	r0, r7
 802612c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802612e:	bf00      	nop
 8026130:	0802b88c 	.word	0x0802b88c
 8026134:	0802b8ac 	.word	0x0802b8ac
 8026138:	0802b86c 	.word	0x0802b86c

0802613c <__swsetup_r>:
 802613c:	4b32      	ldr	r3, [pc, #200]	; (8026208 <__swsetup_r+0xcc>)
 802613e:	b570      	push	{r4, r5, r6, lr}
 8026140:	681d      	ldr	r5, [r3, #0]
 8026142:	4606      	mov	r6, r0
 8026144:	460c      	mov	r4, r1
 8026146:	b125      	cbz	r5, 8026152 <__swsetup_r+0x16>
 8026148:	69ab      	ldr	r3, [r5, #24]
 802614a:	b913      	cbnz	r3, 8026152 <__swsetup_r+0x16>
 802614c:	4628      	mov	r0, r5
 802614e:	f000 f9b7 	bl	80264c0 <__sinit>
 8026152:	4b2e      	ldr	r3, [pc, #184]	; (802620c <__swsetup_r+0xd0>)
 8026154:	429c      	cmp	r4, r3
 8026156:	d10f      	bne.n	8026178 <__swsetup_r+0x3c>
 8026158:	686c      	ldr	r4, [r5, #4]
 802615a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802615e:	b29a      	uxth	r2, r3
 8026160:	0715      	lsls	r5, r2, #28
 8026162:	d42c      	bmi.n	80261be <__swsetup_r+0x82>
 8026164:	06d0      	lsls	r0, r2, #27
 8026166:	d411      	bmi.n	802618c <__swsetup_r+0x50>
 8026168:	2209      	movs	r2, #9
 802616a:	6032      	str	r2, [r6, #0]
 802616c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026170:	81a3      	strh	r3, [r4, #12]
 8026172:	f04f 30ff 	mov.w	r0, #4294967295
 8026176:	e03e      	b.n	80261f6 <__swsetup_r+0xba>
 8026178:	4b25      	ldr	r3, [pc, #148]	; (8026210 <__swsetup_r+0xd4>)
 802617a:	429c      	cmp	r4, r3
 802617c:	d101      	bne.n	8026182 <__swsetup_r+0x46>
 802617e:	68ac      	ldr	r4, [r5, #8]
 8026180:	e7eb      	b.n	802615a <__swsetup_r+0x1e>
 8026182:	4b24      	ldr	r3, [pc, #144]	; (8026214 <__swsetup_r+0xd8>)
 8026184:	429c      	cmp	r4, r3
 8026186:	bf08      	it	eq
 8026188:	68ec      	ldreq	r4, [r5, #12]
 802618a:	e7e6      	b.n	802615a <__swsetup_r+0x1e>
 802618c:	0751      	lsls	r1, r2, #29
 802618e:	d512      	bpl.n	80261b6 <__swsetup_r+0x7a>
 8026190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026192:	b141      	cbz	r1, 80261a6 <__swsetup_r+0x6a>
 8026194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026198:	4299      	cmp	r1, r3
 802619a:	d002      	beq.n	80261a2 <__swsetup_r+0x66>
 802619c:	4630      	mov	r0, r6
 802619e:	f7ff fbb7 	bl	8025910 <_free_r>
 80261a2:	2300      	movs	r3, #0
 80261a4:	6363      	str	r3, [r4, #52]	; 0x34
 80261a6:	89a3      	ldrh	r3, [r4, #12]
 80261a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80261ac:	81a3      	strh	r3, [r4, #12]
 80261ae:	2300      	movs	r3, #0
 80261b0:	6063      	str	r3, [r4, #4]
 80261b2:	6923      	ldr	r3, [r4, #16]
 80261b4:	6023      	str	r3, [r4, #0]
 80261b6:	89a3      	ldrh	r3, [r4, #12]
 80261b8:	f043 0308 	orr.w	r3, r3, #8
 80261bc:	81a3      	strh	r3, [r4, #12]
 80261be:	6923      	ldr	r3, [r4, #16]
 80261c0:	b94b      	cbnz	r3, 80261d6 <__swsetup_r+0x9a>
 80261c2:	89a3      	ldrh	r3, [r4, #12]
 80261c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80261c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80261cc:	d003      	beq.n	80261d6 <__swsetup_r+0x9a>
 80261ce:	4621      	mov	r1, r4
 80261d0:	4630      	mov	r0, r6
 80261d2:	f000 fa23 	bl	802661c <__smakebuf_r>
 80261d6:	89a2      	ldrh	r2, [r4, #12]
 80261d8:	f012 0301 	ands.w	r3, r2, #1
 80261dc:	d00c      	beq.n	80261f8 <__swsetup_r+0xbc>
 80261de:	2300      	movs	r3, #0
 80261e0:	60a3      	str	r3, [r4, #8]
 80261e2:	6963      	ldr	r3, [r4, #20]
 80261e4:	425b      	negs	r3, r3
 80261e6:	61a3      	str	r3, [r4, #24]
 80261e8:	6923      	ldr	r3, [r4, #16]
 80261ea:	b953      	cbnz	r3, 8026202 <__swsetup_r+0xc6>
 80261ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80261f4:	d1ba      	bne.n	802616c <__swsetup_r+0x30>
 80261f6:	bd70      	pop	{r4, r5, r6, pc}
 80261f8:	0792      	lsls	r2, r2, #30
 80261fa:	bf58      	it	pl
 80261fc:	6963      	ldrpl	r3, [r4, #20]
 80261fe:	60a3      	str	r3, [r4, #8]
 8026200:	e7f2      	b.n	80261e8 <__swsetup_r+0xac>
 8026202:	2000      	movs	r0, #0
 8026204:	e7f7      	b.n	80261f6 <__swsetup_r+0xba>
 8026206:	bf00      	nop
 8026208:	200000ac 	.word	0x200000ac
 802620c:	0802b88c 	.word	0x0802b88c
 8026210:	0802b8ac 	.word	0x0802b8ac
 8026214:	0802b86c 	.word	0x0802b86c

08026218 <__register_exitproc>:
 8026218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802621c:	4d2c      	ldr	r5, [pc, #176]	; (80262d0 <__register_exitproc+0xb8>)
 802621e:	682c      	ldr	r4, [r5, #0]
 8026220:	4607      	mov	r7, r0
 8026222:	460e      	mov	r6, r1
 8026224:	4691      	mov	r9, r2
 8026226:	4698      	mov	r8, r3
 8026228:	b934      	cbnz	r4, 8026238 <__register_exitproc+0x20>
 802622a:	4b2a      	ldr	r3, [pc, #168]	; (80262d4 <__register_exitproc+0xbc>)
 802622c:	4c2a      	ldr	r4, [pc, #168]	; (80262d8 <__register_exitproc+0xc0>)
 802622e:	602c      	str	r4, [r5, #0]
 8026230:	b113      	cbz	r3, 8026238 <__register_exitproc+0x20>
 8026232:	681b      	ldr	r3, [r3, #0]
 8026234:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026238:	6863      	ldr	r3, [r4, #4]
 802623a:	2b1f      	cmp	r3, #31
 802623c:	dd3d      	ble.n	80262ba <__register_exitproc+0xa2>
 802623e:	4b27      	ldr	r3, [pc, #156]	; (80262dc <__register_exitproc+0xc4>)
 8026240:	b91b      	cbnz	r3, 802624a <__register_exitproc+0x32>
 8026242:	f04f 30ff 	mov.w	r0, #4294967295
 8026246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802624a:	208c      	movs	r0, #140	; 0x8c
 802624c:	f7ff fb3c 	bl	80258c8 <malloc>
 8026250:	4604      	mov	r4, r0
 8026252:	2800      	cmp	r0, #0
 8026254:	d0f5      	beq.n	8026242 <__register_exitproc+0x2a>
 8026256:	2300      	movs	r3, #0
 8026258:	682a      	ldr	r2, [r5, #0]
 802625a:	6002      	str	r2, [r0, #0]
 802625c:	6043      	str	r3, [r0, #4]
 802625e:	6028      	str	r0, [r5, #0]
 8026260:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8026264:	b30f      	cbz	r7, 80262aa <__register_exitproc+0x92>
 8026266:	f44f 7084 	mov.w	r0, #264	; 0x108
 802626a:	f7ff fb2d 	bl	80258c8 <malloc>
 802626e:	2800      	cmp	r0, #0
 8026270:	d0e7      	beq.n	8026242 <__register_exitproc+0x2a>
 8026272:	2300      	movs	r3, #0
 8026274:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026278:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802627c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026280:	6862      	ldr	r2, [r4, #4]
 8026282:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8026286:	2301      	movs	r3, #1
 8026288:	4093      	lsls	r3, r2
 802628a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802628e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8026292:	431a      	orrs	r2, r3
 8026294:	2f02      	cmp	r7, #2
 8026296:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802629a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802629e:	bf02      	ittt	eq
 80262a0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80262a4:	4313      	orreq	r3, r2
 80262a6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80262aa:	6863      	ldr	r3, [r4, #4]
 80262ac:	1c5a      	adds	r2, r3, #1
 80262ae:	3302      	adds	r3, #2
 80262b0:	6062      	str	r2, [r4, #4]
 80262b2:	2000      	movs	r0, #0
 80262b4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80262b8:	e7c5      	b.n	8026246 <__register_exitproc+0x2e>
 80262ba:	2f00      	cmp	r7, #0
 80262bc:	d0f5      	beq.n	80262aa <__register_exitproc+0x92>
 80262be:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80262c2:	2800      	cmp	r0, #0
 80262c4:	d1dc      	bne.n	8026280 <__register_exitproc+0x68>
 80262c6:	4b05      	ldr	r3, [pc, #20]	; (80262dc <__register_exitproc+0xc4>)
 80262c8:	2b00      	cmp	r3, #0
 80262ca:	d0ba      	beq.n	8026242 <__register_exitproc+0x2a>
 80262cc:	e7cb      	b.n	8026266 <__register_exitproc+0x4e>
 80262ce:	bf00      	nop
 80262d0:	2000be4c 	.word	0x2000be4c
 80262d4:	0802b868 	.word	0x0802b868
 80262d8:	2000bdc0 	.word	0x2000bdc0
 80262dc:	080258c9 	.word	0x080258c9

080262e0 <__sflush_r>:
 80262e0:	898a      	ldrh	r2, [r1, #12]
 80262e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80262e6:	4605      	mov	r5, r0
 80262e8:	0710      	lsls	r0, r2, #28
 80262ea:	460c      	mov	r4, r1
 80262ec:	d458      	bmi.n	80263a0 <__sflush_r+0xc0>
 80262ee:	684b      	ldr	r3, [r1, #4]
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	dc05      	bgt.n	8026300 <__sflush_r+0x20>
 80262f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80262f6:	2b00      	cmp	r3, #0
 80262f8:	dc02      	bgt.n	8026300 <__sflush_r+0x20>
 80262fa:	2000      	movs	r0, #0
 80262fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026302:	2e00      	cmp	r6, #0
 8026304:	d0f9      	beq.n	80262fa <__sflush_r+0x1a>
 8026306:	2300      	movs	r3, #0
 8026308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802630c:	682f      	ldr	r7, [r5, #0]
 802630e:	6a21      	ldr	r1, [r4, #32]
 8026310:	602b      	str	r3, [r5, #0]
 8026312:	d032      	beq.n	802637a <__sflush_r+0x9a>
 8026314:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026316:	89a3      	ldrh	r3, [r4, #12]
 8026318:	075a      	lsls	r2, r3, #29
 802631a:	d505      	bpl.n	8026328 <__sflush_r+0x48>
 802631c:	6863      	ldr	r3, [r4, #4]
 802631e:	1ac0      	subs	r0, r0, r3
 8026320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026322:	b10b      	cbz	r3, 8026328 <__sflush_r+0x48>
 8026324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026326:	1ac0      	subs	r0, r0, r3
 8026328:	2300      	movs	r3, #0
 802632a:	4602      	mov	r2, r0
 802632c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802632e:	6a21      	ldr	r1, [r4, #32]
 8026330:	4628      	mov	r0, r5
 8026332:	47b0      	blx	r6
 8026334:	1c43      	adds	r3, r0, #1
 8026336:	89a3      	ldrh	r3, [r4, #12]
 8026338:	d106      	bne.n	8026348 <__sflush_r+0x68>
 802633a:	6829      	ldr	r1, [r5, #0]
 802633c:	291d      	cmp	r1, #29
 802633e:	d848      	bhi.n	80263d2 <__sflush_r+0xf2>
 8026340:	4a29      	ldr	r2, [pc, #164]	; (80263e8 <__sflush_r+0x108>)
 8026342:	40ca      	lsrs	r2, r1
 8026344:	07d6      	lsls	r6, r2, #31
 8026346:	d544      	bpl.n	80263d2 <__sflush_r+0xf2>
 8026348:	2200      	movs	r2, #0
 802634a:	6062      	str	r2, [r4, #4]
 802634c:	04d9      	lsls	r1, r3, #19
 802634e:	6922      	ldr	r2, [r4, #16]
 8026350:	6022      	str	r2, [r4, #0]
 8026352:	d504      	bpl.n	802635e <__sflush_r+0x7e>
 8026354:	1c42      	adds	r2, r0, #1
 8026356:	d101      	bne.n	802635c <__sflush_r+0x7c>
 8026358:	682b      	ldr	r3, [r5, #0]
 802635a:	b903      	cbnz	r3, 802635e <__sflush_r+0x7e>
 802635c:	6560      	str	r0, [r4, #84]	; 0x54
 802635e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026360:	602f      	str	r7, [r5, #0]
 8026362:	2900      	cmp	r1, #0
 8026364:	d0c9      	beq.n	80262fa <__sflush_r+0x1a>
 8026366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802636a:	4299      	cmp	r1, r3
 802636c:	d002      	beq.n	8026374 <__sflush_r+0x94>
 802636e:	4628      	mov	r0, r5
 8026370:	f7ff face 	bl	8025910 <_free_r>
 8026374:	2000      	movs	r0, #0
 8026376:	6360      	str	r0, [r4, #52]	; 0x34
 8026378:	e7c0      	b.n	80262fc <__sflush_r+0x1c>
 802637a:	2301      	movs	r3, #1
 802637c:	4628      	mov	r0, r5
 802637e:	47b0      	blx	r6
 8026380:	1c41      	adds	r1, r0, #1
 8026382:	d1c8      	bne.n	8026316 <__sflush_r+0x36>
 8026384:	682b      	ldr	r3, [r5, #0]
 8026386:	2b00      	cmp	r3, #0
 8026388:	d0c5      	beq.n	8026316 <__sflush_r+0x36>
 802638a:	2b1d      	cmp	r3, #29
 802638c:	d001      	beq.n	8026392 <__sflush_r+0xb2>
 802638e:	2b16      	cmp	r3, #22
 8026390:	d101      	bne.n	8026396 <__sflush_r+0xb6>
 8026392:	602f      	str	r7, [r5, #0]
 8026394:	e7b1      	b.n	80262fa <__sflush_r+0x1a>
 8026396:	89a3      	ldrh	r3, [r4, #12]
 8026398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802639c:	81a3      	strh	r3, [r4, #12]
 802639e:	e7ad      	b.n	80262fc <__sflush_r+0x1c>
 80263a0:	690f      	ldr	r7, [r1, #16]
 80263a2:	2f00      	cmp	r7, #0
 80263a4:	d0a9      	beq.n	80262fa <__sflush_r+0x1a>
 80263a6:	0793      	lsls	r3, r2, #30
 80263a8:	680e      	ldr	r6, [r1, #0]
 80263aa:	bf08      	it	eq
 80263ac:	694b      	ldreq	r3, [r1, #20]
 80263ae:	600f      	str	r7, [r1, #0]
 80263b0:	bf18      	it	ne
 80263b2:	2300      	movne	r3, #0
 80263b4:	eba6 0807 	sub.w	r8, r6, r7
 80263b8:	608b      	str	r3, [r1, #8]
 80263ba:	f1b8 0f00 	cmp.w	r8, #0
 80263be:	dd9c      	ble.n	80262fa <__sflush_r+0x1a>
 80263c0:	4643      	mov	r3, r8
 80263c2:	463a      	mov	r2, r7
 80263c4:	6a21      	ldr	r1, [r4, #32]
 80263c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80263c8:	4628      	mov	r0, r5
 80263ca:	47b0      	blx	r6
 80263cc:	2800      	cmp	r0, #0
 80263ce:	dc06      	bgt.n	80263de <__sflush_r+0xfe>
 80263d0:	89a3      	ldrh	r3, [r4, #12]
 80263d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80263d6:	81a3      	strh	r3, [r4, #12]
 80263d8:	f04f 30ff 	mov.w	r0, #4294967295
 80263dc:	e78e      	b.n	80262fc <__sflush_r+0x1c>
 80263de:	4407      	add	r7, r0
 80263e0:	eba8 0800 	sub.w	r8, r8, r0
 80263e4:	e7e9      	b.n	80263ba <__sflush_r+0xda>
 80263e6:	bf00      	nop
 80263e8:	20400001 	.word	0x20400001

080263ec <_fflush_r>:
 80263ec:	b538      	push	{r3, r4, r5, lr}
 80263ee:	690b      	ldr	r3, [r1, #16]
 80263f0:	4605      	mov	r5, r0
 80263f2:	460c      	mov	r4, r1
 80263f4:	b1db      	cbz	r3, 802642e <_fflush_r+0x42>
 80263f6:	b118      	cbz	r0, 8026400 <_fflush_r+0x14>
 80263f8:	6983      	ldr	r3, [r0, #24]
 80263fa:	b90b      	cbnz	r3, 8026400 <_fflush_r+0x14>
 80263fc:	f000 f860 	bl	80264c0 <__sinit>
 8026400:	4b0c      	ldr	r3, [pc, #48]	; (8026434 <_fflush_r+0x48>)
 8026402:	429c      	cmp	r4, r3
 8026404:	d109      	bne.n	802641a <_fflush_r+0x2e>
 8026406:	686c      	ldr	r4, [r5, #4]
 8026408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802640c:	b17b      	cbz	r3, 802642e <_fflush_r+0x42>
 802640e:	4621      	mov	r1, r4
 8026410:	4628      	mov	r0, r5
 8026412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026416:	f7ff bf63 	b.w	80262e0 <__sflush_r>
 802641a:	4b07      	ldr	r3, [pc, #28]	; (8026438 <_fflush_r+0x4c>)
 802641c:	429c      	cmp	r4, r3
 802641e:	d101      	bne.n	8026424 <_fflush_r+0x38>
 8026420:	68ac      	ldr	r4, [r5, #8]
 8026422:	e7f1      	b.n	8026408 <_fflush_r+0x1c>
 8026424:	4b05      	ldr	r3, [pc, #20]	; (802643c <_fflush_r+0x50>)
 8026426:	429c      	cmp	r4, r3
 8026428:	bf08      	it	eq
 802642a:	68ec      	ldreq	r4, [r5, #12]
 802642c:	e7ec      	b.n	8026408 <_fflush_r+0x1c>
 802642e:	2000      	movs	r0, #0
 8026430:	bd38      	pop	{r3, r4, r5, pc}
 8026432:	bf00      	nop
 8026434:	0802b88c 	.word	0x0802b88c
 8026438:	0802b8ac 	.word	0x0802b8ac
 802643c:	0802b86c 	.word	0x0802b86c

08026440 <std>:
 8026440:	2300      	movs	r3, #0
 8026442:	b510      	push	{r4, lr}
 8026444:	4604      	mov	r4, r0
 8026446:	e9c0 3300 	strd	r3, r3, [r0]
 802644a:	6083      	str	r3, [r0, #8]
 802644c:	8181      	strh	r1, [r0, #12]
 802644e:	6643      	str	r3, [r0, #100]	; 0x64
 8026450:	81c2      	strh	r2, [r0, #14]
 8026452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026456:	6183      	str	r3, [r0, #24]
 8026458:	4619      	mov	r1, r3
 802645a:	2208      	movs	r2, #8
 802645c:	305c      	adds	r0, #92	; 0x5c
 802645e:	f7ff fa4e 	bl	80258fe <memset>
 8026462:	4b05      	ldr	r3, [pc, #20]	; (8026478 <std+0x38>)
 8026464:	6263      	str	r3, [r4, #36]	; 0x24
 8026466:	4b05      	ldr	r3, [pc, #20]	; (802647c <std+0x3c>)
 8026468:	62a3      	str	r3, [r4, #40]	; 0x28
 802646a:	4b05      	ldr	r3, [pc, #20]	; (8026480 <std+0x40>)
 802646c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802646e:	4b05      	ldr	r3, [pc, #20]	; (8026484 <std+0x44>)
 8026470:	6224      	str	r4, [r4, #32]
 8026472:	6323      	str	r3, [r4, #48]	; 0x30
 8026474:	bd10      	pop	{r4, pc}
 8026476:	bf00      	nop
 8026478:	080266a1 	.word	0x080266a1
 802647c:	080266c3 	.word	0x080266c3
 8026480:	080266fb 	.word	0x080266fb
 8026484:	0802671f 	.word	0x0802671f

08026488 <_cleanup_r>:
 8026488:	4901      	ldr	r1, [pc, #4]	; (8026490 <_cleanup_r+0x8>)
 802648a:	f000 b885 	b.w	8026598 <_fwalk_reent>
 802648e:	bf00      	nop
 8026490:	080263ed 	.word	0x080263ed

08026494 <__sfmoreglue>:
 8026494:	b570      	push	{r4, r5, r6, lr}
 8026496:	1e4a      	subs	r2, r1, #1
 8026498:	2568      	movs	r5, #104	; 0x68
 802649a:	4355      	muls	r5, r2
 802649c:	460e      	mov	r6, r1
 802649e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80264a2:	f7ff fa83 	bl	80259ac <_malloc_r>
 80264a6:	4604      	mov	r4, r0
 80264a8:	b140      	cbz	r0, 80264bc <__sfmoreglue+0x28>
 80264aa:	2100      	movs	r1, #0
 80264ac:	e9c0 1600 	strd	r1, r6, [r0]
 80264b0:	300c      	adds	r0, #12
 80264b2:	60a0      	str	r0, [r4, #8]
 80264b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80264b8:	f7ff fa21 	bl	80258fe <memset>
 80264bc:	4620      	mov	r0, r4
 80264be:	bd70      	pop	{r4, r5, r6, pc}

080264c0 <__sinit>:
 80264c0:	6983      	ldr	r3, [r0, #24]
 80264c2:	b510      	push	{r4, lr}
 80264c4:	4604      	mov	r4, r0
 80264c6:	bb33      	cbnz	r3, 8026516 <__sinit+0x56>
 80264c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80264cc:	6503      	str	r3, [r0, #80]	; 0x50
 80264ce:	4b12      	ldr	r3, [pc, #72]	; (8026518 <__sinit+0x58>)
 80264d0:	4a12      	ldr	r2, [pc, #72]	; (802651c <__sinit+0x5c>)
 80264d2:	681b      	ldr	r3, [r3, #0]
 80264d4:	6282      	str	r2, [r0, #40]	; 0x28
 80264d6:	4298      	cmp	r0, r3
 80264d8:	bf04      	itt	eq
 80264da:	2301      	moveq	r3, #1
 80264dc:	6183      	streq	r3, [r0, #24]
 80264de:	f000 f81f 	bl	8026520 <__sfp>
 80264e2:	6060      	str	r0, [r4, #4]
 80264e4:	4620      	mov	r0, r4
 80264e6:	f000 f81b 	bl	8026520 <__sfp>
 80264ea:	60a0      	str	r0, [r4, #8]
 80264ec:	4620      	mov	r0, r4
 80264ee:	f000 f817 	bl	8026520 <__sfp>
 80264f2:	2200      	movs	r2, #0
 80264f4:	60e0      	str	r0, [r4, #12]
 80264f6:	2104      	movs	r1, #4
 80264f8:	6860      	ldr	r0, [r4, #4]
 80264fa:	f7ff ffa1 	bl	8026440 <std>
 80264fe:	2201      	movs	r2, #1
 8026500:	2109      	movs	r1, #9
 8026502:	68a0      	ldr	r0, [r4, #8]
 8026504:	f7ff ff9c 	bl	8026440 <std>
 8026508:	2202      	movs	r2, #2
 802650a:	2112      	movs	r1, #18
 802650c:	68e0      	ldr	r0, [r4, #12]
 802650e:	f7ff ff97 	bl	8026440 <std>
 8026512:	2301      	movs	r3, #1
 8026514:	61a3      	str	r3, [r4, #24]
 8026516:	bd10      	pop	{r4, pc}
 8026518:	0802b830 	.word	0x0802b830
 802651c:	08026489 	.word	0x08026489

08026520 <__sfp>:
 8026520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026522:	4b1b      	ldr	r3, [pc, #108]	; (8026590 <__sfp+0x70>)
 8026524:	681e      	ldr	r6, [r3, #0]
 8026526:	69b3      	ldr	r3, [r6, #24]
 8026528:	4607      	mov	r7, r0
 802652a:	b913      	cbnz	r3, 8026532 <__sfp+0x12>
 802652c:	4630      	mov	r0, r6
 802652e:	f7ff ffc7 	bl	80264c0 <__sinit>
 8026532:	3648      	adds	r6, #72	; 0x48
 8026534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026538:	3b01      	subs	r3, #1
 802653a:	d503      	bpl.n	8026544 <__sfp+0x24>
 802653c:	6833      	ldr	r3, [r6, #0]
 802653e:	b133      	cbz	r3, 802654e <__sfp+0x2e>
 8026540:	6836      	ldr	r6, [r6, #0]
 8026542:	e7f7      	b.n	8026534 <__sfp+0x14>
 8026544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026548:	b16d      	cbz	r5, 8026566 <__sfp+0x46>
 802654a:	3468      	adds	r4, #104	; 0x68
 802654c:	e7f4      	b.n	8026538 <__sfp+0x18>
 802654e:	2104      	movs	r1, #4
 8026550:	4638      	mov	r0, r7
 8026552:	f7ff ff9f 	bl	8026494 <__sfmoreglue>
 8026556:	6030      	str	r0, [r6, #0]
 8026558:	2800      	cmp	r0, #0
 802655a:	d1f1      	bne.n	8026540 <__sfp+0x20>
 802655c:	230c      	movs	r3, #12
 802655e:	603b      	str	r3, [r7, #0]
 8026560:	4604      	mov	r4, r0
 8026562:	4620      	mov	r0, r4
 8026564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026566:	4b0b      	ldr	r3, [pc, #44]	; (8026594 <__sfp+0x74>)
 8026568:	6665      	str	r5, [r4, #100]	; 0x64
 802656a:	e9c4 5500 	strd	r5, r5, [r4]
 802656e:	60a5      	str	r5, [r4, #8]
 8026570:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8026574:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026578:	2208      	movs	r2, #8
 802657a:	4629      	mov	r1, r5
 802657c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026580:	f7ff f9bd 	bl	80258fe <memset>
 8026584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802658c:	e7e9      	b.n	8026562 <__sfp+0x42>
 802658e:	bf00      	nop
 8026590:	0802b830 	.word	0x0802b830
 8026594:	ffff0001 	.word	0xffff0001

08026598 <_fwalk_reent>:
 8026598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802659c:	4680      	mov	r8, r0
 802659e:	4689      	mov	r9, r1
 80265a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80265a4:	2600      	movs	r6, #0
 80265a6:	b914      	cbnz	r4, 80265ae <_fwalk_reent+0x16>
 80265a8:	4630      	mov	r0, r6
 80265aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80265ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80265b2:	3f01      	subs	r7, #1
 80265b4:	d501      	bpl.n	80265ba <_fwalk_reent+0x22>
 80265b6:	6824      	ldr	r4, [r4, #0]
 80265b8:	e7f5      	b.n	80265a6 <_fwalk_reent+0xe>
 80265ba:	89ab      	ldrh	r3, [r5, #12]
 80265bc:	2b01      	cmp	r3, #1
 80265be:	d907      	bls.n	80265d0 <_fwalk_reent+0x38>
 80265c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80265c4:	3301      	adds	r3, #1
 80265c6:	d003      	beq.n	80265d0 <_fwalk_reent+0x38>
 80265c8:	4629      	mov	r1, r5
 80265ca:	4640      	mov	r0, r8
 80265cc:	47c8      	blx	r9
 80265ce:	4306      	orrs	r6, r0
 80265d0:	3568      	adds	r5, #104	; 0x68
 80265d2:	e7ee      	b.n	80265b2 <_fwalk_reent+0x1a>

080265d4 <__swhatbuf_r>:
 80265d4:	b570      	push	{r4, r5, r6, lr}
 80265d6:	460e      	mov	r6, r1
 80265d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80265dc:	2900      	cmp	r1, #0
 80265de:	b096      	sub	sp, #88	; 0x58
 80265e0:	4614      	mov	r4, r2
 80265e2:	461d      	mov	r5, r3
 80265e4:	da07      	bge.n	80265f6 <__swhatbuf_r+0x22>
 80265e6:	2300      	movs	r3, #0
 80265e8:	602b      	str	r3, [r5, #0]
 80265ea:	89b3      	ldrh	r3, [r6, #12]
 80265ec:	061a      	lsls	r2, r3, #24
 80265ee:	d410      	bmi.n	8026612 <__swhatbuf_r+0x3e>
 80265f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80265f4:	e00e      	b.n	8026614 <__swhatbuf_r+0x40>
 80265f6:	466a      	mov	r2, sp
 80265f8:	f000 f8b8 	bl	802676c <_fstat_r>
 80265fc:	2800      	cmp	r0, #0
 80265fe:	dbf2      	blt.n	80265e6 <__swhatbuf_r+0x12>
 8026600:	9a01      	ldr	r2, [sp, #4]
 8026602:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026606:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802660a:	425a      	negs	r2, r3
 802660c:	415a      	adcs	r2, r3
 802660e:	602a      	str	r2, [r5, #0]
 8026610:	e7ee      	b.n	80265f0 <__swhatbuf_r+0x1c>
 8026612:	2340      	movs	r3, #64	; 0x40
 8026614:	2000      	movs	r0, #0
 8026616:	6023      	str	r3, [r4, #0]
 8026618:	b016      	add	sp, #88	; 0x58
 802661a:	bd70      	pop	{r4, r5, r6, pc}

0802661c <__smakebuf_r>:
 802661c:	898b      	ldrh	r3, [r1, #12]
 802661e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026620:	079d      	lsls	r5, r3, #30
 8026622:	4606      	mov	r6, r0
 8026624:	460c      	mov	r4, r1
 8026626:	d507      	bpl.n	8026638 <__smakebuf_r+0x1c>
 8026628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802662c:	6023      	str	r3, [r4, #0]
 802662e:	6123      	str	r3, [r4, #16]
 8026630:	2301      	movs	r3, #1
 8026632:	6163      	str	r3, [r4, #20]
 8026634:	b002      	add	sp, #8
 8026636:	bd70      	pop	{r4, r5, r6, pc}
 8026638:	ab01      	add	r3, sp, #4
 802663a:	466a      	mov	r2, sp
 802663c:	f7ff ffca 	bl	80265d4 <__swhatbuf_r>
 8026640:	9900      	ldr	r1, [sp, #0]
 8026642:	4605      	mov	r5, r0
 8026644:	4630      	mov	r0, r6
 8026646:	f7ff f9b1 	bl	80259ac <_malloc_r>
 802664a:	b948      	cbnz	r0, 8026660 <__smakebuf_r+0x44>
 802664c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026650:	059a      	lsls	r2, r3, #22
 8026652:	d4ef      	bmi.n	8026634 <__smakebuf_r+0x18>
 8026654:	f023 0303 	bic.w	r3, r3, #3
 8026658:	f043 0302 	orr.w	r3, r3, #2
 802665c:	81a3      	strh	r3, [r4, #12]
 802665e:	e7e3      	b.n	8026628 <__smakebuf_r+0xc>
 8026660:	4b0d      	ldr	r3, [pc, #52]	; (8026698 <__smakebuf_r+0x7c>)
 8026662:	62b3      	str	r3, [r6, #40]	; 0x28
 8026664:	89a3      	ldrh	r3, [r4, #12]
 8026666:	6020      	str	r0, [r4, #0]
 8026668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802666c:	81a3      	strh	r3, [r4, #12]
 802666e:	9b00      	ldr	r3, [sp, #0]
 8026670:	6163      	str	r3, [r4, #20]
 8026672:	9b01      	ldr	r3, [sp, #4]
 8026674:	6120      	str	r0, [r4, #16]
 8026676:	b15b      	cbz	r3, 8026690 <__smakebuf_r+0x74>
 8026678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802667c:	4630      	mov	r0, r6
 802667e:	f000 f887 	bl	8026790 <_isatty_r>
 8026682:	b128      	cbz	r0, 8026690 <__smakebuf_r+0x74>
 8026684:	89a3      	ldrh	r3, [r4, #12]
 8026686:	f023 0303 	bic.w	r3, r3, #3
 802668a:	f043 0301 	orr.w	r3, r3, #1
 802668e:	81a3      	strh	r3, [r4, #12]
 8026690:	89a3      	ldrh	r3, [r4, #12]
 8026692:	431d      	orrs	r5, r3
 8026694:	81a5      	strh	r5, [r4, #12]
 8026696:	e7cd      	b.n	8026634 <__smakebuf_r+0x18>
 8026698:	08026489 	.word	0x08026489

0802669c <__malloc_lock>:
 802669c:	4770      	bx	lr

0802669e <__malloc_unlock>:
 802669e:	4770      	bx	lr

080266a0 <__sread>:
 80266a0:	b510      	push	{r4, lr}
 80266a2:	460c      	mov	r4, r1
 80266a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266a8:	f000 f894 	bl	80267d4 <_read_r>
 80266ac:	2800      	cmp	r0, #0
 80266ae:	bfab      	itete	ge
 80266b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80266b2:	89a3      	ldrhlt	r3, [r4, #12]
 80266b4:	181b      	addge	r3, r3, r0
 80266b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80266ba:	bfac      	ite	ge
 80266bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80266be:	81a3      	strhlt	r3, [r4, #12]
 80266c0:	bd10      	pop	{r4, pc}

080266c2 <__swrite>:
 80266c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266c6:	461f      	mov	r7, r3
 80266c8:	898b      	ldrh	r3, [r1, #12]
 80266ca:	05db      	lsls	r3, r3, #23
 80266cc:	4605      	mov	r5, r0
 80266ce:	460c      	mov	r4, r1
 80266d0:	4616      	mov	r6, r2
 80266d2:	d505      	bpl.n	80266e0 <__swrite+0x1e>
 80266d4:	2302      	movs	r3, #2
 80266d6:	2200      	movs	r2, #0
 80266d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266dc:	f000 f868 	bl	80267b0 <_lseek_r>
 80266e0:	89a3      	ldrh	r3, [r4, #12]
 80266e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80266e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80266ea:	81a3      	strh	r3, [r4, #12]
 80266ec:	4632      	mov	r2, r6
 80266ee:	463b      	mov	r3, r7
 80266f0:	4628      	mov	r0, r5
 80266f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80266f6:	f000 b817 	b.w	8026728 <_write_r>

080266fa <__sseek>:
 80266fa:	b510      	push	{r4, lr}
 80266fc:	460c      	mov	r4, r1
 80266fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026702:	f000 f855 	bl	80267b0 <_lseek_r>
 8026706:	1c43      	adds	r3, r0, #1
 8026708:	89a3      	ldrh	r3, [r4, #12]
 802670a:	bf15      	itete	ne
 802670c:	6560      	strne	r0, [r4, #84]	; 0x54
 802670e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026716:	81a3      	strheq	r3, [r4, #12]
 8026718:	bf18      	it	ne
 802671a:	81a3      	strhne	r3, [r4, #12]
 802671c:	bd10      	pop	{r4, pc}

0802671e <__sclose>:
 802671e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026722:	f000 b813 	b.w	802674c <_close_r>
	...

08026728 <_write_r>:
 8026728:	b538      	push	{r3, r4, r5, lr}
 802672a:	4c07      	ldr	r4, [pc, #28]	; (8026748 <_write_r+0x20>)
 802672c:	4605      	mov	r5, r0
 802672e:	4608      	mov	r0, r1
 8026730:	4611      	mov	r1, r2
 8026732:	2200      	movs	r2, #0
 8026734:	6022      	str	r2, [r4, #0]
 8026736:	461a      	mov	r2, r3
 8026738:	f7dd f8f7 	bl	800392a <_write>
 802673c:	1c43      	adds	r3, r0, #1
 802673e:	d102      	bne.n	8026746 <_write_r+0x1e>
 8026740:	6823      	ldr	r3, [r4, #0]
 8026742:	b103      	cbz	r3, 8026746 <_write_r+0x1e>
 8026744:	602b      	str	r3, [r5, #0]
 8026746:	bd38      	pop	{r3, r4, r5, pc}
 8026748:	2000ca54 	.word	0x2000ca54

0802674c <_close_r>:
 802674c:	b538      	push	{r3, r4, r5, lr}
 802674e:	4c06      	ldr	r4, [pc, #24]	; (8026768 <_close_r+0x1c>)
 8026750:	2300      	movs	r3, #0
 8026752:	4605      	mov	r5, r0
 8026754:	4608      	mov	r0, r1
 8026756:	6023      	str	r3, [r4, #0]
 8026758:	f7dd f903 	bl	8003962 <_close>
 802675c:	1c43      	adds	r3, r0, #1
 802675e:	d102      	bne.n	8026766 <_close_r+0x1a>
 8026760:	6823      	ldr	r3, [r4, #0]
 8026762:	b103      	cbz	r3, 8026766 <_close_r+0x1a>
 8026764:	602b      	str	r3, [r5, #0]
 8026766:	bd38      	pop	{r3, r4, r5, pc}
 8026768:	2000ca54 	.word	0x2000ca54

0802676c <_fstat_r>:
 802676c:	b538      	push	{r3, r4, r5, lr}
 802676e:	4c07      	ldr	r4, [pc, #28]	; (802678c <_fstat_r+0x20>)
 8026770:	2300      	movs	r3, #0
 8026772:	4605      	mov	r5, r0
 8026774:	4608      	mov	r0, r1
 8026776:	4611      	mov	r1, r2
 8026778:	6023      	str	r3, [r4, #0]
 802677a:	f7dd f8fe 	bl	800397a <_fstat>
 802677e:	1c43      	adds	r3, r0, #1
 8026780:	d102      	bne.n	8026788 <_fstat_r+0x1c>
 8026782:	6823      	ldr	r3, [r4, #0]
 8026784:	b103      	cbz	r3, 8026788 <_fstat_r+0x1c>
 8026786:	602b      	str	r3, [r5, #0]
 8026788:	bd38      	pop	{r3, r4, r5, pc}
 802678a:	bf00      	nop
 802678c:	2000ca54 	.word	0x2000ca54

08026790 <_isatty_r>:
 8026790:	b538      	push	{r3, r4, r5, lr}
 8026792:	4c06      	ldr	r4, [pc, #24]	; (80267ac <_isatty_r+0x1c>)
 8026794:	2300      	movs	r3, #0
 8026796:	4605      	mov	r5, r0
 8026798:	4608      	mov	r0, r1
 802679a:	6023      	str	r3, [r4, #0]
 802679c:	f7dd f8fd 	bl	800399a <_isatty>
 80267a0:	1c43      	adds	r3, r0, #1
 80267a2:	d102      	bne.n	80267aa <_isatty_r+0x1a>
 80267a4:	6823      	ldr	r3, [r4, #0]
 80267a6:	b103      	cbz	r3, 80267aa <_isatty_r+0x1a>
 80267a8:	602b      	str	r3, [r5, #0]
 80267aa:	bd38      	pop	{r3, r4, r5, pc}
 80267ac:	2000ca54 	.word	0x2000ca54

080267b0 <_lseek_r>:
 80267b0:	b538      	push	{r3, r4, r5, lr}
 80267b2:	4c07      	ldr	r4, [pc, #28]	; (80267d0 <_lseek_r+0x20>)
 80267b4:	4605      	mov	r5, r0
 80267b6:	4608      	mov	r0, r1
 80267b8:	4611      	mov	r1, r2
 80267ba:	2200      	movs	r2, #0
 80267bc:	6022      	str	r2, [r4, #0]
 80267be:	461a      	mov	r2, r3
 80267c0:	f7dd f8f6 	bl	80039b0 <_lseek>
 80267c4:	1c43      	adds	r3, r0, #1
 80267c6:	d102      	bne.n	80267ce <_lseek_r+0x1e>
 80267c8:	6823      	ldr	r3, [r4, #0]
 80267ca:	b103      	cbz	r3, 80267ce <_lseek_r+0x1e>
 80267cc:	602b      	str	r3, [r5, #0]
 80267ce:	bd38      	pop	{r3, r4, r5, pc}
 80267d0:	2000ca54 	.word	0x2000ca54

080267d4 <_read_r>:
 80267d4:	b538      	push	{r3, r4, r5, lr}
 80267d6:	4c07      	ldr	r4, [pc, #28]	; (80267f4 <_read_r+0x20>)
 80267d8:	4605      	mov	r5, r0
 80267da:	4608      	mov	r0, r1
 80267dc:	4611      	mov	r1, r2
 80267de:	2200      	movs	r2, #0
 80267e0:	6022      	str	r2, [r4, #0]
 80267e2:	461a      	mov	r2, r3
 80267e4:	f7dd f884 	bl	80038f0 <_read>
 80267e8:	1c43      	adds	r3, r0, #1
 80267ea:	d102      	bne.n	80267f2 <_read_r+0x1e>
 80267ec:	6823      	ldr	r3, [r4, #0]
 80267ee:	b103      	cbz	r3, 80267f2 <_read_r+0x1e>
 80267f0:	602b      	str	r3, [r5, #0]
 80267f2:	bd38      	pop	{r3, r4, r5, pc}
 80267f4:	2000ca54 	.word	0x2000ca54

080267f8 <_init>:
 80267f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267fa:	bf00      	nop
 80267fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80267fe:	bc08      	pop	{r3}
 8026800:	469e      	mov	lr, r3
 8026802:	4770      	bx	lr

08026804 <_fini>:
 8026804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026806:	bf00      	nop
 8026808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802680a:	bc08      	pop	{r3}
 802680c:	469e      	mov	lr, r3
 802680e:	4770      	bx	lr
